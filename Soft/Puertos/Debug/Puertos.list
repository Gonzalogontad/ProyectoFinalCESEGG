
Puertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000632c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006684  08006684  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006684  08006684  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006684  08006684  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006684  08006684  00016684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006688  08006688  00016688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800668c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000010  0800669c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800669c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f800  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002479  00000000  00000000  0002f839  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff0  00000000  00000000  00031cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000151bc  00000000  00000000  00032ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f2de  00000000  00000000  00047e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00075552  00000000  00000000  00057142  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000cc694  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000eb0  00000000  00000000  000cc710  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00004144  00000000  00000000  000cd5c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08006420 	.word	0x08006420

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08006420 	.word	0x08006420

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 ffbb 	bl	8001104 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fb59 	bl	800084a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000198:	2300      	movs	r3, #0
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fb05 	bl	80017b8 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fb49 	bl	800084a <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <MX_ADC2_Init+0x74>)
 8000206:	f000 ff7d 	bl	8001104 <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f000 fb1b 	bl	800084a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000214:	2301      	movs	r3, #1
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_ADC2_Init+0x74>)
 8000226:	f001 fac7 	bl	80017b8 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f000 fb0b 	bl	800084a <Error_Handler>
  }

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000078 	.word	0x20000078
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	; 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a28      	ldr	r2, [pc, #160]	; (8000300 <HAL_ADC_MspInit+0xbc>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d122      	bne.n	80002aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a26      	ldr	r2, [pc, #152]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a20      	ldr	r2, [pc, #128]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	4819      	ldr	r0, [pc, #100]	; (8000308 <HAL_ADC_MspInit+0xc4>)
 80002a4:	f001 fe96 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002a8:	e026      	b.n	80002f8 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <HAL_ADC_MspInit+0xc8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d121      	bne.n	80002f8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <HAL_ADC_MspInit+0xc4>)
 80002f4:	f001 fe6e 	bl	8001fd4 <HAL_GPIO_Init>
}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	; 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40012400 	.word	0x40012400
 8000304:	40021000 	.word	0x40021000
 8000308:	40010800 	.word	0x40010800
 800030c:	40012800 	.word	0x40012800

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b3d      	ldr	r3, [pc, #244]	; (800041c <MX_GPIO_Init+0x10c>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a3c      	ldr	r2, [pc, #240]	; (800041c <MX_GPIO_Init+0x10c>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b3a      	ldr	r3, [pc, #232]	; (800041c <MX_GPIO_Init+0x10c>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033c:	4b37      	ldr	r3, [pc, #220]	; (800041c <MX_GPIO_Init+0x10c>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a36      	ldr	r2, [pc, #216]	; (800041c <MX_GPIO_Init+0x10c>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b34      	ldr	r3, [pc, #208]	; (800041c <MX_GPIO_Init+0x10c>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0304 	and.w	r3, r3, #4
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000354:	4b31      	ldr	r3, [pc, #196]	; (800041c <MX_GPIO_Init+0x10c>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a30      	ldr	r2, [pc, #192]	; (800041c <MX_GPIO_Init+0x10c>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <MX_GPIO_Init+0x10c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0308 	and.w	r3, r3, #8
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ModuleHeartBeat_GPIO_Port, ModuleHeartBeat_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	482b      	ldr	r0, [pc, #172]	; (8000420 <MX_GPIO_Init+0x110>)
 8000374:	f002 f88e 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ModuleOut0_Pin|ModuleOut1_Pin|ModuleOut2_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	211c      	movs	r1, #28
 800037c:	4829      	ldr	r0, [pc, #164]	; (8000424 <MX_GPIO_Init+0x114>)
 800037e:	f002 f889 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2101      	movs	r1, #1
 8000386:	4828      	ldr	r0, [pc, #160]	; (8000428 <MX_GPIO_Init+0x118>)
 8000388:	f002 f884 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ModuleHeartBeat_Pin;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ModuleHeartBeat_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	481e      	ldr	r0, [pc, #120]	; (8000420 <MX_GPIO_Init+0x110>)
 80003a6:	f001 fe15 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ModuleOut0_Pin|ModuleOut1_Pin|ModuleOut2_Pin;
 80003aa:	231c      	movs	r3, #28
 80003ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ae:	2301      	movs	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	4818      	ldr	r0, [pc, #96]	; (8000424 <MX_GPIO_Init+0x114>)
 80003c2:	f001 fe07 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ModuleIn0_Pin|ModuleIn1_Pin|ModuleIn2_Pin;
 80003c6:	23e0      	movs	r3, #224	; 0xe0
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	4812      	ldr	r0, [pc, #72]	; (8000424 <MX_GPIO_Init+0x114>)
 80003da:	f001 fdfb 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003de:	2301      	movs	r3, #1
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <MX_GPIO_Init+0x118>)
 80003f6:	f001 fded 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = ModuelAddr0_Pin|ModuelAddr1_Pin|ModuelAddr2_Pin|ModuelAddr3_Pin 
 80003fa:	f24f 0338 	movw	r3, #61496	; 0xf038
 80003fe:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <MX_GPIO_Init+0x118>)
 8000410:	f001 fde0 	bl	8001fd4 <HAL_GPIO_Init>

}
 8000414:	bf00      	nop
 8000416:	3720      	adds	r7, #32
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	40011000 	.word	0x40011000
 8000424:	40010800 	.word	0x40010800
 8000428:	40010c00 	.word	0x40010c00

0800042c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_I2C1_Init+0x50>)
 8000432:	4a13      	ldr	r2, [pc, #76]	; (8000480 <MX_I2C1_Init+0x54>)
 8000434:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_I2C1_Init+0x50>)
 8000438:	4a12      	ldr	r2, [pc, #72]	; (8000484 <MX_I2C1_Init+0x58>)
 800043a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_I2C1_Init+0x50>)
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_I2C1_Init+0x50>)
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_I2C1_Init+0x50>)
 800044a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800044e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_I2C1_Init+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_I2C1_Init+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_I2C1_Init+0x50>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_I2C1_Init+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_I2C1_Init+0x50>)
 800046a:	f002 f86b 	bl	8002544 <HAL_I2C_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000474:	f000 f9e9 	bl	800084a <Error_Handler>
  }

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200000d8 	.word	0x200000d8
 8000480:	40005400 	.word	0x40005400
 8000484:	000186a0 	.word	0x000186a0

08000488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a19      	ldr	r2, [pc, #100]	; (8000508 <HAL_I2C_MspInit+0x80>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d12b      	bne.n	8000500 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <HAL_I2C_MspInit+0x84>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a17      	ldr	r2, [pc, #92]	; (800050c <HAL_I2C_MspInit+0x84>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_I2C_MspInit+0x84>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = DAC_SCL_Pin|DAC_SDA_Pin;
 80004c0:	23c0      	movs	r3, #192	; 0xc0
 80004c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004c4:	2312      	movs	r3, #18
 80004c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c8:	2303      	movs	r3, #3
 80004ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	480f      	ldr	r0, [pc, #60]	; (8000510 <HAL_I2C_MspInit+0x88>)
 80004d4:	f001 fd7e 	bl	8001fd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_I2C_MspInit+0x84>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <HAL_I2C_MspInit+0x84>)
 80004de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e2:	61d3      	str	r3, [r2, #28]
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_I2C_MspInit+0x84>)
 80004e6:	69db      	ldr	r3, [r3, #28]
 80004e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2102      	movs	r1, #2
 80004f4:	201f      	movs	r0, #31
 80004f6:	f001 fc9b 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80004fa:	201f      	movs	r0, #31
 80004fc:	f001 fcc4 	bl	8001e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000500:	bf00      	nop
 8000502:	3720      	adds	r7, #32
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40005400 	.word	0x40005400
 800050c:	40021000 	.word	0x40021000
 8000510:	40010c00 	.word	0x40010c00

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t mcpData [2]; //Datos para la interfaz I2C
	uint32_t heartBeatTimeout = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fd8f 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f93b 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f7ff fef3 	bl	8000310 <MX_GPIO_Init>
  MX_ADC1_Init();
 800052a:	f7ff fe0f 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 800052e:	f7ff fe4b 	bl	80001c8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000532:	f7ff ff7b 	bl	800042c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000536:	f000 fa47 	bl	80009c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800053a:	f000 fc3d 	bl	8000db8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Leo el address del modulo
  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) //
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4887      	ldr	r0, [pc, #540]	; (8000760 <main+0x24c>)
 8000544:	f001 ff80 	bl	8002448 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d007      	beq.n	800055e <main+0x4a>
	moduleAddr = moduleAddr | 0x00000001;
 800054e:	4b85      	ldr	r3, [pc, #532]	; (8000764 <main+0x250>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b82      	ldr	r3, [pc, #520]	; (8000764 <main+0x250>)
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e006      	b.n	800056c <main+0x58>
  else
	moduleAddr = moduleAddr & 0xFFFFFFFE;
 800055e:	4b81      	ldr	r3, [pc, #516]	; (8000764 <main+0x250>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	f023 0301 	bic.w	r3, r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b7e      	ldr	r3, [pc, #504]	; (8000764 <main+0x250>)
 800056a:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13))
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	487b      	ldr	r0, [pc, #492]	; (8000760 <main+0x24c>)
 8000572:	f001 ff69 	bl	8002448 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d007      	beq.n	800058c <main+0x78>
	moduleAddr = moduleAddr | 0x00000002;
 800057c:	4b79      	ldr	r3, [pc, #484]	; (8000764 <main+0x250>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	f043 0302 	orr.w	r3, r3, #2
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b77      	ldr	r3, [pc, #476]	; (8000764 <main+0x250>)
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e006      	b.n	800059a <main+0x86>
  else
	moduleAddr = moduleAddr & 0xFFFFFFFD;
 800058c:	4b75      	ldr	r3, [pc, #468]	; (8000764 <main+0x250>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f023 0302 	bic.w	r3, r3, #2
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b73      	ldr	r3, [pc, #460]	; (8000764 <main+0x250>)
 8000598:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14))
 800059a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059e:	4870      	ldr	r0, [pc, #448]	; (8000760 <main+0x24c>)
 80005a0:	f001 ff52 	bl	8002448 <HAL_GPIO_ReadPin>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d007      	beq.n	80005ba <main+0xa6>
	moduleAddr = moduleAddr | 0x00000004;
 80005aa:	4b6e      	ldr	r3, [pc, #440]	; (8000764 <main+0x250>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b6b      	ldr	r3, [pc, #428]	; (8000764 <main+0x250>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e006      	b.n	80005c8 <main+0xb4>
  else
	moduleAddr = moduleAddr & 0xFFFFFFFB;
 80005ba:	4b6a      	ldr	r3, [pc, #424]	; (8000764 <main+0x250>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	f023 0304 	bic.w	r3, r3, #4
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b67      	ldr	r3, [pc, #412]	; (8000764 <main+0x250>)
 80005c6:	701a      	strb	r2, [r3, #0]

  heartBeatTimeout= HAL_GetTick() + HEART_BEAT_PERIOD;
 80005c8:	f000 fd92 	bl	80010f0 <HAL_GetTick>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80005d2:	607b      	str	r3, [r7, #4]

  HAL_ADC_Start(&hadc1); // start the adc1
 80005d4:	4864      	ldr	r0, [pc, #400]	; (8000768 <main+0x254>)
 80005d6:	f000 feff 	bl	80013d8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); // start the adc2
 80005da:	4864      	ldr	r0, [pc, #400]	; (800076c <main+0x258>)
 80005dc:	f000 fefc 	bl	80013d8 <HAL_ADC_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 80005e0:	4863      	ldr	r0, [pc, #396]	; (8000770 <main+0x25c>)
 80005e2:	f004 fcc9 	bl	8004f78 <HAL_TIM_Base_Start_IT>

  //Disparo la recepcion por interrupcion de la UART
  	if(HAL_UART_Receive_IT(&huart1, (uint8_t*) &bufferUARTin[receiveIndex], 1) != HAL_OK)
 80005e6:	4b63      	ldr	r3, [pc, #396]	; (8000774 <main+0x260>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b62      	ldr	r3, [pc, #392]	; (8000778 <main+0x264>)
 80005ee:	4413      	add	r3, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	4861      	ldr	r0, [pc, #388]	; (800077c <main+0x268>)
 80005f6:	f005 fb4d 	bl	8005c94 <HAL_UART_Receive_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <main+0xf0>
  	  {
  	    Error_Handler();
 8000600:	f000 f923 	bl	800084a <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  //Si hay datos para el DAC y las salidas digitales las actualizo
	  if (dataFlag == 1)
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <main+0x26c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d153      	bne.n	80006b4 <main+0x1a0>
	  {
		mcpData [0] = DACData[0];
 800060c:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <main+0x270>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	703b      	strb	r3, [r7, #0]
		mcpData [1] = DACData[1];
 8000612:	4b5c      	ldr	r3, [pc, #368]	; (8000784 <main+0x270>)
 8000614:	785b      	ldrb	r3, [r3, #1]
 8000616:	707b      	strb	r3, [r7, #1]
		dataFlag = 0;
 8000618:	4b59      	ldr	r3, [pc, #356]	; (8000780 <main+0x26c>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, mcpAddress, mcpData, (uint16_t) 2);
 800061e:	4b5a      	ldr	r3, [pc, #360]	; (8000788 <main+0x274>)
 8000620:	8819      	ldrh	r1, [r3, #0]
 8000622:	463a      	mov	r2, r7
 8000624:	2302      	movs	r3, #2
 8000626:	4859      	ldr	r0, [pc, #356]	; (800078c <main+0x278>)
 8000628:	f002 f936 	bl	8002898 <HAL_I2C_Master_Transmit_IT>

		if (outData & 0x01)
 800062c:	4b58      	ldr	r3, [pc, #352]	; (8000790 <main+0x27c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <main+0x130>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2104      	movs	r1, #4
 800063c:	4855      	ldr	r0, [pc, #340]	; (8000794 <main+0x280>)
 800063e:	f001 ff29 	bl	8002494 <HAL_GPIO_WritePin>
 8000642:	e004      	b.n	800064e <main+0x13a>
		else
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2104      	movs	r1, #4
 8000648:	4852      	ldr	r0, [pc, #328]	; (8000794 <main+0x280>)
 800064a:	f001 ff23 	bl	8002494 <HAL_GPIO_WritePin>
		if (outData & 0x02)
 800064e:	4b50      	ldr	r3, [pc, #320]	; (8000790 <main+0x27c>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <main+0x152>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2108      	movs	r1, #8
 800065e:	484d      	ldr	r0, [pc, #308]	; (8000794 <main+0x280>)
 8000660:	f001 ff18 	bl	8002494 <HAL_GPIO_WritePin>
 8000664:	e004      	b.n	8000670 <main+0x15c>
		else
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	484a      	ldr	r0, [pc, #296]	; (8000794 <main+0x280>)
 800066c:	f001 ff12 	bl	8002494 <HAL_GPIO_WritePin>
		if (outData & 0x04)
 8000670:	4b47      	ldr	r3, [pc, #284]	; (8000790 <main+0x27c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	2b00      	cmp	r3, #0
 800067a:	d005      	beq.n	8000688 <main+0x174>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2110      	movs	r1, #16
 8000680:	4844      	ldr	r0, [pc, #272]	; (8000794 <main+0x280>)
 8000682:	f001 ff07 	bl	8002494 <HAL_GPIO_WritePin>
 8000686:	e004      	b.n	8000692 <main+0x17e>
		else
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	4841      	ldr	r0, [pc, #260]	; (8000794 <main+0x280>)
 800068e:	f001 ff01 	bl	8002494 <HAL_GPIO_WritePin>
		if (outData & 0x08)
 8000692:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <main+0x27c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	2b00      	cmp	r3, #0
 800069c:	d005      	beq.n	80006aa <main+0x196>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	482f      	ldr	r0, [pc, #188]	; (8000760 <main+0x24c>)
 80006a4:	f001 fef6 	bl	8002494 <HAL_GPIO_WritePin>
 80006a8:	e004      	b.n	80006b4 <main+0x1a0>
		else
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	482c      	ldr	r0, [pc, #176]	; (8000760 <main+0x24c>)
 80006b0:	f001 fef0 	bl	8002494 <HAL_GPIO_WritePin>
	  }


	  if (HAL_GetTick()>=heartBeatTimeout)
 80006b4:	f000 fd1c 	bl	80010f0 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4293      	cmp	r3, r2
 80006be:	d8a1      	bhi.n	8000604 <main+0xf0>
		  {
		  heartBeatTimeout = heartBeatTimeout+HEART_BEAT_PERIOD;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80006c6:	607b      	str	r3, [r7, #4]

		  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13); //Heartbeat
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4832      	ldr	r0, [pc, #200]	; (8000798 <main+0x284>)
 80006ce:	f001 ff13 	bl	80024f8 <HAL_GPIO_TogglePin>

		  //Lectura de entradas digitales
		  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)) //
 80006d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d6:	4822      	ldr	r0, [pc, #136]	; (8000760 <main+0x24c>)
 80006d8:	f001 feb6 	bl	8002448 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <main+0x1de>
			moduleAddr = moduleAddr | 0x00000001; //Si pasaro 10 bits en 1 pongo en 1 el primer bit
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <main+0x250>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <main+0x250>)
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	e006      	b.n	8000700 <main+0x1ec>
		  else
			moduleAddr = moduleAddr & 0xFFFFFFFE;	//Si pasaro 10 bits en 0 pongo en 0 el primer bit
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <main+0x250>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <main+0x250>)
 80006fe:	701a      	strb	r2, [r3, #0]

		  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)) //
 8000700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000704:	4816      	ldr	r0, [pc, #88]	; (8000760 <main+0x24c>)
 8000706:	f001 fe9f 	bl	8002448 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d007      	beq.n	8000720 <main+0x20c>
			moduleAddr = moduleAddr | 0x00000002; //Si pasaro 10 bits en 1 pongo en 1 el segundo bit
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <main+0x250>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <main+0x250>)
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	e006      	b.n	800072e <main+0x21a>
		  else
			moduleAddr = moduleAddr & 0xFFFFFFFD; //Si pasaro 10 bits en 0 pongo en 0 el segundo bit
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x250>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f023 0302 	bic.w	r3, r3, #2
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <main+0x250>)
 800072c:	701a      	strb	r2, [r3, #0]

		  if (HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)) //
 800072e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000732:	480b      	ldr	r0, [pc, #44]	; (8000760 <main+0x24c>)
 8000734:	f001 fe88 	bl	8002448 <HAL_GPIO_ReadPin>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d007      	beq.n	800074e <main+0x23a>
			moduleAddr = moduleAddr | 0x00000004; //Si pasaro 10 bits en 1 pongo en 1 el tercer bit
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <main+0x250>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <main+0x250>)
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e75a      	b.n	8000604 <main+0xf0>
		  else
			moduleAddr = moduleAddr & 0xFFFFFFFB; //Si pasaro 10 bits en 0 pongo en 0 el tercer bit
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <main+0x250>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f023 0304 	bic.w	r3, r3, #4
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <main+0x250>)
 800075a:	701a      	strb	r2, [r3, #0]
	  if (dataFlag == 1)
 800075c:	e752      	b.n	8000604 <main+0xf0>
 800075e:	bf00      	nop
 8000760:	40010c00 	.word	0x40010c00
 8000764:	20000054 	.word	0x20000054
 8000768:	200000a8 	.word	0x200000a8
 800076c:	20000078 	.word	0x20000078
 8000770:	2000012c 	.word	0x2000012c
 8000774:	2000002c 	.word	0x2000002c
 8000778:	20000040 	.word	0x20000040
 800077c:	2000016c 	.word	0x2000016c
 8000780:	2000002d 	.word	0x2000002d
 8000784:	20000068 	.word	0x20000068
 8000788:	20000000 	.word	0x20000000
 800078c:	200000d8 	.word	0x200000d8
 8000790:	20000045 	.word	0x20000045
 8000794:	40010800 	.word	0x40010800
 8000798:	40011000 	.word	0x40011000

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a6:	2228      	movs	r2, #40	; 0x28
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 fe30 	bl	8006410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007cc:	2302      	movs	r3, #2
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d0:	2301      	movs	r3, #1
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	2310      	movs	r3, #16
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 fbb0 	bl	8003f50 <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007f6:	f000 f828 	bl	800084a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000810:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f003 ff09 	bl	8004630 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000824:	f000 f811 	bl	800084a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000828:	2302      	movs	r3, #2
 800082a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f004 f93e 	bl	8004ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800083e:	f000 f804 	bl	800084a <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_MspInit+0x5c>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_MspInit+0x5c>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6193      	str	r3, [r2, #24]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x5c>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_MspInit+0x5c>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_MspInit+0x60>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_MspInit+0x60>)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010000 	.word	0x40010000

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <HardFault_Handler+0x4>

080008e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <MemManage_Handler+0x4>

080008e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <BusFault_Handler+0x4>

080008ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 fbd6 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <TIM3_IRQHandler+0x10>)
 800092a:	f004 fb69 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000012c 	.word	0x2000012c

08000938 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <I2C1_EV_IRQHandler+0x10>)
 800093e:	f002 f84f 	bl	80029e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000d8 	.word	0x200000d8

0800094c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <USART1_IRQHandler+0x10>)
 8000952:	f005 f9f3 	bl	8005d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000016c 	.word	0x2000016c

08000960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <SystemInit+0x5c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <SystemInit+0x5c>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <SystemInit+0x5c>)
 8000972:	685a      	ldr	r2, [r3, #4]
 8000974:	4911      	ldr	r1, [pc, #68]	; (80009bc <SystemInit+0x5c>)
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <SystemInit+0x60>)
 8000978:	4013      	ands	r3, r2
 800097a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <SystemInit+0x5c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <SystemInit+0x5c>)
 8000982:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <SystemInit+0x5c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <SystemInit+0x5c>)
 8000992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000996:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <SystemInit+0x5c>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <SystemInit+0x5c>)
 800099e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <SystemInit+0x5c>)
 80009a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80009aa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SystemInit+0x64>)
 80009ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b2:	609a      	str	r2, [r3, #8]
#endif 
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	f8ff0000 	.word	0xf8ff0000
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009dc:	463b      	mov	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_TIM3_Init+0x94>)
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <MX_TIM3_Init+0x98>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_TIM3_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM3_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM3_Init+0x94>)
 80009f8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80009fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_TIM3_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_TIM3_Init+0x94>)
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <MX_TIM3_Init+0x94>)
 8000a0c:	f004 fa2e 	bl	8004e6c <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a16:	f7ff ff18 	bl	800084a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_TIM3_Init+0x94>)
 8000a28:	f004 fbf2 	bl	8005210 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f7ff ff0a 	bl	800084a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_TIM3_Init+0x94>)
 8000a44:	f004 ff92 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000a4e:	f7ff fefc 	bl	800084a <Error_Handler>
  }

}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2000012c 	.word	0x2000012c
 8000a60:	40000400 	.word	0x40000400

08000a64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_TIM_Base_MspInit+0x44>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d113      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2101      	movs	r1, #1
 8000a92:	201d      	movs	r0, #29
 8000a94:	f001 f9cc 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a98:	201d      	movs	r0, #29
 8000a9a:	f001 f9f5 	bl	8001e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40000400 	.word	0x40000400
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_TIM_PeriodElapsedCallback>:
} 

/* USER CODE BEGIN 1 */
//Callback interrupcion de Timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	uint8_t dataUpdateIndex;

	  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);


	  sumADC1=sumADC1-bufferADC1[buffLast];
 8000ab8:	4b74      	ldr	r3, [pc, #464]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a74      	ldr	r2, [pc, #464]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000abe:	7812      	ldrb	r2, [r2, #0]
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4a74      	ldr	r2, [pc, #464]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ac4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	4a70      	ldr	r2, [pc, #448]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000acc:	6013      	str	r3, [r2, #0]
	  sumADC2=sumADC2-bufferADC2[buffLast];
 8000ace:	4b72      	ldr	r3, [pc, #456]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a6f      	ldr	r2, [pc, #444]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4a70      	ldr	r2, [pc, #448]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000ada:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	4a6d      	ldr	r2, [pc, #436]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000ae2:	6013      	str	r3, [r2, #0]

	  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
	  HAL_ADC_Start(&hadc2); // start the adc2
 8000ae4:	486e      	ldr	r0, [pc, #440]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000ae6:	f000 fc77 	bl	80013d8 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc1); // start the adc1
 8000aea:	486e      	ldr	r0, [pc, #440]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000aec:	f000 fc74 	bl	80013d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1); // poll for conversion
 8000af0:	2101      	movs	r1, #1
 8000af2:	486b      	ldr	r0, [pc, #428]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000af4:	f000 fd30 	bl	8001558 <HAL_ADC_PollForConversion>
	  HAL_ADC_PollForConversion(&hadc1, 1); // poll for conversion
 8000af8:	2101      	movs	r1, #1
 8000afa:	486a      	ldr	r0, [pc, #424]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000afc:	f000 fd2c 	bl	8001558 <HAL_ADC_PollForConversion>
	  bufferADC2[buffLast]= HAL_ADC_GetValue(&hadc2); // get the adc value
 8000b00:	4867      	ldr	r0, [pc, #412]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000b02:	f000 fe39 	bl	8001778 <HAL_ADC_GetValue>
 8000b06:	4601      	mov	r1, r0
 8000b08:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	4b62      	ldr	r3, [pc, #392]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000b12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  bufferADC1[buffLast] = HAL_ADC_GetValue(&hadc1); // get the adc value
 8000b16:	4863      	ldr	r0, [pc, #396]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000b18:	f000 fe2e 	bl	8001778 <HAL_ADC_GetValue>
 8000b1c:	4601      	mov	r1, r0
 8000b1e:	4b5c      	ldr	r3, [pc, #368]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	b289      	uxth	r1, r1
 8000b26:	4b5b      	ldr	r3, [pc, #364]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000b28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);

	  //HAL_ADC_Stop(&hadc1); // stop adc
	  //HAL_ADC_Stop(&hadc2); // stop adc

	  sumADC1=sumADC1+bufferADC1[buffLast];
 8000b2c:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b58      	ldr	r3, [pc, #352]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000b34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a52      	ldr	r2, [pc, #328]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000b42:	6013      	str	r3, [r2, #0]
	  sumADC2=sumADC2+bufferADC2[buffLast];
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b54      	ldr	r3, [pc, #336]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000b4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b51      	ldr	r3, [pc, #324]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a4f      	ldr	r2, [pc, #316]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000b5a:	6013      	str	r3, [r2, #0]

	  buffLast ++;
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b66:	701a      	strb	r2, [r3, #0]
	  if(buffLast== ADC_BUFFER_SIZE)
 8000b68:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d102      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0xc6>
		  buffLast = 0;
 8000b70:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]



	  //Lectura de entradas digitales
	  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)) //
 8000b76:	2120      	movs	r1, #32
 8000b78:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000b7a:	f001 fc65 	bl	8002448 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d012      	beq.n	8000baa <HAL_TIM_PeriodElapsedCallback+0xfa>
	  	  {
		  if(ModIn0Counter<10)
 8000b84:	4b49      	ldr	r3, [pc, #292]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b09      	cmp	r3, #9
 8000b8a:	d806      	bhi.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0xea>
			  ModIn0Counter++;
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b45      	ldr	r3, [pc, #276]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	e019      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x11e>
		  else
			  inData = inData | 0x00000001; //Si pasaro 10 bits en 1 pongo en 1 el primer bit
 8000b9a:	4b45      	ldr	r3, [pc, #276]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b42      	ldr	r3, [pc, #264]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e011      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x11e>

	  	  }
	  else
	  	  {
		  if(ModIn0Counter>0)
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d006      	beq.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x110>
			  ModIn0Counter--;
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	e006      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x11e>
		  else
			  inData = inData & 0xFFFFFFFE;	//Si pasaro 10 bits en 0 pongo en 0 el primer bit
 8000bc0:	4b3b      	ldr	r3, [pc, #236]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	f023 0301 	bic.w	r3, r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000bcc:	701a      	strb	r2, [r3, #0]
	  	  }

	  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)) //
 8000bce:	2140      	movs	r1, #64	; 0x40
 8000bd0:	4835      	ldr	r0, [pc, #212]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000bd2:	f001 fc39 	bl	8002448 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d012      	beq.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x152>
	  	  {
		  if(ModIn1Counter<10)
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b09      	cmp	r3, #9
 8000be2:	d806      	bhi.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x142>
			  ModIn1Counter++;
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e019      	b.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x176>
		  else
			  inData = inData | 0x00000002; //Si pasaro 10 bits en 1 pongo en 1 el segundo bit
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e011      	b.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x176>

	  	  }
	  else
	  	  {
		  if(ModIn1Counter>0)
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x168>
			  ModIn1Counter--;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e006      	b.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x176>
		  else
			  inData = inData & 0xFFFFFFFD; //Si pasaro 10 bits en 0 pongo en 0 el segundo bit
 8000c18:	4b25      	ldr	r3, [pc, #148]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f023 0302 	bic.w	r3, r3, #2
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c24:	701a      	strb	r2, [r3, #0]
	  	  }

	  if (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)) //
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000c2a:	f001 fc0d 	bl	8002448 <HAL_GPIO_ReadPin>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d012      	beq.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x1aa>
	  	  {
		  if(ModIn2Counter<10)
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	d806      	bhi.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x19a>
			  ModIn2Counter++;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e019      	b.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x1ce>
		  else
			  inData = inData | 0x00000004; //Si pasaro 10 bits en 1 pongo en 1 el tercer bit
 8000c4a:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e011      	b.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x1ce>

	  	  }
	  else
	  	  {
		  if(ModIn2Counter>0)
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d006      	beq.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			  ModIn2Counter--;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	e006      	b.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x1ce>
		  else
			  inData = inData & 0xFFFFFFFB; //Si pasaro 10 bits en 0 pongo en 0 el tercer bit
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f023 0304 	bic.w	r3, r3, #4
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c7c:	701a      	strb	r2, [r3, #0]
	  	  }

	  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);

	  //Veo que array esta disponible para cargar informacion
	  if (packedDataIndex==0)
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d11c      	bne.n	8000cc0 <HAL_TIM_PeriodElapsedCallback+0x210>
		  dataUpdateIndex=1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e01b      	b.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x214>
 8000c8c:	20000074 	.word	0x20000074
 8000c90:	2000002e 	.word	0x2000002e
 8000c94:	20000030 	.word	0x20000030
 8000c98:	20000050 	.word	0x20000050
 8000c9c:	20000058 	.word	0x20000058
 8000ca0:	20000078 	.word	0x20000078
 8000ca4:	200000a8 	.word	0x200000a8
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	20000044 	.word	0x20000044
 8000cb0:	2000004c 	.word	0x2000004c
 8000cb4:	20000056 	.word	0x20000056
 8000cb8:	20000057 	.word	0x20000057
 8000cbc:	20000043 	.word	0x20000043
	  else dataUpdateIndex =0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
	  //Byte 2 = 0+A1A1A1A1A1A1A1 (parte baja)
	  //Byte 3 = 0+III+A2A2A2A2(parte alta)
	  //Byte 4 = 0+A2A2A2A2A2A2A2

	  //Cargo la informacion
	  aux = (sumADC1>>4); //Me quedo con los 11 bits mas significativos
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	60bb      	str	r3, [r7, #8]
	  packedDataOut[dataUpdateIndex][1] = (uint8_t)(aux & 0x0000007F); //obtengo la parte baja del promedio
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000cd6:	b2d1      	uxtb	r1, r2
 8000cd8:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	705a      	strb	r2, [r3, #1]
	  //aux = (sumADC1>>7);
	  aux = (aux>>7);
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	09db      	lsrs	r3, r3, #7
 8000ce6:	60bb      	str	r3, [r7, #8]
	  packedDataOut[dataUpdateIndex][0] = (uint8_t)(aux & 0x0000000F); //obtengo la parte alta del promedio
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f002 020f 	and.w	r2, r2, #15
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000cf6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	  aux = (moduleAddr<<4)|(0x00000080);
 8000cfa:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	60bb      	str	r3, [r7, #8]
	  packedDataOut[dataUpdateIndex][0] = packedDataOut[dataUpdateIndex][0]|((uint8_t)(aux)); //Agrego el addres y el start bit
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d0a:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	b2d1      	uxtb	r1, r2
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d1a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]

	  aux = (sumADC2>>4); //Me quedo con los 11 bits mas significativos
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
	  packedDataOut[dataUpdateIndex][3] = (uint8_t)(aux & 0x0000007F); //obtengo la parte baja del promedio
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d30:	b2d1      	uxtb	r1, r2
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	460a      	mov	r2, r1
 8000d3a:	70da      	strb	r2, [r3, #3]
	  //aux = (sumADC2>>7);
	  aux = (aux>>7);
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	09db      	lsrs	r3, r3, #7
 8000d40:	60bb      	str	r3, [r7, #8]
	  packedDataOut[dataUpdateIndex][2] = (uint8_t)(aux & 0x0000000F); //obtengo la parte alta del promedio
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	f002 020f 	and.w	r2, r2, #15
 8000d4c:	b2d1      	uxtb	r1, r2
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	460a      	mov	r2, r1
 8000d56:	709a      	strb	r2, [r3, #2]
	  aux = (inData<<4)&(0x0000007F); //pongo en cero el primer bit del tercer byte
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d62:	60bb      	str	r3, [r7, #8]
	  packedDataOut[dataUpdateIndex][2] = packedDataOut[dataUpdateIndex][2]|((uint8_t)(aux)); //Agrego el addres y el start bit
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	4413      	add	r3, r2
 8000d6c:	7899      	ldrb	r1, [r3, #2]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	b2d1      	uxtb	r1, r2
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	460a      	mov	r2, r1
 8000d80:	709a      	strb	r2, [r3, #2]
	  //{

	  //}

	  //Cambio el indice del array disponible para enviar
	  if (packedDataIndex==0)
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x2e2>
		  packedDataIndex=1;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]

	  //bufferUARTout[3] = bufferUARTout[2];
	  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_RESET);

}
 8000d90:	e002      	b.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x2e8>
	  else packedDataIndex = 0;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000074 	.word	0x20000074
 8000da4:	2000006c 	.word	0x2000006c
 8000da8:	20000054 	.word	0x20000054
 8000dac:	20000050 	.word	0x20000050
 8000db0:	2000004c 	.word	0x2000004c
 8000db4:	20000043 	.word	0x20000043

08000db8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_USART1_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000dc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USART1_UART_Init+0x4c>)
 8000df0:	f004 fe64 	bl	8005abc <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f7ff fd26 	bl	800084a <Error_Handler>
  }

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000016c 	.word	0x2000016c
 8000e08:	40013800 	.word	0x40013800

08000e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <HAL_UART_MspInit+0x9c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d139      	bne.n	8000ea0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_UART_MspInit+0xa0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_UART_MspInit+0xa0>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_UART_MspInit+0xa0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_UART_MspInit+0xa0>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <HAL_UART_MspInit+0xa0>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_UART_MspInit+0xa0>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <HAL_UART_MspInit+0xa4>)
 8000e72:	f001 f8af 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <HAL_UART_MspInit+0xa4>)
 8000e8c:	f001 f8a2 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2025      	movs	r0, #37	; 0x25
 8000e96:	f000 ffcb 	bl	8001e30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e9a:	2025      	movs	r0, #37	; 0x25
 8000e9c:	f000 fff4 	bl	8001e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40013800 	.word	0x40013800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800

08000eb4 <HAL_UART_RxCpltCallback>:
//Callbacks de interrupciones de UART

//Callback de recepcion

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	uint8_t auxByte;
	//Si el primer bit es 1 significa que llego el primer byte
	if (bufferUARTin[receiveIndex]& 0x80)
 8000ebc:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b43      	ldr	r3, [pc, #268]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000ec4:	5c9b      	ldrb	r3, [r3, r2]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da34      	bge.n	8000f36 <HAL_UART_RxCpltCallback+0x82>
	{
		if (((auxByte=bufferUARTin[receiveIndex]>>4)&0x07)==moduleAddr)	//Checkeo address del dato, si es el propio envio los datos de ADCs y entradas
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000ed4:	5c9b      	ldrb	r3, [r3, r2]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f003 0307 	and.w	r3, r3, #7
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	; (8000fd4 <HAL_UART_RxCpltCallback+0x120>)
 8000ee2:	7812      	ldrb	r2, [r2, #0]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d122      	bne.n	8000f2e <HAL_UART_RxCpltCallback+0x7a>
		{
			receiveIndex = 1;	//Incremento el indice
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]

			//Mientras se ejecuta la interrupcion no pueden ocurrir cambios en la variable packedDataIndex ni en PackedDataOut
			//porque es la interrupcion de mayor prioridad. Sin embargo si pueden ocurrir durante la transmision de los datos.
			//Por lo tanto copio la informacion a enviar para evitar cambios durante la transmision
			for (auxByte=0; auxByte < OUTPUT_BUFFER_SIZE; auxByte++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e00e      	b.n	8000f12 <HAL_UART_RxCpltCallback+0x5e>
				{
				bufferUARTout[auxByte] = packedDataOut [packedDataIndex][auxByte];
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <HAL_UART_RxCpltCallback+0x124>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	4837      	ldr	r0, [pc, #220]	; (8000fdc <HAL_UART_RxCpltCallback+0x128>)
 8000f00:	0089      	lsls	r1, r1, #2
 8000f02:	4401      	add	r1, r0
 8000f04:	440a      	add	r2, r1
 8000f06:	7811      	ldrb	r1, [r2, #0]
 8000f08:	4a35      	ldr	r2, [pc, #212]	; (8000fe0 <HAL_UART_RxCpltCallback+0x12c>)
 8000f0a:	54d1      	strb	r1, [r2, r3]
			for (auxByte=0; auxByte < OUTPUT_BUFFER_SIZE; auxByte++)
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d9ed      	bls.n	8000ef4 <HAL_UART_RxCpltCallback+0x40>
				}
			//Transmito la informacion por la UART
			if(HAL_UART_Transmit_IT(&huart1, bufferUARTout, OUTPUT_BUFFER_SIZE)!= HAL_OK)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	4931      	ldr	r1, [pc, #196]	; (8000fe0 <HAL_UART_RxCpltCallback+0x12c>)
 8000f1c:	4831      	ldr	r0, [pc, #196]	; (8000fe4 <HAL_UART_RxCpltCallback+0x130>)
 8000f1e:	f004 fe75 	bl	8005c0c <HAL_UART_Transmit_IT>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d03e      	beq.n	8000fa6 <HAL_UART_RxCpltCallback+0xf2>
			  {
				 Error_Handler();
 8000f28:	f7ff fc8f 	bl	800084a <Error_Handler>
 8000f2c:	e03b      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0xf2>
			  }
		}
		else receiveIndex = 0; //Si el dato no corresponde a este address reinicio el Indice
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e037      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0xf2>
	}
	//Si el primer bit es 0 significa que llego el 2 o 3 byte puede o no ser para el address actual
	else
	{
		if (receiveIndex == 1)
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d11a      	bne.n	8000f74 <HAL_UART_RxCpltCallback+0xc0>
			//P=Paridad
			//Byte 1	= 1+AAA+P+DDD
			//Byte 2	= 0+DDDDDDD
			//Byte 3	= 0+HHHOOOO
			//cambiar el orden segun Hamming
		DACData[1] = bufferUARTin[1]<<2; // Elimino los primeros bits MSB y lleno con Cero los LSB para completar los 12 bits
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_UART_RxCpltCallback+0x134>)
 8000f48:	705a      	strb	r2, [r3, #1]
		DACData[0] = ((bufferUARTin[0]&0x07)<<1)|(bufferUARTin[1]>>6); //Armo el segundo byte porque la parte alta llegan 3 bits en el primer byte y 1 bit en el siguiente
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	f003 030e 	and.w	r3, r3, #14
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	099b      	lsrs	r3, r3, #6
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	b25b      	sxtb	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_UART_RxCpltCallback+0x134>)
 8000f6a:	701a      	strb	r2, [r3, #0]
		receiveIndex = 2;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e018      	b.n	8000fa6 <HAL_UART_RxCpltCallback+0xf2>
		}
		else
			if (receiveIndex == 2)
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d114      	bne.n	8000fa6 <HAL_UART_RxCpltCallback+0xf2>
			{
				outData=bufferUARTin[2]|((bufferUARTin[0] & 0x08)<<4);
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	4313      	orrs	r3, r2
 8000f92:	b25b      	sxtb	r3, r3
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_UART_RxCpltCallback+0x138>)
 8000f98:	701a      	strb	r2, [r3, #0]
				dataFlag = 1; //Indico que hay datos para enviar al DAC y a las salidas digitales
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_RxCpltCallback+0x13c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
				receiveIndex = 0;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
			}
	}

	//Espero a que llegue otro dato por UART y lo guardo en el buffer
	if(HAL_UART_Receive_IT(&huart1, (uint8_t*) &bufferUARTin[receiveIndex], 1) != HAL_OK)
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_UART_RxCpltCallback+0x118>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_UART_RxCpltCallback+0x11c>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <HAL_UART_RxCpltCallback+0x130>)
 8000fb6:	f004 fe6d 	bl	8005c94 <HAL_UART_Receive_IT>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_RxCpltCallback+0x110>
	  {
	    Error_Handler();
 8000fc0:	f7ff fc43 	bl	800084a <Error_Handler>
	  }


}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000002c 	.word	0x2000002c
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	20000054 	.word	0x20000054
 8000fd8:	20000043 	.word	0x20000043
 8000fdc:	2000006c 	.word	0x2000006c
 8000fe0:	20000048 	.word	0x20000048
 8000fe4:	2000016c 	.word	0x2000016c
 8000fe8:	20000068 	.word	0x20000068
 8000fec:	20000045 	.word	0x20000045
 8000ff0:	2000002d 	.word	0x2000002d

08000ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ff4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ff6:	e003      	b.n	8001000 <LoopCopyDataInit>

08000ff8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ffa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ffc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ffe:	3104      	adds	r1, #4

08001000 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001004:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001006:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001008:	d3f6      	bcc.n	8000ff8 <CopyDataInit>
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800100c:	e002      	b.n	8001014 <LoopFillZerobss>

0800100e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001010:	f842 3b04 	str.w	r3, [r2], #4

08001014 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001016:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001018:	d3f9      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800101a:	f7ff fca1 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f005 f9d3 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001022:	f7ff fa77 	bl	8000514 <main>
  bx lr
 8001026:	4770      	bx	lr
  ldr r3, =_sidata
 8001028:	0800668c 	.word	0x0800668c
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001030:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001034:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001038:	200001b0 	.word	0x200001b0

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x28>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x28>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fecd 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fc06 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 ff14 	bl	8001eb8 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	f000 fec2 	bl	8001e30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000004 	.word	0x20000004
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x20>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <HAL_IncTick+0x20>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	200001ac 	.word	0x200001ac

080010f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b02      	ldr	r3, [pc, #8]	; (8001100 <HAL_GetTick+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	200001ac 	.word	0x200001ac

08001104 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e153      	b.n	80013ce <HAL_ADC_Init+0x2ca>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a9f      	ldr	r2, [pc, #636]	; (80013a8 <HAL_ADC_Init+0x2a4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d009      	beq.n	8001144 <HAL_ADC_Init+0x40>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a9d      	ldr	r2, [pc, #628]	; (80013ac <HAL_ADC_Init+0x2a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d004      	beq.n	8001144 <HAL_ADC_Init+0x40>
 800113a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800113e:	489c      	ldr	r0, [pc, #624]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 8001140:	f7ff fb89 	bl	8000856 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <HAL_ADC_Init+0x5c>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001154:	d004      	beq.n	8001160 <HAL_ADC_Init+0x5c>
 8001156:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800115a:	4895      	ldr	r0, [pc, #596]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 800115c:	f7ff fb7b 	bl	8000856 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d009      	beq.n	800117c <HAL_ADC_Init+0x78>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001170:	d004      	beq.n	800117c <HAL_ADC_Init+0x78>
 8001172:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001176:	488e      	ldr	r0, [pc, #568]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 8001178:	f7ff fb6d 	bl	8000856 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7b1b      	ldrb	r3, [r3, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_ADC_Init+0x92>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7b1b      	ldrb	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d004      	beq.n	8001196 <HAL_ADC_Init+0x92>
 800118c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001190:	4887      	ldr	r0, [pc, #540]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 8001192:	f7ff fb60 	bl	8000856 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d022      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011a6:	d01d      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011b0:	d018      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011ba:	d013      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80011c4:	d00e      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80011ce:	d009      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011d8:	d004      	beq.n	80011e4 <HAL_ADC_Init+0xe0>
 80011da:	f240 11b7 	movw	r1, #439	; 0x1b7
 80011de:	4874      	ldr	r0, [pc, #464]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 80011e0:	f7ff fb39 	bl	8000856 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d02a      	beq.n	8001242 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_ADC_Init+0xf8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d904      	bls.n	8001206 <HAL_ADC_Init+0x102>
 80011fc:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001200:	486b      	ldr	r0, [pc, #428]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 8001202:	f7ff fb28 	bl	8000856 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7d1b      	ldrb	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <HAL_ADC_Init+0x11c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7d1b      	ldrb	r3, [r3, #20]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d004      	beq.n	8001220 <HAL_ADC_Init+0x11c>
 8001216:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800121a:	4865      	ldr	r0, [pc, #404]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 800121c:	f7ff fb1b 	bl	8000856 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7d1b      	ldrb	r3, [r3, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_ADC_Init+0x134>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	2b08      	cmp	r3, #8
 8001236:	d904      	bls.n	8001242 <HAL_ADC_Init+0x13e>
 8001238:	f240 11bf 	movw	r1, #447	; 0x1bf
 800123c:	485c      	ldr	r0, [pc, #368]	; (80013b0 <HAL_ADC_Init+0x2ac>)
 800123e:	f7ff fb0a 	bl	8000856 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7fe fff3 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fcc0 	bl	8001be4 <ADC_ConversionStop_Disable>
 8001264:	4603      	mov	r3, r0
 8001266:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f040 80a3 	bne.w	80013bc <HAL_ADC_Init+0x2b8>
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f040 809f 	bne.w	80013bc <HAL_ADC_Init+0x2b8>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001286:	f023 0302 	bic.w	r3, r3, #2
 800128a:	f043 0202 	orr.w	r2, r3, #2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800129a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7b1b      	ldrb	r3, [r3, #12]
 80012a0:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012a2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b2:	d003      	beq.n	80012bc <HAL_ADC_Init+0x1b8>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <HAL_ADC_Init+0x1be>
 80012bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c0:	e000      	b.n	80012c4 <HAL_ADC_Init+0x1c0>
 80012c2:	2300      	movs	r3, #0
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7d1b      	ldrb	r3, [r3, #20]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d119      	bne.n	8001306 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7b1b      	ldrb	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	3b01      	subs	r3, #1
 80012e0:	035a      	lsls	r2, r3, #13
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	e00b      	b.n	8001306 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	f043 0220 	orr.w	r2, r3, #32
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_ADC_Init+0x2b0>)
 8001322:	4013      	ands	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	430b      	orrs	r3, r1
 800132c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001336:	d003      	beq.n	8001340 <HAL_ADC_Init+0x23c>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d104      	bne.n	800134a <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	3b01      	subs	r3, #1
 8001346:	051b      	lsls	r3, r3, #20
 8001348:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	430a      	orrs	r2, r1
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_ADC_Init+0x2b4>)
 8001366:	4013      	ands	r3, r2
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d10b      	bne.n	8001386 <HAL_ADC_Init+0x282>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	f023 0303 	bic.w	r3, r3, #3
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001384:	e022      	b.n	80013cc <HAL_ADC_Init+0x2c8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f023 0312 	bic.w	r3, r3, #18
 800138e:	f043 0210 	orr.w	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f043 0201 	orr.w	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a6:	e011      	b.n	80013cc <HAL_ADC_Init+0x2c8>
 80013a8:	40012400 	.word	0x40012400
 80013ac:	40012800 	.word	0x40012800
 80013b0:	08006438 	.word	0x08006438
 80013b4:	ffe1f7fd 	.word	0xffe1f7fd
 80013b8:	ff1f0efe 	.word	0xff1f0efe
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f043 0210 	orr.w	r2, r3, #16
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop

080013d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_ADC_Start+0x174>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d009      	beq.n	8001402 <HAL_ADC_Start+0x2a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a57      	ldr	r2, [pc, #348]	; (8001550 <HAL_ADC_Start+0x178>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d004      	beq.n	8001402 <HAL_ADC_Start+0x2a>
 80013f8:	f240 411b 	movw	r1, #1051	; 0x41b
 80013fc:	4855      	ldr	r0, [pc, #340]	; (8001554 <HAL_ADC_Start+0x17c>)
 80013fe:	f7ff fa2a 	bl	8000856 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001408:	2b01      	cmp	r3, #1
 800140a:	d101      	bne.n	8001410 <HAL_ADC_Start+0x38>
 800140c:	2302      	movs	r3, #2
 800140e:	e098      	b.n	8001542 <HAL_ADC_Start+0x16a>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fb91 	bl	8001b40 <ADC_Enable>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f040 8087 	bne.w	8001538 <HAL_ADC_Start+0x160>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a43      	ldr	r2, [pc, #268]	; (8001550 <HAL_ADC_Start+0x178>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d105      	bne.n	8001454 <HAL_ADC_Start+0x7c>
 8001448:	4b40      	ldr	r3, [pc, #256]	; (800154c <HAL_ADC_Start+0x174>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d115      	bne.n	8001480 <HAL_ADC_Start+0xa8>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146a:	2b00      	cmp	r3, #0
 800146c:	d026      	beq.n	80014bc <HAL_ADC_Start+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001472:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001476:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800147e:	e01d      	b.n	80014bc <HAL_ADC_Start+0xe4>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001484:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a2e      	ldr	r2, [pc, #184]	; (800154c <HAL_ADC_Start+0x174>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d004      	beq.n	80014a0 <HAL_ADC_Start+0xc8>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2d      	ldr	r2, [pc, #180]	; (8001550 <HAL_ADC_Start+0x178>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d10d      	bne.n	80014bc <HAL_ADC_Start+0xe4>
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_ADC_Start+0x174>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d007      	beq.n	80014bc <HAL_ADC_Start+0xe4>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_ADC_Start+0xfe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	f023 0206 	bic.w	r2, r3, #6
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d4:	e002      	b.n	80014dc <HAL_ADC_Start+0x104>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0202 	mvn.w	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014fc:	d113      	bne.n	8001526 <HAL_ADC_Start+0x14e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_ADC_Start+0x178>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d105      	bne.n	8001514 <HAL_ADC_Start+0x13c>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <HAL_ADC_Start+0x174>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <HAL_ADC_Start+0x14e>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	e00c      	b.n	8001540 <HAL_ADC_Start+0x168>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	e003      	b.n	8001540 <HAL_ADC_Start+0x168>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001540:	7bfb      	ldrb	r3, [r7, #15]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012400 	.word	0x40012400
 8001550:	40012800 	.word	0x40012800
 8001554:	08006438 	.word	0x08006438

08001558 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a78      	ldr	r2, [pc, #480]	; (8001754 <HAL_ADC_PollForConversion+0x1fc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d009      	beq.n	800158c <HAL_ADC_PollForConversion+0x34>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a76      	ldr	r2, [pc, #472]	; (8001758 <HAL_ADC_PollForConversion+0x200>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d004      	beq.n	800158c <HAL_ADC_PollForConversion+0x34>
 8001582:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8001586:	4875      	ldr	r0, [pc, #468]	; (800175c <HAL_ADC_PollForConversion+0x204>)
 8001588:	f7ff f965 	bl	8000856 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800158c:	f7ff fdb0 	bl	80010f0 <HAL_GetTick>
 8001590:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	f043 0220 	orr.w	r2, r3, #32
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0c8      	b.n	800174a <HAL_ADC_PollForConversion+0x1f2>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d12a      	bne.n	800161c <HAL_ADC_PollForConversion+0xc4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d123      	bne.n	800161c <HAL_ADC_PollForConversion+0xc4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80015d4:	e01a      	b.n	800160c <HAL_ADC_PollForConversion+0xb4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015dc:	d016      	beq.n	800160c <HAL_ADC_PollForConversion+0xb4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ADC_PollForConversion+0x9c>
 80015e4:	f7ff fd84 	bl	80010f0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d20b      	bcs.n	800160c <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f043 0204 	orr.w	r2, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e09e      	b.n	800174a <HAL_ADC_PollForConversion+0x1f2>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0dd      	beq.n	80015d6 <HAL_ADC_PollForConversion+0x7e>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800161a:	e06c      	b.n	80016f6 <HAL_ADC_PollForConversion+0x19e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_ADC_PollForConversion+0x208>)
 800161e:	681c      	ldr	r4, [r3, #0]
 8001620:	2002      	movs	r0, #2
 8001622:	f003 fb51 	bl	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001626:	4603      	mov	r3, r0
 8001628:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6919      	ldr	r1, [r3, #16]
 8001632:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <HAL_ADC_PollForConversion+0x20c>)
 8001634:	400b      	ands	r3, r1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_ADC_PollForConversion+0x114>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68d9      	ldr	r1, [r3, #12]
 8001640:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_ADC_PollForConversion+0x210>)
 8001642:	400b      	ands	r3, r1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_ADC_PollForConversion+0x114>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_ADC_PollForConversion+0x214>)
 8001650:	400b      	ands	r3, r1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <HAL_ADC_PollForConversion+0x110>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68d9      	ldr	r1, [r3, #12]
 800165c:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_ADC_PollForConversion+0x218>)
 800165e:	400b      	ands	r3, r1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_ADC_PollForConversion+0x110>
 8001664:	2314      	movs	r3, #20
 8001666:	e020      	b.n	80016aa <HAL_ADC_PollForConversion+0x152>
 8001668:	2329      	movs	r3, #41	; 0x29
 800166a:	e01e      	b.n	80016aa <HAL_ADC_PollForConversion+0x152>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6919      	ldr	r1, [r3, #16]
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_ADC_PollForConversion+0x214>)
 8001674:	400b      	ands	r3, r1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <HAL_ADC_PollForConversion+0x130>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68d9      	ldr	r1, [r3, #12]
 8001680:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_ADC_PollForConversion+0x218>)
 8001682:	400b      	ands	r3, r1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00d      	beq.n	80016a4 <HAL_ADC_PollForConversion+0x14c>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_ADC_PollForConversion+0x21c>)
 8001690:	400b      	ands	r3, r1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d108      	bne.n	80016a8 <HAL_ADC_PollForConversion+0x150>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68d9      	ldr	r1, [r3, #12]
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <HAL_ADC_PollForConversion+0x21c>)
 800169e:	400b      	ands	r3, r1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_PollForConversion+0x150>
 80016a4:	2354      	movs	r3, #84	; 0x54
 80016a6:	e000      	b.n	80016aa <HAL_ADC_PollForConversion+0x152>
 80016a8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016b0:	e01d      	b.n	80016ee <HAL_ADC_PollForConversion+0x196>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b8:	d016      	beq.n	80016e8 <HAL_ADC_PollForConversion+0x190>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_ADC_PollForConversion+0x178>
 80016c0:	f7ff fd16 	bl	80010f0 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d20b      	bcs.n	80016e8 <HAL_ADC_PollForConversion+0x190>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	f043 0204 	orr.w	r2, r3, #4
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e030      	b.n	800174a <HAL_ADC_PollForConversion+0x1f2>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8dd      	bhi.n	80016b2 <HAL_ADC_PollForConversion+0x15a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f06f 0212 	mvn.w	r2, #18
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001716:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800171a:	d115      	bne.n	8001748 <HAL_ADC_PollForConversion+0x1f0>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001720:	2b00      	cmp	r3, #0
 8001722:	d111      	bne.n	8001748 <HAL_ADC_PollForConversion+0x1f0>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_ADC_PollForConversion+0x1f0>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	40012400 	.word	0x40012400
 8001758:	40012800 	.word	0x40012800
 800175c:	08006438 	.word	0x08006438
 8001760:	20000004 	.word	0x20000004
 8001764:	24924924 	.word	0x24924924
 8001768:	00924924 	.word	0x00924924
 800176c:	12492492 	.word	0x12492492
 8001770:	00492492 	.word	0x00492492
 8001774:	00249249 	.word	0x00249249

08001778 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a09      	ldr	r2, [pc, #36]	; (80017ac <HAL_ADC_GetValue+0x34>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d009      	beq.n	800179e <HAL_ADC_GetValue+0x26>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_ADC_GetValue+0x38>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d004      	beq.n	800179e <HAL_ADC_GetValue+0x26>
 8001794:	f44f 61dc 	mov.w	r1, #1760	; 0x6e0
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <HAL_ADC_GetValue+0x3c>)
 800179a:	f7ff f85c 	bl	8000856 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40012400 	.word	0x40012400
 80017b0:	40012800 	.word	0x40012800
 80017b4:	08006438 	.word	0x08006438

080017b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a88      	ldr	r2, [pc, #544]	; (80019f0 <HAL_ADC_ConfigChannel+0x238>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d009      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x30>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a86      	ldr	r2, [pc, #536]	; (80019f4 <HAL_ADC_ConfigChannel+0x23c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d004      	beq.n	80017e8 <HAL_ADC_ConfigChannel+0x30>
 80017de:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80017e2:	4885      	ldr	r0, [pc, #532]	; (80019f8 <HAL_ADC_ConfigChannel+0x240>)
 80017e4:	f7ff f837 	bl	8000856 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d048      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d044      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d040      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d03c      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d038      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d034      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b06      	cmp	r3, #6
 800181e:	d030      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b07      	cmp	r3, #7
 8001826:	d02c      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d028      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b09      	cmp	r3, #9
 8001836:	d024      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b0a      	cmp	r3, #10
 800183e:	d020      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b0b      	cmp	r3, #11
 8001846:	d01c      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b0c      	cmp	r3, #12
 800184e:	d018      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b0d      	cmp	r3, #13
 8001856:	d014      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b0e      	cmp	r3, #14
 800185e:	d010      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d00c      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b10      	cmp	r3, #16
 800186e:	d008      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b11      	cmp	r3, #17
 8001876:	d004      	beq.n	8001882 <HAL_ADC_ConfigChannel+0xca>
 8001878:	f240 71cf 	movw	r1, #1999	; 0x7cf
 800187c:	485e      	ldr	r0, [pc, #376]	; (80019f8 <HAL_ADC_ConfigChannel+0x240>)
 800187e:	f7fe ffea 	bl	8000856 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d040      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d03c      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d038      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d034      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d030      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d02c      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d028      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d024      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b09      	cmp	r3, #9
 80018c8:	d020      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b0a      	cmp	r3, #10
 80018d0:	d01c      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b0b      	cmp	r3, #11
 80018d8:	d018      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d014      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b0d      	cmp	r3, #13
 80018e8:	d010      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b0e      	cmp	r3, #14
 80018f0:	d00c      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	d008      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d004      	beq.n	800190c <HAL_ADC_ConfigChannel+0x154>
 8001902:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001906:	483c      	ldr	r0, [pc, #240]	; (80019f8 <HAL_ADC_ConfigChannel+0x240>)
 8001908:	f7fe ffa5 	bl	8000856 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d01c      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d018      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d014      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b04      	cmp	r3, #4
 8001932:	d010      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d00c      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b06      	cmp	r3, #6
 8001942:	d008      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b07      	cmp	r3, #7
 800194a:	d004      	beq.n	8001956 <HAL_ADC_ConfigChannel+0x19e>
 800194c:	f240 71d1 	movw	r1, #2001	; 0x7d1
 8001950:	4829      	ldr	r0, [pc, #164]	; (80019f8 <HAL_ADC_ConfigChannel+0x240>)
 8001952:	f7fe ff80 	bl	8000856 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1ac>
 8001960:	2302      	movs	r3, #2
 8001962:	e0e2      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x372>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b06      	cmp	r3, #6
 8001972:	d81c      	bhi.n	80019ae <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b05      	subs	r3, #5
 8001986:	221f      	movs	r2, #31
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	4019      	ands	r1, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	3b05      	subs	r3, #5
 80019a0:	fa00 f203 	lsl.w	r2, r0, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34
 80019ac:	e042      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d822      	bhi.n	80019fc <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	3b23      	subs	r3, #35	; 0x23
 80019c8:	221f      	movs	r2, #31
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	4019      	ands	r1, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3b23      	subs	r3, #35	; 0x23
 80019e2:	fa00 f203 	lsl.w	r2, r0, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
 80019ee:	e021      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x27c>
 80019f0:	40012400 	.word	0x40012400
 80019f4:	40012800 	.word	0x40012800
 80019f8:	08006438 	.word	0x08006438
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b41      	subs	r3, #65	; 0x41
 8001a0e:	221f      	movs	r2, #31
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4019      	ands	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	3b41      	subs	r3, #65	; 0x41
 8001a28:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d91c      	bls.n	8001a76 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68d9      	ldr	r1, [r3, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b1e      	subs	r3, #30
 8001a4e:	2207      	movs	r2, #7
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4019      	ands	r1, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6898      	ldr	r0, [r3, #8]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	e019      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6919      	ldr	r1, [r3, #16]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	2207      	movs	r2, #7
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4019      	ands	r1, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6898      	ldr	r0, [r3, #8]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d003      	beq.n	8001aba <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab6:	2b11      	cmp	r3, #17
 8001ab8:	d132      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <HAL_ADC_ConfigChannel+0x37c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d125      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d126      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b10      	cmp	r3, #16
 8001ae8:	d11a      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_ADC_ConfigChannel+0x380>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_ADC_ConfigChannel+0x384>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	0c9a      	lsrs	r2, r3, #18
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b00:	e002      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f9      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x34a>
 8001b0e:	e007      	b.n	8001b20 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40012400 	.word	0x40012400
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	431bde83 	.word	0x431bde83

08001b40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d039      	beq.n	8001bd2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <ADC_Enable+0x9c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <ADC_Enable+0xa0>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b7c:	e002      	b.n	8001b84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f9      	bne.n	8001b7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b8a:	f7ff fab1 	bl	80010f0 <HAL_GetTick>
 8001b8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b90:	e018      	b.n	8001bc4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b92:	f7ff faad 	bl	80010f0 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d911      	bls.n	8001bc4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f043 0210 	orr.w	r2, r3, #16
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e007      	b.n	8001bd4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d1df      	bne.n	8001b92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	431bde83 	.word	0x431bde83

08001be4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d127      	bne.n	8001c4e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c0e:	f7ff fa6f 	bl	80010f0 <HAL_GetTick>
 8001c12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c14:	e014      	b.n	8001c40 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c16:	f7ff fa6b 	bl	80010f0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d90d      	bls.n	8001c40 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f043 0210 	orr.w	r2, r3, #16
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e007      	b.n	8001c50 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d0e3      	beq.n	8001c16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <__NVIC_EnableIRQ+0x34>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
         );
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dd0:	f7ff ff90 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	d00f      	beq.n	8001e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d00c      	beq.n	8001e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d009      	beq.n	8001e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d006      	beq.n	8001e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d003      	beq.n	8001e1e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e16:	2192      	movs	r1, #146	; 0x92
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e1a:	f7fe fd1c 	bl	8000856 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff1a 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08006470 	.word	0x08006470

08001e30 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b0f      	cmp	r3, #15
 8001e46:	d903      	bls.n	8001e50 <HAL_NVIC_SetPriority+0x20>
 8001e48:	21aa      	movs	r1, #170	; 0xaa
 8001e4a:	480e      	ldr	r0, [pc, #56]	; (8001e84 <HAL_NVIC_SetPriority+0x54>)
 8001e4c:	f7fe fd03 	bl	8000856 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	d903      	bls.n	8001e5e <HAL_NVIC_SetPriority+0x2e>
 8001e56:	21ab      	movs	r1, #171	; 0xab
 8001e58:	480a      	ldr	r0, [pc, #40]	; (8001e84 <HAL_NVIC_SetPriority+0x54>)
 8001e5a:	f7fe fcfc 	bl	8000856 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5e:	f7ff ff1f 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68b9      	ldr	r1, [r7, #8]
 8001e68:	6978      	ldr	r0, [r7, #20]
 8001e6a:	f7ff ff6d 	bl	8001d48 <NVIC_EncodePriority>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff3c 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	08006470 	.word	0x08006470

08001e88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da03      	bge.n	8001ea2 <HAL_NVIC_EnableIRQ+0x1a>
 8001e9a:	21be      	movs	r1, #190	; 0xbe
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <HAL_NVIC_EnableIRQ+0x2c>)
 8001e9e:	f7fe fcda 	bl	8000856 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff08 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	08006470 	.word	0x08006470

08001eb8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff73 	bl	8001dac <SysTick_Config>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d005      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e051      	b.n	8001f96 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 020e 	bic.w	r2, r2, #14
 8001f00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_DMA_Abort_IT+0xd0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d029      	beq.n	8001f70 <HAL_DMA_Abort_IT+0xa0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_DMA_Abort_IT+0xd4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d022      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x9c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_DMA_Abort_IT+0xd8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d01a      	beq.n	8001f66 <HAL_DMA_Abort_IT+0x96>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_DMA_Abort_IT+0xdc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d012      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x90>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	; (8001fb0 <HAL_DMA_Abort_IT+0xe0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00a      	beq.n	8001f5a <HAL_DMA_Abort_IT+0x8a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_DMA_Abort_IT+0xe4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d102      	bne.n	8001f54 <HAL_DMA_Abort_IT+0x84>
 8001f4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f52:	e00e      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f58:	e00b      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5e:	e008      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	e005      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f6a:	e002      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_Abort_IT+0xa2>
 8001f70:	2301      	movs	r3, #1
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_DMA_Abort_IT+0xe8>)
 8001f74:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
    } 
  }
  return status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40020008 	.word	0x40020008
 8001fa4:	4002001c 	.word	0x4002001c
 8001fa8:	40020030 	.word	0x40020030
 8001fac:	40020044 	.word	0x40020044
 8001fb0:	40020058 	.word	0x40020058
 8001fb4:	4002006c 	.word	0x4002006c
 8001fb8:	40020000 	.word	0x40020000

08001fbc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	; 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a9c      	ldr	r2, [pc, #624]	; (800225c <HAL_GPIO_Init+0x288>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x42>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a9b      	ldr	r2, [pc, #620]	; (8002260 <HAL_GPIO_Init+0x28c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00f      	beq.n	8002016 <HAL_GPIO_Init+0x42>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a9a      	ldr	r2, [pc, #616]	; (8002264 <HAL_GPIO_Init+0x290>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00b      	beq.n	8002016 <HAL_GPIO_Init+0x42>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a99      	ldr	r2, [pc, #612]	; (8002268 <HAL_GPIO_Init+0x294>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d007      	beq.n	8002016 <HAL_GPIO_Init+0x42>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a98      	ldr	r2, [pc, #608]	; (800226c <HAL_GPIO_Init+0x298>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x42>
 800200e:	21bd      	movs	r1, #189	; 0xbd
 8002010:	4897      	ldr	r0, [pc, #604]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002012:	f7fe fc20 	bl	8000856 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_GPIO_Init+0x58>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x60>
 800202c:	21be      	movs	r1, #190	; 0xbe
 800202e:	4890      	ldr	r0, [pc, #576]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002030:	f7fe fc11 	bl	8000856 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 81eb 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b01      	cmp	r3, #1
 8002044:	f000 81e6 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b11      	cmp	r3, #17
 800204e:	f000 81e1 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	f000 81dc 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b12      	cmp	r3, #18
 8002062:	f000 81d7 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4a82      	ldr	r2, [pc, #520]	; (8002274 <HAL_GPIO_Init+0x2a0>)
 800206c:	4293      	cmp	r3, r2
 800206e:	f000 81d1 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4a80      	ldr	r2, [pc, #512]	; (8002278 <HAL_GPIO_Init+0x2a4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	f000 81cb 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a7e      	ldr	r2, [pc, #504]	; (800227c <HAL_GPIO_Init+0x2a8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	f000 81c5 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a7c      	ldr	r2, [pc, #496]	; (8002280 <HAL_GPIO_Init+0x2ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	f000 81bf 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4a7a      	ldr	r2, [pc, #488]	; (8002284 <HAL_GPIO_Init+0x2b0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	f000 81b9 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a78      	ldr	r2, [pc, #480]	; (8002288 <HAL_GPIO_Init+0x2b4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	f000 81b3 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	f000 81ae 	beq.w	8002414 <HAL_GPIO_Init+0x440>
 80020b8:	21bf      	movs	r1, #191	; 0xbf
 80020ba:	486d      	ldr	r0, [pc, #436]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80020bc:	f7fe fbcb 	bl	8000856 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c0:	e1a8      	b.n	8002414 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c2:	2201      	movs	r2, #1
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	429a      	cmp	r2, r3
 80020dc:	f040 8197 	bne.w	800240e <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a5e      	ldr	r2, [pc, #376]	; (800225c <HAL_GPIO_Init+0x288>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_GPIO_Init+0x13c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a5d      	ldr	r2, [pc, #372]	; (8002260 <HAL_GPIO_Init+0x28c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00f      	beq.n	8002110 <HAL_GPIO_Init+0x13c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a5c      	ldr	r2, [pc, #368]	; (8002264 <HAL_GPIO_Init+0x290>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00b      	beq.n	8002110 <HAL_GPIO_Init+0x13c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a5b      	ldr	r2, [pc, #364]	; (8002268 <HAL_GPIO_Init+0x294>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x13c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a5a      	ldr	r2, [pc, #360]	; (800226c <HAL_GPIO_Init+0x298>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x13c>
 8002108:	21cd      	movs	r1, #205	; 0xcd
 800210a:	4859      	ldr	r0, [pc, #356]	; (8002270 <HAL_GPIO_Init+0x29c>)
 800210c:	f7fe fba3 	bl	8000856 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d065      	beq.n	80021e4 <HAL_GPIO_Init+0x210>
 8002118:	2b12      	cmp	r3, #18
 800211a:	d80e      	bhi.n	800213a <HAL_GPIO_Init+0x166>
 800211c:	2b02      	cmp	r3, #2
 800211e:	d04c      	beq.n	80021ba <HAL_GPIO_Init+0x1e6>
 8002120:	2b02      	cmp	r3, #2
 8002122:	d804      	bhi.n	800212e <HAL_GPIO_Init+0x15a>
 8002124:	2b00      	cmp	r3, #0
 8002126:	d072      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 8002128:	2b01      	cmp	r3, #1
 800212a:	d01d      	beq.n	8002168 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800212c:	e0b1      	b.n	8002292 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800212e:	2b03      	cmp	r3, #3
 8002130:	f000 80ac 	beq.w	800228c <HAL_GPIO_Init+0x2b8>
 8002134:	2b11      	cmp	r3, #17
 8002136:	d02b      	beq.n	8002190 <HAL_GPIO_Init+0x1bc>
          break;
 8002138:	e0ab      	b.n	8002292 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800213a:	4a4f      	ldr	r2, [pc, #316]	; (8002278 <HAL_GPIO_Init+0x2a4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d066      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 8002140:	4a4d      	ldr	r2, [pc, #308]	; (8002278 <HAL_GPIO_Init+0x2a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d806      	bhi.n	8002154 <HAL_GPIO_Init+0x180>
 8002146:	4a4b      	ldr	r2, [pc, #300]	; (8002274 <HAL_GPIO_Init+0x2a0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d060      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 800214c:	4a4c      	ldr	r2, [pc, #304]	; (8002280 <HAL_GPIO_Init+0x2ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d05d      	beq.n	800220e <HAL_GPIO_Init+0x23a>
          break;
 8002152:	e09e      	b.n	8002292 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8002154:	4a49      	ldr	r2, [pc, #292]	; (800227c <HAL_GPIO_Init+0x2a8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d059      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 800215a:	4a4b      	ldr	r2, [pc, #300]	; (8002288 <HAL_GPIO_Init+0x2b4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d056      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 8002160:	4a48      	ldr	r2, [pc, #288]	; (8002284 <HAL_GPIO_Init+0x2b0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d053      	beq.n	800220e <HAL_GPIO_Init+0x23a>
          break;
 8002166:	e094      	b.n	8002292 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d00b      	beq.n	8002188 <HAL_GPIO_Init+0x1b4>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1b4>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x1b4>
 8002180:	21d5      	movs	r1, #213	; 0xd5
 8002182:	483b      	ldr	r0, [pc, #236]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002184:	f7fe fb67 	bl	8000856 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	623b      	str	r3, [r7, #32]
          break;
 800218e:	e080      	b.n	8002292 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d00b      	beq.n	80021b0 <HAL_GPIO_Init+0x1dc>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x1dc>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x1dc>
 80021a8:	21dc      	movs	r1, #220	; 0xdc
 80021aa:	4831      	ldr	r0, [pc, #196]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80021ac:	f7fe fb53 	bl	8000856 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	3304      	adds	r3, #4
 80021b6:	623b      	str	r3, [r7, #32]
          break;
 80021b8:	e06b      	b.n	8002292 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d00b      	beq.n	80021da <HAL_GPIO_Init+0x206>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x206>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x206>
 80021d2:	21e3      	movs	r1, #227	; 0xe3
 80021d4:	4826      	ldr	r0, [pc, #152]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80021d6:	f7fe fb3e 	bl	8000856 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	3308      	adds	r3, #8
 80021e0:	623b      	str	r3, [r7, #32]
          break;
 80021e2:	e056      	b.n	8002292 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d00b      	beq.n	8002204 <HAL_GPIO_Init+0x230>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x230>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x230>
 80021fc:	21ea      	movs	r1, #234	; 0xea
 80021fe:	481c      	ldr	r0, [pc, #112]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002200:	f7fe fb29 	bl	8000856 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	330c      	adds	r3, #12
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e041      	b.n	8002292 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_GPIO_Init+0x25a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x25a>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x25a>
 8002226:	21f7      	movs	r1, #247	; 0xf7
 8002228:	4811      	ldr	r0, [pc, #68]	; (8002270 <HAL_GPIO_Init+0x29c>)
 800222a:	f7fe fb14 	bl	8000856 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002236:	2304      	movs	r3, #4
 8002238:	623b      	str	r3, [r7, #32]
          break;
 800223a:	e02a      	b.n	8002292 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	611a      	str	r2, [r3, #16]
          break;
 800224e:	e020      	b.n	8002292 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002250:	2308      	movs	r3, #8
 8002252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	615a      	str	r2, [r3, #20]
          break;
 800225a:	e01a      	b.n	8002292 <HAL_GPIO_Init+0x2be>
 800225c:	40010800 	.word	0x40010800
 8002260:	40010c00 	.word	0x40010c00
 8002264:	40011000 	.word	0x40011000
 8002268:	40011400 	.word	0x40011400
 800226c:	40011800 	.word	0x40011800
 8002270:	080064ac 	.word	0x080064ac
 8002274:	10110000 	.word	0x10110000
 8002278:	10210000 	.word	0x10210000
 800227c:	10310000 	.word	0x10310000
 8002280:	10120000 	.word	0x10120000
 8002284:	10220000 	.word	0x10220000
 8002288:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2bff      	cmp	r3, #255	; 0xff
 8002296:	d801      	bhi.n	800229c <HAL_GPIO_Init+0x2c8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	e001      	b.n	80022a0 <HAL_GPIO_Init+0x2cc>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3304      	adds	r3, #4
 80022a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2bff      	cmp	r3, #255	; 0xff
 80022a6:	d802      	bhi.n	80022ae <HAL_GPIO_Init+0x2da>
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x2e0>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	3b08      	subs	r3, #8
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	210f      	movs	r1, #15
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	6a39      	ldr	r1, [r7, #32]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	431a      	orrs	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8096 	beq.w	800240e <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e2:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_GPIO_Init+0x458>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_GPIO_Init+0x458>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6193      	str	r3, [r2, #24]
 80022ee:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_GPIO_Init+0x458>)
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022fa:	4a4d      	ldr	r2, [pc, #308]	; (8002430 <HAL_GPIO_Init+0x45c>)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a44      	ldr	r2, [pc, #272]	; (8002434 <HAL_GPIO_Init+0x460>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0x37a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a43      	ldr	r2, [pc, #268]	; (8002438 <HAL_GPIO_Init+0x464>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00d      	beq.n	800234a <HAL_GPIO_Init+0x376>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a42      	ldr	r2, [pc, #264]	; (800243c <HAL_GPIO_Init+0x468>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d007      	beq.n	8002346 <HAL_GPIO_Init+0x372>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a41      	ldr	r2, [pc, #260]	; (8002440 <HAL_GPIO_Init+0x46c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_GPIO_Init+0x36e>
 800233e:	2303      	movs	r3, #3
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x37c>
 8002342:	2304      	movs	r3, #4
 8002344:	e004      	b.n	8002350 <HAL_GPIO_Init+0x37c>
 8002346:	2302      	movs	r3, #2
 8002348:	e002      	b.n	8002350 <HAL_GPIO_Init+0x37c>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_GPIO_Init+0x37c>
 800234e:	2300      	movs	r3, #0
 8002350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002352:	f002 0203 	and.w	r2, r2, #3
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	4093      	lsls	r3, r2
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002360:	4933      	ldr	r1, [pc, #204]	; (8002430 <HAL_GPIO_Init+0x45c>)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	3302      	adds	r3, #2
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800237a:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x470>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4931      	ldr	r1, [pc, #196]	; (8002444 <HAL_GPIO_Init+0x470>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_GPIO_Init+0x470>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	43db      	mvns	r3, r3
 8002390:	492c      	ldr	r1, [pc, #176]	; (8002444 <HAL_GPIO_Init+0x470>)
 8002392:	4013      	ands	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
 80023ae:	e006      	b.n	80023be <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023b0:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	4922      	ldr	r1, [pc, #136]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	491d      	ldr	r1, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	43db      	mvns	r3, r3
 80023e0:	4918      	ldr	r1, [pc, #96]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023e2:	4013      	ands	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4913      	ldr	r1, [pc, #76]	; (8002444 <HAL_GPIO_Init+0x470>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60cb      	str	r3, [r1, #12]
 80023fe:	e006      	b.n	800240e <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_GPIO_Init+0x470>)
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	43db      	mvns	r3, r3
 8002408:	490e      	ldr	r1, [pc, #56]	; (8002444 <HAL_GPIO_Init+0x470>)
 800240a:	4013      	ands	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f ae4f 	bne.w	80020c2 <HAL_GPIO_Init+0xee>
  }
}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	40010800 	.word	0x40010800
 8002438:	40010c00 	.word	0x40010c00
 800243c:	40011000 	.word	0x40011000
 8002440:	40011400 	.word	0x40011400
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_GPIO_ReadPin+0x1c>
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	041b      	lsls	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d004      	beq.n	800246e <HAL_GPIO_ReadPin+0x26>
 8002464:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <HAL_GPIO_ReadPin+0x48>)
 800246a:	f7fe f9f4 	bl	8000856 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d002      	beq.n	8002480 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e001      	b.n	8002484 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	080064ac 	.word	0x080064ac

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <HAL_GPIO_WritePin+0x20>
 80024aa:	887b      	ldrh	r3, [r7, #2]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	041b      	lsls	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_GPIO_WritePin+0x2a>
 80024b4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80024b8:	480e      	ldr	r0, [pc, #56]	; (80024f4 <HAL_GPIO_WritePin+0x60>)
 80024ba:	f7fe f9cc 	bl	8000856 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80024be:	787b      	ldrb	r3, [r7, #1]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_WritePin+0x40>
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d004      	beq.n	80024d4 <HAL_GPIO_WritePin+0x40>
 80024ca:	f240 11d5 	movw	r1, #469	; 0x1d5
 80024ce:	4809      	ldr	r0, [pc, #36]	; (80024f4 <HAL_GPIO_WritePin+0x60>)
 80024d0:	f7fe f9c1 	bl	8000856 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80024d4:	787b      	ldrb	r3, [r7, #1]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024e0:	e003      	b.n	80024ea <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	080064ac 	.word	0x080064ac

080024f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d004      	beq.n	8002514 <HAL_GPIO_TogglePin+0x1c>
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d004      	beq.n	800251e <HAL_GPIO_TogglePin+0x26>
 8002514:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8002518:	4809      	ldr	r0, [pc, #36]	; (8002540 <HAL_GPIO_TogglePin+0x48>)
 800251a:	f7fe f99c 	bl	8000856 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_TogglePin+0x3a>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_TogglePin+0x40>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	080064ac 	.word	0x080064ac

08002544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e19b      	b.n	800288e <HAL_I2C_Init+0x34a>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a98      	ldr	r2, [pc, #608]	; (80027bc <HAL_I2C_Init+0x278>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_I2C_Init+0x30>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a96      	ldr	r2, [pc, #600]	; (80027c0 <HAL_I2C_Init+0x27c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_I2C_Init+0x30>
 800256a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800256e:	4895      	ldr	r0, [pc, #596]	; (80027c4 <HAL_I2C_Init+0x280>)
 8002570:	f7fe f971 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d004      	beq.n	8002586 <HAL_I2C_Init+0x42>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a91      	ldr	r2, [pc, #580]	; (80027c8 <HAL_I2C_Init+0x284>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d904      	bls.n	8002590 <HAL_I2C_Init+0x4c>
 8002586:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800258a:	488e      	ldr	r0, [pc, #568]	; (80027c4 <HAL_I2C_Init+0x280>)
 800258c:	f7fe f963 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d009      	beq.n	80025ac <HAL_I2C_Init+0x68>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a0:	d004      	beq.n	80025ac <HAL_I2C_Init+0x68>
 80025a2:	f240 11cf 	movw	r1, #463	; 0x1cf
 80025a6:	4887      	ldr	r0, [pc, #540]	; (80027c4 <HAL_I2C_Init+0x280>)
 80025a8:	f7fe f955 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025b4:	f023 0303 	bic.w	r3, r3, #3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_I2C_Init+0x82>
 80025bc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80025c0:	4880      	ldr	r0, [pc, #512]	; (80027c4 <HAL_I2C_Init+0x280>)
 80025c2:	f7fe f948 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ce:	d009      	beq.n	80025e4 <HAL_I2C_Init+0xa0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80025d8:	d004      	beq.n	80025e4 <HAL_I2C_Init+0xa0>
 80025da:	f240 11d1 	movw	r1, #465	; 0x1d1
 80025de:	4879      	ldr	r0, [pc, #484]	; (80027c4 <HAL_I2C_Init+0x280>)
 80025e0:	f7fe f939 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_I2C_Init+0xba>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d004      	beq.n	80025fe <HAL_I2C_Init+0xba>
 80025f4:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80025f8:	4872      	ldr	r0, [pc, #456]	; (80027c4 <HAL_I2C_Init+0x280>)
 80025fa:	f7fe f92c 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_I2C_Init+0xd0>
 800260a:	f240 11d3 	movw	r1, #467	; 0x1d3
 800260e:	486d      	ldr	r0, [pc, #436]	; (80027c4 <HAL_I2C_Init+0x280>)
 8002610:	f7fe f921 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_I2C_Init+0xea>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d004      	beq.n	800262e <HAL_I2C_Init+0xea>
 8002624:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8002628:	4866      	ldr	r0, [pc, #408]	; (80027c4 <HAL_I2C_Init+0x280>)
 800262a:	f7fe f914 	bl	8000856 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_I2C_Init+0x104>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b80      	cmp	r3, #128	; 0x80
 800263c:	d004      	beq.n	8002648 <HAL_I2C_Init+0x104>
 800263e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8002642:	4860      	ldr	r0, [pc, #384]	; (80027c4 <HAL_I2C_Init+0x280>)
 8002644:	f7fe f907 	bl	8000856 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7fd ff13 	bl	8000488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2224      	movs	r2, #36	; 0x24
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800267a:	f002 f9d5 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 800267e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a51      	ldr	r2, [pc, #324]	; (80027cc <HAL_I2C_Init+0x288>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d807      	bhi.n	800269a <HAL_I2C_Init+0x156>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4a50      	ldr	r2, [pc, #320]	; (80027d0 <HAL_I2C_Init+0x28c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	bf94      	ite	ls
 8002692:	2301      	movls	r3, #1
 8002694:	2300      	movhi	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e006      	b.n	80026a8 <HAL_I2C_Init+0x164>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_I2C_Init+0x290>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	bf94      	ite	ls
 80026a2:	2301      	movls	r3, #1
 80026a4:	2300      	movhi	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Init+0x16c>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0ee      	b.n	800288e <HAL_I2C_Init+0x34a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a49      	ldr	r2, [pc, #292]	; (80027d8 <HAL_I2C_Init+0x294>)
 80026b4:	fba2 2303 	umull	r2, r3, r2, r3
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_I2C_Init+0x288>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d802      	bhi.n	80026ea <HAL_I2C_Init+0x1a6>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3301      	adds	r3, #1
 80026e8:	e009      	b.n	80026fe <HAL_I2C_Init+0x1ba>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	4a39      	ldr	r2, [pc, #228]	; (80027dc <HAL_I2C_Init+0x298>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	3301      	adds	r3, #1
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	430b      	orrs	r3, r1
 8002704:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002710:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	492c      	ldr	r1, [pc, #176]	; (80027cc <HAL_I2C_Init+0x288>)
 800271a:	428b      	cmp	r3, r1
 800271c:	d80d      	bhi.n	800273a <HAL_I2C_Init+0x1f6>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e59      	subs	r1, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fbb1 f3f3 	udiv	r3, r1, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002732:	2b04      	cmp	r3, #4
 8002734:	bf38      	it	cc
 8002736:	2304      	movcc	r3, #4
 8002738:	e062      	b.n	8002800 <HAL_I2C_Init+0x2bc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d111      	bne.n	8002766 <HAL_I2C_Init+0x222>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e58      	subs	r0, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	440b      	add	r3, r1
 8002750:	fbb0 f3f3 	udiv	r3, r0, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e012      	b.n	800278c <HAL_I2C_Init+0x248>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e58      	subs	r0, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	0099      	lsls	r1, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	fbb0 f3f3 	udiv	r3, r0, r3
 800277c:	3301      	adds	r3, #1
 800277e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Init+0x250>
 8002790:	2301      	movs	r3, #1
 8002792:	e035      	b.n	8002800 <HAL_I2C_Init+0x2bc>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d121      	bne.n	80027e0 <HAL_I2C_Init+0x29c>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	440b      	add	r3, r1
 80027aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027b8:	e022      	b.n	8002800 <HAL_I2C_Init+0x2bc>
 80027ba:	bf00      	nop
 80027bc:	40005400 	.word	0x40005400
 80027c0:	40005800 	.word	0x40005800
 80027c4:	080064e8 	.word	0x080064e8
 80027c8:	00061a80 	.word	0x00061a80
 80027cc:	000186a0 	.word	0x000186a0
 80027d0:	001e847f 	.word	0x001e847f
 80027d4:	003d08ff 	.word	0x003d08ff
 80027d8:	431bde83 	.word	0x431bde83
 80027dc:	10624dd3 	.word	0x10624dd3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1e58      	subs	r0, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	0099      	lsls	r1, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f6:	3301      	adds	r3, #1
 80027f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	6809      	ldr	r1, [r1, #0]
 8002804:	4313      	orrs	r3, r2
 8002806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800282e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6911      	ldr	r1, [r2, #16]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	430b      	orrs	r3, r1
 8002842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop

08002898 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	461a      	mov	r2, r3
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
 80028a8:	4613      	mov	r3, r2
 80028aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	f040 8085 	bne.w	80029c8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80028be:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <HAL_I2C_Master_Transmit_IT+0x13c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	08db      	lsrs	r3, r3, #3
 80028c4:	4a44      	ldr	r2, [pc, #272]	; (80029d8 <HAL_I2C_Master_Transmit_IT+0x140>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0a1a      	lsrs	r2, r3, #8
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009a      	lsls	r2, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3b01      	subs	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2220      	movs	r2, #32
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e05b      	b.n	80029ca <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d0db      	beq.n	80028d8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_I2C_Master_Transmit_IT+0x96>
 800292a:	2302      	movs	r3, #2
 800292c:	e04d      	b.n	80029ca <HAL_I2C_Master_Transmit_IT+0x132>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d007      	beq.n	8002954 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0201 	orr.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2221      	movs	r2, #33	; 0x21
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2210      	movs	r2, #16
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_I2C_Master_Transmit_IT+0x144>)
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002996:	897a      	ldrh	r2, [r7, #10]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029aa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80029c2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000004 	.word	0x20000004
 80029d8:	14f8b589 	.word	0x14f8b589
 80029dc:	ffff0000 	.word	0xffff0000

080029e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d003      	beq.n	8002a18 <HAL_I2C_EV_IRQHandler+0x38>
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b40      	cmp	r3, #64	; 0x40
 8002a14:	f040 80b6 	bne.w	8002b84 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_I2C_EV_IRQHandler+0x6e>
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a38:	d003      	beq.n	8002a42 <HAL_I2C_EV_IRQHandler+0x62>
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_EV_IRQHandler+0x66>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_I2C_EV_IRQHandler+0x68>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	f000 8127 	beq.w	8002c9c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <HAL_I2C_EV_IRQHandler+0x92>
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	0a5b      	lsrs	r3, r3, #9
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d006      	beq.n	8002a72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f001 fa58 	bl	8003f1a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fc56 	bl	800331c <I2C_Master_SB>
 8002a70:	e087      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d009      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	0a5b      	lsrs	r3, r3, #9
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fccb 	bl	8003426 <I2C_Master_ADD10>
 8002a90:	e077      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fce4 	bl	8003478 <I2C_Master_ADDR>
 8002ab0:	e067      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d030      	beq.n	8002b20 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002acc:	f000 80e8 	beq.w	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	09db      	lsrs	r3, r3, #7
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00f      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x11c>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <HAL_I2C_EV_IRQHandler+0x11c>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f937 	bl	8002d68 <I2C_MasterTransmit_TXE>
 8002afa:	e042      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80cb 	beq.w	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80c4 	beq.w	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fa1d 	bl	8002f58 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b1e:	e0bf      	b.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2e:	f000 80b7 	beq.w	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00f      	beq.n	8002b5e <HAL_I2C_EV_IRQHandler+0x17e>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a9b      	lsrs	r3, r3, #10
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <HAL_I2C_EV_IRQHandler+0x17e>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa74 	bl	8003044 <I2C_MasterReceive_RXNE>
 8002b5c:	e011      	b.n	8002b82 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	089b      	lsrs	r3, r3, #2
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 809a 	beq.w	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0a5b      	lsrs	r3, r3, #9
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8093 	beq.w	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fae4 	bl	8003148 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b80:	e08e      	b.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b82:	e08d      	b.n	8002ca0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	e007      	b.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	0a5b      	lsrs	r3, r3, #9
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00c      	beq.n	8002bd8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fea8 	bl	8003926 <I2C_Slave_ADDR>
 8002bd6:	e066      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_I2C_EV_IRQHandler+0x218>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	0a5b      	lsrs	r3, r3, #9
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fedd 	bl	80039b0 <I2C_Slave_STOPF>
 8002bf6:	e056      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bf8:	7bbb      	ldrb	r3, [r7, #14]
 8002bfa:	2b21      	cmp	r3, #33	; 0x21
 8002bfc:	d002      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x224>
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	2b29      	cmp	r3, #41	; 0x29
 8002c02:	d125      	bne.n	8002c50 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	09db      	lsrs	r3, r3, #7
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x250>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0a9b      	lsrs	r3, r3, #10
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <HAL_I2C_EV_IRQHandler+0x250>
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d103      	bne.n	8002c30 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fdc0 	bl	80037ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c2e:	e039      	b.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d033      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	0a5b      	lsrs	r3, r3, #9
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02d      	beq.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fded 	bl	8003828 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c4e:	e029      	b.n	8002ca4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00f      	beq.n	8002c7c <HAL_I2C_EV_IRQHandler+0x29c>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d009      	beq.n	8002c7c <HAL_I2C_EV_IRQHandler+0x29c>
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fdf7 	bl	8003868 <I2C_SlaveReceive_RXNE>
 8002c7a:	e014      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fe25 	bl	80038e4 <I2C_SlaveReceive_BTF>
 8002c9a:	e004      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002c9c:	bf00      	nop
 8002c9e:	e002      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ca0:	bf00      	nop
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ca4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
 8002d00:	4613      	mov	r3, r2
 8002d02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d150      	bne.n	8002e30 <I2C_MasterTransmit_TXE+0xc8>
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b21      	cmp	r3, #33	; 0x21
 8002d92:	d14d      	bne.n	8002e30 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d01d      	beq.n	8002dd6 <I2C_MasterTransmit_TXE+0x6e>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d01a      	beq.n	8002dd6 <I2C_MasterTransmit_TXE+0x6e>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da6:	d016      	beq.n	8002dd6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2211      	movs	r2, #17
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff6c 	bl	8002cac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dd4:	e0bc      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002de4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d107      	bne.n	8002e20 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff81 	bl	8002d20 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e1e:	e097      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff3f 	bl	8002cac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e2e:	e08f      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b21      	cmp	r3, #33	; 0x21
 8002e34:	d007      	beq.n	8002e46 <I2C_MasterTransmit_TXE+0xde>
 8002e36:	7bbb      	ldrb	r3, [r7, #14]
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	f040 8089 	bne.w	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b22      	cmp	r3, #34	; 0x22
 8002e42:	f040 8085 	bne.w	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e60:	e076      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d15d      	bne.n	8002f2a <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11d      	bne.n	8002eb2 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10b      	bne.n	8002e96 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8e:	1c9a      	adds	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e94:	e05c      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	121b      	asrs	r3, r3, #8
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002eb0:	e04e      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d10b      	bne.n	8002ed2 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ed0:	e03e      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d13a      	bne.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b22      	cmp	r3, #34	; 0x22
 8002ee4:	d108      	bne.n	8002ef8 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	e02b      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b21      	cmp	r3, #33	; 0x21
 8002f02:	d125      	bne.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f28:	e012      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f4e:	e7ff      	b.n	8002f50 <I2C_MasterTransmit_TXE+0x1e8>
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b21      	cmp	r3, #33	; 0x21
 8002f70:	d164      	bne.n	800303c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d012      	beq.n	8002fa2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8002fa0:	e04c      	b.n	800303c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d01d      	beq.n	8002fe4 <I2C_MasterTransmit_BTF+0x8c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d01a      	beq.n	8002fe4 <I2C_MasterTransmit_BTF+0x8c>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fb4:	d016      	beq.n	8002fe4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2211      	movs	r2, #17
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff fe65 	bl	8002cac <HAL_I2C_MasterTxCpltCallback>
}
 8002fe2:	e02b      	b.n	800303c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003002:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d107      	bne.n	800302e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fe7a 	bl	8002d20 <HAL_I2C_MemTxCpltCallback>
}
 800302c:	e006      	b.n	800303c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fe38 	bl	8002cac <HAL_I2C_MasterTxCpltCallback>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b22      	cmp	r3, #34	; 0x22
 8003056:	d173      	bne.n	8003140 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d920      	bls.n	80030a8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b03      	cmp	r3, #3
 8003094:	d154      	bne.n	8003140 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80030a6:	e04b      	b.n	8003140 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d047      	beq.n	8003140 <I2C_MasterReceive_RXNE+0xfc>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d002      	beq.n	80030bc <I2C_MasterReceive_RXNE+0x78>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d141      	bne.n	8003140 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ca:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030da:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b40      	cmp	r3, #64	; 0x40
 8003114:	d10a      	bne.n	800312c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff fe04 	bl	8002d32 <HAL_I2C_MemRxCpltCallback>
}
 800312a:	e009      	b.n	8003140 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2212      	movs	r2, #18
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff fdbf 	bl	8002cbe <HAL_I2C_MasterRxCpltCallback>
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003196:	e0bd      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d129      	bne.n	80031f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d00a      	beq.n	80031ce <I2C_MasterReceive_BTF+0x86>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d007      	beq.n	80031ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80031f4:	e08e      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d176      	bne.n	80032ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d002      	beq.n	800320c <I2C_MasterReceive_BTF+0xc4>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b10      	cmp	r3, #16
 800320a:	d108      	bne.n	800321e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e019      	b.n	8003252 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d002      	beq.n	800322a <I2C_MasterReceive_BTF+0xe2>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d108      	bne.n	800323c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00a      	b.n	8003252 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d007      	beq.n	8003252 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003250:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d10a      	bne.n	80032d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fd2e 	bl	8002d32 <HAL_I2C_MemRxCpltCallback>
}
 80032d6:	e01d      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2212      	movs	r2, #18
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fce9 	bl	8002cbe <HAL_I2C_MasterRxCpltCallback>
}
 80032ec:	e012      	b.n	8003314 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d117      	bne.n	8003360 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003348:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800334a:	e067      	b.n	800341c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]
}
 800335e:	e05d      	b.n	800341c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003368:	d133      	bne.n	80033d2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b21      	cmp	r3, #33	; 0x21
 8003374:	d109      	bne.n	800338a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003386:	611a      	str	r2, [r3, #16]
 8003388:	e008      	b.n	800339c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2da      	uxtb	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <I2C_Master_SB+0x90>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d037      	beq.n	800341c <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <I2C_Master_SB+0xa4>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02d      	beq.n	800341c <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ce:	605a      	str	r2, [r3, #4]
}
 80033d0:	e024      	b.n	800341c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	b29b      	uxth	r3, r3
 80033e0:	11db      	asrs	r3, r3, #7
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f003 0306 	and.w	r3, r3, #6
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f063 030f 	orn	r3, r3, #15
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	611a      	str	r2, [r3, #16]
}
 80033f6:	e011      	b.n	800341c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10d      	bne.n	800341c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	b29b      	uxth	r3, r3
 8003406:	11db      	asrs	r3, r3, #7
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 0306 	and.w	r3, r3, #6
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f063 030e 	orn	r3, r3, #14
 8003414:	b2da      	uxtb	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	611a      	str	r2, [r3, #16]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	b2da      	uxtb	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <I2C_Master_ADD10+0x24>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	2b00      	cmp	r3, #0
 8003448:	d011      	beq.n	800346e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <I2C_Master_ADD10+0x38>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003478:	b480      	push	{r7}
 800347a:	b091      	sub	sp, #68	; 0x44
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003486:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b22      	cmp	r3, #34	; 0x22
 80034a0:	f040 8174 	bne.w	800378c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <I2C_Master_ADDR+0x54>
 80034ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d10b      	bne.n	80034cc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	633b      	str	r3, [r7, #48]	; 0x30
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	e16b      	b.n	80037a4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11d      	bne.n	8003510 <I2C_Master_ADDR+0x98>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034dc:	d118      	bne.n	8003510 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003502:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	651a      	str	r2, [r3, #80]	; 0x50
 800350e:	e149      	b.n	80037a4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351a:	2300      	movs	r3, #0
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e120      	b.n	8003784 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	f040 808a 	bne.w	8003662 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800354e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003554:	d137      	bne.n	80035c6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003564:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003574:	d113      	bne.n	800359e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003584:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	e0f2      	b.n	8003784 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e0de      	b.n	8003784 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d02e      	beq.n	800362a <I2C_Master_ADDR+0x1b2>
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d02b      	beq.n	800362a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d4:	2b12      	cmp	r3, #18
 80035d6:	d102      	bne.n	80035de <I2C_Master_ADDR+0x166>
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d125      	bne.n	800362a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d00e      	beq.n	8003602 <I2C_Master_ADDR+0x18a>
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d00b      	beq.n	8003602 <I2C_Master_ADDR+0x18a>
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d008      	beq.n	8003602 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e007      	b.n	8003612 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003610:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	e0ac      	b.n	8003784 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e090      	b.n	8003784 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d158      	bne.n	800371e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b04      	cmp	r3, #4
 8003670:	d021      	beq.n	80036b6 <I2C_Master_ADDR+0x23e>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b02      	cmp	r3, #2
 8003676:	d01e      	beq.n	80036b6 <I2C_Master_ADDR+0x23e>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b10      	cmp	r3, #16
 800367c:	d01b      	beq.n	80036b6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e012      	b.n	80036dc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ea:	d14b      	bne.n	8003784 <I2C_Master_ADDR+0x30c>
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036f2:	d00b      	beq.n	800370c <I2C_Master_ADDR+0x294>
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d008      	beq.n	800370c <I2C_Master_ADDR+0x294>
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d005      	beq.n	800370c <I2C_Master_ADDR+0x294>
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b10      	cmp	r3, #16
 8003704:	d002      	beq.n	800370c <I2C_Master_ADDR+0x294>
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b20      	cmp	r3, #32
 800370a:	d13b      	bne.n	8003784 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	e032      	b.n	8003784 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373c:	d117      	bne.n	800376e <I2C_Master_ADDR+0x2f6>
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003744:	d00b      	beq.n	800375e <I2C_Master_ADDR+0x2e6>
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	2b01      	cmp	r3, #1
 800374a:	d008      	beq.n	800375e <I2C_Master_ADDR+0x2e6>
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2b08      	cmp	r3, #8
 8003750:	d005      	beq.n	800375e <I2C_Master_ADDR+0x2e6>
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	2b10      	cmp	r3, #16
 8003756:	d002      	beq.n	800375e <I2C_Master_ADDR+0x2e6>
 8003758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375a:	2b20      	cmp	r3, #32
 800375c:	d107      	bne.n	800376e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800376c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800378a:	e00b      	b.n	80037a4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378c:	2300      	movs	r3, #0
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
}
 80037a2:	e7ff      	b.n	80037a4 <I2C_Master_ADDR+0x32c>
 80037a4:	bf00      	nop
 80037a6:	3744      	adds	r7, #68	; 0x44
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d02b      	beq.n	8003820 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d114      	bne.n	8003820 <I2C_SlaveTransmit_TXE+0x72>
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	2b29      	cmp	r3, #41	; 0x29
 80037fa:	d111      	bne.n	8003820 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2221      	movs	r2, #33	; 0x21
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2228      	movs	r2, #40	; 0x28
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fa58 	bl	8002cd0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d011      	beq.n	800385e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003876:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d02c      	beq.n	80038dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d114      	bne.n	80038dc <I2C_SlaveReceive_RXNE+0x74>
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b2a      	cmp	r3, #42	; 0x2a
 80038b6:	d111      	bne.n	80038dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2222      	movs	r2, #34	; 0x22
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2228      	movs	r2, #40	; 0x28
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fa03 	bl	8002ce2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003940:	2b28      	cmp	r3, #40	; 0x28
 8003942:	d127      	bne.n	8003994 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003952:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	09db      	lsrs	r3, r3, #7
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	81bb      	strh	r3, [r7, #12]
 8003976:	e002      	b.n	800397e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003986:	89ba      	ldrh	r2, [r7, #12]
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff f9b1 	bl	8002cf4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003992:	e008      	b.n	80039a6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f06f 0202 	mvn.w	r2, #2
 800399c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d172      	bne.n	8003af4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b22      	cmp	r3, #34	; 0x22
 8003a12:	d002      	beq.n	8003a1a <I2C_Slave_STOPF+0x6a>
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	2b2a      	cmp	r3, #42	; 0x2a
 8003a18:	d135      	bne.n	8003a86 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fab2 	bl	8001fbc <HAL_DMA_GetState>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d049      	beq.n	8003af2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <I2C_Slave_STOPF+0x258>)
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fa30 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03d      	beq.n	8003af2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a84:	e035      	b.n	8003af2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fa7c 	bl	8001fbc <HAL_DMA_GetState>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d014      	beq.n	8003af4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <I2C_Slave_STOPF+0x258>)
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe f9fa 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
 8003af0:	e000      	b.n	8003af4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003af2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d03e      	beq.n	8003b7c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d112      	bne.n	8003b32 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d112      	bne.n	8003b66 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f843 	bl	8003c10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b8a:	e039      	b.n	8003c00 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b90:	d109      	bne.n	8003ba6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2228      	movs	r2, #40	; 0x28
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff f89e 	bl	8002ce2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b28      	cmp	r3, #40	; 0x28
 8003bb0:	d111      	bne.n	8003bd6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <I2C_Slave_STOPF+0x25c>)
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff f89d 	bl	8002d0e <HAL_I2C_ListenCpltCallback>
}
 8003bd4:	e014      	b.n	8003c00 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	2b22      	cmp	r3, #34	; 0x22
 8003bdc:	d002      	beq.n	8003be4 <I2C_Slave_STOPF+0x234>
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b22      	cmp	r3, #34	; 0x22
 8003be2:	d10d      	bne.n	8003c00 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff f871 	bl	8002ce2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	08003e3d 	.word	0x08003e3d
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d10a      	bne.n	8003c42 <I2C_ITError+0x32>
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b22      	cmp	r3, #34	; 0x22
 8003c30:	d107      	bne.n	8003c42 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c40:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c48:	2b28      	cmp	r3, #40	; 0x28
 8003c4a:	d107      	bne.n	8003c5c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2228      	movs	r2, #40	; 0x28
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c5a:	e015      	b.n	8003c88 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d006      	beq.n	8003c7a <I2C_ITError+0x6a>
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b60      	cmp	r3, #96	; 0x60
 8003c70:	d003      	beq.n	8003c7a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c96:	d161      	bne.n	8003d5c <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ca6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d020      	beq.n	8003cf6 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	4a5e      	ldr	r2, [pc, #376]	; (8003e34 <I2C_ITError+0x224>)
 8003cba:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f905 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8089 	beq.w	8003de0 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4798      	blx	r3
 8003cf4:	e074      	b.n	8003de0 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <I2C_ITError+0x224>)
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe f8e4 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d068      	beq.n	8003de0 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d10b      	bne.n	8003d34 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d56:	4610      	mov	r0, r2
 8003d58:	4798      	blx	r3
 8003d5a:	e041      	b.n	8003de0 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d125      	bne.n	8003db4 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d10b      	bne.n	8003d9c <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fe ffd2 	bl	8002d56 <HAL_I2C_AbortCpltCallback>
 8003db2:	e015      	b.n	8003de0 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d10b      	bne.n	8003dda <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fe ffb2 	bl	8002d44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d11b      	bne.n	8003e2c <I2C_ITError+0x21c>
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b28      	cmp	r3, #40	; 0x28
 8003df8:	d118      	bne.n	8003e2c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e08:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <I2C_ITError+0x228>)
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fe ff71 	bl	8002d0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	ffff0000 	.word	0xffff0000

08003e3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e50:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	2200      	movs	r2, #0
 8003e60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	2200      	movs	r2, #0
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b60      	cmp	r3, #96	; 0x60
 8003ea2:	d10e      	bne.n	8003ec2 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7fe ff4b 	bl	8002d56 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ec0:	e027      	b.n	8003f12 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
 8003ec4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ec8:	2b28      	cmp	r3, #40	; 0x28
 8003eca:	d117      	bne.n	8003efc <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003eea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2228      	movs	r2, #40	; 0x28
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003efa:	e007      	b.n	8003f0c <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7fe ff19 	bl	8002d44 <HAL_I2C_ErrorCallback>
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f2a:	d103      	bne.n	8003f34 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f32:	e007      	b.n	8003f44 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f3c:	d102      	bne.n	8003f44 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2208      	movs	r2, #8
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e35c      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01c      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d116      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d110      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f9a:	f240 1167 	movw	r1, #359	; 0x167
 8003f9e:	48a5      	ldr	r0, [pc, #660]	; (8004234 <HAL_RCC_OscConfig+0x2e4>)
 8003fa0:	f7fc fc59 	bl	8000856 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 809a 	beq.w	80040e6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00e      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x88>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x88>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fcc:	d004      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x88>
 8003fce:	f240 116d 	movw	r1, #365	; 0x16d
 8003fd2:	4898      	ldr	r0, [pc, #608]	; (8004234 <HAL_RCC_OscConfig+0x2e4>)
 8003fd4:	f7fc fc3f 	bl	8000856 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd8:	4b97      	ldr	r3, [pc, #604]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 030c 	and.w	r3, r3, #12
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d00c      	beq.n	8003ffe <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fe4:	4b94      	ldr	r3, [pc, #592]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 030c 	and.w	r3, r3, #12
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d112      	bne.n	8004016 <HAL_RCC_OscConfig+0xc6>
 8003ff0:	4b91      	ldr	r3, [pc, #580]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffe:	4b8e      	ldr	r3, [pc, #568]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d06c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x194>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d168      	bne.n	80040e4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e302      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0xde>
 8004020:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a84      	ldr	r2, [pc, #528]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	e02e      	b.n	800408c <HAL_RCC_OscConfig+0x13c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x100>
 8004036:	4b80      	ldr	r3, [pc, #512]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7f      	ldr	r2, [pc, #508]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800403c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4b7d      	ldr	r3, [pc, #500]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7c      	ldr	r2, [pc, #496]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e01d      	b.n	800408c <HAL_RCC_OscConfig+0x13c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004058:	d10c      	bne.n	8004074 <HAL_RCC_OscConfig+0x124>
 800405a:	4b77      	ldr	r3, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a76      	ldr	r2, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a73      	ldr	r2, [pc, #460]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800406c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	e00b      	b.n	800408c <HAL_RCC_OscConfig+0x13c>
 8004074:	4b70      	ldr	r3, [pc, #448]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6f      	ldr	r2, [pc, #444]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800407a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	4b6d      	ldr	r3, [pc, #436]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a6c      	ldr	r2, [pc, #432]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d013      	beq.n	80040bc <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fd f82c 	bl	80010f0 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd f828 	bl	80010f0 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e2b6      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b62      	ldr	r3, [pc, #392]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x14c>
 80040ba:	e014      	b.n	80040e6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fd f818 	bl	80010f0 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c4:	f7fd f814 	bl	80010f0 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b64      	cmp	r3, #100	; 0x64
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e2a2      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d6:	4b58      	ldr	r3, [pc, #352]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x174>
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d079      	beq.n	80041e6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d008      	beq.n	800410c <HAL_RCC_OscConfig+0x1bc>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d004      	beq.n	800410c <HAL_RCC_OscConfig+0x1bc>
 8004102:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004106:	484b      	ldr	r0, [pc, #300]	; (8004234 <HAL_RCC_OscConfig+0x2e4>)
 8004108:	f7fc fba5 	bl	8000856 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	2b1f      	cmp	r3, #31
 8004112:	d904      	bls.n	800411e <HAL_RCC_OscConfig+0x1ce>
 8004114:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004118:	4846      	ldr	r0, [pc, #280]	; (8004234 <HAL_RCC_OscConfig+0x2e4>)
 800411a:	f7fc fb9c 	bl	8000856 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800411e:	4b46      	ldr	r3, [pc, #280]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800412a:	4b43      	ldr	r3, [pc, #268]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b08      	cmp	r3, #8
 8004134:	d11c      	bne.n	8004170 <HAL_RCC_OscConfig+0x220>
 8004136:	4b40      	ldr	r3, [pc, #256]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d116      	bne.n	8004170 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_RCC_OscConfig+0x20a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e260      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4933      	ldr	r1, [pc, #204]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	e03a      	b.n	80041e6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d020      	beq.n	80041ba <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_RCC_OscConfig+0x2ec>)
 800417a:	2201      	movs	r2, #1
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417e:	f7fc ffb7 	bl	80010f0 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004186:	f7fc ffb3 	bl	80010f0 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e241      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	4b27      	ldr	r3, [pc, #156]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b24      	ldr	r3, [pc, #144]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4921      	ldr	r1, [pc, #132]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_OscConfig+0x2ec>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c0:	f7fc ff96 	bl	80010f0 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c8:	f7fc ff92 	bl	80010f0 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e220      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <HAL_RCC_OscConfig+0x2e8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f0      	bne.n	80041c8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d048      	beq.n	8004284 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_RCC_OscConfig+0x2bc>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d004      	beq.n	800420c <HAL_RCC_OscConfig+0x2bc>
 8004202:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004206:	480b      	ldr	r0, [pc, #44]	; (8004234 <HAL_RCC_OscConfig+0x2e4>)
 8004208:	f7fc fb25 	bl	8000856 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d021      	beq.n	8004258 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_RCC_OscConfig+0x2f0>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421a:	f7fc ff69 	bl	80010f0 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004220:	e010      	b.n	8004244 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fc ff65 	bl	80010f0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d909      	bls.n	8004244 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1f3      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
 8004234:	08006520 	.word	0x08006520
 8004238:	40021000 	.word	0x40021000
 800423c:	42420000 	.word	0x42420000
 8004240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004244:	4b67      	ldr	r3, [pc, #412]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0e8      	beq.n	8004222 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004250:	2001      	movs	r0, #1
 8004252:	f000 fc11 	bl	8004a78 <RCC_Delay>
 8004256:	e015      	b.n	8004284 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b63      	ldr	r3, [pc, #396]	; (80043e8 <HAL_RCC_OscConfig+0x498>)
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7fc ff47 	bl	80010f0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004266:	f7fc ff43 	bl	80010f0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1d1      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004278:	4b5a      	ldr	r3, [pc, #360]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80c0 	beq.w	8004412 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x368>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d008      	beq.n	80042b8 <HAL_RCC_OscConfig+0x368>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d004      	beq.n	80042b8 <HAL_RCC_OscConfig+0x368>
 80042ae:	f240 2111 	movw	r1, #529	; 0x211
 80042b2:	484e      	ldr	r0, [pc, #312]	; (80043ec <HAL_RCC_OscConfig+0x49c>)
 80042b4:	f7fc facf 	bl	8000856 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042b8:	4b4a      	ldr	r3, [pc, #296]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c4:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4a46      	ldr	r2, [pc, #280]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	61d3      	str	r3, [r2, #28]
 80042d0:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042dc:	2301      	movs	r3, #1
 80042de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e0:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <HAL_RCC_OscConfig+0x4a0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d118      	bne.n	800431e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <HAL_RCC_OscConfig+0x4a0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	; (80043f0 <HAL_RCC_OscConfig+0x4a0>)
 80042f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f8:	f7fc fefa 	bl	80010f0 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004300:	f7fc fef6 	bl	80010f0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e184      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_OscConfig+0x4a0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x3e4>
 8004326:	4b2f      	ldr	r3, [pc, #188]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6213      	str	r3, [r2, #32]
 8004332:	e02d      	b.n	8004390 <HAL_RCC_OscConfig+0x440>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_OscConfig+0x406>
 800433c:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4a28      	ldr	r2, [pc, #160]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	6213      	str	r3, [r2, #32]
 8004348:	4b26      	ldr	r3, [pc, #152]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a25      	ldr	r2, [pc, #148]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800434e:	f023 0304 	bic.w	r3, r3, #4
 8004352:	6213      	str	r3, [r2, #32]
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x440>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b05      	cmp	r3, #5
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x428>
 800435e:	4b21      	ldr	r3, [pc, #132]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0x440>
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4a19      	ldr	r2, [pc, #100]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6213      	str	r3, [r2, #32]
 8004384:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 800438a:	f023 0304 	bic.w	r3, r3, #4
 800438e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d015      	beq.n	80043c4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004398:	f7fc feaa 	bl	80010f0 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a0:	f7fc fea6 	bl	80010f0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e132      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b6:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_OscConfig+0x494>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0ee      	beq.n	80043a0 <HAL_RCC_OscConfig+0x450>
 80043c2:	e01d      	b.n	8004400 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c4:	f7fc fe94 	bl	80010f0 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ca:	e013      	b.n	80043f4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fc fe90 	bl	80010f0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d90a      	bls.n	80043f4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e11c      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	42420480 	.word	0x42420480
 80043ec:	08006520 	.word	0x08006520
 80043f0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f4:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b87      	ldr	r3, [pc, #540]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4a86      	ldr	r2, [pc, #536]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e4>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d008      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d004      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e4>
 800442a:	f240 21af 	movw	r1, #687	; 0x2af
 800442e:	487e      	ldr	r0, [pc, #504]	; (8004628 <HAL_RCC_OscConfig+0x6d8>)
 8004430:	f7fc fa11 	bl	8000856 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80ee 	beq.w	800461a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800443e:	4b79      	ldr	r3, [pc, #484]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	f000 80ce 	beq.w	80045e8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b02      	cmp	r3, #2
 8004452:	f040 80b2 	bne.w	80045ba <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_RCC_OscConfig+0x522>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d004      	beq.n	8004472 <HAL_RCC_OscConfig+0x522>
 8004468:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800446c:	486e      	ldr	r0, [pc, #440]	; (8004628 <HAL_RCC_OscConfig+0x6d8>)
 800446e:	f7fc f9f2 	bl	8000856 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d04a      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004482:	d045      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800448c:	d040      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004496:	d03b      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a0:	d036      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044aa:	d031      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044b4:	d02c      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044be:	d027      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c8:	d022      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044d2:	d01d      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044dc:	d018      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044e6:	d013      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044f0:	d00e      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80044fa:	d009      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004504:	d004      	beq.n	8004510 <HAL_RCC_OscConfig+0x5c0>
 8004506:	f240 21b9 	movw	r1, #697	; 0x2b9
 800450a:	4847      	ldr	r0, [pc, #284]	; (8004628 <HAL_RCC_OscConfig+0x6d8>)
 800450c:	f7fc f9a3 	bl	8000856 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004510:	4b46      	ldr	r3, [pc, #280]	; (800462c <HAL_RCC_OscConfig+0x6dc>)
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fc fdeb 	bl	80010f0 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451e:	f7fc fde7 	bl	80010f0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e075      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004530:	4b3c      	ldr	r3, [pc, #240]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f0      	bne.n	800451e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004544:	d116      	bne.n	8004574 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_OscConfig+0x612>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004556:	d004      	beq.n	8004562 <HAL_RCC_OscConfig+0x612>
 8004558:	f240 21cf 	movw	r1, #719	; 0x2cf
 800455c:	4832      	ldr	r0, [pc, #200]	; (8004628 <HAL_RCC_OscConfig+0x6d8>)
 800455e:	f7fc f97a 	bl	8000856 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	492d      	ldr	r1, [pc, #180]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a19      	ldr	r1, [r3, #32]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	430b      	orrs	r3, r1
 8004586:	4927      	ldr	r1, [pc, #156]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCC_OscConfig+0x6dc>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fc fdad 	bl	80010f0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459a:	f7fc fda9 	bl	80010f0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e037      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x64a>
 80045b8:	e02f      	b.n	800461a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_RCC_OscConfig+0x6dc>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fc fd96 	bl	80010f0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fc fd92 	bl	80010f0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e020      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x678>
 80045e6:	e018      	b.n	800461a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e013      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x6d4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	429a      	cmp	r2, r3
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000
 8004628:	08006520 	.word	0x08006520
 800462c:	42420060 	.word	0x42420060

08004630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e176      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d116      	bne.n	800467e <HAL_RCC_ClockConfig+0x4e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d110      	bne.n	800467e <HAL_RCC_ClockConfig+0x4e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <HAL_RCC_ClockConfig+0x4e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d104      	bne.n	800467e <HAL_RCC_ClockConfig+0x4e>
 8004674:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004678:	4874      	ldr	r0, [pc, #464]	; (800484c <HAL_RCC_ClockConfig+0x21c>)
 800467a:	f7fc f8ec 	bl	8000856 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_RCC_ClockConfig+0x6a>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d007      	beq.n	800469a <HAL_RCC_ClockConfig+0x6a>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d004      	beq.n	800469a <HAL_RCC_ClockConfig+0x6a>
 8004690:	f240 3139 	movw	r1, #825	; 0x339
 8004694:	486d      	ldr	r0, [pc, #436]	; (800484c <HAL_RCC_ClockConfig+0x21c>)
 8004696:	f7fc f8de 	bl	8000856 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800469a:	4b6d      	ldr	r3, [pc, #436]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d910      	bls.n	80046ca <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a8:	4b69      	ldr	r3, [pc, #420]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 0207 	bic.w	r2, r3, #7
 80046b0:	4967      	ldr	r1, [pc, #412]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b8:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e133      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d049      	beq.n	800476a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e2:	4b5c      	ldr	r3, [pc, #368]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80046e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ec:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046fa:	4b56      	ldr	r3, [pc, #344]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4a55      	ldr	r2, [pc, #340]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 8004700:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004704:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d024      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d020      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b90      	cmp	r3, #144	; 0x90
 800471c:	d01c      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2ba0      	cmp	r3, #160	; 0xa0
 8004724:	d018      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2bb0      	cmp	r3, #176	; 0xb0
 800472c:	d014      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2bc0      	cmp	r3, #192	; 0xc0
 8004734:	d010      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2bd0      	cmp	r3, #208	; 0xd0
 800473c:	d00c      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2be0      	cmp	r3, #224	; 0xe0
 8004744:	d008      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2bf0      	cmp	r3, #240	; 0xf0
 800474c:	d004      	beq.n	8004758 <HAL_RCC_ClockConfig+0x128>
 800474e:	f240 315f 	movw	r1, #863	; 0x35f
 8004752:	483e      	ldr	r0, [pc, #248]	; (800484c <HAL_RCC_ClockConfig+0x21c>)
 8004754:	f7fc f87f 	bl	8000856 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004758:	4b3e      	ldr	r3, [pc, #248]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	493b      	ldr	r1, [pc, #236]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 8004766:	4313      	orrs	r3, r2
 8004768:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d051      	beq.n	800481a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_RCC_ClockConfig+0x168>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d008      	beq.n	8004798 <HAL_RCC_ClockConfig+0x168>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d004      	beq.n	8004798 <HAL_RCC_ClockConfig+0x168>
 800478e:	f240 3166 	movw	r1, #870	; 0x366
 8004792:	482e      	ldr	r0, [pc, #184]	; (800484c <HAL_RCC_ClockConfig+0x21c>)
 8004794:	f7fc f85f 	bl	8000856 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d115      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0c0      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b8:	4b26      	ldr	r3, [pc, #152]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b4      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	4b22      	ldr	r3, [pc, #136]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0ac      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d8:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 0203 	bic.w	r2, r3, #3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	491b      	ldr	r1, [pc, #108]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ea:	f7fc fc81 	bl	80010f0 <HAL_GetTick>
 80047ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f0:	e00a      	b.n	8004808 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f2:	f7fc fc7d 	bl	80010f0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004800:	4293      	cmp	r3, r2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e094      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004808:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x224>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 020c 	and.w	r2, r3, #12
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	429a      	cmp	r2, r3
 8004818:	d1eb      	bne.n	80047f2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d217      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f023 0207 	bic.w	r2, r3, #7
 8004830:	4907      	ldr	r1, [pc, #28]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4313      	orrs	r3, r2
 8004836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_ClockConfig+0x220>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d008      	beq.n	8004858 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e073      	b.n	8004932 <HAL_RCC_ClockConfig+0x302>
 800484a:	bf00      	nop
 800484c:	08006520 	.word	0x08006520
 8004850:	40022000 	.word	0x40022000
 8004854:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d025      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d018      	beq.n	800489e <HAL_RCC_ClockConfig+0x26e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004874:	d013      	beq.n	800489e <HAL_RCC_ClockConfig+0x26e>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800487e:	d00e      	beq.n	800489e <HAL_RCC_ClockConfig+0x26e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004888:	d009      	beq.n	800489e <HAL_RCC_ClockConfig+0x26e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004892:	d004      	beq.n	800489e <HAL_RCC_ClockConfig+0x26e>
 8004894:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004898:	4828      	ldr	r0, [pc, #160]	; (800493c <HAL_RCC_ClockConfig+0x30c>)
 800489a:	f7fb ffdc 	bl	8000856 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_RCC_ClockConfig+0x310>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	4925      	ldr	r1, [pc, #148]	; (8004940 <HAL_RCC_ClockConfig+0x310>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d026      	beq.n	800490a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d018      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x2c6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	d013      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x2c6>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048d6:	d00e      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x2c6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x2c6>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ea:	d004      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x2c6>
 80048ec:	f240 31ab 	movw	r1, #939	; 0x3ab
 80048f0:	4812      	ldr	r0, [pc, #72]	; (800493c <HAL_RCC_ClockConfig+0x30c>)
 80048f2:	f7fb ffb0 	bl	8000856 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCC_ClockConfig+0x310>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	490e      	ldr	r1, [pc, #56]	; (8004940 <HAL_RCC_ClockConfig+0x310>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800490a:	f000 f821 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800490e:	4601      	mov	r1, r0
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_ClockConfig+0x310>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <HAL_RCC_ClockConfig+0x314>)
 800491c:	5cd3      	ldrb	r3, [r2, r3]
 800491e:	fa21 f303 	lsr.w	r3, r1, r3
 8004922:	4a09      	ldr	r2, [pc, #36]	; (8004948 <HAL_RCC_ClockConfig+0x318>)
 8004924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x31c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fc fb9e 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	08006520 	.word	0x08006520
 8004940:	40021000 	.word	0x40021000
 8004944:	0800666c 	.word	0x0800666c
 8004948:	20000004 	.word	0x20000004
 800494c:	20000008 	.word	0x20000008

08004950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004950:	b490      	push	{r4, r7}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004956:	4b2a      	ldr	r3, [pc, #168]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004958:	1d3c      	adds	r4, r7, #4
 800495a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800495c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004960:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800497a:	4b23      	ldr	r3, [pc, #140]	; (8004a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b04      	cmp	r3, #4
 8004988:	d002      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0x40>
 800498a:	2b08      	cmp	r3, #8
 800498c:	d003      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x46>
 800498e:	e02d      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004990:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004992:	623b      	str	r3, [r7, #32]
      break;
 8004994:	e02d      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	0c9b      	lsrs	r3, r3, #18
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049a2:	4413      	add	r3, r2
 80049a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c5b      	lsrs	r3, r3, #17
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049c2:	4413      	add	r3, r2
 80049c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80049ce:	fb02 f203 	mul.w	r2, r2, r3
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	e004      	b.n	80049e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	623b      	str	r3, [r7, #32]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049ec:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80049ee:	623b      	str	r3, [r7, #32]
      break;
 80049f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f2:	6a3b      	ldr	r3, [r7, #32]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc90      	pop	{r4, r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	08006558 	.word	0x08006558
 8004a04:	08006568 	.word	0x08006568
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	007a1200 	.word	0x007a1200
 8004a10:	003d0900 	.word	0x003d0900

08004a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr
 8004a24:	20000004 	.word	0x20000004

08004a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a2c:	f7ff fff2 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a30:	4601      	mov	r1, r0
 8004a32:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	4a03      	ldr	r2, [pc, #12]	; (8004a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	0800667c 	.word	0x0800667c

08004a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a54:	f7ff ffde 	bl	8004a14 <HAL_RCC_GetHCLKFreq>
 8004a58:	4601      	mov	r1, r0
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	0adb      	lsrs	r3, r3, #11
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	4a03      	ldr	r2, [pc, #12]	; (8004a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a66:	5cd3      	ldrb	r3, [r2, r3]
 8004a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	0800667c 	.word	0x0800667c

08004a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <RCC_Delay+0x34>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <RCC_Delay+0x38>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	0a5b      	lsrs	r3, r3, #9
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	fb02 f303 	mul.w	r3, r2, r3
 8004a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a94:	bf00      	nop
  }
  while (Delay --);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	1e5a      	subs	r2, r3, #1
 8004a9a:	60fa      	str	r2, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f9      	bne.n	8004a94 <RCC_Delay+0x1c>
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000004 	.word	0x20000004
 8004ab0:	10624dd3 	.word	0x10624dd3

08004ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d103      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004ae8:	216c      	movs	r1, #108	; 0x6c
 8004aea:	4873      	ldr	r0, [pc, #460]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004aec:	f7fb feb3 	bl	8000856 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8095 	beq.w	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d012      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b0e:	d00d      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b18:	d008      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b22:	d003      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b24:	2172      	movs	r1, #114	; 0x72
 8004b26:	4864      	ldr	r0, [pc, #400]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004b28:	f7fb fe95 	bl	8000856 <assert_failed>

    FlagStatus       pwrclkchanged = RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b30:	4b62      	ldr	r3, [pc, #392]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4a5e      	ldr	r2, [pc, #376]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	61d3      	str	r3, [r2, #28]
 8004b48:	4b5c      	ldr	r3, [pc, #368]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b54:	2301      	movs	r3, #1
 8004b56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b58:	4b59      	ldr	r3, [pc, #356]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d118      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b64:	4b56      	ldr	r3, [pc, #344]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a55      	ldr	r2, [pc, #340]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b70:	f7fc fabe 	bl	80010f0 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b78:	f7fc faba 	bl	80010f0 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b64      	cmp	r3, #100	; 0x64
 8004b84:	d901      	bls.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e092      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8a:	4b4d      	ldr	r3, [pc, #308]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b96:	4b49      	ldr	r3, [pc, #292]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d02e      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d027      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb4:	4b41      	ldr	r3, [pc, #260]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bbe:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc4:	4b3f      	ldr	r3, [pc, #252]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bca:	4a3c      	ldr	r2, [pc, #240]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d014      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fc fa89 	bl	80010f0 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fc fa85 	bl	80010f0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e05b      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ee      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	492a      	ldr	r1, [pc, #168]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1c:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01f      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d012      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c44:	d00d      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d008      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c58:	d003      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004c5a:	21b9      	movs	r1, #185	; 0xb9
 8004c5c:	4816      	ldr	r0, [pc, #88]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004c5e:	f7fb fdfa 	bl	8000856 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4913      	ldr	r1, [pc, #76]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d016      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c88:	d008      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c92:	f240 1115 	movw	r1, #277	; 0x115
 8004c96:	4808      	ldr	r0, [pc, #32]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8004c98:	f7fb fddd 	bl	8000856 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4904      	ldr	r1, [pc, #16]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	0800656c 	.word	0x0800656c
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	42420440 	.word	0x42420440

08004cc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cc8:	b590      	push	{r4, r7, lr}
 8004cca:	b08d      	sub	sp, #52	; 0x34
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cd0:	4b5f      	ldr	r3, [pc, #380]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0x188>)
 8004cd2:	f107 040c 	add.w	r4, r7, #12
 8004cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004cdc:	4b5d      	ldr	r3, [pc, #372]	; (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>)
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f003 0310 	and.w	r3, r3, #16
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8004d14:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004d18:	484f      	ldr	r0, [pc, #316]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x190>)
 8004d1a:	f7fb fd9c 	bl	8000856 <assert_failed>

  switch (PeriphClk)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d07f      	beq.n	8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d002      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d048      	beq.n	8004dbe <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004d2c:	e08b      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      temp_reg = RCC->CFGR;
 8004d2e:	4b4b      	ldr	r3, [pc, #300]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004d34:	4b49      	ldr	r3, [pc, #292]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d07f      	beq.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	0c9b      	lsrs	r3, r3, #18
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d52:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	0c5b      	lsrs	r3, r3, #17
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d7e:	4a38      	ldr	r2, [pc, #224]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d8e:	e004      	b.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d9a:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da6:	d102      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = pllclk;
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dac:	e048      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
          frequency = (pllclk * 2) / 3;
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004dbc:	e040      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
      temp_reg = RCC->BDCR;
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dce:	d108      	bne.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSE_VALUE;
 8004dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de0:	e01f      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dec:	d109      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = LSI_VALUE;
 8004dfa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e00:	e00f      	b.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0c:	d11a      	bne.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d014      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
        frequency = HSE_VALUE / 128U;
 8004e1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e20:	e010      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8004e22:	e00f      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004e24:	f7ff fe14 	bl	8004a50 <HAL_RCC_GetPCLK2Freq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b0c      	ldr	r3, [pc, #48]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x194>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	0b9b      	lsrs	r3, r3, #14
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	3301      	adds	r3, #1
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8004e40:	bf00      	nop
 8004e42:	e000      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
      break;
 8004e44:	bf00      	nop
    }
  }
  return (frequency);
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3734      	adds	r7, #52	; 0x34
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}
 8004e50:	080065a8 	.word	0x080065a8
 8004e54:	080065b8 	.word	0x080065b8
 8004e58:	0800656c 	.word	0x0800656c
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	007a1200 	.word	0x007a1200
 8004e64:	003d0900 	.word	0x003d0900
 8004e68:	aaaaaaab 	.word	0xaaaaaaab

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e06f      	b.n	8004f5e <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a39      	ldr	r2, [pc, #228]	; (8004f68 <HAL_TIM_Base_Init+0xfc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_TIM_Base_Init+0x44>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e90:	d00e      	beq.n	8004eb0 <HAL_TIM_Base_Init+0x44>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a35      	ldr	r2, [pc, #212]	; (8004f6c <HAL_TIM_Base_Init+0x100>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d009      	beq.n	8004eb0 <HAL_TIM_Base_Init+0x44>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a33      	ldr	r2, [pc, #204]	; (8004f70 <HAL_TIM_Base_Init+0x104>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_TIM_Base_Init+0x44>
 8004ea6:	f44f 7189 	mov.w	r1, #274	; 0x112
 8004eaa:	4832      	ldr	r0, [pc, #200]	; (8004f74 <HAL_TIM_Base_Init+0x108>)
 8004eac:	f7fb fcd3 	bl	8000856 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d014      	beq.n	8004ee2 <HAL_TIM_Base_Init+0x76>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d010      	beq.n	8004ee2 <HAL_TIM_Base_Init+0x76>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d00c      	beq.n	8004ee2 <HAL_TIM_Base_Init+0x76>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d008      	beq.n	8004ee2 <HAL_TIM_Base_Init+0x76>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b60      	cmp	r3, #96	; 0x60
 8004ed6:	d004      	beq.n	8004ee2 <HAL_TIM_Base_Init+0x76>
 8004ed8:	f240 1113 	movw	r1, #275	; 0x113
 8004edc:	4825      	ldr	r0, [pc, #148]	; (8004f74 <HAL_TIM_Base_Init+0x108>)
 8004ede:	f7fb fcba 	bl	8000856 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <HAL_TIM_Base_Init+0x9c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d009      	beq.n	8004f08 <HAL_TIM_Base_Init+0x9c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efc:	d004      	beq.n	8004f08 <HAL_TIM_Base_Init+0x9c>
 8004efe:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004f02:	481c      	ldr	r0, [pc, #112]	; (8004f74 <HAL_TIM_Base_Init+0x108>)
 8004f04:	f7fb fca7 	bl	8000856 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_TIM_Base_Init+0xb6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d004      	beq.n	8004f22 <HAL_TIM_Base_Init+0xb6>
 8004f18:	f240 1115 	movw	r1, #277	; 0x115
 8004f1c:	4815      	ldr	r0, [pc, #84]	; (8004f74 <HAL_TIM_Base_Init+0x108>)
 8004f1e:	f7fb fc9a 	bl	8000856 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fb fd94 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f000 fc14 	bl	800577c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	080065bc 	.word	0x080065bc

08004f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <HAL_TIM_Base_Start_IT+0x78>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <HAL_TIM_Base_Start_IT+0x3a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00e      	beq.n	8004fb2 <HAL_TIM_Base_Start_IT+0x3a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <HAL_TIM_Base_Start_IT+0x7c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_TIM_Base_Start_IT+0x3a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <HAL_TIM_Base_Start_IT+0x80>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d004      	beq.n	8004fb2 <HAL_TIM_Base_Start_IT+0x3a>
 8004fa8:	f240 11b9 	movw	r1, #441	; 0x1b9
 8004fac:	4813      	ldr	r0, [pc, #76]	; (8004ffc <HAL_TIM_Base_Start_IT+0x84>)
 8004fae:	f7fb fc52 	bl	8000856 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b06      	cmp	r3, #6
 8004fd2:	d007      	beq.n	8004fe4 <HAL_TIM_Base_Start_IT+0x6c>
  {
    __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	080065bc 	.word	0x080065bc

08005000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d122      	bne.n	800505c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11b      	bne.n	800505c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0202 	mvn.w	r2, #2
 800502c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fb7f 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 8005048:	e005      	b.n	8005056 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fb72 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb81 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b04      	cmp	r3, #4
 8005068:	d122      	bne.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d11b      	bne.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0204 	mvn.w	r2, #4
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fb55 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fb48 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fb57 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d122      	bne.n	8005104 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d11b      	bne.n	8005104 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0208 	mvn.w	r2, #8
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2204      	movs	r2, #4
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fb2b 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fb1e 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb2d 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b10      	cmp	r3, #16
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b10      	cmp	r3, #16
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0210 	mvn.w	r2, #16
 8005128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2208      	movs	r2, #8
 800512e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fb01 	bl	8005746 <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 faf4 	bl	8005734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fb03 	bl	8005758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0201 	mvn.w	r2, #1
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fb fc96 	bl	8000ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b80      	cmp	r3, #128	; 0x80
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519c:	2b80      	cmp	r3, #128	; 0x80
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fc7d 	bl	8005aaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fac7 	bl	800576a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d10e      	bne.n	8005208 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d107      	bne.n	8005208 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0220 	mvn.w	r2, #32
 8005200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fc48 	bl	8005a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIM_ConfigClockSource+0x18>
 8005224:	2302      	movs	r3, #2
 8005226:	e279      	b.n	800571c <HAL_TIM_ConfigClockSource+0x50c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005240:	d029      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524a:	d024      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d020      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d01c      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b20      	cmp	r3, #32
 8005262:	d018      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b30      	cmp	r3, #48	; 0x30
 800526a:	d014      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d010      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b50      	cmp	r3, #80	; 0x50
 800527a:	d00c      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b60      	cmp	r3, #96	; 0x60
 8005282:	d008      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d004      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x86>
 800528c:	f241 118a 	movw	r1, #4490	; 0x118a
 8005290:	4896      	ldr	r0, [pc, #600]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8005292:	f7fb fae0 	bl	8000856 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	f000 81b6 	beq.w	800562c <HAL_TIM_ConfigClockSource+0x41c>
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d80f      	bhi.n	80052e4 <HAL_TIM_ConfigClockSource+0xd4>
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	f000 81fd 	beq.w	80056c4 <HAL_TIM_ConfigClockSource+0x4b4>
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d803      	bhi.n	80052d6 <HAL_TIM_ConfigClockSource+0xc6>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 81f8 	beq.w	80056c4 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052d4:	e219      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	f000 81f4 	beq.w	80056c4 <HAL_TIM_ConfigClockSource+0x4b4>
 80052dc:	2b30      	cmp	r3, #48	; 0x30
 80052de:	f000 81f1 	beq.w	80056c4 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 80052e2:	e212      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 80052e4:	2b70      	cmp	r3, #112	; 0x70
 80052e6:	d02e      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x136>
 80052e8:	2b70      	cmp	r3, #112	; 0x70
 80052ea:	d806      	bhi.n	80052fa <HAL_TIM_ConfigClockSource+0xea>
 80052ec:	2b50      	cmp	r3, #80	; 0x50
 80052ee:	f000 8105 	beq.w	80054fc <HAL_TIM_ConfigClockSource+0x2ec>
 80052f2:	2b60      	cmp	r3, #96	; 0x60
 80052f4:	f000 814e 	beq.w	8005594 <HAL_TIM_ConfigClockSource+0x384>
      break;
 80052f8:	e207      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fe:	d004      	beq.n	800530a <HAL_TIM_ConfigClockSource+0xfa>
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005304:	f000 808a 	beq.w	800541c <HAL_TIM_ConfigClockSource+0x20c>
      break;
 8005308:	e1ff      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_TIM_ConfigClockSource+0x2e0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	f000 81f9 	beq.w	8005708 <HAL_TIM_ConfigClockSource+0x4f8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	f000 81f3 	beq.w	8005708 <HAL_TIM_ConfigClockSource+0x4f8>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a73      	ldr	r2, [pc, #460]	; (80054f4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	f000 81ed 	beq.w	8005708 <HAL_TIM_ConfigClockSource+0x4f8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a71      	ldr	r2, [pc, #452]	; (80054f8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	f000 81e7 	beq.w	8005708 <HAL_TIM_ConfigClockSource+0x4f8>
 800533a:	f241 1196 	movw	r1, #4502	; 0x1196
 800533e:	486b      	ldr	r0, [pc, #428]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8005340:	f7fb fa89 	bl	8000856 <assert_failed>
      break;
 8005344:	e1e0      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <HAL_TIM_ConfigClockSource+0x2e0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0x168>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005358:	d00e      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0x168>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a65      	ldr	r2, [pc, #404]	; (80054f4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0x168>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a63      	ldr	r2, [pc, #396]	; (80054f8 <HAL_TIM_ConfigClockSource+0x2e8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0x168>
 800536e:	f241 119d 	movw	r1, #4509	; 0x119d
 8005372:	485e      	ldr	r0, [pc, #376]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 8005374:	f7fb fa6f 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x198>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005388:	d00e      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x198>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005392:	d009      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x198>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800539c:	d004      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x198>
 800539e:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 80053a2:	4852      	ldr	r0, [pc, #328]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80053a4:	f7fb fa57 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b0:	d014      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x1cc>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d010      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x1cc>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00c      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x1cc>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d008      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x1cc>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b0a      	cmp	r3, #10
 80053d0:	d004      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x1cc>
 80053d2:	f241 11a1 	movw	r1, #4513	; 0x11a1
 80053d6:	4845      	ldr	r0, [pc, #276]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80053d8:	f7fb fa3d 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b0f      	cmp	r3, #15
 80053e2:	d904      	bls.n	80053ee <HAL_TIM_ConfigClockSource+0x1de>
 80053e4:	f241 11a2 	movw	r1, #4514	; 0x11a2
 80053e8:	4840      	ldr	r0, [pc, #256]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80053ea:	f7fb fa34 	bl	8000856 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6899      	ldr	r1, [r3, #8]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f000 fa96 	bl	800592e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005410:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	609a      	str	r2, [r3, #8]
      break;
 800541a:	e176      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a33      	ldr	r2, [pc, #204]	; (80054f0 <HAL_TIM_ConfigClockSource+0x2e0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d013      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x23e>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542e:	d00e      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x23e>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <HAL_TIM_ConfigClockSource+0x2e4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d009      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x23e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2e      	ldr	r2, [pc, #184]	; (80054f8 <HAL_TIM_ConfigClockSource+0x2e8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d004      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x23e>
 8005444:	f241 11b5 	movw	r1, #4533	; 0x11b5
 8005448:	4828      	ldr	r0, [pc, #160]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 800544a:	f7fb fa04 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d013      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x26e>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d00e      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x26e>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005468:	d009      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x26e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005472:	d004      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x26e>
 8005474:	f241 11b8 	movw	r1, #4536	; 0x11b8
 8005478:	481c      	ldr	r0, [pc, #112]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 800547a:	f7fb f9ec 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005486:	d014      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x2a2>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x2a2>
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x2a2>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d008      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x2a2>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b0a      	cmp	r3, #10
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x2a2>
 80054a8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80054ac:	480f      	ldr	r0, [pc, #60]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80054ae:	f7fb f9d2 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	d904      	bls.n	80054c4 <HAL_TIM_ConfigClockSource+0x2b4>
 80054ba:	f241 11ba 	movw	r1, #4538	; 0x11ba
 80054be:	480b      	ldr	r0, [pc, #44]	; (80054ec <HAL_TIM_ConfigClockSource+0x2dc>)
 80054c0:	f7fb f9c9 	bl	8000856 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6899      	ldr	r1, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f000 fa2b 	bl	800592e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e6:	609a      	str	r2, [r3, #8]
      break;
 80054e8:	e10f      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
 80054ea:	bf00      	nop
 80054ec:	080065bc 	.word	0x080065bc
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a88      	ldr	r2, [pc, #544]	; (8005724 <HAL_TIM_ConfigClockSource+0x514>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x31e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d00e      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x31e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a84      	ldr	r2, [pc, #528]	; (8005728 <HAL_TIM_ConfigClockSource+0x518>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x31e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a83      	ldr	r2, [pc, #524]	; (800572c <HAL_TIM_ConfigClockSource+0x51c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x31e>
 8005524:	f241 11c9 	movw	r1, #4553	; 0x11c9
 8005528:	4881      	ldr	r0, [pc, #516]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 800552a:	f7fb f994 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005536:	d014      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x352>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x352>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00c      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x352>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d008      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x352>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b0a      	cmp	r3, #10
 8005556:	d004      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x352>
 8005558:	f241 11cc 	movw	r1, #4556	; 0x11cc
 800555c:	4874      	ldr	r0, [pc, #464]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 800555e:	f7fb f97a 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b0f      	cmp	r3, #15
 8005568:	d904      	bls.n	8005574 <HAL_TIM_ConfigClockSource+0x364>
 800556a:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800556e:	4870      	ldr	r0, [pc, #448]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 8005570:	f7fb f971 	bl	8000856 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	6859      	ldr	r1, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	461a      	mov	r2, r3
 8005582:	f000 f95d 	bl	8005840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2150      	movs	r1, #80	; 0x50
 800558c:	4618      	mov	r0, r3
 800558e:	f000 f9b4 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005592:	e0ba      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a62      	ldr	r2, [pc, #392]	; (8005724 <HAL_TIM_ConfigClockSource+0x514>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x3b6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a6:	d00e      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x3b6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5e      	ldr	r2, [pc, #376]	; (8005728 <HAL_TIM_ConfigClockSource+0x518>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x3b6>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5d      	ldr	r2, [pc, #372]	; (800572c <HAL_TIM_ConfigClockSource+0x51c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_TIM_ConfigClockSource+0x3b6>
 80055bc:	f241 11d9 	movw	r1, #4569	; 0x11d9
 80055c0:	485b      	ldr	r0, [pc, #364]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 80055c2:	f7fb f948 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ce:	d014      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x3ea>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x3ea>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00c      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x3ea>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d008      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x3ea>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b0a      	cmp	r3, #10
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0x3ea>
 80055f0:	f241 11dc 	movw	r1, #4572	; 0x11dc
 80055f4:	484e      	ldr	r0, [pc, #312]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 80055f6:	f7fb f92e 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	d904      	bls.n	800560c <HAL_TIM_ConfigClockSource+0x3fc>
 8005602:	f241 11dd 	movw	r1, #4573	; 0x11dd
 8005606:	484a      	ldr	r0, [pc, #296]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 8005608:	f7fb f925 	bl	8000856 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	461a      	mov	r2, r3
 800561a:	f000 f93f 	bl	800589c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2160      	movs	r1, #96	; 0x60
 8005624:	4618      	mov	r0, r3
 8005626:	f000 f968 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 800562a:	e06e      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a3c      	ldr	r2, [pc, #240]	; (8005724 <HAL_TIM_ConfigClockSource+0x514>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x44e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563e:	d00e      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x44e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a38      	ldr	r2, [pc, #224]	; (8005728 <HAL_TIM_ConfigClockSource+0x518>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x44e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a37      	ldr	r2, [pc, #220]	; (800572c <HAL_TIM_ConfigClockSource+0x51c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x44e>
 8005654:	f241 11e9 	movw	r1, #4585	; 0x11e9
 8005658:	4835      	ldr	r0, [pc, #212]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 800565a:	f7fb f8fc 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005666:	d014      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x482>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d010      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x482>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x482>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d008      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x482>
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b0a      	cmp	r3, #10
 8005686:	d004      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x482>
 8005688:	f241 11ec 	movw	r1, #4588	; 0x11ec
 800568c:	4828      	ldr	r0, [pc, #160]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 800568e:	f7fb f8e2 	bl	8000856 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d904      	bls.n	80056a4 <HAL_TIM_ConfigClockSource+0x494>
 800569a:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800569e:	4824      	ldr	r0, [pc, #144]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 80056a0:	f7fb f8d9 	bl	8000856 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6859      	ldr	r1, [r3, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	461a      	mov	r2, r3
 80056b2:	f000 f8c5 	bl	8005840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2140      	movs	r1, #64	; 0x40
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f91c 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 80056c2:	e022      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_TIM_ConfigClockSource+0x514>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a12      	ldr	r2, [pc, #72]	; (8005728 <HAL_TIM_ConfigClockSource+0x518>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a11      	ldr	r2, [pc, #68]	; (800572c <HAL_TIM_ConfigClockSource+0x51c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x4e6>
 80056ec:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80056f0:	480f      	ldr	r0, [pc, #60]	; (8005730 <HAL_TIM_ConfigClockSource+0x520>)
 80056f2:	f7fb f8b0 	bl	8000856 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 f8fa 	bl	80058fa <TIM_ITRx_SetConfig>
      break;
 8005706:	e000      	b.n	800570a <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 8005708:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	080065bc 	.word	0x080065bc

08005734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr

08005746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800574e:	bf00      	nop
 8005750:	370c      	adds	r7, #12
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a29      	ldr	r2, [pc, #164]	; (8005834 <TIM_Base_SetConfig+0xb8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0x30>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0x30>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a26      	ldr	r2, [pc, #152]	; (8005838 <TIM_Base_SetConfig+0xbc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0x30>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a25      	ldr	r2, [pc, #148]	; (800583c <TIM_Base_SetConfig+0xc0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d108      	bne.n	80057be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <TIM_Base_SetConfig+0xb8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0x62>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a19      	ldr	r2, [pc, #100]	; (8005838 <TIM_Base_SetConfig+0xbc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0x62>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a18      	ldr	r2, [pc, #96]	; (800583c <TIM_Base_SetConfig+0xc0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <TIM_Base_SetConfig+0xb8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d103      	bne.n	8005824 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	615a      	str	r2, [r3, #20]
}
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40000400 	.word	0x40000400
 800583c:	40000800 	.word	0x40000800

08005840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f023 0201 	bic.w	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800586a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4313      	orrs	r3, r2
 8005874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 030a 	bic.w	r3, r3, #10
 800587c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f023 0210 	bic.w	r2, r3, #16
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	031b      	lsls	r3, r3, #12
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	f043 0307 	orr.w	r3, r3, #7
 800591c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr

0800592e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	021a      	lsls	r2, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	431a      	orrs	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4313      	orrs	r3, r2
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005988:	d00e      	beq.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a3f      	ldr	r2, [pc, #252]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d009      	beq.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800599e:	f240 6164 	movw	r1, #1636	; 0x664
 80059a2:	483c      	ldr	r0, [pc, #240]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80059a4:	f7fa ff57 	bl	8000856 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d020      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d01c      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d018      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d014      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d010      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b50      	cmp	r3, #80	; 0x50
 80059d6:	d00c      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b60      	cmp	r3, #96	; 0x60
 80059de:	d008      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b70      	cmp	r3, #112	; 0x70
 80059e6:	d004      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80059e8:	f240 6165 	movw	r1, #1637	; 0x665
 80059ec:	4829      	ldr	r0, [pc, #164]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80059ee:	f7fa ff32 	bl	8000856 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d008      	beq.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d004      	beq.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8005a02:	f240 6166 	movw	r1, #1638	; 0x666
 8005a06:	4823      	ldr	r0, [pc, #140]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005a08:	f7fa ff25 	bl	8000856 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e032      	b.n	8005a80 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a52:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	080065f4 	.word	0x080065f4

08005a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e092      	b.n	8005bf4 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d02c      	beq.n	8005b30 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a48      	ldr	r2, [pc, #288]	; (8005bfc <HAL_UART_Init+0x140>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <HAL_UART_Init+0x42>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a46      	ldr	r2, [pc, #280]	; (8005c00 <HAL_UART_Init+0x144>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d009      	beq.n	8005afe <HAL_UART_Init+0x42>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a45      	ldr	r2, [pc, #276]	; (8005c04 <HAL_UART_Init+0x148>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d004      	beq.n	8005afe <HAL_UART_Init+0x42>
 8005af4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005af8:	4843      	ldr	r0, [pc, #268]	; (8005c08 <HAL_UART_Init+0x14c>)
 8005afa:	f7fa feac 	bl	8000856 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d028      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0e:	d023      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b18:	d01e      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b22:	d019      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b24:	f240 1147 	movw	r1, #327	; 0x147
 8005b28:	4837      	ldr	r0, [pc, #220]	; (8005c08 <HAL_UART_Init+0x14c>)
 8005b2a:	f7fa fe94 	bl	8000856 <assert_failed>
 8005b2e:	e013      	b.n	8005b58 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a31      	ldr	r2, [pc, #196]	; (8005bfc <HAL_UART_Init+0x140>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a30      	ldr	r2, [pc, #192]	; (8005c00 <HAL_UART_Init+0x144>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2e      	ldr	r2, [pc, #184]	; (8005c04 <HAL_UART_Init+0x148>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_UART_Init+0x9c>
 8005b4e:	f240 114b 	movw	r1, #331	; 0x14b
 8005b52:	482d      	ldr	r0, [pc, #180]	; (8005c08 <HAL_UART_Init+0x14c>)
 8005b54:	f7fa fe7f 	bl	8000856 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_UART_Init+0xb8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b68:	d004      	beq.n	8005b74 <HAL_UART_Init+0xb8>
 8005b6a:	f240 114d 	movw	r1, #333	; 0x14d
 8005b6e:	4826      	ldr	r0, [pc, #152]	; (8005c08 <HAL_UART_Init+0x14c>)
 8005b70:	f7fa fe71 	bl	8000856 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d106      	bne.n	8005b8e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fb f93f 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2224      	movs	r2, #36	; 0x24
 8005b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 faf6 	bl	8006198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40013800 	.word	0x40013800
 8005c00:	40004400 	.word	0x40004400
 8005c04:	40004800 	.word	0x40004800
 8005c08:	08006630 	.word	0x08006630

08005c0c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d130      	bne.n	8005c88 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_UART_Transmit_IT+0x26>
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e029      	b.n	8005c8a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_UART_Transmit_IT+0x38>
 8005c40:	2302      	movs	r3, #2
 8005c42:	e022      	b.n	8005c8a <HAL_UART_Transmit_IT+0x7e>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	88fa      	ldrh	r2, [r7, #6]
 8005c5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2221      	movs	r2, #33	; 0x21
 8005c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c82:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d140      	bne.n	8005d30 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_UART_Receive_IT+0x26>
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e039      	b.n	8005d32 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_UART_Receive_IT+0x38>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e032      	b.n	8005d32 <HAL_UART_Receive_IT+0x9e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2222      	movs	r2, #34	; 0x22
 8005cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0220 	orr.w	r2, r2, #32
 8005d2a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10d      	bne.n	8005d8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_UART_IRQHandler+0x52>
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f984 	bl	8006094 <UART_Receive_IT>
      return;
 8005d8c:	e0cc      	b.n	8005f28 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80ab 	beq.w	8005eec <HAL_UART_IRQHandler+0x1b0>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <HAL_UART_IRQHandler+0x70>
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80a0 	beq.w	8005eec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <HAL_UART_IRQHandler+0x90>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	f043 0201 	orr.w	r2, r3, #1
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <HAL_UART_IRQHandler+0xb0>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	f043 0202 	orr.w	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <HAL_UART_IRQHandler+0xd0>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e04:	f043 0204 	orr.w	r2, r3, #4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_UART_IRQHandler+0xf0>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	f043 0208 	orr.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d078      	beq.n	8005f26 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <HAL_UART_IRQHandler+0x112>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f923 	bl	8006094 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <HAL_UART_IRQHandler+0x13a>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d031      	beq.n	8005eda <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f86e 	bl	8005f58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d023      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d013      	beq.n	8005eca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <HAL_UART_IRQHandler+0x1f4>)
 8005ea8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fc f80e 	bl	8001ed0 <HAL_DMA_Abort_IT>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d016      	beq.n	8005ee8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	e00e      	b.n	8005ee8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f83b 	bl	8005f46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	e00a      	b.n	8005ee8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f837 	bl	8005f46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed8:	e006      	b.n	8005ee8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f833 	bl	8005f46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ee6:	e01e      	b.n	8005f26 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee8:	bf00      	nop
    return;
 8005eea:	e01c      	b.n	8005f26 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_UART_IRQHandler+0x1cc>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f85a 	bl	8005fba <UART_Transmit_IT>
    return;
 8005f06:	e00f      	b.n	8005f28 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_UART_IRQHandler+0x1ec>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f8a1 	bl	8006064 <UART_EndTransmit_IT>
    return;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005f26:	bf00      	nop
  }
}
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	08005f93 	.word	0x08005f93

08005f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr

08005f46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695a      	ldr	r2, [r3, #20]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0201 	bic.w	r2, r2, #1
 8005f7e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bc80      	pop	{r7}
 8005f90:	4770      	bx	lr

08005f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ffca 	bl	8005f46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fb2:	bf00      	nop
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b21      	cmp	r3, #33	; 0x21
 8005fcc:	d144      	bne.n	8006058 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd6:	d11a      	bne.n	800600e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fec:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	1c9a      	adds	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	621a      	str	r2, [r3, #32]
 8006000:	e00e      	b.n	8006020 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]
 800600c:	e008      	b.n	8006020 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	1c59      	adds	r1, r3, #1
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6211      	str	r1, [r2, #32]
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4619      	mov	r1, r3
 800602e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10f      	bne.n	8006054 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006042:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006052:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ff55 	bl	8005f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b22      	cmp	r3, #34	; 0x22
 80060a6:	d171      	bne.n	800618c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b0:	d123      	bne.n	80060fa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10e      	bne.n	80060de <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	1c9a      	adds	r2, r3, #2
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28
 80060dc:	e029      	b.n	8006132 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
 80060f8:	e01b      	b.n	8006132 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6858      	ldr	r0, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6291      	str	r1, [r2, #40]	; 0x28
 8006112:	b2c2      	uxtb	r2, r0
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e00c      	b.n	8006132 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	b2da      	uxtb	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	1c58      	adds	r0, r3, #1
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	6288      	str	r0, [r1, #40]	; 0x28
 800612a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29b      	uxth	r3, r3
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	4619      	mov	r1, r3
 8006140:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006142:	2b00      	cmp	r3, #0
 8006144:	d120      	bne.n	8006188 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0220 	bic.w	r2, r2, #32
 8006154:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006164:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695a      	ldr	r2, [r3, #20]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2220      	movs	r2, #32
 800617a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fa fe98 	bl	8000eb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e002      	b.n	800618e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	e000      	b.n	800618e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800618c:	2302      	movs	r3, #2
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	4a84      	ldr	r2, [pc, #528]	; (80063b8 <UART_SetConfig+0x220>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d904      	bls.n	80061b4 <UART_SetConfig+0x1c>
 80061aa:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80061ae:	4883      	ldr	r0, [pc, #524]	; (80063bc <UART_SetConfig+0x224>)
 80061b0:	f7fa fb51 	bl	8000856 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <UART_SetConfig+0x38>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c4:	d004      	beq.n	80061d0 <UART_SetConfig+0x38>
 80061c6:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80061ca:	487c      	ldr	r0, [pc, #496]	; (80063bc <UART_SetConfig+0x224>)
 80061cc:	f7fa fb43 	bl	8000856 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <UART_SetConfig+0x5e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e0:	d009      	beq.n	80061f6 <UART_SetConfig+0x5e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061ea:	d004      	beq.n	80061f6 <UART_SetConfig+0x5e>
 80061ec:	f640 31ff 	movw	r1, #3071	; 0xbff
 80061f0:	4872      	ldr	r0, [pc, #456]	; (80063bc <UART_SetConfig+0x224>)
 80061f2:	f7fa fb30 	bl	8000856 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d103      	bne.n	800620c <UART_SetConfig+0x74>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <UART_SetConfig+0x7e>
 800620c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8006210:	486a      	ldr	r0, [pc, #424]	; (80063bc <UART_SetConfig+0x224>)
 8006212:	f7fa fb20 	bl	8000856 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006248:	f023 030c 	bic.w	r3, r3, #12
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	430b      	orrs	r3, r1
 8006254:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a53      	ldr	r2, [pc, #332]	; (80063c0 <UART_SetConfig+0x228>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d14e      	bne.n	8006314 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006276:	f7fe fbeb 	bl	8004a50 <HAL_RCC_GetPCLK2Freq>
 800627a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	009a      	lsls	r2, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	4a4c      	ldr	r2, [pc, #304]	; (80063c4 <UART_SetConfig+0x22c>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	0119      	lsls	r1, r3, #4
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009a      	lsls	r2, r3, #2
 80062a6:	441a      	add	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80062b2:	4b44      	ldr	r3, [pc, #272]	; (80063c4 <UART_SetConfig+0x22c>)
 80062b4:	fba3 0302 	umull	r0, r3, r3, r2
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	2064      	movs	r0, #100	; 0x64
 80062bc:	fb00 f303 	mul.w	r3, r0, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	3332      	adds	r3, #50	; 0x32
 80062c6:	4a3f      	ldr	r2, [pc, #252]	; (80063c4 <UART_SetConfig+0x22c>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d2:	4419      	add	r1, r3
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009a      	lsls	r2, r3, #2
 80062de:	441a      	add	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ea:	4b36      	ldr	r3, [pc, #216]	; (80063c4 <UART_SetConfig+0x22c>)
 80062ec:	fba3 0302 	umull	r0, r3, r3, r2
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	2064      	movs	r0, #100	; 0x64
 80062f4:	fb00 f303 	mul.w	r3, r0, r3
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	3332      	adds	r3, #50	; 0x32
 80062fe:	4a31      	ldr	r2, [pc, #196]	; (80063c4 <UART_SetConfig+0x22c>)
 8006300:	fba2 2303 	umull	r2, r3, r2, r3
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	f003 020f 	and.w	r2, r3, #15
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	440a      	add	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006312:	e04d      	b.n	80063b0 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006314:	f7fe fb88 	bl	8004a28 <HAL_RCC_GetPCLK1Freq>
 8006318:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009a      	lsls	r2, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <UART_SetConfig+0x22c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	0119      	lsls	r1, r3, #4
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009a      	lsls	r2, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006350:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <UART_SetConfig+0x22c>)
 8006352:	fba3 0302 	umull	r0, r3, r3, r2
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	2064      	movs	r0, #100	; 0x64
 800635a:	fb00 f303 	mul.w	r3, r0, r3
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	011b      	lsls	r3, r3, #4
 8006362:	3332      	adds	r3, #50	; 0x32
 8006364:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <UART_SetConfig+0x22c>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006370:	4419      	add	r1, r3
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	fbb2 f2f3 	udiv	r2, r2, r3
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <UART_SetConfig+0x22c>)
 800638a:	fba3 0302 	umull	r0, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	2064      	movs	r0, #100	; 0x64
 8006392:	fb00 f303 	mul.w	r3, r0, r3
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	3332      	adds	r3, #50	; 0x32
 800639c:	4a09      	ldr	r2, [pc, #36]	; (80063c4 <UART_SetConfig+0x22c>)
 800639e:	fba2 2303 	umull	r2, r3, r2, r3
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	f003 020f 	and.w	r2, r3, #15
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	440a      	add	r2, r1
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	0044aa20 	.word	0x0044aa20
 80063bc:	08006630 	.word	0x08006630
 80063c0:	40013800 	.word	0x40013800
 80063c4:	51eb851f 	.word	0x51eb851f

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	2500      	movs	r5, #0
 80063cc:	4e0c      	ldr	r6, [pc, #48]	; (8006400 <__libc_init_array+0x38>)
 80063ce:	4c0d      	ldr	r4, [pc, #52]	; (8006404 <__libc_init_array+0x3c>)
 80063d0:	1ba4      	subs	r4, r4, r6
 80063d2:	10a4      	asrs	r4, r4, #2
 80063d4:	42a5      	cmp	r5, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	f000 f822 	bl	8006420 <_init>
 80063dc:	2500      	movs	r5, #0
 80063de:	4e0a      	ldr	r6, [pc, #40]	; (8006408 <__libc_init_array+0x40>)
 80063e0:	4c0a      	ldr	r4, [pc, #40]	; (800640c <__libc_init_array+0x44>)
 80063e2:	1ba4      	subs	r4, r4, r6
 80063e4:	10a4      	asrs	r4, r4, #2
 80063e6:	42a5      	cmp	r5, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063f0:	4798      	blx	r3
 80063f2:	3501      	adds	r5, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063fa:	4798      	blx	r3
 80063fc:	3501      	adds	r5, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08006684 	.word	0x08006684
 8006404:	08006684 	.word	0x08006684
 8006408:	08006684 	.word	0x08006684
 800640c:	08006688 	.word	0x08006688

08006410 <memset>:
 8006410:	4603      	mov	r3, r0
 8006412:	4402      	add	r2, r0
 8006414:	4293      	cmp	r3, r2
 8006416:	d100      	bne.n	800641a <memset+0xa>
 8006418:	4770      	bx	lr
 800641a:	f803 1b01 	strb.w	r1, [r3], #1
 800641e:	e7f9      	b.n	8006414 <memset+0x4>

08006420 <_init>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

0800642c <_fini>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr
