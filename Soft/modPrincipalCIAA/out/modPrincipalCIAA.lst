
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf:     file format elf32-littlearm
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001e35

Program Header:
0x70000001 off    0x00016fc4 vaddr 0x1a006fc4 paddr 0x1a006fc4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00005000 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00006fcc memsz 0x00006fcc flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a006fcc align 2**16
         filesz 0x00001920 memsz 0x00001920 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006fc0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001920  10000000  1a006fcc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00021920  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00021920  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00021920  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00021920  2**2
                  CONTENTS
  6 .bss          000036e0  10001920  10001920  00001920  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00021920  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00021920  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00021920  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00021920  2**2
                  CONTENTS
 11 .init_array   00000004  1a006fc0  1a006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a006fc4  1a006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00021920  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00021920  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00021920  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00021920  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00021920  2**2
                  CONTENTS
 18 .noinit       00000000  10005000  10005000  00021920  2**2
                  CONTENTS
 19 .debug_info   000409fc  00000000  00000000  00021920  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007572  00000000  00000000  0006231c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000d025  00000000  00000000  0006988e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001278  00000000  00000000  000768b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001330  00000000  00000000  00077b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00013e05  00000000  00000000  00078e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001d49c  00000000  00000000  0008cc60  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00031665  00000000  00000000  000aa0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000db761  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000db7e0  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003648  00000000  00000000  000db818  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10001920 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a006fc0 l    d  .init_array	00000000 .init_array
1a006fc4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10005000 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0049b4 l     F .text	000000c8 uartProcessIRQ
10004d7c l     O .bss	00000004 rxIsrCallbackUART0
10004d80 l     O .bss	00000004 rxIsrCallbackUART0Params
10004d84 l     O .bss	00000004 rxIsrCallbackUART2
10004d88 l     O .bss	00000004 rxIsrCallbackUART2Params
10004d8c l     O .bss	00000004 rxIsrCallbackUART3
10004d90 l     O .bss	00000004 rxIsrCallbackUART3Params
10004d94 l     O .bss	00000004 txIsrCallbackUART0
10004d98 l     O .bss	00000004 txIsrCallbackUART0Params
10004d9c l     O .bss	00000004 txIsrCallbackUART2
10004da0 l     O .bss	00000004 txIsrCallbackUART2Params
10004da4 l     O .bss	00000004 txIsrCallbackUART3
10004da8 l     O .bss	00000004 txIsrCallbackUART3Params
1a006dec l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Esp8266FreeRTOS.c
1a000300 l     F .text	0000000c SetEsp8622Status
1a00030c l     F .text	00000074 IsWaitedResponse
1a000600 l     F .text	000007ec ExcecuteHttpServerFsm
10001920 l     O .bss	00000001 CurrentConnectionId
10001921 l     O .bss	00000001 CurrentReqLength
10001928 l     O .bss	00000018 Esp8266Delay
10001940 l     O .bss	00000004 Esp8266ResponseToWait
10001944 l     O .bss	00000001 Esp8266Status
10001948 l     O .bss	00000004 HTTPVersion.14642
1000194c l     O .bss	00000004 PointerOfHttpWebPage
10001950 l     O .bss	00000010 UARTEsp
10001960 l     O .bss	00000014 WifiIp
10001974 l     O .bss	0000001e WifiName
10001994 l     O .bss	0000001e WifiPass
100019b2 l     O .bss	00000001 auxIndex.14581
100019b4 l     O .bss	00000004 auxpointer2.14644
100019b8 l     O .bss	00000001 byteReceived.14580
100019ba l     O .bss	00000002 i.14579
100019bc l     O .bss	00000001 index.14618
100019c0 l     O .bss	00000004 methode.14640
100019c4 l     O .bss	00000001 parametersReceived.14569
100019c8 l     O .bss	00000100 rawRequest
10001ac8 l     O .bss	00000004 request.14641
1a0068ec l     O .text	0000000f Response_CIFSR
1a0068fc l     O .text	00000002 Response_COMMA
1a006900 l     O .text	0000000f Response_CWJAP_1
1a006910 l     O .text	0000000c Response_CWJAP_2
1a00691c l     O .text	00000008 Response_CWJAP_OK
1a006924 l     O .text	00000006 Response_IPD
1a00692c l     O .text	00000003 Response_OK
1a006930 l     O .text	00000008 Response_SEND_OK
00000000 l    df *ABS*	00000000 UARTEspDriver.c
00000000 l    df *ABS*	00000000 pruebas.c
10001acc l     O .bss	00000054 ports.14507
00000000 l    df *ABS*	00000000 portsDriver.c
10001b20 l     O .bss	00000001 byteIndex.14479
10001b21 l     O .bss	00000001 byteNumber.14456
10001b24 l     O .bss	00000012 dataToSend.14477
10001b36 l     O .bss	00000001 portIndex.14478
10001b38 l     O .bss	00000004 receivedData.14455
10001b3c l     O .bss	00000001 transmitEmpty.14482
00000000 l    df *ABS*	00000000 interpreter.c
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 modPrincipalCIAA.c
00000000 l    df *ABS*	00000000 system.c
10001b40 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_1.c
10001b48 l     O .bss	00002800 ucHeap
10001b44 l     O .bss	00000004 pucAlignedHeap.11438
10004348 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a00200e l     F .text	0000001e prvIsQueueFull
1a00202c l     F .text	0000001a prvIsQueueEmpty
1a002046 l     F .text	00000076 prvCopyDataToQueue
1a0020bc l     F .text	00000024 prvCopyDataFromQueue
1a0020e0 l     F .text	0000006e prvUnlockQueue
1a0021d4 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
1000434c l     O .bss	00000168 uxIdleTaskStack.10728
100044b4 l     O .bss	000005a0 uxTimerTaskStack.10735
10004a54 l     O .bss	00000060 xIdleTaskTCB.10727
10004ab4 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0028e4 l     F .text	0000002c prvResetNextTaskUnblockTime
1a002910 l     F .text	00000092 prvInitialiseNewTask
1a0029a4 l     F .text	00000068 prvInitialiseTaskLists
1a002a0c l     F .text	000000ac prvAddNewTaskToReadyList
1a002ab8 l     F .text	00000038 prvDeleteTCB
1a002af0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a002b3c l     F .text	00000028 prvIdleTask
1a002b64 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10004b18 l     O .bss	00000004 pxDelayedTaskList
10004b1c l     O .bss	00000004 pxOverflowDelayedTaskList
10004b20 l     O .bss	0000008c pxReadyTasksLists
10004bac l     O .bss	00000004 uxCurrentNumberOfTasks
10004bb0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10004bb4 l     O .bss	00000004 uxPendedTicks
10004bb8 l     O .bss	00000004 uxSchedulerSuspended
10004bbc l     O .bss	00000004 uxTaskNumber
10004bc0 l     O .bss	00000004 uxTopReadyPriority
10004bc4 l     O .bss	00000014 xDelayedTaskList1
10004bd8 l     O .bss	00000014 xDelayedTaskList2
10004bec l     O .bss	00000004 xNextTaskUnblockTime
10004bf0 l     O .bss	00000004 xNumOfOverflows
10004bf4 l     O .bss	00000014 xPendingReadyList
10004c08 l     O .bss	00000004 xSchedulerRunning
10004c0c l     O .bss	00000014 xSuspendedTaskList
10004c20 l     O .bss	00000014 xTasksWaitingTermination
10004c34 l     O .bss	00000004 xTickCount
10004c38 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0033b0 l     F .text	00000020 prvGetNextExpireTime
1a0033d0 l     F .text	00000048 prvInsertTimerInActiveList
1a003418 l     F .text	00000070 prvCheckForValidListAndQueue
1a003488 l     F .text	00000040 prvInitialiseNewTimer
1a003844 l     F .text	00000016 prvTimerTask
1a0035d0 l     F .text	00000078 prvSwitchTimerLists
1a003648 l     F .text	0000002c prvSampleTimeNow
1a003674 l     F .text	00000060 prvProcessExpiredTimer
1a0036d4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a003748 l     F .text	000000fc prvProcessReceivedCommands
10004c3c l     O .bss	00000004 pxCurrentTimerList
10004c40 l     O .bss	00000004 pxOverflowTimerList
10004c44 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10004ce4 l     O .bss	00000014 xActiveTimerList1
10004cf8 l     O .bss	00000014 xActiveTimerList2
10004d0c l     O .bss	00000004 xLastTime.11777
10004d10 l     O .bss	00000050 xStaticTimerQueue.11827
10004d60 l     O .bss	00000004 xTimerQueue
10004d64 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a003880 l     F .text	00000040 prvTaskExitError
1a0038c0 l     F .text	00000022 prvPortStartFirstTask
1a0038e8 l     F .text	0000000e vPortEnableVFP
1a003950 l       .text	00000000 pxCurrentTCBConst2
1a003a30 l       .text	00000000 pxCurrentTCBConst
10004d68 l     O .bss	00000001 ucMaxSysCallPriority
10004d6c l     O .bss	00000004 ulMaxPRIGROUPValue
100017e4 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a003c24 l     F .text	00000044 Board_LED_Init
1a003c68 l     F .text	00000040 Board_TEC_Init
1a003ca8 l     F .text	00000040 Board_GPIO_Init
1a003ce8 l     F .text	00000030 Board_ADC_Init
1a003d18 l     F .text	00000038 Board_SPI_Init
1a003d50 l     F .text	00000024 Board_I2C_Init
1a006c78 l     O .text	00000008 GpioButtons
1a006c80 l     O .text	0000000c GpioLeds
1a006c8c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006ca4 l     O .text	00000004 InitClkStates
1a006ca8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
100017e8 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003f40 l     F .text	0000002c Chip_UART_GetIndex
1a006d1c l     O .text	00000008 UART_BClock
1a006d24 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0040e8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0040fc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0041b0 l     F .text	000000a4 pll_calc_divs
1a004254 l     F .text	0000010c pll_get_frac
1a004360 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0045d4 l     F .text	00000022 Chip_Clock_GetDivRate
10004d74 l     O .bss	00000008 audio_usb_pll_freq
1a006d38 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a006da4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0048ac l     F .text	00000014 Chip_SSP_GetClockIndex
1a0048c0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10001820 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a004d14 l     F .text	00000002 errorOcurred
1a004d16 l     F .text	00000002 doNothing
10001830 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004e20 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10004dac l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_stdio.c
1a005228 l     F .text	00000018 printchar
1a005240 l     F .text	00000080 prints
1a0052c0 l     F .text	000000a2 printi
1a005364 l     F .text	00000148 print
10004db0 l     O .bss	00000001 prev.13796
10001870 l     O .data	00000001 UartPrintf
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0054e8 l     F .text	00000010 clearInterrupt
1a0054f8 l     F .text	0000005c serveInterrupt
10001874 l     O .data	00000048 ultrasonicSensors
1a006f24 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0059d4 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a006194 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100018c0 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 webPage.c
00000000 l    df *ABS*	00000000 
1a006fc4 l       .init_array	00000000 __init_array_end
1a006fc0 l       .bss_RAM5	00000000 __preinit_array_end
1a006fc0 l       .init_array	00000000 __init_array_start
1a006fc0 l       .bss_RAM5	00000000 __preinit_array_start
1a0043f8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001ed4 g     F .text	00000012 _isatty_r
1a005ef2 g     F .text	00000010 strcpy
1a005d58 g     F .text	000000b8 _puts_r
1a004d98 g     F .text	00000044 TIMER2_IRQHandler
1a004c38 g     F .text	00000014 uartRxRead
1a001ee6 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a001894 g     F .text	000000a4 portsdriverInit
1a001060 g     F .text	00000014 getTestsState
1a000114 g       .text	00000000 __section_table_start
1a000e50 g     F .text	0000002c gesp8266WriteHttpServer
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a003998 g     F .text	0000002c vPortExitCritical
1a00352c g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a005d28 g     F .text	00000030 printf
1a003e0a g     F .text	00000008 __stdio_init
1a005190 g     F .text	00000042 delayRead
1a005e7a g     F .text	00000024 __sseek
1a005a54 g     F .text	00000060 __sinit
1a005f48 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a00276c g     F .text	00000052 vQueueWaitForMessageRestricted
1a005a28 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0041a2 g     F .text	0000000c Chip_ADC_SetResolution
1a006192 g     F .text	00000002 __malloc_unlock
1a00169c g     F .text	0000008c onRxCallback
1a003a34 g     F .text	0000002c SysTick_Handler
1a003fc0 g     F .text	00000040 Chip_UART_SetBaud
1a001e30  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a003dac g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0039d0 g     F .text	00000064 PendSV_Handler
1a002450 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a006fcc g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a001a34 g     F .text	00000148 refreshPageData
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
10004dbc g     O .bss	00000004 requestAnswer
1a001750 g     F .text	00000104 onTxCallback
1a001628 g     F .text	00000072 testsTask
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10000ffc g     O .data	000003e9 panel0
10004b14 g     O .bss	00000004 pxCurrentTCB
1a0013c0 g     F .text	00000268 FSMPruebaTemporizadores
1a001eca g     F .text	0000000a _fstat_r
53ff5a5a g       *ABS*	00000000 __valid_user_code_checksum
1a000f30 g     F .text	00000088 pruebasInit
1a000e7c g     F .text	00000054 EspRxCallback
1a006fcc g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a00323c g     F .text	00000018 vTaskInternalSetTimeOutState
1a0019b8 g     F .text	00000054 interpreterInit
1a004bc8 g     F .text	00000028 uartCallbackClr
1a004ddc g     F .text	00000044 TIMER3_IRQHandler
1a004676 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0054c8 g     F .text	0000001e stdioSprintf
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a003a98 g     F .text	00000110 xPortStartScheduler
1a001cdc g     F .text	000000f0 myTask3
1a005bb0 g     F .text	00000016 memcpy
1a003148 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a005a1c g     F .text	0000000c _cleanup_r
1a003a60  w    F .text	00000038 vPortSetupTimerInterrupt
1a001b7c g     F .text	0000012c interpreter
1a005574 g     F .text	00000000 .hidden __aeabi_uldivmod
10005000 g       .noinit	00000000 _noinit
1a005e10 g     F .text	00000010 puts
1a001ff8 g     F .text	00000016 vPortFree
1a001938 g     F .text	00000048 sendDataPort
100005b0 g     O .data	000007f0 HttpWebPage
10004ff8 g     O .bss	00000004 SystemCoreClock
1a003f6c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a003ba8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a0046f4 g     F .text	0000004c Chip_Clock_GetRate
1a0027da g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000fec g     F .text	00000074 sendToAllTests
1a003e4c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
10004dc8 g     O .bss	000001e0 FSMRegisters
1a0055a4 g     F .text	000002cc .hidden __udivmoddi4
1a001f68 g     F .text	00000020 _sbrk_r
1a006c74 g     O .text	00000004 ExtRateIn
1a001728 g     F .text	00000028 onTxTimeOutCallback
1a0001ba  w    F .text	00000002 IntDefaultHandler
10000ed0 g     O .data	0000012c pageDataB
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000f20 g     F .text	00000010 receiveEspByte
10004dc0 g     O .bss	00000004 commandsQueue
1a001ef0 g     F .text	0000004e _read_r
1a0027d4 g     F .text	00000006 vListInitialiseItem
1a001ca8 g     F .text	00000034 myTask
1a00555e g     F .text	0000000a GPIO1_IRQHandler
1a00251c g     F .text	00000158 xQueueReceive
10004fb8 g     O .bss	00000040 xQueueRegistry
1a002868 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a006fc4 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a006f88 g     O .text	00000004 _global_impure_ptr
1a005b68 g     F .text	00000048 __libc_init_array
10004fa8 g     O .bss	00000004 actualPanel
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001f88 g     F .text	00000070 pvPortMalloc
1a001a0c g     F .text	00000028 sendCommand
1a003dc8 g     F .text	00000030 Board_Init
1a001ebe  w    F .text	00000002 _init
1a000e38 g     F .text	00000018 gesp8266ReadHttpServer
1a0027be g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a000388 g     F .text	00000010 gesp8266GetConnectionId
1a001854 g     F .text	0000003e portsDataInit
1a002d78 g     F .text	0000000c xTaskGetTickCount
1a0022d4 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10005000 g       .bss	00000000 _ebss
1a0051d4 g     F .text	00000014 _outbyte
1a004d18 g     F .text	00000040 TIMER0_IRQHandler
1a001e34 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003f08 g     F .text	00000038 Chip_I2C_SetClockRate
1a003300 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0043ac g     F .text	0000004c Chip_Clock_EnableCrystal
1a0003d4 g     F .text	0000022c requestCallback
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0031b0 g     F .text	0000008c xTaskRemoveFromEventList
1a0028ac  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a001390 g     F .text	00000030 checkTimeout
1a005ea6 g     F .text	0000001e strcat
1a004d58 g     F .text	00000040 TIMER1_IRQHandler
1a006f28 g     O .text	00000020 __sf_fake_stderr
1a003ee4 g     F .text	00000024 Chip_I2C_Init
1a004cf6 g     F .text	0000000a UART2_IRQHandler
1a004568 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a006e34 g     O .text	000000e6 gpioPinsInit
1a004a7c g     F .text	00000090 uartInterrupt
1a002880  w    F .text	0000002c vAssertCalled
1a004cdc g     F .text	0000001a uartWriteByte
1a0048d8 g     F .text	00000012 Chip_SSP_SetClockRate
1a0050d2 g     F .text	00000016 gpioToggle
1a0061c2 g     F .text	00000024 __sfputs_r
1a005568 g     F .text	0000000a GPIO2_IRQHandler
1a001074 g     F .text	0000031c FSMPruebaDrivers
1a006730 g     F .text	00000000 memchr
1a003254 g     F .text	00000080 xTaskCheckForTimeOut
1a005bd8 g     F .text	0000009c _free_r
1a004650 g     F .text	00000026 Chip_Clock_GetBaseClock
10001920 g       .bss	00000000 _bss
1a004170 g     F .text	00000032 Chip_ADC_SetSampleRate
10004d70 g     O .bss	00000004 freeRtosInterruptCallback
1a002d68 g     F .text	00000010 vTaskSuspendAll
1a005f12 g     F .text	00000034 strstr
1a005170 g     F .text	00000020 delayInit
1a004bf0 g     F .text	00000030 uartSetPendingInterrupt
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0048ea g     F .text	0000003e Chip_SSP_SetBitRate
1a002826 g     F .text	00000028 uxListRemove
1a0048a8 g     F .text	00000002 Chip_GPIO_Init
1a006ca0 g     O .text	00000004 OscRateIn
1a000dec g     F .text	0000004c gesp8266InitHttpServer
1a004c60 g     F .text	0000007c uartInit
1a002bfc g     F .text	00000072 xTaskCreateStatic
10004fb0 g     O .bss	00000008 panels
10005000 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a003080 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0021f6 g     F .text	00000090 xQueueGenericCreateStatic
1a003178 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a001ec0 g     F .text	0000000a _close_r
1a004e54 g     F .text	000001ac gpioInit
1a002850 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a003564 g     F .text	0000006c xTimerGenericCommand
1a005fec g     F .text	000000dc __swsetup_r
1a0028c8  w    F .text	0000001c vApplicationStackOverflowHook
1a005870  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005ab4 g     F .text	00000078 __sfp
1a005e20 g     F .text	00000022 __sread
1a0050e8 g     F .text	0000001c USB0_IRQHandler
1a0051e8 g     F .text	00000040 outbyte
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a006190 g     F .text	00000002 __malloc_lock
1a003d98 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a005980 g     F .text	00000054 _fflush_r
1a006f48 g     O .text	00000020 __sf_fake_stdin
1a004414 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005bc6 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a001dcc g     F .text	00000064 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0027f2 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a003930 g     F .text	00000024 SVC_Handler
1a005e9e g     F .text	00000008 __sclose
1a0034c8 g     F .text	00000064 xTimerCreateTimerTask
1a005c74 g     F .text	000000b4 _malloc_r
1a004c20 g     F .text	00000018 uartTxReady
1a002f90 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a004684 g     F .text	0000003c Chip_Clock_EnableOpts
1a003e02 g     F .text	00000008 __stdio_getchar
1a002674 g     F .text	000000aa xQueueReceiveFromISR
1a002286 g     F .text	0000004e xQueueGenericCreate
1a004430 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000380 g     F .text	00000008 gesp8266GetIpAddress
1a005ede g     F .text	00000014 strcmp
1a0044e8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a004960 g     F .text	00000038 SystemInit
1a001980 g     F .text	00000036 receiveDataPort
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a005000 g     F .text	0000006a gpioWrite
1a001ebc  w    F .text	00000002 _fini
1a005d28 g     F .text	00000030 iprintf
1a002e9c g     F .text	000000f4 xTaskResumeAll
10000da4 g     O .data	0000012c pageDataA
1a002cd4 g     F .text	00000094 vTaskStartScheduler
1a004130 g     F .text	00000040 Chip_ADC_Init
10004ffc g     O .bss	00000004 g_pUsbApi
1a003e14 g     F .text	00000038 Board_SetupMuxing
1a004000 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a004d0a g     F .text	0000000a tickRead
1a001f3e g     F .text	00000028 _write_r
10001828 g     O .data	00000008 tickRateMS
1a00385a g     F .text	00000026 pvTimerGetTimerID
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a006414 g     F .text	000000ea _printf_common
100018bc g     O .data	00000004 _impure_ptr
100013e8 g     O .data	000003e9 panel1
1a005874 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000da0 g     O .data	00000003 ok
1a004c4c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0032d4 g     F .text	0000000c vTaskMissedYield
10005000 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a004928 g     F .text	00000038 Chip_SSP_Init
1a00271e g     F .text	00000026 uxQueueMessagesWaiting
1a002744 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002d84 g     F .text	00000118 xTaskIncrementTick
1a0060c8 g     F .text	00000048 __swhatbuf_r
1a003c04 g     F .text	00000020 DAC_IRQHandler
1a003d74 g     F .text	00000024 Board_Debug_Init
100017d4 g     O .data	00000010 requestError
1a003df8 g     F .text	0000000a __stdio_putchar
1a002150 g     F .text	00000084 xQueueGenericReset
10001920 g       .data	00000000 _edata
10004fac g     O .bss	00000004 actualPageData
1a003ec4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000fb8 g     F .text	00000034 setTestOrder
1a002c6e g     F .text	00000066 xTaskCreate
1a004754 g     F .text	00000154 Chip_SetupCoreClock
1a005e42 g     F .text	00000038 __swrite
1a005554 g     F .text	0000000a GPIO0_IRQHandler
1a0061e8 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a005b2c g     F .text	0000003c _fwalk_reent
1a004740 g     F .text	00000014 SystemCoreClockUpdate
1a000ed0 g     F .text	00000050 UARTEspInit
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a003034 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a006f68 g     O .text	00000020 __sf_fake_stdout
1a0032e0 g     F .text	00000020 xTaskGetSchedulerState
1a005870  w    F .text	00000002 .hidden __aeabi_idiv0
10004dc4 g     O .bss	00000001 actualPanelNumber
10000000 g     O .data	000005ae HttpBody
1a004b0c g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a006110 g     F .text	00000080 __smakebuf_r
1a005f02 g     F .text	00000010 strlen
1a0038fc g     F .text	0000002c pxPortInitialiseStack
1a006500 g     F .text	00000224 _printf_i
1a0046c0 g     F .text	00000034 Chip_Clock_Enable
1a004d00 g     F .text	0000000a UART3_IRQHandler
10004db8 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a005ec4 g     F .text	0000001a strchr
1a00506a g     F .text	00000068 gpioRead
1a0054ac g     F .text	0000001c stdioPrintf
1a005104 g     F .text	0000006c boardInit
1a003954 g     F .text	00000044 vPortEnterCritical
10004db4 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0061e8 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000398 g     F .text	0000003c requestSeparate
1a0045f8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a004998 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a003eb8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 35 1e 00 1a 79 01 00 1a 7b 01 00 1a     ....5...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 5a 5a ff 53     }...........ZZ.S
	...
1a00002c:	31 39 00 1a 85 01 00 1a 00 00 00 00 d1 39 00 1a     19...........9..
1a00003c:	35 3a 00 1a                                         5:..

1a000040 <g_pfnVendorVectors>:
1a000040:	05 3c 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .<..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	e9 50 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .P..............
1a000070:	19 4d 00 1a 59 4d 00 1a 99 4d 00 1a dd 4d 00 1a     .M..YM...M...M..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a f7 4c 00 1a 01 4d 00 1a     .........L...M..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	55 55 00 1a 5f 55 00 1a 69 55 00 1a bb 01 00 1a     UU.._U..iU......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a006fcc 	.word	0x1a006fcc
1a000118:	10000000 	.word	0x10000000
1a00011c:	00001920 	.word	0x00001920
1a000120:	1a006fcc 	.word	0x1a006fcc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a006fcc 	.word	0x1a006fcc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a006fcc 	.word	0x1a006fcc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a006fcc 	.word	0x1a006fcc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10001920 	.word	0x10001920
1a000154:	000036e0 	.word	0x000036e0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f004 fbf8 	bl	1a0049b4 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <SetEsp8622Status>:
 * Setea el estado global del modulo Esp8266.
 * @param status Estado a setear.
 */
static void SetEsp8622Status(Esp8266Status_t status)
{
	Esp8266Status = status;
1a000300:	4b01      	ldr	r3, [pc, #4]	; (1a000308 <SetEsp8622Status+0x8>)
1a000302:	7018      	strb	r0, [r3, #0]
	if (Esp8266DebugBaudRate > 0)
	{
//		stdioPrintf(Esp8266DebugUart, "\n\rESP8266 State = %s\n\r", Esp8266StatusToString[status]);
	}
}
1a000304:	4770      	bx	lr
1a000306:	bf00      	nop
1a000308:	10001944 	.word	0x10001944

1a00030c <IsWaitedResponse>:
{
1a00030c:	b500      	push	{lr}
1a00030e:	b083      	sub	sp, #12
	if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000310:	220a      	movs	r2, #10
1a000312:	f10d 0107 	add.w	r1, sp, #7
1a000316:	4815      	ldr	r0, [pc, #84]	; (1a00036c <IsWaitedResponse+0x60>)
1a000318:	f000 fe02 	bl	1a000f20 <receiveEspByte>
1a00031c:	4603      	mov	r3, r0
1a00031e:	b188      	cbz	r0, 1a000344 <IsWaitedResponse+0x38>
			stdioPrintf(Esp8266DebugUart, "%c", byteReceived);
1a000320:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000324:	4912      	ldr	r1, [pc, #72]	; (1a000370 <IsWaitedResponse+0x64>)
1a000326:	2003      	movs	r0, #3
1a000328:	f005 f8c0 	bl	1a0054ac <stdioPrintf>
		if (byteReceived == Esp8266ResponseToWait[index])
1a00032c:	4b11      	ldr	r3, [pc, #68]	; (1a000374 <IsWaitedResponse+0x68>)
1a00032e:	6819      	ldr	r1, [r3, #0]
1a000330:	4b11      	ldr	r3, [pc, #68]	; (1a000378 <IsWaitedResponse+0x6c>)
1a000332:	781b      	ldrb	r3, [r3, #0]
1a000334:	5cc8      	ldrb	r0, [r1, r3]
1a000336:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a00033a:	4290      	cmp	r0, r2
1a00033c:	d006      	beq.n	1a00034c <IsWaitedResponse+0x40>
			index = 0;
1a00033e:	2300      	movs	r3, #0
1a000340:	4a0d      	ldr	r2, [pc, #52]	; (1a000378 <IsWaitedResponse+0x6c>)
1a000342:	7013      	strb	r3, [r2, #0]
}
1a000344:	4618      	mov	r0, r3
1a000346:	b003      	add	sp, #12
1a000348:	f85d fb04 	ldr.w	pc, [sp], #4
			index++;
1a00034c:	3301      	adds	r3, #1
1a00034e:	b2db      	uxtb	r3, r3
1a000350:	4809      	ldr	r0, [pc, #36]	; (1a000378 <IsWaitedResponse+0x6c>)
1a000352:	7003      	strb	r3, [r0, #0]
			if (Esp8266ResponseToWait[index] == '\0')
1a000354:	5ccb      	ldrb	r3, [r1, r3]
1a000356:	b93b      	cbnz	r3, 1a000368 <IsWaitedResponse+0x5c>
				index = 0;
1a000358:	2100      	movs	r1, #0
1a00035a:	7001      	strb	r1, [r0, #0]
					stdioPrintf(Esp8266DebugUart, "\n\r", byteReceived);
1a00035c:	4907      	ldr	r1, [pc, #28]	; (1a00037c <IsWaitedResponse+0x70>)
1a00035e:	2003      	movs	r0, #3
1a000360:	f005 f8a4 	bl	1a0054ac <stdioPrintf>
				moduleResponse = TRUE;
1a000364:	2301      	movs	r3, #1
1a000366:	e7ed      	b.n	1a000344 <IsWaitedResponse+0x38>
	bool_t moduleResponse = FALSE;
1a000368:	2300      	movs	r3, #0
1a00036a:	e7eb      	b.n	1a000344 <IsWaitedResponse+0x38>
1a00036c:	10001950 	.word	0x10001950
1a000370:	1a0068e4 	.word	0x1a0068e4
1a000374:	10001940 	.word	0x10001940
1a000378:	100019bc 	.word	0x100019bc
1a00037c:	1a0068e8 	.word	0x1a0068e8

1a000380 <gesp8266GetIpAddress>:
}
1a000380:	4800      	ldr	r0, [pc, #0]	; (1a000384 <gesp8266GetIpAddress+0x4>)
1a000382:	4770      	bx	lr
1a000384:	10001960 	.word	0x10001960

1a000388 <gesp8266GetConnectionId>:
	return CurrentConnectionId - '0';
1a000388:	4b02      	ldr	r3, [pc, #8]	; (1a000394 <gesp8266GetConnectionId+0xc>)
1a00038a:	7818      	ldrb	r0, [r3, #0]
1a00038c:	3830      	subs	r0, #48	; 0x30
}
1a00038e:	b2c0      	uxtb	r0, r0
1a000390:	4770      	bx	lr
1a000392:	bf00      	nop
1a000394:	10001920 	.word	0x10001920

1a000398 <requestSeparate>:
//**request: apunta a la parte de rawReq que es la solicitud limpia de la HTTP Request
//**version: apunta a la parte de rawReq que la version del HTTP de la HTTP Request
//

void requestSeparate(char *rawReq, char **methode,char **request,char **HTTPVersion)
	{
1a000398:	b570      	push	{r4, r5, r6, lr}
1a00039a:	4604      	mov	r4, r0
1a00039c:	4616      	mov	r6, r2
1a00039e:	461d      	mov	r5, r3
	 //puntero al string de la version HTTP
	char *aux;

	//

	*methode=rawReq;
1a0003a0:	6008      	str	r0, [r1, #0]
	*HTTPVersion = strstr(rawReq, "HTTP/");//busco el inicio del string de la version HTTP
1a0003a2:	490b      	ldr	r1, [pc, #44]	; (1a0003d0 <requestSeparate+0x38>)
1a0003a4:	f005 fdb5 	bl	1a005f12 <strstr>
1a0003a8:	6028      	str	r0, [r5, #0]
	uint16_t i =0;
1a0003aa:	2300      	movs	r3, #0
	while (rawReq[i]!=' ')
1a0003ac:	e001      	b.n	1a0003b2 <requestSeparate+0x1a>
		i++;
1a0003ae:	3301      	adds	r3, #1
1a0003b0:	b29b      	uxth	r3, r3
	while (rawReq[i]!=' ')
1a0003b2:	4619      	mov	r1, r3
1a0003b4:	18e0      	adds	r0, r4, r3
1a0003b6:	5ce2      	ldrb	r2, [r4, r3]
1a0003b8:	2a20      	cmp	r2, #32
1a0003ba:	d1f8      	bne.n	1a0003ae <requestSeparate+0x16>
	rawReq[i]=0; 	//pongo fin de cadena entre GET y la request propiamente dicha para separar el
1a0003bc:	2300      	movs	r3, #0
1a0003be:	7003      	strb	r3, [r0, #0]
					//string en 3 strings (methode, request y HTTPVersion)
	*request=&rawReq[i+1]; //la request empieza un caracter despues del espacio que viene despues del GE
1a0003c0:	3101      	adds	r1, #1
1a0003c2:	440c      	add	r4, r1
1a0003c4:	6034      	str	r4, [r6, #0]

	aux=*HTTPVersion-sizeof(char);//poner el /0 antes de la posicion apuntada por HTTPVersion
1a0003c6:	682a      	ldr	r2, [r5, #0]
	*aux=0;
1a0003c8:	f802 3c01 	strb.w	r3, [r2, #-1]

	}
1a0003cc:	bd70      	pop	{r4, r5, r6, pc}
1a0003ce:	bf00      	nop
1a0003d0:	1a006a2c 	.word	0x1a006a2c

1a0003d4 <requestCallback>:
void requestCallback(char *rawReq, uint8_t reqLength){
1a0003d4:	b530      	push	{r4, r5, lr}
1a0003d6:	b089      	sub	sp, #36	; 0x24
1a0003d8:	4605      	mov	r5, r0

stdioPrintf(UART_USB, "\n La request tiene una longitud de: %d \n",CurrentReqLength);
1a0003da:	4b6d      	ldr	r3, [pc, #436]	; (1a000590 <requestCallback+0x1bc>)
1a0003dc:	781a      	ldrb	r2, [r3, #0]
1a0003de:	496d      	ldr	r1, [pc, #436]	; (1a000594 <requestCallback+0x1c0>)
1a0003e0:	2003      	movs	r0, #3
1a0003e2:	f005 f863 	bl	1a0054ac <stdioPrintf>
stdioPrintf(UART_USB, "\n La request completa es: %s \n",rawReq);
1a0003e6:	462a      	mov	r2, r5
1a0003e8:	496b      	ldr	r1, [pc, #428]	; (1a000598 <requestCallback+0x1c4>)
1a0003ea:	2003      	movs	r0, #3
1a0003ec:	f005 f85e 	bl	1a0054ac <stdioPrintf>
uint32_t buttonId;
//actualPanel=panel0;
command_t auxCommand; //Variable para guardar comandos que van a ser enviados al interprete

//separo la request completa en 3 bloques (metodo, request limpia y version de HTTP)
requestSeparate(rawReq,&methode,&request,&HTTPVersion);
1a0003f0:	4c6a      	ldr	r4, [pc, #424]	; (1a00059c <requestCallback+0x1c8>)
1a0003f2:	4b6b      	ldr	r3, [pc, #428]	; (1a0005a0 <requestCallback+0x1cc>)
1a0003f4:	4a6b      	ldr	r2, [pc, #428]	; (1a0005a4 <requestCallback+0x1d0>)
1a0003f6:	4621      	mov	r1, r4
1a0003f8:	4628      	mov	r0, r5
1a0003fa:	f7ff ffcd 	bl	1a000398 <requestSeparate>

if (!strcmp(methode,"GET"))
1a0003fe:	6824      	ldr	r4, [r4, #0]
1a000400:	4969      	ldr	r1, [pc, #420]	; (1a0005a8 <requestCallback+0x1d4>)
1a000402:	4620      	mov	r0, r4
1a000404:	f005 fd6b 	bl	1a005ede <strcmp>
1a000408:	2800      	cmp	r0, #0
1a00040a:	d13e      	bne.n	1a00048a <requestCallback+0xb6>
{
	if (!strcmp(request, "/"))
1a00040c:	4b65      	ldr	r3, [pc, #404]	; (1a0005a4 <requestCallback+0x1d0>)
1a00040e:	681c      	ldr	r4, [r3, #0]
1a000410:	4966      	ldr	r1, [pc, #408]	; (1a0005ac <requestCallback+0x1d8>)
1a000412:	4620      	mov	r0, r4
1a000414:	f005 fd63 	bl	1a005ede <strcmp>
1a000418:	b148      	cbz	r0, 1a00042e <requestCallback+0x5a>
			requestAnswer=HttpWebPage;
	else
		{
		if (strstr(request, "/data"))
1a00041a:	4965      	ldr	r1, [pc, #404]	; (1a0005b0 <requestCallback+0x1dc>)
1a00041c:	4620      	mov	r0, r4
1a00041e:	f005 fd78 	bl	1a005f12 <strstr>
1a000422:	b140      	cbz	r0, 1a000436 <requestCallback+0x62>
				{
			requestAnswer = actualPageData;
1a000424:	4b63      	ldr	r3, [pc, #396]	; (1a0005b4 <requestCallback+0x1e0>)
1a000426:	681a      	ldr	r2, [r3, #0]
1a000428:	4b63      	ldr	r3, [pc, #396]	; (1a0005b8 <requestCallback+0x1e4>)
1a00042a:	601a      	str	r2, [r3, #0]
1a00042c:	e09b      	b.n	1a000566 <requestCallback+0x192>
			requestAnswer=HttpWebPage;
1a00042e:	4b62      	ldr	r3, [pc, #392]	; (1a0005b8 <requestCallback+0x1e4>)
1a000430:	4a62      	ldr	r2, [pc, #392]	; (1a0005bc <requestCallback+0x1e8>)
1a000432:	601a      	str	r2, [r3, #0]
1a000434:	e097      	b.n	1a000566 <requestCallback+0x192>
				}
		else
			if (strstr(request, "/button"))
1a000436:	4962      	ldr	r1, [pc, #392]	; (1a0005c0 <requestCallback+0x1ec>)
1a000438:	4620      	mov	r0, r4
1a00043a:	f005 fd6a 	bl	1a005f12 <strstr>
1a00043e:	b118      	cbz	r0, 1a000448 <requestCallback+0x74>
							{
						requestAnswer = ok;
1a000440:	4b5d      	ldr	r3, [pc, #372]	; (1a0005b8 <requestCallback+0x1e4>)
1a000442:	4a60      	ldr	r2, [pc, #384]	; (1a0005c4 <requestCallback+0x1f0>)
1a000444:	601a      	str	r2, [r3, #0]
1a000446:	e08e      	b.n	1a000566 <requestCallback+0x192>
							}
			else
				if (strstr(request, "/panel"))
1a000448:	495f      	ldr	r1, [pc, #380]	; (1a0005c8 <requestCallback+0x1f4>)
1a00044a:	4620      	mov	r0, r4
1a00044c:	f005 fd61 	bl	1a005f12 <strstr>
1a000450:	b120      	cbz	r0, 1a00045c <requestCallback+0x88>
								{
							requestAnswer = actualPanel;
1a000452:	4b5e      	ldr	r3, [pc, #376]	; (1a0005cc <requestCallback+0x1f8>)
1a000454:	681a      	ldr	r2, [r3, #0]
1a000456:	4b58      	ldr	r3, [pc, #352]	; (1a0005b8 <requestCallback+0x1e4>)
1a000458:	601a      	str	r2, [r3, #0]
1a00045a:	e084      	b.n	1a000566 <requestCallback+0x192>
								}
				else
					if (strstr(request, "/body"))
1a00045c:	495c      	ldr	r1, [pc, #368]	; (1a0005d0 <requestCallback+0x1fc>)
1a00045e:	4620      	mov	r0, r4
1a000460:	f005 fd57 	bl	1a005f12 <strstr>
1a000464:	b118      	cbz	r0, 1a00046e <requestCallback+0x9a>
									{
								requestAnswer = HttpBody;
1a000466:	4b54      	ldr	r3, [pc, #336]	; (1a0005b8 <requestCallback+0x1e4>)
1a000468:	4a5a      	ldr	r2, [pc, #360]	; (1a0005d4 <requestCallback+0x200>)
1a00046a:	601a      	str	r2, [r3, #0]
1a00046c:	e07b      	b.n	1a000566 <requestCallback+0x192>
									}
					else
						if (strstr(request, "/save"))
1a00046e:	495a      	ldr	r1, [pc, #360]	; (1a0005d8 <requestCallback+0x204>)
1a000470:	4620      	mov	r0, r4
1a000472:	f005 fd4e 	bl	1a005f12 <strstr>
1a000476:	b120      	cbz	r0, 1a000482 <requestCallback+0xae>
								{
							requestAnswer = actualPageData;
1a000478:	4b4e      	ldr	r3, [pc, #312]	; (1a0005b4 <requestCallback+0x1e0>)
1a00047a:	681a      	ldr	r2, [r3, #0]
1a00047c:	4b4e      	ldr	r3, [pc, #312]	; (1a0005b8 <requestCallback+0x1e4>)
1a00047e:	601a      	str	r2, [r3, #0]
1a000480:	e071      	b.n	1a000566 <requestCallback+0x192>
								}
						else
							requestAnswer = requestError;
1a000482:	4b4d      	ldr	r3, [pc, #308]	; (1a0005b8 <requestCallback+0x1e4>)
1a000484:	4a55      	ldr	r2, [pc, #340]	; (1a0005dc <requestCallback+0x208>)
1a000486:	601a      	str	r2, [r3, #0]
1a000488:	e06d      	b.n	1a000566 <requestCallback+0x192>
		}
}
else
	if (!strcmp(methode,"POST"))
1a00048a:	4955      	ldr	r1, [pc, #340]	; (1a0005e0 <requestCallback+0x20c>)
1a00048c:	4620      	mov	r0, r4
1a00048e:	f005 fd26 	bl	1a005ede <strcmp>
1a000492:	2800      	cmp	r0, #0
1a000494:	d164      	bne.n	1a000560 <requestCallback+0x18c>
	{
		if (strstr(request, "/button$"))
1a000496:	4b43      	ldr	r3, [pc, #268]	; (1a0005a4 <requestCallback+0x1d0>)
1a000498:	681c      	ldr	r4, [r3, #0]
1a00049a:	4952      	ldr	r1, [pc, #328]	; (1a0005e4 <requestCallback+0x210>)
1a00049c:	4620      	mov	r0, r4
1a00049e:	f005 fd38 	bl	1a005f12 <strstr>
1a0004a2:	2800      	cmp	r0, #0
1a0004a4:	d033      	beq.n	1a00050e <requestCallback+0x13a>
		{
			//reemplazo los "$" por fin de cadena
			auxpointer1= strstr(request, "$"); //llego al primer signo $
1a0004a6:	2124      	movs	r1, #36	; 0x24
1a0004a8:	4620      	mov	r0, r4
1a0004aa:	f005 fd0b 	bl	1a005ec4 <strchr>
1a0004ae:	4604      	mov	r4, r0
			auxpointer1[0]=' ';
1a0004b0:	2320      	movs	r3, #32
1a0004b2:	7003      	strb	r3, [r0, #0]
			auxpointer2= strstr(request, "$");
1a0004b4:	2124      	movs	r1, #36	; 0x24
1a0004b6:	4b3b      	ldr	r3, [pc, #236]	; (1a0005a4 <requestCallback+0x1d0>)
1a0004b8:	6818      	ldr	r0, [r3, #0]
1a0004ba:	f005 fd03 	bl	1a005ec4 <strchr>
1a0004be:	4b4a      	ldr	r3, [pc, #296]	; (1a0005e8 <requestCallback+0x214>)
1a0004c0:	6018      	str	r0, [r3, #0]
			//auxpointer2[0]=0;
			//auxCommand.panelNum = stringToInt(&auxpointer1[2]); //capturo el numero de panel
			auxCommand.panelNum = (uint8_t) (auxpointer1[1]-'0'); //capturo el numero de panel
1a0004c2:	7863      	ldrb	r3, [r4, #1]
1a0004c4:	3b30      	subs	r3, #48	; 0x30
1a0004c6:	f88d 3008 	strb.w	r3, [sp, #8]
			i=1;
1a0004ca:	2401      	movs	r4, #1
			while ((i<4)&&(auxpointer2[i]!= 0))//
1a0004cc:	2c03      	cmp	r4, #3
1a0004ce:	d811      	bhi.n	1a0004f4 <requestCallback+0x120>
1a0004d0:	4b45      	ldr	r3, [pc, #276]	; (1a0005e8 <requestCallback+0x214>)
1a0004d2:	681b      	ldr	r3, [r3, #0]
1a0004d4:	5d1b      	ldrb	r3, [r3, r4]
1a0004d6:	b16b      	cbz	r3, 1a0004f4 <requestCallback+0x120>
			//while (auxpointer2[i])//
					{
					gpioToggle( LED1 );
1a0004d8:	202b      	movs	r0, #43	; 0x2b
1a0004da:	f004 fdfa 	bl	1a0050d2 <gpioToggle>
				//	gpioToggle( LED2 );
				//	gpioToggle( LED3 );
					auxCommand.buttonId[i-1]= auxpointer2[i];
1a0004de:	1e63      	subs	r3, r4, #1
1a0004e0:	4a41      	ldr	r2, [pc, #260]	; (1a0005e8 <requestCallback+0x214>)
1a0004e2:	6812      	ldr	r2, [r2, #0]
1a0004e4:	5d12      	ldrb	r2, [r2, r4]
1a0004e6:	a908      	add	r1, sp, #32
1a0004e8:	440b      	add	r3, r1
1a0004ea:	f803 2c17 	strb.w	r2, [r3, #-23]
					//auxCommand.buttonId[1]= auxpointer2[2];
//					auxCommand.buttonId[2]= auxpointer2[3];
					i++;
1a0004ee:	3401      	adds	r4, #1
1a0004f0:	b2a4      	uxth	r4, r4
1a0004f2:	e7eb      	b.n	1a0004cc <requestCallback+0xf8>
					}
			sendCommand(auxCommand);
1a0004f4:	ab08      	add	r3, sp, #32
1a0004f6:	e913 0003 	ldmdb	r3, {r0, r1}
1a0004fa:	e88d 0003 	stmia.w	sp, {r0, r1}
1a0004fe:	ab02      	add	r3, sp, #8
1a000500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000502:	f001 fa83 	bl	1a001a0c <sendCommand>
			requestAnswer=ok;
1a000506:	4b2c      	ldr	r3, [pc, #176]	; (1a0005b8 <requestCallback+0x1e4>)
1a000508:	4a2e      	ldr	r2, [pc, #184]	; (1a0005c4 <requestCallback+0x1f0>)
1a00050a:	601a      	str	r2, [r3, #0]
1a00050c:	e02b      	b.n	1a000566 <requestCallback+0x192>
		}
		else
		{
			if (strstr(request, "/save$"))
1a00050e:	4937      	ldr	r1, [pc, #220]	; (1a0005ec <requestCallback+0x218>)
1a000510:	4620      	mov	r0, r4
1a000512:	f005 fcfe 	bl	1a005f12 <strstr>
1a000516:	b1f8      	cbz	r0, 1a000558 <requestCallback+0x184>
			{
				//reemplazo los "$" por fin de cadena
				auxpointer1= strstr(request, "$");
1a000518:	2124      	movs	r1, #36	; 0x24
1a00051a:	4620      	mov	r0, r4
1a00051c:	f005 fcd2 	bl	1a005ec4 <strchr>
				auxpointer1[0]=0;
1a000520:	2400      	movs	r4, #0
1a000522:	7004      	strb	r4, [r0, #0]
				auxpointer2= strstr(auxpointer1, "$");
1a000524:	2124      	movs	r1, #36	; 0x24
1a000526:	f005 fccd 	bl	1a005ec4 <strchr>
1a00052a:	4b2f      	ldr	r3, [pc, #188]	; (1a0005e8 <requestCallback+0x214>)
1a00052c:	6018      	str	r0, [r3, #0]
				auxpointer2[0]=0;
1a00052e:	7004      	strb	r4, [r0, #0]
				auxCommand.panelNum = stringToInt(&auxpointer1[1]); //capturo el numero de panel
				i=1;
				while ((i<4)&&(auxpointer2[i]!= 0))//el modulo envia un espacio entre la uri y la version HTML
1a000530:	7843      	ldrb	r3, [r0, #1]
1a000532:	2b00      	cmp	r3, #0
1a000534:	d1fc      	bne.n	1a000530 <requestCallback+0x15c>
						{
						auxCommand.buttonId[i-1]= auxpointer2[i];
						}

				//Capturo los parametros a guardar y los convierto a entero
				auxpointer1= strstr(request, "$data:[");//busco el primer parametro
1a000536:	492e      	ldr	r1, [pc, #184]	; (1a0005f0 <requestCallback+0x21c>)
1a000538:	4b1a      	ldr	r3, [pc, #104]	; (1a0005a4 <requestCallback+0x1d0>)
1a00053a:	6818      	ldr	r0, [r3, #0]
1a00053c:	f005 fce9 	bl	1a005f12 <strstr>
				for (i=0;i<4;i++)
				{
					if (i=3)
						auxpointer2= strstr(auxpointer1, "]"); //para el cuarto parametro busco un ]
1a000540:	215d      	movs	r1, #93	; 0x5d
1a000542:	f005 fcbf 	bl	1a005ec4 <strchr>
1a000546:	4b28      	ldr	r3, [pc, #160]	; (1a0005e8 <requestCallback+0x214>)
1a000548:	6018      	str	r0, [r3, #0]
					else
						auxpointer2= strstr(auxpointer1, ","); //busco una coma y la reemplazo por 0
					auxpointer2[0]=0;
1a00054a:	2300      	movs	r3, #0
1a00054c:	7003      	strb	r3, [r0, #0]
					auxCommand.parameters[i] = stringToInt(&auxpointer1[1]);
					auxpointer1=auxpointer2;
				}


				requestAnswer = actualPageData;
1a00054e:	4b19      	ldr	r3, [pc, #100]	; (1a0005b4 <requestCallback+0x1e0>)
1a000550:	681a      	ldr	r2, [r3, #0]
1a000552:	4b19      	ldr	r3, [pc, #100]	; (1a0005b8 <requestCallback+0x1e4>)
1a000554:	601a      	str	r2, [r3, #0]
1a000556:	e006      	b.n	1a000566 <requestCallback+0x192>
			}
			else
				requestAnswer = requestError;
1a000558:	4b17      	ldr	r3, [pc, #92]	; (1a0005b8 <requestCallback+0x1e4>)
1a00055a:	4a20      	ldr	r2, [pc, #128]	; (1a0005dc <requestCallback+0x208>)
1a00055c:	601a      	str	r2, [r3, #0]
1a00055e:	e002      	b.n	1a000566 <requestCallback+0x192>
		}
	}
	else
	{
		requestAnswer = requestError;
1a000560:	4b15      	ldr	r3, [pc, #84]	; (1a0005b8 <requestCallback+0x1e4>)
1a000562:	4a1e      	ldr	r2, [pc, #120]	; (1a0005dc <requestCallback+0x208>)
1a000564:	601a      	str	r2, [r3, #0]
	}

stdioPrintf(UART_USB, "\n La request limpia es: %s \n",request);
1a000566:	4b0f      	ldr	r3, [pc, #60]	; (1a0005a4 <requestCallback+0x1d0>)
1a000568:	681a      	ldr	r2, [r3, #0]
1a00056a:	4922      	ldr	r1, [pc, #136]	; (1a0005f4 <requestCallback+0x220>)
1a00056c:	2003      	movs	r0, #3
1a00056e:	f004 ff9d 	bl	1a0054ac <stdioPrintf>
stdioPrintf(UART_USB, "\n El metodo es: %s \n",methode);
1a000572:	4b0a      	ldr	r3, [pc, #40]	; (1a00059c <requestCallback+0x1c8>)
1a000574:	681a      	ldr	r2, [r3, #0]
1a000576:	4920      	ldr	r1, [pc, #128]	; (1a0005f8 <requestCallback+0x224>)
1a000578:	2003      	movs	r0, #3
1a00057a:	f004 ff97 	bl	1a0054ac <stdioPrintf>
stdioPrintf(UART_USB, "\n La version de HTTP es: %s \n",HTTPVersion);
1a00057e:	4b08      	ldr	r3, [pc, #32]	; (1a0005a0 <requestCallback+0x1cc>)
1a000580:	681a      	ldr	r2, [r3, #0]
1a000582:	491e      	ldr	r1, [pc, #120]	; (1a0005fc <requestCallback+0x228>)
1a000584:	2003      	movs	r0, #3
1a000586:	f004 ff91 	bl	1a0054ac <stdioPrintf>


//Con los tres segmentos separados queda identificar el metodo y luego la solicitud.

	return;
}
1a00058a:	b009      	add	sp, #36	; 0x24
1a00058c:	bd30      	pop	{r4, r5, pc}
1a00058e:	bf00      	nop
1a000590:	10001921 	.word	0x10001921
1a000594:	1a006938 	.word	0x1a006938
1a000598:	1a006964 	.word	0x1a006964
1a00059c:	100019c0 	.word	0x100019c0
1a0005a0:	10001948 	.word	0x10001948
1a0005a4:	10001ac8 	.word	0x10001ac8
1a0005a8:	1a006984 	.word	0x1a006984
1a0005ac:	1a006a30 	.word	0x1a006a30
1a0005b0:	1a006988 	.word	0x1a006988
1a0005b4:	10004fac 	.word	0x10004fac
1a0005b8:	10004dbc 	.word	0x10004dbc
1a0005bc:	100005b0 	.word	0x100005b0
1a0005c0:	1a006990 	.word	0x1a006990
1a0005c4:	10000da0 	.word	0x10000da0
1a0005c8:	1a006998 	.word	0x1a006998
1a0005cc:	10004fa8 	.word	0x10004fa8
1a0005d0:	1a0069a0 	.word	0x1a0069a0
1a0005d4:	10000000 	.word	0x10000000
1a0005d8:	1a0069a8 	.word	0x1a0069a8
1a0005dc:	100017d4 	.word	0x100017d4
1a0005e0:	1a0069b0 	.word	0x1a0069b0
1a0005e4:	1a0069b8 	.word	0x1a0069b8
1a0005e8:	100019b4 	.word	0x100019b4
1a0005ec:	1a0069c4 	.word	0x1a0069c4
1a0005f0:	1a0069cc 	.word	0x1a0069cc
1a0005f4:	1a0069d4 	.word	0x1a0069d4
1a0005f8:	1a0069f4 	.word	0x1a0069f4
1a0005fc:	1a006a0c 	.word	0x1a006a0c

1a000600 <ExcecuteHttpServerFsm>:
{
1a000600:	b510      	push	{r4, lr}
	UARTEsp.uartValue=ESP8266_UART;
1a000602:	4ba8      	ldr	r3, [pc, #672]	; (1a0008a4 <ExcecuteHttpServerFsm+0x2a4>)
1a000604:	2205      	movs	r2, #5
1a000606:	701a      	strb	r2, [r3, #0]
	UARTEsp.baudRate=ESP8266_BAUD_RATE;
1a000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00060c:	605a      	str	r2, [r3, #4]
	switch (Esp8266Status)
1a00060e:	4ba6      	ldr	r3, [pc, #664]	; (1a0008a8 <ExcecuteHttpServerFsm+0x2a8>)
1a000610:	781b      	ldrb	r3, [r3, #0]
1a000612:	2b2e      	cmp	r3, #46	; 0x2e
1a000614:	d842      	bhi.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
1a000616:	e8df f013 	tbh	[pc, r3, lsl #1]
1a00061a:	002f      	.short	0x002f
1a00061c:	005d0047 	.word	0x005d0047
1a000620:	00c100ab 	.word	0x00c100ab
1a000624:	00f800db 	.word	0x00f800db
1a000628:	012c010f 	.word	0x012c010f
1a00062c:	017b0161 	.word	0x017b0161
1a000630:	00410195 	.word	0x00410195
1a000634:	00410041 	.word	0x00410041
1a000638:	00410041 	.word	0x00410041
1a00063c:	00410041 	.word	0x00410041
1a000640:	00410041 	.word	0x00410041
1a000644:	01c601ac 	.word	0x01c601ac
1a000648:	020701f0 	.word	0x020701f0
1a00064c:	00410041 	.word	0x00410041
1a000650:	00410041 	.word	0x00410041
1a000654:	034a0321 	.word	0x034a0321
1a000658:	0377036a 	.word	0x0377036a
1a00065c:	00410041 	.word	0x00410041
1a000660:	03a60394 	.word	0x03a60394
1a000664:	023b0224 	.word	0x023b0224
1a000668:	00790255 	.word	0x00790255
1a00066c:	0274008f 	.word	0x0274008f
1a000670:	029e028b 	.word	0x029e028b
1a000674:	02fd02b8 	.word	0x02fd02b8
			uartConfig(Esp8266DebugUart, Esp8266DebugBaudRate);
1a000678:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a00067c:	2003      	movs	r0, #3
1a00067e:	f004 faef 	bl	1a004c60 <uartInit>
		if(UARTEspInit(&UARTEsp)==false)
1a000682:	4888      	ldr	r0, [pc, #544]	; (1a0008a4 <ExcecuteHttpServerFsm+0x2a4>)
1a000684:	f000 fc24 	bl	1a000ed0 <UARTEspInit>
1a000688:	b148      	cbz	r0, 1a00069e <ExcecuteHttpServerFsm+0x9e>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00068a:	f241 3288 	movw	r2, #5000	; 0x1388
1a00068e:	2300      	movs	r3, #0
1a000690:	4886      	ldr	r0, [pc, #536]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000692:	f004 fd6d 	bl	1a005170 <delayInit>
		SetEsp8622Status(ESP_SEND_AT);
1a000696:	2001      	movs	r0, #1
1a000698:	f7ff fe32 	bl	1a000300 <SetEsp8622Status>
}
1a00069c:	bd10      	pop	{r4, pc}
			stdioPrintf(Esp8266DebugUart, "Error al incializar UART ESP");
1a00069e:	4984      	ldr	r1, [pc, #528]	; (1a0008b0 <ExcecuteHttpServerFsm+0x2b0>)
1a0006a0:	2003      	movs	r0, #3
1a0006a2:	f004 ff03 	bl	1a0054ac <stdioPrintf>
1a0006a6:	e7f0      	b.n	1a00068a <ExcecuteHttpServerFsm+0x8a>
		if (delayRead(&Esp8266Delay))
1a0006a8:	4880      	ldr	r0, [pc, #512]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0006aa:	f004 fd71 	bl	1a005190 <delayRead>
1a0006ae:	2800      	cmp	r0, #0
1a0006b0:	d0f4      	beq.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT\r\n");
1a0006b2:	4980      	ldr	r1, [pc, #512]	; (1a0008b4 <ExcecuteHttpServerFsm+0x2b4>)
1a0006b4:	2005      	movs	r0, #5
1a0006b6:	f004 fef9 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a0006ba:	4b7f      	ldr	r3, [pc, #508]	; (1a0008b8 <ExcecuteHttpServerFsm+0x2b8>)
1a0006bc:	4a7f      	ldr	r2, [pc, #508]	; (1a0008bc <ExcecuteHttpServerFsm+0x2bc>)
1a0006be:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0006c0:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006c4:	2300      	movs	r3, #0
1a0006c6:	4879      	ldr	r0, [pc, #484]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0006c8:	f004 fd52 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_AT);
1a0006cc:	2002      	movs	r0, #2
1a0006ce:	f7ff fe17 	bl	1a000300 <SetEsp8622Status>
1a0006d2:	e7e3      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a0006d4:	f7ff fe1a 	bl	1a00030c <IsWaitedResponse>
1a0006d8:	b970      	cbnz	r0, 1a0006f8 <ExcecuteHttpServerFsm+0xf8>
		if (delayRead(&Esp8266Delay))
1a0006da:	4874      	ldr	r0, [pc, #464]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0006dc:	f004 fd58 	bl	1a005190 <delayRead>
1a0006e0:	2800      	cmp	r0, #0
1a0006e2:	d0db      	beq.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0006e4:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006e8:	2300      	movs	r3, #0
1a0006ea:	4870      	ldr	r0, [pc, #448]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0006ec:	f004 fd40 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0006f0:	2001      	movs	r0, #1
1a0006f2:	f7ff fe05 	bl	1a000300 <SetEsp8622Status>
1a0006f6:	e7d1      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0006f8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006fc:	2300      	movs	r3, #0
1a0006fe:	486b      	ldr	r0, [pc, #428]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000700:	f004 fd36 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a000704:	2028      	movs	r0, #40	; 0x28
1a000706:	f7ff fdfb 	bl	1a000300 <SetEsp8622Status>
1a00070a:	e7e6      	b.n	1a0006da <ExcecuteHttpServerFsm+0xda>
		if (delayRead(&Esp8266Delay))
1a00070c:	4867      	ldr	r0, [pc, #412]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a00070e:	f004 fd3f 	bl	1a005190 <delayRead>
1a000712:	2800      	cmp	r0, #0
1a000714:	d0c2      	beq.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000716:	496a      	ldr	r1, [pc, #424]	; (1a0008c0 <ExcecuteHttpServerFsm+0x2c0>)
1a000718:	2005      	movs	r0, #5
1a00071a:	f004 fec7 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00071e:	4b66      	ldr	r3, [pc, #408]	; (1a0008b8 <ExcecuteHttpServerFsm+0x2b8>)
1a000720:	4a66      	ldr	r2, [pc, #408]	; (1a0008bc <ExcecuteHttpServerFsm+0x2bc>)
1a000722:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000724:	f241 3288 	movw	r2, #5000	; 0x1388
1a000728:	2300      	movs	r3, #0
1a00072a:	4860      	ldr	r0, [pc, #384]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a00072c:	f004 fd20 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWMODE);
1a000730:	2029      	movs	r0, #41	; 0x29
1a000732:	f7ff fde5 	bl	1a000300 <SetEsp8622Status>
1a000736:	e7b1      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000738:	f7ff fde8 	bl	1a00030c <IsWaitedResponse>
1a00073c:	b970      	cbnz	r0, 1a00075c <ExcecuteHttpServerFsm+0x15c>
		if (delayRead(&Esp8266Delay))
1a00073e:	485b      	ldr	r0, [pc, #364]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000740:	f004 fd26 	bl	1a005190 <delayRead>
1a000744:	2800      	cmp	r0, #0
1a000746:	d0a9      	beq.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000748:	f241 3288 	movw	r2, #5000	; 0x1388
1a00074c:	2300      	movs	r3, #0
1a00074e:	4857      	ldr	r0, [pc, #348]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000750:	f004 fd0e 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a000754:	2028      	movs	r0, #40	; 0x28
1a000756:	f7ff fdd3 	bl	1a000300 <SetEsp8622Status>
1a00075a:	e79f      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00075c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000760:	2300      	movs	r3, #0
1a000762:	4852      	ldr	r0, [pc, #328]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000764:	f004 fd04 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CWJAP_CONS);
1a000768:	2003      	movs	r0, #3
1a00076a:	f7ff fdc9 	bl	1a000300 <SetEsp8622Status>
1a00076e:	e7e6      	b.n	1a00073e <ExcecuteHttpServerFsm+0x13e>
		if (delayRead(&Esp8266Delay))
1a000770:	484e      	ldr	r0, [pc, #312]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000772:	f004 fd0d 	bl	1a005190 <delayRead>
1a000776:	2800      	cmp	r0, #0
1a000778:	d090      	beq.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWJAP?\r\n");
1a00077a:	4952      	ldr	r1, [pc, #328]	; (1a0008c4 <ExcecuteHttpServerFsm+0x2c4>)
1a00077c:	2005      	movs	r0, #5
1a00077e:	f004 fe95 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_OK;
1a000782:	4b4d      	ldr	r3, [pc, #308]	; (1a0008b8 <ExcecuteHttpServerFsm+0x2b8>)
1a000784:	4a50      	ldr	r2, [pc, #320]	; (1a0008c8 <ExcecuteHttpServerFsm+0x2c8>)
1a000786:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000788:	f241 3288 	movw	r2, #5000	; 0x1388
1a00078c:	2300      	movs	r3, #0
1a00078e:	4847      	ldr	r0, [pc, #284]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000790:	f004 fcee 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_1);
1a000794:	2004      	movs	r0, #4
1a000796:	f7ff fdb3 	bl	1a000300 <SetEsp8622Status>
1a00079a:	e77f      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a00079c:	f7ff fdb6 	bl	1a00030c <IsWaitedResponse>
1a0007a0:	b978      	cbnz	r0, 1a0007c2 <ExcecuteHttpServerFsm+0x1c2>
		if (delayRead(&Esp8266Delay))
1a0007a2:	4842      	ldr	r0, [pc, #264]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0007a4:	f004 fcf4 	bl	1a005190 <delayRead>
1a0007a8:	2800      	cmp	r0, #0
1a0007aa:	f43f af77 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007ae:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007b2:	2300      	movs	r3, #0
1a0007b4:	483d      	ldr	r0, [pc, #244]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0007b6:	f004 fcdb 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE_SET);
1a0007ba:	2006      	movs	r0, #6
1a0007bc:	f7ff fda0 	bl	1a000300 <SetEsp8622Status>
1a0007c0:	e76c      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_OK;
1a0007c2:	4b3d      	ldr	r3, [pc, #244]	; (1a0008b8 <ExcecuteHttpServerFsm+0x2b8>)
1a0007c4:	4a3d      	ldr	r2, [pc, #244]	; (1a0008bc <ExcecuteHttpServerFsm+0x2bc>)
1a0007c6:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_2);
1a0007c8:	2005      	movs	r0, #5
1a0007ca:	f7ff fd99 	bl	1a000300 <SetEsp8622Status>
1a0007ce:	e7e8      	b.n	1a0007a2 <ExcecuteHttpServerFsm+0x1a2>
		if (IsWaitedResponse())
1a0007d0:	f7ff fd9c 	bl	1a00030c <IsWaitedResponse>
1a0007d4:	b978      	cbnz	r0, 1a0007f6 <ExcecuteHttpServerFsm+0x1f6>
		if (delayRead(&Esp8266Delay))
1a0007d6:	4835      	ldr	r0, [pc, #212]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0007d8:	f004 fcda 	bl	1a005190 <delayRead>
1a0007dc:	2800      	cmp	r0, #0
1a0007de:	f43f af5d 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007e2:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007e6:	2300      	movs	r3, #0
1a0007e8:	4830      	ldr	r0, [pc, #192]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0007ea:	f004 fcc1 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0007ee:	2001      	movs	r0, #1
1a0007f0:	f7ff fd86 	bl	1a000300 <SetEsp8622Status>
1a0007f4:	e752      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007f6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007fa:	2300      	movs	r3, #0
1a0007fc:	482b      	ldr	r0, [pc, #172]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a0007fe:	f004 fcb7 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a000802:	2015      	movs	r0, #21
1a000804:	f7ff fd7c 	bl	1a000300 <SetEsp8622Status>
1a000808:	e7e5      	b.n	1a0007d6 <ExcecuteHttpServerFsm+0x1d6>
		if (delayRead(&Esp8266Delay))
1a00080a:	4828      	ldr	r0, [pc, #160]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a00080c:	f004 fcc0 	bl	1a005190 <delayRead>
1a000810:	2800      	cmp	r0, #0
1a000812:	f43f af43 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000816:	492a      	ldr	r1, [pc, #168]	; (1a0008c0 <ExcecuteHttpServerFsm+0x2c0>)
1a000818:	2005      	movs	r0, #5
1a00081a:	f004 fe47 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00081e:	4b26      	ldr	r3, [pc, #152]	; (1a0008b8 <ExcecuteHttpServerFsm+0x2b8>)
1a000820:	4a26      	ldr	r2, [pc, #152]	; (1a0008bc <ExcecuteHttpServerFsm+0x2bc>)
1a000822:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000824:	f241 3288 	movw	r2, #5000	; 0x1388
1a000828:	2300      	movs	r3, #0
1a00082a:	4820      	ldr	r0, [pc, #128]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a00082c:	f004 fca0 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWMODE_SET);
1a000830:	2007      	movs	r0, #7
1a000832:	f7ff fd65 	bl	1a000300 <SetEsp8622Status>
1a000836:	e731      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000838:	f7ff fd68 	bl	1a00030c <IsWaitedResponse>
1a00083c:	b978      	cbnz	r0, 1a00085e <ExcecuteHttpServerFsm+0x25e>
		if (delayRead(&Esp8266Delay))
1a00083e:	481b      	ldr	r0, [pc, #108]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000840:	f004 fca6 	bl	1a005190 <delayRead>
1a000844:	2800      	cmp	r0, #0
1a000846:	f43f af29 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00084a:	f241 3288 	movw	r2, #5000	; 0x1388
1a00084e:	2300      	movs	r3, #0
1a000850:	4816      	ldr	r0, [pc, #88]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000852:	f004 fc8d 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000856:	2001      	movs	r0, #1
1a000858:	f7ff fd52 	bl	1a000300 <SetEsp8622Status>
1a00085c:	e71e      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00085e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000862:	2300      	movs	r3, #0
1a000864:	4811      	ldr	r0, [pc, #68]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000866:	f004 fc83 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CWJAP_SET);
1a00086a:	2008      	movs	r0, #8
1a00086c:	f7ff fd48 	bl	1a000300 <SetEsp8622Status>
1a000870:	e7e5      	b.n	1a00083e <ExcecuteHttpServerFsm+0x23e>
		if (delayRead(&Esp8266Delay))
1a000872:	480e      	ldr	r0, [pc, #56]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000874:	f004 fc8c 	bl	1a005190 <delayRead>
1a000878:	2800      	cmp	r0, #0
1a00087a:	f43f af0f 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWJAP=\"%s\",\"%s\"", WifiName,
1a00087e:	4b13      	ldr	r3, [pc, #76]	; (1a0008cc <ExcecuteHttpServerFsm+0x2cc>)
1a000880:	4a13      	ldr	r2, [pc, #76]	; (1a0008d0 <ExcecuteHttpServerFsm+0x2d0>)
1a000882:	4914      	ldr	r1, [pc, #80]	; (1a0008d4 <ExcecuteHttpServerFsm+0x2d4>)
1a000884:	2005      	movs	r0, #5
1a000886:	f004 fe11 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_1;
1a00088a:	4b0b      	ldr	r3, [pc, #44]	; (1a0008b8 <ExcecuteHttpServerFsm+0x2b8>)
1a00088c:	4a12      	ldr	r2, [pc, #72]	; (1a0008d8 <ExcecuteHttpServerFsm+0x2d8>)
1a00088e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000890:	f241 3288 	movw	r2, #5000	; 0x1388
1a000894:	2300      	movs	r3, #0
1a000896:	4805      	ldr	r0, [pc, #20]	; (1a0008ac <ExcecuteHttpServerFsm+0x2ac>)
1a000898:	f004 fc6a 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_1);
1a00089c:	2009      	movs	r0, #9
1a00089e:	f7ff fd2f 	bl	1a000300 <SetEsp8622Status>
1a0008a2:	e6fb      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
1a0008a4:	10001950 	.word	0x10001950
1a0008a8:	10001944 	.word	0x10001944
1a0008ac:	10001928 	.word	0x10001928
1a0008b0:	1a0067d0 	.word	0x1a0067d0
1a0008b4:	1a0067f0 	.word	0x1a0067f0
1a0008b8:	10001940 	.word	0x10001940
1a0008bc:	1a00692c 	.word	0x1a00692c
1a0008c0:	1a0067f8 	.word	0x1a0067f8
1a0008c4:	1a006808 	.word	0x1a006808
1a0008c8:	1a00691c 	.word	0x1a00691c
1a0008cc:	10001994 	.word	0x10001994
1a0008d0:	10001974 	.word	0x10001974
1a0008d4:	1a006814 	.word	0x1a006814
1a0008d8:	1a006900 	.word	0x1a006900
		if (IsWaitedResponse())
1a0008dc:	f7ff fd16 	bl	1a00030c <IsWaitedResponse>
1a0008e0:	b978      	cbnz	r0, 1a000902 <ExcecuteHttpServerFsm+0x302>
		if (delayRead(&Esp8266Delay))
1a0008e2:	48b5      	ldr	r0, [pc, #724]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a0008e4:	f004 fc54 	bl	1a005190 <delayRead>
1a0008e8:	2800      	cmp	r0, #0
1a0008ea:	f43f aed7 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0008ee:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008f2:	2300      	movs	r3, #0
1a0008f4:	48b0      	ldr	r0, [pc, #704]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a0008f6:	f004 fc3b 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0008fa:	2001      	movs	r0, #1
1a0008fc:	f7ff fd00 	bl	1a000300 <SetEsp8622Status>
1a000900:	e6cc      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_CWJAP_2;
1a000902:	4bae      	ldr	r3, [pc, #696]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000904:	4aae      	ldr	r2, [pc, #696]	; (1a000bc0 <ExcecuteHttpServerFsm+0x5c0>)
1a000906:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_2);
1a000908:	200a      	movs	r0, #10
1a00090a:	f7ff fcf9 	bl	1a000300 <SetEsp8622Status>
1a00090e:	e7e8      	b.n	1a0008e2 <ExcecuteHttpServerFsm+0x2e2>
		if (IsWaitedResponse())
1a000910:	f7ff fcfc 	bl	1a00030c <IsWaitedResponse>
1a000914:	b978      	cbnz	r0, 1a000936 <ExcecuteHttpServerFsm+0x336>
		if (delayRead(&Esp8266Delay))
1a000916:	48a8      	ldr	r0, [pc, #672]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000918:	f004 fc3a 	bl	1a005190 <delayRead>
1a00091c:	2800      	cmp	r0, #0
1a00091e:	f43f aebd 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000922:	f241 3288 	movw	r2, #5000	; 0x1388
1a000926:	2300      	movs	r3, #0
1a000928:	48a3      	ldr	r0, [pc, #652]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a00092a:	f004 fc21 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a00092e:	2001      	movs	r0, #1
1a000930:	f7ff fce6 	bl	1a000300 <SetEsp8622Status>
1a000934:	e6b2      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_OK;
1a000936:	4ba1      	ldr	r3, [pc, #644]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000938:	4aa2      	ldr	r2, [pc, #648]	; (1a000bc4 <ExcecuteHttpServerFsm+0x5c4>)
1a00093a:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_3);
1a00093c:	200b      	movs	r0, #11
1a00093e:	f7ff fcdf 	bl	1a000300 <SetEsp8622Status>
1a000942:	e7e8      	b.n	1a000916 <ExcecuteHttpServerFsm+0x316>
		if (IsWaitedResponse())
1a000944:	f7ff fce2 	bl	1a00030c <IsWaitedResponse>
1a000948:	b978      	cbnz	r0, 1a00096a <ExcecuteHttpServerFsm+0x36a>
		if (delayRead(&Esp8266Delay))
1a00094a:	489b      	ldr	r0, [pc, #620]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a00094c:	f004 fc20 	bl	1a005190 <delayRead>
1a000950:	2800      	cmp	r0, #0
1a000952:	f43f aea3 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000956:	f241 3288 	movw	r2, #5000	; 0x1388
1a00095a:	2300      	movs	r3, #0
1a00095c:	4896      	ldr	r0, [pc, #600]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a00095e:	f004 fc07 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000962:	2001      	movs	r0, #1
1a000964:	f7ff fccc 	bl	1a000300 <SetEsp8622Status>
1a000968:	e698      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a00096a:	2015      	movs	r0, #21
1a00096c:	f7ff fcc8 	bl	1a000300 <SetEsp8622Status>
1a000970:	e7eb      	b.n	1a00094a <ExcecuteHttpServerFsm+0x34a>
		if (delayRead(&Esp8266Delay))
1a000972:	4891      	ldr	r0, [pc, #580]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000974:	f004 fc0c 	bl	1a005190 <delayRead>
1a000978:	2800      	cmp	r0, #0
1a00097a:	f43f ae8f 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CIPMUX=1\r\n");
1a00097e:	4992      	ldr	r1, [pc, #584]	; (1a000bc8 <ExcecuteHttpServerFsm+0x5c8>)
1a000980:	2005      	movs	r0, #5
1a000982:	f004 fd93 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000986:	4b8d      	ldr	r3, [pc, #564]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000988:	4a8e      	ldr	r2, [pc, #568]	; (1a000bc4 <ExcecuteHttpServerFsm+0x5c4>)
1a00098a:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a00098c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000990:	2300      	movs	r3, #0
1a000992:	4889      	ldr	r0, [pc, #548]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000994:	f004 fbec 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPMUX);
1a000998:	2016      	movs	r0, #22
1a00099a:	f7ff fcb1 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a00099e:	4b8b      	ldr	r3, [pc, #556]	; (1a000bcc <ExcecuteHttpServerFsm+0x5cc>)
1a0009a0:	2200      	movs	r2, #0
1a0009a2:	701a      	strb	r2, [r3, #0]
1a0009a4:	e67a      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a0009a6:	f7ff fcb1 	bl	1a00030c <IsWaitedResponse>
1a0009aa:	b9e0      	cbnz	r0, 1a0009e6 <ExcecuteHttpServerFsm+0x3e6>
		if (delayRead(&Esp8266Delay))
1a0009ac:	4882      	ldr	r0, [pc, #520]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a0009ae:	f004 fbef 	bl	1a005190 <delayRead>
1a0009b2:	2800      	cmp	r0, #0
1a0009b4:	f43f ae72 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009b8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009bc:	2300      	movs	r3, #0
1a0009be:	487e      	ldr	r0, [pc, #504]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a0009c0:	f004 fbd6 	bl	1a005170 <delayInit>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%d\r\n", auxIndex);
1a0009c4:	4c81      	ldr	r4, [pc, #516]	; (1a000bcc <ExcecuteHttpServerFsm+0x5cc>)
1a0009c6:	7822      	ldrb	r2, [r4, #0]
1a0009c8:	4981      	ldr	r1, [pc, #516]	; (1a000bd0 <ExcecuteHttpServerFsm+0x5d0>)
1a0009ca:	2005      	movs	r0, #5
1a0009cc:	f004 fd6e 	bl	1a0054ac <stdioPrintf>
			if (++auxIndex >= 4)
1a0009d0:	7823      	ldrb	r3, [r4, #0]
1a0009d2:	3301      	adds	r3, #1
1a0009d4:	b2db      	uxtb	r3, r3
1a0009d6:	7023      	strb	r3, [r4, #0]
1a0009d8:	2b03      	cmp	r3, #3
1a0009da:	f67f ae5f 	bls.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
				SetEsp8622Status(ESP_CIPMUX_SEND);
1a0009de:	2015      	movs	r0, #21
1a0009e0:	f7ff fc8e 	bl	1a000300 <SetEsp8622Status>
1a0009e4:	e65a      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009e6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009ea:	2300      	movs	r3, #0
1a0009ec:	4872      	ldr	r0, [pc, #456]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a0009ee:	f004 fbbf 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPSERVER);
1a0009f2:	2017      	movs	r0, #23
1a0009f4:	f7ff fc84 	bl	1a000300 <SetEsp8622Status>
1a0009f8:	e7d8      	b.n	1a0009ac <ExcecuteHttpServerFsm+0x3ac>
		if (delayRead(&Esp8266Delay))
1a0009fa:	486f      	ldr	r0, [pc, #444]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a0009fc:	f004 fbc8 	bl	1a005190 <delayRead>
1a000a00:	2800      	cmp	r0, #0
1a000a02:	f43f ae4b 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CIPSERVER=1,80\r\n");
1a000a06:	4973      	ldr	r1, [pc, #460]	; (1a000bd4 <ExcecuteHttpServerFsm+0x5d4>)
1a000a08:	2005      	movs	r0, #5
1a000a0a:	f004 fd4f 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000a0e:	4b6b      	ldr	r3, [pc, #428]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000a10:	4a6c      	ldr	r2, [pc, #432]	; (1a000bc4 <ExcecuteHttpServerFsm+0x5c4>)
1a000a12:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000a14:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a18:	2300      	movs	r3, #0
1a000a1a:	4867      	ldr	r0, [pc, #412]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a1c:	f004 fba8 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPSERVER);
1a000a20:	2018      	movs	r0, #24
1a000a22:	f7ff fc6d 	bl	1a000300 <SetEsp8622Status>
1a000a26:	e639      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000a28:	f7ff fc70 	bl	1a00030c <IsWaitedResponse>
1a000a2c:	b978      	cbnz	r0, 1a000a4e <ExcecuteHttpServerFsm+0x44e>
		if (delayRead(&Esp8266Delay))
1a000a2e:	4862      	ldr	r0, [pc, #392]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a30:	f004 fbae 	bl	1a005190 <delayRead>
1a000a34:	2800      	cmp	r0, #0
1a000a36:	f43f ae31 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a3a:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a3e:	2300      	movs	r3, #0
1a000a40:	485d      	ldr	r0, [pc, #372]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a42:	f004 fb95 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000a46:	2001      	movs	r0, #1
1a000a48:	f7ff fc5a 	bl	1a000300 <SetEsp8622Status>
1a000a4c:	e626      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a4e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a52:	2300      	movs	r3, #0
1a000a54:	4858      	ldr	r0, [pc, #352]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a56:	f004 fb8b 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a000a5a:	2025      	movs	r0, #37	; 0x25
1a000a5c:	f7ff fc50 	bl	1a000300 <SetEsp8622Status>
1a000a60:	e7e5      	b.n	1a000a2e <ExcecuteHttpServerFsm+0x42e>
		if (delayRead(&Esp8266Delay))
1a000a62:	4855      	ldr	r0, [pc, #340]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a64:	f004 fb94 	bl	1a005190 <delayRead>
1a000a68:	2800      	cmp	r0, #0
1a000a6a:	f43f ae17 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CIFSR\r\n");
1a000a6e:	495a      	ldr	r1, [pc, #360]	; (1a000bd8 <ExcecuteHttpServerFsm+0x5d8>)
1a000a70:	2005      	movs	r0, #5
1a000a72:	f004 fd1b 	bl	1a0054ac <stdioPrintf>
			Esp8266ResponseToWait = Response_CIFSR;
1a000a76:	4b51      	ldr	r3, [pc, #324]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000a78:	4a58      	ldr	r2, [pc, #352]	; (1a000bdc <ExcecuteHttpServerFsm+0x5dc>)
1a000a7a:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a7c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a80:	2300      	movs	r3, #0
1a000a82:	484d      	ldr	r0, [pc, #308]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a84:	f004 fb74 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIFSR);
1a000a88:	2026      	movs	r0, #38	; 0x26
1a000a8a:	f7ff fc39 	bl	1a000300 <SetEsp8622Status>
1a000a8e:	e605      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000a90:	f7ff fc3c 	bl	1a00030c <IsWaitedResponse>
1a000a94:	b978      	cbnz	r0, 1a000ab6 <ExcecuteHttpServerFsm+0x4b6>
		if (delayRead(&Esp8266Delay))
1a000a96:	4848      	ldr	r0, [pc, #288]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000a98:	f004 fb7a 	bl	1a005190 <delayRead>
1a000a9c:	2800      	cmp	r0, #0
1a000a9e:	f43f adfd 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000aa2:	f241 3288 	movw	r2, #5000	; 0x1388
1a000aa6:	2300      	movs	r3, #0
1a000aa8:	4843      	ldr	r0, [pc, #268]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000aaa:	f004 fb61 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a000aae:	2025      	movs	r0, #37	; 0x25
1a000ab0:	f7ff fc26 	bl	1a000300 <SetEsp8622Status>
1a000ab4:	e5f2      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_LOAD_IP);
1a000ab6:	2027      	movs	r0, #39	; 0x27
1a000ab8:	f7ff fc22 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a000abc:	4b43      	ldr	r3, [pc, #268]	; (1a000bcc <ExcecuteHttpServerFsm+0x5cc>)
1a000abe:	2200      	movs	r2, #0
1a000ac0:	701a      	strb	r2, [r3, #0]
1a000ac2:	e7e8      	b.n	1a000a96 <ExcecuteHttpServerFsm+0x496>
		if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000ac4:	220a      	movs	r2, #10
1a000ac6:	4946      	ldr	r1, [pc, #280]	; (1a000be0 <ExcecuteHttpServerFsm+0x5e0>)
1a000ac8:	4846      	ldr	r0, [pc, #280]	; (1a000be4 <ExcecuteHttpServerFsm+0x5e4>)
1a000aca:	f000 fa29 	bl	1a000f20 <receiveEspByte>
1a000ace:	2800      	cmp	r0, #0
1a000ad0:	f43f ade4 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			if (byteReceived != '"')
1a000ad4:	4b42      	ldr	r3, [pc, #264]	; (1a000be0 <ExcecuteHttpServerFsm+0x5e0>)
1a000ad6:	781a      	ldrb	r2, [r3, #0]
1a000ad8:	2a22      	cmp	r2, #34	; 0x22
1a000ada:	d006      	beq.n	1a000aea <ExcecuteHttpServerFsm+0x4ea>
				WifiIp[auxIndex] = byteReceived;
1a000adc:	493b      	ldr	r1, [pc, #236]	; (1a000bcc <ExcecuteHttpServerFsm+0x5cc>)
1a000ade:	780b      	ldrb	r3, [r1, #0]
1a000ae0:	4841      	ldr	r0, [pc, #260]	; (1a000be8 <ExcecuteHttpServerFsm+0x5e8>)
1a000ae2:	54c2      	strb	r2, [r0, r3]
				auxIndex++;
1a000ae4:	3301      	adds	r3, #1
1a000ae6:	700b      	strb	r3, [r1, #0]
1a000ae8:	e5d8      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
				WifiIp[auxIndex] = '\0';
1a000aea:	4b38      	ldr	r3, [pc, #224]	; (1a000bcc <ExcecuteHttpServerFsm+0x5cc>)
1a000aec:	781b      	ldrb	r3, [r3, #0]
1a000aee:	4a3e      	ldr	r2, [pc, #248]	; (1a000be8 <ExcecuteHttpServerFsm+0x5e8>)
1a000af0:	2100      	movs	r1, #0
1a000af2:	54d1      	strb	r1, [r2, r3]
				Esp8266ResponseToWait = Response_IPD;
1a000af4:	4b31      	ldr	r3, [pc, #196]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000af6:	4a3d      	ldr	r2, [pc, #244]	; (1a000bec <ExcecuteHttpServerFsm+0x5ec>)
1a000af8:	601a      	str	r2, [r3, #0]
				SetEsp8622Status(ESP_WAIT_IPD);
1a000afa:	202a      	movs	r0, #42	; 0x2a
1a000afc:	f7ff fc00 	bl	1a000300 <SetEsp8622Status>
1a000b00:	e5cc      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000b02:	f7ff fc03 	bl	1a00030c <IsWaitedResponse>
1a000b06:	b978      	cbnz	r0, 1a000b28 <ExcecuteHttpServerFsm+0x528>
		if (delayRead(&Esp8266Delay))
1a000b08:	482b      	ldr	r0, [pc, #172]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000b0a:	f004 fb41 	bl	1a005190 <delayRead>
1a000b0e:	2800      	cmp	r0, #0
1a000b10:	f43f adc4 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b14:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b18:	2300      	movs	r3, #0
1a000b1a:	4827      	ldr	r0, [pc, #156]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000b1c:	f004 fb28 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a000b20:	202a      	movs	r0, #42	; 0x2a
1a000b22:	f7ff fbed 	bl	1a000300 <SetEsp8622Status>
1a000b26:	e5b9      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_GET_REQUEST_ID);
1a000b28:	202b      	movs	r0, #43	; 0x2b
1a000b2a:	f7ff fbe9 	bl	1a000300 <SetEsp8622Status>
1a000b2e:	e7eb      	b.n	1a000b08 <ExcecuteHttpServerFsm+0x508>
		if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000b30:	220a      	movs	r2, #10
1a000b32:	492b      	ldr	r1, [pc, #172]	; (1a000be0 <ExcecuteHttpServerFsm+0x5e0>)
1a000b34:	482b      	ldr	r0, [pc, #172]	; (1a000be4 <ExcecuteHttpServerFsm+0x5e4>)
1a000b36:	f000 f9f3 	bl	1a000f20 <receiveEspByte>
1a000b3a:	2800      	cmp	r0, #0
1a000b3c:	f43f adae 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			CurrentConnectionId = byteReceived;
1a000b40:	4b27      	ldr	r3, [pc, #156]	; (1a000be0 <ExcecuteHttpServerFsm+0x5e0>)
1a000b42:	781a      	ldrb	r2, [r3, #0]
1a000b44:	4b2a      	ldr	r3, [pc, #168]	; (1a000bf0 <ExcecuteHttpServerFsm+0x5f0>)
1a000b46:	701a      	strb	r2, [r3, #0]
			Esp8266ResponseToWait = Response_COMMA;
1a000b48:	4b1c      	ldr	r3, [pc, #112]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000b4a:	4a2a      	ldr	r2, [pc, #168]	; (1a000bf4 <ExcecuteHttpServerFsm+0x5f4>)
1a000b4c:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_COMMA);
1a000b4e:	202c      	movs	r0, #44	; 0x2c
1a000b50:	f7ff fbd6 	bl	1a000300 <SetEsp8622Status>
1a000b54:	e5a2      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000b56:	f7ff fbd9 	bl	1a00030c <IsWaitedResponse>
1a000b5a:	b990      	cbnz	r0, 1a000b82 <ExcecuteHttpServerFsm+0x582>
		if (delayRead(&Esp8266Delay))
1a000b5c:	4816      	ldr	r0, [pc, #88]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000b5e:	f004 fb17 	bl	1a005190 <delayRead>
1a000b62:	2800      	cmp	r0, #0
1a000b64:	f43f ad9a 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_IPD;
1a000b68:	4b14      	ldr	r3, [pc, #80]	; (1a000bbc <ExcecuteHttpServerFsm+0x5bc>)
1a000b6a:	4a20      	ldr	r2, [pc, #128]	; (1a000bec <ExcecuteHttpServerFsm+0x5ec>)
1a000b6c:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b6e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b72:	2300      	movs	r3, #0
1a000b74:	4810      	ldr	r0, [pc, #64]	; (1a000bb8 <ExcecuteHttpServerFsm+0x5b8>)
1a000b76:	f004 fafb 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a000b7a:	202a      	movs	r0, #42	; 0x2a
1a000b7c:	f7ff fbc0 	bl	1a000300 <SetEsp8622Status>
1a000b80:	e58c      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_GET_REQUEST_LENGTH);
1a000b82:	202d      	movs	r0, #45	; 0x2d
1a000b84:	f7ff fbbc 	bl	1a000300 <SetEsp8622Status>
1a000b88:	e7e8      	b.n	1a000b5c <ExcecuteHttpServerFsm+0x55c>
		if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000b8a:	220a      	movs	r2, #10
1a000b8c:	4914      	ldr	r1, [pc, #80]	; (1a000be0 <ExcecuteHttpServerFsm+0x5e0>)
1a000b8e:	4815      	ldr	r0, [pc, #84]	; (1a000be4 <ExcecuteHttpServerFsm+0x5e4>)
1a000b90:	f000 f9c6 	bl	1a000f20 <receiveEspByte>
1a000b94:	2800      	cmp	r0, #0
1a000b96:	f43f ad81 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			if (byteReceived != ':'&& byteReceived >= '0' && byteReceived <= '9')
1a000b9a:	4b11      	ldr	r3, [pc, #68]	; (1a000be0 <ExcecuteHttpServerFsm+0x5e0>)
1a000b9c:	781b      	ldrb	r3, [r3, #0]
1a000b9e:	2b3a      	cmp	r3, #58	; 0x3a
1a000ba0:	d003      	beq.n	1a000baa <ExcecuteHttpServerFsm+0x5aa>
1a000ba2:	2b2f      	cmp	r3, #47	; 0x2f
1a000ba4:	d901      	bls.n	1a000baa <ExcecuteHttpServerFsm+0x5aa>
1a000ba6:	2b39      	cmp	r3, #57	; 0x39
1a000ba8:	d928      	bls.n	1a000bfc <ExcecuteHttpServerFsm+0x5fc>
				i=0; //reinicio el indice del request
1a000baa:	4b13      	ldr	r3, [pc, #76]	; (1a000bf8 <ExcecuteHttpServerFsm+0x5f8>)
1a000bac:	2200      	movs	r2, #0
1a000bae:	801a      	strh	r2, [r3, #0]
				SetEsp8622Status(ESP_GET_REQUEST);
1a000bb0:	202e      	movs	r0, #46	; 0x2e
1a000bb2:	f7ff fba5 	bl	1a000300 <SetEsp8622Status>
1a000bb6:	e571      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
1a000bb8:	10001928 	.word	0x10001928
1a000bbc:	10001940 	.word	0x10001940
1a000bc0:	1a006910 	.word	0x1a006910
1a000bc4:	1a00692c 	.word	0x1a00692c
1a000bc8:	1a006828 	.word	0x1a006828
1a000bcc:	100019b2 	.word	0x100019b2
1a000bd0:	1a006838 	.word	0x1a006838
1a000bd4:	1a00684c 	.word	0x1a00684c
1a000bd8:	1a006860 	.word	0x1a006860
1a000bdc:	1a0068ec 	.word	0x1a0068ec
1a000be0:	100019b8 	.word	0x100019b8
1a000be4:	10001950 	.word	0x10001950
1a000be8:	10001960 	.word	0x10001960
1a000bec:	1a006924 	.word	0x1a006924
1a000bf0:	10001920 	.word	0x10001920
1a000bf4:	1a0068fc 	.word	0x1a0068fc
1a000bf8:	100019ba 	.word	0x100019ba
						+ (byteReceived - '0'); //guardo el valor de la longituda de la request.
1a000bfc:	496b      	ldr	r1, [pc, #428]	; (1a000dac <ExcecuteHttpServerFsm+0x7ac>)
1a000bfe:	780a      	ldrb	r2, [r1, #0]
1a000c00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000c04:	0050      	lsls	r0, r2, #1
1a000c06:	4403      	add	r3, r0
1a000c08:	3b30      	subs	r3, #48	; 0x30
				CurrentReqLength = (CurrentReqLength * 10)
1a000c0a:	700b      	strb	r3, [r1, #0]
				SetEsp8622Status(ESP_GET_REQUEST_LENGTH);
1a000c0c:	202d      	movs	r0, #45	; 0x2d
1a000c0e:	f7ff fb77 	bl	1a000300 <SetEsp8622Status>
1a000c12:	e543      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000c14:	220a      	movs	r2, #10
1a000c16:	4966      	ldr	r1, [pc, #408]	; (1a000db0 <ExcecuteHttpServerFsm+0x7b0>)
1a000c18:	4866      	ldr	r0, [pc, #408]	; (1a000db4 <ExcecuteHttpServerFsm+0x7b4>)
1a000c1a:	f000 f981 	bl	1a000f20 <receiveEspByte>
1a000c1e:	2800      	cmp	r0, #0
1a000c20:	f43f ad3c 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
				if (byteReceived != 0x0D && byteReceived != 0x0A ) //si es distinto de CR o LF (enter)
1a000c24:	4b62      	ldr	r3, [pc, #392]	; (1a000db0 <ExcecuteHttpServerFsm+0x7b0>)
1a000c26:	781b      	ldrb	r3, [r3, #0]
1a000c28:	2b0d      	cmp	r3, #13
1a000c2a:	d001      	beq.n	1a000c30 <ExcecuteHttpServerFsm+0x630>
1a000c2c:	2b0a      	cmp	r3, #10
1a000c2e:	d10b      	bne.n	1a000c48 <ExcecuteHttpServerFsm+0x648>
					rawRequest[i]=0;
1a000c30:	4b61      	ldr	r3, [pc, #388]	; (1a000db8 <ExcecuteHttpServerFsm+0x7b8>)
1a000c32:	8819      	ldrh	r1, [r3, #0]
1a000c34:	4861      	ldr	r0, [pc, #388]	; (1a000dbc <ExcecuteHttpServerFsm+0x7bc>)
1a000c36:	2300      	movs	r3, #0
1a000c38:	5443      	strb	r3, [r0, r1]
					requestCallback(rawRequest, i); //envio al callback del request la request completa (GET + algo) y el tamaño de la request
1a000c3a:	b2c9      	uxtb	r1, r1
1a000c3c:	f7ff fbca 	bl	1a0003d4 <requestCallback>
					SetEsp8622Status(ESP_SEND_CIPSEND);
1a000c40:	201d      	movs	r0, #29
1a000c42:	f7ff fb5d 	bl	1a000300 <SetEsp8622Status>
1a000c46:	e529      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
					rawRequest[i]=byteReceived;
1a000c48:	495b      	ldr	r1, [pc, #364]	; (1a000db8 <ExcecuteHttpServerFsm+0x7b8>)
1a000c4a:	880a      	ldrh	r2, [r1, #0]
1a000c4c:	485b      	ldr	r0, [pc, #364]	; (1a000dbc <ExcecuteHttpServerFsm+0x7bc>)
1a000c4e:	5483      	strb	r3, [r0, r2]
					i++;
1a000c50:	3201      	adds	r2, #1
1a000c52:	800a      	strh	r2, [r1, #0]
					SetEsp8622Status(ESP_GET_REQUEST);
1a000c54:	202e      	movs	r0, #46	; 0x2e
1a000c56:	f7ff fb53 	bl	1a000300 <SetEsp8622Status>
1a000c5a:	e51f      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		lenghtOfHttpLines = (strlen(PointerOfHttpWebPage));
1a000c5c:	4b58      	ldr	r3, [pc, #352]	; (1a000dc0 <ExcecuteHttpServerFsm+0x7c0>)
1a000c5e:	681c      	ldr	r4, [r3, #0]
1a000c60:	4620      	mov	r0, r4
1a000c62:	f005 f94e 	bl	1a005f02 <strlen>
1a000c66:	b283      	uxth	r3, r0
		if (lenghtOfHttpLines >= MAX_HTTP_WEB_LENGHT)
1a000c68:	f240 72fe 	movw	r2, #2046	; 0x7fe
1a000c6c:	4293      	cmp	r3, r2
1a000c6e:	d812      	bhi.n	1a000c96 <ExcecuteHttpServerFsm+0x696>
		stdioPrintf(ESP8266_UART, "AT+CIPSEND=%c,%d\r\n", CurrentConnectionId,
1a000c70:	4a54      	ldr	r2, [pc, #336]	; (1a000dc4 <ExcecuteHttpServerFsm+0x7c4>)
1a000c72:	7812      	ldrb	r2, [r2, #0]
1a000c74:	4954      	ldr	r1, [pc, #336]	; (1a000dc8 <ExcecuteHttpServerFsm+0x7c8>)
1a000c76:	2005      	movs	r0, #5
1a000c78:	f004 fc18 	bl	1a0054ac <stdioPrintf>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c7c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c80:	2300      	movs	r3, #0
1a000c82:	4852      	ldr	r0, [pc, #328]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000c84:	f004 fa74 	bl	1a005170 <delayInit>
		SetEsp8622Status(ESP_WAIT_CIPSEND);
1a000c88:	201e      	movs	r0, #30
1a000c8a:	f7ff fb39 	bl	1a000300 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_OK;
1a000c8e:	4b50      	ldr	r3, [pc, #320]	; (1a000dd0 <ExcecuteHttpServerFsm+0x7d0>)
1a000c90:	4a50      	ldr	r2, [pc, #320]	; (1a000dd4 <ExcecuteHttpServerFsm+0x7d4>)
1a000c92:	601a      	str	r2, [r3, #0]
		break;
1a000c94:	e502      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			stdioSprintf(PointerOfHttpWebPage,
1a000c96:	f240 72ff 	movw	r2, #2047	; 0x7ff
1a000c9a:	494f      	ldr	r1, [pc, #316]	; (1a000dd8 <ExcecuteHttpServerFsm+0x7d8>)
1a000c9c:	4620      	mov	r0, r4
1a000c9e:	f004 fc13 	bl	1a0054c8 <stdioSprintf>
			lenghtOfHttpLines = (strlen(PointerOfHttpWebPage));
1a000ca2:	4b47      	ldr	r3, [pc, #284]	; (1a000dc0 <ExcecuteHttpServerFsm+0x7c0>)
1a000ca4:	6818      	ldr	r0, [r3, #0]
1a000ca6:	f005 f92c 	bl	1a005f02 <strlen>
1a000caa:	b283      	uxth	r3, r0
1a000cac:	e7e0      	b.n	1a000c70 <ExcecuteHttpServerFsm+0x670>
		if (IsWaitedResponse())
1a000cae:	f7ff fb2d 	bl	1a00030c <IsWaitedResponse>
1a000cb2:	b990      	cbnz	r0, 1a000cda <ExcecuteHttpServerFsm+0x6da>
		if (delayRead(&Esp8266Delay))
1a000cb4:	4845      	ldr	r0, [pc, #276]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000cb6:	f004 fa6b 	bl	1a005190 <delayRead>
1a000cba:	2800      	cmp	r0, #0
1a000cbc:	f43f acee 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000cc0:	f241 3288 	movw	r2, #5000	; 0x1388
1a000cc4:	2300      	movs	r3, #0
1a000cc6:	4841      	ldr	r0, [pc, #260]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000cc8:	f004 fa52 	bl	1a005170 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000ccc:	4b40      	ldr	r3, [pc, #256]	; (1a000dd0 <ExcecuteHttpServerFsm+0x7d0>)
1a000cce:	4a43      	ldr	r2, [pc, #268]	; (1a000ddc <ExcecuteHttpServerFsm+0x7dc>)
1a000cd0:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000cd2:	202a      	movs	r0, #42	; 0x2a
1a000cd4:	f7ff fb14 	bl	1a000300 <SetEsp8622Status>
1a000cd8:	e4e0      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000cda:	f241 3288 	movw	r2, #5000	; 0x1388
1a000cde:	2300      	movs	r3, #0
1a000ce0:	483a      	ldr	r0, [pc, #232]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000ce2:	f004 fa45 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_HTTP);
1a000ce6:	201f      	movs	r0, #31
1a000ce8:	f7ff fb0a 	bl	1a000300 <SetEsp8622Status>
1a000cec:	e7e2      	b.n	1a000cb4 <ExcecuteHttpServerFsm+0x6b4>
		stdioPrintf(ESP8266_UART, "%s",PointerOfHttpWebPage);
1a000cee:	4b34      	ldr	r3, [pc, #208]	; (1a000dc0 <ExcecuteHttpServerFsm+0x7c0>)
1a000cf0:	681a      	ldr	r2, [r3, #0]
1a000cf2:	493b      	ldr	r1, [pc, #236]	; (1a000de0 <ExcecuteHttpServerFsm+0x7e0>)
1a000cf4:	2005      	movs	r0, #5
1a000cf6:	f004 fbd9 	bl	1a0054ac <stdioPrintf>
		SetEsp8622Status(ESP_WAIT_HTTP);
1a000cfa:	2020      	movs	r0, #32
1a000cfc:	f7ff fb00 	bl	1a000300 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_SEND_OK;
1a000d00:	4b33      	ldr	r3, [pc, #204]	; (1a000dd0 <ExcecuteHttpServerFsm+0x7d0>)
1a000d02:	4a38      	ldr	r2, [pc, #224]	; (1a000de4 <ExcecuteHttpServerFsm+0x7e4>)
1a000d04:	601a      	str	r2, [r3, #0]
		break;
1a000d06:	e4c9      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000d08:	f7ff fb00 	bl	1a00030c <IsWaitedResponse>
1a000d0c:	b978      	cbnz	r0, 1a000d2e <ExcecuteHttpServerFsm+0x72e>
		if (delayRead(&Esp8266Delay))
1a000d0e:	482f      	ldr	r0, [pc, #188]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d10:	f004 fa3e 	bl	1a005190 <delayRead>
1a000d14:	2800      	cmp	r0, #0
1a000d16:	f43f acc1 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000d1a:	f241 3288 	movw	r2, #5000	; 0x1388
1a000d1e:	2300      	movs	r3, #0
1a000d20:	482a      	ldr	r0, [pc, #168]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d22:	f004 fa25 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPSEND);
1a000d26:	201d      	movs	r0, #29
1a000d28:	f7ff faea 	bl	1a000300 <SetEsp8622Status>
1a000d2c:	e4b6      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000d2e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000d32:	2300      	movs	r3, #0
1a000d34:	4825      	ldr	r0, [pc, #148]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d36:	f004 fa1b 	bl	1a005170 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPCLOSE);
1a000d3a:	2023      	movs	r0, #35	; 0x23
1a000d3c:	f7ff fae0 	bl	1a000300 <SetEsp8622Status>
1a000d40:	e7e5      	b.n	1a000d0e <ExcecuteHttpServerFsm+0x70e>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%c\r\n",
1a000d42:	4b20      	ldr	r3, [pc, #128]	; (1a000dc4 <ExcecuteHttpServerFsm+0x7c4>)
1a000d44:	781a      	ldrb	r2, [r3, #0]
1a000d46:	4928      	ldr	r1, [pc, #160]	; (1a000de8 <ExcecuteHttpServerFsm+0x7e8>)
1a000d48:	2005      	movs	r0, #5
1a000d4a:	f004 fbaf 	bl	1a0054ac <stdioPrintf>
			delayConfig(&Esp8266Delay, 100);
1a000d4e:	2264      	movs	r2, #100	; 0x64
1a000d50:	2300      	movs	r3, #0
1a000d52:	481e      	ldr	r0, [pc, #120]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d54:	f004 fa0c 	bl	1a005170 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000d58:	4b1d      	ldr	r3, [pc, #116]	; (1a000dd0 <ExcecuteHttpServerFsm+0x7d0>)
1a000d5a:	4a20      	ldr	r2, [pc, #128]	; (1a000ddc <ExcecuteHttpServerFsm+0x7dc>)
1a000d5c:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000d5e:	202a      	movs	r0, #42	; 0x2a
1a000d60:	f7ff face 	bl	1a000300 <SetEsp8622Status>
		break;
1a000d64:	e49a      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000d66:	f7ff fad1 	bl	1a00030c <IsWaitedResponse>
1a000d6a:	b990      	cbnz	r0, 1a000d92 <ExcecuteHttpServerFsm+0x792>
		if (delayRead(&Esp8266Delay))
1a000d6c:	4817      	ldr	r0, [pc, #92]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d6e:	f004 fa0f 	bl	1a005190 <delayRead>
1a000d72:	2800      	cmp	r0, #0
1a000d74:	f43f ac92 	beq.w	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000d78:	f241 3288 	movw	r2, #5000	; 0x1388
1a000d7c:	2300      	movs	r3, #0
1a000d7e:	4813      	ldr	r0, [pc, #76]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d80:	f004 f9f6 	bl	1a005170 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000d84:	4b12      	ldr	r3, [pc, #72]	; (1a000dd0 <ExcecuteHttpServerFsm+0x7d0>)
1a000d86:	4a15      	ldr	r2, [pc, #84]	; (1a000ddc <ExcecuteHttpServerFsm+0x7dc>)
1a000d88:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000d8a:	202a      	movs	r0, #42	; 0x2a
1a000d8c:	f7ff fab8 	bl	1a000300 <SetEsp8622Status>
}
1a000d90:	e484      	b.n	1a00069c <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, 1);
1a000d92:	2201      	movs	r2, #1
1a000d94:	2300      	movs	r3, #0
1a000d96:	480d      	ldr	r0, [pc, #52]	; (1a000dcc <ExcecuteHttpServerFsm+0x7cc>)
1a000d98:	f004 f9ea 	bl	1a005170 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000d9c:	4b0c      	ldr	r3, [pc, #48]	; (1a000dd0 <ExcecuteHttpServerFsm+0x7d0>)
1a000d9e:	4a0f      	ldr	r2, [pc, #60]	; (1a000ddc <ExcecuteHttpServerFsm+0x7dc>)
1a000da0:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000da2:	202a      	movs	r0, #42	; 0x2a
1a000da4:	f7ff faac 	bl	1a000300 <SetEsp8622Status>
1a000da8:	e7e0      	b.n	1a000d6c <ExcecuteHttpServerFsm+0x76c>
1a000daa:	bf00      	nop
1a000dac:	10001921 	.word	0x10001921
1a000db0:	100019b8 	.word	0x100019b8
1a000db4:	10001950 	.word	0x10001950
1a000db8:	100019ba 	.word	0x100019ba
1a000dbc:	100019c8 	.word	0x100019c8
1a000dc0:	1000194c 	.word	0x1000194c
1a000dc4:	10001920 	.word	0x10001920
1a000dc8:	1a0068b8 	.word	0x1a0068b8
1a000dcc:	10001928 	.word	0x10001928
1a000dd0:	10001940 	.word	0x10001940
1a000dd4:	1a00692c 	.word	0x1a00692c
1a000dd8:	1a00686c 	.word	0x1a00686c
1a000ddc:	1a006924 	.word	0x1a006924
1a000de0:	1a0068cc 	.word	0x1a0068cc
1a000de4:	1a006930 	.word	0x1a006930
1a000de8:	1a0068d0 	.word	0x1a0068d0

1a000dec <gesp8266InitHttpServer>:
{
1a000dec:	b510      	push	{r4, lr}
	if (!parametersReceived)
1a000dee:	4b0e      	ldr	r3, [pc, #56]	; (1a000e28 <gesp8266InitHttpServer+0x3c>)
1a000df0:	781b      	ldrb	r3, [r3, #0]
1a000df2:	b143      	cbz	r3, 1a000e06 <gesp8266InitHttpServer+0x1a>
	ExcecuteHttpServerFsm();
1a000df4:	f7ff fc04 	bl	1a000600 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_WAIT_IPD); //si llego al estado ESP_WAIT_IPD es porque el modulo ya esta configurado.
1a000df8:	4b0c      	ldr	r3, [pc, #48]	; (1a000e2c <gesp8266InitHttpServer+0x40>)
1a000dfa:	7818      	ldrb	r0, [r3, #0]
}
1a000dfc:	282a      	cmp	r0, #42	; 0x2a
1a000dfe:	bf14      	ite	ne
1a000e00:	2000      	movne	r0, #0
1a000e02:	2001      	moveq	r0, #1
1a000e04:	bd10      	pop	{r4, pc}
1a000e06:	460c      	mov	r4, r1
		strcpy(WifiName, wifiName);
1a000e08:	4601      	mov	r1, r0
1a000e0a:	4809      	ldr	r0, [pc, #36]	; (1a000e30 <gesp8266InitHttpServer+0x44>)
1a000e0c:	f005 f871 	bl	1a005ef2 <strcpy>
		strcpy(WifiPass, wifiPass);
1a000e10:	4621      	mov	r1, r4
1a000e12:	4808      	ldr	r0, [pc, #32]	; (1a000e34 <gesp8266InitHttpServer+0x48>)
1a000e14:	f005 f86d 	bl	1a005ef2 <strcpy>
		SetEsp8622Status(ESP_INIT);
1a000e18:	2000      	movs	r0, #0
1a000e1a:	f7ff fa71 	bl	1a000300 <SetEsp8622Status>
		parametersReceived = TRUE;
1a000e1e:	4b02      	ldr	r3, [pc, #8]	; (1a000e28 <gesp8266InitHttpServer+0x3c>)
1a000e20:	2201      	movs	r2, #1
1a000e22:	701a      	strb	r2, [r3, #0]
1a000e24:	e7e6      	b.n	1a000df4 <gesp8266InitHttpServer+0x8>
1a000e26:	bf00      	nop
1a000e28:	100019c4 	.word	0x100019c4
1a000e2c:	10001944 	.word	0x10001944
1a000e30:	10001974 	.word	0x10001974
1a000e34:	10001994 	.word	0x10001994

1a000e38 <gesp8266ReadHttpServer>:
{
1a000e38:	b508      	push	{r3, lr}
	ExcecuteHttpServerFsm();
1a000e3a:	f7ff fbe1 	bl	1a000600 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPSEND); //si la FSM llego al estado ESP_SEND_CIPSEND significa que ya llego una peticion
1a000e3e:	4b03      	ldr	r3, [pc, #12]	; (1a000e4c <gesp8266ReadHttpServer+0x14>)
1a000e40:	7818      	ldrb	r0, [r3, #0]
}
1a000e42:	281d      	cmp	r0, #29
1a000e44:	bf14      	ite	ne
1a000e46:	2000      	movne	r0, #0
1a000e48:	2001      	moveq	r0, #1
1a000e4a:	bd08      	pop	{r3, pc}
1a000e4c:	10001944 	.word	0x10001944

1a000e50 <gesp8266WriteHttpServer>:
{
1a000e50:	b508      	push	{r3, lr}
	if (Esp8266Status == ESP_SEND_CIPSEND)
1a000e52:	4b08      	ldr	r3, [pc, #32]	; (1a000e74 <gesp8266WriteHttpServer+0x24>)
1a000e54:	781b      	ldrb	r3, [r3, #0]
1a000e56:	2b1d      	cmp	r3, #29
1a000e58:	d008      	beq.n	1a000e6c <gesp8266WriteHttpServer+0x1c>
	ExcecuteHttpServerFsm();
1a000e5a:	f7ff fbd1 	bl	1a000600 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPCLOSE);
1a000e5e:	4b05      	ldr	r3, [pc, #20]	; (1a000e74 <gesp8266WriteHttpServer+0x24>)
1a000e60:	7818      	ldrb	r0, [r3, #0]
}
1a000e62:	2823      	cmp	r0, #35	; 0x23
1a000e64:	bf14      	ite	ne
1a000e66:	2000      	movne	r0, #0
1a000e68:	2001      	moveq	r0, #1
1a000e6a:	bd08      	pop	{r3, pc}
		PointerOfHttpWebPage = answer;
1a000e6c:	4b02      	ldr	r3, [pc, #8]	; (1a000e78 <gesp8266WriteHttpServer+0x28>)
1a000e6e:	6018      	str	r0, [r3, #0]
1a000e70:	e7f3      	b.n	1a000e5a <gesp8266WriteHttpServer+0xa>
1a000e72:	bf00      	nop
1a000e74:	10001944 	.word	0x10001944
1a000e78:	1000194c 	.word	0x1000194c

1a000e7c <EspRxCallback>:
}


// Callback para la recepción serie
void EspRxCallback(void *param)
{
1a000e7c:	b530      	push	{r4, r5, lr}
1a000e7e:	b083      	sub	sp, #12
1a000e80:	4604      	mov	r4, r0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000e82:	f3ef 8511 	mrs	r5, BASEPRI
1a000e86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e8a:	f383 8811 	msr	BASEPRI, r3
1a000e8e:	f3bf 8f6f 	isb	sy
1a000e92:	f3bf 8f4f 	dsb	sy
	UARTData_t* UARTData = (UARTData_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	receivedData = uartRxRead(UARTData->uartValue);
1a000e96:	7800      	ldrb	r0, [r0, #0]
1a000e98:	f003 fece 	bl	1a004c38 <uartRxRead>
1a000e9c:	f88d 0003 	strb.w	r0, [sp, #3]

	xQueueSendFromISR( UARTData->onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a000ea0:	2300      	movs	r3, #0
1a000ea2:	aa01      	add	r2, sp, #4
1a000ea4:	f10d 0103 	add.w	r1, sp, #3
1a000ea8:	68e0      	ldr	r0, [r4, #12]
1a000eaa:	f001 fad1 	bl	1a002450 <xQueueGenericSendFromISR>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000eae:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a000eb2:	9b01      	ldr	r3, [sp, #4]
1a000eb4:	b13b      	cbz	r3, 1a000ec6 <EspRxCallback+0x4a>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a000eb6:	4b05      	ldr	r3, [pc, #20]	; (1a000ecc <EspRxCallback+0x50>)
1a000eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ebc:	601a      	str	r2, [r3, #0]
1a000ebe:	f3bf 8f4f 	dsb	sy
1a000ec2:	f3bf 8f6f 	isb	sy
	}

}
1a000ec6:	b003      	add	sp, #12
1a000ec8:	bd30      	pop	{r4, r5, pc}
1a000eca:	bf00      	nop
1a000ecc:	e000ed04 	.word	0xe000ed04

1a000ed0 <UARTEspInit>:
{
1a000ed0:	b510      	push	{r4, lr}
1a000ed2:	4604      	mov	r4, r0
		UARTData->onRxQueue = xQueueCreate(ESP_IN_QUEUE_LEN, sizeof(uint8_t));
1a000ed4:	2200      	movs	r2, #0
1a000ed6:	2101      	movs	r1, #1
1a000ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
1a000edc:	f001 f9d3 	bl	1a002286 <xQueueGenericCreate>
1a000ee0:	60e0      	str	r0, [r4, #12]
		UARTData->onTxQueue = xQueueCreate(ESP_OUT_QUEUE_LEN, sizeof(uint8_t));
1a000ee2:	2200      	movs	r2, #0
1a000ee4:	2101      	movs	r1, #1
1a000ee6:	201e      	movs	r0, #30
1a000ee8:	f001 f9cd 	bl	1a002286 <xQueueGenericCreate>
1a000eec:	60a0      	str	r0, [r4, #8]
		if((UARTData->onRxQueue == NULL)||(UARTData->onTxQueue == NULL))
1a000eee:	68e3      	ldr	r3, [r4, #12]
1a000ef0:	b183      	cbz	r3, 1a000f14 <UARTEspInit+0x44>
1a000ef2:	b188      	cbz	r0, 1a000f18 <UARTEspInit+0x48>
	uartConfig(UARTData->uartValue, UARTData->baudRate);
1a000ef4:	6861      	ldr	r1, [r4, #4]
1a000ef6:	7820      	ldrb	r0, [r4, #0]
1a000ef8:	f003 feb2 	bl	1a004c60 <uartInit>
	uartCallbackSet(UARTData->uartValue, UART_RECEIVE, EspRxCallback,(void*) UARTData);
1a000efc:	4623      	mov	r3, r4
1a000efe:	4a07      	ldr	r2, [pc, #28]	; (1a000f1c <UARTEspInit+0x4c>)
1a000f00:	2100      	movs	r1, #0
1a000f02:	7820      	ldrb	r0, [r4, #0]
1a000f04:	f003 fe02 	bl	1a004b0c <uartCallbackSet>
	uartInterrupt(UARTData->uartValue, true);
1a000f08:	2101      	movs	r1, #1
1a000f0a:	7820      	ldrb	r0, [r4, #0]
1a000f0c:	f003 fdb6 	bl	1a004a7c <uartInterrupt>
	return(true);
1a000f10:	2001      	movs	r0, #1
}
1a000f12:	bd10      	pop	{r4, pc}
			return (false);
1a000f14:	2000      	movs	r0, #0
1a000f16:	e7fc      	b.n	1a000f12 <UARTEspInit+0x42>
1a000f18:	2000      	movs	r0, #0
1a000f1a:	e7fa      	b.n	1a000f12 <UARTEspInit+0x42>
1a000f1c:	1a000e7d 	.word	0x1a000e7d

1a000f20 <receiveEspByte>:
	}

}

bool_t receiveEspByte(UARTData_t* UARTData,uint8_t *receivedByte,TickType_t timeout)
{
1a000f20:	b508      	push	{r3, lr}


	if (pdTRUE==xQueueReceive( UARTData->onRxQueue, ( void * ) receivedByte, timeout )) //Leo de la cola el dato recibido
1a000f22:	68c0      	ldr	r0, [r0, #12]
1a000f24:	f001 fafa 	bl	1a00251c <xQueueReceive>
1a000f28:	2801      	cmp	r0, #1
1a000f2a:	d000      	beq.n	1a000f2e <receiveEspByte+0xe>
	{
		return true;
	}
	else
		return false;
1a000f2c:	2000      	movs	r0, #0

}
1a000f2e:	bd08      	pop	{r3, pc}

1a000f30 <pruebasInit>:
#define minLong 	FSMReg->param [2]
#define maxLong 	FSMReg->param [3]


bool_t pruebasInit ()
{
1a000f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000f34:	b082      	sub	sp, #8
	//configuro la comunicacion con los puertos de prueba
	static portsConfig_t ports;
	//static UARTData_t UARTData;
	uint8_t i;
	ports.uartValue = UART_GPIO;
1a000f36:	481c      	ldr	r0, [pc, #112]	; (1a000fa8 <pruebasInit+0x78>)
1a000f38:	2400      	movs	r4, #0
1a000f3a:	7004      	strb	r4, [r0, #0]
	ports.baudRate = 460800;
1a000f3c:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
1a000f40:	6043      	str	r3, [r0, #4]
	portsdriverInit(&ports);
1a000f42:	f000 fca7 	bl	1a001894 <portsdriverInit>

	//Inicializo el vector de datos y comunicacion de los tests
	for (i=0;i<PORTS_NUMBER;i++)
1a000f46:	e029      	b.n	1a000f9c <pruebasInit+0x6c>
	{
		FSMRegisters[i].port = ports.port[i]; //Asigno las colas del puerto de pruebas
1a000f48:	4f18      	ldr	r7, [pc, #96]	; (1a000fac <pruebasInit+0x7c>)
1a000f4a:	00a5      	lsls	r5, r4, #2
1a000f4c:	192b      	adds	r3, r5, r4
1a000f4e:	ea4f 1c03 	mov.w	ip, r3, lsl #4
1a000f52:	eb07 080c 	add.w	r8, r7, ip
1a000f56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000f5a:	009a      	lsls	r2, r3, #2
1a000f5c:	4b12      	ldr	r3, [pc, #72]	; (1a000fa8 <pruebasInit+0x78>)
1a000f5e:	4413      	add	r3, r2
1a000f60:	f108 0634 	add.w	r6, r8, #52	; 0x34
1a000f64:	330c      	adds	r3, #12
1a000f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a000f6a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		FSMRegisters[i].test = 0;
1a000f6e:	2600      	movs	r6, #0
1a000f70:	f807 600c 	strb.w	r6, [r7, ip]
		FSMRegisters[i].state = INIT;
1a000f74:	f888 6001 	strb.w	r6, [r8, #1]
		FSMRegisters[i].testControlQueue = xQueueCreate(CONTROL_QUEUE_LEN,sizeof(testOrder_t)); //Creo la cola por donde llegan las ordenes para la tarea de pruebas
1a000f78:	4632      	mov	r2, r6
1a000f7a:	2102      	movs	r1, #2
1a000f7c:	200a      	movs	r0, #10
1a000f7e:	f001 f982 	bl	1a002286 <xQueueGenericCreate>
1a000f82:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30


		//Creo la tarea de la prueb y le paso el registro de datos
		xTaskCreate(
1a000f86:	9601      	str	r6, [sp, #4]
1a000f88:	2201      	movs	r2, #1
1a000f8a:	9200      	str	r2, [sp, #0]
1a000f8c:	4643      	mov	r3, r8
1a000f8e:	225a      	movs	r2, #90	; 0x5a
1a000f90:	4907      	ldr	r1, [pc, #28]	; (1a000fb0 <pruebasInit+0x80>)
1a000f92:	4808      	ldr	r0, [pc, #32]	; (1a000fb4 <pruebasInit+0x84>)
1a000f94:	f001 fe6b 	bl	1a002c6e <xTaskCreate>
	for (i=0;i<PORTS_NUMBER;i++)
1a000f98:	3401      	adds	r4, #1
1a000f9a:	b2e4      	uxtb	r4, r4
1a000f9c:	2c05      	cmp	r4, #5
1a000f9e:	d9d3      	bls.n	1a000f48 <pruebasInit+0x18>
			(void*)&FSMRegisters[i],    // Parameter passed into the task.
			tskIDLE_PRIORITY+1,         // Priority at which the task is created.
			0                           // Pointer to the task created in the system
		);
	}
}
1a000fa0:	b002      	add	sp, #8
1a000fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000fa6:	bf00      	nop
1a000fa8:	10001acc 	.word	0x10001acc
1a000fac:	10004dc8 	.word	0x10004dc8
1a000fb0:	1a006a34 	.word	0x1a006a34
1a000fb4:	1a001629 	.word	0x1a001629

1a000fb8 <setTestOrder>:
   }
}


bool_t setTestOrder (uint8_t portNum, uint8_t testNum, uint8_t testState )
{
1a000fb8:	b510      	push	{r4, lr}
1a000fba:	b082      	sub	sp, #8
	testOrder_t order;
	order.state = testState;
1a000fbc:	f88d 2005 	strb.w	r2, [sp, #5]
	order.test = testNum;
1a000fc0:	ac02      	add	r4, sp, #8
1a000fc2:	f804 1d04 	strb.w	r1, [r4, #-4]!

	if (pdTRUE == xQueueSend(FSMRegisters[portNum].testControlQueue, &order,0))
1a000fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000fca:	0103      	lsls	r3, r0, #4
1a000fcc:	4806      	ldr	r0, [pc, #24]	; (1a000fe8 <setTestOrder+0x30>)
1a000fce:	4418      	add	r0, r3
1a000fd0:	2300      	movs	r3, #0
1a000fd2:	461a      	mov	r2, r3
1a000fd4:	4621      	mov	r1, r4
1a000fd6:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a000fd8:	f001 f97c 	bl	1a0022d4 <xQueueGenericSend>
1a000fdc:	2801      	cmp	r0, #1
1a000fde:	d000      	beq.n	1a000fe2 <setTestOrder+0x2a>
		return true;
	else
		return false;
1a000fe0:	2000      	movs	r0, #0

}
1a000fe2:	b002      	add	sp, #8
1a000fe4:	bd10      	pop	{r4, pc}
1a000fe6:	bf00      	nop
1a000fe8:	10004dc8 	.word	0x10004dc8

1a000fec <sendToAllTests>:

bool_t sendToAllTests ( uint8_t testNum, uint8_t testState )
{
1a000fec:	b530      	push	{r4, r5, lr}
1a000fee:	b083      	sub	sp, #12
	bool_t ret;
	testOrder_t order;
	uint8_t portNum;
	order.state = testState;
1a000ff0:	f88d 1005 	strb.w	r1, [sp, #5]
	order.test = testNum;
1a000ff4:	f88d 0004 	strb.w	r0, [sp, #4]
	ret= true;
	for (portNum = 0;portNum<PORTS_NUMBER;portNum++)
1a000ff8:	2400      	movs	r4, #0
	ret= true;
1a000ffa:	2501      	movs	r5, #1
	for (portNum = 0;portNum<PORTS_NUMBER;portNum++)
1a000ffc:	e001      	b.n	1a001002 <sendToAllTests+0x16>
1a000ffe:	3401      	adds	r4, #1
1a001000:	b2e4      	uxtb	r4, r4
1a001002:	2c05      	cmp	r4, #5
1a001004:	d80e      	bhi.n	1a001024 <sendToAllTests+0x38>
	{
		if (pdTRUE != xQueueSend(FSMRegisters[portNum].testControlQueue, &order,0))
1a001006:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00100a:	0113      	lsls	r3, r2, #4
1a00100c:	4812      	ldr	r0, [pc, #72]	; (1a001058 <sendToAllTests+0x6c>)
1a00100e:	4418      	add	r0, r3
1a001010:	2300      	movs	r3, #0
1a001012:	461a      	mov	r2, r3
1a001014:	a901      	add	r1, sp, #4
1a001016:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001018:	f001 f95c 	bl	1a0022d4 <xQueueGenericSend>
1a00101c:	2801      	cmp	r0, #1
1a00101e:	d0ee      	beq.n	1a000ffe <sendToAllTests+0x12>
			ret =false;
1a001020:	2500      	movs	r5, #0
1a001022:	e7ec      	b.n	1a000ffe <sendToAllTests+0x12>
	}
	portNum = 0;
1a001024:	2300      	movs	r3, #0
1a001026:	e001      	b.n	1a00102c <sendToAllTests+0x40>
	while (portNum <(PORTS_NUMBER-1))
	{
		if (FSMRegisters[portNum].state==STOP)
			portNum++;
1a001028:	3301      	adds	r3, #1
1a00102a:	b2db      	uxtb	r3, r3
	while (portNum <(PORTS_NUMBER-1))
1a00102c:	2b04      	cmp	r3, #4
1a00102e:	d810      	bhi.n	1a001052 <sendToAllTests+0x66>
		if (FSMRegisters[portNum].state==STOP)
1a001030:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001034:	0111      	lsls	r1, r2, #4
1a001036:	4a08      	ldr	r2, [pc, #32]	; (1a001058 <sendToAllTests+0x6c>)
1a001038:	440a      	add	r2, r1
1a00103a:	7852      	ldrb	r2, [r2, #1]
1a00103c:	2a21      	cmp	r2, #33	; 0x21
1a00103e:	d0f3      	beq.n	1a001028 <sendToAllTests+0x3c>
		else
			taskYIELD();
1a001040:	4a06      	ldr	r2, [pc, #24]	; (1a00105c <sendToAllTests+0x70>)
1a001042:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
1a001046:	6011      	str	r1, [r2, #0]
1a001048:	f3bf 8f4f 	dsb	sy
1a00104c:	f3bf 8f6f 	isb	sy
1a001050:	e7ec      	b.n	1a00102c <sendToAllTests+0x40>
	}

return ret;
}
1a001052:	4628      	mov	r0, r5
1a001054:	b003      	add	sp, #12
1a001056:	bd30      	pop	{r4, r5, pc}
1a001058:	10004dc8 	.word	0x10004dc8
1a00105c:	e000ed04 	.word	0xe000ed04

1a001060 <getTestsState>:

uint8_t getTestsState (uint8_t portNum)
{
	return FSMRegisters[portNum].state;
1a001060:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001064:	0102      	lsls	r2, r0, #4
1a001066:	4b02      	ldr	r3, [pc, #8]	; (1a001070 <getTestsState+0x10>)
1a001068:	4413      	add	r3, r2
}
1a00106a:	7858      	ldrb	r0, [r3, #1]
1a00106c:	4770      	bx	lr
1a00106e:	bf00      	nop
1a001070:	10004dc8 	.word	0x10004dc8

1a001074 <FSMPruebaDrivers>:
//Entradas analogicas
//0 = Corriente * 1.25
//1 = Tension /160

void FSMPruebaDrivers(testState_t *FSMReg)
{
1a001074:	b530      	push	{r4, r5, lr}
1a001076:	b087      	sub	sp, #28
1a001078:	4604      	mov	r4, r0
	static uint8_t ADC_I[10];


	/*------Maquina de estados------*/

	switch (FSMReg->state)
1a00107a:	7843      	ldrb	r3, [r0, #1]
1a00107c:	2b21      	cmp	r3, #33	; 0x21
1a00107e:	f200 8179 	bhi.w	1a001374 <FSMPruebaDrivers+0x300>
1a001082:	e8df f013 	tbh	[pc, r3, lsl #1]
1a001086:	0022      	.short	0x0022
1a001088:	01770177 	.word	0x01770177
1a00108c:	005e0033 	.word	0x005e0033
1a001090:	009f007a 	.word	0x009f007a
1a001094:	017700c0 	.word	0x017700c0
1a001098:	01770177 	.word	0x01770177
1a00109c:	01770177 	.word	0x01770177
1a0010a0:	01770177 	.word	0x01770177
1a0010a4:	01770177 	.word	0x01770177
1a0010a8:	01770177 	.word	0x01770177
1a0010ac:	01770177 	.word	0x01770177
1a0010b0:	01770177 	.word	0x01770177
1a0010b4:	01770177 	.word	0x01770177
1a0010b8:	01770177 	.word	0x01770177
1a0010bc:	01770177 	.word	0x01770177
1a0010c0:	01770177 	.word	0x01770177
1a0010c4:	01770177 	.word	0x01770177
1a0010c8:	0169      	.short	0x0169
	{
	case INIT:
	{	//inicialización
		//Le quito la alimentación al driver.
		digitalOuts = 0;
1a0010ca:	2100      	movs	r1, #0
1a0010cc:	6041      	str	r1, [r0, #4]
		digitalIn = 0;
1a0010ce:	6081      	str	r1, [r0, #8]
		Vout = 0;
1a0010d0:	60c1      	str	r1, [r0, #12]
		Vin = 0;
1a0010d2:	6101      	str	r1, [r0, #16]
		Iin = 0;
1a0010d4:	6141      	str	r1, [r0, #20]
		FSMReg->i=0;
1a0010d6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		FSMReg->pasa=3;
1a0010da:	2303      	movs	r3, #3
1a0010dc:	7603      	strb	r3, [r0, #24]
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a0010de:	460b      	mov	r3, r1
1a0010e0:	460a      	mov	r2, r1
1a0010e2:	3034      	adds	r0, #52	; 0x34
1a0010e4:	f000 fc28 	bl	1a001938 <sendDataPort>

		break;
	}
	}
	return;
}
1a0010e8:	b007      	add	sp, #28
1a0010ea:	bd30      	pop	{r4, r5, pc}
			switch(FSMReg->i){
1a0010ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a0010f0:	2b01      	cmp	r3, #1
1a0010f2:	d01a      	beq.n	1a00112a <FSMPruebaDrivers+0xb6>
1a0010f4:	b1a3      	cbz	r3, 1a001120 <FSMPruebaDrivers+0xac>
1a0010f6:	2b02      	cmp	r3, #2
1a0010f8:	d01d      	beq.n	1a001136 <FSMPruebaDrivers+0xc2>
		FSMReg->adcSamples=0;
1a0010fa:	2300      	movs	r3, #0
1a0010fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		FSMReg->ADC_1=0;
1a001100:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		FSMReg->ADC_2=0;
1a001104:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001108:	7922      	ldrb	r2, [r4, #4]
1a00110a:	89a1      	ldrh	r1, [r4, #12]
1a00110c:	f104 0034 	add.w	r0, r4, #52	; 0x34
1a001110:	f000 fc12 	bl	1a001938 <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a001114:	f001 fe30 	bl	1a002d78 <xTaskGetTickCount>
1a001118:	6460      	str	r0, [r4, #68]	; 0x44
		FSMReg->state= WAIT_5S;
1a00111a:	2304      	movs	r3, #4
1a00111c:	7063      	strb	r3, [r4, #1]
		break;
1a00111e:	e7e3      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
				digitalOuts = 0x06; //0110 Poweroff, loadOn, 10%
1a001120:	2306      	movs	r3, #6
1a001122:	6043      	str	r3, [r0, #4]
				Vout =102; //10%
1a001124:	2366      	movs	r3, #102	; 0x66
1a001126:	60c3      	str	r3, [r0, #12]
				break;
1a001128:	e7e7      	b.n	1a0010fa <FSMPruebaDrivers+0x86>
				digitalOuts = 0x04; //0100 Poweroff, loadOn, 50%
1a00112a:	2304      	movs	r3, #4
1a00112c:	6043      	str	r3, [r0, #4]
				Vout =510; //50%
1a00112e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
1a001132:	60c3      	str	r3, [r0, #12]
				break;
1a001134:	e7e1      	b.n	1a0010fa <FSMPruebaDrivers+0x86>
				digitalOuts = 0x05; //0101 Poweroff, loadOn, 100%
1a001136:	2305      	movs	r3, #5
1a001138:	6043      	str	r3, [r0, #4]
				Vout =1023; //100%
1a00113a:	f240 33ff 	movw	r3, #1023	; 0x3ff
1a00113e:	60c3      	str	r3, [r0, #12]
				break;
1a001140:	e7db      	b.n	1a0010fa <FSMPruebaDrivers+0x86>
		tempTick = xTaskGetTickCount(); //Tomo el estado actual del tick y luego comparo con el valor al inicio
1a001142:	f001 fe19 	bl	1a002d78 <xTaskGetTickCount>
1a001146:	9003      	str	r0, [sp, #12]
		if (tempTick >= FSMReg->tickRegister) //chequeo que el Tick counter no se haya reiniciado
1a001148:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a00114a:	9b03      	ldr	r3, [sp, #12]
1a00114c:	429a      	cmp	r2, r3
1a00114e:	d808      	bhi.n	1a001162 <FSMPruebaDrivers+0xee>
			if ((tempTick - FSMReg->tickRegister)
1a001150:	9b03      	ldr	r3, [sp, #12]
1a001152:	1a9b      	subs	r3, r3, r2
1a001154:	f241 3288 	movw	r2, #5000	; 0x1388
1a001158:	4293      	cmp	r3, r2
1a00115a:	d9c5      	bls.n	1a0010e8 <FSMPruebaDrivers+0x74>
				FSMReg->state= POWER_ON;
1a00115c:	2305      	movs	r3, #5
1a00115e:	7063      	strb	r3, [r4, #1]
1a001160:	e7c2      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
			if ((tempTick + (0xFFFF - FSMReg->tickRegister))
1a001162:	9b03      	ldr	r3, [sp, #12]
1a001164:	1a9b      	subs	r3, r3, r2
1a001166:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a00116a:	33ff      	adds	r3, #255	; 0xff
1a00116c:	f241 3288 	movw	r2, #5000	; 0x1388
1a001170:	4293      	cmp	r3, r2
1a001172:	d9b9      	bls.n	1a0010e8 <FSMPruebaDrivers+0x74>
				FSMReg->state= POWER_ON;
1a001174:	2305      	movs	r3, #5
1a001176:	7063      	strb	r3, [r4, #1]
1a001178:	e7b6      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
			switch(FSMReg->i){
1a00117a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
1a00117e:	2b01      	cmp	r3, #1
1a001180:	d014      	beq.n	1a0011ac <FSMPruebaDrivers+0x138>
1a001182:	b173      	cbz	r3, 1a0011a2 <FSMPruebaDrivers+0x12e>
1a001184:	2b02      	cmp	r3, #2
1a001186:	d017      	beq.n	1a0011b8 <FSMPruebaDrivers+0x144>
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001188:	2300      	movs	r3, #0
1a00118a:	7922      	ldrb	r2, [r4, #4]
1a00118c:	89a1      	ldrh	r1, [r4, #12]
1a00118e:	f104 0034 	add.w	r0, r4, #52	; 0x34
1a001192:	f000 fbd1 	bl	1a001938 <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a001196:	f001 fdef 	bl	1a002d78 <xTaskGetTickCount>
1a00119a:	6460      	str	r0, [r4, #68]	; 0x44
		FSMReg->state= WAIT_5S2;
1a00119c:	2306      	movs	r3, #6
1a00119e:	7063      	strb	r3, [r4, #1]
		break;
1a0011a0:	e7a2      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
				digitalOuts = 0x0E; //1110 Poweron, loadOn, 10%
1a0011a2:	230e      	movs	r3, #14
1a0011a4:	6043      	str	r3, [r0, #4]
				Vout =102; //10%
1a0011a6:	2366      	movs	r3, #102	; 0x66
1a0011a8:	60c3      	str	r3, [r0, #12]
				break;
1a0011aa:	e7ed      	b.n	1a001188 <FSMPruebaDrivers+0x114>
				digitalOuts = 0x0A; //1100 Poweron, loadOn, 50%
1a0011ac:	230a      	movs	r3, #10
1a0011ae:	6043      	str	r3, [r0, #4]
				Vout =510; //50%
1a0011b0:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
1a0011b4:	60c3      	str	r3, [r0, #12]
				break;
1a0011b6:	e7e7      	b.n	1a001188 <FSMPruebaDrivers+0x114>
				digitalOuts = 0x0B; //1101 Poweron, loadOn, 100%
1a0011b8:	230b      	movs	r3, #11
1a0011ba:	6043      	str	r3, [r0, #4]
				Vout =1023; //100%
1a0011bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
1a0011c0:	60c3      	str	r3, [r0, #12]
				break;
1a0011c2:	e7e1      	b.n	1a001188 <FSMPruebaDrivers+0x114>
		tempTick = xTaskGetTickCount(); //Tomo el estado actual del tick y luego comparo con el valor al inicio
1a0011c4:	f001 fdd8 	bl	1a002d78 <xTaskGetTickCount>
1a0011c8:	9003      	str	r0, [sp, #12]
		if (tempTick >= FSMReg->tickRegister) //chequeo que el Tick counter no se haya reiniciado
1a0011ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a0011cc:	9b03      	ldr	r3, [sp, #12]
1a0011ce:	429a      	cmp	r2, r3
1a0011d0:	d808      	bhi.n	1a0011e4 <FSMPruebaDrivers+0x170>
			if ((tempTick - FSMReg->tickRegister)
1a0011d2:	9b03      	ldr	r3, [sp, #12]
1a0011d4:	1a9b      	subs	r3, r3, r2
1a0011d6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0011da:	4293      	cmp	r3, r2
1a0011dc:	d984      	bls.n	1a0010e8 <FSMPruebaDrivers+0x74>
				FSMReg->state= MEASURE;
1a0011de:	2307      	movs	r3, #7
1a0011e0:	7063      	strb	r3, [r4, #1]
1a0011e2:	e781      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
			if ((tempTick + (0xFFFF - FSMReg->tickRegister))
1a0011e4:	9b03      	ldr	r3, [sp, #12]
1a0011e6:	1a9b      	subs	r3, r3, r2
1a0011e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a0011ec:	33ff      	adds	r3, #255	; 0xff
1a0011ee:	f241 3288 	movw	r2, #5000	; 0x1388
1a0011f2:	4293      	cmp	r3, r2
1a0011f4:	f67f af78 	bls.w	1a0010e8 <FSMPruebaDrivers+0x74>
				FSMReg->state= MEASURE;
1a0011f8:	2307      	movs	r3, #7
1a0011fa:	7063      	strb	r3, [r4, #1]
				xQueueReset( FSMReg->port.onRxQueue ); //Reinicio la cola para no leer datos viejos
1a0011fc:	2100      	movs	r1, #0
1a0011fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001200:	f000 ffa6 	bl	1a002150 <xQueueGenericReset>
1a001204:	e770      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
		receiveDataPort(&testPort,&ADC1DataTemp,&ADC2DataTemp, &digInTemp,0);
1a001206:	2300      	movs	r3, #0
1a001208:	9300      	str	r3, [sp, #0]
1a00120a:	f10d 0313 	add.w	r3, sp, #19
1a00120e:	aa05      	add	r2, sp, #20
1a001210:	f10d 0116 	add.w	r1, sp, #22
1a001214:	3034      	adds	r0, #52	; 0x34
1a001216:	f000 fbb3 	bl	1a001980 <receiveDataPort>
		FSMReg->adcSamples++;
1a00121a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
1a00121e:	3101      	adds	r1, #1
1a001220:	b2c9      	uxtb	r1, r1
1a001222:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
		FSMReg->ADC_1+=ADC1DataTemp;
1a001226:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
1a00122a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
1a00122e:	441a      	add	r2, r3
1a001230:	b292      	uxth	r2, r2
1a001232:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
		FSMReg->ADC_2+=ADC2DataTemp;
1a001236:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
1a00123a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
1a00123e:	4403      	add	r3, r0
1a001240:	b29b      	uxth	r3, r3
1a001242:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		Iin= ADC1Gain*FSMReg->ADC_1/FSMReg->adcSamples;
1a001246:	69e0      	ldr	r0, [r4, #28]
1a001248:	fb02 f200 	mul.w	r2, r2, r0
1a00124c:	fbb2 f2f1 	udiv	r2, r2, r1
1a001250:	6162      	str	r2, [r4, #20]
		Vin= ADC2Gain*FSMReg->ADC_2/FSMReg->adcSamples;
1a001252:	6a20      	ldr	r0, [r4, #32]
1a001254:	fb03 f300 	mul.w	r3, r3, r0
1a001258:	fbb3 f3f1 	udiv	r3, r3, r1
1a00125c:	6123      	str	r3, [r4, #16]
		if (FSMReg->adcSamples==20)		//una vez tomadas las 20 muestras evaluo el resultado
1a00125e:	2914      	cmp	r1, #20
1a001260:	d007      	beq.n	1a001272 <FSMPruebaDrivers+0x1fe>
		if(FSMReg->i==3)
1a001262:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
1a001266:	2b03      	cmp	r3, #3
1a001268:	f47f af3e 	bne.w	1a0010e8 <FSMPruebaDrivers+0x74>
			FSMReg->state= STOP;
1a00126c:	2321      	movs	r3, #33	; 0x21
1a00126e:	7063      	strb	r3, [r4, #1]
1a001270:	e73a      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
			switch(FSMReg->i){
1a001272:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
1a001276:	2901      	cmp	r1, #1
1a001278:	d044      	beq.n	1a001304 <FSMPruebaDrivers+0x290>
1a00127a:	b309      	cbz	r1, 1a0012c0 <FSMPruebaDrivers+0x24c>
1a00127c:	2902      	cmp	r1, #2
1a00127e:	d1f0      	bne.n	1a001262 <FSMPruebaDrivers+0x1ee>
				if ((Iin < 1100 *testCurrent)&&(Iin > 900 *testCurrent)&&
1a001280:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a001282:	f240 404c 	movw	r0, #1100	; 0x44c
1a001286:	fb00 f005 	mul.w	r0, r0, r5
1a00128a:	4282      	cmp	r2, r0
1a00128c:	d25e      	bcs.n	1a00134c <FSMPruebaDrivers+0x2d8>
1a00128e:	f44f 7061 	mov.w	r0, #900	; 0x384
1a001292:	fb00 f505 	mul.w	r5, r0, r5
1a001296:	42aa      	cmp	r2, r5
1a001298:	d958      	bls.n	1a00134c <FSMPruebaDrivers+0x2d8>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))
1a00129a:	6a60      	ldr	r0, [r4, #36]	; 0x24
1a00129c:	f240 424c 	movw	r2, #1100	; 0x44c
1a0012a0:	fb02 f200 	mul.w	r2, r2, r0
				if ((Iin < 1100 *testCurrent)&&(Iin > 900 *testCurrent)&&
1a0012a4:	4293      	cmp	r3, r2
1a0012a6:	d251      	bcs.n	1a00134c <FSMPruebaDrivers+0x2d8>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))
1a0012a8:	f44f 7261 	mov.w	r2, #900	; 0x384
1a0012ac:	fb02 f000 	mul.w	r0, r2, r0
1a0012b0:	4283      	cmp	r3, r0
1a0012b2:	d94b      	bls.n	1a00134c <FSMPruebaDrivers+0x2d8>
					FSMReg->i++;
1a0012b4:	3101      	adds	r1, #1
1a0012b6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
					FSMReg->pasa=1; //Cuando paso todas las pruebas marco como PASA
1a0012ba:	2301      	movs	r3, #1
1a0012bc:	7623      	strb	r3, [r4, #24]
1a0012be:	e7d0      	b.n	1a001262 <FSMPruebaDrivers+0x1ee>
				if ((Iin < 150 *testCurrent)&&(Iin > 80 *testCurrent)&&			//multiplico los porcentajes por 1000 para no usar flotante
1a0012c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1a0012c2:	2596      	movs	r5, #150	; 0x96
1a0012c4:	fb05 f500 	mul.w	r5, r5, r0
1a0012c8:	42aa      	cmp	r2, r5
1a0012ca:	d215      	bcs.n	1a0012f8 <FSMPruebaDrivers+0x284>
1a0012cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0012d0:	0105      	lsls	r5, r0, #4
1a0012d2:	42aa      	cmp	r2, r5
1a0012d4:	d910      	bls.n	1a0012f8 <FSMPruebaDrivers+0x284>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))
1a0012d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
1a0012d8:	f240 424c 	movw	r2, #1100	; 0x44c
1a0012dc:	fb02 f200 	mul.w	r2, r2, r0
				if ((Iin < 150 *testCurrent)&&(Iin > 80 *testCurrent)&&			//multiplico los porcentajes por 1000 para no usar flotante
1a0012e0:	4293      	cmp	r3, r2
1a0012e2:	d209      	bcs.n	1a0012f8 <FSMPruebaDrivers+0x284>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))
1a0012e4:	f44f 7261 	mov.w	r2, #900	; 0x384
1a0012e8:	fb02 f000 	mul.w	r0, r2, r0
1a0012ec:	4283      	cmp	r3, r0
1a0012ee:	d903      	bls.n	1a0012f8 <FSMPruebaDrivers+0x284>
					FSMReg->i++;
1a0012f0:	3101      	adds	r1, #1
1a0012f2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
1a0012f6:	e7b4      	b.n	1a001262 <FSMPruebaDrivers+0x1ee>
					FSMReg->i=3;
1a0012f8:	2303      	movs	r3, #3
1a0012fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					FSMReg->pasa=0;
1a0012fe:	2300      	movs	r3, #0
1a001300:	7623      	strb	r3, [r4, #24]
1a001302:	e7ae      	b.n	1a001262 <FSMPruebaDrivers+0x1ee>
				if ((Iin < 550 *testCurrent)&&(Iin > 450 *testCurrent)&&
1a001304:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a001306:	f240 2026 	movw	r0, #550	; 0x226
1a00130a:	fb00 f005 	mul.w	r0, r0, r5
1a00130e:	4282      	cmp	r2, r0
1a001310:	d216      	bcs.n	1a001340 <FSMPruebaDrivers+0x2cc>
1a001312:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
1a001316:	fb00 f505 	mul.w	r5, r0, r5
1a00131a:	42aa      	cmp	r2, r5
1a00131c:	d910      	bls.n	1a001340 <FSMPruebaDrivers+0x2cc>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))
1a00131e:	6a60      	ldr	r0, [r4, #36]	; 0x24
1a001320:	f240 424c 	movw	r2, #1100	; 0x44c
1a001324:	fb02 f200 	mul.w	r2, r2, r0
				if ((Iin < 550 *testCurrent)&&(Iin > 450 *testCurrent)&&
1a001328:	4293      	cmp	r3, r2
1a00132a:	d209      	bcs.n	1a001340 <FSMPruebaDrivers+0x2cc>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))
1a00132c:	f44f 7261 	mov.w	r2, #900	; 0x384
1a001330:	fb02 f000 	mul.w	r0, r2, r0
1a001334:	4283      	cmp	r3, r0
1a001336:	d903      	bls.n	1a001340 <FSMPruebaDrivers+0x2cc>
					FSMReg->i++;
1a001338:	3101      	adds	r1, #1
1a00133a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
1a00133e:	e790      	b.n	1a001262 <FSMPruebaDrivers+0x1ee>
					FSMReg->i=3;
1a001340:	2303      	movs	r3, #3
1a001342:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					FSMReg->pasa=0;
1a001346:	2300      	movs	r3, #0
1a001348:	7623      	strb	r3, [r4, #24]
1a00134a:	e78a      	b.n	1a001262 <FSMPruebaDrivers+0x1ee>
					FSMReg->i=3;
1a00134c:	2303      	movs	r3, #3
1a00134e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					FSMReg->pasa=0;
1a001352:	2300      	movs	r3, #0
1a001354:	7623      	strb	r3, [r4, #24]
1a001356:	e784      	b.n	1a001262 <FSMPruebaDrivers+0x1ee>
		digitalOuts = 0;
1a001358:	2100      	movs	r1, #0
1a00135a:	6041      	str	r1, [r0, #4]
		digitalIn = 0;
1a00135c:	6081      	str	r1, [r0, #8]
		Vout = 0;
1a00135e:	60c1      	str	r1, [r0, #12]
		Vin = 0;
1a001360:	6101      	str	r1, [r0, #16]
		Iin = 0;
1a001362:	6141      	str	r1, [r0, #20]
		FSMReg->i=0;
1a001364:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001368:	460b      	mov	r3, r1
1a00136a:	460a      	mov	r2, r1
1a00136c:	3034      	adds	r0, #52	; 0x34
1a00136e:	f000 fae3 	bl	1a001938 <sendDataPort>
	return;
1a001372:	e6b9      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>
		digitalOuts = 0;
1a001374:	2100      	movs	r1, #0
1a001376:	6041      	str	r1, [r0, #4]
		digitalIn = 0;
1a001378:	6081      	str	r1, [r0, #8]
		Vout = 0;
1a00137a:	60c1      	str	r1, [r0, #12]
		Vin = 0;
1a00137c:	6101      	str	r1, [r0, #16]
		Iin = 0;
1a00137e:	6141      	str	r1, [r0, #20]
		FSMReg->i=0;
1a001380:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001384:	460b      	mov	r3, r1
1a001386:	460a      	mov	r2, r1
1a001388:	3034      	adds	r0, #52	; 0x34
1a00138a:	f000 fad5 	bl	1a001938 <sendDataPort>
	return;
1a00138e:	e6ab      	b.n	1a0010e8 <FSMPruebaDrivers+0x74>

1a001390 <checkTimeout>:


//Esta funcion devuelve true si ya paso el tiempo inciado por timeoutMS desde
// el instante indicado por initialTick, que debe ser una captura del tick del sistema opertivo
bool_t checkTimeout (uint32_t initialTick, uint32_t timeoutMS)
{
1a001390:	b538      	push	{r3, r4, r5, lr}
1a001392:	4604      	mov	r4, r0
1a001394:	460d      	mov	r5, r1
	uint32_t actualTick;
	bool_t ret;
	actualTick = xTaskGetTickCount();
1a001396:	f001 fcef 	bl	1a002d78 <xTaskGetTickCount>
	ret= false;
	if (actualTick >= initialTick) //chequeo que el Tick counter no se haya reiniciado
1a00139a:	42a0      	cmp	r0, r4
1a00139c:	d304      	bcc.n	1a0013a8 <checkTimeout+0x18>
	{
		if ((actualTick - initialTick)> (timeoutMS * ((uint32_t) portTICK_PERIOD_MS)))
1a00139e:	1b00      	subs	r0, r0, r4
1a0013a0:	42a8      	cmp	r0, r5
1a0013a2:	d80b      	bhi.n	1a0013bc <checkTimeout+0x2c>
	ret= false;
1a0013a4:	2000      	movs	r0, #0
1a0013a6:	e006      	b.n	1a0013b6 <checkTimeout+0x26>
				ret=true;
	}
	else //el Tick counter se reinicio
	{
		if ((actualTick + (0xFFFF - initialTick))> (timeoutMS * ((uint32_t) portTICK_PERIOD_MS)))
1a0013a8:	1b00      	subs	r0, r0, r4
1a0013aa:	f500 407f 	add.w	r0, r0, #65280	; 0xff00
1a0013ae:	30ff      	adds	r0, #255	; 0xff
1a0013b0:	42a8      	cmp	r0, r5
1a0013b2:	d901      	bls.n	1a0013b8 <checkTimeout+0x28>
			ret=true;
1a0013b4:	2001      	movs	r0, #1
	}
	return ret;
}
1a0013b6:	bd38      	pop	{r3, r4, r5, pc}
	ret= false;
1a0013b8:	2000      	movs	r0, #0
1a0013ba:	e7fc      	b.n	1a0013b6 <checkTimeout+0x26>
				ret=true;
1a0013bc:	2001      	movs	r0, #1
1a0013be:	e7fa      	b.n	1a0013b6 <checkTimeout+0x26>

1a0013c0 <FSMPruebaTemporizadores>:
void FSMPruebaTemporizadores(testState_t *FSMReg){
1a0013c0:	b530      	push	{r4, r5, lr}
1a0013c2:	b087      	sub	sp, #28
1a0013c4:	4604      	mov	r4, r0
	switch (FSMReg->state)
1a0013c6:	7843      	ldrb	r3, [r0, #1]
1a0013c8:	2b23      	cmp	r3, #35	; 0x23
1a0013ca:	f200 811c 	bhi.w	1a001606 <FSMPruebaTemporizadores+0x246>
1a0013ce:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0013d2:	0024      	.short	0x0024
1a0013d4:	011a011a 	.word	0x011a011a
1a0013d8:	011a0035 	.word	0x011a0035
1a0013dc:	011a011a 	.word	0x011a011a
1a0013e0:	0042011a 	.word	0x0042011a
1a0013e4:	004c0059 	.word	0x004c0059
1a0013e8:	00c0009f 	.word	0x00c0009f
1a0013ec:	011a011a 	.word	0x011a011a
1a0013f0:	011a011a 	.word	0x011a011a
1a0013f4:	011a011a 	.word	0x011a011a
1a0013f8:	011a011a 	.word	0x011a011a
1a0013fc:	011a011a 	.word	0x011a011a
1a001400:	011a011a 	.word	0x011a011a
1a001404:	011a011a 	.word	0x011a011a
1a001408:	011a011a 	.word	0x011a011a
1a00140c:	011a011a 	.word	0x011a011a
1a001410:	011a011a 	.word	0x011a011a
1a001414:	011a010c 	.word	0x011a010c
1a001418:	0071      	.short	0x0071
		digitalOuts = 0;
1a00141a:	2100      	movs	r1, #0
1a00141c:	6041      	str	r1, [r0, #4]
		digitalIn = 0;
1a00141e:	6081      	str	r1, [r0, #8]
		Vout = 0;
1a001420:	60c1      	str	r1, [r0, #12]
		Vin = 0;
1a001422:	6101      	str	r1, [r0, #16]
		Iin = 0;
1a001424:	6141      	str	r1, [r0, #20]
		FSMReg->i=0;
1a001426:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		FSMReg->pasa=3;
1a00142a:	2303      	movs	r3, #3
1a00142c:	7603      	strb	r3, [r0, #24]
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a00142e:	460b      	mov	r3, r1
1a001430:	460a      	mov	r2, r1
1a001432:	3034      	adds	r0, #52	; 0x34
1a001434:	f000 fa80 	bl	1a001938 <sendDataPort>
}
1a001438:	b007      	add	sp, #28
1a00143a:	bd30      	pop	{r4, r5, pc}
		digitalOuts = 0x08;
1a00143c:	2508      	movs	r5, #8
1a00143e:	6045      	str	r5, [r0, #4]
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001440:	2300      	movs	r3, #0
1a001442:	462a      	mov	r2, r5
1a001444:	8981      	ldrh	r1, [r0, #12]
1a001446:	3034      	adds	r0, #52	; 0x34
1a001448:	f000 fa76 	bl	1a001938 <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a00144c:	f001 fc94 	bl	1a002d78 <xTaskGetTickCount>
1a001450:	6460      	str	r0, [r4, #68]	; 0x44
		FSMReg->state= WAIT_2S;
1a001452:	7065      	strb	r5, [r4, #1]
		break;
1a001454:	e7f0      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		if (checkTimeout (FSMReg->tickRegister, 2000))
1a001456:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
1a00145a:	6c40      	ldr	r0, [r0, #68]	; 0x44
1a00145c:	f7ff ff98 	bl	1a001390 <checkTimeout>
1a001460:	2800      	cmp	r0, #0
1a001462:	d0e9      	beq.n	1a001438 <FSMPruebaTemporizadores+0x78>
			FSMReg->state= TRIGGER;
1a001464:	230a      	movs	r3, #10
1a001466:	7063      	strb	r3, [r4, #1]
1a001468:	e7e6      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		digitalOuts = 0x09;
1a00146a:	2509      	movs	r5, #9
1a00146c:	6045      	str	r5, [r0, #4]
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a00146e:	2300      	movs	r3, #0
1a001470:	462a      	mov	r2, r5
1a001472:	8981      	ldrh	r1, [r0, #12]
1a001474:	3034      	adds	r0, #52	; 0x34
1a001476:	f000 fa5f 	bl	1a001938 <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a00147a:	f001 fc7d 	bl	1a002d78 <xTaskGetTickCount>
1a00147e:	6460      	str	r0, [r4, #68]	; 0x44
		FSMReg->state= WAIT_2S2;
1a001480:	7065      	strb	r5, [r4, #1]
		break;
1a001482:	e7d9      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		if (checkTimeout (FSMReg->tickRegister, 2000))
1a001484:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
1a001488:	6c40      	ldr	r0, [r0, #68]	; 0x44
1a00148a:	f7ff ff81 	bl	1a001390 <checkTimeout>
1a00148e:	2800      	cmp	r0, #0
1a001490:	d0d2      	beq.n	1a001438 <FSMPruebaTemporizadores+0x78>
			digitalOuts = 0x08; //Termino el pulso de disparo
1a001492:	2208      	movs	r2, #8
1a001494:	6062      	str	r2, [r4, #4]
			sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001496:	2300      	movs	r3, #0
1a001498:	89a1      	ldrh	r1, [r4, #12]
1a00149a:	f104 0034 	add.w	r0, r4, #52	; 0x34
1a00149e:	f000 fa4b 	bl	1a001938 <sendDataPort>
			sumIn0=0;
1a0014a2:	2300      	movs	r3, #0
1a0014a4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			FSMReg->tickRegister = xTaskGetTickCount(); //Leo el tick para hacer un timeout si no se enciende el temporizador
1a0014a8:	f001 fc66 	bl	1a002d78 <xTaskGetTickCount>
1a0014ac:	6460      	str	r0, [r4, #68]	; 0x44
			FSMReg->state= WAIT_ON;
1a0014ae:	2323      	movs	r3, #35	; 0x23
1a0014b0:	7063      	strb	r3, [r4, #1]
1a0014b2:	e7c1      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		receiveDataPort(&testPort,&ADC1DataTemp,&ADC2DataTemp, &digInTemp,0);
1a0014b4:	2300      	movs	r3, #0
1a0014b6:	9300      	str	r3, [sp, #0]
1a0014b8:	f10d 030f 	add.w	r3, sp, #15
1a0014bc:	aa04      	add	r2, sp, #16
1a0014be:	f10d 0112 	add.w	r1, sp, #18
1a0014c2:	3034      	adds	r0, #52	; 0x34
1a0014c4:	f000 fa5c 	bl	1a001980 <receiveDataPort>
		if (checkTimeout (FSMReg->tickRegister, 30000))
1a0014c8:	f247 5130 	movw	r1, #30000	; 0x7530
1a0014cc:	6c60      	ldr	r0, [r4, #68]	; 0x44
1a0014ce:	f7ff ff5f 	bl	1a001390 <checkTimeout>
1a0014d2:	b950      	cbnz	r0, 1a0014ea <FSMPruebaTemporizadores+0x12a>
		if (digInTemp&0x01)
1a0014d4:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a0014d8:	f013 0f01 	tst.w	r3, #1
1a0014dc:	d00d      	beq.n	1a0014fa <FSMPruebaTemporizadores+0x13a>
				sumIn0++;
1a0014de:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
1a0014e2:	3301      	adds	r3, #1
1a0014e4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
1a0014e8:	e7a6      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
			FSMReg->i=2;
1a0014ea:	2302      	movs	r3, #2
1a0014ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			FSMReg->pasa=0;
1a0014f0:	2300      	movs	r3, #0
1a0014f2:	7623      	strb	r3, [r4, #24]
			FSMReg->state= STOP;
1a0014f4:	2321      	movs	r3, #33	; 0x21
1a0014f6:	7063      	strb	r3, [r4, #1]
			break;
1a0014f8:	e79e      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
			tempTick = xTaskGetTickCount();
1a0014fa:	f001 fc3d 	bl	1a002d78 <xTaskGetTickCount>
1a0014fe:	9005      	str	r0, [sp, #20]
			if (sumIn0>0)
1a001500:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
1a001504:	2b00      	cmp	r3, #0
1a001506:	d097      	beq.n	1a001438 <FSMPruebaTemporizadores+0x78>
				sumIn0--;
1a001508:	3b01      	subs	r3, #1
1a00150a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
1a00150e:	e793      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		receiveDataPort(&testPort,&ADC1DataTemp,&ADC2DataTemp, &digInTemp,0);
1a001510:	2300      	movs	r3, #0
1a001512:	9300      	str	r3, [sp, #0]
1a001514:	f10d 030f 	add.w	r3, sp, #15
1a001518:	aa04      	add	r2, sp, #16
1a00151a:	f10d 0112 	add.w	r1, sp, #18
1a00151e:	3034      	adds	r0, #52	; 0x34
1a001520:	f000 fa2e 	bl	1a001980 <receiveDataPort>
		if (digInTemp&0x01)
1a001524:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a001528:	f013 0f01 	tst.w	r3, #1
1a00152c:	d106      	bne.n	1a00153c <FSMPruebaTemporizadores+0x17c>
			if (sumIn0>0)
1a00152e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
1a001532:	b14b      	cbz	r3, 1a001548 <FSMPruebaTemporizadores+0x188>
				sumIn0--;
1a001534:	3b01      	subs	r3, #1
1a001536:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
1a00153a:	e77d      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
				sumIn0++;
1a00153c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
1a001540:	3301      	adds	r3, #1
1a001542:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
1a001546:	e777      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
				FSMReg->state= CHECK_TIME;
1a001548:	230c      	movs	r3, #12
1a00154a:	7063      	strb	r3, [r4, #1]
				digitalIn=0x00;
1a00154c:	2300      	movs	r3, #0
1a00154e:	60a3      	str	r3, [r4, #8]
1a001550:	e772      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		tempTick = xTaskGetTickCount();
1a001552:	f001 fc11 	bl	1a002d78 <xTaskGetTickCount>
1a001556:	9005      	str	r0, [sp, #20]
		if (tempTick >FSMReg->tickRegister)
1a001558:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a00155a:	9b05      	ldr	r3, [sp, #20]
1a00155c:	429a      	cmp	r2, r3
1a00155e:	d213      	bcs.n	1a001588 <FSMPruebaTemporizadores+0x1c8>
			tempTick = (tempTick-FSMReg->tickRegister)/ (1000* portTICK_PERIOD_MS);
1a001560:	9b05      	ldr	r3, [sp, #20]
1a001562:	1a9b      	subs	r3, r3, r2
1a001564:	4a2f      	ldr	r2, [pc, #188]	; (1a001624 <FSMPruebaTemporizadores+0x264>)
1a001566:	fba2 2303 	umull	r2, r3, r2, r3
1a00156a:	099b      	lsrs	r3, r3, #6
1a00156c:	9305      	str	r3, [sp, #20]
		switch(FSMReg->i){
1a00156e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
1a001572:	b1a3      	cbz	r3, 1a00159e <FSMPruebaTemporizadores+0x1de>
1a001574:	2b01      	cmp	r3, #1
1a001576:	d024      	beq.n	1a0015c2 <FSMPruebaTemporizadores+0x202>
		if(FSMReg->i==2)
1a001578:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
1a00157c:	2b02      	cmp	r3, #2
1a00157e:	f47f af5b 	bne.w	1a001438 <FSMPruebaTemporizadores+0x78>
			FSMReg->state= STOP;
1a001582:	2321      	movs	r3, #33	; 0x21
1a001584:	7063      	strb	r3, [r4, #1]
1a001586:	e757      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
			tempTick = (tempTick + (0xFFFF - FSMReg->tickRegister))/ (1000* portTICK_PERIOD_MS);
1a001588:	9b05      	ldr	r3, [sp, #20]
1a00158a:	1a9b      	subs	r3, r3, r2
1a00158c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a001590:	33ff      	adds	r3, #255	; 0xff
1a001592:	4a24      	ldr	r2, [pc, #144]	; (1a001624 <FSMPruebaTemporizadores+0x264>)
1a001594:	fba2 2303 	umull	r2, r3, r2, r3
1a001598:	099b      	lsrs	r3, r3, #6
1a00159a:	9305      	str	r3, [sp, #20]
1a00159c:	e7e7      	b.n	1a00156e <FSMPruebaTemporizadores+0x1ae>
				if ((minShort < tempTick)&&(maxShort < tempTick))//Comparo el tiempo medido
1a00159e:	69e1      	ldr	r1, [r4, #28]
1a0015a0:	9a05      	ldr	r2, [sp, #20]
1a0015a2:	4291      	cmp	r1, r2
1a0015a4:	d207      	bcs.n	1a0015b6 <FSMPruebaTemporizadores+0x1f6>
1a0015a6:	6a21      	ldr	r1, [r4, #32]
1a0015a8:	9a05      	ldr	r2, [sp, #20]
1a0015aa:	4291      	cmp	r1, r2
1a0015ac:	d203      	bcs.n	1a0015b6 <FSMPruebaTemporizadores+0x1f6>
					FSMReg->i++;
1a0015ae:	3301      	adds	r3, #1
1a0015b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
1a0015b4:	e7e0      	b.n	1a001578 <FSMPruebaTemporizadores+0x1b8>
					FSMReg->i=2;
1a0015b6:	2302      	movs	r3, #2
1a0015b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					FSMReg->pasa=0;
1a0015bc:	2300      	movs	r3, #0
1a0015be:	7623      	strb	r3, [r4, #24]
1a0015c0:	e7da      	b.n	1a001578 <FSMPruebaTemporizadores+0x1b8>
				if ((minLong < tempTick)&&(maxLong < tempTick))//Comparo el tiempo medido
1a0015c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
1a0015c4:	9a05      	ldr	r2, [sp, #20]
1a0015c6:	4291      	cmp	r1, r2
1a0015c8:	d209      	bcs.n	1a0015de <FSMPruebaTemporizadores+0x21e>
1a0015ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
1a0015cc:	9a05      	ldr	r2, [sp, #20]
1a0015ce:	4291      	cmp	r1, r2
1a0015d0:	d205      	bcs.n	1a0015de <FSMPruebaTemporizadores+0x21e>
					FSMReg->i++;
1a0015d2:	3301      	adds	r3, #1
1a0015d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					FSMReg->pasa=1; //Cuando paso todas las pruebas marco como PASA
1a0015d8:	2301      	movs	r3, #1
1a0015da:	7623      	strb	r3, [r4, #24]
1a0015dc:	e7cc      	b.n	1a001578 <FSMPruebaTemporizadores+0x1b8>
					FSMReg->i=2;
1a0015de:	2302      	movs	r3, #2
1a0015e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					FSMReg->pasa=0;
1a0015e4:	2300      	movs	r3, #0
1a0015e6:	7623      	strb	r3, [r4, #24]
1a0015e8:	e7c6      	b.n	1a001578 <FSMPruebaTemporizadores+0x1b8>
		digitalOuts = 0;
1a0015ea:	2100      	movs	r1, #0
1a0015ec:	6041      	str	r1, [r0, #4]
		digitalIn = 0;
1a0015ee:	6081      	str	r1, [r0, #8]
		Vout = 0;
1a0015f0:	60c1      	str	r1, [r0, #12]
		Vin = 0;
1a0015f2:	6101      	str	r1, [r0, #16]
		Iin = 0;
1a0015f4:	6141      	str	r1, [r0, #20]
		FSMReg->i=0;
1a0015f6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a0015fa:	460b      	mov	r3, r1
1a0015fc:	460a      	mov	r2, r1
1a0015fe:	3034      	adds	r0, #52	; 0x34
1a001600:	f000 f99a 	bl	1a001938 <sendDataPort>
	return;
1a001604:	e718      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
		digitalOuts = 0;
1a001606:	2100      	movs	r1, #0
1a001608:	6041      	str	r1, [r0, #4]
		digitalIn = 0;
1a00160a:	6081      	str	r1, [r0, #8]
		Vout = 0;
1a00160c:	60c1      	str	r1, [r0, #12]
		Vin = 0;
1a00160e:	6101      	str	r1, [r0, #16]
		Iin = 0;
1a001610:	6141      	str	r1, [r0, #20]
		FSMReg->i=0;
1a001612:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001616:	460b      	mov	r3, r1
1a001618:	460a      	mov	r2, r1
1a00161a:	3034      	adds	r0, #52	; 0x34
1a00161c:	f000 f98c 	bl	1a001938 <sendDataPort>
	return;
1a001620:	e70a      	b.n	1a001438 <FSMPruebaTemporizadores+0x78>
1a001622:	bf00      	nop
1a001624:	10624dd3 	.word	0x10624dd3

1a001628 <testsTask>:
{
1a001628:	b510      	push	{r4, lr}
1a00162a:	b082      	sub	sp, #8
1a00162c:	4604      	mov	r4, r0
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a00162e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001632:	f001 fcff 	bl	1a003034 <vTaskDelay>
   test->state= INIT;
1a001636:	2300      	movs	r3, #0
1a001638:	7063      	strb	r3, [r4, #1]
1a00163a:	e009      	b.n	1a001650 <testsTask+0x28>
		   test->test=order.test;
1a00163c:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a001640:	7023      	strb	r3, [r4, #0]
	   	   test->state= order.state;
1a001642:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a001646:	7063      	strb	r3, [r4, #1]
1a001648:	e019      	b.n	1a00167e <testsTask+0x56>
				 FSMPruebaDrivers(test);
1a00164a:	4620      	mov	r0, r4
1a00164c:	f7ff fd12 	bl	1a001074 <FSMPruebaDrivers>
	   if (gpioRead(TEC1)==0)
1a001650:	2024      	movs	r0, #36	; 0x24
1a001652:	f003 fd0a 	bl	1a00506a <gpioRead>
1a001656:	b918      	cbnz	r0, 1a001660 <testsTask+0x38>
		   test->test=1;
1a001658:	2301      	movs	r3, #1
1a00165a:	7023      	strb	r3, [r4, #0]
	   	   test->state= START;
1a00165c:	2303      	movs	r3, #3
1a00165e:	7063      	strb	r3, [r4, #1]
	   if (gpioRead(TEC2)==0)
1a001660:	2025      	movs	r0, #37	; 0x25
1a001662:	f003 fd02 	bl	1a00506a <gpioRead>
1a001666:	b918      	cbnz	r0, 1a001670 <testsTask+0x48>
		   test->test=2;
1a001668:	2302      	movs	r3, #2
1a00166a:	7023      	strb	r3, [r4, #0]
	   	   test->state= START;
1a00166c:	2303      	movs	r3, #3
1a00166e:	7063      	strb	r3, [r4, #1]
	   if (pdTRUE == xQueueReceive(test->testControlQueue, &order,0))
1a001670:	2200      	movs	r2, #0
1a001672:	a901      	add	r1, sp, #4
1a001674:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001676:	f000 ff51 	bl	1a00251c <xQueueReceive>
1a00167a:	2801      	cmp	r0, #1
1a00167c:	d0de      	beq.n	1a00163c <testsTask+0x14>
	   if (uxQueueMessagesWaiting(test->port.onRxQueue))
1a00167e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001680:	f001 f84d 	bl	1a00271e <uxQueueMessagesWaiting>
1a001684:	2800      	cmp	r0, #0
1a001686:	d0e3      	beq.n	1a001650 <testsTask+0x28>
		 switch(test->test){
1a001688:	7823      	ldrb	r3, [r4, #0]
1a00168a:	2b01      	cmp	r3, #1
1a00168c:	d0dd      	beq.n	1a00164a <testsTask+0x22>
1a00168e:	2b02      	cmp	r3, #2
1a001690:	d1de      	bne.n	1a001650 <testsTask+0x28>
				 FSMPruebaTemporizadores(test);
1a001692:	4620      	mov	r0, r4
1a001694:	f7ff fe94 	bl	1a0013c0 <FSMPruebaTemporizadores>
				 break;
1a001698:	e7da      	b.n	1a001650 <testsTask+0x28>
1a00169a:	Address 0x000000001a00169a is out of bounds.


1a00169c <onRxCallback>:
}


// Callback para la recepción serie a través de la UART USB.
void onRxCallback(void *param)
{
1a00169c:	b530      	push	{r4, r5, lr}
1a00169e:	b083      	sub	sp, #12
1a0016a0:	4604      	mov	r4, r0
	__asm volatile
1a0016a2:	f3ef 8511 	mrs	r5, BASEPRI
1a0016a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016aa:	f383 8811 	msr	BASEPRI, r3
1a0016ae:	f3bf 8f6f 	isb	sy
1a0016b2:	f3bf 8f4f 	dsb	sy
	portsConfig_t* ports = (portsConfig_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	aux = uartRxRead(ports->uartValue);
1a0016b6:	7800      	ldrb	r0, [r0, #0]
1a0016b8:	f003 fabe 	bl	1a004c38 <uartRxRead>

	if(aux & 0x80) //Si el primer bit es 1 significa que estoy recibiendo el primer byte
1a0016bc:	f010 0f80 	tst.w	r0, #128	; 0x80
1a0016c0:	d109      	bne.n	1a0016d6 <onRxCallback+0x3a>
		byteNumber=1;
		receivedData.rxData [0]=aux;
		}
	else
	{
		if(byteNumber==1)
1a0016c2:	4b16      	ldr	r3, [pc, #88]	; (1a00171c <onRxCallback+0x80>)
1a0016c4:	781b      	ldrb	r3, [r3, #0]
1a0016c6:	2b01      	cmp	r3, #1
1a0016c8:	d118      	bne.n	1a0016fc <onRxCallback+0x60>
		{
			byteNumber=2;
1a0016ca:	4b14      	ldr	r3, [pc, #80]	; (1a00171c <onRxCallback+0x80>)
1a0016cc:	2202      	movs	r2, #2
1a0016ce:	701a      	strb	r2, [r3, #0]
			receivedData.rxData [1]= aux;
1a0016d0:	4b13      	ldr	r3, [pc, #76]	; (1a001720 <onRxCallback+0x84>)
1a0016d2:	7058      	strb	r0, [r3, #1]
1a0016d4:	e004      	b.n	1a0016e0 <onRxCallback+0x44>
		byteNumber=1;
1a0016d6:	4b11      	ldr	r3, [pc, #68]	; (1a00171c <onRxCallback+0x80>)
1a0016d8:	2201      	movs	r2, #1
1a0016da:	701a      	strb	r2, [r3, #0]
		receivedData.rxData [0]=aux;
1a0016dc:	4b10      	ldr	r3, [pc, #64]	; (1a001720 <onRxCallback+0x84>)
1a0016de:	7018      	strb	r0, [r3, #0]
	__asm volatile
1a0016e0:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a0016e4:	9b01      	ldr	r3, [sp, #4]
1a0016e6:	b13b      	cbz	r3, 1a0016f8 <onRxCallback+0x5c>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a0016e8:	4b0e      	ldr	r3, [pc, #56]	; (1a001724 <onRxCallback+0x88>)
1a0016ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016ee:	601a      	str	r2, [r3, #0]
1a0016f0:	f3bf 8f4f 	dsb	sy
1a0016f4:	f3bf 8f6f 	isb	sy
	}

}
1a0016f8:	b003      	add	sp, #12
1a0016fa:	bd30      	pop	{r4, r5, pc}
			receivedData.rxData [2] = aux;
1a0016fc:	4908      	ldr	r1, [pc, #32]	; (1a001720 <onRxCallback+0x84>)
1a0016fe:	7088      	strb	r0, [r1, #2]
			aux=(receivedData.rxData[0]>>4)&0x07; //Obtengo el address del puerto que envio el dato
1a001700:	780b      	ldrb	r3, [r1, #0]
1a001702:	f3c3 1302 	ubfx	r3, r3, #4, #3
			xQueueSendFromISR( ports->port[aux].onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a001706:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00170a:	009a      	lsls	r2, r3, #2
1a00170c:	4414      	add	r4, r2
1a00170e:	2300      	movs	r3, #0
1a001710:	aa01      	add	r2, sp, #4
1a001712:	6960      	ldr	r0, [r4, #20]
1a001714:	f000 fe9c 	bl	1a002450 <xQueueGenericSendFromISR>
1a001718:	e7e2      	b.n	1a0016e0 <onRxCallback+0x44>
1a00171a:	bf00      	nop
1a00171c:	10001b21 	.word	0x10001b21
1a001720:	10001b38 	.word	0x10001b38
1a001724:	e000ed04 	.word	0xe000ed04

1a001728 <onTxTimeOutCallback>:

//Callback del timer de transmision
void onTxTimeOutCallback(TimerHandle_t xTimer)
{
1a001728:	b510      	push	{r4, lr}
	// Obtenemos los datos de la UART seleccionada, aprovechando el campo reservado
	// para el Timer ID.
	portsConfig_t *ports= (portsConfig_t *) pvTimerGetTimerID(xTimer);
1a00172a:	f002 f896 	bl	1a00385a <pvTimerGetTimerID>
1a00172e:	4604      	mov	r4, r0
	gpioToggle( GPIO0 );
1a001730:	2020      	movs	r0, #32
1a001732:	f003 fcce 	bl	1a0050d2 <gpioToggle>

	//Configuro el callback de la transmision de UART
	uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a001736:	4623      	mov	r3, r4
1a001738:	4a04      	ldr	r2, [pc, #16]	; (1a00174c <onTxTimeOutCallback+0x24>)
1a00173a:	2101      	movs	r1, #1
1a00173c:	7820      	ldrb	r0, [r4, #0]
1a00173e:	f003 f9e5 	bl	1a004b0c <uartCallbackSet>
	uartSetPendingInterrupt(ports->uartValue);
1a001742:	7820      	ldrb	r0, [r4, #0]
1a001744:	f003 fa54 	bl	1a004bf0 <uartSetPendingInterrupt>
}
1a001748:	bd10      	pop	{r4, pc}
1a00174a:	bf00      	nop
1a00174c:	1a001751 	.word	0x1a001751

1a001750 <onTxCallback>:
}



void onTxCallback(void*param)
{
1a001750:	b530      	push	{r4, r5, lr}
1a001752:	b083      	sub	sp, #12
1a001754:	4605      	mov	r5, r0
	portsConfig_t *ports = (portsConfig_t *) param;
	BaseType_t xTaskWokenByReceive = pdFALSE; //Variable para evaluar el cambio de contexto al finaliza la interrupcion
1a001756:	2300      	movs	r3, #0
1a001758:	9301      	str	r3, [sp, #4]
	uint8_t emptyData = 0xff; //Byte que se envia dos veces para darle tiempo al esclavo para responder
	static uint8_t transmitEmpty = 0;



	if (portIndex==0 && byteIndex==0)
1a00175a:	4b38      	ldr	r3, [pc, #224]	; (1a00183c <onTxCallback+0xec>)
1a00175c:	781b      	ldrb	r3, [r3, #0]
1a00175e:	b91b      	cbnz	r3, 1a001768 <onTxCallback+0x18>
1a001760:	4b37      	ldr	r3, [pc, #220]	; (1a001840 <onTxCallback+0xf0>)
1a001762:	781c      	ldrb	r4, [r3, #0]
1a001764:	2c00      	cmp	r4, #0
1a001766:	d035      	beq.n	1a0017d4 <onTxCallback+0x84>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);

	}

	//Si llegué a la interrupcion es porque hay que enviar datos
	if(transmitEmpty==0)
1a001768:	4b36      	ldr	r3, [pc, #216]	; (1a001844 <onTxCallback+0xf4>)
1a00176a:	781b      	ldrb	r3, [r3, #0]
1a00176c:	2b00      	cmp	r3, #0
1a00176e:	d14a      	bne.n	1a001806 <onTxCallback+0xb6>
	{
		uartTxWrite(ports->uartValue,dataToSend[portIndex].txData[byteIndex]);
1a001770:	4b32      	ldr	r3, [pc, #200]	; (1a00183c <onTxCallback+0xec>)
1a001772:	781b      	ldrb	r3, [r3, #0]
1a001774:	4c32      	ldr	r4, [pc, #200]	; (1a001840 <onTxCallback+0xf0>)
1a001776:	7821      	ldrb	r1, [r4, #0]
1a001778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00177c:	4a32      	ldr	r2, [pc, #200]	; (1a001848 <onTxCallback+0xf8>)
1a00177e:	4413      	add	r3, r2
1a001780:	5c59      	ldrb	r1, [r3, r1]
1a001782:	7828      	ldrb	r0, [r5, #0]
1a001784:	f003 fa62 	bl	1a004c4c <uartTxWrite>
		//Luego verifico si termine de enviar el frame completo y deshabilito la interrupcion
		if (byteIndex<2)
1a001788:	7823      	ldrb	r3, [r4, #0]
1a00178a:	2b01      	cmp	r3, #1
1a00178c:	d925      	bls.n	1a0017da <onTxCallback+0x8a>
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
		}
		else
		{
			transmitEmpty=1;//
1a00178e:	4b2d      	ldr	r3, [pc, #180]	; (1a001844 <onTxCallback+0xf4>)
1a001790:	2201      	movs	r2, #1
1a001792:	701a      	strb	r2, [r3, #0]
			if (portIndex<(PORTS_NUMBER-1))
1a001794:	4b29      	ldr	r3, [pc, #164]	; (1a00183c <onTxCallback+0xec>)
1a001796:	781b      	ldrb	r3, [r3, #0]
1a001798:	2b04      	cmp	r3, #4
1a00179a:	d82a      	bhi.n	1a0017f2 <onTxCallback+0xa2>
			{
				portIndex++;
1a00179c:	4413      	add	r3, r2
1a00179e:	4a27      	ldr	r2, [pc, #156]	; (1a00183c <onTxCallback+0xec>)
1a0017a0:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a0017a2:	4b27      	ldr	r3, [pc, #156]	; (1a001840 <onTxCallback+0xf0>)
1a0017a4:	2200      	movs	r2, #0
1a0017a6:	701a      	strb	r2, [r3, #0]
				uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a0017a8:	462b      	mov	r3, r5
1a0017aa:	4a28      	ldr	r2, [pc, #160]	; (1a00184c <onTxCallback+0xfc>)
1a0017ac:	2101      	movs	r1, #1
1a0017ae:	7828      	ldrb	r0, [r5, #0]
1a0017b0:	f003 f9ac 	bl	1a004b0c <uartCallbackSet>
				uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
1a0017b4:	7828      	ldrb	r0, [r5, #0]
1a0017b6:	f003 fa1b 	bl	1a004bf0 <uartSetPendingInterrupt>
1a0017ba:	e02f      	b.n	1a00181c <onTxCallback+0xcc>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);
1a0017bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a0017c0:	eb05 0083 	add.w	r0, r5, r3, lsl #2
1a0017c4:	aa01      	add	r2, sp, #4
1a0017c6:	4920      	ldr	r1, [pc, #128]	; (1a001848 <onTxCallback+0xf8>)
1a0017c8:	4419      	add	r1, r3
1a0017ca:	6900      	ldr	r0, [r0, #16]
1a0017cc:	f000 ff52 	bl	1a002674 <xQueueReceiveFromISR>
		for (i=0;i<PORTS_NUMBER;i++)
1a0017d0:	3401      	adds	r4, #1
1a0017d2:	b2e4      	uxtb	r4, r4
1a0017d4:	2c05      	cmp	r4, #5
1a0017d6:	d9f1      	bls.n	1a0017bc <onTxCallback+0x6c>
1a0017d8:	e7c6      	b.n	1a001768 <onTxCallback+0x18>
			byteIndex++;
1a0017da:	3301      	adds	r3, #1
1a0017dc:	7023      	strb	r3, [r4, #0]
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a0017de:	462b      	mov	r3, r5
1a0017e0:	4a1a      	ldr	r2, [pc, #104]	; (1a00184c <onTxCallback+0xfc>)
1a0017e2:	2101      	movs	r1, #1
1a0017e4:	7828      	ldrb	r0, [r5, #0]
1a0017e6:	f003 f991 	bl	1a004b0c <uartCallbackSet>
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
1a0017ea:	7828      	ldrb	r0, [r5, #0]
1a0017ec:	f003 fa00 	bl	1a004bf0 <uartSetPendingInterrupt>
1a0017f0:	e014      	b.n	1a00181c <onTxCallback+0xcc>
			}
			else
			{
				portIndex=0;
1a0017f2:	2300      	movs	r3, #0
1a0017f4:	4a11      	ldr	r2, [pc, #68]	; (1a00183c <onTxCallback+0xec>)
1a0017f6:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a0017f8:	4a11      	ldr	r2, [pc, #68]	; (1a001840 <onTxCallback+0xf0>)
1a0017fa:	7013      	strb	r3, [r2, #0]
				uartCallbackClr(ports->uartValue, UART_TRANSMITER_FREE); //Deshabilito la interrupcion de TX
1a0017fc:	2101      	movs	r1, #1
1a0017fe:	7828      	ldrb	r0, [r5, #0]
1a001800:	f003 f9e2 	bl	1a004bc8 <uartCallbackClr>
1a001804:	e00a      	b.n	1a00181c <onTxCallback+0xcc>
			}
		}
	}
	else
	{
		uartTxWrite(ports->uartValue,emptyData);
1a001806:	21ff      	movs	r1, #255	; 0xff
1a001808:	7828      	ldrb	r0, [r5, #0]
1a00180a:	f003 fa1f 	bl	1a004c4c <uartTxWrite>
		if (transmitEmpty==2)
1a00180e:	4b0d      	ldr	r3, [pc, #52]	; (1a001844 <onTxCallback+0xf4>)
1a001810:	781b      	ldrb	r3, [r3, #0]
1a001812:	2b02      	cmp	r3, #2
1a001814:	d00e      	beq.n	1a001834 <onTxCallback+0xe4>
			transmitEmpty=0;
		else
			transmitEmpty++;
1a001816:	3301      	adds	r3, #1
1a001818:	4a0a      	ldr	r2, [pc, #40]	; (1a001844 <onTxCallback+0xf4>)
1a00181a:	7013      	strb	r3, [r2, #0]

	}


	//Hago la evaluacion de cambio de cambio de contexto necesario.
	if (xTaskWokenByReceive != pdFALSE)
1a00181c:	9b01      	ldr	r3, [sp, #4]
1a00181e:	b13b      	cbz	r3, 1a001830 <onTxCallback+0xe0>
	{
		taskYIELD ();
1a001820:	4b0b      	ldr	r3, [pc, #44]	; (1a001850 <onTxCallback+0x100>)
1a001822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001826:	601a      	str	r2, [r3, #0]
1a001828:	f3bf 8f4f 	dsb	sy
1a00182c:	f3bf 8f6f 	isb	sy
	}
}
1a001830:	b003      	add	sp, #12
1a001832:	bd30      	pop	{r4, r5, pc}
			transmitEmpty=0;
1a001834:	4b03      	ldr	r3, [pc, #12]	; (1a001844 <onTxCallback+0xf4>)
1a001836:	2200      	movs	r2, #0
1a001838:	701a      	strb	r2, [r3, #0]
1a00183a:	e7ef      	b.n	1a00181c <onTxCallback+0xcc>
1a00183c:	10001b36 	.word	0x10001b36
1a001840:	10001b20 	.word	0x10001b20
1a001844:	10001b3c 	.word	0x10001b3c
1a001848:	10001b24 	.word	0x10001b24
1a00184c:	1a001751 	.word	0x1a001751
1a001850:	e000ed04 	.word	0xe000ed04

1a001854 <portsDataInit>:
{
1a001854:	b530      	push	{r4, r5, lr}
1a001856:	b083      	sub	sp, #12
1a001858:	4605      	mov	r5, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a00185a:	2400      	movs	r4, #0
1a00185c:	e015      	b.n	1a00188a <portsDataInit+0x36>
		portData.txData[0]=(i<<4)|0x80; //Armo el primer byte con el primer bit en uno y el address
1a00185e:	0123      	lsls	r3, r4, #4
1a001860:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a001864:	f88d 3004 	strb.w	r3, [sp, #4]
		portData.txData[1]=0x00;
1a001868:	2300      	movs	r3, #0
1a00186a:	f88d 3005 	strb.w	r3, [sp, #5]
		portData.txData[2]=0x00;
1a00186e:	f88d 3006 	strb.w	r3, [sp, #6]
		xQueueSend( port[i].onTxQueue, ( void * ) &portData, ( TickType_t ) portMAX_DELAY ); //Pongo en cola el primer dato a enviar
1a001872:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a001876:	008a      	lsls	r2, r1, #2
1a001878:	18a8      	adds	r0, r5, r2
1a00187a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00187e:	a901      	add	r1, sp, #4
1a001880:	6840      	ldr	r0, [r0, #4]
1a001882:	f000 fd27 	bl	1a0022d4 <xQueueGenericSend>
	for (i=0; i< PORTS_NUMBER; i++)
1a001886:	3401      	adds	r4, #1
1a001888:	b2e4      	uxtb	r4, r4
1a00188a:	2c05      	cmp	r4, #5
1a00188c:	d9e7      	bls.n	1a00185e <portsDataInit+0xa>
}
1a00188e:	b003      	add	sp, #12
1a001890:	bd30      	pop	{r4, r5, pc}
1a001892:	Address 0x000000001a001892 is out of bounds.


1a001894 <portsdriverInit>:
{
1a001894:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001896:	b083      	sub	sp, #12
1a001898:	4607      	mov	r7, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a00189a:	2400      	movs	r4, #0
1a00189c:	2c05      	cmp	r4, #5
1a00189e:	d816      	bhi.n	1a0018ce <portsdriverInit+0x3a>
		ports->port[i].portAddr = i;
1a0018a0:	0066      	lsls	r6, r4, #1
1a0018a2:	1933      	adds	r3, r6, r4
1a0018a4:	009d      	lsls	r5, r3, #2
1a0018a6:	443d      	add	r5, r7
1a0018a8:	732c      	strb	r4, [r5, #12]
		ports->port[i].onRxQueue  = xQueueCreate(IN_QUEUE_LEN, sizeof(rxData_t));
1a0018aa:	2200      	movs	r2, #0
1a0018ac:	2104      	movs	r1, #4
1a0018ae:	201e      	movs	r0, #30
1a0018b0:	f000 fce9 	bl	1a002286 <xQueueGenericCreate>
1a0018b4:	6168      	str	r0, [r5, #20]
		ports->port[i].onTxQueue = xQueueCreate(OUT_QUEUE_LEN, sizeof(txData_t));
1a0018b6:	2200      	movs	r2, #0
1a0018b8:	2103      	movs	r1, #3
1a0018ba:	201e      	movs	r0, #30
1a0018bc:	f000 fce3 	bl	1a002286 <xQueueGenericCreate>
1a0018c0:	6128      	str	r0, [r5, #16]
		if((ports->port[i].onRxQueue == NULL)||(ports->port[i].onTxQueue == NULL))
1a0018c2:	696b      	ldr	r3, [r5, #20]
1a0018c4:	b363      	cbz	r3, 1a001920 <portsdriverInit+0x8c>
1a0018c6:	b368      	cbz	r0, 1a001924 <portsdriverInit+0x90>
	for (i=0; i< PORTS_NUMBER; i++)
1a0018c8:	3401      	adds	r4, #1
1a0018ca:	b2e4      	uxtb	r4, r4
1a0018cc:	e7e6      	b.n	1a00189c <portsdriverInit+0x8>
	ports->onTxTimeOut = xTimerCreate("Transmit", pdMS_TO_TICKS(1),pdTRUE, (void*) ports, onTxTimeOutCallback);
1a0018ce:	4b17      	ldr	r3, [pc, #92]	; (1a00192c <portsdriverInit+0x98>)
1a0018d0:	9300      	str	r3, [sp, #0]
1a0018d2:	463b      	mov	r3, r7
1a0018d4:	2201      	movs	r2, #1
1a0018d6:	4611      	mov	r1, r2
1a0018d8:	4815      	ldr	r0, [pc, #84]	; (1a001930 <portsdriverInit+0x9c>)
1a0018da:	f001 fe27 	bl	1a00352c <xTimerCreate>
1a0018de:	60b8      	str	r0, [r7, #8]
	if (ports->onTxTimeOut==NULL)
1a0018e0:	b310      	cbz	r0, 1a001928 <portsdriverInit+0x94>
	uartConfig(ports->uartValue, ports->baudRate);
1a0018e2:	6879      	ldr	r1, [r7, #4]
1a0018e4:	7838      	ldrb	r0, [r7, #0]
1a0018e6:	f003 f9bb 	bl	1a004c60 <uartInit>
	uartCallbackSet(ports->uartValue, UART_RECEIVE, onRxCallback,(void*) ports);
1a0018ea:	463b      	mov	r3, r7
1a0018ec:	4a11      	ldr	r2, [pc, #68]	; (1a001934 <portsdriverInit+0xa0>)
1a0018ee:	2100      	movs	r1, #0
1a0018f0:	7838      	ldrb	r0, [r7, #0]
1a0018f2:	f003 f90b 	bl	1a004b0c <uartCallbackSet>
	portsDataInit (ports->port);
1a0018f6:	f107 000c 	add.w	r0, r7, #12
1a0018fa:	f7ff ffab 	bl	1a001854 <portsDataInit>
	uartInterrupt(ports->uartValue, true);
1a0018fe:	2101      	movs	r1, #1
1a001900:	7838      	ldrb	r0, [r7, #0]
1a001902:	f003 f8bb 	bl	1a004a7c <uartInterrupt>
	xTimerStart( ports->onTxTimeOut, 0 );
1a001906:	68bc      	ldr	r4, [r7, #8]
1a001908:	f001 fa36 	bl	1a002d78 <xTaskGetTickCount>
1a00190c:	2300      	movs	r3, #0
1a00190e:	9300      	str	r3, [sp, #0]
1a001910:	4602      	mov	r2, r0
1a001912:	2101      	movs	r1, #1
1a001914:	4620      	mov	r0, r4
1a001916:	f001 fe25 	bl	1a003564 <xTimerGenericCommand>
	return(true);
1a00191a:	2001      	movs	r0, #1
}
1a00191c:	b003      	add	sp, #12
1a00191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (false);
1a001920:	2000      	movs	r0, #0
1a001922:	e7fb      	b.n	1a00191c <portsdriverInit+0x88>
1a001924:	2000      	movs	r0, #0
1a001926:	e7f9      	b.n	1a00191c <portsdriverInit+0x88>
		return (false);
1a001928:	2000      	movs	r0, #0
1a00192a:	e7f7      	b.n	1a00191c <portsdriverInit+0x88>
1a00192c:	1a001729 	.word	0x1a001729
1a001930:	1a006a3c 	.word	0x1a006a3c
1a001934:	1a00169d 	.word	0x1a00169d

1a001938 <sendDataPort>:


bool_t sendDataPort(portsData_t * port,uint16_t DAC, uint8_t digitalOuts,TickType_t timeout)
{
1a001938:	b530      	push	{r4, r5, lr}
1a00193a:	b083      	sub	sp, #12
1a00193c:	461c      	mov	r4, r3
	txData_t portData;
	uint8_t aux;
	if(DAC>1023)
1a00193e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1a001942:	d301      	bcc.n	1a001948 <sendDataPort+0x10>
		DAC=1023;
1a001944:	f240 31ff 	movw	r1, #1023	; 0x3ff
	aux= (uint8_t)(DAC>>7);
1a001948:	f3c1 13c7 	ubfx	r3, r1, #7, #8
	portData.txData[0]=(port->portAddr<<4)|0x80|aux; //Armo el primer byte con el primer bit en uno, el address y la parte alta del dac
1a00194c:	7805      	ldrb	r5, [r0, #0]
1a00194e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
1a001952:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a001956:	f88d 3004 	strb.w	r3, [sp, #4]
	portData.txData[1]=(uint8_t)(DAC & 0x007F); //Armo el segundo byte (parte baja del DAC)
1a00195a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
1a00195e:	f88d 1005 	strb.w	r1, [sp, #5]
	portData.txData[2]=digitalOuts & 0x0F;
1a001962:	f002 030f 	and.w	r3, r2, #15
1a001966:	f88d 3006 	strb.w	r3, [sp, #6]
	if (pdTRUE==xQueueSend( port->onTxQueue, ( void * ) &portData, timeout )) //Pongo en cola los datos a enviar
1a00196a:	2300      	movs	r3, #0
1a00196c:	4622      	mov	r2, r4
1a00196e:	a901      	add	r1, sp, #4
1a001970:	6840      	ldr	r0, [r0, #4]
1a001972:	f000 fcaf 	bl	1a0022d4 <xQueueGenericSend>
1a001976:	2801      	cmp	r0, #1
1a001978:	d000      	beq.n	1a00197c <sendDataPort+0x44>
		return true;
	else
		return false;
1a00197a:	2000      	movs	r0, #0

}
1a00197c:	b003      	add	sp, #12
1a00197e:	bd30      	pop	{r4, r5, pc}

1a001980 <receiveDataPort>:


bool_t receiveDataPort(portsData_t * port,uint16_t *ADC1,uint16_t *ADC2, uint8_t *digitalIn,TickType_t timeout)
{
1a001980:	b530      	push	{r4, r5, lr}
1a001982:	b083      	sub	sp, #12
1a001984:	460d      	mov	r5, r1
1a001986:	461c      	mov	r4, r3
	rxData_t portData;
	uint8_t aux;
	aux= (uint8_t)(DAC>>7);

	if (pdTRUE==xQueueReceive( port->onRxQueue, ( void * ) &portData, timeout )) //Leo de la cola el dato recibido
1a001988:	9a06      	ldr	r2, [sp, #24]
1a00198a:	a901      	add	r1, sp, #4
1a00198c:	6880      	ldr	r0, [r0, #8]
1a00198e:	f000 fdc5 	bl	1a00251c <xQueueReceive>
1a001992:	2801      	cmp	r0, #1
1a001994:	d002      	beq.n	1a00199c <receiveDataPort+0x1c>
		*ADC1 = (((uint16_t)portData.rxData[2] & 0x0F)<<7) | (uint16_t)portData.rxData[3];
		*digitalIn= (portData.rxData[2]>>4) & 0x07;
		return true;
	}
	else
		return false;
1a001996:	2000      	movs	r0, #0

}
1a001998:	b003      	add	sp, #12
1a00199a:	bd30      	pop	{r4, r5, pc}
		*ADC1 = (((uint16_t)portData.rxData[2] & 0x0F)<<7) | (uint16_t)portData.rxData[3];
1a00199c:	f89d 2006 	ldrb.w	r2, [sp, #6]
1a0019a0:	01d3      	lsls	r3, r2, #7
1a0019a2:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
1a0019a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0019aa:	430b      	orrs	r3, r1
1a0019ac:	802b      	strh	r3, [r5, #0]
		*digitalIn= (portData.rxData[2]>>4) & 0x07;
1a0019ae:	f3c2 1202 	ubfx	r2, r2, #4, #3
1a0019b2:	7022      	strb	r2, [r4, #0]
		return true;
1a0019b4:	e7f0      	b.n	1a001998 <receiveDataPort+0x18>
1a0019b6:	Address 0x000000001a0019b6 is out of bounds.


1a0019b8 <interpreterInit>:

char *panels [TESTS_QTY];


bool_t interpreterInit()
{
1a0019b8:	b510      	push	{r4, lr}
1a0019ba:	b082      	sub	sp, #8
	panels [0] = panel0;
1a0019bc:	4b0c      	ldr	r3, [pc, #48]	; (1a0019f0 <interpreterInit+0x38>)
1a0019be:	4a0d      	ldr	r2, [pc, #52]	; (1a0019f4 <interpreterInit+0x3c>)
1a0019c0:	601a      	str	r2, [r3, #0]
	panels [1] = panel1;
1a0019c2:	4a0d      	ldr	r2, [pc, #52]	; (1a0019f8 <interpreterInit+0x40>)
1a0019c4:	605a      	str	r2, [r3, #4]
	commandsQueue = xQueueCreate(INTERPRETER_QUEUE_LEN,sizeof(command_t));
1a0019c6:	2200      	movs	r2, #0
1a0019c8:	2118      	movs	r1, #24
1a0019ca:	2005      	movs	r0, #5
1a0019cc:	f000 fc5b 	bl	1a002286 <xQueueGenericCreate>
1a0019d0:	4b0a      	ldr	r3, [pc, #40]	; (1a0019fc <interpreterInit+0x44>)
1a0019d2:	6018      	str	r0, [r3, #0]
	xTaskCreate(
1a0019d4:	2300      	movs	r3, #0
1a0019d6:	9301      	str	r3, [sp, #4]
1a0019d8:	2401      	movs	r4, #1
1a0019da:	9400      	str	r4, [sp, #0]
1a0019dc:	225a      	movs	r2, #90	; 0x5a
1a0019de:	4908      	ldr	r1, [pc, #32]	; (1a001a00 <interpreterInit+0x48>)
1a0019e0:	4808      	ldr	r0, [pc, #32]	; (1a001a04 <interpreterInit+0x4c>)
1a0019e2:	f001 f944 	bl	1a002c6e <xTaskCreate>
	      configMINIMAL_STACK_SIZE, // Stack size in words, not bytes.
	      (void*)NULL,                          // Parameter passed into the task.
	      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
	      0                           // Pointer to the task created in the system
	   );
	actualPanelNumber=1;
1a0019e6:	4b08      	ldr	r3, [pc, #32]	; (1a001a08 <interpreterInit+0x50>)
1a0019e8:	701c      	strb	r4, [r3, #0]
}
1a0019ea:	b002      	add	sp, #8
1a0019ec:	bd10      	pop	{r4, pc}
1a0019ee:	bf00      	nop
1a0019f0:	10004fb0 	.word	0x10004fb0
1a0019f4:	10000ffc 	.word	0x10000ffc
1a0019f8:	100013e8 	.word	0x100013e8
1a0019fc:	10004dc0 	.word	0x10004dc0
1a001a00:	1a006a48 	.word	0x1a006a48
1a001a04:	1a001b7d 	.word	0x1a001b7d
1a001a08:	10004dc4 	.word	0x10004dc4

1a001a0c <sendCommand>:

}
}

void sendCommand(command_t command)
{
1a001a0c:	b084      	sub	sp, #16
1a001a0e:	b508      	push	{r3, lr}
1a001a10:	f10d 0c08 	add.w	ip, sp, #8
1a001a14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xQueueSend(commandsQueue,&command,0);
1a001a18:	2300      	movs	r3, #0
1a001a1a:	461a      	mov	r2, r3
1a001a1c:	4661      	mov	r1, ip
1a001a1e:	4804      	ldr	r0, [pc, #16]	; (1a001a30 <sendCommand+0x24>)
1a001a20:	6800      	ldr	r0, [r0, #0]
1a001a22:	f000 fc57 	bl	1a0022d4 <xQueueGenericSend>

}
1a001a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a001a2a:	b004      	add	sp, #16
1a001a2c:	4770      	bx	lr
1a001a2e:	bf00      	nop
1a001a30:	10004dc0 	.word	0x10004dc0

1a001a34 <refreshPageData>:

void refreshPageData(char*pageData){
1a001a34:	b570      	push	{r4, r5, r6, lr}
1a001a36:	b090      	sub	sp, #64	; 0x40
1a001a38:	4606      	mov	r6, r0
	uint8_t i,j;
	uint8_t aux;
	char auxStrig[60];
	stdioSprintf(pageData, "{\"panel\":%d,\"data\":[",actualPanelNumber);
1a001a3a:	4b4b      	ldr	r3, [pc, #300]	; (1a001b68 <refreshPageData+0x134>)
1a001a3c:	781a      	ldrb	r2, [r3, #0]
1a001a3e:	494b      	ldr	r1, [pc, #300]	; (1a001b6c <refreshPageData+0x138>)
1a001a40:	f003 fd42 	bl	1a0054c8 <stdioSprintf>
	for (j=0;j<8;j++)
1a001a44:	2500      	movs	r5, #0
1a001a46:	e079      	b.n	1a001b3c <refreshPageData+0x108>
		//strcpy(auxStrig,"");
		for (i=0;i<PORTS_NUMBER;i++)
		{
			switch (j){
				case 0:{
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].state);
1a001a48:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001a4c:	011a      	lsls	r2, r3, #4
1a001a4e:	4b48      	ldr	r3, [pc, #288]	; (1a001b70 <refreshPageData+0x13c>)
1a001a50:	4413      	add	r3, r2
1a001a52:	785a      	ldrb	r2, [r3, #1]
1a001a54:	4947      	ldr	r1, [pc, #284]	; (1a001b74 <refreshPageData+0x140>)
1a001a56:	a801      	add	r0, sp, #4
1a001a58:	f003 fd36 	bl	1a0054c8 <stdioSprintf>
					aux = GUARDAR;
					stdioSprintf(auxStrig,"%d,",aux);
				break;
				}
			}
			strcat (pageData,auxStrig);
1a001a5c:	a901      	add	r1, sp, #4
1a001a5e:	4630      	mov	r0, r6
1a001a60:	f004 fa21 	bl	1a005ea6 <strcat>
		for (i=0;i<PORTS_NUMBER;i++)
1a001a64:	3401      	adds	r4, #1
1a001a66:	b2e4      	uxtb	r4, r4
1a001a68:	2c05      	cmp	r4, #5
1a001a6a:	d865      	bhi.n	1a001b38 <refreshPageData+0x104>
			switch (j){
1a001a6c:	2d07      	cmp	r5, #7
1a001a6e:	d8f5      	bhi.n	1a001a5c <refreshPageData+0x28>
1a001a70:	a301      	add	r3, pc, #4	; (adr r3, 1a001a78 <refreshPageData+0x44>)
1a001a72:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
1a001a76:	bf00      	nop
1a001a78:	1a001a49 	.word	0x1a001a49
1a001a7c:	1a001a99 	.word	0x1a001a99
1a001a80:	1a001abf 	.word	0x1a001abf
1a001a84:	1a001ad5 	.word	0x1a001ad5
1a001a88:	1a001aeb 	.word	0x1a001aeb
1a001a8c:	1a001b01 	.word	0x1a001b01
1a001a90:	1a001b17 	.word	0x1a001b17
1a001a94:	1a001b2d 	.word	0x1a001b2d
					if ((FSMRegisters[i].state==STOP)||(FSMRegisters[i].state==INIT))
1a001a98:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001a9c:	011a      	lsls	r2, r3, #4
1a001a9e:	4b34      	ldr	r3, [pc, #208]	; (1a001b70 <refreshPageData+0x13c>)
1a001aa0:	4413      	add	r3, r2
1a001aa2:	785b      	ldrb	r3, [r3, #1]
1a001aa4:	2b21      	cmp	r3, #33	; 0x21
1a001aa6:	d002      	beq.n	1a001aae <refreshPageData+0x7a>
1a001aa8:	b93b      	cbnz	r3, 1a001aba <refreshPageData+0x86>
						aux = MARCHA;
1a001aaa:	2215      	movs	r2, #21
1a001aac:	e000      	b.n	1a001ab0 <refreshPageData+0x7c>
1a001aae:	2215      	movs	r2, #21
					stdioSprintf(auxStrig,"%d,",aux);
1a001ab0:	4930      	ldr	r1, [pc, #192]	; (1a001b74 <refreshPageData+0x140>)
1a001ab2:	a801      	add	r0, sp, #4
1a001ab4:	f003 fd08 	bl	1a0054c8 <stdioSprintf>
				break;
1a001ab8:	e7d0      	b.n	1a001a5c <refreshPageData+0x28>
						aux = PARADA;
1a001aba:	221f      	movs	r2, #31
1a001abc:	e7f8      	b.n	1a001ab0 <refreshPageData+0x7c>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].pasa);
1a001abe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001ac2:	011a      	lsls	r2, r3, #4
1a001ac4:	4b2a      	ldr	r3, [pc, #168]	; (1a001b70 <refreshPageData+0x13c>)
1a001ac6:	4413      	add	r3, r2
1a001ac8:	7e1a      	ldrb	r2, [r3, #24]
1a001aca:	492a      	ldr	r1, [pc, #168]	; (1a001b74 <refreshPageData+0x140>)
1a001acc:	a801      	add	r0, sp, #4
1a001ace:	f003 fcfb 	bl	1a0054c8 <stdioSprintf>
					break;
1a001ad2:	e7c3      	b.n	1a001a5c <refreshPageData+0x28>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[0]);
1a001ad4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001ad8:	011a      	lsls	r2, r3, #4
1a001ada:	4b25      	ldr	r3, [pc, #148]	; (1a001b70 <refreshPageData+0x13c>)
1a001adc:	4413      	add	r3, r2
1a001ade:	69da      	ldr	r2, [r3, #28]
1a001ae0:	4924      	ldr	r1, [pc, #144]	; (1a001b74 <refreshPageData+0x140>)
1a001ae2:	a801      	add	r0, sp, #4
1a001ae4:	f003 fcf0 	bl	1a0054c8 <stdioSprintf>
					break;
1a001ae8:	e7b8      	b.n	1a001a5c <refreshPageData+0x28>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[1]);
1a001aea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001aee:	011a      	lsls	r2, r3, #4
1a001af0:	4b1f      	ldr	r3, [pc, #124]	; (1a001b70 <refreshPageData+0x13c>)
1a001af2:	4413      	add	r3, r2
1a001af4:	6a1a      	ldr	r2, [r3, #32]
1a001af6:	491f      	ldr	r1, [pc, #124]	; (1a001b74 <refreshPageData+0x140>)
1a001af8:	a801      	add	r0, sp, #4
1a001afa:	f003 fce5 	bl	1a0054c8 <stdioSprintf>
					break;
1a001afe:	e7ad      	b.n	1a001a5c <refreshPageData+0x28>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[2]);
1a001b00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001b04:	011a      	lsls	r2, r3, #4
1a001b06:	4b1a      	ldr	r3, [pc, #104]	; (1a001b70 <refreshPageData+0x13c>)
1a001b08:	4413      	add	r3, r2
1a001b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
1a001b0c:	4919      	ldr	r1, [pc, #100]	; (1a001b74 <refreshPageData+0x140>)
1a001b0e:	a801      	add	r0, sp, #4
1a001b10:	f003 fcda 	bl	1a0054c8 <stdioSprintf>
					break;
1a001b14:	e7a2      	b.n	1a001a5c <refreshPageData+0x28>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[3]);
1a001b16:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001b1a:	011a      	lsls	r2, r3, #4
1a001b1c:	4b14      	ldr	r3, [pc, #80]	; (1a001b70 <refreshPageData+0x13c>)
1a001b1e:	4413      	add	r3, r2
1a001b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
1a001b22:	4914      	ldr	r1, [pc, #80]	; (1a001b74 <refreshPageData+0x140>)
1a001b24:	a801      	add	r0, sp, #4
1a001b26:	f003 fccf 	bl	1a0054c8 <stdioSprintf>
					break;
1a001b2a:	e797      	b.n	1a001a5c <refreshPageData+0x28>
					stdioSprintf(auxStrig,"%d,",aux);
1a001b2c:	2216      	movs	r2, #22
1a001b2e:	4911      	ldr	r1, [pc, #68]	; (1a001b74 <refreshPageData+0x140>)
1a001b30:	a801      	add	r0, sp, #4
1a001b32:	f003 fcc9 	bl	1a0054c8 <stdioSprintf>
				break;
1a001b36:	e791      	b.n	1a001a5c <refreshPageData+0x28>
	for (j=0;j<8;j++)
1a001b38:	3501      	adds	r5, #1
1a001b3a:	b2ed      	uxtb	r5, r5
1a001b3c:	2d07      	cmp	r5, #7
1a001b3e:	d801      	bhi.n	1a001b44 <refreshPageData+0x110>
		for (i=0;i<PORTS_NUMBER;i++)
1a001b40:	2400      	movs	r4, #0
1a001b42:	e791      	b.n	1a001a68 <refreshPageData+0x34>
		}
	}
	pageData[strlen(pageData)-1]=0; //borro la ultima coma
1a001b44:	4630      	mov	r0, r6
1a001b46:	f004 f9dc 	bl	1a005f02 <strlen>
1a001b4a:	3801      	subs	r0, #1
1a001b4c:	2300      	movs	r3, #0
1a001b4e:	5433      	strb	r3, [r6, r0]
	strcat (pageData,"]}");
1a001b50:	4630      	mov	r0, r6
1a001b52:	f004 f9d6 	bl	1a005f02 <strlen>
1a001b56:	1832      	adds	r2, r6, r0
1a001b58:	4b07      	ldr	r3, [pc, #28]	; (1a001b78 <refreshPageData+0x144>)
1a001b5a:	8819      	ldrh	r1, [r3, #0]
1a001b5c:	789b      	ldrb	r3, [r3, #2]
1a001b5e:	5231      	strh	r1, [r6, r0]
1a001b60:	7093      	strb	r3, [r2, #2]
}
1a001b62:	b010      	add	sp, #64	; 0x40
1a001b64:	bd70      	pop	{r4, r5, r6, pc}
1a001b66:	bf00      	nop
1a001b68:	10004dc4 	.word	0x10004dc4
1a001b6c:	1a006a54 	.word	0x1a006a54
1a001b70:	10004dc8 	.word	0x10004dc8
1a001b74:	1a006a6c 	.word	0x1a006a6c
1a001b78:	1a006a70 	.word	0x1a006a70

1a001b7c <interpreter>:
{
1a001b7c:	b510      	push	{r4, lr}
1a001b7e:	b086      	sub	sp, #24
	actualPageData = pageDataA;
1a001b80:	4b41      	ldr	r3, [pc, #260]	; (1a001c88 <interpreter+0x10c>)
1a001b82:	4a42      	ldr	r2, [pc, #264]	; (1a001c8c <interpreter+0x110>)
1a001b84:	601a      	str	r2, [r3, #0]
	actualPanel=panel0;
1a001b86:	4b42      	ldr	r3, [pc, #264]	; (1a001c90 <interpreter+0x114>)
1a001b88:	4a42      	ldr	r2, [pc, #264]	; (1a001c94 <interpreter+0x118>)
1a001b8a:	601a      	str	r2, [r3, #0]
1a001b8c:	e012      	b.n	1a001bb4 <interpreter+0x38>
							switch (command.buttonId[1]){
1a001b8e:	f89d 3002 	ldrb.w	r3, [sp, #2]
1a001b92:	2b32      	cmp	r3, #50	; 0x32
1a001b94:	d04e      	beq.n	1a001c34 <interpreter+0xb8>
1a001b96:	2b34      	cmp	r3, #52	; 0x34
1a001b98:	d063      	beq.n	1a001c62 <interpreter+0xe6>
1a001b9a:	2b30      	cmp	r3, #48	; 0x30
1a001b9c:	d033      	beq.n	1a001c06 <interpreter+0x8a>
	if (actualPageData == pageDataA)
1a001b9e:	4b3a      	ldr	r3, [pc, #232]	; (1a001c88 <interpreter+0x10c>)
1a001ba0:	681a      	ldr	r2, [r3, #0]
1a001ba2:	4b3a      	ldr	r3, [pc, #232]	; (1a001c8c <interpreter+0x110>)
1a001ba4:	429a      	cmp	r2, r3
1a001ba6:	d067      	beq.n	1a001c78 <interpreter+0xfc>
		refreshPageData(pageDataA);
1a001ba8:	4c38      	ldr	r4, [pc, #224]	; (1a001c8c <interpreter+0x110>)
1a001baa:	4620      	mov	r0, r4
1a001bac:	f7ff ff42 	bl	1a001a34 <refreshPageData>
		actualPageData = pageDataA;
1a001bb0:	4b35      	ldr	r3, [pc, #212]	; (1a001c88 <interpreter+0x10c>)
1a001bb2:	601c      	str	r4, [r3, #0]
	if(pdTRUE == xQueueReceive(commandsQueue,&command,250*portTICK_RATE_MS))
1a001bb4:	22fa      	movs	r2, #250	; 0xfa
1a001bb6:	4669      	mov	r1, sp
1a001bb8:	4b37      	ldr	r3, [pc, #220]	; (1a001c98 <interpreter+0x11c>)
1a001bba:	6818      	ldr	r0, [r3, #0]
1a001bbc:	f000 fcae 	bl	1a00251c <xQueueReceive>
1a001bc0:	2801      	cmp	r0, #1
1a001bc2:	d1ec      	bne.n	1a001b9e <interpreter+0x22>
		if (actualPanelNumber == command.panelNum)
1a001bc4:	f89d 3000 	ldrb.w	r3, [sp]
1a001bc8:	4a34      	ldr	r2, [pc, #208]	; (1a001c9c <interpreter+0x120>)
1a001bca:	7810      	ldrb	r0, [r2, #0]
1a001bcc:	4283      	cmp	r3, r0
1a001bce:	d1e6      	bne.n	1a001b9e <interpreter+0x22>
			switch (command.buttonId[0]){
1a001bd0:	f89d 3001 	ldrb.w	r3, [sp, #1]
1a001bd4:	2b62      	cmp	r3, #98	; 0x62
1a001bd6:	d0da      	beq.n	1a001b8e <interpreter+0x12>
1a001bd8:	2b70      	cmp	r3, #112	; 0x70
1a001bda:	d1e0      	bne.n	1a001b9e <interpreter+0x22>
							switch (command.buttonId[1]){
1a001bdc:	f89d 3002 	ldrb.w	r3, [sp, #2]
1a001be0:	2b31      	cmp	r3, #49	; 0x31
1a001be2:	d1dc      	bne.n	1a001b9e <interpreter+0x22>
											portNum = command.buttonId[2]-'0';
1a001be4:	f89d 4003 	ldrb.w	r4, [sp, #3]
1a001be8:	3c30      	subs	r4, #48	; 0x30
1a001bea:	b2e4      	uxtb	r4, r4
											testState = getTestsState (portNum);
1a001bec:	4620      	mov	r0, r4
1a001bee:	f7ff fa37 	bl	1a001060 <getTestsState>
											if((testState == INIT)||(testState == STOP))
1a001bf2:	b108      	cbz	r0, 1a001bf8 <interpreter+0x7c>
1a001bf4:	2821      	cmp	r0, #33	; 0x21
1a001bf6:	d138      	bne.n	1a001c6a <interpreter+0xee>
												setTestOrder (portNum, actualPanelNumber, START);
1a001bf8:	2203      	movs	r2, #3
1a001bfa:	4b28      	ldr	r3, [pc, #160]	; (1a001c9c <interpreter+0x120>)
1a001bfc:	7819      	ldrb	r1, [r3, #0]
1a001bfe:	4620      	mov	r0, r4
1a001c00:	f7ff f9da 	bl	1a000fb8 <setTestOrder>
1a001c04:	e7cb      	b.n	1a001b9e <interpreter+0x22>
											sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a001c06:	2121      	movs	r1, #33	; 0x21
1a001c08:	f7ff f9f0 	bl	1a000fec <sendToAllTests>
											if (actualPanelNumber > 1)
1a001c0c:	4b23      	ldr	r3, [pc, #140]	; (1a001c9c <interpreter+0x120>)
1a001c0e:	781b      	ldrb	r3, [r3, #0]
1a001c10:	2b01      	cmp	r3, #1
1a001c12:	d90b      	bls.n	1a001c2c <interpreter+0xb0>
												actualPanelNumber--;
1a001c14:	3b01      	subs	r3, #1
1a001c16:	4a21      	ldr	r2, [pc, #132]	; (1a001c9c <interpreter+0x120>)
1a001c18:	7013      	strb	r3, [r2, #0]
											actualPanel = panels[actualPanelNumber-1];
1a001c1a:	4b20      	ldr	r3, [pc, #128]	; (1a001c9c <interpreter+0x120>)
1a001c1c:	781b      	ldrb	r3, [r3, #0]
1a001c1e:	3b01      	subs	r3, #1
1a001c20:	4a1f      	ldr	r2, [pc, #124]	; (1a001ca0 <interpreter+0x124>)
1a001c22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a001c26:	4b1a      	ldr	r3, [pc, #104]	; (1a001c90 <interpreter+0x114>)
1a001c28:	601a      	str	r2, [r3, #0]
											break;
1a001c2a:	e7b8      	b.n	1a001b9e <interpreter+0x22>
												actualPanelNumber = 1;
1a001c2c:	4b1b      	ldr	r3, [pc, #108]	; (1a001c9c <interpreter+0x120>)
1a001c2e:	2201      	movs	r2, #1
1a001c30:	701a      	strb	r2, [r3, #0]
1a001c32:	e7f2      	b.n	1a001c1a <interpreter+0x9e>
											sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a001c34:	2121      	movs	r1, #33	; 0x21
1a001c36:	f7ff f9d9 	bl	1a000fec <sendToAllTests>
											if (actualPanelNumber < TESTS_QTY)
1a001c3a:	4b18      	ldr	r3, [pc, #96]	; (1a001c9c <interpreter+0x120>)
1a001c3c:	781b      	ldrb	r3, [r3, #0]
1a001c3e:	2b01      	cmp	r3, #1
1a001c40:	d90b      	bls.n	1a001c5a <interpreter+0xde>
												actualPanelNumber = TESTS_QTY;
1a001c42:	4b16      	ldr	r3, [pc, #88]	; (1a001c9c <interpreter+0x120>)
1a001c44:	2202      	movs	r2, #2
1a001c46:	701a      	strb	r2, [r3, #0]
											actualPanel = panels[actualPanelNumber-1];
1a001c48:	4b14      	ldr	r3, [pc, #80]	; (1a001c9c <interpreter+0x120>)
1a001c4a:	781b      	ldrb	r3, [r3, #0]
1a001c4c:	3b01      	subs	r3, #1
1a001c4e:	4a14      	ldr	r2, [pc, #80]	; (1a001ca0 <interpreter+0x124>)
1a001c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a001c54:	4b0e      	ldr	r3, [pc, #56]	; (1a001c90 <interpreter+0x114>)
1a001c56:	601a      	str	r2, [r3, #0]
											break;
1a001c58:	e7a1      	b.n	1a001b9e <interpreter+0x22>
												actualPanelNumber++;
1a001c5a:	3301      	adds	r3, #1
1a001c5c:	4a0f      	ldr	r2, [pc, #60]	; (1a001c9c <interpreter+0x120>)
1a001c5e:	7013      	strb	r3, [r2, #0]
1a001c60:	e7f2      	b.n	1a001c48 <interpreter+0xcc>
											sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a001c62:	2121      	movs	r1, #33	; 0x21
1a001c64:	f7ff f9c2 	bl	1a000fec <sendToAllTests>
											break;
1a001c68:	e799      	b.n	1a001b9e <interpreter+0x22>
												setTestOrder (portNum, actualPanelNumber, STOP);
1a001c6a:	2221      	movs	r2, #33	; 0x21
1a001c6c:	4b0b      	ldr	r3, [pc, #44]	; (1a001c9c <interpreter+0x120>)
1a001c6e:	7819      	ldrb	r1, [r3, #0]
1a001c70:	4620      	mov	r0, r4
1a001c72:	f7ff f9a1 	bl	1a000fb8 <setTestOrder>
1a001c76:	e792      	b.n	1a001b9e <interpreter+0x22>
		refreshPageData(pageDataB);
1a001c78:	4c0a      	ldr	r4, [pc, #40]	; (1a001ca4 <interpreter+0x128>)
1a001c7a:	4620      	mov	r0, r4
1a001c7c:	f7ff feda 	bl	1a001a34 <refreshPageData>
		actualPageData = pageDataB; //Unicamente cambio el puntero a los datos que se van a mandar cuando ya esta completa la informacion
1a001c80:	4b01      	ldr	r3, [pc, #4]	; (1a001c88 <interpreter+0x10c>)
1a001c82:	601c      	str	r4, [r3, #0]
1a001c84:	e796      	b.n	1a001bb4 <interpreter+0x38>
1a001c86:	bf00      	nop
1a001c88:	10004fac 	.word	0x10004fac
1a001c8c:	10000da4 	.word	0x10000da4
1a001c90:	10004fa8 	.word	0x10004fa8
1a001c94:	10000ffc 	.word	0x10000ffc
1a001c98:	10004dc0 	.word	0x10004dc0
1a001c9c:	10004dc4 	.word	0x10004dc4
1a001ca0:	10004fb0 	.word	0x10004fb0
1a001ca4:	10000ed0 	.word	0x10000ed0

1a001ca8 <myTask>:

/*=====[Implementations of public functions]=================================*/

// Task implementation
void myTask( void* taskParmPtr )
{
1a001ca8:	b500      	push	{lr}
1a001caa:	b083      	sub	sp, #12
	// ----- Task setup -----------------------------------

   gpioWrite( LED, ON );
1a001cac:	2101      	movs	r1, #1
1a001cae:	202a      	movs	r0, #42	; 0x2a
1a001cb0:	f003 f9a6 	bl	1a005000 <gpioWrite>

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a001cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001cb8:	f001 f9bc 	bl	1a003034 <vTaskDelay>

   gpioWrite( LED, OFF ); 
1a001cbc:	2100      	movs	r1, #0
1a001cbe:	202a      	movs	r0, #42	; 0x2a
1a001cc0:	f003 f99e 	bl	1a005000 <gpioWrite>

   // Periodic task every 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a001cc4:	f001 f858 	bl	1a002d78 <xTaskGetTickCount>
1a001cc8:	9001      	str	r0, [sp, #4]

   // ----- Task repeat for ever -------------------------
   while(TRUE) {
      gpioToggle( LED );
1a001cca:	202a      	movs	r0, #42	; 0x2a
1a001ccc:	f003 fa01 	bl	1a0050d2 <gpioToggle>
    	//  digitalOuts=0x0F;
      //else
    	//  digitalOuts=0x00;
      // Send the task to the locked state during xPeriodicity
      // (periodical delay)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a001cd0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a001cd4:	a801      	add	r0, sp, #4
1a001cd6:	f001 f95b 	bl	1a002f90 <vTaskDelayUntil>
1a001cda:	e7f6      	b.n	1a001cca <myTask+0x22>

1a001cdc <myTask3>:




void myTask3( void* taskParmPtr )
{
1a001cdc:	b510      	push	{r4, lr}
1a001cde:	b086      	sub	sp, #24
	uint8_t counter = 0;
	delay_t wifiDelay;
	uint8_t i=0;

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a001ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001ce4:	f001 f9a6 	bl	1a003034 <vTaskDelay>

   // Envia un mensaje de bienvenida.
   stdioPrintf(UART_USB, "\n\rBienvenido al servidor HTTP Esp8266 con EDU CIAA");
1a001ce8:	492f      	ldr	r1, [pc, #188]	; (1a001da8 <myTask3+0xcc>)
1a001cea:	2003      	movs	r0, #3
1a001cec:	f003 fbde 	bl	1a0054ac <stdioPrintf>
   stdioPrintf(UART_USB, "\n\rLa configuracion puede tardar hasta 1 minuto.");
1a001cf0:	492e      	ldr	r1, [pc, #184]	; (1a001dac <myTask3+0xd0>)
1a001cf2:	2003      	movs	r0, #3
1a001cf4:	f003 fbda 	bl	1a0054ac <stdioPrintf>

   error = FALSE;
   // Configura un delay para salir de la configuracion en caso de error.
   delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a001cf8:	f64e 2260 	movw	r2, #60000	; 0xea60
1a001cfc:	2300      	movs	r3, #0
1a001cfe:	4668      	mov	r0, sp
1a001d00:	f003 fa36 	bl	1a005170 <delayInit>
   error = FALSE;
1a001d04:	2400      	movs	r4, #0

   // Mientras no termine la configuracion o mientras no pase el tiempo maximo, ejecuta la configuracion.
   // A la configuracion se le pasa nombre y contrasenia de RED
   while (!gesp8266ConfigHttpServer(WIFI_NAME, WIFI_PASS) && !error) {
1a001d06:	e004      	b.n	1a001d12 <myTask3+0x36>
      if (delayRead(&wifiDelay)) {
1a001d08:	4668      	mov	r0, sp
1a001d0a:	f003 fa41 	bl	1a005190 <delayRead>
1a001d0e:	b100      	cbz	r0, 1a001d12 <myTask3+0x36>
         error = TRUE;
1a001d10:	2401      	movs	r4, #1
   while (!gesp8266ConfigHttpServer(WIFI_NAME, WIFI_PASS) && !error) {
1a001d12:	4927      	ldr	r1, [pc, #156]	; (1a001db0 <myTask3+0xd4>)
1a001d14:	4827      	ldr	r0, [pc, #156]	; (1a001db4 <myTask3+0xd8>)
1a001d16:	f7ff f869 	bl	1a000dec <gesp8266InitHttpServer>
1a001d1a:	b908      	cbnz	r0, 1a001d20 <myTask3+0x44>
1a001d1c:	2c00      	cmp	r4, #0
1a001d1e:	d0f3      	beq.n	1a001d08 <myTask3+0x2c>
      }
   }

   // Avisa al usuario como salio la configuracion
   if (!error) {
1a001d20:	b95c      	cbnz	r4, 1a001d3a <myTask3+0x5e>
      stdioPrintf(UART_USB, "\n\rServidor HTTP configurado. IP: %s", gesp8266GetIpAddress());
1a001d22:	f7fe fb2d 	bl	1a000380 <gesp8266GetIpAddress>
1a001d26:	4602      	mov	r2, r0
1a001d28:	4923      	ldr	r1, [pc, #140]	; (1a001db8 <myTask3+0xdc>)
1a001d2a:	2003      	movs	r0, #3
1a001d2c:	f003 fbbe 	bl	1a0054ac <stdioPrintf>
      // Enciende LEDG indicando que el modulo esta configurado.
      gpioWrite(LEDG, TRUE);
1a001d30:	2101      	movs	r1, #1
1a001d32:	2029      	movs	r0, #41	; 0x29
1a001d34:	f003 f964 	bl	1a005000 <gpioWrite>
1a001d38:	e013      	b.n	1a001d62 <myTask3+0x86>
   } else {
      stdioPrintf(UART_USB, "\n\rError al configurar servidor HTTP.");
1a001d3a:	4920      	ldr	r1, [pc, #128]	; (1a001dbc <myTask3+0xe0>)
1a001d3c:	2003      	movs	r0, #3
1a001d3e:	f003 fbb5 	bl	1a0054ac <stdioPrintf>
      // Enciende LEDR indicando que el modulo esta en error.
      gpioWrite(LEDR, TRUE);
1a001d42:	2101      	movs	r1, #1
1a001d44:	2028      	movs	r0, #40	; 0x28
1a001d46:	f003 f95b 	bl	1a005000 <gpioWrite>
1a001d4a:	e00a      	b.n	1a001d62 <myTask3+0x86>
               error = TRUE;
            }

         }
		 // Avisa al usuario como fue el envio
		 if (!error) {
1a001d4c:	bb0c      	cbnz	r4, 1a001d92 <myTask3+0xb6>
			stdioPrintf(UART_USB, "\n\rPeticion respondida al cliente HTTP %d.", gesp8266GetConnectionId());
1a001d4e:	f7fe fb1b 	bl	1a000388 <gesp8266GetConnectionId>
1a001d52:	4602      	mov	r2, r0
1a001d54:	491a      	ldr	r1, [pc, #104]	; (1a001dc0 <myTask3+0xe4>)
1a001d56:	2003      	movs	r0, #3
1a001d58:	f003 fba8 	bl	1a0054ac <stdioPrintf>
			gpioToggle(LEDG);
1a001d5c:	2029      	movs	r0, #41	; 0x29
1a001d5e:	f003 f9b8 	bl	1a0050d2 <gpioToggle>
      if (gesp8266ReadHttpServer()) {
1a001d62:	f7ff f869 	bl	1a000e38 <gesp8266ReadHttpServer>
1a001d66:	2800      	cmp	r0, #0
1a001d68:	d0fb      	beq.n	1a001d62 <myTask3+0x86>
         delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a001d6a:	f64e 2260 	movw	r2, #60000	; 0xea60
1a001d6e:	2300      	movs	r3, #0
1a001d70:	4668      	mov	r0, sp
1a001d72:	f003 f9fd 	bl	1a005170 <delayInit>
         error = FALSE;
1a001d76:	2400      	movs	r4, #0
       while (!gesp8266WriteHttpServer(requestAnswer) )
1a001d78:	4b12      	ldr	r3, [pc, #72]	; (1a001dc4 <myTask3+0xe8>)
1a001d7a:	6818      	ldr	r0, [r3, #0]
1a001d7c:	f7ff f868 	bl	1a000e50 <gesp8266WriteHttpServer>
1a001d80:	2800      	cmp	r0, #0
1a001d82:	d1e3      	bne.n	1a001d4c <myTask3+0x70>
            if (delayRead(&wifiDelay))
1a001d84:	4668      	mov	r0, sp
1a001d86:	f003 fa03 	bl	1a005190 <delayRead>
1a001d8a:	2800      	cmp	r0, #0
1a001d8c:	d0f4      	beq.n	1a001d78 <myTask3+0x9c>
               error = TRUE;
1a001d8e:	2401      	movs	r4, #1
1a001d90:	e7f2      	b.n	1a001d78 <myTask3+0x9c>
		 }
		 else {
			stdioPrintf(UART_USB, "\n\rPeticion no respondida al cliente HTTP %d.", gesp8266GetConnectionId());
1a001d92:	f7fe faf9 	bl	1a000388 <gesp8266GetConnectionId>
1a001d96:	4602      	mov	r2, r0
1a001d98:	490b      	ldr	r1, [pc, #44]	; (1a001dc8 <myTask3+0xec>)
1a001d9a:	2003      	movs	r0, #3
1a001d9c:	f003 fb86 	bl	1a0054ac <stdioPrintf>
			gpioToggle(LEDR);
1a001da0:	2028      	movs	r0, #40	; 0x28
1a001da2:	f003 f996 	bl	1a0050d2 <gpioToggle>
1a001da6:	e7dc      	b.n	1a001d62 <myTask3+0x86>
1a001da8:	1a006a74 	.word	0x1a006a74
1a001dac:	1a006aa8 	.word	0x1a006aa8
1a001db0:	1a006ad8 	.word	0x1a006ad8
1a001db4:	1a006ae4 	.word	0x1a006ae4
1a001db8:	1a006af0 	.word	0x1a006af0
1a001dbc:	1a006b14 	.word	0x1a006b14
1a001dc0:	1a006b3c 	.word	0x1a006b3c
1a001dc4:	10004dbc 	.word	0x10004dbc
1a001dc8:	1a006b68 	.word	0x1a006b68

1a001dcc <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a001dcc:	b500      	push	{lr}
1a001dce:	b083      	sub	sp, #12
	UARTData.uartValue = UART_USB;
	UARTData.baudRate = 115200;
*/


   boardInit();
1a001dd0:	f003 f998 	bl	1a005104 <boardInit>

   gpioInit( GPIO0, GPIO_OUTPUT );
1a001dd4:	2101      	movs	r1, #1
1a001dd6:	2020      	movs	r0, #32
1a001dd8:	f003 f83c 	bl	1a004e54 <gpioInit>
   gpioInit( T_COL1, GPIO_OUTPUT );
1a001ddc:	2101      	movs	r1, #1
1a001dde:	2006      	movs	r0, #6
1a001de0:	f003 f838 	bl	1a004e54 <gpioInit>
   gpioWrite( T_COL1, ON ); //Habilito el modulo wifi
1a001de4:	2101      	movs	r1, #1
1a001de6:	2006      	movs	r0, #6
1a001de8:	f003 f90a 	bl	1a005000 <gpioWrite>

   //UARTEspInit(&UARTData);


   //Creo las tareas de test y al mismo tiempo inicializo los puertos de pruebas
   interpreterInit();
1a001dec:	f7ff fde4 	bl	1a0019b8 <interpreterInit>
   pruebasInit ();
1a001df0:	f7ff f89e 	bl	1a000f30 <pruebasInit>



   xTaskCreate(
1a001df4:	2400      	movs	r4, #0
1a001df6:	9401      	str	r4, [sp, #4]
1a001df8:	2301      	movs	r3, #1
1a001dfa:	9300      	str	r3, [sp, #0]
1a001dfc:	4623      	mov	r3, r4
1a001dfe:	22b4      	movs	r2, #180	; 0xb4
1a001e00:	4907      	ldr	r1, [pc, #28]	; (1a001e20 <main+0x54>)
1a001e02:	4808      	ldr	r0, [pc, #32]	; (1a001e24 <main+0x58>)
1a001e04:	f000 ff33 	bl	1a002c6e <xTaskCreate>
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );


   xTaskCreate(
1a001e08:	9401      	str	r4, [sp, #4]
1a001e0a:	2302      	movs	r3, #2
1a001e0c:	9300      	str	r3, [sp, #0]
1a001e0e:	4623      	mov	r3, r4
1a001e10:	22b4      	movs	r2, #180	; 0xb4
1a001e12:	4905      	ldr	r1, [pc, #20]	; (1a001e28 <main+0x5c>)
1a001e14:	4805      	ldr	r0, [pc, #20]	; (1a001e2c <main+0x60>)
1a001e16:	f000 ff2a 	bl	1a002c6e <xTaskCreate>
         configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
         (void*)&test,                          // Parameter passed into the task.
         tskIDLE_PRIORITY+1,         // Priority at which the task is created.
         0                           // Pointer to the task created in the system
      );*/
   vTaskStartScheduler(); // Initialize scheduler
1a001e1a:	f000 ff5b 	bl	1a002cd4 <vTaskStartScheduler>
1a001e1e:	e7fe      	b.n	1a001e1e <main+0x52>
1a001e20:	1a006b98 	.word	0x1a006b98
1a001e24:	1a001ca9 	.word	0x1a001ca9
1a001e28:	1a006ba0 	.word	0x1a006ba0
1a001e2c:	1a001cdd 	.word	0x1a001cdd

1a001e30 <initialise_monitor_handles>:
}
1a001e30:	4770      	bx	lr
1a001e32:	Address 0x000000001a001e32 is out of bounds.


1a001e34 <Reset_Handler>:
void Reset_Handler(void) {
1a001e34:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a001e36:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001e38:	4b19      	ldr	r3, [pc, #100]	; (1a001ea0 <Reset_Handler+0x6c>)
1a001e3a:	4a1a      	ldr	r2, [pc, #104]	; (1a001ea4 <Reset_Handler+0x70>)
1a001e3c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001e3e:	3304      	adds	r3, #4
1a001e40:	4a19      	ldr	r2, [pc, #100]	; (1a001ea8 <Reset_Handler+0x74>)
1a001e42:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001e44:	2300      	movs	r3, #0
1a001e46:	e005      	b.n	1a001e54 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001e48:	4a18      	ldr	r2, [pc, #96]	; (1a001eac <Reset_Handler+0x78>)
1a001e4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001e52:	3301      	adds	r3, #1
1a001e54:	2b07      	cmp	r3, #7
1a001e56:	d9f7      	bls.n	1a001e48 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001e58:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a001e5a:	4b15      	ldr	r3, [pc, #84]	; (1a001eb0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001e5c:	e007      	b.n	1a001e6e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a001e5e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001e62:	689a      	ldr	r2, [r3, #8]
1a001e64:	6859      	ldr	r1, [r3, #4]
1a001e66:	6818      	ldr	r0, [r3, #0]
1a001e68:	f7fe f98f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a001e6c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001e6e:	4a11      	ldr	r2, [pc, #68]	; (1a001eb4 <Reset_Handler+0x80>)
1a001e70:	4293      	cmp	r3, r2
1a001e72:	d3f4      	bcc.n	1a001e5e <Reset_Handler+0x2a>
1a001e74:	e006      	b.n	1a001e84 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001e76:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001e78:	6859      	ldr	r1, [r3, #4]
1a001e7a:	f854 0b08 	ldr.w	r0, [r4], #8
1a001e7e:	f7fe f993 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001e82:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001e84:	4a0c      	ldr	r2, [pc, #48]	; (1a001eb8 <Reset_Handler+0x84>)
1a001e86:	4293      	cmp	r3, r2
1a001e88:	d3f5      	bcc.n	1a001e76 <Reset_Handler+0x42>
    SystemInit();
1a001e8a:	f002 fd69 	bl	1a004960 <SystemInit>
    __libc_init_array();
1a001e8e:	f003 fe6b 	bl	1a005b68 <__libc_init_array>
    initialise_monitor_handles();
1a001e92:	f7ff ffcd 	bl	1a001e30 <initialise_monitor_handles>
    main();
1a001e96:	f7ff ff99 	bl	1a001dcc <main>
        __asm__ volatile("wfi");
1a001e9a:	bf30      	wfi
1a001e9c:	e7fd      	b.n	1a001e9a <Reset_Handler+0x66>
1a001e9e:	bf00      	nop
1a001ea0:	40053100 	.word	0x40053100
1a001ea4:	10df1000 	.word	0x10df1000
1a001ea8:	01dff7ff 	.word	0x01dff7ff
1a001eac:	e000e280 	.word	0xe000e280
1a001eb0:	1a000114 	.word	0x1a000114
1a001eb4:	1a000150 	.word	0x1a000150
1a001eb8:	1a000178 	.word	0x1a000178

1a001ebc <_fini>:
void _fini(void) {}
1a001ebc:	4770      	bx	lr

1a001ebe <_init>:
void _init(void) {}
1a001ebe:	4770      	bx	lr

1a001ec0 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001ec0:	2309      	movs	r3, #9
1a001ec2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001ec8:	4770      	bx	lr

1a001eca <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001eca:	2358      	movs	r3, #88	; 0x58
1a001ecc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001ed2:	4770      	bx	lr

1a001ed4 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a001ed4:	2902      	cmp	r1, #2
1a001ed6:	d801      	bhi.n	1a001edc <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a001ed8:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a001eda:	4770      	bx	lr
       SET_ERR(EBADF);
1a001edc:	2309      	movs	r3, #9
1a001ede:	6003      	str	r3, [r0, #0]
       return -1;
1a001ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001ee4:	4770      	bx	lr

1a001ee6 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a001ee6:	2358      	movs	r3, #88	; 0x58
1a001ee8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001eee:	4770      	bx	lr

1a001ef0 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a001ef0:	2902      	cmp	r1, #2
1a001ef2:	d81f      	bhi.n	1a001f34 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a001ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001ef8:	461d      	mov	r5, r3
1a001efa:	4617      	mov	r7, r2
1a001efc:	4606      	mov	r6, r0
  size_t i = 0;
1a001efe:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a001f00:	42ac      	cmp	r4, r5
1a001f02:	d211      	bcs.n	1a001f28 <_read_r+0x38>
         int c = __stdio_getchar();
1a001f04:	f001 ff7d 	bl	1a003e02 <__stdio_getchar>
         if( c != -1 ){
1a001f08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001f0c:	d0f8      	beq.n	1a001f00 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a001f0e:	f104 0801 	add.w	r8, r4, #1
1a001f12:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a001f14:	280d      	cmp	r0, #13
1a001f16:	d003      	beq.n	1a001f20 <_read_r+0x30>
1a001f18:	280a      	cmp	r0, #10
1a001f1a:	d001      	beq.n	1a001f20 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a001f1c:	4644      	mov	r4, r8
1a001f1e:	e7ef      	b.n	1a001f00 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a001f20:	f001 ff6f 	bl	1a003e02 <__stdio_getchar>
               return i;
1a001f24:	4640      	mov	r0, r8
1a001f26:	e003      	b.n	1a001f30 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a001f28:	2313      	movs	r3, #19
1a001f2a:	6033      	str	r3, [r6, #0]
      return -1;
1a001f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a001f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a001f34:	2313      	movs	r3, #19
1a001f36:	6003      	str	r3, [r0, #0]
      return -1;
1a001f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001f3c:	4770      	bx	lr

1a001f3e <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a001f3e:	2902      	cmp	r1, #2
1a001f40:	d80c      	bhi.n	1a001f5c <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a001f42:	b570      	push	{r4, r5, r6, lr}
1a001f44:	461d      	mov	r5, r3
1a001f46:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001f48:	2400      	movs	r4, #0
1a001f4a:	e003      	b.n	1a001f54 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a001f4c:	5d30      	ldrb	r0, [r6, r4]
1a001f4e:	f001 ff53 	bl	1a003df8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a001f52:	3401      	adds	r4, #1
1a001f54:	42ac      	cmp	r4, r5
1a001f56:	d3f9      	bcc.n	1a001f4c <_write_r+0xe>
       return n;
1a001f58:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a001f5a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a001f5c:	2313      	movs	r3, #19
1a001f5e:	6003      	str	r3, [r0, #0]
       return -1;
1a001f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001f64:	4770      	bx	lr
1a001f66:	Address 0x000000001a001f66 is out of bounds.


1a001f68 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001f68:	4b05      	ldr	r3, [pc, #20]	; (1a001f80 <_sbrk_r+0x18>)
1a001f6a:	681b      	ldr	r3, [r3, #0]
1a001f6c:	b123      	cbz	r3, 1a001f78 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a001f6e:	4b04      	ldr	r3, [pc, #16]	; (1a001f80 <_sbrk_r+0x18>)
1a001f70:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a001f72:	4401      	add	r1, r0
1a001f74:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001f76:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001f78:	4b01      	ldr	r3, [pc, #4]	; (1a001f80 <_sbrk_r+0x18>)
1a001f7a:	4a02      	ldr	r2, [pc, #8]	; (1a001f84 <_sbrk_r+0x1c>)
1a001f7c:	601a      	str	r2, [r3, #0]
1a001f7e:	e7f6      	b.n	1a001f6e <_sbrk_r+0x6>
1a001f80:	10001b40 	.word	0x10001b40
1a001f84:	10005000 	.word	0x10005000

1a001f88 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a001f88:	b538      	push	{r3, r4, r5, lr}
1a001f8a:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a001f8c:	f010 0f07 	tst.w	r0, #7
1a001f90:	d002      	beq.n	1a001f98 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a001f92:	f020 0407 	bic.w	r4, r0, #7
1a001f96:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a001f98:	f000 fee6 	bl	1a002d68 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a001f9c:	4b13      	ldr	r3, [pc, #76]	; (1a001fec <pvPortMalloc+0x64>)
1a001f9e:	681b      	ldr	r3, [r3, #0]
1a001fa0:	b17b      	cbz	r3, 1a001fc2 <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a001fa2:	4b13      	ldr	r3, [pc, #76]	; (1a001ff0 <pvPortMalloc+0x68>)
1a001fa4:	681b      	ldr	r3, [r3, #0]
1a001fa6:	441c      	add	r4, r3
1a001fa8:	f242 72f7 	movw	r2, #10231	; 0x27f7
1a001fac:	4294      	cmp	r4, r2
1a001fae:	d80e      	bhi.n	1a001fce <pvPortMalloc+0x46>
1a001fb0:	42a3      	cmp	r3, r4
1a001fb2:	d310      	bcc.n	1a001fd6 <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a001fb4:	f000 ff72 	bl	1a002e9c <xTaskResumeAll>
void *pvReturn = NULL;
1a001fb8:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a001fba:	f000 fc77 	bl	1a0028ac <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a001fbe:	4628      	mov	r0, r5
1a001fc0:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a001fc2:	4b0c      	ldr	r3, [pc, #48]	; (1a001ff4 <pvPortMalloc+0x6c>)
1a001fc4:	f023 0307 	bic.w	r3, r3, #7
1a001fc8:	4a08      	ldr	r2, [pc, #32]	; (1a001fec <pvPortMalloc+0x64>)
1a001fca:	6013      	str	r3, [r2, #0]
1a001fcc:	e7e9      	b.n	1a001fa2 <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a001fce:	f000 ff65 	bl	1a002e9c <xTaskResumeAll>
void *pvReturn = NULL;
1a001fd2:	2500      	movs	r5, #0
1a001fd4:	e7f1      	b.n	1a001fba <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a001fd6:	4a05      	ldr	r2, [pc, #20]	; (1a001fec <pvPortMalloc+0x64>)
1a001fd8:	6815      	ldr	r5, [r2, #0]
1a001fda:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a001fdc:	4b04      	ldr	r3, [pc, #16]	; (1a001ff0 <pvPortMalloc+0x68>)
1a001fde:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a001fe0:	f000 ff5c 	bl	1a002e9c <xTaskResumeAll>
		if( pvReturn == NULL )
1a001fe4:	2d00      	cmp	r5, #0
1a001fe6:	d1ea      	bne.n	1a001fbe <pvPortMalloc+0x36>
1a001fe8:	e7e7      	b.n	1a001fba <pvPortMalloc+0x32>
1a001fea:	bf00      	nop
1a001fec:	10001b44 	.word	0x10001b44
1a001ff0:	10004348 	.word	0x10004348
1a001ff4:	10001b50 	.word	0x10001b50

1a001ff8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a001ff8:	b140      	cbz	r0, 1a00200c <vPortFree+0x14>
	__asm volatile
1a001ffa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ffe:	f383 8811 	msr	BASEPRI, r3
1a002002:	f3bf 8f6f 	isb	sy
1a002006:	f3bf 8f4f 	dsb	sy
1a00200a:	e7fe      	b.n	1a00200a <vPortFree+0x12>
}
1a00200c:	4770      	bx	lr

1a00200e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00200e:	b510      	push	{r4, lr}
1a002010:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a002012:	f001 fc9f 	bl	1a003954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a002016:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a002018:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00201a:	429a      	cmp	r2, r3
1a00201c:	d004      	beq.n	1a002028 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00201e:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a002020:	f001 fcba 	bl	1a003998 <vPortExitCritical>

	return xReturn;
}
1a002024:	4620      	mov	r0, r4
1a002026:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a002028:	2401      	movs	r4, #1
1a00202a:	e7f9      	b.n	1a002020 <prvIsQueueFull+0x12>

1a00202c <prvIsQueueEmpty>:
{
1a00202c:	b510      	push	{r4, lr}
1a00202e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a002030:	f001 fc90 	bl	1a003954 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a002034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002036:	b123      	cbz	r3, 1a002042 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a002038:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00203a:	f001 fcad 	bl	1a003998 <vPortExitCritical>
}
1a00203e:	4620      	mov	r0, r4
1a002040:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a002042:	2401      	movs	r4, #1
1a002044:	e7f9      	b.n	1a00203a <prvIsQueueEmpty+0xe>

1a002046 <prvCopyDataToQueue>:
{
1a002046:	b570      	push	{r4, r5, r6, lr}
1a002048:	4604      	mov	r4, r0
1a00204a:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00204c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00204e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a002050:	b95a      	cbnz	r2, 1a00206a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a002052:	6803      	ldr	r3, [r0, #0]
1a002054:	b11b      	cbz	r3, 1a00205e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a002056:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a002058:	3501      	adds	r5, #1
1a00205a:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a00205c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a00205e:	6840      	ldr	r0, [r0, #4]
1a002060:	f001 f94e 	bl	1a003300 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a002064:	2300      	movs	r3, #0
1a002066:	6063      	str	r3, [r4, #4]
1a002068:	e7f6      	b.n	1a002058 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a00206a:	b96e      	cbnz	r6, 1a002088 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00206c:	6880      	ldr	r0, [r0, #8]
1a00206e:	f003 fd9f 	bl	1a005bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a002072:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a002074:	68a3      	ldr	r3, [r4, #8]
1a002076:	4413      	add	r3, r2
1a002078:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00207a:	6862      	ldr	r2, [r4, #4]
1a00207c:	4293      	cmp	r3, r2
1a00207e:	d319      	bcc.n	1a0020b4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a002080:	6823      	ldr	r3, [r4, #0]
1a002082:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a002084:	2000      	movs	r0, #0
1a002086:	e7e7      	b.n	1a002058 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002088:	68c0      	ldr	r0, [r0, #12]
1a00208a:	f003 fd91 	bl	1a005bb0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a00208e:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a002090:	4252      	negs	r2, r2
1a002092:	68e3      	ldr	r3, [r4, #12]
1a002094:	4413      	add	r3, r2
1a002096:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a002098:	6821      	ldr	r1, [r4, #0]
1a00209a:	428b      	cmp	r3, r1
1a00209c:	d202      	bcs.n	1a0020a4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a00209e:	6863      	ldr	r3, [r4, #4]
1a0020a0:	441a      	add	r2, r3
1a0020a2:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0020a4:	2e02      	cmp	r6, #2
1a0020a6:	d001      	beq.n	1a0020ac <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0020a8:	2000      	movs	r0, #0
1a0020aa:	e7d5      	b.n	1a002058 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0020ac:	b125      	cbz	r5, 1a0020b8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0020ae:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0020b0:	2000      	movs	r0, #0
1a0020b2:	e7d1      	b.n	1a002058 <prvCopyDataToQueue+0x12>
1a0020b4:	2000      	movs	r0, #0
1a0020b6:	e7cf      	b.n	1a002058 <prvCopyDataToQueue+0x12>
1a0020b8:	2000      	movs	r0, #0
1a0020ba:	e7cd      	b.n	1a002058 <prvCopyDataToQueue+0x12>

1a0020bc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a0020bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0020be:	b172      	cbz	r2, 1a0020de <prvCopyDataFromQueue+0x22>
{
1a0020c0:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a0020c2:	68c3      	ldr	r3, [r0, #12]
1a0020c4:	4413      	add	r3, r2
1a0020c6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a0020c8:	6844      	ldr	r4, [r0, #4]
1a0020ca:	42a3      	cmp	r3, r4
1a0020cc:	d301      	bcc.n	1a0020d2 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0020ce:	6803      	ldr	r3, [r0, #0]
1a0020d0:	60c3      	str	r3, [r0, #12]
1a0020d2:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0020d4:	68c1      	ldr	r1, [r0, #12]
1a0020d6:	4620      	mov	r0, r4
1a0020d8:	f003 fd6a 	bl	1a005bb0 <memcpy>
}
1a0020dc:	bd10      	pop	{r4, pc}
1a0020de:	4770      	bx	lr

1a0020e0 <prvUnlockQueue>:
{
1a0020e0:	b538      	push	{r3, r4, r5, lr}
1a0020e2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0020e4:	f001 fc36 	bl	1a003954 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0020e8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0020ec:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0020ee:	e003      	b.n	1a0020f8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0020f0:	f001 f8f0 	bl	1a0032d4 <vTaskMissedYield>
			--cTxLock;
1a0020f4:	3c01      	subs	r4, #1
1a0020f6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0020f8:	2c00      	cmp	r4, #0
1a0020fa:	dd08      	ble.n	1a00210e <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0020fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0020fe:	b133      	cbz	r3, 1a00210e <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a002100:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a002104:	f001 f854 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a002108:	2800      	cmp	r0, #0
1a00210a:	d0f3      	beq.n	1a0020f4 <prvUnlockQueue+0x14>
1a00210c:	e7f0      	b.n	1a0020f0 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a00210e:	23ff      	movs	r3, #255	; 0xff
1a002110:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a002114:	f001 fc40 	bl	1a003998 <vPortExitCritical>
	taskENTER_CRITICAL();
1a002118:	f001 fc1c 	bl	1a003954 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00211c:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a002120:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a002122:	e003      	b.n	1a00212c <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a002124:	f001 f8d6 	bl	1a0032d4 <vTaskMissedYield>
				--cRxLock;
1a002128:	3c01      	subs	r4, #1
1a00212a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00212c:	2c00      	cmp	r4, #0
1a00212e:	dd08      	ble.n	1a002142 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a002130:	692b      	ldr	r3, [r5, #16]
1a002132:	b133      	cbz	r3, 1a002142 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a002134:	f105 0010 	add.w	r0, r5, #16
1a002138:	f001 f83a 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a00213c:	2800      	cmp	r0, #0
1a00213e:	d0f3      	beq.n	1a002128 <prvUnlockQueue+0x48>
1a002140:	e7f0      	b.n	1a002124 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a002142:	23ff      	movs	r3, #255	; 0xff
1a002144:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a002148:	f001 fc26 	bl	1a003998 <vPortExitCritical>
}
1a00214c:	bd38      	pop	{r3, r4, r5, pc}
1a00214e:	Address 0x000000001a00214e is out of bounds.


1a002150 <xQueueGenericReset>:
{
1a002150:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a002152:	b940      	cbnz	r0, 1a002166 <xQueueGenericReset+0x16>
1a002154:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002158:	f383 8811 	msr	BASEPRI, r3
1a00215c:	f3bf 8f6f 	isb	sy
1a002160:	f3bf 8f4f 	dsb	sy
1a002164:	e7fe      	b.n	1a002164 <xQueueGenericReset+0x14>
1a002166:	4604      	mov	r4, r0
1a002168:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00216a:	f001 fbf3 	bl	1a003954 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00216e:	6821      	ldr	r1, [r4, #0]
1a002170:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a002172:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002174:	fb03 1002 	mla	r0, r3, r2, r1
1a002178:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00217a:	2000      	movs	r0, #0
1a00217c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00217e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a002180:	3a01      	subs	r2, #1
1a002182:	fb02 1303 	mla	r3, r2, r3, r1
1a002186:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a002188:	23ff      	movs	r3, #255	; 0xff
1a00218a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00218e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a002192:	b9a5      	cbnz	r5, 1a0021be <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a002194:	6923      	ldr	r3, [r4, #16]
1a002196:	b91b      	cbnz	r3, 1a0021a0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a002198:	f001 fbfe 	bl	1a003998 <vPortExitCritical>
}
1a00219c:	2001      	movs	r0, #1
1a00219e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0021a0:	f104 0010 	add.w	r0, r4, #16
1a0021a4:	f001 f804 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a0021a8:	2800      	cmp	r0, #0
1a0021aa:	d0f5      	beq.n	1a002198 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a0021ac:	4b08      	ldr	r3, [pc, #32]	; (1a0021d0 <xQueueGenericReset+0x80>)
1a0021ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0021b2:	601a      	str	r2, [r3, #0]
1a0021b4:	f3bf 8f4f 	dsb	sy
1a0021b8:	f3bf 8f6f 	isb	sy
1a0021bc:	e7ec      	b.n	1a002198 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a0021be:	f104 0010 	add.w	r0, r4, #16
1a0021c2:	f000 fafc 	bl	1a0027be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a0021c6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0021ca:	f000 faf8 	bl	1a0027be <vListInitialise>
1a0021ce:	e7e3      	b.n	1a002198 <xQueueGenericReset+0x48>
1a0021d0:	e000ed04 	.word	0xe000ed04

1a0021d4 <prvInitialiseNewQueue>:
{
1a0021d4:	b538      	push	{r3, r4, r5, lr}
1a0021d6:	461d      	mov	r5, r3
1a0021d8:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0021da:	460b      	mov	r3, r1
1a0021dc:	b149      	cbz	r1, 1a0021f2 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0021de:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0021e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0021e2:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0021e4:	2101      	movs	r1, #1
1a0021e6:	4620      	mov	r0, r4
1a0021e8:	f7ff ffb2 	bl	1a002150 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0021ec:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0021f0:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0021f2:	6024      	str	r4, [r4, #0]
1a0021f4:	e7f4      	b.n	1a0021e0 <prvInitialiseNewQueue+0xc>

1a0021f6 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0021f6:	b940      	cbnz	r0, 1a00220a <xQueueGenericCreateStatic+0x14>
1a0021f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021fc:	f383 8811 	msr	BASEPRI, r3
1a002200:	f3bf 8f6f 	isb	sy
1a002204:	f3bf 8f4f 	dsb	sy
1a002208:	e7fe      	b.n	1a002208 <xQueueGenericCreateStatic+0x12>
	{
1a00220a:	b510      	push	{r4, lr}
1a00220c:	b084      	sub	sp, #16
1a00220e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a002210:	b153      	cbz	r3, 1a002228 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a002212:	b192      	cbz	r2, 1a00223a <xQueueGenericCreateStatic+0x44>
1a002214:	b989      	cbnz	r1, 1a00223a <xQueueGenericCreateStatic+0x44>
1a002216:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00221a:	f383 8811 	msr	BASEPRI, r3
1a00221e:	f3bf 8f6f 	isb	sy
1a002222:	f3bf 8f4f 	dsb	sy
1a002226:	e7fe      	b.n	1a002226 <xQueueGenericCreateStatic+0x30>
1a002228:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00222c:	f383 8811 	msr	BASEPRI, r3
1a002230:	f3bf 8f6f 	isb	sy
1a002234:	f3bf 8f4f 	dsb	sy
1a002238:	e7fe      	b.n	1a002238 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00223a:	b94a      	cbnz	r2, 1a002250 <xQueueGenericCreateStatic+0x5a>
1a00223c:	b141      	cbz	r1, 1a002250 <xQueueGenericCreateStatic+0x5a>
1a00223e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002242:	f383 8811 	msr	BASEPRI, r3
1a002246:	f3bf 8f6f 	isb	sy
1a00224a:	f3bf 8f4f 	dsb	sy
1a00224e:	e7fe      	b.n	1a00224e <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a002250:	2050      	movs	r0, #80	; 0x50
1a002252:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a002254:	9803      	ldr	r0, [sp, #12]
1a002256:	2850      	cmp	r0, #80	; 0x50
1a002258:	d008      	beq.n	1a00226c <xQueueGenericCreateStatic+0x76>
1a00225a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00225e:	f383 8811 	msr	BASEPRI, r3
1a002262:	f3bf 8f6f 	isb	sy
1a002266:	f3bf 8f4f 	dsb	sy
1a00226a:	e7fe      	b.n	1a00226a <xQueueGenericCreateStatic+0x74>
1a00226c:	4620      	mov	r0, r4
1a00226e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a002270:	2301      	movs	r3, #1
1a002272:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a002276:	9400      	str	r4, [sp, #0]
1a002278:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00227c:	f7ff ffaa 	bl	1a0021d4 <prvInitialiseNewQueue>
	}
1a002280:	4620      	mov	r0, r4
1a002282:	b004      	add	sp, #16
1a002284:	bd10      	pop	{r4, pc}

1a002286 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a002286:	b940      	cbnz	r0, 1a00229a <xQueueGenericCreate+0x14>
1a002288:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00228c:	f383 8811 	msr	BASEPRI, r3
1a002290:	f3bf 8f6f 	isb	sy
1a002294:	f3bf 8f4f 	dsb	sy
1a002298:	e7fe      	b.n	1a002298 <xQueueGenericCreate+0x12>
	{
1a00229a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00229c:	b083      	sub	sp, #12
1a00229e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a0022a0:	b111      	cbz	r1, 1a0022a8 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022a2:	fb01 f000 	mul.w	r0, r1, r0
1a0022a6:	e000      	b.n	1a0022aa <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a0022a8:	2000      	movs	r0, #0
1a0022aa:	4617      	mov	r7, r2
1a0022ac:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a0022ae:	3050      	adds	r0, #80	; 0x50
1a0022b0:	f7ff fe6a 	bl	1a001f88 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a0022b4:	4605      	mov	r5, r0
1a0022b6:	b150      	cbz	r0, 1a0022ce <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a0022b8:	2300      	movs	r3, #0
1a0022ba:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0022be:	9000      	str	r0, [sp, #0]
1a0022c0:	463b      	mov	r3, r7
1a0022c2:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a0022c6:	4621      	mov	r1, r4
1a0022c8:	4630      	mov	r0, r6
1a0022ca:	f7ff ff83 	bl	1a0021d4 <prvInitialiseNewQueue>
	}
1a0022ce:	4628      	mov	r0, r5
1a0022d0:	b003      	add	sp, #12
1a0022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0022d4 <xQueueGenericSend>:
{
1a0022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0022d6:	b085      	sub	sp, #20
1a0022d8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0022da:	b160      	cbz	r0, 1a0022f6 <xQueueGenericSend+0x22>
1a0022dc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0022de:	b999      	cbnz	r1, 1a002308 <xQueueGenericSend+0x34>
1a0022e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0022e2:	b18a      	cbz	r2, 1a002308 <xQueueGenericSend+0x34>
1a0022e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022e8:	f383 8811 	msr	BASEPRI, r3
1a0022ec:	f3bf 8f6f 	isb	sy
1a0022f0:	f3bf 8f4f 	dsb	sy
1a0022f4:	e7fe      	b.n	1a0022f4 <xQueueGenericSend+0x20>
1a0022f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022fa:	f383 8811 	msr	BASEPRI, r3
1a0022fe:	f3bf 8f6f 	isb	sy
1a002302:	f3bf 8f4f 	dsb	sy
1a002306:	e7fe      	b.n	1a002306 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a002308:	2b02      	cmp	r3, #2
1a00230a:	d10b      	bne.n	1a002324 <xQueueGenericSend+0x50>
1a00230c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00230e:	2a01      	cmp	r2, #1
1a002310:	d008      	beq.n	1a002324 <xQueueGenericSend+0x50>
1a002312:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002316:	f383 8811 	msr	BASEPRI, r3
1a00231a:	f3bf 8f6f 	isb	sy
1a00231e:	f3bf 8f4f 	dsb	sy
1a002322:	e7fe      	b.n	1a002322 <xQueueGenericSend+0x4e>
1a002324:	461e      	mov	r6, r3
1a002326:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a002328:	f000 ffda 	bl	1a0032e0 <xTaskGetSchedulerState>
1a00232c:	b950      	cbnz	r0, 1a002344 <xQueueGenericSend+0x70>
1a00232e:	9b01      	ldr	r3, [sp, #4]
1a002330:	b153      	cbz	r3, 1a002348 <xQueueGenericSend+0x74>
1a002332:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002336:	f383 8811 	msr	BASEPRI, r3
1a00233a:	f3bf 8f6f 	isb	sy
1a00233e:	f3bf 8f4f 	dsb	sy
1a002342:	e7fe      	b.n	1a002342 <xQueueGenericSend+0x6e>
1a002344:	2500      	movs	r5, #0
1a002346:	e03a      	b.n	1a0023be <xQueueGenericSend+0xea>
1a002348:	2500      	movs	r5, #0
1a00234a:	e038      	b.n	1a0023be <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00234c:	4632      	mov	r2, r6
1a00234e:	4639      	mov	r1, r7
1a002350:	4620      	mov	r0, r4
1a002352:	f7ff fe78 	bl	1a002046 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a002356:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002358:	b94b      	cbnz	r3, 1a00236e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a00235a:	b1a8      	cbz	r0, 1a002388 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a00235c:	4b3b      	ldr	r3, [pc, #236]	; (1a00244c <xQueueGenericSend+0x178>)
1a00235e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002362:	601a      	str	r2, [r3, #0]
1a002364:	f3bf 8f4f 	dsb	sy
1a002368:	f3bf 8f6f 	isb	sy
1a00236c:	e00c      	b.n	1a002388 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00236e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a002372:	f000 ff1d 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a002376:	b138      	cbz	r0, 1a002388 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a002378:	4b34      	ldr	r3, [pc, #208]	; (1a00244c <xQueueGenericSend+0x178>)
1a00237a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00237e:	601a      	str	r2, [r3, #0]
1a002380:	f3bf 8f4f 	dsb	sy
1a002384:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a002388:	f001 fb06 	bl	1a003998 <vPortExitCritical>
				return pdPASS;
1a00238c:	2001      	movs	r0, #1
}
1a00238e:	b005      	add	sp, #20
1a002390:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a002392:	f001 fb01 	bl	1a003998 <vPortExitCritical>
					return errQUEUE_FULL;
1a002396:	2000      	movs	r0, #0
1a002398:	e7f9      	b.n	1a00238e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00239a:	a802      	add	r0, sp, #8
1a00239c:	f000 ff4e 	bl	1a00323c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0023a0:	2501      	movs	r5, #1
1a0023a2:	e019      	b.n	1a0023d8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a0023a4:	2300      	movs	r3, #0
1a0023a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0023aa:	e021      	b.n	1a0023f0 <xQueueGenericSend+0x11c>
1a0023ac:	2300      	movs	r3, #0
1a0023ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0023b2:	e023      	b.n	1a0023fc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a0023b4:	4620      	mov	r0, r4
1a0023b6:	f7ff fe93 	bl	1a0020e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0023ba:	f000 fd6f 	bl	1a002e9c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a0023be:	f001 fac9 	bl	1a003954 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0023c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0023c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0023c6:	429a      	cmp	r2, r3
1a0023c8:	d3c0      	bcc.n	1a00234c <xQueueGenericSend+0x78>
1a0023ca:	2e02      	cmp	r6, #2
1a0023cc:	d0be      	beq.n	1a00234c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0023ce:	9b01      	ldr	r3, [sp, #4]
1a0023d0:	2b00      	cmp	r3, #0
1a0023d2:	d0de      	beq.n	1a002392 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0023d4:	2d00      	cmp	r5, #0
1a0023d6:	d0e0      	beq.n	1a00239a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0023d8:	f001 fade 	bl	1a003998 <vPortExitCritical>
		vTaskSuspendAll();
1a0023dc:	f000 fcc4 	bl	1a002d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0023e0:	f001 fab8 	bl	1a003954 <vPortEnterCritical>
1a0023e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0023e8:	b25b      	sxtb	r3, r3
1a0023ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0023ee:	d0d9      	beq.n	1a0023a4 <xQueueGenericSend+0xd0>
1a0023f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0023f4:	b25b      	sxtb	r3, r3
1a0023f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0023fa:	d0d7      	beq.n	1a0023ac <xQueueGenericSend+0xd8>
1a0023fc:	f001 facc 	bl	1a003998 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a002400:	a901      	add	r1, sp, #4
1a002402:	a802      	add	r0, sp, #8
1a002404:	f000 ff26 	bl	1a003254 <xTaskCheckForTimeOut>
1a002408:	b9c8      	cbnz	r0, 1a00243e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a00240a:	4620      	mov	r0, r4
1a00240c:	f7ff fdff 	bl	1a00200e <prvIsQueueFull>
1a002410:	2800      	cmp	r0, #0
1a002412:	d0cf      	beq.n	1a0023b4 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a002414:	9901      	ldr	r1, [sp, #4]
1a002416:	f104 0010 	add.w	r0, r4, #16
1a00241a:	f000 fe95 	bl	1a003148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00241e:	4620      	mov	r0, r4
1a002420:	f7ff fe5e 	bl	1a0020e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a002424:	f000 fd3a 	bl	1a002e9c <xTaskResumeAll>
1a002428:	2800      	cmp	r0, #0
1a00242a:	d1c8      	bne.n	1a0023be <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a00242c:	4b07      	ldr	r3, [pc, #28]	; (1a00244c <xQueueGenericSend+0x178>)
1a00242e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002432:	601a      	str	r2, [r3, #0]
1a002434:	f3bf 8f4f 	dsb	sy
1a002438:	f3bf 8f6f 	isb	sy
1a00243c:	e7bf      	b.n	1a0023be <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00243e:	4620      	mov	r0, r4
1a002440:	f7ff fe4e 	bl	1a0020e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a002444:	f000 fd2a 	bl	1a002e9c <xTaskResumeAll>
			return errQUEUE_FULL;
1a002448:	2000      	movs	r0, #0
1a00244a:	e7a0      	b.n	1a00238e <xQueueGenericSend+0xba>
1a00244c:	e000ed04 	.word	0xe000ed04

1a002450 <xQueueGenericSendFromISR>:
{
1a002450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a002454:	b160      	cbz	r0, 1a002470 <xQueueGenericSendFromISR+0x20>
1a002456:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a002458:	b999      	cbnz	r1, 1a002482 <xQueueGenericSendFromISR+0x32>
1a00245a:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a00245c:	b188      	cbz	r0, 1a002482 <xQueueGenericSendFromISR+0x32>
1a00245e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002462:	f383 8811 	msr	BASEPRI, r3
1a002466:	f3bf 8f6f 	isb	sy
1a00246a:	f3bf 8f4f 	dsb	sy
1a00246e:	e7fe      	b.n	1a00246e <xQueueGenericSendFromISR+0x1e>
1a002470:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002474:	f383 8811 	msr	BASEPRI, r3
1a002478:	f3bf 8f6f 	isb	sy
1a00247c:	f3bf 8f4f 	dsb	sy
1a002480:	e7fe      	b.n	1a002480 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a002482:	2b02      	cmp	r3, #2
1a002484:	d10b      	bne.n	1a00249e <xQueueGenericSendFromISR+0x4e>
1a002486:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002488:	2801      	cmp	r0, #1
1a00248a:	d008      	beq.n	1a00249e <xQueueGenericSendFromISR+0x4e>
1a00248c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002490:	f383 8811 	msr	BASEPRI, r3
1a002494:	f3bf 8f6f 	isb	sy
1a002498:	f3bf 8f4f 	dsb	sy
1a00249c:	e7fe      	b.n	1a00249c <xQueueGenericSendFromISR+0x4c>
1a00249e:	461f      	mov	r7, r3
1a0024a0:	4690      	mov	r8, r2
1a0024a2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0024a4:	f001 fb80 	bl	1a003ba8 <vPortValidateInterruptPriority>
	__asm volatile
1a0024a8:	f3ef 8611 	mrs	r6, BASEPRI
1a0024ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024b0:	f383 8811 	msr	BASEPRI, r3
1a0024b4:	f3bf 8f6f 	isb	sy
1a0024b8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0024bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0024be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0024c0:	429a      	cmp	r2, r3
1a0024c2:	d303      	bcc.n	1a0024cc <xQueueGenericSendFromISR+0x7c>
1a0024c4:	2f02      	cmp	r7, #2
1a0024c6:	d001      	beq.n	1a0024cc <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a0024c8:	2000      	movs	r0, #0
1a0024ca:	e00f      	b.n	1a0024ec <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0024cc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0024d0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0024d2:	463a      	mov	r2, r7
1a0024d4:	4649      	mov	r1, r9
1a0024d6:	4620      	mov	r0, r4
1a0024d8:	f7ff fdb5 	bl	1a002046 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0024dc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0024e0:	d008      	beq.n	1a0024f4 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0024e2:	1c6b      	adds	r3, r5, #1
1a0024e4:	b25b      	sxtb	r3, r3
1a0024e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0024ea:	2001      	movs	r0, #1
	__asm volatile
1a0024ec:	f386 8811 	msr	BASEPRI, r6
}
1a0024f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0024f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0024f6:	b15b      	cbz	r3, 1a002510 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0024f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0024fc:	f000 fe58 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a002500:	b140      	cbz	r0, 1a002514 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a002502:	f1b8 0f00 	cmp.w	r8, #0
1a002506:	d007      	beq.n	1a002518 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a002508:	2001      	movs	r0, #1
1a00250a:	f8c8 0000 	str.w	r0, [r8]
1a00250e:	e7ed      	b.n	1a0024ec <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a002510:	2001      	movs	r0, #1
1a002512:	e7eb      	b.n	1a0024ec <xQueueGenericSendFromISR+0x9c>
1a002514:	2001      	movs	r0, #1
1a002516:	e7e9      	b.n	1a0024ec <xQueueGenericSendFromISR+0x9c>
1a002518:	2001      	movs	r0, #1
1a00251a:	e7e7      	b.n	1a0024ec <xQueueGenericSendFromISR+0x9c>

1a00251c <xQueueReceive>:
{
1a00251c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00251e:	b085      	sub	sp, #20
1a002520:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a002522:	b160      	cbz	r0, 1a00253e <xQueueReceive+0x22>
1a002524:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a002526:	b999      	cbnz	r1, 1a002550 <xQueueReceive+0x34>
1a002528:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00252a:	b18b      	cbz	r3, 1a002550 <xQueueReceive+0x34>
	__asm volatile
1a00252c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002530:	f383 8811 	msr	BASEPRI, r3
1a002534:	f3bf 8f6f 	isb	sy
1a002538:	f3bf 8f4f 	dsb	sy
1a00253c:	e7fe      	b.n	1a00253c <xQueueReceive+0x20>
1a00253e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002542:	f383 8811 	msr	BASEPRI, r3
1a002546:	f3bf 8f6f 	isb	sy
1a00254a:	f3bf 8f4f 	dsb	sy
1a00254e:	e7fe      	b.n	1a00254e <xQueueReceive+0x32>
1a002550:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a002552:	f000 fec5 	bl	1a0032e0 <xTaskGetSchedulerState>
1a002556:	b950      	cbnz	r0, 1a00256e <xQueueReceive+0x52>
1a002558:	9b01      	ldr	r3, [sp, #4]
1a00255a:	b153      	cbz	r3, 1a002572 <xQueueReceive+0x56>
1a00255c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002560:	f383 8811 	msr	BASEPRI, r3
1a002564:	f3bf 8f6f 	isb	sy
1a002568:	f3bf 8f4f 	dsb	sy
1a00256c:	e7fe      	b.n	1a00256c <xQueueReceive+0x50>
1a00256e:	2600      	movs	r6, #0
1a002570:	e03e      	b.n	1a0025f0 <xQueueReceive+0xd4>
1a002572:	2600      	movs	r6, #0
1a002574:	e03c      	b.n	1a0025f0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a002576:	4639      	mov	r1, r7
1a002578:	4620      	mov	r0, r4
1a00257a:	f7ff fd9f 	bl	1a0020bc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00257e:	3d01      	subs	r5, #1
1a002580:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a002582:	6923      	ldr	r3, [r4, #16]
1a002584:	b923      	cbnz	r3, 1a002590 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a002586:	f001 fa07 	bl	1a003998 <vPortExitCritical>
				return pdPASS;
1a00258a:	2001      	movs	r0, #1
}
1a00258c:	b005      	add	sp, #20
1a00258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a002590:	f104 0010 	add.w	r0, r4, #16
1a002594:	f000 fe0c 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a002598:	2800      	cmp	r0, #0
1a00259a:	d0f4      	beq.n	1a002586 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a00259c:	4b34      	ldr	r3, [pc, #208]	; (1a002670 <xQueueReceive+0x154>)
1a00259e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0025a2:	601a      	str	r2, [r3, #0]
1a0025a4:	f3bf 8f4f 	dsb	sy
1a0025a8:	f3bf 8f6f 	isb	sy
1a0025ac:	e7eb      	b.n	1a002586 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0025ae:	f001 f9f3 	bl	1a003998 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0025b2:	2000      	movs	r0, #0
1a0025b4:	e7ea      	b.n	1a00258c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0025b6:	a802      	add	r0, sp, #8
1a0025b8:	f000 fe40 	bl	1a00323c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0025bc:	2601      	movs	r6, #1
1a0025be:	e021      	b.n	1a002604 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a0025c0:	2300      	movs	r3, #0
1a0025c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0025c6:	e029      	b.n	1a00261c <xQueueReceive+0x100>
1a0025c8:	2300      	movs	r3, #0
1a0025ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0025ce:	e02b      	b.n	1a002628 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0025d0:	4620      	mov	r0, r4
1a0025d2:	f7ff fd85 	bl	1a0020e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0025d6:	f000 fc61 	bl	1a002e9c <xTaskResumeAll>
1a0025da:	e009      	b.n	1a0025f0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0025dc:	4620      	mov	r0, r4
1a0025de:	f7ff fd7f 	bl	1a0020e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0025e2:	f000 fc5b 	bl	1a002e9c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0025e6:	4620      	mov	r0, r4
1a0025e8:	f7ff fd20 	bl	1a00202c <prvIsQueueEmpty>
1a0025ec:	2800      	cmp	r0, #0
1a0025ee:	d13d      	bne.n	1a00266c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0025f0:	f001 f9b0 	bl	1a003954 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0025f4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0025f6:	2d00      	cmp	r5, #0
1a0025f8:	d1bd      	bne.n	1a002576 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0025fa:	9b01      	ldr	r3, [sp, #4]
1a0025fc:	2b00      	cmp	r3, #0
1a0025fe:	d0d6      	beq.n	1a0025ae <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a002600:	2e00      	cmp	r6, #0
1a002602:	d0d8      	beq.n	1a0025b6 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a002604:	f001 f9c8 	bl	1a003998 <vPortExitCritical>
		vTaskSuspendAll();
1a002608:	f000 fbae 	bl	1a002d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00260c:	f001 f9a2 	bl	1a003954 <vPortEnterCritical>
1a002610:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a002614:	b25b      	sxtb	r3, r3
1a002616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00261a:	d0d1      	beq.n	1a0025c0 <xQueueReceive+0xa4>
1a00261c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a002620:	b25b      	sxtb	r3, r3
1a002622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002626:	d0cf      	beq.n	1a0025c8 <xQueueReceive+0xac>
1a002628:	f001 f9b6 	bl	1a003998 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a00262c:	a901      	add	r1, sp, #4
1a00262e:	a802      	add	r0, sp, #8
1a002630:	f000 fe10 	bl	1a003254 <xTaskCheckForTimeOut>
1a002634:	2800      	cmp	r0, #0
1a002636:	d1d1      	bne.n	1a0025dc <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a002638:	4620      	mov	r0, r4
1a00263a:	f7ff fcf7 	bl	1a00202c <prvIsQueueEmpty>
1a00263e:	2800      	cmp	r0, #0
1a002640:	d0c6      	beq.n	1a0025d0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a002642:	9901      	ldr	r1, [sp, #4]
1a002644:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a002648:	f000 fd7e 	bl	1a003148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a00264c:	4620      	mov	r0, r4
1a00264e:	f7ff fd47 	bl	1a0020e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a002652:	f000 fc23 	bl	1a002e9c <xTaskResumeAll>
1a002656:	2800      	cmp	r0, #0
1a002658:	d1ca      	bne.n	1a0025f0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a00265a:	4b05      	ldr	r3, [pc, #20]	; (1a002670 <xQueueReceive+0x154>)
1a00265c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002660:	601a      	str	r2, [r3, #0]
1a002662:	f3bf 8f4f 	dsb	sy
1a002666:	f3bf 8f6f 	isb	sy
1a00266a:	e7c1      	b.n	1a0025f0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a00266c:	2000      	movs	r0, #0
1a00266e:	e78d      	b.n	1a00258c <xQueueReceive+0x70>
1a002670:	e000ed04 	.word	0xe000ed04

1a002674 <xQueueReceiveFromISR>:
{
1a002674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a002678:	b160      	cbz	r0, 1a002694 <xQueueReceiveFromISR+0x20>
1a00267a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00267c:	b999      	cbnz	r1, 1a0026a6 <xQueueReceiveFromISR+0x32>
1a00267e:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a002680:	b18b      	cbz	r3, 1a0026a6 <xQueueReceiveFromISR+0x32>
1a002682:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002686:	f383 8811 	msr	BASEPRI, r3
1a00268a:	f3bf 8f6f 	isb	sy
1a00268e:	f3bf 8f4f 	dsb	sy
1a002692:	e7fe      	b.n	1a002692 <xQueueReceiveFromISR+0x1e>
1a002694:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002698:	f383 8811 	msr	BASEPRI, r3
1a00269c:	f3bf 8f6f 	isb	sy
1a0026a0:	f3bf 8f4f 	dsb	sy
1a0026a4:	e7fe      	b.n	1a0026a4 <xQueueReceiveFromISR+0x30>
1a0026a6:	4617      	mov	r7, r2
1a0026a8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a0026aa:	f001 fa7d 	bl	1a003ba8 <vPortValidateInterruptPriority>
	__asm volatile
1a0026ae:	f3ef 8611 	mrs	r6, BASEPRI
1a0026b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026b6:	f383 8811 	msr	BASEPRI, r3
1a0026ba:	f3bf 8f6f 	isb	sy
1a0026be:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0026c2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0026c6:	f1b8 0f00 	cmp.w	r8, #0
1a0026ca:	d01d      	beq.n	1a002708 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
1a0026cc:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a0026d0:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0026d2:	4649      	mov	r1, r9
1a0026d4:	4620      	mov	r0, r4
1a0026d6:	f7ff fcf1 	bl	1a0020bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0026da:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0026de:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a0026e0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0026e4:	d005      	beq.n	1a0026f2 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a0026e6:	1c6b      	adds	r3, r5, #1
1a0026e8:	b25b      	sxtb	r3, r3
1a0026ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a0026ee:	2001      	movs	r0, #1
1a0026f0:	e00b      	b.n	1a00270a <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0026f2:	6923      	ldr	r3, [r4, #16]
1a0026f4:	b16b      	cbz	r3, 1a002712 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0026f6:	f104 0010 	add.w	r0, r4, #16
1a0026fa:	f000 fd59 	bl	1a0031b0 <xTaskRemoveFromEventList>
1a0026fe:	b150      	cbz	r0, 1a002716 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
1a002700:	b15f      	cbz	r7, 1a00271a <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a002702:	2001      	movs	r0, #1
1a002704:	6038      	str	r0, [r7, #0]
1a002706:	e000      	b.n	1a00270a <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
1a002708:	2000      	movs	r0, #0
	__asm volatile
1a00270a:	f386 8811 	msr	BASEPRI, r6
}
1a00270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
1a002712:	2001      	movs	r0, #1
1a002714:	e7f9      	b.n	1a00270a <xQueueReceiveFromISR+0x96>
1a002716:	2001      	movs	r0, #1
1a002718:	e7f7      	b.n	1a00270a <xQueueReceiveFromISR+0x96>
1a00271a:	2001      	movs	r0, #1
1a00271c:	e7f5      	b.n	1a00270a <xQueueReceiveFromISR+0x96>

1a00271e <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a00271e:	b940      	cbnz	r0, 1a002732 <uxQueueMessagesWaiting+0x14>
	__asm volatile
1a002720:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002724:	f383 8811 	msr	BASEPRI, r3
1a002728:	f3bf 8f6f 	isb	sy
1a00272c:	f3bf 8f4f 	dsb	sy
1a002730:	e7fe      	b.n	1a002730 <uxQueueMessagesWaiting+0x12>
{
1a002732:	b510      	push	{r4, lr}
1a002734:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a002736:	f001 f90d 	bl	1a003954 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a00273a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a00273c:	f001 f92c 	bl	1a003998 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a002740:	4620      	mov	r0, r4
1a002742:	bd10      	pop	{r4, pc}

1a002744 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a002744:	2300      	movs	r3, #0
1a002746:	2b07      	cmp	r3, #7
1a002748:	d80c      	bhi.n	1a002764 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a00274a:	4a07      	ldr	r2, [pc, #28]	; (1a002768 <vQueueAddToRegistry+0x24>)
1a00274c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a002750:	b10a      	cbz	r2, 1a002756 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a002752:	3301      	adds	r3, #1
1a002754:	e7f7      	b.n	1a002746 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a002756:	4a04      	ldr	r2, [pc, #16]	; (1a002768 <vQueueAddToRegistry+0x24>)
1a002758:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a00275c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a002760:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a002762:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a002764:	4770      	bx	lr
1a002766:	bf00      	nop
1a002768:	10004fb8 	.word	0x10004fb8

1a00276c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a00276c:	b570      	push	{r4, r5, r6, lr}
1a00276e:	4604      	mov	r4, r0
1a002770:	460d      	mov	r5, r1
1a002772:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a002774:	f001 f8ee 	bl	1a003954 <vPortEnterCritical>
1a002778:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00277c:	b25b      	sxtb	r3, r3
1a00277e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002782:	d00d      	beq.n	1a0027a0 <vQueueWaitForMessageRestricted+0x34>
1a002784:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a002788:	b25b      	sxtb	r3, r3
1a00278a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00278e:	d00b      	beq.n	1a0027a8 <vQueueWaitForMessageRestricted+0x3c>
1a002790:	f001 f902 	bl	1a003998 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a002794:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002796:	b15b      	cbz	r3, 1a0027b0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a002798:	4620      	mov	r0, r4
1a00279a:	f7ff fca1 	bl	1a0020e0 <prvUnlockQueue>
	}
1a00279e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0027a0:	2300      	movs	r3, #0
1a0027a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0027a6:	e7ed      	b.n	1a002784 <vQueueWaitForMessageRestricted+0x18>
1a0027a8:	2300      	movs	r3, #0
1a0027aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0027ae:	e7ef      	b.n	1a002790 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0027b0:	4632      	mov	r2, r6
1a0027b2:	4629      	mov	r1, r5
1a0027b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0027b8:	f000 fcde 	bl	1a003178 <vTaskPlaceOnEventListRestricted>
1a0027bc:	e7ec      	b.n	1a002798 <vQueueWaitForMessageRestricted+0x2c>

1a0027be <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0027be:	f100 0308 	add.w	r3, r0, #8
1a0027c2:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0027c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0027c8:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0027ca:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0027cc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0027ce:	2300      	movs	r3, #0
1a0027d0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0027d2:	4770      	bx	lr

1a0027d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0027d4:	2300      	movs	r3, #0
1a0027d6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0027d8:	4770      	bx	lr

1a0027da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0027da:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0027dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0027de:	689a      	ldr	r2, [r3, #8]
1a0027e0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0027e2:	689a      	ldr	r2, [r3, #8]
1a0027e4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0027e6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0027e8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0027ea:	6803      	ldr	r3, [r0, #0]
1a0027ec:	3301      	adds	r3, #1
1a0027ee:	6003      	str	r3, [r0, #0]
}
1a0027f0:	4770      	bx	lr

1a0027f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0027f2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0027f4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0027f6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0027fa:	d002      	beq.n	1a002802 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0027fc:	f100 0208 	add.w	r2, r0, #8
1a002800:	e002      	b.n	1a002808 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a002802:	6902      	ldr	r2, [r0, #16]
1a002804:	e004      	b.n	1a002810 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a002806:	461a      	mov	r2, r3
1a002808:	6853      	ldr	r3, [r2, #4]
1a00280a:	681c      	ldr	r4, [r3, #0]
1a00280c:	42ac      	cmp	r4, r5
1a00280e:	d9fa      	bls.n	1a002806 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a002810:	6853      	ldr	r3, [r2, #4]
1a002812:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a002814:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a002816:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a002818:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00281a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00281c:	6803      	ldr	r3, [r0, #0]
1a00281e:	3301      	adds	r3, #1
1a002820:	6003      	str	r3, [r0, #0]
}
1a002822:	bc30      	pop	{r4, r5}
1a002824:	4770      	bx	lr

1a002826 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a002826:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a002828:	6842      	ldr	r2, [r0, #4]
1a00282a:	6881      	ldr	r1, [r0, #8]
1a00282c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00282e:	6882      	ldr	r2, [r0, #8]
1a002830:	6841      	ldr	r1, [r0, #4]
1a002832:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a002834:	685a      	ldr	r2, [r3, #4]
1a002836:	4282      	cmp	r2, r0
1a002838:	d006      	beq.n	1a002848 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00283a:	2200      	movs	r2, #0
1a00283c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00283e:	681a      	ldr	r2, [r3, #0]
1a002840:	3a01      	subs	r2, #1
1a002842:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a002844:	6818      	ldr	r0, [r3, #0]
}
1a002846:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a002848:	6882      	ldr	r2, [r0, #8]
1a00284a:	605a      	str	r2, [r3, #4]
1a00284c:	e7f5      	b.n	1a00283a <uxListRemove+0x14>
1a00284e:	Address 0x000000001a00284e is out of bounds.


1a002850 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a002850:	4b03      	ldr	r3, [pc, #12]	; (1a002860 <vApplicationGetIdleTaskMemory+0x10>)
1a002852:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a002854:	4b03      	ldr	r3, [pc, #12]	; (1a002864 <vApplicationGetIdleTaskMemory+0x14>)
1a002856:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a002858:	235a      	movs	r3, #90	; 0x5a
1a00285a:	6013      	str	r3, [r2, #0]
}
1a00285c:	4770      	bx	lr
1a00285e:	bf00      	nop
1a002860:	10004a54 	.word	0x10004a54
1a002864:	1000434c 	.word	0x1000434c

1a002868 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a002868:	4b03      	ldr	r3, [pc, #12]	; (1a002878 <vApplicationGetTimerTaskMemory+0x10>)
1a00286a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a00286c:	4b03      	ldr	r3, [pc, #12]	; (1a00287c <vApplicationGetTimerTaskMemory+0x14>)
1a00286e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a002870:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a002874:	6013      	str	r3, [r2, #0]
1a002876:	4770      	bx	lr
1a002878:	10004ab4 	.word	0x10004ab4
1a00287c:	100044b4 	.word	0x100044b4

1a002880 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a002880:	b510      	push	{r4, lr}
1a002882:	b082      	sub	sp, #8
1a002884:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a002886:	9001      	str	r0, [sp, #4]
1a002888:	2300      	movs	r3, #0
1a00288a:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a00288c:	f001 f862 	bl	1a003954 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a002890:	9901      	ldr	r1, [sp, #4]
1a002892:	4622      	mov	r2, r4
1a002894:	4804      	ldr	r0, [pc, #16]	; (1a0028a8 <vAssertCalled+0x28>)
1a002896:	f003 fa47 	bl	1a005d28 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00289a:	9b00      	ldr	r3, [sp, #0]
1a00289c:	2b00      	cmp	r3, #0
1a00289e:	d0fc      	beq.n	1a00289a <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a0028a0:	f001 f87a 	bl	1a003998 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a0028a4:	b002      	add	sp, #8
1a0028a6:	bd10      	pop	{r4, pc}
1a0028a8:	1a006c1c 	.word	0x1a006c1c

1a0028ac <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0028ac:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0028ae:	4804      	ldr	r0, [pc, #16]	; (1a0028c0 <vApplicationMallocFailedHook+0x14>)
1a0028b0:	f003 faae 	bl	1a005e10 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0028b4:	4903      	ldr	r1, [pc, #12]	; (1a0028c4 <vApplicationMallocFailedHook+0x18>)
1a0028b6:	202c      	movs	r0, #44	; 0x2c
1a0028b8:	f7ff ffe2 	bl	1a002880 <vAssertCalled>
}
1a0028bc:	bd08      	pop	{r3, pc}
1a0028be:	bf00      	nop
1a0028c0:	1a006ba8 	.word	0x1a006ba8
1a0028c4:	1a006bcc 	.word	0x1a006bcc

1a0028c8 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0028c8:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0028ca:	4804      	ldr	r0, [pc, #16]	; (1a0028dc <vApplicationStackOverflowHook+0x14>)
1a0028cc:	f003 fa2c 	bl	1a005d28 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0028d0:	4903      	ldr	r1, [pc, #12]	; (1a0028e0 <vApplicationStackOverflowHook+0x18>)
1a0028d2:	2050      	movs	r0, #80	; 0x50
1a0028d4:	f7ff ffd4 	bl	1a002880 <vAssertCalled>
}
1a0028d8:	bd08      	pop	{r3, pc}
1a0028da:	bf00      	nop
1a0028dc:	1a006bec 	.word	0x1a006bec
1a0028e0:	1a006bcc 	.word	0x1a006bcc

1a0028e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0028e4:	4b08      	ldr	r3, [pc, #32]	; (1a002908 <prvResetNextTaskUnblockTime+0x24>)
1a0028e6:	681b      	ldr	r3, [r3, #0]
1a0028e8:	681b      	ldr	r3, [r3, #0]
1a0028ea:	b13b      	cbz	r3, 1a0028fc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0028ec:	4b06      	ldr	r3, [pc, #24]	; (1a002908 <prvResetNextTaskUnblockTime+0x24>)
1a0028ee:	681b      	ldr	r3, [r3, #0]
1a0028f0:	68db      	ldr	r3, [r3, #12]
1a0028f2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0028f4:	685a      	ldr	r2, [r3, #4]
1a0028f6:	4b05      	ldr	r3, [pc, #20]	; (1a00290c <prvResetNextTaskUnblockTime+0x28>)
1a0028f8:	601a      	str	r2, [r3, #0]
	}
}
1a0028fa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0028fc:	4b03      	ldr	r3, [pc, #12]	; (1a00290c <prvResetNextTaskUnblockTime+0x28>)
1a0028fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002902:	601a      	str	r2, [r3, #0]
1a002904:	4770      	bx	lr
1a002906:	bf00      	nop
1a002908:	10004b18 	.word	0x10004b18
1a00290c:	10004bec 	.word	0x10004bec

1a002910 <prvInitialiseNewTask>:
{
1a002910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002914:	4681      	mov	r9, r0
1a002916:	460d      	mov	r5, r1
1a002918:	4617      	mov	r7, r2
1a00291a:	469a      	mov	sl, r3
1a00291c:	9e08      	ldr	r6, [sp, #32]
1a00291e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a002922:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a002924:	0092      	lsls	r2, r2, #2
1a002926:	21a5      	movs	r1, #165	; 0xa5
1a002928:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00292a:	f003 f94c 	bl	1a005bc6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00292e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002930:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a002934:	3a01      	subs	r2, #1
1a002936:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00293a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00293e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a002940:	2300      	movs	r3, #0
1a002942:	2b0f      	cmp	r3, #15
1a002944:	d807      	bhi.n	1a002956 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a002946:	5ce9      	ldrb	r1, [r5, r3]
1a002948:	18e2      	adds	r2, r4, r3
1a00294a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00294e:	5cea      	ldrb	r2, [r5, r3]
1a002950:	b10a      	cbz	r2, 1a002956 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a002952:	3301      	adds	r3, #1
1a002954:	e7f5      	b.n	1a002942 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a002956:	2300      	movs	r3, #0
1a002958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00295c:	2e06      	cmp	r6, #6
1a00295e:	d900      	bls.n	1a002962 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a002960:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a002962:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a002964:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a002966:	2500      	movs	r5, #0
1a002968:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00296a:	1d20      	adds	r0, r4, #4
1a00296c:	f7ff ff32 	bl	1a0027d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a002970:	f104 0018 	add.w	r0, r4, #24
1a002974:	f7ff ff2e 	bl	1a0027d4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a002978:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00297a:	f1c6 0607 	rsb	r6, r6, #7
1a00297e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a002980:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a002982:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a002984:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a002988:	4652      	mov	r2, sl
1a00298a:	4649      	mov	r1, r9
1a00298c:	4638      	mov	r0, r7
1a00298e:	f000 ffb5 	bl	1a0038fc <pxPortInitialiseStack>
1a002992:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a002994:	f1b8 0f00 	cmp.w	r8, #0
1a002998:	d001      	beq.n	1a00299e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00299a:	f8c8 4000 	str.w	r4, [r8]
}
1a00299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0029a2:	Address 0x000000001a0029a2 is out of bounds.


1a0029a4 <prvInitialiseTaskLists>:
{
1a0029a4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0029a6:	2400      	movs	r4, #0
1a0029a8:	e007      	b.n	1a0029ba <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0029aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0029ae:	0093      	lsls	r3, r2, #2
1a0029b0:	480e      	ldr	r0, [pc, #56]	; (1a0029ec <prvInitialiseTaskLists+0x48>)
1a0029b2:	4418      	add	r0, r3
1a0029b4:	f7ff ff03 	bl	1a0027be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0029b8:	3401      	adds	r4, #1
1a0029ba:	2c06      	cmp	r4, #6
1a0029bc:	d9f5      	bls.n	1a0029aa <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0029be:	4d0c      	ldr	r5, [pc, #48]	; (1a0029f0 <prvInitialiseTaskLists+0x4c>)
1a0029c0:	4628      	mov	r0, r5
1a0029c2:	f7ff fefc 	bl	1a0027be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0029c6:	4c0b      	ldr	r4, [pc, #44]	; (1a0029f4 <prvInitialiseTaskLists+0x50>)
1a0029c8:	4620      	mov	r0, r4
1a0029ca:	f7ff fef8 	bl	1a0027be <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0029ce:	480a      	ldr	r0, [pc, #40]	; (1a0029f8 <prvInitialiseTaskLists+0x54>)
1a0029d0:	f7ff fef5 	bl	1a0027be <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0029d4:	4809      	ldr	r0, [pc, #36]	; (1a0029fc <prvInitialiseTaskLists+0x58>)
1a0029d6:	f7ff fef2 	bl	1a0027be <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0029da:	4809      	ldr	r0, [pc, #36]	; (1a002a00 <prvInitialiseTaskLists+0x5c>)
1a0029dc:	f7ff feef 	bl	1a0027be <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0029e0:	4b08      	ldr	r3, [pc, #32]	; (1a002a04 <prvInitialiseTaskLists+0x60>)
1a0029e2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0029e4:	4b08      	ldr	r3, [pc, #32]	; (1a002a08 <prvInitialiseTaskLists+0x64>)
1a0029e6:	601c      	str	r4, [r3, #0]
}
1a0029e8:	bd38      	pop	{r3, r4, r5, pc}
1a0029ea:	bf00      	nop
1a0029ec:	10004b20 	.word	0x10004b20
1a0029f0:	10004bc4 	.word	0x10004bc4
1a0029f4:	10004bd8 	.word	0x10004bd8
1a0029f8:	10004bf4 	.word	0x10004bf4
1a0029fc:	10004c20 	.word	0x10004c20
1a002a00:	10004c0c 	.word	0x10004c0c
1a002a04:	10004b18 	.word	0x10004b18
1a002a08:	10004b1c 	.word	0x10004b1c

1a002a0c <prvAddNewTaskToReadyList>:
{
1a002a0c:	b510      	push	{r4, lr}
1a002a0e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a002a10:	f000 ffa0 	bl	1a003954 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a002a14:	4a21      	ldr	r2, [pc, #132]	; (1a002a9c <prvAddNewTaskToReadyList+0x90>)
1a002a16:	6813      	ldr	r3, [r2, #0]
1a002a18:	3301      	adds	r3, #1
1a002a1a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a002a1c:	4b20      	ldr	r3, [pc, #128]	; (1a002aa0 <prvAddNewTaskToReadyList+0x94>)
1a002a1e:	681b      	ldr	r3, [r3, #0]
1a002a20:	b15b      	cbz	r3, 1a002a3a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a002a22:	4b20      	ldr	r3, [pc, #128]	; (1a002aa4 <prvAddNewTaskToReadyList+0x98>)
1a002a24:	681b      	ldr	r3, [r3, #0]
1a002a26:	b96b      	cbnz	r3, 1a002a44 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a002a28:	4b1d      	ldr	r3, [pc, #116]	; (1a002aa0 <prvAddNewTaskToReadyList+0x94>)
1a002a2a:	681b      	ldr	r3, [r3, #0]
1a002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002a2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002a30:	429a      	cmp	r2, r3
1a002a32:	d807      	bhi.n	1a002a44 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a002a34:	4b1a      	ldr	r3, [pc, #104]	; (1a002aa0 <prvAddNewTaskToReadyList+0x94>)
1a002a36:	601c      	str	r4, [r3, #0]
1a002a38:	e004      	b.n	1a002a44 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a002a3a:	4b19      	ldr	r3, [pc, #100]	; (1a002aa0 <prvAddNewTaskToReadyList+0x94>)
1a002a3c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a002a3e:	6813      	ldr	r3, [r2, #0]
1a002a40:	2b01      	cmp	r3, #1
1a002a42:	d027      	beq.n	1a002a94 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a002a44:	4a18      	ldr	r2, [pc, #96]	; (1a002aa8 <prvAddNewTaskToReadyList+0x9c>)
1a002a46:	6813      	ldr	r3, [r2, #0]
1a002a48:	3301      	adds	r3, #1
1a002a4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a002a4c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a002a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002a50:	2201      	movs	r2, #1
1a002a52:	409a      	lsls	r2, r3
1a002a54:	4915      	ldr	r1, [pc, #84]	; (1a002aac <prvAddNewTaskToReadyList+0xa0>)
1a002a56:	6808      	ldr	r0, [r1, #0]
1a002a58:	4302      	orrs	r2, r0
1a002a5a:	600a      	str	r2, [r1, #0]
1a002a5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002a60:	009a      	lsls	r2, r3, #2
1a002a62:	1d21      	adds	r1, r4, #4
1a002a64:	4812      	ldr	r0, [pc, #72]	; (1a002ab0 <prvAddNewTaskToReadyList+0xa4>)
1a002a66:	4410      	add	r0, r2
1a002a68:	f7ff feb7 	bl	1a0027da <vListInsertEnd>
	taskEXIT_CRITICAL();
1a002a6c:	f000 ff94 	bl	1a003998 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a002a70:	4b0c      	ldr	r3, [pc, #48]	; (1a002aa4 <prvAddNewTaskToReadyList+0x98>)
1a002a72:	681b      	ldr	r3, [r3, #0]
1a002a74:	b16b      	cbz	r3, 1a002a92 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a002a76:	4b0a      	ldr	r3, [pc, #40]	; (1a002aa0 <prvAddNewTaskToReadyList+0x94>)
1a002a78:	681b      	ldr	r3, [r3, #0]
1a002a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002a7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002a7e:	429a      	cmp	r2, r3
1a002a80:	d207      	bcs.n	1a002a92 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a002a82:	4b0c      	ldr	r3, [pc, #48]	; (1a002ab4 <prvAddNewTaskToReadyList+0xa8>)
1a002a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002a88:	601a      	str	r2, [r3, #0]
1a002a8a:	f3bf 8f4f 	dsb	sy
1a002a8e:	f3bf 8f6f 	isb	sy
}
1a002a92:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a002a94:	f7ff ff86 	bl	1a0029a4 <prvInitialiseTaskLists>
1a002a98:	e7d4      	b.n	1a002a44 <prvAddNewTaskToReadyList+0x38>
1a002a9a:	bf00      	nop
1a002a9c:	10004bac 	.word	0x10004bac
1a002aa0:	10004b14 	.word	0x10004b14
1a002aa4:	10004c08 	.word	0x10004c08
1a002aa8:	10004bbc 	.word	0x10004bbc
1a002aac:	10004bc0 	.word	0x10004bc0
1a002ab0:	10004b20 	.word	0x10004b20
1a002ab4:	e000ed04 	.word	0xe000ed04

1a002ab8 <prvDeleteTCB>:
	{
1a002ab8:	b510      	push	{r4, lr}
1a002aba:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a002abc:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a002ac0:	b933      	cbnz	r3, 1a002ad0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a002ac2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002ac4:	f7ff fa98 	bl	1a001ff8 <vPortFree>
				vPortFree( pxTCB );
1a002ac8:	4620      	mov	r0, r4
1a002aca:	f7ff fa95 	bl	1a001ff8 <vPortFree>
	}
1a002ace:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a002ad0:	2b01      	cmp	r3, #1
1a002ad2:	d00a      	beq.n	1a002aea <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a002ad4:	2b02      	cmp	r3, #2
1a002ad6:	d0fa      	beq.n	1a002ace <prvDeleteTCB+0x16>
1a002ad8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002adc:	f383 8811 	msr	BASEPRI, r3
1a002ae0:	f3bf 8f6f 	isb	sy
1a002ae4:	f3bf 8f4f 	dsb	sy
1a002ae8:	e7fe      	b.n	1a002ae8 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a002aea:	f7ff fa85 	bl	1a001ff8 <vPortFree>
1a002aee:	e7ee      	b.n	1a002ace <prvDeleteTCB+0x16>

1a002af0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a002af0:	4b0f      	ldr	r3, [pc, #60]	; (1a002b30 <prvCheckTasksWaitingTermination+0x40>)
1a002af2:	681b      	ldr	r3, [r3, #0]
1a002af4:	b1d3      	cbz	r3, 1a002b2c <prvCheckTasksWaitingTermination+0x3c>
{
1a002af6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a002af8:	f000 ff2c 	bl	1a003954 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a002afc:	4b0d      	ldr	r3, [pc, #52]	; (1a002b34 <prvCheckTasksWaitingTermination+0x44>)
1a002afe:	68db      	ldr	r3, [r3, #12]
1a002b00:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002b02:	1d20      	adds	r0, r4, #4
1a002b04:	f7ff fe8f 	bl	1a002826 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a002b08:	4a0b      	ldr	r2, [pc, #44]	; (1a002b38 <prvCheckTasksWaitingTermination+0x48>)
1a002b0a:	6813      	ldr	r3, [r2, #0]
1a002b0c:	3b01      	subs	r3, #1
1a002b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a002b10:	4a07      	ldr	r2, [pc, #28]	; (1a002b30 <prvCheckTasksWaitingTermination+0x40>)
1a002b12:	6813      	ldr	r3, [r2, #0]
1a002b14:	3b01      	subs	r3, #1
1a002b16:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a002b18:	f000 ff3e 	bl	1a003998 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a002b1c:	4620      	mov	r0, r4
1a002b1e:	f7ff ffcb 	bl	1a002ab8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a002b22:	4b03      	ldr	r3, [pc, #12]	; (1a002b30 <prvCheckTasksWaitingTermination+0x40>)
1a002b24:	681b      	ldr	r3, [r3, #0]
1a002b26:	2b00      	cmp	r3, #0
1a002b28:	d1e6      	bne.n	1a002af8 <prvCheckTasksWaitingTermination+0x8>
}
1a002b2a:	bd10      	pop	{r4, pc}
1a002b2c:	4770      	bx	lr
1a002b2e:	bf00      	nop
1a002b30:	10004bb0 	.word	0x10004bb0
1a002b34:	10004c20 	.word	0x10004c20
1a002b38:	10004bac 	.word	0x10004bac

1a002b3c <prvIdleTask>:
{
1a002b3c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a002b3e:	f7ff ffd7 	bl	1a002af0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a002b42:	4b06      	ldr	r3, [pc, #24]	; (1a002b5c <prvIdleTask+0x20>)
1a002b44:	681b      	ldr	r3, [r3, #0]
1a002b46:	2b01      	cmp	r3, #1
1a002b48:	d9f9      	bls.n	1a002b3e <prvIdleTask+0x2>
				taskYIELD();
1a002b4a:	4b05      	ldr	r3, [pc, #20]	; (1a002b60 <prvIdleTask+0x24>)
1a002b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002b50:	601a      	str	r2, [r3, #0]
1a002b52:	f3bf 8f4f 	dsb	sy
1a002b56:	f3bf 8f6f 	isb	sy
1a002b5a:	e7f0      	b.n	1a002b3e <prvIdleTask+0x2>
1a002b5c:	10004b20 	.word	0x10004b20
1a002b60:	e000ed04 	.word	0xe000ed04

1a002b64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a002b64:	b570      	push	{r4, r5, r6, lr}
1a002b66:	4604      	mov	r4, r0
1a002b68:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a002b6a:	4b1d      	ldr	r3, [pc, #116]	; (1a002be0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a002b6c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002b6e:	4b1d      	ldr	r3, [pc, #116]	; (1a002be4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002b70:	6818      	ldr	r0, [r3, #0]
1a002b72:	3004      	adds	r0, #4
1a002b74:	f7ff fe57 	bl	1a002826 <uxListRemove>
1a002b78:	b950      	cbnz	r0, 1a002b90 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a002b7a:	4b1a      	ldr	r3, [pc, #104]	; (1a002be4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002b7c:	681b      	ldr	r3, [r3, #0]
1a002b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a002b80:	2301      	movs	r3, #1
1a002b82:	fa03 f202 	lsl.w	r2, r3, r2
1a002b86:	4918      	ldr	r1, [pc, #96]	; (1a002be8 <prvAddCurrentTaskToDelayedList+0x84>)
1a002b88:	680b      	ldr	r3, [r1, #0]
1a002b8a:	ea23 0302 	bic.w	r3, r3, r2
1a002b8e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002b90:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a002b94:	d013      	beq.n	1a002bbe <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a002b96:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a002b98:	4b12      	ldr	r3, [pc, #72]	; (1a002be4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002b9a:	681b      	ldr	r3, [r3, #0]
1a002b9c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a002b9e:	42a5      	cmp	r5, r4
1a002ba0:	d816      	bhi.n	1a002bd0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002ba2:	4b12      	ldr	r3, [pc, #72]	; (1a002bec <prvAddCurrentTaskToDelayedList+0x88>)
1a002ba4:	6818      	ldr	r0, [r3, #0]
1a002ba6:	4b0f      	ldr	r3, [pc, #60]	; (1a002be4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002ba8:	6819      	ldr	r1, [r3, #0]
1a002baa:	3104      	adds	r1, #4
1a002bac:	f7ff fe21 	bl	1a0027f2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a002bb0:	4b0f      	ldr	r3, [pc, #60]	; (1a002bf0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a002bb2:	681b      	ldr	r3, [r3, #0]
1a002bb4:	42a3      	cmp	r3, r4
1a002bb6:	d912      	bls.n	1a002bde <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a002bb8:	4b0d      	ldr	r3, [pc, #52]	; (1a002bf0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a002bba:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a002bbc:	e00f      	b.n	1a002bde <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a002bbe:	2e00      	cmp	r6, #0
1a002bc0:	d0e9      	beq.n	1a002b96 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002bc2:	4b08      	ldr	r3, [pc, #32]	; (1a002be4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002bc4:	6819      	ldr	r1, [r3, #0]
1a002bc6:	3104      	adds	r1, #4
1a002bc8:	480a      	ldr	r0, [pc, #40]	; (1a002bf4 <prvAddCurrentTaskToDelayedList+0x90>)
1a002bca:	f7ff fe06 	bl	1a0027da <vListInsertEnd>
1a002bce:	e006      	b.n	1a002bde <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a002bd0:	4b09      	ldr	r3, [pc, #36]	; (1a002bf8 <prvAddCurrentTaskToDelayedList+0x94>)
1a002bd2:	6818      	ldr	r0, [r3, #0]
1a002bd4:	4b03      	ldr	r3, [pc, #12]	; (1a002be4 <prvAddCurrentTaskToDelayedList+0x80>)
1a002bd6:	6819      	ldr	r1, [r3, #0]
1a002bd8:	3104      	adds	r1, #4
1a002bda:	f7ff fe0a 	bl	1a0027f2 <vListInsert>
}
1a002bde:	bd70      	pop	{r4, r5, r6, pc}
1a002be0:	10004c34 	.word	0x10004c34
1a002be4:	10004b14 	.word	0x10004b14
1a002be8:	10004bc0 	.word	0x10004bc0
1a002bec:	10004b18 	.word	0x10004b18
1a002bf0:	10004bec 	.word	0x10004bec
1a002bf4:	10004c0c 	.word	0x10004c0c
1a002bf8:	10004b1c 	.word	0x10004b1c

1a002bfc <xTaskCreateStatic>:
	{
1a002bfc:	b570      	push	{r4, r5, r6, lr}
1a002bfe:	b086      	sub	sp, #24
1a002c00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a002c02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a002c04:	b945      	cbnz	r5, 1a002c18 <xTaskCreateStatic+0x1c>
1a002c06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c0a:	f383 8811 	msr	BASEPRI, r3
1a002c0e:	f3bf 8f6f 	isb	sy
1a002c12:	f3bf 8f4f 	dsb	sy
1a002c16:	e7fe      	b.n	1a002c16 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a002c18:	b944      	cbnz	r4, 1a002c2c <xTaskCreateStatic+0x30>
1a002c1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c1e:	f383 8811 	msr	BASEPRI, r3
1a002c22:	f3bf 8f6f 	isb	sy
1a002c26:	f3bf 8f4f 	dsb	sy
1a002c2a:	e7fe      	b.n	1a002c2a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a002c2c:	2660      	movs	r6, #96	; 0x60
1a002c2e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a002c30:	9e04      	ldr	r6, [sp, #16]
1a002c32:	2e60      	cmp	r6, #96	; 0x60
1a002c34:	d008      	beq.n	1a002c48 <xTaskCreateStatic+0x4c>
1a002c36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c3a:	f383 8811 	msr	BASEPRI, r3
1a002c3e:	f3bf 8f6f 	isb	sy
1a002c42:	f3bf 8f4f 	dsb	sy
1a002c46:	e7fe      	b.n	1a002c46 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a002c48:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a002c4a:	2502      	movs	r5, #2
1a002c4c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a002c50:	2500      	movs	r5, #0
1a002c52:	9503      	str	r5, [sp, #12]
1a002c54:	9402      	str	r4, [sp, #8]
1a002c56:	ad05      	add	r5, sp, #20
1a002c58:	9501      	str	r5, [sp, #4]
1a002c5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a002c5c:	9500      	str	r5, [sp, #0]
1a002c5e:	f7ff fe57 	bl	1a002910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002c62:	4620      	mov	r0, r4
1a002c64:	f7ff fed2 	bl	1a002a0c <prvAddNewTaskToReadyList>
	}
1a002c68:	9805      	ldr	r0, [sp, #20]
1a002c6a:	b006      	add	sp, #24
1a002c6c:	bd70      	pop	{r4, r5, r6, pc}

1a002c6e <xTaskCreate>:
	{
1a002c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002c72:	b085      	sub	sp, #20
1a002c74:	4607      	mov	r7, r0
1a002c76:	4688      	mov	r8, r1
1a002c78:	4615      	mov	r5, r2
1a002c7a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002c7c:	0090      	lsls	r0, r2, #2
1a002c7e:	f7ff f983 	bl	1a001f88 <pvPortMalloc>
			if( pxStack != NULL )
1a002c82:	b308      	cbz	r0, 1a002cc8 <xTaskCreate+0x5a>
1a002c84:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a002c86:	2060      	movs	r0, #96	; 0x60
1a002c88:	f7ff f97e 	bl	1a001f88 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a002c8c:	4604      	mov	r4, r0
1a002c8e:	b1b8      	cbz	r0, 1a002cc0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a002c90:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a002c92:	b1e4      	cbz	r4, 1a002cce <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a002c94:	2300      	movs	r3, #0
1a002c96:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a002c9a:	9303      	str	r3, [sp, #12]
1a002c9c:	9402      	str	r4, [sp, #8]
1a002c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a002ca0:	9301      	str	r3, [sp, #4]
1a002ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a002ca4:	9300      	str	r3, [sp, #0]
1a002ca6:	464b      	mov	r3, r9
1a002ca8:	462a      	mov	r2, r5
1a002caa:	4641      	mov	r1, r8
1a002cac:	4638      	mov	r0, r7
1a002cae:	f7ff fe2f 	bl	1a002910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a002cb2:	4620      	mov	r0, r4
1a002cb4:	f7ff feaa 	bl	1a002a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a002cb8:	2001      	movs	r0, #1
	}
1a002cba:	b005      	add	sp, #20
1a002cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a002cc0:	4630      	mov	r0, r6
1a002cc2:	f7ff f999 	bl	1a001ff8 <vPortFree>
1a002cc6:	e7e4      	b.n	1a002c92 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a002cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002ccc:	e7f5      	b.n	1a002cba <xTaskCreate+0x4c>
1a002cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a002cd2:	e7f2      	b.n	1a002cba <xTaskCreate+0x4c>

1a002cd4 <vTaskStartScheduler>:
{
1a002cd4:	b510      	push	{r4, lr}
1a002cd6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a002cd8:	2400      	movs	r4, #0
1a002cda:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a002cdc:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a002cde:	aa07      	add	r2, sp, #28
1a002ce0:	a906      	add	r1, sp, #24
1a002ce2:	a805      	add	r0, sp, #20
1a002ce4:	f7ff fdb4 	bl	1a002850 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a002ce8:	9b05      	ldr	r3, [sp, #20]
1a002cea:	9302      	str	r3, [sp, #8]
1a002cec:	9b06      	ldr	r3, [sp, #24]
1a002cee:	9301      	str	r3, [sp, #4]
1a002cf0:	9400      	str	r4, [sp, #0]
1a002cf2:	4623      	mov	r3, r4
1a002cf4:	9a07      	ldr	r2, [sp, #28]
1a002cf6:	4917      	ldr	r1, [pc, #92]	; (1a002d54 <vTaskStartScheduler+0x80>)
1a002cf8:	4817      	ldr	r0, [pc, #92]	; (1a002d58 <vTaskStartScheduler+0x84>)
1a002cfa:	f7ff ff7f 	bl	1a002bfc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a002cfe:	b140      	cbz	r0, 1a002d12 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a002d00:	f000 fbe2 	bl	1a0034c8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a002d04:	2801      	cmp	r0, #1
1a002d06:	d006      	beq.n	1a002d16 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a002d08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002d0c:	d018      	beq.n	1a002d40 <vTaskStartScheduler+0x6c>
}
1a002d0e:	b008      	add	sp, #32
1a002d10:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a002d12:	2000      	movs	r0, #0
1a002d14:	e7f6      	b.n	1a002d04 <vTaskStartScheduler+0x30>
1a002d16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d1a:	f383 8811 	msr	BASEPRI, r3
1a002d1e:	f3bf 8f6f 	isb	sy
1a002d22:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a002d26:	4b0d      	ldr	r3, [pc, #52]	; (1a002d5c <vTaskStartScheduler+0x88>)
1a002d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002d2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a002d2e:	4b0c      	ldr	r3, [pc, #48]	; (1a002d60 <vTaskStartScheduler+0x8c>)
1a002d30:	2201      	movs	r2, #1
1a002d32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a002d34:	4b0b      	ldr	r3, [pc, #44]	; (1a002d64 <vTaskStartScheduler+0x90>)
1a002d36:	2200      	movs	r2, #0
1a002d38:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a002d3a:	f000 fead 	bl	1a003a98 <xPortStartScheduler>
1a002d3e:	e7e6      	b.n	1a002d0e <vTaskStartScheduler+0x3a>
1a002d40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d44:	f383 8811 	msr	BASEPRI, r3
1a002d48:	f3bf 8f6f 	isb	sy
1a002d4c:	f3bf 8f4f 	dsb	sy
1a002d50:	e7fe      	b.n	1a002d50 <vTaskStartScheduler+0x7c>
1a002d52:	bf00      	nop
1a002d54:	1a006c5c 	.word	0x1a006c5c
1a002d58:	1a002b3d 	.word	0x1a002b3d
1a002d5c:	10004bec 	.word	0x10004bec
1a002d60:	10004c08 	.word	0x10004c08
1a002d64:	10004c34 	.word	0x10004c34

1a002d68 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a002d68:	4a02      	ldr	r2, [pc, #8]	; (1a002d74 <vTaskSuspendAll+0xc>)
1a002d6a:	6813      	ldr	r3, [r2, #0]
1a002d6c:	3301      	adds	r3, #1
1a002d6e:	6013      	str	r3, [r2, #0]
}
1a002d70:	4770      	bx	lr
1a002d72:	bf00      	nop
1a002d74:	10004bb8 	.word	0x10004bb8

1a002d78 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a002d78:	4b01      	ldr	r3, [pc, #4]	; (1a002d80 <xTaskGetTickCount+0x8>)
1a002d7a:	6818      	ldr	r0, [r3, #0]
}
1a002d7c:	4770      	bx	lr
1a002d7e:	bf00      	nop
1a002d80:	10004c34 	.word	0x10004c34

1a002d84 <xTaskIncrementTick>:
{
1a002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002d86:	4b3a      	ldr	r3, [pc, #232]	; (1a002e70 <xTaskIncrementTick+0xec>)
1a002d88:	681b      	ldr	r3, [r3, #0]
1a002d8a:	2b00      	cmp	r3, #0
1a002d8c:	d164      	bne.n	1a002e58 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a002d8e:	4b39      	ldr	r3, [pc, #228]	; (1a002e74 <xTaskIncrementTick+0xf0>)
1a002d90:	681d      	ldr	r5, [r3, #0]
1a002d92:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a002d94:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a002d96:	b9c5      	cbnz	r5, 1a002dca <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a002d98:	4b37      	ldr	r3, [pc, #220]	; (1a002e78 <xTaskIncrementTick+0xf4>)
1a002d9a:	681b      	ldr	r3, [r3, #0]
1a002d9c:	681b      	ldr	r3, [r3, #0]
1a002d9e:	b143      	cbz	r3, 1a002db2 <xTaskIncrementTick+0x2e>
1a002da0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002da4:	f383 8811 	msr	BASEPRI, r3
1a002da8:	f3bf 8f6f 	isb	sy
1a002dac:	f3bf 8f4f 	dsb	sy
1a002db0:	e7fe      	b.n	1a002db0 <xTaskIncrementTick+0x2c>
1a002db2:	4a31      	ldr	r2, [pc, #196]	; (1a002e78 <xTaskIncrementTick+0xf4>)
1a002db4:	6811      	ldr	r1, [r2, #0]
1a002db6:	4b31      	ldr	r3, [pc, #196]	; (1a002e7c <xTaskIncrementTick+0xf8>)
1a002db8:	6818      	ldr	r0, [r3, #0]
1a002dba:	6010      	str	r0, [r2, #0]
1a002dbc:	6019      	str	r1, [r3, #0]
1a002dbe:	4a30      	ldr	r2, [pc, #192]	; (1a002e80 <xTaskIncrementTick+0xfc>)
1a002dc0:	6813      	ldr	r3, [r2, #0]
1a002dc2:	3301      	adds	r3, #1
1a002dc4:	6013      	str	r3, [r2, #0]
1a002dc6:	f7ff fd8d 	bl	1a0028e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a002dca:	4b2e      	ldr	r3, [pc, #184]	; (1a002e84 <xTaskIncrementTick+0x100>)
1a002dcc:	681b      	ldr	r3, [r3, #0]
1a002dce:	42ab      	cmp	r3, r5
1a002dd0:	d938      	bls.n	1a002e44 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a002dd2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002dd4:	4b2c      	ldr	r3, [pc, #176]	; (1a002e88 <xTaskIncrementTick+0x104>)
1a002dd6:	681b      	ldr	r3, [r3, #0]
1a002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002dda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002dde:	009a      	lsls	r2, r3, #2
1a002de0:	4b2a      	ldr	r3, [pc, #168]	; (1a002e8c <xTaskIncrementTick+0x108>)
1a002de2:	589b      	ldr	r3, [r3, r2]
1a002de4:	2b01      	cmp	r3, #1
1a002de6:	d93c      	bls.n	1a002e62 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a002de8:	2401      	movs	r4, #1
1a002dea:	e03a      	b.n	1a002e62 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a002dec:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a002dee:	4b22      	ldr	r3, [pc, #136]	; (1a002e78 <xTaskIncrementTick+0xf4>)
1a002df0:	681b      	ldr	r3, [r3, #0]
1a002df2:	681b      	ldr	r3, [r3, #0]
1a002df4:	b343      	cbz	r3, 1a002e48 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a002df6:	4b20      	ldr	r3, [pc, #128]	; (1a002e78 <xTaskIncrementTick+0xf4>)
1a002df8:	681b      	ldr	r3, [r3, #0]
1a002dfa:	68db      	ldr	r3, [r3, #12]
1a002dfc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a002dfe:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a002e00:	429d      	cmp	r5, r3
1a002e02:	d326      	bcc.n	1a002e52 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002e04:	1d37      	adds	r7, r6, #4
1a002e06:	4638      	mov	r0, r7
1a002e08:	f7ff fd0d 	bl	1a002826 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002e0c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a002e0e:	b11b      	cbz	r3, 1a002e18 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002e10:	f106 0018 	add.w	r0, r6, #24
1a002e14:	f7ff fd07 	bl	1a002826 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002e18:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a002e1a:	2201      	movs	r2, #1
1a002e1c:	409a      	lsls	r2, r3
1a002e1e:	491c      	ldr	r1, [pc, #112]	; (1a002e90 <xTaskIncrementTick+0x10c>)
1a002e20:	6808      	ldr	r0, [r1, #0]
1a002e22:	4302      	orrs	r2, r0
1a002e24:	600a      	str	r2, [r1, #0]
1a002e26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002e2a:	009a      	lsls	r2, r3, #2
1a002e2c:	4639      	mov	r1, r7
1a002e2e:	4817      	ldr	r0, [pc, #92]	; (1a002e8c <xTaskIncrementTick+0x108>)
1a002e30:	4410      	add	r0, r2
1a002e32:	f7ff fcd2 	bl	1a0027da <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002e36:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a002e38:	4b13      	ldr	r3, [pc, #76]	; (1a002e88 <xTaskIncrementTick+0x104>)
1a002e3a:	681b      	ldr	r3, [r3, #0]
1a002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002e3e:	429a      	cmp	r2, r3
1a002e40:	d2d4      	bcs.n	1a002dec <xTaskIncrementTick+0x68>
1a002e42:	e7d4      	b.n	1a002dee <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a002e44:	2400      	movs	r4, #0
1a002e46:	e7d2      	b.n	1a002dee <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002e48:	4b0e      	ldr	r3, [pc, #56]	; (1a002e84 <xTaskIncrementTick+0x100>)
1a002e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002e4e:	601a      	str	r2, [r3, #0]
					break;
1a002e50:	e7c0      	b.n	1a002dd4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a002e52:	4a0c      	ldr	r2, [pc, #48]	; (1a002e84 <xTaskIncrementTick+0x100>)
1a002e54:	6013      	str	r3, [r2, #0]
						break;
1a002e56:	e7bd      	b.n	1a002dd4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a002e58:	4a0e      	ldr	r2, [pc, #56]	; (1a002e94 <xTaskIncrementTick+0x110>)
1a002e5a:	6813      	ldr	r3, [r2, #0]
1a002e5c:	3301      	adds	r3, #1
1a002e5e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a002e60:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a002e62:	4b0d      	ldr	r3, [pc, #52]	; (1a002e98 <xTaskIncrementTick+0x114>)
1a002e64:	681b      	ldr	r3, [r3, #0]
1a002e66:	b103      	cbz	r3, 1a002e6a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a002e68:	2401      	movs	r4, #1
}
1a002e6a:	4620      	mov	r0, r4
1a002e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002e6e:	bf00      	nop
1a002e70:	10004bb8 	.word	0x10004bb8
1a002e74:	10004c34 	.word	0x10004c34
1a002e78:	10004b18 	.word	0x10004b18
1a002e7c:	10004b1c 	.word	0x10004b1c
1a002e80:	10004bf0 	.word	0x10004bf0
1a002e84:	10004bec 	.word	0x10004bec
1a002e88:	10004b14 	.word	0x10004b14
1a002e8c:	10004b20 	.word	0x10004b20
1a002e90:	10004bc0 	.word	0x10004bc0
1a002e94:	10004bb4 	.word	0x10004bb4
1a002e98:	10004c38 	.word	0x10004c38

1a002e9c <xTaskResumeAll>:
{
1a002e9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a002e9e:	4b33      	ldr	r3, [pc, #204]	; (1a002f6c <xTaskResumeAll+0xd0>)
1a002ea0:	681b      	ldr	r3, [r3, #0]
1a002ea2:	b943      	cbnz	r3, 1a002eb6 <xTaskResumeAll+0x1a>
1a002ea4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ea8:	f383 8811 	msr	BASEPRI, r3
1a002eac:	f3bf 8f6f 	isb	sy
1a002eb0:	f3bf 8f4f 	dsb	sy
1a002eb4:	e7fe      	b.n	1a002eb4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a002eb6:	f000 fd4d 	bl	1a003954 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a002eba:	4b2c      	ldr	r3, [pc, #176]	; (1a002f6c <xTaskResumeAll+0xd0>)
1a002ebc:	681a      	ldr	r2, [r3, #0]
1a002ebe:	3a01      	subs	r2, #1
1a002ec0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002ec2:	681b      	ldr	r3, [r3, #0]
1a002ec4:	2b00      	cmp	r3, #0
1a002ec6:	d14d      	bne.n	1a002f64 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002ec8:	4b29      	ldr	r3, [pc, #164]	; (1a002f70 <xTaskResumeAll+0xd4>)
1a002eca:	681b      	ldr	r3, [r3, #0]
1a002ecc:	b923      	cbnz	r3, 1a002ed8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a002ece:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002ed0:	f000 fd62 	bl	1a003998 <vPortExitCritical>
}
1a002ed4:	4620      	mov	r0, r4
1a002ed6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a002ed8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002eda:	4b26      	ldr	r3, [pc, #152]	; (1a002f74 <xTaskResumeAll+0xd8>)
1a002edc:	681b      	ldr	r3, [r3, #0]
1a002ede:	b31b      	cbz	r3, 1a002f28 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002ee0:	4b24      	ldr	r3, [pc, #144]	; (1a002f74 <xTaskResumeAll+0xd8>)
1a002ee2:	68db      	ldr	r3, [r3, #12]
1a002ee4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002ee6:	f104 0018 	add.w	r0, r4, #24
1a002eea:	f7ff fc9c 	bl	1a002826 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002eee:	1d25      	adds	r5, r4, #4
1a002ef0:	4628      	mov	r0, r5
1a002ef2:	f7ff fc98 	bl	1a002826 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002ef6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002ef8:	2201      	movs	r2, #1
1a002efa:	409a      	lsls	r2, r3
1a002efc:	491e      	ldr	r1, [pc, #120]	; (1a002f78 <xTaskResumeAll+0xdc>)
1a002efe:	6808      	ldr	r0, [r1, #0]
1a002f00:	4302      	orrs	r2, r0
1a002f02:	600a      	str	r2, [r1, #0]
1a002f04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002f08:	009a      	lsls	r2, r3, #2
1a002f0a:	4629      	mov	r1, r5
1a002f0c:	481b      	ldr	r0, [pc, #108]	; (1a002f7c <xTaskResumeAll+0xe0>)
1a002f0e:	4410      	add	r0, r2
1a002f10:	f7ff fc63 	bl	1a0027da <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002f14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002f16:	4b1a      	ldr	r3, [pc, #104]	; (1a002f80 <xTaskResumeAll+0xe4>)
1a002f18:	681b      	ldr	r3, [r3, #0]
1a002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002f1c:	429a      	cmp	r2, r3
1a002f1e:	d3dc      	bcc.n	1a002eda <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002f20:	4b18      	ldr	r3, [pc, #96]	; (1a002f84 <xTaskResumeAll+0xe8>)
1a002f22:	2201      	movs	r2, #1
1a002f24:	601a      	str	r2, [r3, #0]
1a002f26:	e7d8      	b.n	1a002eda <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002f28:	b10c      	cbz	r4, 1a002f2e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a002f2a:	f7ff fcdb 	bl	1a0028e4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a002f2e:	4b16      	ldr	r3, [pc, #88]	; (1a002f88 <xTaskResumeAll+0xec>)
1a002f30:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002f32:	b154      	cbz	r4, 1a002f4a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002f34:	f7ff ff26 	bl	1a002d84 <xTaskIncrementTick>
1a002f38:	b110      	cbz	r0, 1a002f40 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a002f3a:	4b12      	ldr	r3, [pc, #72]	; (1a002f84 <xTaskResumeAll+0xe8>)
1a002f3c:	2201      	movs	r2, #1
1a002f3e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a002f40:	3c01      	subs	r4, #1
1a002f42:	d1f7      	bne.n	1a002f34 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002f44:	4b10      	ldr	r3, [pc, #64]	; (1a002f88 <xTaskResumeAll+0xec>)
1a002f46:	2200      	movs	r2, #0
1a002f48:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a002f4a:	4b0e      	ldr	r3, [pc, #56]	; (1a002f84 <xTaskResumeAll+0xe8>)
1a002f4c:	681b      	ldr	r3, [r3, #0]
1a002f4e:	b15b      	cbz	r3, 1a002f68 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a002f50:	4b0e      	ldr	r3, [pc, #56]	; (1a002f8c <xTaskResumeAll+0xf0>)
1a002f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002f56:	601a      	str	r2, [r3, #0]
1a002f58:	f3bf 8f4f 	dsb	sy
1a002f5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a002f60:	2401      	movs	r4, #1
1a002f62:	e7b5      	b.n	1a002ed0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a002f64:	2400      	movs	r4, #0
1a002f66:	e7b3      	b.n	1a002ed0 <xTaskResumeAll+0x34>
1a002f68:	2400      	movs	r4, #0
1a002f6a:	e7b1      	b.n	1a002ed0 <xTaskResumeAll+0x34>
1a002f6c:	10004bb8 	.word	0x10004bb8
1a002f70:	10004bac 	.word	0x10004bac
1a002f74:	10004bf4 	.word	0x10004bf4
1a002f78:	10004bc0 	.word	0x10004bc0
1a002f7c:	10004b20 	.word	0x10004b20
1a002f80:	10004b14 	.word	0x10004b14
1a002f84:	10004c38 	.word	0x10004c38
1a002f88:	10004bb4 	.word	0x10004bb4
1a002f8c:	e000ed04 	.word	0xe000ed04

1a002f90 <vTaskDelayUntil>:
	{
1a002f90:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a002f92:	b150      	cbz	r0, 1a002faa <vTaskDelayUntil+0x1a>
1a002f94:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a002f96:	b989      	cbnz	r1, 1a002fbc <vTaskDelayUntil+0x2c>
1a002f98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f9c:	f383 8811 	msr	BASEPRI, r3
1a002fa0:	f3bf 8f6f 	isb	sy
1a002fa4:	f3bf 8f4f 	dsb	sy
1a002fa8:	e7fe      	b.n	1a002fa8 <vTaskDelayUntil+0x18>
1a002faa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fae:	f383 8811 	msr	BASEPRI, r3
1a002fb2:	f3bf 8f6f 	isb	sy
1a002fb6:	f3bf 8f4f 	dsb	sy
1a002fba:	e7fe      	b.n	1a002fba <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a002fbc:	4b1a      	ldr	r3, [pc, #104]	; (1a003028 <vTaskDelayUntil+0x98>)
1a002fbe:	681b      	ldr	r3, [r3, #0]
1a002fc0:	b143      	cbz	r3, 1a002fd4 <vTaskDelayUntil+0x44>
1a002fc2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fc6:	f383 8811 	msr	BASEPRI, r3
1a002fca:	f3bf 8f6f 	isb	sy
1a002fce:	f3bf 8f4f 	dsb	sy
1a002fd2:	e7fe      	b.n	1a002fd2 <vTaskDelayUntil+0x42>
1a002fd4:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a002fd6:	f7ff fec7 	bl	1a002d68 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a002fda:	4b14      	ldr	r3, [pc, #80]	; (1a00302c <vTaskDelayUntil+0x9c>)
1a002fdc:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a002fde:	682a      	ldr	r2, [r5, #0]
1a002fe0:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a002fe2:	4282      	cmp	r2, r0
1a002fe4:	d918      	bls.n	1a003018 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002fe6:	42a2      	cmp	r2, r4
1a002fe8:	d80c      	bhi.n	1a003004 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a002fea:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a002fec:	f7ff ff56 	bl	1a002e9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a002ff0:	b938      	cbnz	r0, 1a003002 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a002ff2:	4b0f      	ldr	r3, [pc, #60]	; (1a003030 <vTaskDelayUntil+0xa0>)
1a002ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002ff8:	601a      	str	r2, [r3, #0]
1a002ffa:	f3bf 8f4f 	dsb	sy
1a002ffe:	f3bf 8f6f 	isb	sy
	}
1a003002:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a003004:	42a0      	cmp	r0, r4
1a003006:	d301      	bcc.n	1a00300c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a003008:	602c      	str	r4, [r5, #0]
1a00300a:	e7ef      	b.n	1a002fec <vTaskDelayUntil+0x5c>
1a00300c:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00300e:	2100      	movs	r1, #0
1a003010:	1a20      	subs	r0, r4, r0
1a003012:	f7ff fda7 	bl	1a002b64 <prvAddCurrentTaskToDelayedList>
1a003016:	e7e9      	b.n	1a002fec <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a003018:	42a2      	cmp	r2, r4
1a00301a:	d801      	bhi.n	1a003020 <vTaskDelayUntil+0x90>
1a00301c:	42a0      	cmp	r0, r4
1a00301e:	d201      	bcs.n	1a003024 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a003020:	602c      	str	r4, [r5, #0]
1a003022:	e7f4      	b.n	1a00300e <vTaskDelayUntil+0x7e>
1a003024:	602c      	str	r4, [r5, #0]
1a003026:	e7e1      	b.n	1a002fec <vTaskDelayUntil+0x5c>
1a003028:	10004bb8 	.word	0x10004bb8
1a00302c:	10004c34 	.word	0x10004c34
1a003030:	e000ed04 	.word	0xe000ed04

1a003034 <vTaskDelay>:
	{
1a003034:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a003036:	b1a8      	cbz	r0, 1a003064 <vTaskDelay+0x30>
1a003038:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00303a:	4b0f      	ldr	r3, [pc, #60]	; (1a003078 <vTaskDelay+0x44>)
1a00303c:	681b      	ldr	r3, [r3, #0]
1a00303e:	b143      	cbz	r3, 1a003052 <vTaskDelay+0x1e>
1a003040:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003044:	f383 8811 	msr	BASEPRI, r3
1a003048:	f3bf 8f6f 	isb	sy
1a00304c:	f3bf 8f4f 	dsb	sy
1a003050:	e7fe      	b.n	1a003050 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a003052:	f7ff fe89 	bl	1a002d68 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a003056:	2100      	movs	r1, #0
1a003058:	4620      	mov	r0, r4
1a00305a:	f7ff fd83 	bl	1a002b64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00305e:	f7ff ff1d 	bl	1a002e9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a003062:	b938      	cbnz	r0, 1a003074 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a003064:	4b05      	ldr	r3, [pc, #20]	; (1a00307c <vTaskDelay+0x48>)
1a003066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00306a:	601a      	str	r2, [r3, #0]
1a00306c:	f3bf 8f4f 	dsb	sy
1a003070:	f3bf 8f6f 	isb	sy
	}
1a003074:	bd10      	pop	{r4, pc}
1a003076:	bf00      	nop
1a003078:	10004bb8 	.word	0x10004bb8
1a00307c:	e000ed04 	.word	0xe000ed04

1a003080 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a003080:	4b2c      	ldr	r3, [pc, #176]	; (1a003134 <vTaskSwitchContext+0xb4>)
1a003082:	681b      	ldr	r3, [r3, #0]
1a003084:	b11b      	cbz	r3, 1a00308e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a003086:	4b2c      	ldr	r3, [pc, #176]	; (1a003138 <vTaskSwitchContext+0xb8>)
1a003088:	2201      	movs	r2, #1
1a00308a:	601a      	str	r2, [r3, #0]
1a00308c:	4770      	bx	lr
{
1a00308e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a003090:	4b29      	ldr	r3, [pc, #164]	; (1a003138 <vTaskSwitchContext+0xb8>)
1a003092:	2200      	movs	r2, #0
1a003094:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a003096:	4b29      	ldr	r3, [pc, #164]	; (1a00313c <vTaskSwitchContext+0xbc>)
1a003098:	681b      	ldr	r3, [r3, #0]
1a00309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00309c:	681a      	ldr	r2, [r3, #0]
1a00309e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0030a2:	d103      	bne.n	1a0030ac <vTaskSwitchContext+0x2c>
1a0030a4:	685a      	ldr	r2, [r3, #4]
1a0030a6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0030aa:	d01b      	beq.n	1a0030e4 <vTaskSwitchContext+0x64>
1a0030ac:	4b23      	ldr	r3, [pc, #140]	; (1a00313c <vTaskSwitchContext+0xbc>)
1a0030ae:	6818      	ldr	r0, [r3, #0]
1a0030b0:	6819      	ldr	r1, [r3, #0]
1a0030b2:	3134      	adds	r1, #52	; 0x34
1a0030b4:	f7ff fc08 	bl	1a0028c8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0030b8:	4b21      	ldr	r3, [pc, #132]	; (1a003140 <vTaskSwitchContext+0xc0>)
1a0030ba:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0030bc:	fab3 f383 	clz	r3, r3
1a0030c0:	b2db      	uxtb	r3, r3
1a0030c2:	f1c3 031f 	rsb	r3, r3, #31
1a0030c6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0030ca:	008a      	lsls	r2, r1, #2
1a0030cc:	491d      	ldr	r1, [pc, #116]	; (1a003144 <vTaskSwitchContext+0xc4>)
1a0030ce:	588a      	ldr	r2, [r1, r2]
1a0030d0:	b98a      	cbnz	r2, 1a0030f6 <vTaskSwitchContext+0x76>
	__asm volatile
1a0030d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0030d6:	f383 8811 	msr	BASEPRI, r3
1a0030da:	f3bf 8f6f 	isb	sy
1a0030de:	f3bf 8f4f 	dsb	sy
1a0030e2:	e7fe      	b.n	1a0030e2 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0030e4:	689a      	ldr	r2, [r3, #8]
1a0030e6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0030ea:	d1df      	bne.n	1a0030ac <vTaskSwitchContext+0x2c>
1a0030ec:	68db      	ldr	r3, [r3, #12]
1a0030ee:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0030f2:	d1db      	bne.n	1a0030ac <vTaskSwitchContext+0x2c>
1a0030f4:	e7e0      	b.n	1a0030b8 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0030f6:	4813      	ldr	r0, [pc, #76]	; (1a003144 <vTaskSwitchContext+0xc4>)
1a0030f8:	009a      	lsls	r2, r3, #2
1a0030fa:	18d4      	adds	r4, r2, r3
1a0030fc:	00a1      	lsls	r1, r4, #2
1a0030fe:	4401      	add	r1, r0
1a003100:	684c      	ldr	r4, [r1, #4]
1a003102:	6864      	ldr	r4, [r4, #4]
1a003104:	604c      	str	r4, [r1, #4]
1a003106:	441a      	add	r2, r3
1a003108:	0091      	lsls	r1, r2, #2
1a00310a:	3108      	adds	r1, #8
1a00310c:	4408      	add	r0, r1
1a00310e:	4284      	cmp	r4, r0
1a003110:	d009      	beq.n	1a003126 <vTaskSwitchContext+0xa6>
1a003112:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003116:	009a      	lsls	r2, r3, #2
1a003118:	4b0a      	ldr	r3, [pc, #40]	; (1a003144 <vTaskSwitchContext+0xc4>)
1a00311a:	4413      	add	r3, r2
1a00311c:	685b      	ldr	r3, [r3, #4]
1a00311e:	68da      	ldr	r2, [r3, #12]
1a003120:	4b06      	ldr	r3, [pc, #24]	; (1a00313c <vTaskSwitchContext+0xbc>)
1a003122:	601a      	str	r2, [r3, #0]
}
1a003124:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003126:	6861      	ldr	r1, [r4, #4]
1a003128:	4806      	ldr	r0, [pc, #24]	; (1a003144 <vTaskSwitchContext+0xc4>)
1a00312a:	2214      	movs	r2, #20
1a00312c:	fb02 0203 	mla	r2, r2, r3, r0
1a003130:	6051      	str	r1, [r2, #4]
1a003132:	e7ee      	b.n	1a003112 <vTaskSwitchContext+0x92>
1a003134:	10004bb8 	.word	0x10004bb8
1a003138:	10004c38 	.word	0x10004c38
1a00313c:	10004b14 	.word	0x10004b14
1a003140:	10004bc0 	.word	0x10004bc0
1a003144:	10004b20 	.word	0x10004b20

1a003148 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a003148:	b940      	cbnz	r0, 1a00315c <vTaskPlaceOnEventList+0x14>
1a00314a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00314e:	f383 8811 	msr	BASEPRI, r3
1a003152:	f3bf 8f6f 	isb	sy
1a003156:	f3bf 8f4f 	dsb	sy
1a00315a:	e7fe      	b.n	1a00315a <vTaskPlaceOnEventList+0x12>
{
1a00315c:	b510      	push	{r4, lr}
1a00315e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a003160:	4b04      	ldr	r3, [pc, #16]	; (1a003174 <vTaskPlaceOnEventList+0x2c>)
1a003162:	6819      	ldr	r1, [r3, #0]
1a003164:	3118      	adds	r1, #24
1a003166:	f7ff fb44 	bl	1a0027f2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00316a:	2101      	movs	r1, #1
1a00316c:	4620      	mov	r0, r4
1a00316e:	f7ff fcf9 	bl	1a002b64 <prvAddCurrentTaskToDelayedList>
}
1a003172:	bd10      	pop	{r4, pc}
1a003174:	10004b14 	.word	0x10004b14

1a003178 <vTaskPlaceOnEventListRestricted>:
	{
1a003178:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00317a:	b940      	cbnz	r0, 1a00318e <vTaskPlaceOnEventListRestricted+0x16>
1a00317c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003180:	f383 8811 	msr	BASEPRI, r3
1a003184:	f3bf 8f6f 	isb	sy
1a003188:	f3bf 8f4f 	dsb	sy
1a00318c:	e7fe      	b.n	1a00318c <vTaskPlaceOnEventListRestricted+0x14>
1a00318e:	460c      	mov	r4, r1
1a003190:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a003192:	4a06      	ldr	r2, [pc, #24]	; (1a0031ac <vTaskPlaceOnEventListRestricted+0x34>)
1a003194:	6811      	ldr	r1, [r2, #0]
1a003196:	3118      	adds	r1, #24
1a003198:	f7ff fb1f 	bl	1a0027da <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00319c:	b10d      	cbz	r5, 1a0031a2 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00319e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0031a2:	4629      	mov	r1, r5
1a0031a4:	4620      	mov	r0, r4
1a0031a6:	f7ff fcdd 	bl	1a002b64 <prvAddCurrentTaskToDelayedList>
	}
1a0031aa:	bd38      	pop	{r3, r4, r5, pc}
1a0031ac:	10004b14 	.word	0x10004b14

1a0031b0 <xTaskRemoveFromEventList>:
{
1a0031b0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0031b2:	68c3      	ldr	r3, [r0, #12]
1a0031b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0031b6:	b944      	cbnz	r4, 1a0031ca <xTaskRemoveFromEventList+0x1a>
1a0031b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031bc:	f383 8811 	msr	BASEPRI, r3
1a0031c0:	f3bf 8f6f 	isb	sy
1a0031c4:	f3bf 8f4f 	dsb	sy
1a0031c8:	e7fe      	b.n	1a0031c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0031ca:	f104 0518 	add.w	r5, r4, #24
1a0031ce:	4628      	mov	r0, r5
1a0031d0:	f7ff fb29 	bl	1a002826 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0031d4:	4b13      	ldr	r3, [pc, #76]	; (1a003224 <xTaskRemoveFromEventList+0x74>)
1a0031d6:	681b      	ldr	r3, [r3, #0]
1a0031d8:	b9e3      	cbnz	r3, 1a003214 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0031da:	1d25      	adds	r5, r4, #4
1a0031dc:	4628      	mov	r0, r5
1a0031de:	f7ff fb22 	bl	1a002826 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0031e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0031e4:	2201      	movs	r2, #1
1a0031e6:	409a      	lsls	r2, r3
1a0031e8:	490f      	ldr	r1, [pc, #60]	; (1a003228 <xTaskRemoveFromEventList+0x78>)
1a0031ea:	6808      	ldr	r0, [r1, #0]
1a0031ec:	4302      	orrs	r2, r0
1a0031ee:	600a      	str	r2, [r1, #0]
1a0031f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0031f4:	009a      	lsls	r2, r3, #2
1a0031f6:	4629      	mov	r1, r5
1a0031f8:	480c      	ldr	r0, [pc, #48]	; (1a00322c <xTaskRemoveFromEventList+0x7c>)
1a0031fa:	4410      	add	r0, r2
1a0031fc:	f7ff faed 	bl	1a0027da <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a003200:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a003202:	4b0b      	ldr	r3, [pc, #44]	; (1a003230 <xTaskRemoveFromEventList+0x80>)
1a003204:	681b      	ldr	r3, [r3, #0]
1a003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003208:	429a      	cmp	r2, r3
1a00320a:	d908      	bls.n	1a00321e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a00320c:	2001      	movs	r0, #1
1a00320e:	4b09      	ldr	r3, [pc, #36]	; (1a003234 <xTaskRemoveFromEventList+0x84>)
1a003210:	6018      	str	r0, [r3, #0]
}
1a003212:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a003214:	4629      	mov	r1, r5
1a003216:	4808      	ldr	r0, [pc, #32]	; (1a003238 <xTaskRemoveFromEventList+0x88>)
1a003218:	f7ff fadf 	bl	1a0027da <vListInsertEnd>
1a00321c:	e7f0      	b.n	1a003200 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00321e:	2000      	movs	r0, #0
	return xReturn;
1a003220:	e7f7      	b.n	1a003212 <xTaskRemoveFromEventList+0x62>
1a003222:	bf00      	nop
1a003224:	10004bb8 	.word	0x10004bb8
1a003228:	10004bc0 	.word	0x10004bc0
1a00322c:	10004b20 	.word	0x10004b20
1a003230:	10004b14 	.word	0x10004b14
1a003234:	10004c38 	.word	0x10004c38
1a003238:	10004bf4 	.word	0x10004bf4

1a00323c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a00323c:	4b03      	ldr	r3, [pc, #12]	; (1a00324c <vTaskInternalSetTimeOutState+0x10>)
1a00323e:	681b      	ldr	r3, [r3, #0]
1a003240:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a003242:	4b03      	ldr	r3, [pc, #12]	; (1a003250 <vTaskInternalSetTimeOutState+0x14>)
1a003244:	681b      	ldr	r3, [r3, #0]
1a003246:	6043      	str	r3, [r0, #4]
}
1a003248:	4770      	bx	lr
1a00324a:	bf00      	nop
1a00324c:	10004bf0 	.word	0x10004bf0
1a003250:	10004c34 	.word	0x10004c34

1a003254 <xTaskCheckForTimeOut>:
{
1a003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a003256:	b150      	cbz	r0, 1a00326e <xTaskCheckForTimeOut+0x1a>
1a003258:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00325a:	b989      	cbnz	r1, 1a003280 <xTaskCheckForTimeOut+0x2c>
1a00325c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003260:	f383 8811 	msr	BASEPRI, r3
1a003264:	f3bf 8f6f 	isb	sy
1a003268:	f3bf 8f4f 	dsb	sy
1a00326c:	e7fe      	b.n	1a00326c <xTaskCheckForTimeOut+0x18>
1a00326e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003272:	f383 8811 	msr	BASEPRI, r3
1a003276:	f3bf 8f6f 	isb	sy
1a00327a:	f3bf 8f4f 	dsb	sy
1a00327e:	e7fe      	b.n	1a00327e <xTaskCheckForTimeOut+0x2a>
1a003280:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a003282:	f000 fb67 	bl	1a003954 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a003286:	4b11      	ldr	r3, [pc, #68]	; (1a0032cc <xTaskCheckForTimeOut+0x78>)
1a003288:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a00328a:	6868      	ldr	r0, [r5, #4]
1a00328c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00328e:	6823      	ldr	r3, [r4, #0]
1a003290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003294:	d016      	beq.n	1a0032c4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a003296:	682f      	ldr	r7, [r5, #0]
1a003298:	4e0d      	ldr	r6, [pc, #52]	; (1a0032d0 <xTaskCheckForTimeOut+0x7c>)
1a00329a:	6836      	ldr	r6, [r6, #0]
1a00329c:	42b7      	cmp	r7, r6
1a00329e:	d001      	beq.n	1a0032a4 <xTaskCheckForTimeOut+0x50>
1a0032a0:	4288      	cmp	r0, r1
1a0032a2:	d911      	bls.n	1a0032c8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0032a4:	4293      	cmp	r3, r2
1a0032a6:	d803      	bhi.n	1a0032b0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0032a8:	2300      	movs	r3, #0
1a0032aa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0032ac:	2401      	movs	r4, #1
1a0032ae:	e005      	b.n	1a0032bc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0032b0:	1a9b      	subs	r3, r3, r2
1a0032b2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0032b4:	4628      	mov	r0, r5
1a0032b6:	f7ff ffc1 	bl	1a00323c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0032ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0032bc:	f000 fb6c 	bl	1a003998 <vPortExitCritical>
}
1a0032c0:	4620      	mov	r0, r4
1a0032c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0032c4:	2400      	movs	r4, #0
1a0032c6:	e7f9      	b.n	1a0032bc <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0032c8:	2401      	movs	r4, #1
1a0032ca:	e7f7      	b.n	1a0032bc <xTaskCheckForTimeOut+0x68>
1a0032cc:	10004c34 	.word	0x10004c34
1a0032d0:	10004bf0 	.word	0x10004bf0

1a0032d4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0032d4:	4b01      	ldr	r3, [pc, #4]	; (1a0032dc <vTaskMissedYield+0x8>)
1a0032d6:	2201      	movs	r2, #1
1a0032d8:	601a      	str	r2, [r3, #0]
}
1a0032da:	4770      	bx	lr
1a0032dc:	10004c38 	.word	0x10004c38

1a0032e0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a0032e0:	4b05      	ldr	r3, [pc, #20]	; (1a0032f8 <xTaskGetSchedulerState+0x18>)
1a0032e2:	681b      	ldr	r3, [r3, #0]
1a0032e4:	b133      	cbz	r3, 1a0032f4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0032e6:	4b05      	ldr	r3, [pc, #20]	; (1a0032fc <xTaskGetSchedulerState+0x1c>)
1a0032e8:	681b      	ldr	r3, [r3, #0]
1a0032ea:	b10b      	cbz	r3, 1a0032f0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a0032ec:	2000      	movs	r0, #0
	}
1a0032ee:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a0032f0:	2002      	movs	r0, #2
1a0032f2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0032f4:	2001      	movs	r0, #1
1a0032f6:	4770      	bx	lr
1a0032f8:	10004c08 	.word	0x10004c08
1a0032fc:	10004bb8 	.word	0x10004bb8

1a003300 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a003300:	2800      	cmp	r0, #0
1a003302:	d049      	beq.n	1a003398 <xTaskPriorityDisinherit+0x98>
	{
1a003304:	b538      	push	{r3, r4, r5, lr}
1a003306:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a003308:	4a26      	ldr	r2, [pc, #152]	; (1a0033a4 <xTaskPriorityDisinherit+0xa4>)
1a00330a:	6812      	ldr	r2, [r2, #0]
1a00330c:	4282      	cmp	r2, r0
1a00330e:	d008      	beq.n	1a003322 <xTaskPriorityDisinherit+0x22>
1a003310:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003314:	f383 8811 	msr	BASEPRI, r3
1a003318:	f3bf 8f6f 	isb	sy
1a00331c:	f3bf 8f4f 	dsb	sy
1a003320:	e7fe      	b.n	1a003320 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a003322:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a003324:	b942      	cbnz	r2, 1a003338 <xTaskPriorityDisinherit+0x38>
1a003326:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00332a:	f383 8811 	msr	BASEPRI, r3
1a00332e:	f3bf 8f6f 	isb	sy
1a003332:	f3bf 8f4f 	dsb	sy
1a003336:	e7fe      	b.n	1a003336 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a003338:	3a01      	subs	r2, #1
1a00333a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a00333c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00333e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a003340:	4288      	cmp	r0, r1
1a003342:	d02b      	beq.n	1a00339c <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a003344:	bb62      	cbnz	r2, 1a0033a0 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a003346:	1d25      	adds	r5, r4, #4
1a003348:	4628      	mov	r0, r5
1a00334a:	f7ff fa6c 	bl	1a002826 <uxListRemove>
1a00334e:	b970      	cbnz	r0, 1a00336e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a003350:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a003352:	2314      	movs	r3, #20
1a003354:	fb03 f302 	mul.w	r3, r3, r2
1a003358:	4913      	ldr	r1, [pc, #76]	; (1a0033a8 <xTaskPriorityDisinherit+0xa8>)
1a00335a:	58cb      	ldr	r3, [r1, r3]
1a00335c:	b93b      	cbnz	r3, 1a00336e <xTaskPriorityDisinherit+0x6e>
1a00335e:	2301      	movs	r3, #1
1a003360:	fa03 f202 	lsl.w	r2, r3, r2
1a003364:	4911      	ldr	r1, [pc, #68]	; (1a0033ac <xTaskPriorityDisinherit+0xac>)
1a003366:	680b      	ldr	r3, [r1, #0]
1a003368:	ea23 0302 	bic.w	r3, r3, r2
1a00336c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00336e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a003370:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003372:	f1c3 0207 	rsb	r2, r3, #7
1a003376:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a003378:	2401      	movs	r4, #1
1a00337a:	fa04 f203 	lsl.w	r2, r4, r3
1a00337e:	490b      	ldr	r1, [pc, #44]	; (1a0033ac <xTaskPriorityDisinherit+0xac>)
1a003380:	6808      	ldr	r0, [r1, #0]
1a003382:	4302      	orrs	r2, r0
1a003384:	600a      	str	r2, [r1, #0]
1a003386:	4629      	mov	r1, r5
1a003388:	4a07      	ldr	r2, [pc, #28]	; (1a0033a8 <xTaskPriorityDisinherit+0xa8>)
1a00338a:	2014      	movs	r0, #20
1a00338c:	fb00 2003 	mla	r0, r0, r3, r2
1a003390:	f7ff fa23 	bl	1a0027da <vListInsertEnd>
					xReturn = pdTRUE;
1a003394:	4620      	mov	r0, r4
	}
1a003396:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a003398:	2000      	movs	r0, #0
	}
1a00339a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a00339c:	2000      	movs	r0, #0
1a00339e:	e7fa      	b.n	1a003396 <xTaskPriorityDisinherit+0x96>
1a0033a0:	2000      	movs	r0, #0
		return xReturn;
1a0033a2:	e7f8      	b.n	1a003396 <xTaskPriorityDisinherit+0x96>
1a0033a4:	10004b14 	.word	0x10004b14
1a0033a8:	10004b20 	.word	0x10004b20
1a0033ac:	10004bc0 	.word	0x10004bc0

1a0033b0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0033b0:	4b06      	ldr	r3, [pc, #24]	; (1a0033cc <prvGetNextExpireTime+0x1c>)
1a0033b2:	681a      	ldr	r2, [r3, #0]
1a0033b4:	6813      	ldr	r3, [r2, #0]
1a0033b6:	fab3 f383 	clz	r3, r3
1a0033ba:	095b      	lsrs	r3, r3, #5
1a0033bc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0033be:	b913      	cbnz	r3, 1a0033c6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0033c0:	68d3      	ldr	r3, [r2, #12]
1a0033c2:	6818      	ldr	r0, [r3, #0]
1a0033c4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0033c6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0033c8:	4770      	bx	lr
1a0033ca:	bf00      	nop
1a0033cc:	10004c3c 	.word	0x10004c3c

1a0033d0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0033d0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0033d2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0033d4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0033d6:	4291      	cmp	r1, r2
1a0033d8:	d80c      	bhi.n	1a0033f4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0033da:	1ad2      	subs	r2, r2, r3
1a0033dc:	6983      	ldr	r3, [r0, #24]
1a0033de:	429a      	cmp	r2, r3
1a0033e0:	d301      	bcc.n	1a0033e6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a0033e2:	2001      	movs	r0, #1
1a0033e4:	e010      	b.n	1a003408 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a0033e6:	1d01      	adds	r1, r0, #4
1a0033e8:	4b09      	ldr	r3, [pc, #36]	; (1a003410 <prvInsertTimerInActiveList+0x40>)
1a0033ea:	6818      	ldr	r0, [r3, #0]
1a0033ec:	f7ff fa01 	bl	1a0027f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0033f0:	2000      	movs	r0, #0
1a0033f2:	e009      	b.n	1a003408 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0033f4:	429a      	cmp	r2, r3
1a0033f6:	d201      	bcs.n	1a0033fc <prvInsertTimerInActiveList+0x2c>
1a0033f8:	4299      	cmp	r1, r3
1a0033fa:	d206      	bcs.n	1a00340a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0033fc:	1d01      	adds	r1, r0, #4
1a0033fe:	4b05      	ldr	r3, [pc, #20]	; (1a003414 <prvInsertTimerInActiveList+0x44>)
1a003400:	6818      	ldr	r0, [r3, #0]
1a003402:	f7ff f9f6 	bl	1a0027f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a003406:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a003408:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00340a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a00340c:	e7fc      	b.n	1a003408 <prvInsertTimerInActiveList+0x38>
1a00340e:	bf00      	nop
1a003410:	10004c40 	.word	0x10004c40
1a003414:	10004c3c 	.word	0x10004c3c

1a003418 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a003418:	b530      	push	{r4, r5, lr}
1a00341a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a00341c:	f000 fa9a 	bl	1a003954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a003420:	4b11      	ldr	r3, [pc, #68]	; (1a003468 <prvCheckForValidListAndQueue+0x50>)
1a003422:	681b      	ldr	r3, [r3, #0]
1a003424:	b11b      	cbz	r3, 1a00342e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a003426:	f000 fab7 	bl	1a003998 <vPortExitCritical>
}
1a00342a:	b003      	add	sp, #12
1a00342c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00342e:	4d0f      	ldr	r5, [pc, #60]	; (1a00346c <prvCheckForValidListAndQueue+0x54>)
1a003430:	4628      	mov	r0, r5
1a003432:	f7ff f9c4 	bl	1a0027be <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a003436:	4c0e      	ldr	r4, [pc, #56]	; (1a003470 <prvCheckForValidListAndQueue+0x58>)
1a003438:	4620      	mov	r0, r4
1a00343a:	f7ff f9c0 	bl	1a0027be <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00343e:	4b0d      	ldr	r3, [pc, #52]	; (1a003474 <prvCheckForValidListAndQueue+0x5c>)
1a003440:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a003442:	4b0d      	ldr	r3, [pc, #52]	; (1a003478 <prvCheckForValidListAndQueue+0x60>)
1a003444:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a003446:	2300      	movs	r3, #0
1a003448:	9300      	str	r3, [sp, #0]
1a00344a:	4b0c      	ldr	r3, [pc, #48]	; (1a00347c <prvCheckForValidListAndQueue+0x64>)
1a00344c:	4a0c      	ldr	r2, [pc, #48]	; (1a003480 <prvCheckForValidListAndQueue+0x68>)
1a00344e:	2110      	movs	r1, #16
1a003450:	200a      	movs	r0, #10
1a003452:	f7fe fed0 	bl	1a0021f6 <xQueueGenericCreateStatic>
1a003456:	4b04      	ldr	r3, [pc, #16]	; (1a003468 <prvCheckForValidListAndQueue+0x50>)
1a003458:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00345a:	2800      	cmp	r0, #0
1a00345c:	d0e3      	beq.n	1a003426 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00345e:	4909      	ldr	r1, [pc, #36]	; (1a003484 <prvCheckForValidListAndQueue+0x6c>)
1a003460:	f7ff f970 	bl	1a002744 <vQueueAddToRegistry>
1a003464:	e7df      	b.n	1a003426 <prvCheckForValidListAndQueue+0xe>
1a003466:	bf00      	nop
1a003468:	10004d60 	.word	0x10004d60
1a00346c:	10004ce4 	.word	0x10004ce4
1a003470:	10004cf8 	.word	0x10004cf8
1a003474:	10004c3c 	.word	0x10004c3c
1a003478:	10004c40 	.word	0x10004c40
1a00347c:	10004d10 	.word	0x10004d10
1a003480:	10004c44 	.word	0x10004c44
1a003484:	1a006c64 	.word	0x1a006c64

1a003488 <prvInitialiseNewTimer>:
{
1a003488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00348c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00348e:	b941      	cbnz	r1, 1a0034a2 <prvInitialiseNewTimer+0x1a>
1a003490:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003494:	f383 8811 	msr	BASEPRI, r3
1a003498:	f3bf 8f6f 	isb	sy
1a00349c:	f3bf 8f4f 	dsb	sy
1a0034a0:	e7fe      	b.n	1a0034a0 <prvInitialiseNewTimer+0x18>
1a0034a2:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0034a4:	b174      	cbz	r4, 1a0034c4 <prvInitialiseNewTimer+0x3c>
1a0034a6:	461d      	mov	r5, r3
1a0034a8:	4616      	mov	r6, r2
1a0034aa:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0034ac:	f7ff ffb4 	bl	1a003418 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0034b0:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0034b4:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0034b6:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0034b8:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0034ba:	9b06      	ldr	r3, [sp, #24]
1a0034bc:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0034be:	1d20      	adds	r0, r4, #4
1a0034c0:	f7ff f988 	bl	1a0027d4 <vListInitialiseItem>
}
1a0034c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0034c8 <xTimerCreateTimerTask>:
{
1a0034c8:	b510      	push	{r4, lr}
1a0034ca:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0034cc:	f7ff ffa4 	bl	1a003418 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0034d0:	4b12      	ldr	r3, [pc, #72]	; (1a00351c <xTimerCreateTimerTask+0x54>)
1a0034d2:	681b      	ldr	r3, [r3, #0]
1a0034d4:	b1cb      	cbz	r3, 1a00350a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0034d6:	2400      	movs	r4, #0
1a0034d8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0034da:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0034dc:	aa07      	add	r2, sp, #28
1a0034de:	a906      	add	r1, sp, #24
1a0034e0:	a805      	add	r0, sp, #20
1a0034e2:	f7ff f9c1 	bl	1a002868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0034e6:	9b05      	ldr	r3, [sp, #20]
1a0034e8:	9302      	str	r3, [sp, #8]
1a0034ea:	9b06      	ldr	r3, [sp, #24]
1a0034ec:	9301      	str	r3, [sp, #4]
1a0034ee:	2304      	movs	r3, #4
1a0034f0:	9300      	str	r3, [sp, #0]
1a0034f2:	4623      	mov	r3, r4
1a0034f4:	9a07      	ldr	r2, [sp, #28]
1a0034f6:	490a      	ldr	r1, [pc, #40]	; (1a003520 <xTimerCreateTimerTask+0x58>)
1a0034f8:	480a      	ldr	r0, [pc, #40]	; (1a003524 <xTimerCreateTimerTask+0x5c>)
1a0034fa:	f7ff fb7f 	bl	1a002bfc <xTaskCreateStatic>
1a0034fe:	4b0a      	ldr	r3, [pc, #40]	; (1a003528 <xTimerCreateTimerTask+0x60>)
1a003500:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a003502:	b110      	cbz	r0, 1a00350a <xTimerCreateTimerTask+0x42>
}
1a003504:	2001      	movs	r0, #1
1a003506:	b008      	add	sp, #32
1a003508:	bd10      	pop	{r4, pc}
1a00350a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00350e:	f383 8811 	msr	BASEPRI, r3
1a003512:	f3bf 8f6f 	isb	sy
1a003516:	f3bf 8f4f 	dsb	sy
1a00351a:	e7fe      	b.n	1a00351a <xTimerCreateTimerTask+0x52>
1a00351c:	10004d60 	.word	0x10004d60
1a003520:	1a006c6c 	.word	0x1a006c6c
1a003524:	1a003845 	.word	0x1a003845
1a003528:	10004d64 	.word	0x10004d64

1a00352c <xTimerCreate>:
	{
1a00352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003530:	b082      	sub	sp, #8
1a003532:	4605      	mov	r5, r0
1a003534:	460e      	mov	r6, r1
1a003536:	4617      	mov	r7, r2
1a003538:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a00353a:	2030      	movs	r0, #48	; 0x30
1a00353c:	f7fe fd24 	bl	1a001f88 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a003540:	4604      	mov	r4, r0
1a003542:	b158      	cbz	r0, 1a00355c <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a003544:	9001      	str	r0, [sp, #4]
1a003546:	9b08      	ldr	r3, [sp, #32]
1a003548:	9300      	str	r3, [sp, #0]
1a00354a:	4643      	mov	r3, r8
1a00354c:	463a      	mov	r2, r7
1a00354e:	4631      	mov	r1, r6
1a003550:	4628      	mov	r0, r5
1a003552:	f7ff ff99 	bl	1a003488 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a003556:	2300      	movs	r3, #0
1a003558:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a00355c:	4620      	mov	r0, r4
1a00355e:	b002      	add	sp, #8
1a003560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a003564 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a003564:	b1c8      	cbz	r0, 1a00359a <xTimerGenericCommand+0x36>
{
1a003566:	b530      	push	{r4, r5, lr}
1a003568:	b085      	sub	sp, #20
1a00356a:	4615      	mov	r5, r2
1a00356c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00356e:	4a17      	ldr	r2, [pc, #92]	; (1a0035cc <xTimerGenericCommand+0x68>)
1a003570:	6810      	ldr	r0, [r2, #0]
1a003572:	b340      	cbz	r0, 1a0035c6 <xTimerGenericCommand+0x62>
1a003574:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a003576:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a003578:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00357a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00357c:	2905      	cmp	r1, #5
1a00357e:	dc1d      	bgt.n	1a0035bc <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a003580:	f7ff feae 	bl	1a0032e0 <xTaskGetSchedulerState>
1a003584:	2802      	cmp	r0, #2
1a003586:	d011      	beq.n	1a0035ac <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a003588:	2300      	movs	r3, #0
1a00358a:	461a      	mov	r2, r3
1a00358c:	4669      	mov	r1, sp
1a00358e:	480f      	ldr	r0, [pc, #60]	; (1a0035cc <xTimerGenericCommand+0x68>)
1a003590:	6800      	ldr	r0, [r0, #0]
1a003592:	f7fe fe9f 	bl	1a0022d4 <xQueueGenericSend>
}
1a003596:	b005      	add	sp, #20
1a003598:	bd30      	pop	{r4, r5, pc}
1a00359a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00359e:	f383 8811 	msr	BASEPRI, r3
1a0035a2:	f3bf 8f6f 	isb	sy
1a0035a6:	f3bf 8f4f 	dsb	sy
1a0035aa:	e7fe      	b.n	1a0035aa <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0035ac:	2300      	movs	r3, #0
1a0035ae:	9a08      	ldr	r2, [sp, #32]
1a0035b0:	4669      	mov	r1, sp
1a0035b2:	4806      	ldr	r0, [pc, #24]	; (1a0035cc <xTimerGenericCommand+0x68>)
1a0035b4:	6800      	ldr	r0, [r0, #0]
1a0035b6:	f7fe fe8d 	bl	1a0022d4 <xQueueGenericSend>
1a0035ba:	e7ec      	b.n	1a003596 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0035bc:	2300      	movs	r3, #0
1a0035be:	4669      	mov	r1, sp
1a0035c0:	f7fe ff46 	bl	1a002450 <xQueueGenericSendFromISR>
1a0035c4:	e7e7      	b.n	1a003596 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0035c6:	2000      	movs	r0, #0
	return xReturn;
1a0035c8:	e7e5      	b.n	1a003596 <xTimerGenericCommand+0x32>
1a0035ca:	bf00      	nop
1a0035cc:	10004d60 	.word	0x10004d60

1a0035d0 <prvSwitchTimerLists>:
{
1a0035d0:	b570      	push	{r4, r5, r6, lr}
1a0035d2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0035d4:	4b1a      	ldr	r3, [pc, #104]	; (1a003640 <prvSwitchTimerLists+0x70>)
1a0035d6:	681b      	ldr	r3, [r3, #0]
1a0035d8:	681a      	ldr	r2, [r3, #0]
1a0035da:	b352      	cbz	r2, 1a003632 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0035dc:	68db      	ldr	r3, [r3, #12]
1a0035de:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0035e0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0035e2:	1d25      	adds	r5, r4, #4
1a0035e4:	4628      	mov	r0, r5
1a0035e6:	f7ff f91e 	bl	1a002826 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0035ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0035ec:	4620      	mov	r0, r4
1a0035ee:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0035f0:	69e3      	ldr	r3, [r4, #28]
1a0035f2:	2b01      	cmp	r3, #1
1a0035f4:	d1ee      	bne.n	1a0035d4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0035f6:	69a3      	ldr	r3, [r4, #24]
1a0035f8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0035fa:	429e      	cmp	r6, r3
1a0035fc:	d207      	bcs.n	1a00360e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0035fe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a003600:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a003602:	4629      	mov	r1, r5
1a003604:	4b0e      	ldr	r3, [pc, #56]	; (1a003640 <prvSwitchTimerLists+0x70>)
1a003606:	6818      	ldr	r0, [r3, #0]
1a003608:	f7ff f8f3 	bl	1a0027f2 <vListInsert>
1a00360c:	e7e2      	b.n	1a0035d4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00360e:	2100      	movs	r1, #0
1a003610:	9100      	str	r1, [sp, #0]
1a003612:	460b      	mov	r3, r1
1a003614:	4632      	mov	r2, r6
1a003616:	4620      	mov	r0, r4
1a003618:	f7ff ffa4 	bl	1a003564 <xTimerGenericCommand>
				configASSERT( xResult );
1a00361c:	2800      	cmp	r0, #0
1a00361e:	d1d9      	bne.n	1a0035d4 <prvSwitchTimerLists+0x4>
1a003620:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003624:	f383 8811 	msr	BASEPRI, r3
1a003628:	f3bf 8f6f 	isb	sy
1a00362c:	f3bf 8f4f 	dsb	sy
1a003630:	e7fe      	b.n	1a003630 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a003632:	4a04      	ldr	r2, [pc, #16]	; (1a003644 <prvSwitchTimerLists+0x74>)
1a003634:	6810      	ldr	r0, [r2, #0]
1a003636:	4902      	ldr	r1, [pc, #8]	; (1a003640 <prvSwitchTimerLists+0x70>)
1a003638:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00363a:	6013      	str	r3, [r2, #0]
}
1a00363c:	b002      	add	sp, #8
1a00363e:	bd70      	pop	{r4, r5, r6, pc}
1a003640:	10004c3c 	.word	0x10004c3c
1a003644:	10004c40 	.word	0x10004c40

1a003648 <prvSampleTimeNow>:
{
1a003648:	b538      	push	{r3, r4, r5, lr}
1a00364a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00364c:	f7ff fb94 	bl	1a002d78 <xTaskGetTickCount>
1a003650:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a003652:	4b07      	ldr	r3, [pc, #28]	; (1a003670 <prvSampleTimeNow+0x28>)
1a003654:	681b      	ldr	r3, [r3, #0]
1a003656:	4283      	cmp	r3, r0
1a003658:	d805      	bhi.n	1a003666 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00365a:	2300      	movs	r3, #0
1a00365c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00365e:	4b04      	ldr	r3, [pc, #16]	; (1a003670 <prvSampleTimeNow+0x28>)
1a003660:	601c      	str	r4, [r3, #0]
}
1a003662:	4620      	mov	r0, r4
1a003664:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a003666:	f7ff ffb3 	bl	1a0035d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00366a:	2301      	movs	r3, #1
1a00366c:	602b      	str	r3, [r5, #0]
1a00366e:	e7f6      	b.n	1a00365e <prvSampleTimeNow+0x16>
1a003670:	10004d0c 	.word	0x10004d0c

1a003674 <prvProcessExpiredTimer>:
{
1a003674:	b570      	push	{r4, r5, r6, lr}
1a003676:	b082      	sub	sp, #8
1a003678:	4605      	mov	r5, r0
1a00367a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00367c:	4b14      	ldr	r3, [pc, #80]	; (1a0036d0 <prvProcessExpiredTimer+0x5c>)
1a00367e:	681b      	ldr	r3, [r3, #0]
1a003680:	68db      	ldr	r3, [r3, #12]
1a003682:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a003684:	1d20      	adds	r0, r4, #4
1a003686:	f7ff f8ce 	bl	1a002826 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00368a:	69e3      	ldr	r3, [r4, #28]
1a00368c:	2b01      	cmp	r3, #1
1a00368e:	d004      	beq.n	1a00369a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a003690:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003692:	4620      	mov	r0, r4
1a003694:	4798      	blx	r3
}
1a003696:	b002      	add	sp, #8
1a003698:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00369a:	69a1      	ldr	r1, [r4, #24]
1a00369c:	462b      	mov	r3, r5
1a00369e:	4632      	mov	r2, r6
1a0036a0:	4429      	add	r1, r5
1a0036a2:	4620      	mov	r0, r4
1a0036a4:	f7ff fe94 	bl	1a0033d0 <prvInsertTimerInActiveList>
1a0036a8:	2800      	cmp	r0, #0
1a0036aa:	d0f1      	beq.n	1a003690 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0036ac:	2100      	movs	r1, #0
1a0036ae:	9100      	str	r1, [sp, #0]
1a0036b0:	460b      	mov	r3, r1
1a0036b2:	462a      	mov	r2, r5
1a0036b4:	4620      	mov	r0, r4
1a0036b6:	f7ff ff55 	bl	1a003564 <xTimerGenericCommand>
			configASSERT( xResult );
1a0036ba:	2800      	cmp	r0, #0
1a0036bc:	d1e8      	bne.n	1a003690 <prvProcessExpiredTimer+0x1c>
1a0036be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0036c2:	f383 8811 	msr	BASEPRI, r3
1a0036c6:	f3bf 8f6f 	isb	sy
1a0036ca:	f3bf 8f4f 	dsb	sy
1a0036ce:	e7fe      	b.n	1a0036ce <prvProcessExpiredTimer+0x5a>
1a0036d0:	10004c3c 	.word	0x10004c3c

1a0036d4 <prvProcessTimerOrBlockTask>:
{
1a0036d4:	b570      	push	{r4, r5, r6, lr}
1a0036d6:	b082      	sub	sp, #8
1a0036d8:	4606      	mov	r6, r0
1a0036da:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0036dc:	f7ff fb44 	bl	1a002d68 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0036e0:	a801      	add	r0, sp, #4
1a0036e2:	f7ff ffb1 	bl	1a003648 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0036e6:	9b01      	ldr	r3, [sp, #4]
1a0036e8:	bb1b      	cbnz	r3, 1a003732 <prvProcessTimerOrBlockTask+0x5e>
1a0036ea:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0036ec:	b90c      	cbnz	r4, 1a0036f2 <prvProcessTimerOrBlockTask+0x1e>
1a0036ee:	42b0      	cmp	r0, r6
1a0036f0:	d218      	bcs.n	1a003724 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a0036f2:	b12c      	cbz	r4, 1a003700 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0036f4:	4b11      	ldr	r3, [pc, #68]	; (1a00373c <prvProcessTimerOrBlockTask+0x68>)
1a0036f6:	681b      	ldr	r3, [r3, #0]
1a0036f8:	681c      	ldr	r4, [r3, #0]
1a0036fa:	fab4 f484 	clz	r4, r4
1a0036fe:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a003700:	4622      	mov	r2, r4
1a003702:	1b71      	subs	r1, r6, r5
1a003704:	4b0e      	ldr	r3, [pc, #56]	; (1a003740 <prvProcessTimerOrBlockTask+0x6c>)
1a003706:	6818      	ldr	r0, [r3, #0]
1a003708:	f7ff f830 	bl	1a00276c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00370c:	f7ff fbc6 	bl	1a002e9c <xTaskResumeAll>
1a003710:	b988      	cbnz	r0, 1a003736 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a003712:	4b0c      	ldr	r3, [pc, #48]	; (1a003744 <prvProcessTimerOrBlockTask+0x70>)
1a003714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003718:	601a      	str	r2, [r3, #0]
1a00371a:	f3bf 8f4f 	dsb	sy
1a00371e:	f3bf 8f6f 	isb	sy
1a003722:	e008      	b.n	1a003736 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a003724:	f7ff fbba 	bl	1a002e9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a003728:	4629      	mov	r1, r5
1a00372a:	4630      	mov	r0, r6
1a00372c:	f7ff ffa2 	bl	1a003674 <prvProcessExpiredTimer>
1a003730:	e001      	b.n	1a003736 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a003732:	f7ff fbb3 	bl	1a002e9c <xTaskResumeAll>
}
1a003736:	b002      	add	sp, #8
1a003738:	bd70      	pop	{r4, r5, r6, pc}
1a00373a:	bf00      	nop
1a00373c:	10004c40 	.word	0x10004c40
1a003740:	10004d60 	.word	0x10004d60
1a003744:	e000ed04 	.word	0xe000ed04

1a003748 <prvProcessReceivedCommands>:
{
1a003748:	b530      	push	{r4, r5, lr}
1a00374a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00374c:	e002      	b.n	1a003754 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00374e:	9b04      	ldr	r3, [sp, #16]
1a003750:	2b00      	cmp	r3, #0
1a003752:	da0f      	bge.n	1a003774 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a003754:	2200      	movs	r2, #0
1a003756:	a904      	add	r1, sp, #16
1a003758:	4b39      	ldr	r3, [pc, #228]	; (1a003840 <prvProcessReceivedCommands+0xf8>)
1a00375a:	6818      	ldr	r0, [r3, #0]
1a00375c:	f7fe fede 	bl	1a00251c <xQueueReceive>
1a003760:	2800      	cmp	r0, #0
1a003762:	d06a      	beq.n	1a00383a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a003764:	9b04      	ldr	r3, [sp, #16]
1a003766:	2b00      	cmp	r3, #0
1a003768:	daf1      	bge.n	1a00374e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00376a:	9907      	ldr	r1, [sp, #28]
1a00376c:	9806      	ldr	r0, [sp, #24]
1a00376e:	9b05      	ldr	r3, [sp, #20]
1a003770:	4798      	blx	r3
1a003772:	e7ec      	b.n	1a00374e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a003774:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a003776:	6963      	ldr	r3, [r4, #20]
1a003778:	b113      	cbz	r3, 1a003780 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00377a:	1d20      	adds	r0, r4, #4
1a00377c:	f7ff f853 	bl	1a002826 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a003780:	a803      	add	r0, sp, #12
1a003782:	f7ff ff61 	bl	1a003648 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a003786:	9b04      	ldr	r3, [sp, #16]
1a003788:	2b09      	cmp	r3, #9
1a00378a:	d8e3      	bhi.n	1a003754 <prvProcessReceivedCommands+0xc>
1a00378c:	a201      	add	r2, pc, #4	; (adr r2, 1a003794 <prvProcessReceivedCommands+0x4c>)
1a00378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a003792:	bf00      	nop
1a003794:	1a0037bd 	.word	0x1a0037bd
1a003798:	1a0037bd 	.word	0x1a0037bd
1a00379c:	1a0037bd 	.word	0x1a0037bd
1a0037a0:	1a003755 	.word	0x1a003755
1a0037a4:	1a003805 	.word	0x1a003805
1a0037a8:	1a00382b 	.word	0x1a00382b
1a0037ac:	1a0037bd 	.word	0x1a0037bd
1a0037b0:	1a0037bd 	.word	0x1a0037bd
1a0037b4:	1a003755 	.word	0x1a003755
1a0037b8:	1a003805 	.word	0x1a003805
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0037bc:	9905      	ldr	r1, [sp, #20]
1a0037be:	69a5      	ldr	r5, [r4, #24]
1a0037c0:	460b      	mov	r3, r1
1a0037c2:	4602      	mov	r2, r0
1a0037c4:	4429      	add	r1, r5
1a0037c6:	4620      	mov	r0, r4
1a0037c8:	f7ff fe02 	bl	1a0033d0 <prvInsertTimerInActiveList>
1a0037cc:	2800      	cmp	r0, #0
1a0037ce:	d0c1      	beq.n	1a003754 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0037d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0037d2:	4620      	mov	r0, r4
1a0037d4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0037d6:	69e3      	ldr	r3, [r4, #28]
1a0037d8:	2b01      	cmp	r3, #1
1a0037da:	d1bb      	bne.n	1a003754 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0037dc:	69a2      	ldr	r2, [r4, #24]
1a0037de:	2100      	movs	r1, #0
1a0037e0:	9100      	str	r1, [sp, #0]
1a0037e2:	460b      	mov	r3, r1
1a0037e4:	9805      	ldr	r0, [sp, #20]
1a0037e6:	4402      	add	r2, r0
1a0037e8:	4620      	mov	r0, r4
1a0037ea:	f7ff febb 	bl	1a003564 <xTimerGenericCommand>
							configASSERT( xResult );
1a0037ee:	2800      	cmp	r0, #0
1a0037f0:	d1b0      	bne.n	1a003754 <prvProcessReceivedCommands+0xc>
1a0037f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0037f6:	f383 8811 	msr	BASEPRI, r3
1a0037fa:	f3bf 8f6f 	isb	sy
1a0037fe:	f3bf 8f4f 	dsb	sy
1a003802:	e7fe      	b.n	1a003802 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a003804:	9905      	ldr	r1, [sp, #20]
1a003806:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a003808:	b131      	cbz	r1, 1a003818 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00380a:	4603      	mov	r3, r0
1a00380c:	4602      	mov	r2, r0
1a00380e:	4401      	add	r1, r0
1a003810:	4620      	mov	r0, r4
1a003812:	f7ff fddd 	bl	1a0033d0 <prvInsertTimerInActiveList>
					break;
1a003816:	e79d      	b.n	1a003754 <prvProcessReceivedCommands+0xc>
1a003818:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00381c:	f383 8811 	msr	BASEPRI, r3
1a003820:	f3bf 8f6f 	isb	sy
1a003824:	f3bf 8f4f 	dsb	sy
1a003828:	e7fe      	b.n	1a003828 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00382a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00382e:	2b00      	cmp	r3, #0
1a003830:	d190      	bne.n	1a003754 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a003832:	4620      	mov	r0, r4
1a003834:	f7fe fbe0 	bl	1a001ff8 <vPortFree>
1a003838:	e78c      	b.n	1a003754 <prvProcessReceivedCommands+0xc>
}
1a00383a:	b009      	add	sp, #36	; 0x24
1a00383c:	bd30      	pop	{r4, r5, pc}
1a00383e:	bf00      	nop
1a003840:	10004d60 	.word	0x10004d60

1a003844 <prvTimerTask>:
{
1a003844:	b500      	push	{lr}
1a003846:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a003848:	a801      	add	r0, sp, #4
1a00384a:	f7ff fdb1 	bl	1a0033b0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00384e:	9901      	ldr	r1, [sp, #4]
1a003850:	f7ff ff40 	bl	1a0036d4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a003854:	f7ff ff78 	bl	1a003748 <prvProcessReceivedCommands>
1a003858:	e7f6      	b.n	1a003848 <prvTimerTask+0x4>

1a00385a <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
1a00385a:	b940      	cbnz	r0, 1a00386e <pvTimerGetTimerID+0x14>
1a00385c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003860:	f383 8811 	msr	BASEPRI, r3
1a003864:	f3bf 8f6f 	isb	sy
1a003868:	f3bf 8f4f 	dsb	sy
1a00386c:	e7fe      	b.n	1a00386c <pvTimerGetTimerID+0x12>
{
1a00386e:	b510      	push	{r4, lr}
1a003870:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
1a003872:	f000 f86f 	bl	1a003954 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
1a003876:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
1a003878:	f000 f88e 	bl	1a003998 <vPortExitCritical>

	return pvReturn;
}
1a00387c:	4620      	mov	r0, r4
1a00387e:	bd10      	pop	{r4, pc}

1a003880 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a003880:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a003882:	2300      	movs	r3, #0
1a003884:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a003886:	4b0d      	ldr	r3, [pc, #52]	; (1a0038bc <prvTaskExitError+0x3c>)
1a003888:	681b      	ldr	r3, [r3, #0]
1a00388a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00388e:	d008      	beq.n	1a0038a2 <prvTaskExitError+0x22>
1a003890:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003894:	f383 8811 	msr	BASEPRI, r3
1a003898:	f3bf 8f6f 	isb	sy
1a00389c:	f3bf 8f4f 	dsb	sy
1a0038a0:	e7fe      	b.n	1a0038a0 <prvTaskExitError+0x20>
1a0038a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0038a6:	f383 8811 	msr	BASEPRI, r3
1a0038aa:	f3bf 8f6f 	isb	sy
1a0038ae:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0038b2:	9b01      	ldr	r3, [sp, #4]
1a0038b4:	2b00      	cmp	r3, #0
1a0038b6:	d0fc      	beq.n	1a0038b2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0038b8:	b002      	add	sp, #8
1a0038ba:	4770      	bx	lr
1a0038bc:	100017e4 	.word	0x100017e4

1a0038c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0038c0:	4808      	ldr	r0, [pc, #32]	; (1a0038e4 <prvPortStartFirstTask+0x24>)
1a0038c2:	6800      	ldr	r0, [r0, #0]
1a0038c4:	6800      	ldr	r0, [r0, #0]
1a0038c6:	f380 8808 	msr	MSP, r0
1a0038ca:	f04f 0000 	mov.w	r0, #0
1a0038ce:	f380 8814 	msr	CONTROL, r0
1a0038d2:	b662      	cpsie	i
1a0038d4:	b661      	cpsie	f
1a0038d6:	f3bf 8f4f 	dsb	sy
1a0038da:	f3bf 8f6f 	isb	sy
1a0038de:	df00      	svc	0
1a0038e0:	bf00      	nop
1a0038e2:	0000      	.short	0x0000
1a0038e4:	e000ed08 	.word	0xe000ed08

1a0038e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0038e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0038f8 <vPortEnableVFP+0x10>
1a0038ec:	6801      	ldr	r1, [r0, #0]
1a0038ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0038f2:	6001      	str	r1, [r0, #0]
1a0038f4:	4770      	bx	lr
1a0038f6:	0000      	.short	0x0000
1a0038f8:	e000ed88 	.word	0xe000ed88

1a0038fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0038fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a003900:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a003904:	f021 0101 	bic.w	r1, r1, #1
1a003908:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00390c:	4b05      	ldr	r3, [pc, #20]	; (1a003924 <pxPortInitialiseStack+0x28>)
1a00390e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a003912:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a003916:	f06f 0302 	mvn.w	r3, #2
1a00391a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00391e:	3844      	subs	r0, #68	; 0x44
1a003920:	4770      	bx	lr
1a003922:	bf00      	nop
1a003924:	1a003881 	.word	0x1a003881
1a003928:	ffffffff 	.word	0xffffffff
1a00392c:	ffffffff 	.word	0xffffffff

1a003930 <SVC_Handler>:
	__asm volatile (
1a003930:	4b07      	ldr	r3, [pc, #28]	; (1a003950 <pxCurrentTCBConst2>)
1a003932:	6819      	ldr	r1, [r3, #0]
1a003934:	6808      	ldr	r0, [r1, #0]
1a003936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00393a:	f380 8809 	msr	PSP, r0
1a00393e:	f3bf 8f6f 	isb	sy
1a003942:	f04f 0000 	mov.w	r0, #0
1a003946:	f380 8811 	msr	BASEPRI, r0
1a00394a:	4770      	bx	lr
1a00394c:	f3af 8000 	nop.w

1a003950 <pxCurrentTCBConst2>:
1a003950:	10004b14 	.word	0x10004b14

1a003954 <vPortEnterCritical>:
1a003954:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003958:	f383 8811 	msr	BASEPRI, r3
1a00395c:	f3bf 8f6f 	isb	sy
1a003960:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a003964:	4a0a      	ldr	r2, [pc, #40]	; (1a003990 <vPortEnterCritical+0x3c>)
1a003966:	6813      	ldr	r3, [r2, #0]
1a003968:	3301      	adds	r3, #1
1a00396a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00396c:	2b01      	cmp	r3, #1
1a00396e:	d000      	beq.n	1a003972 <vPortEnterCritical+0x1e>
}
1a003970:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a003972:	4b08      	ldr	r3, [pc, #32]	; (1a003994 <vPortEnterCritical+0x40>)
1a003974:	681b      	ldr	r3, [r3, #0]
1a003976:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00397a:	d0f9      	beq.n	1a003970 <vPortEnterCritical+0x1c>
1a00397c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003980:	f383 8811 	msr	BASEPRI, r3
1a003984:	f3bf 8f6f 	isb	sy
1a003988:	f3bf 8f4f 	dsb	sy
1a00398c:	e7fe      	b.n	1a00398c <vPortEnterCritical+0x38>
1a00398e:	bf00      	nop
1a003990:	100017e4 	.word	0x100017e4
1a003994:	e000ed04 	.word	0xe000ed04

1a003998 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a003998:	4b09      	ldr	r3, [pc, #36]	; (1a0039c0 <vPortExitCritical+0x28>)
1a00399a:	681b      	ldr	r3, [r3, #0]
1a00399c:	b943      	cbnz	r3, 1a0039b0 <vPortExitCritical+0x18>
1a00399e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039a2:	f383 8811 	msr	BASEPRI, r3
1a0039a6:	f3bf 8f6f 	isb	sy
1a0039aa:	f3bf 8f4f 	dsb	sy
1a0039ae:	e7fe      	b.n	1a0039ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0039b0:	3b01      	subs	r3, #1
1a0039b2:	4a03      	ldr	r2, [pc, #12]	; (1a0039c0 <vPortExitCritical+0x28>)
1a0039b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0039b6:	b90b      	cbnz	r3, 1a0039bc <vPortExitCritical+0x24>
	__asm volatile
1a0039b8:	f383 8811 	msr	BASEPRI, r3
}
1a0039bc:	4770      	bx	lr
1a0039be:	bf00      	nop
1a0039c0:	100017e4 	.word	0x100017e4
1a0039c4:	ffffffff 	.word	0xffffffff
1a0039c8:	ffffffff 	.word	0xffffffff
1a0039cc:	ffffffff 	.word	0xffffffff

1a0039d0 <PendSV_Handler>:
	__asm volatile
1a0039d0:	f3ef 8009 	mrs	r0, PSP
1a0039d4:	f3bf 8f6f 	isb	sy
1a0039d8:	4b15      	ldr	r3, [pc, #84]	; (1a003a30 <pxCurrentTCBConst>)
1a0039da:	681a      	ldr	r2, [r3, #0]
1a0039dc:	f01e 0f10 	tst.w	lr, #16
1a0039e0:	bf08      	it	eq
1a0039e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0039e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0039ea:	6010      	str	r0, [r2, #0]
1a0039ec:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0039f0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0039f4:	f380 8811 	msr	BASEPRI, r0
1a0039f8:	f3bf 8f4f 	dsb	sy
1a0039fc:	f3bf 8f6f 	isb	sy
1a003a00:	f7ff fb3e 	bl	1a003080 <vTaskSwitchContext>
1a003a04:	f04f 0000 	mov.w	r0, #0
1a003a08:	f380 8811 	msr	BASEPRI, r0
1a003a0c:	bc09      	pop	{r0, r3}
1a003a0e:	6819      	ldr	r1, [r3, #0]
1a003a10:	6808      	ldr	r0, [r1, #0]
1a003a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003a16:	f01e 0f10 	tst.w	lr, #16
1a003a1a:	bf08      	it	eq
1a003a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a003a20:	f380 8809 	msr	PSP, r0
1a003a24:	f3bf 8f6f 	isb	sy
1a003a28:	4770      	bx	lr
1a003a2a:	bf00      	nop
1a003a2c:	f3af 8000 	nop.w

1a003a30 <pxCurrentTCBConst>:
1a003a30:	10004b14 	.word	0x10004b14

1a003a34 <SysTick_Handler>:
{
1a003a34:	b508      	push	{r3, lr}
	__asm volatile
1a003a36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003a3a:	f383 8811 	msr	BASEPRI, r3
1a003a3e:	f3bf 8f6f 	isb	sy
1a003a42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a003a46:	f7ff f99d 	bl	1a002d84 <xTaskIncrementTick>
1a003a4a:	b118      	cbz	r0, 1a003a54 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a003a4c:	4b03      	ldr	r3, [pc, #12]	; (1a003a5c <SysTick_Handler+0x28>)
1a003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003a52:	601a      	str	r2, [r3, #0]
	__asm volatile
1a003a54:	2300      	movs	r3, #0
1a003a56:	f383 8811 	msr	BASEPRI, r3
}
1a003a5a:	bd08      	pop	{r3, pc}
1a003a5c:	e000ed04 	.word	0xe000ed04

1a003a60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a003a60:	4a08      	ldr	r2, [pc, #32]	; (1a003a84 <vPortSetupTimerInterrupt+0x24>)
1a003a62:	2300      	movs	r3, #0
1a003a64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a003a66:	4908      	ldr	r1, [pc, #32]	; (1a003a88 <vPortSetupTimerInterrupt+0x28>)
1a003a68:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a003a6a:	4b08      	ldr	r3, [pc, #32]	; (1a003a8c <vPortSetupTimerInterrupt+0x2c>)
1a003a6c:	681b      	ldr	r3, [r3, #0]
1a003a6e:	4908      	ldr	r1, [pc, #32]	; (1a003a90 <vPortSetupTimerInterrupt+0x30>)
1a003a70:	fba1 1303 	umull	r1, r3, r1, r3
1a003a74:	099b      	lsrs	r3, r3, #6
1a003a76:	3b01      	subs	r3, #1
1a003a78:	4906      	ldr	r1, [pc, #24]	; (1a003a94 <vPortSetupTimerInterrupt+0x34>)
1a003a7a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a003a7c:	2307      	movs	r3, #7
1a003a7e:	6013      	str	r3, [r2, #0]
}
1a003a80:	4770      	bx	lr
1a003a82:	bf00      	nop
1a003a84:	e000e010 	.word	0xe000e010
1a003a88:	e000e018 	.word	0xe000e018
1a003a8c:	10004ff8 	.word	0x10004ff8
1a003a90:	10624dd3 	.word	0x10624dd3
1a003a94:	e000e014 	.word	0xe000e014

1a003a98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a003a98:	4b3a      	ldr	r3, [pc, #232]	; (1a003b84 <xPortStartScheduler+0xec>)
1a003a9a:	681a      	ldr	r2, [r3, #0]
1a003a9c:	4b3a      	ldr	r3, [pc, #232]	; (1a003b88 <xPortStartScheduler+0xf0>)
1a003a9e:	429a      	cmp	r2, r3
1a003aa0:	d00d      	beq.n	1a003abe <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a003aa2:	4b38      	ldr	r3, [pc, #224]	; (1a003b84 <xPortStartScheduler+0xec>)
1a003aa4:	681a      	ldr	r2, [r3, #0]
1a003aa6:	4b39      	ldr	r3, [pc, #228]	; (1a003b8c <xPortStartScheduler+0xf4>)
1a003aa8:	429a      	cmp	r2, r3
1a003aaa:	d111      	bne.n	1a003ad0 <xPortStartScheduler+0x38>
	__asm volatile
1a003aac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003ab0:	f383 8811 	msr	BASEPRI, r3
1a003ab4:	f3bf 8f6f 	isb	sy
1a003ab8:	f3bf 8f4f 	dsb	sy
1a003abc:	e7fe      	b.n	1a003abc <xPortStartScheduler+0x24>
1a003abe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003ac2:	f383 8811 	msr	BASEPRI, r3
1a003ac6:	f3bf 8f6f 	isb	sy
1a003aca:	f3bf 8f4f 	dsb	sy
1a003ace:	e7fe      	b.n	1a003ace <xPortStartScheduler+0x36>
{
1a003ad0:	b510      	push	{r4, lr}
1a003ad2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a003ad4:	4b2e      	ldr	r3, [pc, #184]	; (1a003b90 <xPortStartScheduler+0xf8>)
1a003ad6:	781a      	ldrb	r2, [r3, #0]
1a003ad8:	b2d2      	uxtb	r2, r2
1a003ada:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a003adc:	22ff      	movs	r2, #255	; 0xff
1a003ade:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a003ae0:	781b      	ldrb	r3, [r3, #0]
1a003ae2:	b2db      	uxtb	r3, r3
1a003ae4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a003ae8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003aec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a003af0:	4a28      	ldr	r2, [pc, #160]	; (1a003b94 <xPortStartScheduler+0xfc>)
1a003af2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a003af4:	4b28      	ldr	r3, [pc, #160]	; (1a003b98 <xPortStartScheduler+0x100>)
1a003af6:	2207      	movs	r2, #7
1a003af8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a003afa:	e009      	b.n	1a003b10 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a003afc:	4a26      	ldr	r2, [pc, #152]	; (1a003b98 <xPortStartScheduler+0x100>)
1a003afe:	6813      	ldr	r3, [r2, #0]
1a003b00:	3b01      	subs	r3, #1
1a003b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a003b04:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003b08:	005b      	lsls	r3, r3, #1
1a003b0a:	b2db      	uxtb	r3, r3
1a003b0c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a003b10:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003b14:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003b18:	d1f0      	bne.n	1a003afc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a003b1a:	4b1f      	ldr	r3, [pc, #124]	; (1a003b98 <xPortStartScheduler+0x100>)
1a003b1c:	681b      	ldr	r3, [r3, #0]
1a003b1e:	2b04      	cmp	r3, #4
1a003b20:	d008      	beq.n	1a003b34 <xPortStartScheduler+0x9c>
1a003b22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003b26:	f383 8811 	msr	BASEPRI, r3
1a003b2a:	f3bf 8f6f 	isb	sy
1a003b2e:	f3bf 8f4f 	dsb	sy
1a003b32:	e7fe      	b.n	1a003b32 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a003b34:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a003b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003b3a:	4a17      	ldr	r2, [pc, #92]	; (1a003b98 <xPortStartScheduler+0x100>)
1a003b3c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a003b3e:	9b01      	ldr	r3, [sp, #4]
1a003b40:	b2db      	uxtb	r3, r3
1a003b42:	4a13      	ldr	r2, [pc, #76]	; (1a003b90 <xPortStartScheduler+0xf8>)
1a003b44:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a003b46:	4b15      	ldr	r3, [pc, #84]	; (1a003b9c <xPortStartScheduler+0x104>)
1a003b48:	681a      	ldr	r2, [r3, #0]
1a003b4a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a003b4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a003b50:	681a      	ldr	r2, [r3, #0]
1a003b52:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a003b56:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a003b58:	f7ff ff82 	bl	1a003a60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a003b5c:	2400      	movs	r4, #0
1a003b5e:	4b10      	ldr	r3, [pc, #64]	; (1a003ba0 <xPortStartScheduler+0x108>)
1a003b60:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a003b62:	f7ff fec1 	bl	1a0038e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a003b66:	4a0f      	ldr	r2, [pc, #60]	; (1a003ba4 <xPortStartScheduler+0x10c>)
1a003b68:	6813      	ldr	r3, [r2, #0]
1a003b6a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a003b6e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a003b70:	f7ff fea6 	bl	1a0038c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a003b74:	f7ff fa84 	bl	1a003080 <vTaskSwitchContext>
	prvTaskExitError();
1a003b78:	f7ff fe82 	bl	1a003880 <prvTaskExitError>
}
1a003b7c:	4620      	mov	r0, r4
1a003b7e:	b002      	add	sp, #8
1a003b80:	bd10      	pop	{r4, pc}
1a003b82:	bf00      	nop
1a003b84:	e000ed00 	.word	0xe000ed00
1a003b88:	410fc271 	.word	0x410fc271
1a003b8c:	410fc270 	.word	0x410fc270
1a003b90:	e000e400 	.word	0xe000e400
1a003b94:	10004d68 	.word	0x10004d68
1a003b98:	10004d6c 	.word	0x10004d6c
1a003b9c:	e000ed20 	.word	0xe000ed20
1a003ba0:	100017e4 	.word	0x100017e4
1a003ba4:	e000ef34 	.word	0xe000ef34

1a003ba8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a003ba8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a003bac:	2b0f      	cmp	r3, #15
1a003bae:	d90f      	bls.n	1a003bd0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003bb0:	4a10      	ldr	r2, [pc, #64]	; (1a003bf4 <vPortValidateInterruptPriority+0x4c>)
1a003bb2:	5c9b      	ldrb	r3, [r3, r2]
1a003bb4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003bb6:	4a10      	ldr	r2, [pc, #64]	; (1a003bf8 <vPortValidateInterruptPriority+0x50>)
1a003bb8:	7812      	ldrb	r2, [r2, #0]
1a003bba:	429a      	cmp	r2, r3
1a003bbc:	d908      	bls.n	1a003bd0 <vPortValidateInterruptPriority+0x28>
1a003bbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003bc2:	f383 8811 	msr	BASEPRI, r3
1a003bc6:	f3bf 8f6f 	isb	sy
1a003bca:	f3bf 8f4f 	dsb	sy
1a003bce:	e7fe      	b.n	1a003bce <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a003bd0:	4b0a      	ldr	r3, [pc, #40]	; (1a003bfc <vPortValidateInterruptPriority+0x54>)
1a003bd2:	681b      	ldr	r3, [r3, #0]
1a003bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003bd8:	4a09      	ldr	r2, [pc, #36]	; (1a003c00 <vPortValidateInterruptPriority+0x58>)
1a003bda:	6812      	ldr	r2, [r2, #0]
1a003bdc:	4293      	cmp	r3, r2
1a003bde:	d908      	bls.n	1a003bf2 <vPortValidateInterruptPriority+0x4a>
1a003be0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003be4:	f383 8811 	msr	BASEPRI, r3
1a003be8:	f3bf 8f6f 	isb	sy
1a003bec:	f3bf 8f4f 	dsb	sy
1a003bf0:	e7fe      	b.n	1a003bf0 <vPortValidateInterruptPriority+0x48>
	}
1a003bf2:	4770      	bx	lr
1a003bf4:	e000e3f0 	.word	0xe000e3f0
1a003bf8:	10004d68 	.word	0x10004d68
1a003bfc:	e000ed0c 	.word	0xe000ed0c
1a003c00:	10004d6c 	.word	0x10004d6c

1a003c04 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a003c04:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003c06:	4b05      	ldr	r3, [pc, #20]	; (1a003c1c <DAC_IRQHandler+0x18>)
1a003c08:	2201      	movs	r2, #1
1a003c0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a003c0e:	4b04      	ldr	r3, [pc, #16]	; (1a003c20 <DAC_IRQHandler+0x1c>)
1a003c10:	681b      	ldr	r3, [r3, #0]
1a003c12:	b113      	cbz	r3, 1a003c1a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a003c14:	4b02      	ldr	r3, [pc, #8]	; (1a003c20 <DAC_IRQHandler+0x1c>)
1a003c16:	681b      	ldr	r3, [r3, #0]
1a003c18:	4798      	blx	r3
   }
}
1a003c1a:	bd08      	pop	{r3, pc}
1a003c1c:	e000e100 	.word	0xe000e100
1a003c20:	10004d70 	.word	0x10004d70

1a003c24 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003c24:	2200      	movs	r2, #0
1a003c26:	2a05      	cmp	r2, #5
1a003c28:	d819      	bhi.n	1a003c5e <Board_LED_Init+0x3a>
{
1a003c2a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a003c2c:	490c      	ldr	r1, [pc, #48]	; (1a003c60 <Board_LED_Init+0x3c>)
1a003c2e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003c32:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003c36:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a003c38:	4b0a      	ldr	r3, [pc, #40]	; (1a003c64 <Board_LED_Init+0x40>)
1a003c3a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a003c3e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003c42:	2001      	movs	r0, #1
1a003c44:	40a0      	lsls	r0, r4
1a003c46:	4301      	orrs	r1, r0
1a003c48:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a003c4c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a003c50:	2100      	movs	r1, #0
1a003c52:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003c54:	3201      	adds	r2, #1
1a003c56:	2a05      	cmp	r2, #5
1a003c58:	d9e8      	bls.n	1a003c2c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a003c5a:	bc70      	pop	{r4, r5, r6}
1a003c5c:	4770      	bx	lr
1a003c5e:	4770      	bx	lr
1a003c60:	1a006c80 	.word	0x1a006c80
1a003c64:	400f4000 	.word	0x400f4000

1a003c68 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003c68:	2300      	movs	r3, #0
1a003c6a:	2b03      	cmp	r3, #3
1a003c6c:	d816      	bhi.n	1a003c9c <Board_TEC_Init+0x34>
{
1a003c6e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003c70:	490b      	ldr	r1, [pc, #44]	; (1a003ca0 <Board_TEC_Init+0x38>)
1a003c72:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003c76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003c7a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a003c7c:	4c09      	ldr	r4, [pc, #36]	; (1a003ca4 <Board_TEC_Init+0x3c>)
1a003c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003c82:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003c86:	2001      	movs	r0, #1
1a003c88:	40a8      	lsls	r0, r5
1a003c8a:	ea21 0100 	bic.w	r1, r1, r0
1a003c8e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a003c92:	3301      	adds	r3, #1
1a003c94:	2b03      	cmp	r3, #3
1a003c96:	d9eb      	bls.n	1a003c70 <Board_TEC_Init+0x8>
   }
}
1a003c98:	bc30      	pop	{r4, r5}
1a003c9a:	4770      	bx	lr
1a003c9c:	4770      	bx	lr
1a003c9e:	bf00      	nop
1a003ca0:	1a006c78 	.word	0x1a006c78
1a003ca4:	400f4000 	.word	0x400f4000

1a003ca8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003ca8:	2300      	movs	r3, #0
1a003caa:	2b08      	cmp	r3, #8
1a003cac:	d816      	bhi.n	1a003cdc <Board_GPIO_Init+0x34>
{
1a003cae:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003cb0:	490b      	ldr	r1, [pc, #44]	; (1a003ce0 <Board_GPIO_Init+0x38>)
1a003cb2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003cb6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a003cba:	784d      	ldrb	r5, [r1, #1]
1a003cbc:	4c09      	ldr	r4, [pc, #36]	; (1a003ce4 <Board_GPIO_Init+0x3c>)
1a003cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003cc2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003cc6:	2001      	movs	r0, #1
1a003cc8:	40a8      	lsls	r0, r5
1a003cca:	ea21 0100 	bic.w	r1, r1, r0
1a003cce:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003cd2:	3301      	adds	r3, #1
1a003cd4:	2b08      	cmp	r3, #8
1a003cd6:	d9eb      	bls.n	1a003cb0 <Board_GPIO_Init+0x8>
   }
}
1a003cd8:	bc30      	pop	{r4, r5}
1a003cda:	4770      	bx	lr
1a003cdc:	4770      	bx	lr
1a003cde:	bf00      	nop
1a003ce0:	1a006c8c 	.word	0x1a006c8c
1a003ce4:	400f4000 	.word	0x400f4000

1a003ce8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a003ce8:	b510      	push	{r4, lr}
1a003cea:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a003cec:	4c08      	ldr	r4, [pc, #32]	; (1a003d10 <Board_ADC_Init+0x28>)
1a003cee:	4669      	mov	r1, sp
1a003cf0:	4620      	mov	r0, r4
1a003cf2:	f000 fa1d 	bl	1a004130 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003cf6:	4a07      	ldr	r2, [pc, #28]	; (1a003d14 <Board_ADC_Init+0x2c>)
1a003cf8:	4669      	mov	r1, sp
1a003cfa:	4620      	mov	r0, r4
1a003cfc:	f000 fa38 	bl	1a004170 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003d00:	2200      	movs	r2, #0
1a003d02:	4669      	mov	r1, sp
1a003d04:	4620      	mov	r0, r4
1a003d06:	f000 fa4c 	bl	1a0041a2 <Chip_ADC_SetResolution>
}
1a003d0a:	b002      	add	sp, #8
1a003d0c:	bd10      	pop	{r4, pc}
1a003d0e:	bf00      	nop
1a003d10:	400e3000 	.word	0x400e3000
1a003d14:	00061a80 	.word	0x00061a80

1a003d18 <Board_SPI_Init>:
{
1a003d18:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a003d1a:	4c0b      	ldr	r4, [pc, #44]	; (1a003d48 <Board_SPI_Init+0x30>)
1a003d1c:	4620      	mov	r0, r4
1a003d1e:	f000 fe03 	bl	1a004928 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003d22:	6863      	ldr	r3, [r4, #4]
1a003d24:	f023 0304 	bic.w	r3, r3, #4
1a003d28:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003d2a:	6823      	ldr	r3, [r4, #0]
1a003d2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003d30:	f043 0307 	orr.w	r3, r3, #7
1a003d34:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003d36:	4905      	ldr	r1, [pc, #20]	; (1a003d4c <Board_SPI_Init+0x34>)
1a003d38:	4620      	mov	r0, r4
1a003d3a:	f000 fdd6 	bl	1a0048ea <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a003d3e:	6863      	ldr	r3, [r4, #4]
1a003d40:	f043 0302 	orr.w	r3, r3, #2
1a003d44:	6063      	str	r3, [r4, #4]
}
1a003d46:	bd10      	pop	{r4, pc}
1a003d48:	400c5000 	.word	0x400c5000
1a003d4c:	000186a0 	.word	0x000186a0

1a003d50 <Board_I2C_Init>:
{
1a003d50:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a003d52:	2000      	movs	r0, #0
1a003d54:	f000 f8c6 	bl	1a003ee4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a003d58:	4b04      	ldr	r3, [pc, #16]	; (1a003d6c <Board_I2C_Init+0x1c>)
1a003d5a:	f640 0208 	movw	r2, #2056	; 0x808
1a003d5e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a003d62:	4903      	ldr	r1, [pc, #12]	; (1a003d70 <Board_I2C_Init+0x20>)
1a003d64:	2000      	movs	r0, #0
1a003d66:	f000 f8cf 	bl	1a003f08 <Chip_I2C_SetClockRate>
}
1a003d6a:	bd08      	pop	{r3, pc}
1a003d6c:	40086000 	.word	0x40086000
1a003d70:	000f4240 	.word	0x000f4240

1a003d74 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a003d74:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a003d76:	4c07      	ldr	r4, [pc, #28]	; (1a003d94 <Board_Debug_Init+0x20>)
1a003d78:	4620      	mov	r0, r4
1a003d7a:	f000 f8f7 	bl	1a003f6c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a003d7e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a003d82:	4620      	mov	r0, r4
1a003d84:	f000 f93c 	bl	1a004000 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a003d88:	2303      	movs	r3, #3
1a003d8a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a003d8c:	2301      	movs	r3, #1
1a003d8e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a003d90:	bd10      	pop	{r4, pc}
1a003d92:	bf00      	nop
1a003d94:	400c1000 	.word	0x400c1000

1a003d98 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a003d98:	4b03      	ldr	r3, [pc, #12]	; (1a003da8 <Board_UARTPutChar+0x10>)
1a003d9a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a003d9c:	f013 0f20 	tst.w	r3, #32
1a003da0:	d0fa      	beq.n	1a003d98 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a003da2:	4b01      	ldr	r3, [pc, #4]	; (1a003da8 <Board_UARTPutChar+0x10>)
1a003da4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a003da6:	4770      	bx	lr
1a003da8:	400c1000 	.word	0x400c1000

1a003dac <Board_UARTGetChar>:
	return pUART->LSR;
1a003dac:	4b05      	ldr	r3, [pc, #20]	; (1a003dc4 <Board_UARTGetChar+0x18>)
1a003dae:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a003db0:	f013 0f01 	tst.w	r3, #1
1a003db4:	d003      	beq.n	1a003dbe <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003db6:	4b03      	ldr	r3, [pc, #12]	; (1a003dc4 <Board_UARTGetChar+0x18>)
1a003db8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a003dba:	b2c0      	uxtb	r0, r0
1a003dbc:	4770      	bx	lr
   }
   return EOF;
1a003dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a003dc2:	4770      	bx	lr
1a003dc4:	400c1000 	.word	0x400c1000

1a003dc8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003dc8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a003dca:	f7ff ffd3 	bl	1a003d74 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a003dce:	4809      	ldr	r0, [pc, #36]	; (1a003df4 <Board_Init+0x2c>)
1a003dd0:	f000 fd6a 	bl	1a0048a8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a003dd4:	f7ff ff68 	bl	1a003ca8 <Board_GPIO_Init>
   Board_ADC_Init();
1a003dd8:	f7ff ff86 	bl	1a003ce8 <Board_ADC_Init>
   Board_SPI_Init();
1a003ddc:	f7ff ff9c 	bl	1a003d18 <Board_SPI_Init>
   Board_I2C_Init();
1a003de0:	f7ff ffb6 	bl	1a003d50 <Board_I2C_Init>

   Board_LED_Init();
1a003de4:	f7ff ff1e 	bl	1a003c24 <Board_LED_Init>
   Board_TEC_Init();
1a003de8:	f7ff ff3e 	bl	1a003c68 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a003dec:	f000 fca8 	bl	1a004740 <SystemCoreClockUpdate>
}
1a003df0:	bd08      	pop	{r3, pc}
1a003df2:	bf00      	nop
1a003df4:	400f4000 	.word	0x400f4000

1a003df8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a003df8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a003dfa:	b2c0      	uxtb	r0, r0
1a003dfc:	f7ff ffcc 	bl	1a003d98 <Board_UARTPutChar>
}
1a003e00:	bd08      	pop	{r3, pc}

1a003e02 <__stdio_getchar>:

int __stdio_getchar()
{
1a003e02:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a003e04:	f7ff ffd2 	bl	1a003dac <Board_UARTGetChar>
}
1a003e08:	bd08      	pop	{r3, pc}

1a003e0a <__stdio_init>:

void __stdio_init()
{
1a003e0a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a003e0c:	f7ff ffb2 	bl	1a003d74 <Board_Debug_Init>
1a003e10:	bd08      	pop	{r3, pc}
1a003e12:	Address 0x000000001a003e12 is out of bounds.


1a003e14 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003e14:	2300      	movs	r3, #0
1a003e16:	2b1c      	cmp	r3, #28
1a003e18:	d812      	bhi.n	1a003e40 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a003e1a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a003e1c:	4a09      	ldr	r2, [pc, #36]	; (1a003e44 <Board_SetupMuxing+0x30>)
1a003e1e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003e22:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003e26:	784a      	ldrb	r2, [r1, #1]
1a003e28:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003e2a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a003e2e:	4906      	ldr	r1, [pc, #24]	; (1a003e48 <Board_SetupMuxing+0x34>)
1a003e30:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003e34:	3301      	adds	r3, #1
1a003e36:	2b1c      	cmp	r3, #28
1a003e38:	d9f0      	bls.n	1a003e1c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a003e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003e3e:	4770      	bx	lr
1a003e40:	4770      	bx	lr
1a003e42:	bf00      	nop
1a003e44:	1a006ca8 	.word	0x1a006ca8
1a003e48:	40086000 	.word	0x40086000

1a003e4c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a003e4c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a003e4e:	4a17      	ldr	r2, [pc, #92]	; (1a003eac <Board_SetupClocking+0x60>)
1a003e50:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a003e54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003e58:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003e5c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a003e60:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a003e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a003e68:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a003e6c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a003e70:	2201      	movs	r2, #1
1a003e72:	490f      	ldr	r1, [pc, #60]	; (1a003eb0 <Board_SetupClocking+0x64>)
1a003e74:	2006      	movs	r0, #6
1a003e76:	f000 fc6d 	bl	1a004754 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003e7a:	2400      	movs	r4, #0
1a003e7c:	b14c      	cbz	r4, 1a003e92 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a003e7e:	4b0b      	ldr	r3, [pc, #44]	; (1a003eac <Board_SetupClocking+0x60>)
1a003e80:	685a      	ldr	r2, [r3, #4]
1a003e82:	f022 020c 	bic.w	r2, r2, #12
1a003e86:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a003e88:	685a      	ldr	r2, [r3, #4]
1a003e8a:	f042 0203 	orr.w	r2, r2, #3
1a003e8e:	605a      	str	r2, [r3, #4]
}
1a003e90:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a003e92:	4808      	ldr	r0, [pc, #32]	; (1a003eb4 <Board_SetupClocking+0x68>)
1a003e94:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003e98:	2301      	movs	r3, #1
1a003e9a:	788a      	ldrb	r2, [r1, #2]
1a003e9c:	7849      	ldrb	r1, [r1, #1]
1a003e9e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003ea2:	f000 fba9 	bl	1a0045f8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a003ea6:	3401      	adds	r4, #1
1a003ea8:	e7e8      	b.n	1a003e7c <Board_SetupClocking+0x30>
1a003eaa:	bf00      	nop
1a003eac:	40043000 	.word	0x40043000
1a003eb0:	0c28cb00 	.word	0x0c28cb00
1a003eb4:	1a006ca4 	.word	0x1a006ca4

1a003eb8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003eb8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a003eba:	f7ff ffab 	bl	1a003e14 <Board_SetupMuxing>
    Board_SetupClocking();
1a003ebe:	f7ff ffc5 	bl	1a003e4c <Board_SetupClocking>
}
1a003ec2:	bd08      	pop	{r3, pc}

1a003ec4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003ec4:	2901      	cmp	r1, #1
1a003ec6:	d000      	beq.n	1a003eca <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003ec8:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003eca:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003ece:	0082      	lsls	r2, r0, #2
1a003ed0:	4b03      	ldr	r3, [pc, #12]	; (1a003ee0 <Chip_I2C_EventHandler+0x1c>)
1a003ed2:	4413      	add	r3, r2
1a003ed4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003ed6:	7d13      	ldrb	r3, [r2, #20]
1a003ed8:	b2db      	uxtb	r3, r3
1a003eda:	2b04      	cmp	r3, #4
1a003edc:	d0fb      	beq.n	1a003ed6 <Chip_I2C_EventHandler+0x12>
1a003ede:	e7f3      	b.n	1a003ec8 <Chip_I2C_EventHandler+0x4>
1a003ee0:	100017e8 	.word	0x100017e8

1a003ee4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003ee4:	b570      	push	{r4, r5, r6, lr}
1a003ee6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003ee8:	4e06      	ldr	r6, [pc, #24]	; (1a003f04 <Chip_I2C_Init+0x20>)
1a003eea:	00c4      	lsls	r4, r0, #3
1a003eec:	1a22      	subs	r2, r4, r0
1a003eee:	0093      	lsls	r3, r2, #2
1a003ef0:	4433      	add	r3, r6
1a003ef2:	8898      	ldrh	r0, [r3, #4]
1a003ef4:	f000 fbe4 	bl	1a0046c0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003ef8:	1b64      	subs	r4, r4, r5
1a003efa:	00a3      	lsls	r3, r4, #2
1a003efc:	58f3      	ldr	r3, [r6, r3]
1a003efe:	226c      	movs	r2, #108	; 0x6c
1a003f00:	619a      	str	r2, [r3, #24]
}
1a003f02:	bd70      	pop	{r4, r5, r6, pc}
1a003f04:	100017e8 	.word	0x100017e8

1a003f08 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003f0c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003f0e:	4e0b      	ldr	r6, [pc, #44]	; (1a003f3c <Chip_I2C_SetClockRate+0x34>)
1a003f10:	00c5      	lsls	r5, r0, #3
1a003f12:	1a2b      	subs	r3, r5, r0
1a003f14:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003f18:	eb06 0308 	add.w	r3, r6, r8
1a003f1c:	8898      	ldrh	r0, [r3, #4]
1a003f1e:	f000 fbe9 	bl	1a0046f4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003f22:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003f26:	f856 3008 	ldr.w	r3, [r6, r8]
1a003f2a:	0842      	lsrs	r2, r0, #1
1a003f2c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003f2e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003f32:	691a      	ldr	r2, [r3, #16]
1a003f34:	1a80      	subs	r0, r0, r2
1a003f36:	6158      	str	r0, [r3, #20]
}
1a003f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003f3c:	100017e8 	.word	0x100017e8

1a003f40 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003f40:	4b09      	ldr	r3, [pc, #36]	; (1a003f68 <Chip_UART_GetIndex+0x28>)
1a003f42:	4298      	cmp	r0, r3
1a003f44:	d009      	beq.n	1a003f5a <Chip_UART_GetIndex+0x1a>
1a003f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a003f4a:	4298      	cmp	r0, r3
1a003f4c:	d007      	beq.n	1a003f5e <Chip_UART_GetIndex+0x1e>
1a003f4e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a003f52:	4298      	cmp	r0, r3
1a003f54:	d005      	beq.n	1a003f62 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a003f56:	2000      	movs	r0, #0
1a003f58:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a003f5a:	2002      	movs	r0, #2
1a003f5c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a003f5e:	2003      	movs	r0, #3
1a003f60:	4770      	bx	lr
			return 1;
1a003f62:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a003f64:	4770      	bx	lr
1a003f66:	bf00      	nop
1a003f68:	400c1000 	.word	0x400c1000

1a003f6c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a003f6c:	b530      	push	{r4, r5, lr}
1a003f6e:	b083      	sub	sp, #12
1a003f70:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a003f72:	f7ff ffe5 	bl	1a003f40 <Chip_UART_GetIndex>
1a003f76:	2301      	movs	r3, #1
1a003f78:	461a      	mov	r2, r3
1a003f7a:	4619      	mov	r1, r3
1a003f7c:	4d0e      	ldr	r5, [pc, #56]	; (1a003fb8 <Chip_UART_Init+0x4c>)
1a003f7e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a003f82:	f000 fb7f 	bl	1a004684 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a003f86:	2307      	movs	r3, #7
1a003f88:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a003f8a:	2300      	movs	r3, #0
1a003f8c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a003f8e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a003f90:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a003f92:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a003f94:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a003f96:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a003f98:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a003f9a:	4b08      	ldr	r3, [pc, #32]	; (1a003fbc <Chip_UART_Init+0x50>)
1a003f9c:	429c      	cmp	r4, r3
1a003f9e:	d006      	beq.n	1a003fae <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a003fa0:	2303      	movs	r3, #3
1a003fa2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a003fa4:	2310      	movs	r3, #16
1a003fa6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a003fa8:	9b01      	ldr	r3, [sp, #4]
}
1a003faa:	b003      	add	sp, #12
1a003fac:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a003fae:	2300      	movs	r3, #0
1a003fb0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003fb2:	69a3      	ldr	r3, [r4, #24]
1a003fb4:	9301      	str	r3, [sp, #4]
1a003fb6:	e7f3      	b.n	1a003fa0 <Chip_UART_Init+0x34>
1a003fb8:	1a006d24 	.word	0x1a006d24
1a003fbc:	40082000 	.word	0x40082000

1a003fc0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003fc0:	b538      	push	{r3, r4, r5, lr}
1a003fc2:	4605      	mov	r5, r0
1a003fc4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003fc6:	f7ff ffbb 	bl	1a003f40 <Chip_UART_GetIndex>
1a003fca:	4b0c      	ldr	r3, [pc, #48]	; (1a003ffc <Chip_UART_SetBaud+0x3c>)
1a003fcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003fd0:	f000 fb90 	bl	1a0046f4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003fd4:	0123      	lsls	r3, r4, #4
1a003fd6:	fbb0 f3f3 	udiv	r3, r0, r3
1a003fda:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003fdc:	68ea      	ldr	r2, [r5, #12]
1a003fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003fe2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003fe4:	6029      	str	r1, [r5, #0]
1a003fe6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003fea:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003fec:	68ea      	ldr	r2, [r5, #12]
1a003fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003ff2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003ff4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003ff8:	0900      	lsrs	r0, r0, #4
1a003ffa:	bd38      	pop	{r3, r4, r5, pc}
1a003ffc:	1a006d1c 	.word	0x1a006d1c

1a004000 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004004:	b083      	sub	sp, #12
1a004006:	4683      	mov	fp, r0
1a004008:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00400a:	f7ff ff99 	bl	1a003f40 <Chip_UART_GetIndex>
1a00400e:	4b35      	ldr	r3, [pc, #212]	; (1a0040e4 <Chip_UART_SetBaudFDR+0xe4>)
1a004010:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a004014:	f000 fb6e 	bl	1a0046f4 <Chip_Clock_GetRate>
1a004018:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00401a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00401e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a004020:	2300      	movs	r3, #0
1a004022:	9301      	str	r3, [sp, #4]
1a004024:	46a2      	mov	sl, r4
1a004026:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a004028:	e02a      	b.n	1a004080 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00402a:	4242      	negs	r2, r0
				div ++;
1a00402c:	1c4b      	adds	r3, r1, #1
1a00402e:	e017      	b.n	1a004060 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a004030:	b30a      	cbz	r2, 1a004076 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a004032:	4617      	mov	r7, r2
			sd = d;
1a004034:	9501      	str	r5, [sp, #4]
			sm = m;
1a004036:	46a2      	mov	sl, r4
			sdiv = div;
1a004038:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00403a:	3501      	adds	r5, #1
1a00403c:	42ac      	cmp	r4, r5
1a00403e:	d91e      	bls.n	1a00407e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a004040:	0933      	lsrs	r3, r6, #4
1a004042:	0730      	lsls	r0, r6, #28
1a004044:	fba4 0100 	umull	r0, r1, r4, r0
1a004048:	fb04 1103 	mla	r1, r4, r3, r1
1a00404c:	1962      	adds	r2, r4, r5
1a00404e:	fb08 f202 	mul.w	r2, r8, r2
1a004052:	2300      	movs	r3, #0
1a004054:	f001 fa8e 	bl	1a005574 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a004058:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00405a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00405c:	2800      	cmp	r0, #0
1a00405e:	dbe4      	blt.n	1a00402a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a004060:	4297      	cmp	r7, r2
1a004062:	d3ea      	bcc.n	1a00403a <Chip_UART_SetBaudFDR+0x3a>
1a004064:	2b00      	cmp	r3, #0
1a004066:	d0e8      	beq.n	1a00403a <Chip_UART_SetBaudFDR+0x3a>
1a004068:	0c19      	lsrs	r1, r3, #16
1a00406a:	d1e6      	bne.n	1a00403a <Chip_UART_SetBaudFDR+0x3a>
1a00406c:	2b02      	cmp	r3, #2
1a00406e:	d8df      	bhi.n	1a004030 <Chip_UART_SetBaudFDR+0x30>
1a004070:	2d00      	cmp	r5, #0
1a004072:	d0dd      	beq.n	1a004030 <Chip_UART_SetBaudFDR+0x30>
1a004074:	e7e1      	b.n	1a00403a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a004076:	4617      	mov	r7, r2
			sd = d;
1a004078:	9501      	str	r5, [sp, #4]
			sm = m;
1a00407a:	46a2      	mov	sl, r4
			sdiv = div;
1a00407c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00407e:	3401      	adds	r4, #1
1a004080:	b11f      	cbz	r7, 1a00408a <Chip_UART_SetBaudFDR+0x8a>
1a004082:	2c0f      	cmp	r4, #15
1a004084:	d801      	bhi.n	1a00408a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a004086:	2500      	movs	r5, #0
1a004088:	e7d8      	b.n	1a00403c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00408a:	f1b9 0f00 	cmp.w	r9, #0
1a00408e:	d024      	beq.n	1a0040da <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a004090:	f8db 300c 	ldr.w	r3, [fp, #12]
1a004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004098:	f8cb 300c 	str.w	r3, [fp, #12]
1a00409c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0040a0:	f8cb 3000 	str.w	r3, [fp]
1a0040a4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0040a8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0040ac:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0040b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0040b4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0040b8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0040bc:	b2db      	uxtb	r3, r3
1a0040be:	9901      	ldr	r1, [sp, #4]
1a0040c0:	f001 020f 	and.w	r2, r1, #15
1a0040c4:	4313      	orrs	r3, r2
1a0040c6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0040ca:	0933      	lsrs	r3, r6, #4
1a0040cc:	fb0a f303 	mul.w	r3, sl, r3
1a0040d0:	448a      	add	sl, r1
1a0040d2:	fb09 f90a 	mul.w	r9, r9, sl
1a0040d6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0040da:	4648      	mov	r0, r9
1a0040dc:	b003      	add	sp, #12
1a0040de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0040e2:	bf00      	nop
1a0040e4:	1a006d1c 	.word	0x1a006d1c

1a0040e8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0040e8:	4b03      	ldr	r3, [pc, #12]	; (1a0040f8 <Chip_ADC_GetClockIndex+0x10>)
1a0040ea:	4298      	cmp	r0, r3
1a0040ec:	d001      	beq.n	1a0040f2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0040ee:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0040f0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0040f2:	2004      	movs	r0, #4
1a0040f4:	4770      	bx	lr
1a0040f6:	bf00      	nop
1a0040f8:	400e4000 	.word	0x400e4000

1a0040fc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0040fc:	b570      	push	{r4, r5, r6, lr}
1a0040fe:	460d      	mov	r5, r1
1a004100:	4614      	mov	r4, r2
1a004102:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a004104:	f7ff fff0 	bl	1a0040e8 <Chip_ADC_GetClockIndex>
1a004108:	f000 faf4 	bl	1a0046f4 <Chip_Clock_GetRate>
	if (burstMode) {
1a00410c:	b965      	cbnz	r5, 1a004128 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00410e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a004112:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a004116:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00411a:	0064      	lsls	r4, r4, #1
1a00411c:	fbb0 f0f4 	udiv	r0, r0, r4
1a004120:	b2c0      	uxtb	r0, r0
1a004122:	3801      	subs	r0, #1
	return div;
}
1a004124:	b2c0      	uxtb	r0, r0
1a004126:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a004128:	fb04 f406 	mul.w	r4, r4, r6
1a00412c:	e7f3      	b.n	1a004116 <getClkDiv+0x1a>
1a00412e:	Address 0x000000001a00412e is out of bounds.


1a004130 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a004130:	b538      	push	{r3, r4, r5, lr}
1a004132:	4605      	mov	r5, r0
1a004134:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a004136:	f7ff ffd7 	bl	1a0040e8 <Chip_ADC_GetClockIndex>
1a00413a:	2301      	movs	r3, #1
1a00413c:	461a      	mov	r2, r3
1a00413e:	4619      	mov	r1, r3
1a004140:	f000 faa0 	bl	1a004684 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a004144:	2100      	movs	r1, #0
1a004146:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a004148:	4a08      	ldr	r2, [pc, #32]	; (1a00416c <Chip_ADC_Init+0x3c>)
1a00414a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00414c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00414e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a004150:	230b      	movs	r3, #11
1a004152:	4628      	mov	r0, r5
1a004154:	f7ff ffd2 	bl	1a0040fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a004158:	0200      	lsls	r0, r0, #8
1a00415a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00415e:	7920      	ldrb	r0, [r4, #4]
1a004160:	0440      	lsls	r0, r0, #17
1a004162:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a004166:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a004168:	6028      	str	r0, [r5, #0]
}
1a00416a:	bd38      	pop	{r3, r4, r5, pc}
1a00416c:	00061a80 	.word	0x00061a80

1a004170 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a004170:	b570      	push	{r4, r5, r6, lr}
1a004172:	4605      	mov	r5, r0
1a004174:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a004176:	6804      	ldr	r4, [r0, #0]
1a004178:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00417c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a004180:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a004182:	790b      	ldrb	r3, [r1, #4]
1a004184:	f1c3 030b 	rsb	r3, r3, #11
1a004188:	b2db      	uxtb	r3, r3
1a00418a:	7949      	ldrb	r1, [r1, #5]
1a00418c:	f7ff ffb6 	bl	1a0040fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a004190:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a004194:	7930      	ldrb	r0, [r6, #4]
1a004196:	0440      	lsls	r0, r0, #17
1a004198:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00419c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00419e:	6028      	str	r0, [r5, #0]
}
1a0041a0:	bd70      	pop	{r4, r5, r6, pc}

1a0041a2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0041a2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0041a4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0041a6:	680a      	ldr	r2, [r1, #0]
1a0041a8:	f7ff ffe2 	bl	1a004170 <Chip_ADC_SetSampleRate>
}
1a0041ac:	bd08      	pop	{r3, pc}
1a0041ae:	Address 0x000000001a0041ae is out of bounds.


1a0041b0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0041b0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0041b2:	680b      	ldr	r3, [r1, #0]
1a0041b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0041b8:	d002      	beq.n	1a0041c0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0041ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0041be:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0041c0:	4607      	mov	r7, r0
1a0041c2:	2501      	movs	r5, #1
1a0041c4:	e03b      	b.n	1a00423e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0041c6:	694b      	ldr	r3, [r1, #20]
1a0041c8:	fb03 f302 	mul.w	r3, r3, r2
1a0041cc:	fbb3 f3f5 	udiv	r3, r3, r5
1a0041d0:	e014      	b.n	1a0041fc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0041d2:	461c      	mov	r4, r3
1a0041d4:	e020      	b.n	1a004218 <pll_calc_divs+0x68>
		return -val;
1a0041d6:	f1cc 0c00 	rsb	ip, ip, #0
1a0041da:	e020      	b.n	1a00421e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0041dc:	3201      	adds	r2, #1
1a0041de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0041e2:	dc26      	bgt.n	1a004232 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0041e4:	680c      	ldr	r4, [r1, #0]
1a0041e6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0041ea:	d0ec      	beq.n	1a0041c6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0041ec:	1c73      	adds	r3, r6, #1
1a0041ee:	fa02 fc03 	lsl.w	ip, r2, r3
1a0041f2:	694b      	ldr	r3, [r1, #20]
1a0041f4:	fb03 f30c 	mul.w	r3, r3, ip
1a0041f8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0041fc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00424c <pll_calc_divs+0x9c>
1a004200:	4563      	cmp	r3, ip
1a004202:	d9eb      	bls.n	1a0041dc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a004204:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a004250 <pll_calc_divs+0xa0>
1a004208:	4563      	cmp	r3, ip
1a00420a:	d812      	bhi.n	1a004232 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00420c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a004210:	d1df      	bne.n	1a0041d2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a004212:	1c74      	adds	r4, r6, #1
1a004214:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a004218:	ebb0 0c04 	subs.w	ip, r0, r4
1a00421c:	d4db      	bmi.n	1a0041d6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00421e:	4567      	cmp	r7, ip
1a004220:	d9dc      	bls.n	1a0041dc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a004222:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a004224:	1c77      	adds	r7, r6, #1
1a004226:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a004228:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00422a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00422c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00422e:	4667      	mov	r7, ip
1a004230:	e7d4      	b.n	1a0041dc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a004232:	3601      	adds	r6, #1
1a004234:	2e03      	cmp	r6, #3
1a004236:	dc01      	bgt.n	1a00423c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a004238:	2201      	movs	r2, #1
1a00423a:	e7d0      	b.n	1a0041de <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00423c:	3501      	adds	r5, #1
1a00423e:	2d04      	cmp	r5, #4
1a004240:	dc01      	bgt.n	1a004246 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a004242:	2600      	movs	r6, #0
1a004244:	e7f6      	b.n	1a004234 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a004246:	bcf0      	pop	{r4, r5, r6, r7}
1a004248:	4770      	bx	lr
1a00424a:	bf00      	nop
1a00424c:	094c5eff 	.word	0x094c5eff
1a004250:	1312d000 	.word	0x1312d000

1a004254 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a004254:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004256:	b099      	sub	sp, #100	; 0x64
1a004258:	4605      	mov	r5, r0
1a00425a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00425c:	225c      	movs	r2, #92	; 0x5c
1a00425e:	2100      	movs	r1, #0
1a004260:	a801      	add	r0, sp, #4
1a004262:	f001 fcb0 	bl	1a005bc6 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a004266:	2380      	movs	r3, #128	; 0x80
1a004268:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00426a:	6963      	ldr	r3, [r4, #20]
1a00426c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00426e:	7923      	ldrb	r3, [r4, #4]
1a004270:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a004274:	4669      	mov	r1, sp
1a004276:	4628      	mov	r0, r5
1a004278:	f7ff ff9a 	bl	1a0041b0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00427c:	9b06      	ldr	r3, [sp, #24]
1a00427e:	42ab      	cmp	r3, r5
1a004280:	d027      	beq.n	1a0042d2 <pll_get_frac+0x7e>
	if (val < 0)
1a004282:	1aeb      	subs	r3, r5, r3
1a004284:	d42e      	bmi.n	1a0042e4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a004286:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a004288:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00428a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00428e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a004290:	6963      	ldr	r3, [r4, #20]
1a004292:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a004294:	7923      	ldrb	r3, [r4, #4]
1a004296:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00429a:	a910      	add	r1, sp, #64	; 0x40
1a00429c:	4628      	mov	r0, r5
1a00429e:	f7ff ff87 	bl	1a0041b0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0042a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0042a4:	42ab      	cmp	r3, r5
1a0042a6:	d01f      	beq.n	1a0042e8 <pll_get_frac+0x94>
	if (val < 0)
1a0042a8:	1aeb      	subs	r3, r5, r3
1a0042aa:	d425      	bmi.n	1a0042f8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0042ac:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0042ae:	4b2b      	ldr	r3, [pc, #172]	; (1a00435c <pll_get_frac+0x108>)
1a0042b0:	429d      	cmp	r5, r3
1a0042b2:	d923      	bls.n	1a0042fc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0042b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0042b6:	1aed      	subs	r5, r5, r3
1a0042b8:	d433      	bmi.n	1a004322 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0042ba:	42ae      	cmp	r6, r5
1a0042bc:	dc3b      	bgt.n	1a004336 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0042be:	42be      	cmp	r6, r7
1a0042c0:	dc31      	bgt.n	1a004326 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0042c2:	466d      	mov	r5, sp
1a0042c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0042c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0042c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0042cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0042d0:	e006      	b.n	1a0042e0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0042d2:	466d      	mov	r5, sp
1a0042d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0042d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0042d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0042dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0042e0:	b019      	add	sp, #100	; 0x64
1a0042e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0042e4:	425b      	negs	r3, r3
1a0042e6:	e7ce      	b.n	1a004286 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0042e8:	ad10      	add	r5, sp, #64	; 0x40
1a0042ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0042ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0042ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0042f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0042f6:	e7f3      	b.n	1a0042e0 <pll_get_frac+0x8c>
		return -val;
1a0042f8:	425b      	negs	r3, r3
1a0042fa:	e7d7      	b.n	1a0042ac <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0042fc:	2340      	movs	r3, #64	; 0x40
1a0042fe:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a004300:	6963      	ldr	r3, [r4, #20]
1a004302:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a004304:	a908      	add	r1, sp, #32
1a004306:	4628      	mov	r0, r5
1a004308:	f7ff ff52 	bl	1a0041b0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00430c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00430e:	42ab      	cmp	r3, r5
1a004310:	d1d0      	bne.n	1a0042b4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a004312:	ad08      	add	r5, sp, #32
1a004314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a004316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004318:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00431c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a004320:	e7de      	b.n	1a0042e0 <pll_get_frac+0x8c>
		return -val;
1a004322:	426d      	negs	r5, r5
1a004324:	e7c9      	b.n	1a0042ba <pll_get_frac+0x66>
			*ppll = pll[2];
1a004326:	ad10      	add	r5, sp, #64	; 0x40
1a004328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00432a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00432c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004334:	e7d4      	b.n	1a0042e0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a004336:	42af      	cmp	r7, r5
1a004338:	db07      	blt.n	1a00434a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00433a:	ad08      	add	r5, sp, #32
1a00433c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00433e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004348:	e7ca      	b.n	1a0042e0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00434a:	ad10      	add	r5, sp, #64	; 0x40
1a00434c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00434e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a004350:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a004354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a004358:	e7c2      	b.n	1a0042e0 <pll_get_frac+0x8c>
1a00435a:	bf00      	nop
1a00435c:	068e7780 	.word	0x068e7780

1a004360 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a004360:	b430      	push	{r4, r5}
1a004362:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a004364:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a004366:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a004368:	e000      	b.n	1a00436c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00436a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00436c:	281c      	cmp	r0, #28
1a00436e:	d118      	bne.n	1a0043a2 <Chip_Clock_FindBaseClock+0x42>
1a004370:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004374:	0051      	lsls	r1, r2, #1
1a004376:	4a0c      	ldr	r2, [pc, #48]	; (1a0043a8 <Chip_Clock_FindBaseClock+0x48>)
1a004378:	440a      	add	r2, r1
1a00437a:	7914      	ldrb	r4, [r2, #4]
1a00437c:	4284      	cmp	r4, r0
1a00437e:	d010      	beq.n	1a0043a2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a004380:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a004384:	004a      	lsls	r2, r1, #1
1a004386:	4908      	ldr	r1, [pc, #32]	; (1a0043a8 <Chip_Clock_FindBaseClock+0x48>)
1a004388:	5a8a      	ldrh	r2, [r1, r2]
1a00438a:	42aa      	cmp	r2, r5
1a00438c:	d8ed      	bhi.n	1a00436a <Chip_Clock_FindBaseClock+0xa>
1a00438e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a004392:	0051      	lsls	r1, r2, #1
1a004394:	4a04      	ldr	r2, [pc, #16]	; (1a0043a8 <Chip_Clock_FindBaseClock+0x48>)
1a004396:	440a      	add	r2, r1
1a004398:	8852      	ldrh	r2, [r2, #2]
1a00439a:	42aa      	cmp	r2, r5
1a00439c:	d3e5      	bcc.n	1a00436a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00439e:	4620      	mov	r0, r4
1a0043a0:	e7e4      	b.n	1a00436c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0043a2:	bc30      	pop	{r4, r5}
1a0043a4:	4770      	bx	lr
1a0043a6:	bf00      	nop
1a0043a8:	1a006d38 	.word	0x1a006d38

1a0043ac <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0043ac:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0043ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0043b2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0043b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0043ec <Chip_Clock_EnableCrystal+0x40>)
1a0043b6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0043b8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0043bc:	6992      	ldr	r2, [r2, #24]
1a0043be:	428a      	cmp	r2, r1
1a0043c0:	d001      	beq.n	1a0043c6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0043c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0043ec <Chip_Clock_EnableCrystal+0x40>)
1a0043c4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0043c6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0043ca:	4a09      	ldr	r2, [pc, #36]	; (1a0043f0 <Chip_Clock_EnableCrystal+0x44>)
1a0043cc:	6811      	ldr	r1, [r2, #0]
1a0043ce:	4a09      	ldr	r2, [pc, #36]	; (1a0043f4 <Chip_Clock_EnableCrystal+0x48>)
1a0043d0:	4291      	cmp	r1, r2
1a0043d2:	d901      	bls.n	1a0043d8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0043d4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0043d8:	4a04      	ldr	r2, [pc, #16]	; (1a0043ec <Chip_Clock_EnableCrystal+0x40>)
1a0043da:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0043dc:	9b01      	ldr	r3, [sp, #4]
1a0043de:	1e5a      	subs	r2, r3, #1
1a0043e0:	9201      	str	r2, [sp, #4]
1a0043e2:	2b00      	cmp	r3, #0
1a0043e4:	d1fa      	bne.n	1a0043dc <Chip_Clock_EnableCrystal+0x30>
}
1a0043e6:	b002      	add	sp, #8
1a0043e8:	4770      	bx	lr
1a0043ea:	bf00      	nop
1a0043ec:	40050000 	.word	0x40050000
1a0043f0:	1a006ca0 	.word	0x1a006ca0
1a0043f4:	01312cff 	.word	0x01312cff

1a0043f8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0043f8:	3012      	adds	r0, #18
1a0043fa:	4b05      	ldr	r3, [pc, #20]	; (1a004410 <Chip_Clock_GetDividerSource+0x18>)
1a0043fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a004400:	f010 0f01 	tst.w	r0, #1
1a004404:	d102      	bne.n	1a00440c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a004406:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00440a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00440c:	2011      	movs	r0, #17
}
1a00440e:	4770      	bx	lr
1a004410:	40050000 	.word	0x40050000

1a004414 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a004414:	f100 0212 	add.w	r2, r0, #18
1a004418:	4b03      	ldr	r3, [pc, #12]	; (1a004428 <Chip_Clock_GetDividerDivisor+0x14>)
1a00441a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00441e:	4b03      	ldr	r3, [pc, #12]	; (1a00442c <Chip_Clock_GetDividerDivisor+0x18>)
1a004420:	5c18      	ldrb	r0, [r3, r0]
}
1a004422:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a004426:	4770      	bx	lr
1a004428:	40050000 	.word	0x40050000
1a00442c:	1a006d30 	.word	0x1a006d30

1a004430 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a004430:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a004432:	2810      	cmp	r0, #16
1a004434:	d80a      	bhi.n	1a00444c <Chip_Clock_GetClockInputHz+0x1c>
1a004436:	e8df f000 	tbb	[pc, r0]
1a00443a:	0b42      	.short	0x0b42
1a00443c:	091f160d 	.word	0x091f160d
1a004440:	2b282522 	.word	0x2b282522
1a004444:	322e0909 	.word	0x322e0909
1a004448:	3a36      	.short	0x3a36
1a00444a:	3e          	.byte	0x3e
1a00444b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00444c:	2000      	movs	r0, #0
1a00444e:	e038      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a004450:	481e      	ldr	r0, [pc, #120]	; (1a0044cc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a004452:	e036      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a004454:	4b1e      	ldr	r3, [pc, #120]	; (1a0044d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a004456:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00445a:	f003 0307 	and.w	r3, r3, #7
1a00445e:	2b04      	cmp	r3, #4
1a004460:	d130      	bne.n	1a0044c4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a004462:	2000      	movs	r0, #0
1a004464:	e02d      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a004466:	4b1a      	ldr	r3, [pc, #104]	; (1a0044d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a004468:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00446c:	f003 0307 	and.w	r3, r3, #7
1a004470:	2b04      	cmp	r3, #4
1a004472:	d029      	beq.n	1a0044c8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a004474:	4817      	ldr	r0, [pc, #92]	; (1a0044d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a004476:	e024      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a004478:	4b17      	ldr	r3, [pc, #92]	; (1a0044d8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00447a:	6818      	ldr	r0, [r3, #0]
		break;
1a00447c:	e021      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00447e:	4b17      	ldr	r3, [pc, #92]	; (1a0044dc <Chip_Clock_GetClockInputHz+0xac>)
1a004480:	6818      	ldr	r0, [r3, #0]
		break;
1a004482:	e01e      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a004484:	4b16      	ldr	r3, [pc, #88]	; (1a0044e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a004486:	6818      	ldr	r0, [r3, #0]
		break;
1a004488:	e01b      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00448a:	4b15      	ldr	r3, [pc, #84]	; (1a0044e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00448c:	6858      	ldr	r0, [r3, #4]
		break;
1a00448e:	e018      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a004490:	f000 f86a 	bl	1a004568 <Chip_Clock_GetMainPLLHz>
		break;
1a004494:	e015      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a004496:	2100      	movs	r1, #0
1a004498:	f000 f89c 	bl	1a0045d4 <Chip_Clock_GetDivRate>
		break;
1a00449c:	e011      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00449e:	2101      	movs	r1, #1
1a0044a0:	f000 f898 	bl	1a0045d4 <Chip_Clock_GetDivRate>
		break;
1a0044a4:	e00d      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0044a6:	2102      	movs	r1, #2
1a0044a8:	f000 f894 	bl	1a0045d4 <Chip_Clock_GetDivRate>
		break;
1a0044ac:	e009      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0044ae:	2103      	movs	r1, #3
1a0044b0:	f000 f890 	bl	1a0045d4 <Chip_Clock_GetDivRate>
		break;
1a0044b4:	e005      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0044b6:	2104      	movs	r1, #4
1a0044b8:	f000 f88c 	bl	1a0045d4 <Chip_Clock_GetDivRate>
		break;
1a0044bc:	e001      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0044be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0044c2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0044c4:	4803      	ldr	r0, [pc, #12]	; (1a0044d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0044c6:	e7fc      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0044c8:	4806      	ldr	r0, [pc, #24]	; (1a0044e4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0044ca:	e7fa      	b.n	1a0044c2 <Chip_Clock_GetClockInputHz+0x92>
1a0044cc:	00b71b00 	.word	0x00b71b00
1a0044d0:	40043000 	.word	0x40043000
1a0044d4:	017d7840 	.word	0x017d7840
1a0044d8:	1a006c74 	.word	0x1a006c74
1a0044dc:	1a006ca0 	.word	0x1a006ca0
1a0044e0:	10004d74 	.word	0x10004d74
1a0044e4:	02faf080 	.word	0x02faf080

1a0044e8 <Chip_Clock_CalcMainPLLValue>:
{
1a0044e8:	b538      	push	{r3, r4, r5, lr}
1a0044ea:	4605      	mov	r5, r0
1a0044ec:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0044ee:	7908      	ldrb	r0, [r1, #4]
1a0044f0:	f7ff ff9e 	bl	1a004430 <Chip_Clock_GetClockInputHz>
1a0044f4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0044f6:	4b19      	ldr	r3, [pc, #100]	; (1a00455c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0044f8:	442b      	add	r3, r5
1a0044fa:	4a19      	ldr	r2, [pc, #100]	; (1a004560 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0044fc:	4293      	cmp	r3, r2
1a0044fe:	d821      	bhi.n	1a004544 <Chip_Clock_CalcMainPLLValue+0x5c>
1a004500:	b318      	cbz	r0, 1a00454a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a004502:	2380      	movs	r3, #128	; 0x80
1a004504:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a004506:	2300      	movs	r3, #0
1a004508:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00450a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00450c:	fbb5 f3f0 	udiv	r3, r5, r0
1a004510:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a004512:	4a14      	ldr	r2, [pc, #80]	; (1a004564 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a004514:	4295      	cmp	r5, r2
1a004516:	d903      	bls.n	1a004520 <Chip_Clock_CalcMainPLLValue+0x38>
1a004518:	fb03 f000 	mul.w	r0, r3, r0
1a00451c:	42a8      	cmp	r0, r5
1a00451e:	d007      	beq.n	1a004530 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a004520:	4621      	mov	r1, r4
1a004522:	4628      	mov	r0, r5
1a004524:	f7ff fe96 	bl	1a004254 <pll_get_frac>
		if (!ppll->nsel) {
1a004528:	68a3      	ldr	r3, [r4, #8]
1a00452a:	b18b      	cbz	r3, 1a004550 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00452c:	3b01      	subs	r3, #1
1a00452e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a004530:	6923      	ldr	r3, [r4, #16]
1a004532:	b183      	cbz	r3, 1a004556 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a004534:	68e2      	ldr	r2, [r4, #12]
1a004536:	b10a      	cbz	r2, 1a00453c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a004538:	3a01      	subs	r2, #1
1a00453a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00453c:	3b01      	subs	r3, #1
1a00453e:	6123      	str	r3, [r4, #16]
	return 0;
1a004540:	2000      	movs	r0, #0
}
1a004542:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a004544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004548:	e7fb      	b.n	1a004542 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00454a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00454e:	e7f8      	b.n	1a004542 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a004550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004554:	e7f5      	b.n	1a004542 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a004556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00455a:	e7f2      	b.n	1a004542 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00455c:	ff6b3a10 	.word	0xff6b3a10
1a004560:	0b940510 	.word	0x0b940510
1a004564:	094c5eff 	.word	0x094c5eff

1a004568 <Chip_Clock_GetMainPLLHz>:
{
1a004568:	b530      	push	{r4, r5, lr}
1a00456a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00456c:	4d17      	ldr	r5, [pc, #92]	; (1a0045cc <Chip_Clock_GetMainPLLHz+0x64>)
1a00456e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a004570:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a004574:	f7ff ff5c 	bl	1a004430 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a004578:	4b15      	ldr	r3, [pc, #84]	; (1a0045d0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00457a:	681b      	ldr	r3, [r3, #0]
1a00457c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00457e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a004580:	f013 0f01 	tst.w	r3, #1
1a004584:	d01f      	beq.n	1a0045c6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a004586:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00458a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00458e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a004592:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a004596:	3301      	adds	r3, #1
	n = nsel + 1;
1a004598:	3201      	adds	r2, #1
	p = ptab[psel];
1a00459a:	f10d 0c08 	add.w	ip, sp, #8
1a00459e:	4461      	add	r1, ip
1a0045a0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0045a4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0045a8:	d108      	bne.n	1a0045bc <Chip_Clock_GetMainPLLHz+0x54>
1a0045aa:	b93d      	cbnz	r5, 1a0045bc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0045ac:	0049      	lsls	r1, r1, #1
1a0045ae:	fbb3 f3f1 	udiv	r3, r3, r1
1a0045b2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0045b6:	fb00 f003 	mul.w	r0, r0, r3
1a0045ba:	e005      	b.n	1a0045c8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0045bc:	fbb0 f0f2 	udiv	r0, r0, r2
1a0045c0:	fb03 f000 	mul.w	r0, r3, r0
1a0045c4:	e000      	b.n	1a0045c8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0045c6:	2000      	movs	r0, #0
}
1a0045c8:	b003      	add	sp, #12
1a0045ca:	bd30      	pop	{r4, r5, pc}
1a0045cc:	40050000 	.word	0x40050000
1a0045d0:	1a006d2c 	.word	0x1a006d2c

1a0045d4 <Chip_Clock_GetDivRate>:
{
1a0045d4:	b538      	push	{r3, r4, r5, lr}
1a0045d6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0045d8:	4608      	mov	r0, r1
1a0045da:	f7ff ff0d 	bl	1a0043f8 <Chip_Clock_GetDividerSource>
1a0045de:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0045e0:	4620      	mov	r0, r4
1a0045e2:	f7ff ff17 	bl	1a004414 <Chip_Clock_GetDividerDivisor>
1a0045e6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0045e8:	4628      	mov	r0, r5
1a0045ea:	f7ff ff21 	bl	1a004430 <Chip_Clock_GetClockInputHz>
1a0045ee:	3401      	adds	r4, #1
}
1a0045f0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0045f4:	bd38      	pop	{r3, r4, r5, pc}
1a0045f6:	Address 0x000000001a0045f6 is out of bounds.


1a0045f8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0045f8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0045fa:	f100 0416 	add.w	r4, r0, #22
1a0045fe:	00a4      	lsls	r4, r4, #2
1a004600:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a004604:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a004608:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00460a:	281b      	cmp	r0, #27
1a00460c:	d813      	bhi.n	1a004636 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00460e:	2911      	cmp	r1, #17
1a004610:	d01a      	beq.n	1a004648 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a004612:	4d0e      	ldr	r5, [pc, #56]	; (1a00464c <Chip_Clock_SetBaseClock+0x54>)
1a004614:	4025      	ands	r5, r4

			if (autoblocken) {
1a004616:	b10a      	cbz	r2, 1a00461c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a004618:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00461c:	b10b      	cbz	r3, 1a004622 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00461e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a004622:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a004626:	3016      	adds	r0, #22
1a004628:	0080      	lsls	r0, r0, #2
1a00462a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00462e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004632:	6045      	str	r5, [r0, #4]
1a004634:	e008      	b.n	1a004648 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a004636:	f044 0401 	orr.w	r4, r4, #1
1a00463a:	3016      	adds	r0, #22
1a00463c:	0080      	lsls	r0, r0, #2
1a00463e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a004642:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004646:	6044      	str	r4, [r0, #4]
	}
}
1a004648:	bc30      	pop	{r4, r5}
1a00464a:	4770      	bx	lr
1a00464c:	e0fff7fe 	.word	0xe0fff7fe

1a004650 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a004650:	281b      	cmp	r0, #27
1a004652:	d80c      	bhi.n	1a00466e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a004654:	3016      	adds	r0, #22
1a004656:	0080      	lsls	r0, r0, #2
1a004658:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00465c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a004660:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a004662:	f010 0f01 	tst.w	r0, #1
1a004666:	d104      	bne.n	1a004672 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a004668:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00466c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00466e:	2011      	movs	r0, #17
1a004670:	4770      	bx	lr
		return CLKINPUT_PD;
1a004672:	2011      	movs	r0, #17
}
1a004674:	4770      	bx	lr

1a004676 <Chip_Clock_GetBaseClocktHz>:
{
1a004676:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a004678:	f7ff ffea 	bl	1a004650 <Chip_Clock_GetBaseClock>
1a00467c:	f7ff fed8 	bl	1a004430 <Chip_Clock_GetClockInputHz>
}
1a004680:	bd08      	pop	{r3, pc}
1a004682:	Address 0x000000001a004682 is out of bounds.


1a004684 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a004684:	b969      	cbnz	r1, 1a0046a2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a004686:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a004688:	b10a      	cbz	r2, 1a00468e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00468a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00468e:	2b02      	cmp	r3, #2
1a004690:	d009      	beq.n	1a0046a6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a004692:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a004696:	d209      	bcs.n	1a0046ac <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a004698:	3020      	adds	r0, #32
1a00469a:	4b07      	ldr	r3, [pc, #28]	; (1a0046b8 <Chip_Clock_EnableOpts+0x34>)
1a00469c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0046a0:	4770      	bx	lr
		reg |= (1 << 1);
1a0046a2:	2103      	movs	r1, #3
1a0046a4:	e7f0      	b.n	1a004688 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0046a6:	f041 0120 	orr.w	r1, r1, #32
1a0046aa:	e7f2      	b.n	1a004692 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0046ac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0046b0:	4b02      	ldr	r3, [pc, #8]	; (1a0046bc <Chip_Clock_EnableOpts+0x38>)
1a0046b2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0046b6:	4770      	bx	lr
1a0046b8:	40051000 	.word	0x40051000
1a0046bc:	40052000 	.word	0x40052000

1a0046c0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0046c0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0046c4:	d208      	bcs.n	1a0046d8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0046c6:	4a09      	ldr	r2, [pc, #36]	; (1a0046ec <Chip_Clock_Enable+0x2c>)
1a0046c8:	3020      	adds	r0, #32
1a0046ca:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0046ce:	f043 0301 	orr.w	r3, r3, #1
1a0046d2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0046d6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0046d8:	4a05      	ldr	r2, [pc, #20]	; (1a0046f0 <Chip_Clock_Enable+0x30>)
1a0046da:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0046de:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0046e2:	f043 0301 	orr.w	r3, r3, #1
1a0046e6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0046ea:	4770      	bx	lr
1a0046ec:	40051000 	.word	0x40051000
1a0046f0:	40052000 	.word	0x40052000

1a0046f4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0046f4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0046f6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0046fa:	d309      	bcc.n	1a004710 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0046fc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a004700:	4a0d      	ldr	r2, [pc, #52]	; (1a004738 <Chip_Clock_GetRate+0x44>)
1a004702:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a004706:	f014 0f01 	tst.w	r4, #1
1a00470a:	d107      	bne.n	1a00471c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00470c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00470e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a004710:	f100 0320 	add.w	r3, r0, #32
1a004714:	4a09      	ldr	r2, [pc, #36]	; (1a00473c <Chip_Clock_GetRate+0x48>)
1a004716:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00471a:	e7f4      	b.n	1a004706 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00471c:	f7ff fe20 	bl	1a004360 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a004720:	f7ff ffa9 	bl	1a004676 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a004724:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a004728:	d103      	bne.n	1a004732 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00472a:	2301      	movs	r3, #1
		rate = rate / div;
1a00472c:	fbb0 f0f3 	udiv	r0, r0, r3
1a004730:	e7ed      	b.n	1a00470e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a004732:	2302      	movs	r3, #2
1a004734:	e7fa      	b.n	1a00472c <Chip_Clock_GetRate+0x38>
1a004736:	bf00      	nop
1a004738:	40052000 	.word	0x40052000
1a00473c:	40051000 	.word	0x40051000

1a004740 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a004740:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a004742:	2069      	movs	r0, #105	; 0x69
1a004744:	f7ff ffd6 	bl	1a0046f4 <Chip_Clock_GetRate>
1a004748:	4b01      	ldr	r3, [pc, #4]	; (1a004750 <SystemCoreClockUpdate+0x10>)
1a00474a:	6018      	str	r0, [r3, #0]
}
1a00474c:	bd08      	pop	{r3, pc}
1a00474e:	bf00      	nop
1a004750:	10004ff8 	.word	0x10004ff8

1a004754 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a004754:	b570      	push	{r4, r5, r6, lr}
1a004756:	b08a      	sub	sp, #40	; 0x28
1a004758:	4605      	mov	r5, r0
1a00475a:	460e      	mov	r6, r1
1a00475c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00475e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004762:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a004764:	2806      	cmp	r0, #6
1a004766:	d018      	beq.n	1a00479a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a004768:	2300      	movs	r3, #0
1a00476a:	2201      	movs	r2, #1
1a00476c:	4629      	mov	r1, r5
1a00476e:	2004      	movs	r0, #4
1a004770:	f7ff ff42 	bl	1a0045f8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a004774:	4a49      	ldr	r2, [pc, #292]	; (1a00489c <Chip_SetupCoreClock+0x148>)
1a004776:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a004778:	f043 0301 	orr.w	r3, r3, #1
1a00477c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00477e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a004782:	a901      	add	r1, sp, #4
1a004784:	4630      	mov	r0, r6
1a004786:	f7ff feaf 	bl	1a0044e8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00478a:	4b45      	ldr	r3, [pc, #276]	; (1a0048a0 <Chip_SetupCoreClock+0x14c>)
1a00478c:	429e      	cmp	r6, r3
1a00478e:	d916      	bls.n	1a0047be <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a004790:	9b01      	ldr	r3, [sp, #4]
1a004792:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004796:	d003      	beq.n	1a0047a0 <Chip_SetupCoreClock+0x4c>
1a004798:	e7fe      	b.n	1a004798 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00479a:	f7ff fe07 	bl	1a0043ac <Chip_Clock_EnableCrystal>
1a00479e:	e7e3      	b.n	1a004768 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0047a0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0047a4:	d005      	beq.n	1a0047b2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0047a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0047aa:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0047ac:	2500      	movs	r5, #0
			direct = 1;
1a0047ae:	2601      	movs	r6, #1
1a0047b0:	e007      	b.n	1a0047c2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0047b2:	9b04      	ldr	r3, [sp, #16]
1a0047b4:	3301      	adds	r3, #1
1a0047b6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0047b8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0047ba:	2600      	movs	r6, #0
1a0047bc:	e001      	b.n	1a0047c2 <Chip_SetupCoreClock+0x6e>
1a0047be:	2500      	movs	r5, #0
1a0047c0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0047c2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0047c6:	9b01      	ldr	r3, [sp, #4]
1a0047c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0047cc:	9a05      	ldr	r2, [sp, #20]
1a0047ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0047d2:	9a03      	ldr	r2, [sp, #12]
1a0047d4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0047d8:	9a04      	ldr	r2, [sp, #16]
1a0047da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0047de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0047e2:	4a2e      	ldr	r2, [pc, #184]	; (1a00489c <Chip_SetupCoreClock+0x148>)
1a0047e4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0047e6:	4b2d      	ldr	r3, [pc, #180]	; (1a00489c <Chip_SetupCoreClock+0x148>)
1a0047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0047ea:	f013 0f01 	tst.w	r3, #1
1a0047ee:	d0fa      	beq.n	1a0047e6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0047f0:	2300      	movs	r3, #0
1a0047f2:	2201      	movs	r2, #1
1a0047f4:	2109      	movs	r1, #9
1a0047f6:	2004      	movs	r0, #4
1a0047f8:	f7ff fefe 	bl	1a0045f8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0047fc:	b1fe      	cbz	r6, 1a00483e <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0047fe:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004802:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a004804:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004806:	1e5a      	subs	r2, r3, #1
1a004808:	9209      	str	r2, [sp, #36]	; 0x24
1a00480a:	2b00      	cmp	r3, #0
1a00480c:	d1fa      	bne.n	1a004804 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00480e:	9b01      	ldr	r3, [sp, #4]
1a004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004814:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a004816:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00481a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00481e:	9a05      	ldr	r2, [sp, #20]
1a004820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a004824:	9a03      	ldr	r2, [sp, #12]
1a004826:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00482a:	9a04      	ldr	r2, [sp, #16]
1a00482c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004834:	4a19      	ldr	r2, [pc, #100]	; (1a00489c <Chip_SetupCoreClock+0x148>)
1a004836:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a004838:	b36c      	cbz	r4, 1a004896 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00483a:	2400      	movs	r4, #0
1a00483c:	e029      	b.n	1a004892 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00483e:	2d00      	cmp	r5, #0
1a004840:	d0fa      	beq.n	1a004838 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a004842:	f24c 3350 	movw	r3, #50000	; 0xc350
1a004846:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a004848:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00484a:	1e5a      	subs	r2, r3, #1
1a00484c:	9209      	str	r2, [sp, #36]	; 0x24
1a00484e:	2b00      	cmp	r3, #0
1a004850:	d1fa      	bne.n	1a004848 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a004852:	9b04      	ldr	r3, [sp, #16]
1a004854:	1e5a      	subs	r2, r3, #1
1a004856:	9204      	str	r2, [sp, #16]
1a004858:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00485c:	9b01      	ldr	r3, [sp, #4]
1a00485e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a004862:	9905      	ldr	r1, [sp, #20]
1a004864:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004868:	9903      	ldr	r1, [sp, #12]
1a00486a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00486e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a004872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004876:	4a09      	ldr	r2, [pc, #36]	; (1a00489c <Chip_SetupCoreClock+0x148>)
1a004878:	6453      	str	r3, [r2, #68]	; 0x44
1a00487a:	e7dd      	b.n	1a004838 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00487c:	4809      	ldr	r0, [pc, #36]	; (1a0048a4 <Chip_SetupCoreClock+0x150>)
1a00487e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004882:	78cb      	ldrb	r3, [r1, #3]
1a004884:	788a      	ldrb	r2, [r1, #2]
1a004886:	7849      	ldrb	r1, [r1, #1]
1a004888:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00488c:	f7ff feb4 	bl	1a0045f8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a004890:	3401      	adds	r4, #1
1a004892:	2c11      	cmp	r4, #17
1a004894:	d9f2      	bls.n	1a00487c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a004896:	b00a      	add	sp, #40	; 0x28
1a004898:	bd70      	pop	{r4, r5, r6, pc}
1a00489a:	bf00      	nop
1a00489c:	40050000 	.word	0x40050000
1a0048a0:	068e7780 	.word	0x068e7780
1a0048a4:	1a006da4 	.word	0x1a006da4

1a0048a8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0048a8:	4770      	bx	lr
1a0048aa:	Address 0x000000001a0048aa is out of bounds.


1a0048ac <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0048ac:	4b03      	ldr	r3, [pc, #12]	; (1a0048bc <Chip_SSP_GetClockIndex+0x10>)
1a0048ae:	4298      	cmp	r0, r3
1a0048b0:	d001      	beq.n	1a0048b6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0048b2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0048b4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0048b6:	20a5      	movs	r0, #165	; 0xa5
1a0048b8:	4770      	bx	lr
1a0048ba:	bf00      	nop
1a0048bc:	400c5000 	.word	0x400c5000

1a0048c0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0048c0:	4b04      	ldr	r3, [pc, #16]	; (1a0048d4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0048c2:	4298      	cmp	r0, r3
1a0048c4:	d002      	beq.n	1a0048cc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0048c6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0048ca:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0048cc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0048d0:	4770      	bx	lr
1a0048d2:	bf00      	nop
1a0048d4:	400c5000 	.word	0x400c5000

1a0048d8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0048d8:	6803      	ldr	r3, [r0, #0]
1a0048da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0048de:	0209      	lsls	r1, r1, #8
1a0048e0:	b289      	uxth	r1, r1
1a0048e2:	4319      	orrs	r1, r3
1a0048e4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0048e6:	6102      	str	r2, [r0, #16]
}
1a0048e8:	4770      	bx	lr

1a0048ea <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0048ea:	b570      	push	{r4, r5, r6, lr}
1a0048ec:	4606      	mov	r6, r0
1a0048ee:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0048f0:	f7ff ffe6 	bl	1a0048c0 <Chip_SSP_GetPeriphClockIndex>
1a0048f4:	f7ff fefe 	bl	1a0046f4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0048f8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0048fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0048fe:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a004900:	e000      	b.n	1a004904 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a004902:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a004904:	42ab      	cmp	r3, r5
1a004906:	d90b      	bls.n	1a004920 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a004908:	1c4c      	adds	r4, r1, #1
1a00490a:	fb02 f304 	mul.w	r3, r2, r4
1a00490e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a004912:	429d      	cmp	r5, r3
1a004914:	d2f6      	bcs.n	1a004904 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a004916:	2cff      	cmp	r4, #255	; 0xff
1a004918:	d9f3      	bls.n	1a004902 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00491a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00491c:	2100      	movs	r1, #0
1a00491e:	e7f1      	b.n	1a004904 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a004920:	4630      	mov	r0, r6
1a004922:	f7ff ffd9 	bl	1a0048d8 <Chip_SSP_SetClockRate>
}
1a004926:	bd70      	pop	{r4, r5, r6, pc}

1a004928 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a004928:	b510      	push	{r4, lr}
1a00492a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00492c:	f7ff ffbe 	bl	1a0048ac <Chip_SSP_GetClockIndex>
1a004930:	f7ff fec6 	bl	1a0046c0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a004934:	4620      	mov	r0, r4
1a004936:	f7ff ffc3 	bl	1a0048c0 <Chip_SSP_GetPeriphClockIndex>
1a00493a:	f7ff fec1 	bl	1a0046c0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00493e:	6863      	ldr	r3, [r4, #4]
1a004940:	f023 0304 	bic.w	r3, r3, #4
1a004944:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004946:	6823      	ldr	r3, [r4, #0]
1a004948:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00494c:	f043 0307 	orr.w	r3, r3, #7
1a004950:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a004952:	4902      	ldr	r1, [pc, #8]	; (1a00495c <Chip_SSP_Init+0x34>)
1a004954:	4620      	mov	r0, r4
1a004956:	f7ff ffc8 	bl	1a0048ea <Chip_SSP_SetBitRate>
}
1a00495a:	bd10      	pop	{r4, pc}
1a00495c:	000186a0 	.word	0x000186a0

1a004960 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a004960:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a004962:	4a0b      	ldr	r2, [pc, #44]	; (1a004990 <SystemInit+0x30>)
1a004964:	4b0b      	ldr	r3, [pc, #44]	; (1a004994 <SystemInit+0x34>)
1a004966:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a004968:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00496c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00496e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a004972:	2b20      	cmp	r3, #32
1a004974:	d004      	beq.n	1a004980 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a004976:	f7ff fa9f 	bl	1a003eb8 <Board_SystemInit>
   Board_Init();
1a00497a:	f7ff fa25 	bl	1a003dc8 <Board_Init>
}
1a00497e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a004980:	4a04      	ldr	r2, [pc, #16]	; (1a004994 <SystemInit+0x34>)
1a004982:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a004986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00498a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00498e:	e7f2      	b.n	1a004976 <SystemInit+0x16>
1a004990:	1a000000 	.word	0x1a000000
1a004994:	e000ed00 	.word	0xe000ed00

1a004998 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a004998:	4b04      	ldr	r3, [pc, #16]	; (1a0049ac <cyclesCounterInit+0x14>)
1a00499a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00499c:	4a04      	ldr	r2, [pc, #16]	; (1a0049b0 <cyclesCounterInit+0x18>)
1a00499e:	6813      	ldr	r3, [r2, #0]
1a0049a0:	f043 0301 	orr.w	r3, r3, #1
1a0049a4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0049a6:	2001      	movs	r0, #1
1a0049a8:	4770      	bx	lr
1a0049aa:	bf00      	nop
1a0049ac:	10001820 	.word	0x10001820
1a0049b0:	e0001000 	.word	0xe0001000

1a0049b4 <uartProcessIRQ>:
{
1a0049b4:	b570      	push	{r4, r5, r6, lr}
1a0049b6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0049b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0049bc:	0093      	lsls	r3, r2, #2
1a0049be:	4a22      	ldr	r2, [pc, #136]	; (1a004a48 <uartProcessIRQ+0x94>)
1a0049c0:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a0049c2:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0049c4:	b2ed      	uxtb	r5, r5
1a0049c6:	f015 0f01 	tst.w	r5, #1
1a0049ca:	d00a      	beq.n	1a0049e2 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0049cc:	b928      	cbnz	r0, 1a0049da <uartProcessIRQ+0x26>
1a0049ce:	4b1f      	ldr	r3, [pc, #124]	; (1a004a4c <uartProcessIRQ+0x98>)
1a0049d0:	681b      	ldr	r3, [r3, #0]
1a0049d2:	b113      	cbz	r3, 1a0049da <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a0049d4:	4a1e      	ldr	r2, [pc, #120]	; (1a004a50 <uartProcessIRQ+0x9c>)
1a0049d6:	6810      	ldr	r0, [r2, #0]
1a0049d8:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0049da:	2c03      	cmp	r4, #3
1a0049dc:	d014      	beq.n	1a004a08 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0049de:	2c05      	cmp	r4, #5
1a0049e0:	d01a      	beq.n	1a004a18 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0049e2:	f015 0f20 	tst.w	r5, #32
1a0049e6:	d00e      	beq.n	1a004a06 <uartProcessIRQ+0x52>
	return pUART->IER;
1a0049e8:	6873      	ldr	r3, [r6, #4]
1a0049ea:	f013 0f02 	tst.w	r3, #2
1a0049ee:	d00a      	beq.n	1a004a06 <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0049f0:	b92c      	cbnz	r4, 1a0049fe <uartProcessIRQ+0x4a>
1a0049f2:	4b18      	ldr	r3, [pc, #96]	; (1a004a54 <uartProcessIRQ+0xa0>)
1a0049f4:	681b      	ldr	r3, [r3, #0]
1a0049f6:	b113      	cbz	r3, 1a0049fe <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a0049f8:	4a17      	ldr	r2, [pc, #92]	; (1a004a58 <uartProcessIRQ+0xa4>)
1a0049fa:	6810      	ldr	r0, [r2, #0]
1a0049fc:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0049fe:	2c03      	cmp	r4, #3
1a004a00:	d012      	beq.n	1a004a28 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a004a02:	2c05      	cmp	r4, #5
1a004a04:	d018      	beq.n	1a004a38 <uartProcessIRQ+0x84>
}
1a004a06:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a004a08:	4b14      	ldr	r3, [pc, #80]	; (1a004a5c <uartProcessIRQ+0xa8>)
1a004a0a:	681b      	ldr	r3, [r3, #0]
1a004a0c:	2b00      	cmp	r3, #0
1a004a0e:	d0e6      	beq.n	1a0049de <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a004a10:	4a13      	ldr	r2, [pc, #76]	; (1a004a60 <uartProcessIRQ+0xac>)
1a004a12:	6810      	ldr	r0, [r2, #0]
1a004a14:	4798      	blx	r3
1a004a16:	e7e2      	b.n	1a0049de <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a004a18:	4b12      	ldr	r3, [pc, #72]	; (1a004a64 <uartProcessIRQ+0xb0>)
1a004a1a:	681b      	ldr	r3, [r3, #0]
1a004a1c:	2b00      	cmp	r3, #0
1a004a1e:	d0e0      	beq.n	1a0049e2 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a004a20:	4a11      	ldr	r2, [pc, #68]	; (1a004a68 <uartProcessIRQ+0xb4>)
1a004a22:	6810      	ldr	r0, [r2, #0]
1a004a24:	4798      	blx	r3
1a004a26:	e7dc      	b.n	1a0049e2 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a004a28:	4b10      	ldr	r3, [pc, #64]	; (1a004a6c <uartProcessIRQ+0xb8>)
1a004a2a:	681b      	ldr	r3, [r3, #0]
1a004a2c:	2b00      	cmp	r3, #0
1a004a2e:	d0e8      	beq.n	1a004a02 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a004a30:	4a0f      	ldr	r2, [pc, #60]	; (1a004a70 <uartProcessIRQ+0xbc>)
1a004a32:	6810      	ldr	r0, [r2, #0]
1a004a34:	4798      	blx	r3
1a004a36:	e7e4      	b.n	1a004a02 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a004a38:	4b0e      	ldr	r3, [pc, #56]	; (1a004a74 <uartProcessIRQ+0xc0>)
1a004a3a:	681b      	ldr	r3, [r3, #0]
1a004a3c:	2b00      	cmp	r3, #0
1a004a3e:	d0e2      	beq.n	1a004a06 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a004a40:	4a0d      	ldr	r2, [pc, #52]	; (1a004a78 <uartProcessIRQ+0xc4>)
1a004a42:	6810      	ldr	r0, [r2, #0]
1a004a44:	4798      	blx	r3
}
1a004a46:	e7de      	b.n	1a004a06 <uartProcessIRQ+0x52>
1a004a48:	1a006dec 	.word	0x1a006dec
1a004a4c:	10004d7c 	.word	0x10004d7c
1a004a50:	10004d80 	.word	0x10004d80
1a004a54:	10004d94 	.word	0x10004d94
1a004a58:	10004d98 	.word	0x10004d98
1a004a5c:	10004d84 	.word	0x10004d84
1a004a60:	10004d88 	.word	0x10004d88
1a004a64:	10004d8c 	.word	0x10004d8c
1a004a68:	10004d90 	.word	0x10004d90
1a004a6c:	10004d9c 	.word	0x10004d9c
1a004a70:	10004da0 	.word	0x10004da0
1a004a74:	10004da4 	.word	0x10004da4
1a004a78:	10004da8 	.word	0x10004da8

1a004a7c <uartInterrupt>:
   if( enable ) {
1a004a7c:	b341      	cbz	r1, 1a004ad0 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a004a7e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a004a82:	009a      	lsls	r2, r3, #2
1a004a84:	4b1e      	ldr	r3, [pc, #120]	; (1a004b00 <uartInterrupt+0x84>)
1a004a86:	4413      	add	r3, r2
1a004a88:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004a8c:	2b00      	cmp	r3, #0
1a004a8e:	db18      	blt.n	1a004ac2 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004a90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a004a94:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a004a98:	22a0      	movs	r2, #160	; 0xa0
1a004a9a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a004a9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004aa2:	0082      	lsls	r2, r0, #2
1a004aa4:	4b16      	ldr	r3, [pc, #88]	; (1a004b00 <uartInterrupt+0x84>)
1a004aa6:	4413      	add	r3, r2
1a004aa8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004aac:	2b00      	cmp	r3, #0
1a004aae:	db25      	blt.n	1a004afc <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004ab0:	f003 011f 	and.w	r1, r3, #31
1a004ab4:	095b      	lsrs	r3, r3, #5
1a004ab6:	2201      	movs	r2, #1
1a004ab8:	408a      	lsls	r2, r1
1a004aba:	4912      	ldr	r1, [pc, #72]	; (1a004b04 <uartInterrupt+0x88>)
1a004abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a004ac0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004ac2:	f003 030f 	and.w	r3, r3, #15
1a004ac6:	4a10      	ldr	r2, [pc, #64]	; (1a004b08 <uartInterrupt+0x8c>)
1a004ac8:	441a      	add	r2, r3
1a004aca:	23a0      	movs	r3, #160	; 0xa0
1a004acc:	7613      	strb	r3, [r2, #24]
1a004ace:	e7e6      	b.n	1a004a9e <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a004ad0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004ad4:	0082      	lsls	r2, r0, #2
1a004ad6:	4b0a      	ldr	r3, [pc, #40]	; (1a004b00 <uartInterrupt+0x84>)
1a004ad8:	4413      	add	r3, r2
1a004ada:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004ade:	2b00      	cmp	r3, #0
1a004ae0:	db0c      	blt.n	1a004afc <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004ae2:	f003 011f 	and.w	r1, r3, #31
1a004ae6:	095b      	lsrs	r3, r3, #5
1a004ae8:	2201      	movs	r2, #1
1a004aea:	408a      	lsls	r2, r1
1a004aec:	3320      	adds	r3, #32
1a004aee:	4905      	ldr	r1, [pc, #20]	; (1a004b04 <uartInterrupt+0x88>)
1a004af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a004af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a004af8:	f3bf 8f6f 	isb	sy
}
1a004afc:	4770      	bx	lr
1a004afe:	bf00      	nop
1a004b00:	1a006dec 	.word	0x1a006dec
1a004b04:	e000e100 	.word	0xe000e100
1a004b08:	e000ecfc 	.word	0xe000ecfc

1a004b0c <uartCallbackSet>:
{   
1a004b0c:	b410      	push	{r4}
   switch(event){
1a004b0e:	b161      	cbz	r1, 1a004b2a <uartCallbackSet+0x1e>
1a004b10:	2901      	cmp	r1, #1
1a004b12:	d11c      	bne.n	1a004b4e <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a004b14:	b1da      	cbz	r2, 1a004b4e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a004b16:	2801      	cmp	r0, #1
1a004b18:	d92c      	bls.n	1a004b74 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a004b1a:	1ec1      	subs	r1, r0, #3
1a004b1c:	b2c9      	uxtb	r1, r1
1a004b1e:	2901      	cmp	r1, #1
1a004b20:	d92d      	bls.n	1a004b7e <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a004b22:	2805      	cmp	r0, #5
1a004b24:	d030      	beq.n	1a004b88 <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a004b26:	2302      	movs	r3, #2
1a004b28:	e009      	b.n	1a004b3e <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a004b2a:	b182      	cbz	r2, 1a004b4e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a004b2c:	2801      	cmp	r0, #1
1a004b2e:	d911      	bls.n	1a004b54 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a004b30:	1ec1      	subs	r1, r0, #3
1a004b32:	b2c9      	uxtb	r1, r1
1a004b34:	2901      	cmp	r1, #1
1a004b36:	d912      	bls.n	1a004b5e <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a004b38:	2805      	cmp	r0, #5
1a004b3a:	d015      	beq.n	1a004b68 <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004b3c:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a004b3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004b42:	0082      	lsls	r2, r0, #2
1a004b44:	4913      	ldr	r1, [pc, #76]	; (1a004b94 <uartCallbackSet+0x88>)
1a004b46:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a004b48:	6851      	ldr	r1, [r2, #4]
1a004b4a:	430b      	orrs	r3, r1
1a004b4c:	6053      	str	r3, [r2, #4]
}
1a004b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004b52:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a004b54:	4910      	ldr	r1, [pc, #64]	; (1a004b98 <uartCallbackSet+0x8c>)
1a004b56:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a004b58:	4910      	ldr	r1, [pc, #64]	; (1a004b9c <uartCallbackSet+0x90>)
1a004b5a:	600b      	str	r3, [r1, #0]
1a004b5c:	e7e8      	b.n	1a004b30 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a004b5e:	4910      	ldr	r1, [pc, #64]	; (1a004ba0 <uartCallbackSet+0x94>)
1a004b60:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a004b62:	4910      	ldr	r1, [pc, #64]	; (1a004ba4 <uartCallbackSet+0x98>)
1a004b64:	600b      	str	r3, [r1, #0]
1a004b66:	e7e7      	b.n	1a004b38 <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a004b68:	490f      	ldr	r1, [pc, #60]	; (1a004ba8 <uartCallbackSet+0x9c>)
1a004b6a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a004b6c:	4a0f      	ldr	r2, [pc, #60]	; (1a004bac <uartCallbackSet+0xa0>)
1a004b6e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004b70:	2305      	movs	r3, #5
1a004b72:	e7e4      	b.n	1a004b3e <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a004b74:	490e      	ldr	r1, [pc, #56]	; (1a004bb0 <uartCallbackSet+0xa4>)
1a004b76:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a004b78:	490e      	ldr	r1, [pc, #56]	; (1a004bb4 <uartCallbackSet+0xa8>)
1a004b7a:	600b      	str	r3, [r1, #0]
1a004b7c:	e7cd      	b.n	1a004b1a <uartCallbackSet+0xe>
            	txIsrCallbackUART2 = callbackFunc;
1a004b7e:	490e      	ldr	r1, [pc, #56]	; (1a004bb8 <uartCallbackSet+0xac>)
1a004b80:	600a      	str	r2, [r1, #0]
            	txIsrCallbackUART2Params = callbackParam;
1a004b82:	490e      	ldr	r1, [pc, #56]	; (1a004bbc <uartCallbackSet+0xb0>)
1a004b84:	600b      	str	r3, [r1, #0]
1a004b86:	e7cc      	b.n	1a004b22 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a004b88:	490d      	ldr	r1, [pc, #52]	; (1a004bc0 <uartCallbackSet+0xb4>)
1a004b8a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a004b8c:	4a0d      	ldr	r2, [pc, #52]	; (1a004bc4 <uartCallbackSet+0xb8>)
1a004b8e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a004b90:	2302      	movs	r3, #2
1a004b92:	e7d4      	b.n	1a004b3e <uartCallbackSet+0x32>
1a004b94:	1a006dec 	.word	0x1a006dec
1a004b98:	10004d7c 	.word	0x10004d7c
1a004b9c:	10004d80 	.word	0x10004d80
1a004ba0:	10004d84 	.word	0x10004d84
1a004ba4:	10004d88 	.word	0x10004d88
1a004ba8:	10004d8c 	.word	0x10004d8c
1a004bac:	10004d90 	.word	0x10004d90
1a004bb0:	10004d94 	.word	0x10004d94
1a004bb4:	10004d98 	.word	0x10004d98
1a004bb8:	10004d9c 	.word	0x10004d9c
1a004bbc:	10004da0 	.word	0x10004da0
1a004bc0:	10004da4 	.word	0x10004da4
1a004bc4:	10004da8 	.word	0x10004da8

1a004bc8 <uartCallbackClr>:
   switch(event){
1a004bc8:	b111      	cbz	r1, 1a004bd0 <uartCallbackClr+0x8>
1a004bca:	2901      	cmp	r1, #1
1a004bcc:	d00b      	beq.n	1a004be6 <uartCallbackClr+0x1e>
1a004bce:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004bd0:	2105      	movs	r1, #5
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a004bd2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004bd6:	0082      	lsls	r2, r0, #2
1a004bd8:	4b04      	ldr	r3, [pc, #16]	; (1a004bec <uartCallbackClr+0x24>)
1a004bda:	589a      	ldr	r2, [r3, r2]
	pUART->IER &= ~intMask;
1a004bdc:	6853      	ldr	r3, [r2, #4]
1a004bde:	ea23 0301 	bic.w	r3, r3, r1
1a004be2:	6053      	str	r3, [r2, #4]
}
1a004be4:	4770      	bx	lr
         intMask = UART_IER_THREINT;
1a004be6:	2102      	movs	r1, #2
1a004be8:	e7f3      	b.n	1a004bd2 <uartCallbackClr+0xa>
1a004bea:	bf00      	nop
1a004bec:	1a006dec 	.word	0x1a006dec

1a004bf0 <uartSetPendingInterrupt>:
   NVIC_SetPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a004bf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004bf4:	0082      	lsls	r2, r0, #2
1a004bf6:	4b08      	ldr	r3, [pc, #32]	; (1a004c18 <uartSetPendingInterrupt+0x28>)
1a004bf8:	4413      	add	r3, r2
1a004bfa:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a004bfe:	2b00      	cmp	r3, #0
1a004c00:	db08      	blt.n	1a004c14 <uartSetPendingInterrupt+0x24>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004c02:	f003 011f 	and.w	r1, r3, #31
1a004c06:	095b      	lsrs	r3, r3, #5
1a004c08:	2201      	movs	r2, #1
1a004c0a:	408a      	lsls	r2, r1
1a004c0c:	3340      	adds	r3, #64	; 0x40
1a004c0e:	4903      	ldr	r1, [pc, #12]	; (1a004c1c <uartSetPendingInterrupt+0x2c>)
1a004c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a004c14:	4770      	bx	lr
1a004c16:	bf00      	nop
1a004c18:	1a006dec 	.word	0x1a006dec
1a004c1c:	e000e100 	.word	0xe000e100

1a004c20 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a004c20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004c24:	0083      	lsls	r3, r0, #2
1a004c26:	4a03      	ldr	r2, [pc, #12]	; (1a004c34 <uartTxReady+0x14>)
1a004c28:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a004c2a:	6958      	ldr	r0, [r3, #20]
}
1a004c2c:	f000 0020 	and.w	r0, r0, #32
1a004c30:	4770      	bx	lr
1a004c32:	bf00      	nop
1a004c34:	1a006dec 	.word	0x1a006dec

1a004c38 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a004c38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004c3c:	0083      	lsls	r3, r0, #2
1a004c3e:	4a02      	ldr	r2, [pc, #8]	; (1a004c48 <uartRxRead+0x10>)
1a004c40:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004c42:	6818      	ldr	r0, [r3, #0]
}
1a004c44:	b2c0      	uxtb	r0, r0
1a004c46:	4770      	bx	lr
1a004c48:	1a006dec 	.word	0x1a006dec

1a004c4c <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a004c4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004c50:	0083      	lsls	r3, r0, #2
1a004c52:	4a02      	ldr	r2, [pc, #8]	; (1a004c5c <uartTxWrite+0x10>)
1a004c54:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a004c56:	6019      	str	r1, [r3, #0]
}
1a004c58:	4770      	bx	lr
1a004c5a:	bf00      	nop
1a004c5c:	1a006dec 	.word	0x1a006dec

1a004c60 <uartInit>:
{
1a004c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004c64:	4680      	mov	r8, r0
1a004c66:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a004c68:	4c19      	ldr	r4, [pc, #100]	; (1a004cd0 <uartInit+0x70>)
1a004c6a:	0045      	lsls	r5, r0, #1
1a004c6c:	182a      	adds	r2, r5, r0
1a004c6e:	0093      	lsls	r3, r2, #2
1a004c70:	18e6      	adds	r6, r4, r3
1a004c72:	58e7      	ldr	r7, [r4, r3]
1a004c74:	4638      	mov	r0, r7
1a004c76:	f7ff f979 	bl	1a003f6c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a004c7a:	4649      	mov	r1, r9
1a004c7c:	4638      	mov	r0, r7
1a004c7e:	f7ff f99f 	bl	1a003fc0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a004c82:	2307      	movs	r3, #7
1a004c84:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004c86:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a004c88:	2301      	movs	r3, #1
1a004c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a004c8c:	7930      	ldrb	r0, [r6, #4]
1a004c8e:	7973      	ldrb	r3, [r6, #5]
1a004c90:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004c92:	f042 0218 	orr.w	r2, r2, #24
1a004c96:	490f      	ldr	r1, [pc, #60]	; (1a004cd4 <uartInit+0x74>)
1a004c98:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a004ca0:	79f0      	ldrb	r0, [r6, #7]
1a004ca2:	7a33      	ldrb	r3, [r6, #8]
1a004ca4:	7a72      	ldrb	r2, [r6, #9]
1a004ca6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004caa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a004cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a004cb2:	f1b8 0f01 	cmp.w	r8, #1
1a004cb6:	d001      	beq.n	1a004cbc <uartInit+0x5c>
}
1a004cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a004cbc:	4a06      	ldr	r2, [pc, #24]	; (1a004cd8 <uartInit+0x78>)
1a004cbe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004cc0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a004cc6:	221a      	movs	r2, #26
1a004cc8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a004ccc:	e7f4      	b.n	1a004cb8 <uartInit+0x58>
1a004cce:	bf00      	nop
1a004cd0:	1a006dec 	.word	0x1a006dec
1a004cd4:	40086000 	.word	0x40086000
1a004cd8:	40081000 	.word	0x40081000

1a004cdc <uartWriteByte>:
{
1a004cdc:	b538      	push	{r3, r4, r5, lr}
1a004cde:	4604      	mov	r4, r0
1a004ce0:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a004ce2:	4620      	mov	r0, r4
1a004ce4:	f7ff ff9c 	bl	1a004c20 <uartTxReady>
1a004ce8:	2800      	cmp	r0, #0
1a004cea:	d0fa      	beq.n	1a004ce2 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a004cec:	4629      	mov	r1, r5
1a004cee:	4620      	mov	r0, r4
1a004cf0:	f7ff ffac 	bl	1a004c4c <uartTxWrite>
}
1a004cf4:	bd38      	pop	{r3, r4, r5, pc}

1a004cf6 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a004cf6:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a004cf8:	2003      	movs	r0, #3
1a004cfa:	f7ff fe5b 	bl	1a0049b4 <uartProcessIRQ>
}
1a004cfe:	bd08      	pop	{r3, pc}

1a004d00 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a004d00:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a004d02:	2005      	movs	r0, #5
1a004d04:	f7ff fe56 	bl	1a0049b4 <uartProcessIRQ>
}
1a004d08:	bd08      	pop	{r3, pc}

1a004d0a <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a004d0a:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a004d0c:	f7fe f834 	bl	1a002d78 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a004d10:	2100      	movs	r1, #0
1a004d12:	bd08      	pop	{r3, pc}

1a004d14 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a004d14:	e7fe      	b.n	1a004d14 <errorOcurred>

1a004d16 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a004d16:	4770      	bx	lr

1a004d18 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a004d18:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004d1a:	2400      	movs	r4, #0
1a004d1c:	e001      	b.n	1a004d22 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004d1e:	3401      	adds	r4, #1
1a004d20:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004d22:	2c03      	cmp	r4, #3
1a004d24:	d812      	bhi.n	1a004d4c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a004d26:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004d28:	4b09      	ldr	r3, [pc, #36]	; (1a004d50 <TIMER0_IRQHandler+0x38>)
1a004d2a:	681a      	ldr	r2, [r3, #0]
1a004d2c:	f004 010f 	and.w	r1, r4, #15
1a004d30:	2301      	movs	r3, #1
1a004d32:	408b      	lsls	r3, r1
1a004d34:	421a      	tst	r2, r3
1a004d36:	d0f2      	beq.n	1a004d1e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004d38:	4b06      	ldr	r3, [pc, #24]	; (1a004d54 <TIMER0_IRQHandler+0x3c>)
1a004d3a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a004d3e:	2000      	movs	r0, #0
1a004d40:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004d42:	2301      	movs	r3, #1
1a004d44:	40ab      	lsls	r3, r5
1a004d46:	4a02      	ldr	r2, [pc, #8]	; (1a004d50 <TIMER0_IRQHandler+0x38>)
1a004d48:	6013      	str	r3, [r2, #0]
1a004d4a:	e7e8      	b.n	1a004d1e <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a004d4c:	bd38      	pop	{r3, r4, r5, pc}
1a004d4e:	bf00      	nop
1a004d50:	40084000 	.word	0x40084000
1a004d54:	10001830 	.word	0x10001830

1a004d58 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a004d58:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004d5a:	2400      	movs	r4, #0
1a004d5c:	e001      	b.n	1a004d62 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004d5e:	3401      	adds	r4, #1
1a004d60:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004d62:	2c03      	cmp	r4, #3
1a004d64:	d813      	bhi.n	1a004d8e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a004d66:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004d68:	4b09      	ldr	r3, [pc, #36]	; (1a004d90 <TIMER1_IRQHandler+0x38>)
1a004d6a:	681a      	ldr	r2, [r3, #0]
1a004d6c:	f004 010f 	and.w	r1, r4, #15
1a004d70:	2301      	movs	r3, #1
1a004d72:	408b      	lsls	r3, r1
1a004d74:	421a      	tst	r2, r3
1a004d76:	d0f2      	beq.n	1a004d5e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004d78:	1d23      	adds	r3, r4, #4
1a004d7a:	4a06      	ldr	r2, [pc, #24]	; (1a004d94 <TIMER1_IRQHandler+0x3c>)
1a004d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004d80:	2000      	movs	r0, #0
1a004d82:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004d84:	2301      	movs	r3, #1
1a004d86:	40ab      	lsls	r3, r5
1a004d88:	4a01      	ldr	r2, [pc, #4]	; (1a004d90 <TIMER1_IRQHandler+0x38>)
1a004d8a:	6013      	str	r3, [r2, #0]
1a004d8c:	e7e7      	b.n	1a004d5e <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a004d8e:	bd38      	pop	{r3, r4, r5, pc}
1a004d90:	40085000 	.word	0x40085000
1a004d94:	10001830 	.word	0x10001830

1a004d98 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a004d98:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004d9a:	2400      	movs	r4, #0
1a004d9c:	e001      	b.n	1a004da2 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004d9e:	3401      	adds	r4, #1
1a004da0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004da2:	2c03      	cmp	r4, #3
1a004da4:	d814      	bhi.n	1a004dd0 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a004da6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004da8:	4b0a      	ldr	r3, [pc, #40]	; (1a004dd4 <TIMER2_IRQHandler+0x3c>)
1a004daa:	681a      	ldr	r2, [r3, #0]
1a004dac:	f004 010f 	and.w	r1, r4, #15
1a004db0:	2301      	movs	r3, #1
1a004db2:	408b      	lsls	r3, r1
1a004db4:	421a      	tst	r2, r3
1a004db6:	d0f2      	beq.n	1a004d9e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004db8:	f104 0308 	add.w	r3, r4, #8
1a004dbc:	4a06      	ldr	r2, [pc, #24]	; (1a004dd8 <TIMER2_IRQHandler+0x40>)
1a004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004dc2:	2000      	movs	r0, #0
1a004dc4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004dc6:	2301      	movs	r3, #1
1a004dc8:	40ab      	lsls	r3, r5
1a004dca:	4a02      	ldr	r2, [pc, #8]	; (1a004dd4 <TIMER2_IRQHandler+0x3c>)
1a004dcc:	6013      	str	r3, [r2, #0]
1a004dce:	e7e6      	b.n	1a004d9e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a004dd0:	bd38      	pop	{r3, r4, r5, pc}
1a004dd2:	bf00      	nop
1a004dd4:	400c3000 	.word	0x400c3000
1a004dd8:	10001830 	.word	0x10001830

1a004ddc <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a004ddc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004dde:	2400      	movs	r4, #0
1a004de0:	e001      	b.n	1a004de6 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004de2:	3401      	adds	r4, #1
1a004de4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004de6:	2c03      	cmp	r4, #3
1a004de8:	d814      	bhi.n	1a004e14 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a004dea:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004dec:	4b0a      	ldr	r3, [pc, #40]	; (1a004e18 <TIMER3_IRQHandler+0x3c>)
1a004dee:	681a      	ldr	r2, [r3, #0]
1a004df0:	f004 010f 	and.w	r1, r4, #15
1a004df4:	2301      	movs	r3, #1
1a004df6:	408b      	lsls	r3, r1
1a004df8:	421a      	tst	r2, r3
1a004dfa:	d0f2      	beq.n	1a004de2 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004dfc:	f104 030c 	add.w	r3, r4, #12
1a004e00:	4a06      	ldr	r2, [pc, #24]	; (1a004e1c <TIMER3_IRQHandler+0x40>)
1a004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004e06:	2000      	movs	r0, #0
1a004e08:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004e0a:	2301      	movs	r3, #1
1a004e0c:	40ab      	lsls	r3, r5
1a004e0e:	4a02      	ldr	r2, [pc, #8]	; (1a004e18 <TIMER3_IRQHandler+0x3c>)
1a004e10:	6013      	str	r3, [r2, #0]
1a004e12:	e7e6      	b.n	1a004de2 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004e14:	bd38      	pop	{r3, r4, r5, pc}
1a004e16:	bf00      	nop
1a004e18:	400c4000 	.word	0x400c4000
1a004e1c:	10001830 	.word	0x10001830

1a004e20 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004e20:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a004e22:	4d0b      	ldr	r5, [pc, #44]	; (1a004e50 <gpioObtainPinInit+0x30>)
1a004e24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004e28:	182c      	adds	r4, r5, r0
1a004e2a:	5628      	ldrsb	r0, [r5, r0]
1a004e2c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a004e2e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a004e32:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004e34:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004e38:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004e3a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a004e3e:	9b02      	ldr	r3, [sp, #8]
1a004e40:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a004e42:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004e46:	9b03      	ldr	r3, [sp, #12]
1a004e48:	701a      	strb	r2, [r3, #0]
}
1a004e4a:	bc30      	pop	{r4, r5}
1a004e4c:	4770      	bx	lr
1a004e4e:	bf00      	nop
1a004e50:	1a006e34 	.word	0x1a006e34

1a004e54 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a004e54:	f110 0f02 	cmn.w	r0, #2
1a004e58:	f000 80c7 	beq.w	1a004fea <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a004e5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004e60:	f000 80c5 	beq.w	1a004fee <gpioInit+0x19a>
{
1a004e64:	b570      	push	{r4, r5, r6, lr}
1a004e66:	b084      	sub	sp, #16
1a004e68:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004e6a:	2300      	movs	r3, #0
1a004e6c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004e70:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004e74:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004e78:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004e7c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004e80:	f10d 030b 	add.w	r3, sp, #11
1a004e84:	9301      	str	r3, [sp, #4]
1a004e86:	ab03      	add	r3, sp, #12
1a004e88:	9300      	str	r3, [sp, #0]
1a004e8a:	f10d 030d 	add.w	r3, sp, #13
1a004e8e:	f10d 020e 	add.w	r2, sp, #14
1a004e92:	f10d 010f 	add.w	r1, sp, #15
1a004e96:	f7ff ffc3 	bl	1a004e20 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a004e9a:	2c05      	cmp	r4, #5
1a004e9c:	f200 80a9 	bhi.w	1a004ff2 <gpioInit+0x19e>
1a004ea0:	e8df f004 	tbb	[pc, r4]
1a004ea4:	45278109 	.word	0x45278109
1a004ea8:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a004eaa:	4853      	ldr	r0, [pc, #332]	; (1a004ff8 <gpioInit+0x1a4>)
1a004eac:	f7ff fcfc 	bl	1a0048a8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004eb0:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004eb2:	b004      	add	sp, #16
1a004eb4:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004eb6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004eba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004ebe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004ec2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004ec6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004eca:	494c      	ldr	r1, [pc, #304]	; (1a004ffc <gpioInit+0x1a8>)
1a004ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004ed0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004ed4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004ed8:	2001      	movs	r0, #1
1a004eda:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a004ede:	4c46      	ldr	r4, [pc, #280]	; (1a004ff8 <gpioInit+0x1a4>)
1a004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004ee4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004ee8:	ea22 0201 	bic.w	r2, r2, r1
1a004eec:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004ef0:	e7df      	b.n	1a004eb2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004ef2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004ef6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004efa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004efe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a004f02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004f06:	493d      	ldr	r1, [pc, #244]	; (1a004ffc <gpioInit+0x1a8>)
1a004f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004f0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004f10:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004f14:	2001      	movs	r0, #1
1a004f16:	fa00 f102 	lsl.w	r1, r0, r2
1a004f1a:	4c37      	ldr	r4, [pc, #220]	; (1a004ff8 <gpioInit+0x1a4>)
1a004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004f20:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004f24:	ea22 0201 	bic.w	r2, r2, r1
1a004f28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004f2c:	e7c1      	b.n	1a004eb2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004f2e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004f32:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004f36:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004f3a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a004f3e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004f42:	492e      	ldr	r1, [pc, #184]	; (1a004ffc <gpioInit+0x1a8>)
1a004f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004f48:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004f4c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004f50:	2001      	movs	r0, #1
1a004f52:	fa00 f102 	lsl.w	r1, r0, r2
1a004f56:	4c28      	ldr	r4, [pc, #160]	; (1a004ff8 <gpioInit+0x1a4>)
1a004f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004f5c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004f60:	ea22 0201 	bic.w	r2, r2, r1
1a004f64:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004f68:	e7a3      	b.n	1a004eb2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004f6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004f6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004f72:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004f76:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a004f7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004f7e:	491f      	ldr	r1, [pc, #124]	; (1a004ffc <gpioInit+0x1a8>)
1a004f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004f84:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004f88:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004f8c:	2001      	movs	r0, #1
1a004f8e:	fa00 f102 	lsl.w	r1, r0, r2
1a004f92:	4c19      	ldr	r4, [pc, #100]	; (1a004ff8 <gpioInit+0x1a4>)
1a004f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004f98:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004f9c:	ea22 0201 	bic.w	r2, r2, r1
1a004fa0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004fa4:	e785      	b.n	1a004eb2 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004fa6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004faa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004fae:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004fb2:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004fb6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004fba:	4910      	ldr	r1, [pc, #64]	; (1a004ffc <gpioInit+0x1a8>)
1a004fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004fc0:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004fc4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004fc8:	2001      	movs	r0, #1
1a004fca:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a004fce:	4b0a      	ldr	r3, [pc, #40]	; (1a004ff8 <gpioInit+0x1a4>)
1a004fd0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004fd4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004fd8:	4331      	orrs	r1, r6
1a004fda:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a004fde:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004fe0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004fe4:	2100      	movs	r1, #0
1a004fe6:	5499      	strb	r1, [r3, r2]
1a004fe8:	e763      	b.n	1a004eb2 <gpioInit+0x5e>
	  return FALSE;
1a004fea:	2000      	movs	r0, #0
1a004fec:	4770      	bx	lr
	  return FALSE;
1a004fee:	2000      	movs	r0, #0
}
1a004ff0:	4770      	bx	lr
      ret_val = 0;
1a004ff2:	2000      	movs	r0, #0
1a004ff4:	e75d      	b.n	1a004eb2 <gpioInit+0x5e>
1a004ff6:	bf00      	nop
1a004ff8:	400f4000 	.word	0x400f4000
1a004ffc:	40086000 	.word	0x40086000

1a005000 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a005000:	f110 0f02 	cmn.w	r0, #2
1a005004:	d02d      	beq.n	1a005062 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a005006:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00500a:	d02c      	beq.n	1a005066 <gpioWrite+0x66>
{
1a00500c:	b510      	push	{r4, lr}
1a00500e:	b084      	sub	sp, #16
1a005010:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a005012:	2300      	movs	r3, #0
1a005014:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a005018:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00501c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a005020:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a005024:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a005028:	f10d 030b 	add.w	r3, sp, #11
1a00502c:	9301      	str	r3, [sp, #4]
1a00502e:	ab03      	add	r3, sp, #12
1a005030:	9300      	str	r3, [sp, #0]
1a005032:	f10d 030d 	add.w	r3, sp, #13
1a005036:	f10d 020e 	add.w	r2, sp, #14
1a00503a:	f10d 010f 	add.w	r1, sp, #15
1a00503e:	f7ff feef 	bl	1a004e20 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a005042:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005046:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00504a:	1c21      	adds	r1, r4, #0
1a00504c:	bf18      	it	ne
1a00504e:	2101      	movne	r1, #1
1a005050:	015b      	lsls	r3, r3, #5
1a005052:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a005056:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00505a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00505c:	2001      	movs	r0, #1
}
1a00505e:	b004      	add	sp, #16
1a005060:	bd10      	pop	{r4, pc}
	  return FALSE;
1a005062:	2000      	movs	r0, #0
1a005064:	4770      	bx	lr
	  return FALSE;
1a005066:	2000      	movs	r0, #0
}
1a005068:	4770      	bx	lr

1a00506a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00506a:	f110 0f02 	cmn.w	r0, #2
1a00506e:	d02c      	beq.n	1a0050ca <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a005070:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005074:	d02b      	beq.n	1a0050ce <gpioRead+0x64>
{
1a005076:	b500      	push	{lr}
1a005078:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00507a:	2300      	movs	r3, #0
1a00507c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a005080:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a005084:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a005088:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00508c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a005090:	f10d 030b 	add.w	r3, sp, #11
1a005094:	9301      	str	r3, [sp, #4]
1a005096:	ab03      	add	r3, sp, #12
1a005098:	9300      	str	r3, [sp, #0]
1a00509a:	f10d 030d 	add.w	r3, sp, #13
1a00509e:	f10d 020e 	add.w	r2, sp, #14
1a0050a2:	f10d 010f 	add.w	r1, sp, #15
1a0050a6:	f7ff febb 	bl	1a004e20 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0050aa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0050ae:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0050b2:	015b      	lsls	r3, r3, #5
1a0050b4:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0050b8:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0050bc:	5c98      	ldrb	r0, [r3, r2]
1a0050be:	3000      	adds	r0, #0
1a0050c0:	bf18      	it	ne
1a0050c2:	2001      	movne	r0, #1

   return ret_val;
}
1a0050c4:	b005      	add	sp, #20
1a0050c6:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a0050ca:	2001      	movs	r0, #1
1a0050cc:	4770      	bx	lr
      return FALSE;
1a0050ce:	2000      	movs	r0, #0
}
1a0050d0:	4770      	bx	lr

1a0050d2 <gpioToggle>:
{
1a0050d2:	b510      	push	{r4, lr}
1a0050d4:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0050d6:	f7ff ffc8 	bl	1a00506a <gpioRead>
1a0050da:	fab0 f180 	clz	r1, r0
1a0050de:	0949      	lsrs	r1, r1, #5
1a0050e0:	4620      	mov	r0, r4
1a0050e2:	f7ff ff8d 	bl	1a005000 <gpioWrite>
}
1a0050e6:	bd10      	pop	{r4, pc}

1a0050e8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0050e8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0050ea:	4b04      	ldr	r3, [pc, #16]	; (1a0050fc <USB0_IRQHandler+0x14>)
1a0050ec:	681b      	ldr	r3, [r3, #0]
1a0050ee:	681b      	ldr	r3, [r3, #0]
1a0050f0:	68db      	ldr	r3, [r3, #12]
1a0050f2:	4a03      	ldr	r2, [pc, #12]	; (1a005100 <USB0_IRQHandler+0x18>)
1a0050f4:	6810      	ldr	r0, [r2, #0]
1a0050f6:	4798      	blx	r3
}
1a0050f8:	bd08      	pop	{r3, pc}
1a0050fa:	bf00      	nop
1a0050fc:	10004ffc 	.word	0x10004ffc
1a005100:	10004dac 	.word	0x10004dac

1a005104 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a005104:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a005106:	f7ff fb1b 	bl	1a004740 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00510a:	4b18      	ldr	r3, [pc, #96]	; (1a00516c <boardInit+0x68>)
1a00510c:	6818      	ldr	r0, [r3, #0]
1a00510e:	f7ff fc43 	bl	1a004998 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a005112:	2105      	movs	r1, #5
1a005114:	2000      	movs	r0, #0
1a005116:	f7ff fe9d 	bl	1a004e54 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00511a:	2100      	movs	r1, #0
1a00511c:	2024      	movs	r0, #36	; 0x24
1a00511e:	f7ff fe99 	bl	1a004e54 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a005122:	2100      	movs	r1, #0
1a005124:	2025      	movs	r0, #37	; 0x25
1a005126:	f7ff fe95 	bl	1a004e54 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00512a:	2100      	movs	r1, #0
1a00512c:	2026      	movs	r0, #38	; 0x26
1a00512e:	f7ff fe91 	bl	1a004e54 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a005132:	2100      	movs	r1, #0
1a005134:	2027      	movs	r0, #39	; 0x27
1a005136:	f7ff fe8d 	bl	1a004e54 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00513a:	2101      	movs	r1, #1
1a00513c:	2028      	movs	r0, #40	; 0x28
1a00513e:	f7ff fe89 	bl	1a004e54 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a005142:	2101      	movs	r1, #1
1a005144:	2029      	movs	r0, #41	; 0x29
1a005146:	f7ff fe85 	bl	1a004e54 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00514a:	2101      	movs	r1, #1
1a00514c:	202a      	movs	r0, #42	; 0x2a
1a00514e:	f7ff fe81 	bl	1a004e54 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a005152:	2101      	movs	r1, #1
1a005154:	202b      	movs	r0, #43	; 0x2b
1a005156:	f7ff fe7d 	bl	1a004e54 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00515a:	2101      	movs	r1, #1
1a00515c:	202c      	movs	r0, #44	; 0x2c
1a00515e:	f7ff fe79 	bl	1a004e54 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a005162:	2101      	movs	r1, #1
1a005164:	202d      	movs	r0, #45	; 0x2d
1a005166:	f7ff fe75 	bl	1a004e54 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00516a:	bd08      	pop	{r3, pc}
1a00516c:	10004ff8 	.word	0x10004ff8

1a005170 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a005170:	b510      	push	{r4, lr}
1a005172:	4604      	mov	r4, r0
1a005174:	4610      	mov	r0, r2
1a005176:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a005178:	4b04      	ldr	r3, [pc, #16]	; (1a00518c <delayInit+0x1c>)
1a00517a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00517e:	f000 f9f9 	bl	1a005574 <__aeabi_uldivmod>
1a005182:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a005186:	2300      	movs	r3, #0
1a005188:	7423      	strb	r3, [r4, #16]
}
1a00518a:	bd10      	pop	{r4, pc}
1a00518c:	10001828 	.word	0x10001828

1a005190 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a005190:	b570      	push	{r4, r5, r6, lr}
1a005192:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a005194:	7c05      	ldrb	r5, [r0, #16]
1a005196:	b195      	cbz	r5, 1a0051be <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a005198:	f7ff fdb7 	bl	1a004d0a <tickRead>
1a00519c:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0051a0:	1a82      	subs	r2, r0, r2
1a0051a2:	eb61 0303 	sbc.w	r3, r1, r3
1a0051a6:	4615      	mov	r5, r2
1a0051a8:	461e      	mov	r6, r3
1a0051aa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0051ae:	429e      	cmp	r6, r3
1a0051b0:	bf08      	it	eq
1a0051b2:	4295      	cmpeq	r5, r2
1a0051b4:	d30b      	bcc.n	1a0051ce <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a0051b6:	2300      	movs	r3, #0
1a0051b8:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0051ba:	2501      	movs	r5, #1
1a0051bc:	e005      	b.n	1a0051ca <delayRead+0x3a>
      delay->startTime = tickRead();
1a0051be:	f7ff fda4 	bl	1a004d0a <tickRead>
1a0051c2:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0051c6:	2301      	movs	r3, #1
1a0051c8:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a0051ca:	4628      	mov	r0, r5
1a0051cc:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a0051ce:	2500      	movs	r5, #0
1a0051d0:	e7fb      	b.n	1a0051ca <delayRead+0x3a>
1a0051d2:	Address 0x000000001a0051d2 is out of bounds.


1a0051d4 <_outbyte>:
static int print(char **out, int *varg);

/*==================[internal data definition]===============================*/

void _outbyte(int c)
{
1a0051d4:	b508      	push	{r3, lr}
   uartWriteByte(UartPrintf, (char)c);
1a0051d6:	b2c1      	uxtb	r1, r0
1a0051d8:	4b02      	ldr	r3, [pc, #8]	; (1a0051e4 <_outbyte+0x10>)
1a0051da:	7818      	ldrb	r0, [r3, #0]
1a0051dc:	f7ff fd7e 	bl	1a004cdc <uartWriteByte>
}
1a0051e0:	bd08      	pop	{r3, pc}
1a0051e2:	bf00      	nop
1a0051e4:	10001870 	.word	0x10001870

1a0051e8 <outbyte>:

void outbyte(int c)
{
   static char prev = 0;
   if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
1a0051e8:	281f      	cmp	r0, #31
1a0051ea:	dc08      	bgt.n	1a0051fe <outbyte+0x16>
1a0051ec:	280d      	cmp	r0, #13
1a0051ee:	d006      	beq.n	1a0051fe <outbyte+0x16>
1a0051f0:	280a      	cmp	r0, #10
1a0051f2:	d004      	beq.n	1a0051fe <outbyte+0x16>
1a0051f4:	2809      	cmp	r0, #9
1a0051f6:	d002      	beq.n	1a0051fe <outbyte+0x16>
1a0051f8:	2808      	cmp	r0, #8
1a0051fa:	d000      	beq.n	1a0051fe <outbyte+0x16>
1a0051fc:	4770      	bx	lr
{
1a0051fe:	b510      	push	{r4, lr}
1a005200:	4604      	mov	r4, r0
      return;
   if (c == '\n' && prev != '\r') _outbyte('\r');
1a005202:	280a      	cmp	r0, #10
1a005204:	d005      	beq.n	1a005212 <outbyte+0x2a>
   _outbyte(c);
1a005206:	4620      	mov	r0, r4
1a005208:	f7ff ffe4 	bl	1a0051d4 <_outbyte>
   prev = c;
1a00520c:	4b05      	ldr	r3, [pc, #20]	; (1a005224 <outbyte+0x3c>)
1a00520e:	701c      	strb	r4, [r3, #0]
}
1a005210:	bd10      	pop	{r4, pc}
   if (c == '\n' && prev != '\r') _outbyte('\r');
1a005212:	4b04      	ldr	r3, [pc, #16]	; (1a005224 <outbyte+0x3c>)
1a005214:	781b      	ldrb	r3, [r3, #0]
1a005216:	2b0d      	cmp	r3, #13
1a005218:	d0f5      	beq.n	1a005206 <outbyte+0x1e>
1a00521a:	200d      	movs	r0, #13
1a00521c:	f7ff ffda 	bl	1a0051d4 <_outbyte>
1a005220:	e7f1      	b.n	1a005206 <outbyte+0x1e>
1a005222:	bf00      	nop
1a005224:	10004db0 	.word	0x10004db0

1a005228 <printchar>:
 * termina sacando un dato por la UART.
 * @param str
 * @param c
 */
static void printchar(char **str, int c)
{
1a005228:	b508      	push	{r3, lr}
   extern void putchar(int c);
   if (str) {
1a00522a:	b128      	cbz	r0, 1a005238 <printchar+0x10>
      **str = c;
1a00522c:	6802      	ldr	r2, [r0, #0]
1a00522e:	7011      	strb	r1, [r2, #0]
      ++(*str);
1a005230:	6802      	ldr	r2, [r0, #0]
1a005232:	3201      	adds	r2, #1
1a005234:	6002      	str	r2, [r0, #0]
   } else {
      (void)putchar(c);
   }
}
1a005236:	bd08      	pop	{r3, pc}
1a005238:	4608      	mov	r0, r1
      (void)putchar(c);
1a00523a:	f7ff ffd5 	bl	1a0051e8 <outbyte>
}
1a00523e:	e7fa      	b.n	1a005236 <printchar+0xe>

1a005240 <prints>:

static int prints(char **out, const char *string, int width, int pad)
{
1a005240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005244:	4607      	mov	r7, r0
1a005246:	460e      	mov	r6, r1
   register int pc = 0, padchar = ' ';

   if (width > 0) {
1a005248:	1e15      	subs	r5, r2, #0
1a00524a:	dd02      	ble.n	1a005252 <prints+0x12>
      register int len = 0;
      register const char *ptr;
      for (ptr = string; *ptr; ++ptr) ++len;
1a00524c:	460a      	mov	r2, r1
      register int len = 0;
1a00524e:	2100      	movs	r1, #0
1a005250:	e008      	b.n	1a005264 <prints+0x24>
   register int pc = 0, padchar = ' ';
1a005252:	f04f 0820 	mov.w	r8, #32
      if (len >= width) width = 0;
      else width -= len;
      if (pad & PAD_ZERO) padchar = '0';
   }
   if (!(pad & PAD_RIGHT)) {
1a005256:	f013 0401 	ands.w	r4, r3, #1
1a00525a:	d01a      	beq.n	1a005292 <prints+0x52>
   register int pc = 0, padchar = ' ';
1a00525c:	2400      	movs	r4, #0
1a00525e:	e020      	b.n	1a0052a2 <prints+0x62>
      for (ptr = string; *ptr; ++ptr) ++len;
1a005260:	3101      	adds	r1, #1
1a005262:	3201      	adds	r2, #1
1a005264:	7810      	ldrb	r0, [r2, #0]
1a005266:	2800      	cmp	r0, #0
1a005268:	d1fa      	bne.n	1a005260 <prints+0x20>
      if (len >= width) width = 0;
1a00526a:	42a9      	cmp	r1, r5
1a00526c:	da06      	bge.n	1a00527c <prints+0x3c>
      else width -= len;
1a00526e:	1a6d      	subs	r5, r5, r1
      if (pad & PAD_ZERO) padchar = '0';
1a005270:	f013 0f02 	tst.w	r3, #2
1a005274:	d104      	bne.n	1a005280 <prints+0x40>
   register int pc = 0, padchar = ' ';
1a005276:	f04f 0820 	mov.w	r8, #32
1a00527a:	e7ec      	b.n	1a005256 <prints+0x16>
      if (len >= width) width = 0;
1a00527c:	2500      	movs	r5, #0
1a00527e:	e7f7      	b.n	1a005270 <prints+0x30>
      if (pad & PAD_ZERO) padchar = '0';
1a005280:	f04f 0830 	mov.w	r8, #48	; 0x30
1a005284:	e7e7      	b.n	1a005256 <prints+0x16>
      for ( ; width > 0; --width) {
         printchar (out, padchar);
1a005286:	4641      	mov	r1, r8
1a005288:	4638      	mov	r0, r7
1a00528a:	f7ff ffcd 	bl	1a005228 <printchar>
         ++pc;
1a00528e:	3401      	adds	r4, #1
      for ( ; width > 0; --width) {
1a005290:	3d01      	subs	r5, #1
1a005292:	2d00      	cmp	r5, #0
1a005294:	dcf7      	bgt.n	1a005286 <prints+0x46>
1a005296:	e004      	b.n	1a0052a2 <prints+0x62>
      }
   }
   for ( ; *string ; ++string) {
      printchar (out, *string);
1a005298:	4638      	mov	r0, r7
1a00529a:	f7ff ffc5 	bl	1a005228 <printchar>
      ++pc;
1a00529e:	3401      	adds	r4, #1
   for ( ; *string ; ++string) {
1a0052a0:	3601      	adds	r6, #1
1a0052a2:	7831      	ldrb	r1, [r6, #0]
1a0052a4:	2900      	cmp	r1, #0
1a0052a6:	d1f7      	bne.n	1a005298 <prints+0x58>
1a0052a8:	e005      	b.n	1a0052b6 <prints+0x76>
   }
   for ( ; width > 0; --width) {
      printchar (out, padchar);
1a0052aa:	4641      	mov	r1, r8
1a0052ac:	4638      	mov	r0, r7
1a0052ae:	f7ff ffbb 	bl	1a005228 <printchar>
      ++pc;
1a0052b2:	3401      	adds	r4, #1
   for ( ; width > 0; --width) {
1a0052b4:	3d01      	subs	r5, #1
1a0052b6:	2d00      	cmp	r5, #0
1a0052b8:	dcf7      	bgt.n	1a0052aa <prints+0x6a>
   }
   return pc;
}
1a0052ba:	4620      	mov	r0, r4
1a0052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0052c0 <printi>:

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
1a0052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0052c2:	b085      	sub	sp, #20
1a0052c4:	4607      	mov	r7, r0
1a0052c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   char print_buf[PRINT_BUF_LEN];
   register char *s;
   register int t, neg = 0, pc = 0;
   register unsigned int u = i;

   if (i == 0) {
1a0052c8:	b151      	cbz	r1, 1a0052e0 <printi+0x20>
1a0052ca:	461e      	mov	r6, r3
1a0052cc:	460c      	mov	r4, r1
      print_buf[0] = '0';
      print_buf[1] = '\0';
      return prints (out, print_buf, width, pad);
   }

   if (sg && b == 10 && i < 0) {
1a0052ce:	b113      	cbz	r3, 1a0052d6 <printi+0x16>
1a0052d0:	2a0a      	cmp	r2, #10
1a0052d2:	d012      	beq.n	1a0052fa <printi+0x3a>
   register int t, neg = 0, pc = 0;
1a0052d4:	2600      	movs	r6, #0
      neg = 1;
      u = -i;
   }

   s = print_buf + PRINT_BUF_LEN-1;
   *s = '\0';
1a0052d6:	ad04      	add	r5, sp, #16
1a0052d8:	2300      	movs	r3, #0
1a0052da:	f805 3d01 	strb.w	r3, [r5, #-1]!

   while (u) {
1a0052de:	e018      	b.n	1a005312 <printi+0x52>
      print_buf[0] = '0';
1a0052e0:	2330      	movs	r3, #48	; 0x30
1a0052e2:	f88d 3004 	strb.w	r3, [sp, #4]
      print_buf[1] = '\0';
1a0052e6:	2300      	movs	r3, #0
1a0052e8:	f88d 3005 	strb.w	r3, [sp, #5]
      return prints (out, print_buf, width, pad);
1a0052ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0052ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0052f0:	a901      	add	r1, sp, #4
1a0052f2:	4638      	mov	r0, r7
1a0052f4:	f7ff ffa4 	bl	1a005240 <prints>
1a0052f8:	e029      	b.n	1a00534e <printi+0x8e>
   if (sg && b == 10 && i < 0) {
1a0052fa:	2900      	cmp	r1, #0
1a0052fc:	db01      	blt.n	1a005302 <printi+0x42>
   register int t, neg = 0, pc = 0;
1a0052fe:	2600      	movs	r6, #0
1a005300:	e7e9      	b.n	1a0052d6 <printi+0x16>
      u = -i;
1a005302:	424c      	negs	r4, r1
      neg = 1;
1a005304:	2601      	movs	r6, #1
1a005306:	e7e6      	b.n	1a0052d6 <printi+0x16>
      t = u % b;
      if( t >= 10 )
         t += letbase - '0' - 10;
      *--s = t + '0';
1a005308:	3330      	adds	r3, #48	; 0x30
1a00530a:	f805 3d01 	strb.w	r3, [r5, #-1]!
      u /= b;
1a00530e:	fbb4 f4f2 	udiv	r4, r4, r2
   while (u) {
1a005312:	b14c      	cbz	r4, 1a005328 <printi+0x68>
      t = u % b;
1a005314:	fbb4 f3f2 	udiv	r3, r4, r2
1a005318:	fb02 4313 	mls	r3, r2, r3, r4
      if( t >= 10 )
1a00531c:	2b09      	cmp	r3, #9
1a00531e:	ddf3      	ble.n	1a005308 <printi+0x48>
         t += letbase - '0' - 10;
1a005320:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
1a005324:	440b      	add	r3, r1
1a005326:	e7ef      	b.n	1a005308 <printi+0x48>
   }

   if (neg) {
1a005328:	b156      	cbz	r6, 1a005340 <printi+0x80>
      if( width && (pad & PAD_ZERO) ) {
1a00532a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00532c:	b11b      	cbz	r3, 1a005336 <printi+0x76>
1a00532e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005330:	f013 0f02 	tst.w	r3, #2
1a005334:	d10d      	bne.n	1a005352 <printi+0x92>
         printchar (out, '-');
         ++pc;
         --width;
      } else {
         *--s = '-';
1a005336:	232d      	movs	r3, #45	; 0x2d
1a005338:	f805 3c01 	strb.w	r3, [r5, #-1]
1a00533c:	3d01      	subs	r5, #1
   register int t, neg = 0, pc = 0;
1a00533e:	2600      	movs	r6, #0
      }
   }

   return pc + prints (out, s, width, pad);
1a005340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005344:	4629      	mov	r1, r5
1a005346:	4638      	mov	r0, r7
1a005348:	f7ff ff7a 	bl	1a005240 <prints>
1a00534c:	4430      	add	r0, r6
}
1a00534e:	b005      	add	sp, #20
1a005350:	bdf0      	pop	{r4, r5, r6, r7, pc}
         printchar (out, '-');
1a005352:	212d      	movs	r1, #45	; 0x2d
1a005354:	4638      	mov	r0, r7
1a005356:	f7ff ff67 	bl	1a005228 <printchar>
         --width;
1a00535a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00535c:	3b01      	subs	r3, #1
1a00535e:	930a      	str	r3, [sp, #40]	; 0x28
1a005360:	e7ee      	b.n	1a005340 <printi+0x80>
1a005362:	Address 0x000000001a005362 is out of bounds.


1a005364 <print>:

static int print(char **out, int *varg)
{
1a005364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005368:	b086      	sub	sp, #24
1a00536a:	4606      	mov	r6, r0
   register int width, pad;
   register int pc = 0;
   register char *format = (char *)(*varg++);
1a00536c:	1d0f      	adds	r7, r1, #4
1a00536e:	680c      	ldr	r4, [r1, #0]
   register int pc = 0;
1a005370:	2500      	movs	r5, #0
   char scr[2];

   for (; *format != 0; ++format) {
1a005372:	e081      	b.n	1a005478 <print+0x114>
         ++format;
         width = pad = 0;
         if (*format == '\0') break;
         if (*format == '%') goto out;
         if (*format == '-') {
            ++format;
1a005374:	1ca2      	adds	r2, r4, #2
            pad = PAD_RIGHT;
1a005376:	2301      	movs	r3, #1
1a005378:	e08b      	b.n	1a005492 <print+0x12e>
         }
         while (*format == '0') {
            ++format;
1a00537a:	3401      	adds	r4, #1
            pad |= PAD_ZERO;
1a00537c:	f043 0302 	orr.w	r3, r3, #2
         while (*format == '0') {
1a005380:	7822      	ldrb	r2, [r4, #0]
1a005382:	2a30      	cmp	r2, #48	; 0x30
1a005384:	d0f9      	beq.n	1a00537a <print+0x16>
         width = pad = 0;
1a005386:	2200      	movs	r2, #0
1a005388:	e006      	b.n	1a005398 <print+0x34>
         }
         for ( ; *format >= '0' && *format <= '9'; ++format) {
            width *= 10;
1a00538a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a00538e:	0050      	lsls	r0, r2, #1
            width += *format - '0';
1a005390:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a005394:	4402      	add	r2, r0
         for ( ; *format >= '0' && *format <= '9'; ++format) {
1a005396:	3401      	adds	r4, #1
1a005398:	7821      	ldrb	r1, [r4, #0]
1a00539a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
1a00539e:	b2c0      	uxtb	r0, r0
1a0053a0:	2809      	cmp	r0, #9
1a0053a2:	d9f2      	bls.n	1a00538a <print+0x26>
         }
         if( *format == 's' ) {
1a0053a4:	2973      	cmp	r1, #115	; 0x73
1a0053a6:	d018      	beq.n	1a0053da <print+0x76>
            register char *s = *((char **)varg++);
            pc += prints (out, s?s:"(null)", width, pad);
            continue;
         }
         if( *format == 'd' ) {
1a0053a8:	2964      	cmp	r1, #100	; 0x64
1a0053aa:	d022      	beq.n	1a0053f2 <print+0x8e>
            pc += printi (out, *varg++, 10, 1, width, pad, 'a');
            continue;
         }
         if( *format == 'x' ) {
1a0053ac:	2978      	cmp	r1, #120	; 0x78
1a0053ae:	d02f      	beq.n	1a005410 <print+0xac>
            pc += printi (out, *varg++, 16, 0, width, pad, 'a');
            continue;
         }
         if( *format == 'X' ) {
1a0053b0:	2958      	cmp	r1, #88	; 0x58
1a0053b2:	d03c      	beq.n	1a00542e <print+0xca>
            pc += printi (out, *varg++, 16, 0, width, pad, 'A');
            continue;
         }
         if( *format == 'u' ) {
1a0053b4:	2975      	cmp	r1, #117	; 0x75
1a0053b6:	d049      	beq.n	1a00544c <print+0xe8>
            pc += printi (out, *varg++, 10, 0, width, pad, 'a');
            continue;
         }
         if( *format == 'c' ) {
1a0053b8:	2963      	cmp	r1, #99	; 0x63
1a0053ba:	d15c      	bne.n	1a005476 <print+0x112>
            /* char are converted to int then pushed on the stack */
            scr[0] = *varg++;
1a0053bc:	f107 0804 	add.w	r8, r7, #4
1a0053c0:	6839      	ldr	r1, [r7, #0]
1a0053c2:	f88d 1014 	strb.w	r1, [sp, #20]
            scr[1] = '\0';
1a0053c6:	2100      	movs	r1, #0
1a0053c8:	f88d 1015 	strb.w	r1, [sp, #21]
            pc += prints (out, scr, width, pad);
1a0053cc:	a905      	add	r1, sp, #20
1a0053ce:	4630      	mov	r0, r6
1a0053d0:	f7ff ff36 	bl	1a005240 <prints>
1a0053d4:	4405      	add	r5, r0
            scr[0] = *varg++;
1a0053d6:	4647      	mov	r7, r8
            continue;
1a0053d8:	e04d      	b.n	1a005476 <print+0x112>
            register char *s = *((char **)varg++);
1a0053da:	f107 0804 	add.w	r8, r7, #4
1a0053de:	6839      	ldr	r1, [r7, #0]
            pc += prints (out, s?s:"(null)", width, pad);
1a0053e0:	b129      	cbz	r1, 1a0053ee <print+0x8a>
1a0053e2:	4630      	mov	r0, r6
1a0053e4:	f7ff ff2c 	bl	1a005240 <prints>
1a0053e8:	4405      	add	r5, r0
            register char *s = *((char **)varg++);
1a0053ea:	4647      	mov	r7, r8
            continue;
1a0053ec:	e043      	b.n	1a005476 <print+0x112>
            pc += prints (out, s?s:"(null)", width, pad);
1a0053ee:	492e      	ldr	r1, [pc, #184]	; (1a0054a8 <print+0x144>)
1a0053f0:	e7f7      	b.n	1a0053e2 <print+0x7e>
            pc += printi (out, *varg++, 10, 1, width, pad, 'a');
1a0053f2:	f107 0804 	add.w	r8, r7, #4
1a0053f6:	6839      	ldr	r1, [r7, #0]
1a0053f8:	2061      	movs	r0, #97	; 0x61
1a0053fa:	9002      	str	r0, [sp, #8]
1a0053fc:	9301      	str	r3, [sp, #4]
1a0053fe:	9200      	str	r2, [sp, #0]
1a005400:	2301      	movs	r3, #1
1a005402:	220a      	movs	r2, #10
1a005404:	4630      	mov	r0, r6
1a005406:	f7ff ff5b 	bl	1a0052c0 <printi>
1a00540a:	4405      	add	r5, r0
1a00540c:	4647      	mov	r7, r8
            continue;
1a00540e:	e032      	b.n	1a005476 <print+0x112>
            pc += printi (out, *varg++, 16, 0, width, pad, 'a');
1a005410:	f107 0804 	add.w	r8, r7, #4
1a005414:	6839      	ldr	r1, [r7, #0]
1a005416:	2061      	movs	r0, #97	; 0x61
1a005418:	9002      	str	r0, [sp, #8]
1a00541a:	9301      	str	r3, [sp, #4]
1a00541c:	9200      	str	r2, [sp, #0]
1a00541e:	2300      	movs	r3, #0
1a005420:	2210      	movs	r2, #16
1a005422:	4630      	mov	r0, r6
1a005424:	f7ff ff4c 	bl	1a0052c0 <printi>
1a005428:	4405      	add	r5, r0
1a00542a:	4647      	mov	r7, r8
            continue;
1a00542c:	e023      	b.n	1a005476 <print+0x112>
            pc += printi (out, *varg++, 16, 0, width, pad, 'A');
1a00542e:	f107 0804 	add.w	r8, r7, #4
1a005432:	6839      	ldr	r1, [r7, #0]
1a005434:	2041      	movs	r0, #65	; 0x41
1a005436:	9002      	str	r0, [sp, #8]
1a005438:	9301      	str	r3, [sp, #4]
1a00543a:	9200      	str	r2, [sp, #0]
1a00543c:	2300      	movs	r3, #0
1a00543e:	2210      	movs	r2, #16
1a005440:	4630      	mov	r0, r6
1a005442:	f7ff ff3d 	bl	1a0052c0 <printi>
1a005446:	4405      	add	r5, r0
1a005448:	4647      	mov	r7, r8
            continue;
1a00544a:	e014      	b.n	1a005476 <print+0x112>
            pc += printi (out, *varg++, 10, 0, width, pad, 'a');
1a00544c:	f107 0804 	add.w	r8, r7, #4
1a005450:	6839      	ldr	r1, [r7, #0]
1a005452:	2061      	movs	r0, #97	; 0x61
1a005454:	9002      	str	r0, [sp, #8]
1a005456:	9301      	str	r3, [sp, #4]
1a005458:	9200      	str	r2, [sp, #0]
1a00545a:	2300      	movs	r3, #0
1a00545c:	220a      	movs	r2, #10
1a00545e:	4630      	mov	r0, r6
1a005460:	f7ff ff2e 	bl	1a0052c0 <printi>
1a005464:	4405      	add	r5, r0
1a005466:	4647      	mov	r7, r8
            continue;
1a005468:	e005      	b.n	1a005476 <print+0x112>
         ++format;
1a00546a:	4614      	mov	r4, r2
         }
      } else {
out:
         printchar (out, *format);
1a00546c:	7821      	ldrb	r1, [r4, #0]
1a00546e:	4630      	mov	r0, r6
1a005470:	f7ff feda 	bl	1a005228 <printchar>
         ++pc;
1a005474:	3501      	adds	r5, #1
   for (; *format != 0; ++format) {
1a005476:	3401      	adds	r4, #1
1a005478:	7823      	ldrb	r3, [r4, #0]
1a00547a:	b163      	cbz	r3, 1a005496 <print+0x132>
      if (*format == '%') {
1a00547c:	2b25      	cmp	r3, #37	; 0x25
1a00547e:	d1f5      	bne.n	1a00546c <print+0x108>
         ++format;
1a005480:	1c62      	adds	r2, r4, #1
         if (*format == '\0') break;
1a005482:	7863      	ldrb	r3, [r4, #1]
1a005484:	b13b      	cbz	r3, 1a005496 <print+0x132>
         if (*format == '%') goto out;
1a005486:	2b25      	cmp	r3, #37	; 0x25
1a005488:	d0ef      	beq.n	1a00546a <print+0x106>
         if (*format == '-') {
1a00548a:	2b2d      	cmp	r3, #45	; 0x2d
1a00548c:	f43f af72 	beq.w	1a005374 <print+0x10>
         width = pad = 0;
1a005490:	2300      	movs	r3, #0
            pad = PAD_RIGHT;
1a005492:	4614      	mov	r4, r2
1a005494:	e774      	b.n	1a005380 <print+0x1c>
      }
   }
   if (out) **out = '\0';
1a005496:	b116      	cbz	r6, 1a00549e <print+0x13a>
1a005498:	6833      	ldr	r3, [r6, #0]
1a00549a:	2200      	movs	r2, #0
1a00549c:	701a      	strb	r2, [r3, #0]
   return pc;
}
1a00549e:	4628      	mov	r0, r5
1a0054a0:	b006      	add	sp, #24
1a0054a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0054a6:	bf00      	nop
1a0054a8:	1a006f1c 	.word	0x1a006f1c

1a0054ac <stdioPrintf>:
 * @param uartPrintf UART_USB, UART_232 o UART_485
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioPrintf(uartMap_t uartPrintf, const char *format, ...)
{
1a0054ac:	b40e      	push	{r1, r2, r3}
1a0054ae:	b500      	push	{lr}
   register int *varg = (int *)(&format);
   UartPrintf = uartPrintf;
1a0054b0:	4b04      	ldr	r3, [pc, #16]	; (1a0054c4 <stdioPrintf+0x18>)
1a0054b2:	7018      	strb	r0, [r3, #0]
   return print(0, varg);
1a0054b4:	a901      	add	r1, sp, #4
1a0054b6:	2000      	movs	r0, #0
1a0054b8:	f7ff ff54 	bl	1a005364 <print>
}
1a0054bc:	f85d eb04 	ldr.w	lr, [sp], #4
1a0054c0:	b003      	add	sp, #12
1a0054c2:	4770      	bx	lr
1a0054c4:	10001870 	.word	0x10001870

1a0054c8 <stdioSprintf>:
 * @param out el array a guardar los datos.
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioSprintf(char *out, const char *format, ...)
{
1a0054c8:	b40e      	push	{r1, r2, r3}
1a0054ca:	b500      	push	{lr}
1a0054cc:	b082      	sub	sp, #8
1a0054ce:	ab02      	add	r3, sp, #8
1a0054d0:	f843 0d04 	str.w	r0, [r3, #-4]!
   register int *varg = (int *)(&format);
   return print(&out, varg);
1a0054d4:	a903      	add	r1, sp, #12
1a0054d6:	4618      	mov	r0, r3
1a0054d8:	f7ff ff44 	bl	1a005364 <print>
}
1a0054dc:	b002      	add	sp, #8
1a0054de:	f85d eb04 	ldr.w	lr, [sp], #4
1a0054e2:	b003      	add	sp, #12
1a0054e4:	4770      	bx	lr
1a0054e6:	Address 0x000000001a0054e6 is out of bounds.


1a0054e8 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0054e8:	2301      	movs	r3, #1
1a0054ea:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0054ee:	4b01      	ldr	r3, [pc, #4]	; (1a0054f4 <clearInterrupt+0xc>)
1a0054f0:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0054f2:	4770      	bx	lr
1a0054f4:	40087000 	.word	0x40087000

1a0054f8 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0054fa:	4b12      	ldr	r3, [pc, #72]	; (1a005544 <serveInterrupt+0x4c>)
1a0054fc:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0054fe:	4b12      	ldr	r3, [pc, #72]	; (1a005548 <serveInterrupt+0x50>)
1a005500:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a005502:	2301      	movs	r3, #1
1a005504:	4083      	lsls	r3, r0
1a005506:	420b      	tst	r3, r1
1a005508:	d111      	bne.n	1a00552e <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00550a:	4910      	ldr	r1, [pc, #64]	; (1a00554c <serveInterrupt+0x54>)
1a00550c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00550e:	4d10      	ldr	r5, [pc, #64]	; (1a005550 <serveInterrupt+0x58>)
1a005510:	0051      	lsls	r1, r2, #1
1a005512:	188f      	adds	r7, r1, r2
1a005514:	00fc      	lsls	r4, r7, #3
1a005516:	4627      	mov	r7, r4
1a005518:	442c      	add	r4, r5
1a00551a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00551c:	6864      	ldr	r4, [r4, #4]
1a00551e:	1b36      	subs	r6, r6, r4
1a005520:	443d      	add	r5, r7
1a005522:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a005524:	4a08      	ldr	r2, [pc, #32]	; (1a005548 <serveInterrupt+0x50>)
1a005526:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a005528:	f7ff ffde 	bl	1a0054e8 <clearInterrupt>
}
1a00552c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00552e:	4907      	ldr	r1, [pc, #28]	; (1a00554c <serveInterrupt+0x54>)
1a005530:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a005532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a005536:	00d1      	lsls	r1, r2, #3
1a005538:	4a05      	ldr	r2, [pc, #20]	; (1a005550 <serveInterrupt+0x58>)
1a00553a:	440a      	add	r2, r1
1a00553c:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00553e:	4a02      	ldr	r2, [pc, #8]	; (1a005548 <serveInterrupt+0x50>)
1a005540:	61d3      	str	r3, [r2, #28]
1a005542:	e7f1      	b.n	1a005528 <serveInterrupt+0x30>
1a005544:	1a006f24 	.word	0x1a006f24
1a005548:	40087000 	.word	0x40087000
1a00554c:	40084000 	.word	0x40084000
1a005550:	10001874 	.word	0x10001874

1a005554 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a005554:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a005556:	2000      	movs	r0, #0
1a005558:	f7ff ffce 	bl	1a0054f8 <serveInterrupt>
}
1a00555c:	bd08      	pop	{r3, pc}

1a00555e <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00555e:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a005560:	2001      	movs	r0, #1
1a005562:	f7ff ffc9 	bl	1a0054f8 <serveInterrupt>
}
1a005566:	bd08      	pop	{r3, pc}

1a005568 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a005568:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00556a:	2002      	movs	r0, #2
1a00556c:	f7ff ffc4 	bl	1a0054f8 <serveInterrupt>
}
1a005570:	bd08      	pop	{r3, pc}
1a005572:	Address 0x000000001a005572 is out of bounds.


1a005574 <__aeabi_uldivmod>:
1a005574:	b953      	cbnz	r3, 1a00558c <__aeabi_uldivmod+0x18>
1a005576:	b94a      	cbnz	r2, 1a00558c <__aeabi_uldivmod+0x18>
1a005578:	2900      	cmp	r1, #0
1a00557a:	bf08      	it	eq
1a00557c:	2800      	cmpeq	r0, #0
1a00557e:	bf1c      	itt	ne
1a005580:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a005584:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a005588:	f000 b972 	b.w	1a005870 <__aeabi_idiv0>
1a00558c:	f1ad 0c08 	sub.w	ip, sp, #8
1a005590:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a005594:	f000 f806 	bl	1a0055a4 <__udivmoddi4>
1a005598:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00559c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0055a0:	b004      	add	sp, #16
1a0055a2:	4770      	bx	lr

1a0055a4 <__udivmoddi4>:
1a0055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0055a8:	9e08      	ldr	r6, [sp, #32]
1a0055aa:	4604      	mov	r4, r0
1a0055ac:	4688      	mov	r8, r1
1a0055ae:	2b00      	cmp	r3, #0
1a0055b0:	d14b      	bne.n	1a00564a <__udivmoddi4+0xa6>
1a0055b2:	428a      	cmp	r2, r1
1a0055b4:	4615      	mov	r5, r2
1a0055b6:	d967      	bls.n	1a005688 <__udivmoddi4+0xe4>
1a0055b8:	fab2 f282 	clz	r2, r2
1a0055bc:	b14a      	cbz	r2, 1a0055d2 <__udivmoddi4+0x2e>
1a0055be:	f1c2 0720 	rsb	r7, r2, #32
1a0055c2:	fa01 f302 	lsl.w	r3, r1, r2
1a0055c6:	fa20 f707 	lsr.w	r7, r0, r7
1a0055ca:	4095      	lsls	r5, r2
1a0055cc:	ea47 0803 	orr.w	r8, r7, r3
1a0055d0:	4094      	lsls	r4, r2
1a0055d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0055d6:	0c23      	lsrs	r3, r4, #16
1a0055d8:	fbb8 f7fe 	udiv	r7, r8, lr
1a0055dc:	fa1f fc85 	uxth.w	ip, r5
1a0055e0:	fb0e 8817 	mls	r8, lr, r7, r8
1a0055e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0055e8:	fb07 f10c 	mul.w	r1, r7, ip
1a0055ec:	4299      	cmp	r1, r3
1a0055ee:	d909      	bls.n	1a005604 <__udivmoddi4+0x60>
1a0055f0:	18eb      	adds	r3, r5, r3
1a0055f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0055f6:	f080 811b 	bcs.w	1a005830 <__udivmoddi4+0x28c>
1a0055fa:	4299      	cmp	r1, r3
1a0055fc:	f240 8118 	bls.w	1a005830 <__udivmoddi4+0x28c>
1a005600:	3f02      	subs	r7, #2
1a005602:	442b      	add	r3, r5
1a005604:	1a5b      	subs	r3, r3, r1
1a005606:	b2a4      	uxth	r4, r4
1a005608:	fbb3 f0fe 	udiv	r0, r3, lr
1a00560c:	fb0e 3310 	mls	r3, lr, r0, r3
1a005610:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a005614:	fb00 fc0c 	mul.w	ip, r0, ip
1a005618:	45a4      	cmp	ip, r4
1a00561a:	d909      	bls.n	1a005630 <__udivmoddi4+0x8c>
1a00561c:	192c      	adds	r4, r5, r4
1a00561e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005622:	f080 8107 	bcs.w	1a005834 <__udivmoddi4+0x290>
1a005626:	45a4      	cmp	ip, r4
1a005628:	f240 8104 	bls.w	1a005834 <__udivmoddi4+0x290>
1a00562c:	3802      	subs	r0, #2
1a00562e:	442c      	add	r4, r5
1a005630:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a005634:	eba4 040c 	sub.w	r4, r4, ip
1a005638:	2700      	movs	r7, #0
1a00563a:	b11e      	cbz	r6, 1a005644 <__udivmoddi4+0xa0>
1a00563c:	40d4      	lsrs	r4, r2
1a00563e:	2300      	movs	r3, #0
1a005640:	e9c6 4300 	strd	r4, r3, [r6]
1a005644:	4639      	mov	r1, r7
1a005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00564a:	428b      	cmp	r3, r1
1a00564c:	d909      	bls.n	1a005662 <__udivmoddi4+0xbe>
1a00564e:	2e00      	cmp	r6, #0
1a005650:	f000 80eb 	beq.w	1a00582a <__udivmoddi4+0x286>
1a005654:	2700      	movs	r7, #0
1a005656:	e9c6 0100 	strd	r0, r1, [r6]
1a00565a:	4638      	mov	r0, r7
1a00565c:	4639      	mov	r1, r7
1a00565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005662:	fab3 f783 	clz	r7, r3
1a005666:	2f00      	cmp	r7, #0
1a005668:	d147      	bne.n	1a0056fa <__udivmoddi4+0x156>
1a00566a:	428b      	cmp	r3, r1
1a00566c:	d302      	bcc.n	1a005674 <__udivmoddi4+0xd0>
1a00566e:	4282      	cmp	r2, r0
1a005670:	f200 80fa 	bhi.w	1a005868 <__udivmoddi4+0x2c4>
1a005674:	1a84      	subs	r4, r0, r2
1a005676:	eb61 0303 	sbc.w	r3, r1, r3
1a00567a:	2001      	movs	r0, #1
1a00567c:	4698      	mov	r8, r3
1a00567e:	2e00      	cmp	r6, #0
1a005680:	d0e0      	beq.n	1a005644 <__udivmoddi4+0xa0>
1a005682:	e9c6 4800 	strd	r4, r8, [r6]
1a005686:	e7dd      	b.n	1a005644 <__udivmoddi4+0xa0>
1a005688:	b902      	cbnz	r2, 1a00568c <__udivmoddi4+0xe8>
1a00568a:	deff      	udf	#255	; 0xff
1a00568c:	fab2 f282 	clz	r2, r2
1a005690:	2a00      	cmp	r2, #0
1a005692:	f040 808f 	bne.w	1a0057b4 <__udivmoddi4+0x210>
1a005696:	1b49      	subs	r1, r1, r5
1a005698:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00569c:	fa1f f885 	uxth.w	r8, r5
1a0056a0:	2701      	movs	r7, #1
1a0056a2:	fbb1 fcfe 	udiv	ip, r1, lr
1a0056a6:	0c23      	lsrs	r3, r4, #16
1a0056a8:	fb0e 111c 	mls	r1, lr, ip, r1
1a0056ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0056b0:	fb08 f10c 	mul.w	r1, r8, ip
1a0056b4:	4299      	cmp	r1, r3
1a0056b6:	d907      	bls.n	1a0056c8 <__udivmoddi4+0x124>
1a0056b8:	18eb      	adds	r3, r5, r3
1a0056ba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0056be:	d202      	bcs.n	1a0056c6 <__udivmoddi4+0x122>
1a0056c0:	4299      	cmp	r1, r3
1a0056c2:	f200 80cd 	bhi.w	1a005860 <__udivmoddi4+0x2bc>
1a0056c6:	4684      	mov	ip, r0
1a0056c8:	1a59      	subs	r1, r3, r1
1a0056ca:	b2a3      	uxth	r3, r4
1a0056cc:	fbb1 f0fe 	udiv	r0, r1, lr
1a0056d0:	fb0e 1410 	mls	r4, lr, r0, r1
1a0056d4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0056d8:	fb08 f800 	mul.w	r8, r8, r0
1a0056dc:	45a0      	cmp	r8, r4
1a0056de:	d907      	bls.n	1a0056f0 <__udivmoddi4+0x14c>
1a0056e0:	192c      	adds	r4, r5, r4
1a0056e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0056e6:	d202      	bcs.n	1a0056ee <__udivmoddi4+0x14a>
1a0056e8:	45a0      	cmp	r8, r4
1a0056ea:	f200 80b6 	bhi.w	1a00585a <__udivmoddi4+0x2b6>
1a0056ee:	4618      	mov	r0, r3
1a0056f0:	eba4 0408 	sub.w	r4, r4, r8
1a0056f4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0056f8:	e79f      	b.n	1a00563a <__udivmoddi4+0x96>
1a0056fa:	f1c7 0c20 	rsb	ip, r7, #32
1a0056fe:	40bb      	lsls	r3, r7
1a005700:	fa22 fe0c 	lsr.w	lr, r2, ip
1a005704:	ea4e 0e03 	orr.w	lr, lr, r3
1a005708:	fa01 f407 	lsl.w	r4, r1, r7
1a00570c:	fa20 f50c 	lsr.w	r5, r0, ip
1a005710:	fa21 f30c 	lsr.w	r3, r1, ip
1a005714:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a005718:	4325      	orrs	r5, r4
1a00571a:	fbb3 f9f8 	udiv	r9, r3, r8
1a00571e:	0c2c      	lsrs	r4, r5, #16
1a005720:	fb08 3319 	mls	r3, r8, r9, r3
1a005724:	fa1f fa8e 	uxth.w	sl, lr
1a005728:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a00572c:	fb09 f40a 	mul.w	r4, r9, sl
1a005730:	429c      	cmp	r4, r3
1a005732:	fa02 f207 	lsl.w	r2, r2, r7
1a005736:	fa00 f107 	lsl.w	r1, r0, r7
1a00573a:	d90b      	bls.n	1a005754 <__udivmoddi4+0x1b0>
1a00573c:	eb1e 0303 	adds.w	r3, lr, r3
1a005740:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a005744:	f080 8087 	bcs.w	1a005856 <__udivmoddi4+0x2b2>
1a005748:	429c      	cmp	r4, r3
1a00574a:	f240 8084 	bls.w	1a005856 <__udivmoddi4+0x2b2>
1a00574e:	f1a9 0902 	sub.w	r9, r9, #2
1a005752:	4473      	add	r3, lr
1a005754:	1b1b      	subs	r3, r3, r4
1a005756:	b2ad      	uxth	r5, r5
1a005758:	fbb3 f0f8 	udiv	r0, r3, r8
1a00575c:	fb08 3310 	mls	r3, r8, r0, r3
1a005760:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a005764:	fb00 fa0a 	mul.w	sl, r0, sl
1a005768:	45a2      	cmp	sl, r4
1a00576a:	d908      	bls.n	1a00577e <__udivmoddi4+0x1da>
1a00576c:	eb1e 0404 	adds.w	r4, lr, r4
1a005770:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a005774:	d26b      	bcs.n	1a00584e <__udivmoddi4+0x2aa>
1a005776:	45a2      	cmp	sl, r4
1a005778:	d969      	bls.n	1a00584e <__udivmoddi4+0x2aa>
1a00577a:	3802      	subs	r0, #2
1a00577c:	4474      	add	r4, lr
1a00577e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a005782:	fba0 8902 	umull	r8, r9, r0, r2
1a005786:	eba4 040a 	sub.w	r4, r4, sl
1a00578a:	454c      	cmp	r4, r9
1a00578c:	46c2      	mov	sl, r8
1a00578e:	464b      	mov	r3, r9
1a005790:	d354      	bcc.n	1a00583c <__udivmoddi4+0x298>
1a005792:	d051      	beq.n	1a005838 <__udivmoddi4+0x294>
1a005794:	2e00      	cmp	r6, #0
1a005796:	d069      	beq.n	1a00586c <__udivmoddi4+0x2c8>
1a005798:	ebb1 050a 	subs.w	r5, r1, sl
1a00579c:	eb64 0403 	sbc.w	r4, r4, r3
1a0057a0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a0057a4:	40fd      	lsrs	r5, r7
1a0057a6:	40fc      	lsrs	r4, r7
1a0057a8:	ea4c 0505 	orr.w	r5, ip, r5
1a0057ac:	e9c6 5400 	strd	r5, r4, [r6]
1a0057b0:	2700      	movs	r7, #0
1a0057b2:	e747      	b.n	1a005644 <__udivmoddi4+0xa0>
1a0057b4:	f1c2 0320 	rsb	r3, r2, #32
1a0057b8:	fa20 f703 	lsr.w	r7, r0, r3
1a0057bc:	4095      	lsls	r5, r2
1a0057be:	fa01 f002 	lsl.w	r0, r1, r2
1a0057c2:	fa21 f303 	lsr.w	r3, r1, r3
1a0057c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0057ca:	4338      	orrs	r0, r7
1a0057cc:	0c01      	lsrs	r1, r0, #16
1a0057ce:	fbb3 f7fe 	udiv	r7, r3, lr
1a0057d2:	fa1f f885 	uxth.w	r8, r5
1a0057d6:	fb0e 3317 	mls	r3, lr, r7, r3
1a0057da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0057de:	fb07 f308 	mul.w	r3, r7, r8
1a0057e2:	428b      	cmp	r3, r1
1a0057e4:	fa04 f402 	lsl.w	r4, r4, r2
1a0057e8:	d907      	bls.n	1a0057fa <__udivmoddi4+0x256>
1a0057ea:	1869      	adds	r1, r5, r1
1a0057ec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0057f0:	d22f      	bcs.n	1a005852 <__udivmoddi4+0x2ae>
1a0057f2:	428b      	cmp	r3, r1
1a0057f4:	d92d      	bls.n	1a005852 <__udivmoddi4+0x2ae>
1a0057f6:	3f02      	subs	r7, #2
1a0057f8:	4429      	add	r1, r5
1a0057fa:	1acb      	subs	r3, r1, r3
1a0057fc:	b281      	uxth	r1, r0
1a0057fe:	fbb3 f0fe 	udiv	r0, r3, lr
1a005802:	fb0e 3310 	mls	r3, lr, r0, r3
1a005806:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00580a:	fb00 f308 	mul.w	r3, r0, r8
1a00580e:	428b      	cmp	r3, r1
1a005810:	d907      	bls.n	1a005822 <__udivmoddi4+0x27e>
1a005812:	1869      	adds	r1, r5, r1
1a005814:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a005818:	d217      	bcs.n	1a00584a <__udivmoddi4+0x2a6>
1a00581a:	428b      	cmp	r3, r1
1a00581c:	d915      	bls.n	1a00584a <__udivmoddi4+0x2a6>
1a00581e:	3802      	subs	r0, #2
1a005820:	4429      	add	r1, r5
1a005822:	1ac9      	subs	r1, r1, r3
1a005824:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a005828:	e73b      	b.n	1a0056a2 <__udivmoddi4+0xfe>
1a00582a:	4637      	mov	r7, r6
1a00582c:	4630      	mov	r0, r6
1a00582e:	e709      	b.n	1a005644 <__udivmoddi4+0xa0>
1a005830:	4607      	mov	r7, r0
1a005832:	e6e7      	b.n	1a005604 <__udivmoddi4+0x60>
1a005834:	4618      	mov	r0, r3
1a005836:	e6fb      	b.n	1a005630 <__udivmoddi4+0x8c>
1a005838:	4541      	cmp	r1, r8
1a00583a:	d2ab      	bcs.n	1a005794 <__udivmoddi4+0x1f0>
1a00583c:	ebb8 0a02 	subs.w	sl, r8, r2
1a005840:	eb69 020e 	sbc.w	r2, r9, lr
1a005844:	3801      	subs	r0, #1
1a005846:	4613      	mov	r3, r2
1a005848:	e7a4      	b.n	1a005794 <__udivmoddi4+0x1f0>
1a00584a:	4660      	mov	r0, ip
1a00584c:	e7e9      	b.n	1a005822 <__udivmoddi4+0x27e>
1a00584e:	4618      	mov	r0, r3
1a005850:	e795      	b.n	1a00577e <__udivmoddi4+0x1da>
1a005852:	4667      	mov	r7, ip
1a005854:	e7d1      	b.n	1a0057fa <__udivmoddi4+0x256>
1a005856:	4681      	mov	r9, r0
1a005858:	e77c      	b.n	1a005754 <__udivmoddi4+0x1b0>
1a00585a:	3802      	subs	r0, #2
1a00585c:	442c      	add	r4, r5
1a00585e:	e747      	b.n	1a0056f0 <__udivmoddi4+0x14c>
1a005860:	f1ac 0c02 	sub.w	ip, ip, #2
1a005864:	442b      	add	r3, r5
1a005866:	e72f      	b.n	1a0056c8 <__udivmoddi4+0x124>
1a005868:	4638      	mov	r0, r7
1a00586a:	e708      	b.n	1a00567e <__udivmoddi4+0xda>
1a00586c:	4637      	mov	r7, r6
1a00586e:	e6e9      	b.n	1a005644 <__udivmoddi4+0xa0>

1a005870 <__aeabi_idiv0>:
1a005870:	4770      	bx	lr
1a005872:	bf00      	nop

1a005874 <__sflush_r>:
1a005874:	898a      	ldrh	r2, [r1, #12]
1a005876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00587a:	4605      	mov	r5, r0
1a00587c:	0710      	lsls	r0, r2, #28
1a00587e:	460c      	mov	r4, r1
1a005880:	d458      	bmi.n	1a005934 <__sflush_r+0xc0>
1a005882:	684b      	ldr	r3, [r1, #4]
1a005884:	2b00      	cmp	r3, #0
1a005886:	dc05      	bgt.n	1a005894 <__sflush_r+0x20>
1a005888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00588a:	2b00      	cmp	r3, #0
1a00588c:	dc02      	bgt.n	1a005894 <__sflush_r+0x20>
1a00588e:	2000      	movs	r0, #0
1a005890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a005896:	2e00      	cmp	r6, #0
1a005898:	d0f9      	beq.n	1a00588e <__sflush_r+0x1a>
1a00589a:	2300      	movs	r3, #0
1a00589c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0058a0:	682f      	ldr	r7, [r5, #0]
1a0058a2:	6a21      	ldr	r1, [r4, #32]
1a0058a4:	602b      	str	r3, [r5, #0]
1a0058a6:	d032      	beq.n	1a00590e <__sflush_r+0x9a>
1a0058a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0058aa:	89a3      	ldrh	r3, [r4, #12]
1a0058ac:	075a      	lsls	r2, r3, #29
1a0058ae:	d505      	bpl.n	1a0058bc <__sflush_r+0x48>
1a0058b0:	6863      	ldr	r3, [r4, #4]
1a0058b2:	1ac0      	subs	r0, r0, r3
1a0058b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0058b6:	b10b      	cbz	r3, 1a0058bc <__sflush_r+0x48>
1a0058b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0058ba:	1ac0      	subs	r0, r0, r3
1a0058bc:	2300      	movs	r3, #0
1a0058be:	4602      	mov	r2, r0
1a0058c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0058c2:	6a21      	ldr	r1, [r4, #32]
1a0058c4:	4628      	mov	r0, r5
1a0058c6:	47b0      	blx	r6
1a0058c8:	1c43      	adds	r3, r0, #1
1a0058ca:	89a3      	ldrh	r3, [r4, #12]
1a0058cc:	d106      	bne.n	1a0058dc <__sflush_r+0x68>
1a0058ce:	6829      	ldr	r1, [r5, #0]
1a0058d0:	291d      	cmp	r1, #29
1a0058d2:	d848      	bhi.n	1a005966 <__sflush_r+0xf2>
1a0058d4:	4a29      	ldr	r2, [pc, #164]	; (1a00597c <__sflush_r+0x108>)
1a0058d6:	40ca      	lsrs	r2, r1
1a0058d8:	07d6      	lsls	r6, r2, #31
1a0058da:	d544      	bpl.n	1a005966 <__sflush_r+0xf2>
1a0058dc:	2200      	movs	r2, #0
1a0058de:	6062      	str	r2, [r4, #4]
1a0058e0:	04d9      	lsls	r1, r3, #19
1a0058e2:	6922      	ldr	r2, [r4, #16]
1a0058e4:	6022      	str	r2, [r4, #0]
1a0058e6:	d504      	bpl.n	1a0058f2 <__sflush_r+0x7e>
1a0058e8:	1c42      	adds	r2, r0, #1
1a0058ea:	d101      	bne.n	1a0058f0 <__sflush_r+0x7c>
1a0058ec:	682b      	ldr	r3, [r5, #0]
1a0058ee:	b903      	cbnz	r3, 1a0058f2 <__sflush_r+0x7e>
1a0058f0:	6560      	str	r0, [r4, #84]	; 0x54
1a0058f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0058f4:	602f      	str	r7, [r5, #0]
1a0058f6:	2900      	cmp	r1, #0
1a0058f8:	d0c9      	beq.n	1a00588e <__sflush_r+0x1a>
1a0058fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0058fe:	4299      	cmp	r1, r3
1a005900:	d002      	beq.n	1a005908 <__sflush_r+0x94>
1a005902:	4628      	mov	r0, r5
1a005904:	f000 f968 	bl	1a005bd8 <_free_r>
1a005908:	2000      	movs	r0, #0
1a00590a:	6360      	str	r0, [r4, #52]	; 0x34
1a00590c:	e7c0      	b.n	1a005890 <__sflush_r+0x1c>
1a00590e:	2301      	movs	r3, #1
1a005910:	4628      	mov	r0, r5
1a005912:	47b0      	blx	r6
1a005914:	1c41      	adds	r1, r0, #1
1a005916:	d1c8      	bne.n	1a0058aa <__sflush_r+0x36>
1a005918:	682b      	ldr	r3, [r5, #0]
1a00591a:	2b00      	cmp	r3, #0
1a00591c:	d0c5      	beq.n	1a0058aa <__sflush_r+0x36>
1a00591e:	2b1d      	cmp	r3, #29
1a005920:	d001      	beq.n	1a005926 <__sflush_r+0xb2>
1a005922:	2b16      	cmp	r3, #22
1a005924:	d101      	bne.n	1a00592a <__sflush_r+0xb6>
1a005926:	602f      	str	r7, [r5, #0]
1a005928:	e7b1      	b.n	1a00588e <__sflush_r+0x1a>
1a00592a:	89a3      	ldrh	r3, [r4, #12]
1a00592c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005930:	81a3      	strh	r3, [r4, #12]
1a005932:	e7ad      	b.n	1a005890 <__sflush_r+0x1c>
1a005934:	690f      	ldr	r7, [r1, #16]
1a005936:	2f00      	cmp	r7, #0
1a005938:	d0a9      	beq.n	1a00588e <__sflush_r+0x1a>
1a00593a:	0793      	lsls	r3, r2, #30
1a00593c:	680e      	ldr	r6, [r1, #0]
1a00593e:	bf08      	it	eq
1a005940:	694b      	ldreq	r3, [r1, #20]
1a005942:	600f      	str	r7, [r1, #0]
1a005944:	bf18      	it	ne
1a005946:	2300      	movne	r3, #0
1a005948:	eba6 0807 	sub.w	r8, r6, r7
1a00594c:	608b      	str	r3, [r1, #8]
1a00594e:	f1b8 0f00 	cmp.w	r8, #0
1a005952:	dd9c      	ble.n	1a00588e <__sflush_r+0x1a>
1a005954:	4643      	mov	r3, r8
1a005956:	463a      	mov	r2, r7
1a005958:	6a21      	ldr	r1, [r4, #32]
1a00595a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a00595c:	4628      	mov	r0, r5
1a00595e:	47b0      	blx	r6
1a005960:	2800      	cmp	r0, #0
1a005962:	dc06      	bgt.n	1a005972 <__sflush_r+0xfe>
1a005964:	89a3      	ldrh	r3, [r4, #12]
1a005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00596a:	81a3      	strh	r3, [r4, #12]
1a00596c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005970:	e78e      	b.n	1a005890 <__sflush_r+0x1c>
1a005972:	4407      	add	r7, r0
1a005974:	eba8 0800 	sub.w	r8, r8, r0
1a005978:	e7e9      	b.n	1a00594e <__sflush_r+0xda>
1a00597a:	bf00      	nop
1a00597c:	20400001 	.word	0x20400001

1a005980 <_fflush_r>:
1a005980:	b538      	push	{r3, r4, r5, lr}
1a005982:	690b      	ldr	r3, [r1, #16]
1a005984:	4605      	mov	r5, r0
1a005986:	460c      	mov	r4, r1
1a005988:	b1db      	cbz	r3, 1a0059c2 <_fflush_r+0x42>
1a00598a:	b118      	cbz	r0, 1a005994 <_fflush_r+0x14>
1a00598c:	6983      	ldr	r3, [r0, #24]
1a00598e:	b90b      	cbnz	r3, 1a005994 <_fflush_r+0x14>
1a005990:	f000 f860 	bl	1a005a54 <__sinit>
1a005994:	4b0c      	ldr	r3, [pc, #48]	; (1a0059c8 <_fflush_r+0x48>)
1a005996:	429c      	cmp	r4, r3
1a005998:	d109      	bne.n	1a0059ae <_fflush_r+0x2e>
1a00599a:	686c      	ldr	r4, [r5, #4]
1a00599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0059a0:	b17b      	cbz	r3, 1a0059c2 <_fflush_r+0x42>
1a0059a2:	4621      	mov	r1, r4
1a0059a4:	4628      	mov	r0, r5
1a0059a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0059aa:	f7ff bf63 	b.w	1a005874 <__sflush_r>
1a0059ae:	4b07      	ldr	r3, [pc, #28]	; (1a0059cc <_fflush_r+0x4c>)
1a0059b0:	429c      	cmp	r4, r3
1a0059b2:	d101      	bne.n	1a0059b8 <_fflush_r+0x38>
1a0059b4:	68ac      	ldr	r4, [r5, #8]
1a0059b6:	e7f1      	b.n	1a00599c <_fflush_r+0x1c>
1a0059b8:	4b05      	ldr	r3, [pc, #20]	; (1a0059d0 <_fflush_r+0x50>)
1a0059ba:	429c      	cmp	r4, r3
1a0059bc:	bf08      	it	eq
1a0059be:	68ec      	ldreq	r4, [r5, #12]
1a0059c0:	e7ec      	b.n	1a00599c <_fflush_r+0x1c>
1a0059c2:	2000      	movs	r0, #0
1a0059c4:	bd38      	pop	{r3, r4, r5, pc}
1a0059c6:	bf00      	nop
1a0059c8:	1a006f48 	.word	0x1a006f48
1a0059cc:	1a006f68 	.word	0x1a006f68
1a0059d0:	1a006f28 	.word	0x1a006f28

1a0059d4 <std>:
1a0059d4:	2300      	movs	r3, #0
1a0059d6:	b510      	push	{r4, lr}
1a0059d8:	4604      	mov	r4, r0
1a0059da:	e9c0 3300 	strd	r3, r3, [r0]
1a0059de:	6083      	str	r3, [r0, #8]
1a0059e0:	8181      	strh	r1, [r0, #12]
1a0059e2:	6643      	str	r3, [r0, #100]	; 0x64
1a0059e4:	81c2      	strh	r2, [r0, #14]
1a0059e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0059ea:	6183      	str	r3, [r0, #24]
1a0059ec:	4619      	mov	r1, r3
1a0059ee:	2208      	movs	r2, #8
1a0059f0:	305c      	adds	r0, #92	; 0x5c
1a0059f2:	f000 f8e8 	bl	1a005bc6 <memset>
1a0059f6:	4b05      	ldr	r3, [pc, #20]	; (1a005a0c <std+0x38>)
1a0059f8:	6263      	str	r3, [r4, #36]	; 0x24
1a0059fa:	4b05      	ldr	r3, [pc, #20]	; (1a005a10 <std+0x3c>)
1a0059fc:	62a3      	str	r3, [r4, #40]	; 0x28
1a0059fe:	4b05      	ldr	r3, [pc, #20]	; (1a005a14 <std+0x40>)
1a005a00:	62e3      	str	r3, [r4, #44]	; 0x2c
1a005a02:	4b05      	ldr	r3, [pc, #20]	; (1a005a18 <std+0x44>)
1a005a04:	6224      	str	r4, [r4, #32]
1a005a06:	6323      	str	r3, [r4, #48]	; 0x30
1a005a08:	bd10      	pop	{r4, pc}
1a005a0a:	bf00      	nop
1a005a0c:	1a005e21 	.word	0x1a005e21
1a005a10:	1a005e43 	.word	0x1a005e43
1a005a14:	1a005e7b 	.word	0x1a005e7b
1a005a18:	1a005e9f 	.word	0x1a005e9f

1a005a1c <_cleanup_r>:
1a005a1c:	4901      	ldr	r1, [pc, #4]	; (1a005a24 <_cleanup_r+0x8>)
1a005a1e:	f000 b885 	b.w	1a005b2c <_fwalk_reent>
1a005a22:	bf00      	nop
1a005a24:	1a005981 	.word	0x1a005981

1a005a28 <__sfmoreglue>:
1a005a28:	b570      	push	{r4, r5, r6, lr}
1a005a2a:	1e4a      	subs	r2, r1, #1
1a005a2c:	2568      	movs	r5, #104	; 0x68
1a005a2e:	4355      	muls	r5, r2
1a005a30:	460e      	mov	r6, r1
1a005a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a005a36:	f000 f91d 	bl	1a005c74 <_malloc_r>
1a005a3a:	4604      	mov	r4, r0
1a005a3c:	b140      	cbz	r0, 1a005a50 <__sfmoreglue+0x28>
1a005a3e:	2100      	movs	r1, #0
1a005a40:	e9c0 1600 	strd	r1, r6, [r0]
1a005a44:	300c      	adds	r0, #12
1a005a46:	60a0      	str	r0, [r4, #8]
1a005a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a005a4c:	f000 f8bb 	bl	1a005bc6 <memset>
1a005a50:	4620      	mov	r0, r4
1a005a52:	bd70      	pop	{r4, r5, r6, pc}

1a005a54 <__sinit>:
1a005a54:	6983      	ldr	r3, [r0, #24]
1a005a56:	b510      	push	{r4, lr}
1a005a58:	4604      	mov	r4, r0
1a005a5a:	bb33      	cbnz	r3, 1a005aaa <__sinit+0x56>
1a005a5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a005a60:	6503      	str	r3, [r0, #80]	; 0x50
1a005a62:	4b12      	ldr	r3, [pc, #72]	; (1a005aac <__sinit+0x58>)
1a005a64:	4a12      	ldr	r2, [pc, #72]	; (1a005ab0 <__sinit+0x5c>)
1a005a66:	681b      	ldr	r3, [r3, #0]
1a005a68:	6282      	str	r2, [r0, #40]	; 0x28
1a005a6a:	4298      	cmp	r0, r3
1a005a6c:	bf04      	itt	eq
1a005a6e:	2301      	moveq	r3, #1
1a005a70:	6183      	streq	r3, [r0, #24]
1a005a72:	f000 f81f 	bl	1a005ab4 <__sfp>
1a005a76:	6060      	str	r0, [r4, #4]
1a005a78:	4620      	mov	r0, r4
1a005a7a:	f000 f81b 	bl	1a005ab4 <__sfp>
1a005a7e:	60a0      	str	r0, [r4, #8]
1a005a80:	4620      	mov	r0, r4
1a005a82:	f000 f817 	bl	1a005ab4 <__sfp>
1a005a86:	2200      	movs	r2, #0
1a005a88:	60e0      	str	r0, [r4, #12]
1a005a8a:	2104      	movs	r1, #4
1a005a8c:	6860      	ldr	r0, [r4, #4]
1a005a8e:	f7ff ffa1 	bl	1a0059d4 <std>
1a005a92:	2201      	movs	r2, #1
1a005a94:	2109      	movs	r1, #9
1a005a96:	68a0      	ldr	r0, [r4, #8]
1a005a98:	f7ff ff9c 	bl	1a0059d4 <std>
1a005a9c:	2202      	movs	r2, #2
1a005a9e:	2112      	movs	r1, #18
1a005aa0:	68e0      	ldr	r0, [r4, #12]
1a005aa2:	f7ff ff97 	bl	1a0059d4 <std>
1a005aa6:	2301      	movs	r3, #1
1a005aa8:	61a3      	str	r3, [r4, #24]
1a005aaa:	bd10      	pop	{r4, pc}
1a005aac:	1a006f88 	.word	0x1a006f88
1a005ab0:	1a005a1d 	.word	0x1a005a1d

1a005ab4 <__sfp>:
1a005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005ab6:	4b1b      	ldr	r3, [pc, #108]	; (1a005b24 <__sfp+0x70>)
1a005ab8:	681e      	ldr	r6, [r3, #0]
1a005aba:	69b3      	ldr	r3, [r6, #24]
1a005abc:	4607      	mov	r7, r0
1a005abe:	b913      	cbnz	r3, 1a005ac6 <__sfp+0x12>
1a005ac0:	4630      	mov	r0, r6
1a005ac2:	f7ff ffc7 	bl	1a005a54 <__sinit>
1a005ac6:	3648      	adds	r6, #72	; 0x48
1a005ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a005acc:	3b01      	subs	r3, #1
1a005ace:	d503      	bpl.n	1a005ad8 <__sfp+0x24>
1a005ad0:	6833      	ldr	r3, [r6, #0]
1a005ad2:	b133      	cbz	r3, 1a005ae2 <__sfp+0x2e>
1a005ad4:	6836      	ldr	r6, [r6, #0]
1a005ad6:	e7f7      	b.n	1a005ac8 <__sfp+0x14>
1a005ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a005adc:	b16d      	cbz	r5, 1a005afa <__sfp+0x46>
1a005ade:	3468      	adds	r4, #104	; 0x68
1a005ae0:	e7f4      	b.n	1a005acc <__sfp+0x18>
1a005ae2:	2104      	movs	r1, #4
1a005ae4:	4638      	mov	r0, r7
1a005ae6:	f7ff ff9f 	bl	1a005a28 <__sfmoreglue>
1a005aea:	6030      	str	r0, [r6, #0]
1a005aec:	2800      	cmp	r0, #0
1a005aee:	d1f1      	bne.n	1a005ad4 <__sfp+0x20>
1a005af0:	230c      	movs	r3, #12
1a005af2:	603b      	str	r3, [r7, #0]
1a005af4:	4604      	mov	r4, r0
1a005af6:	4620      	mov	r0, r4
1a005af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005afa:	4b0b      	ldr	r3, [pc, #44]	; (1a005b28 <__sfp+0x74>)
1a005afc:	6665      	str	r5, [r4, #100]	; 0x64
1a005afe:	e9c4 5500 	strd	r5, r5, [r4]
1a005b02:	60a5      	str	r5, [r4, #8]
1a005b04:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a005b08:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a005b0c:	2208      	movs	r2, #8
1a005b0e:	4629      	mov	r1, r5
1a005b10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a005b14:	f000 f857 	bl	1a005bc6 <memset>
1a005b18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a005b1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a005b20:	e7e9      	b.n	1a005af6 <__sfp+0x42>
1a005b22:	bf00      	nop
1a005b24:	1a006f88 	.word	0x1a006f88
1a005b28:	ffff0001 	.word	0xffff0001

1a005b2c <_fwalk_reent>:
1a005b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005b30:	4680      	mov	r8, r0
1a005b32:	4689      	mov	r9, r1
1a005b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a005b38:	2600      	movs	r6, #0
1a005b3a:	b914      	cbnz	r4, 1a005b42 <_fwalk_reent+0x16>
1a005b3c:	4630      	mov	r0, r6
1a005b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005b42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a005b46:	3f01      	subs	r7, #1
1a005b48:	d501      	bpl.n	1a005b4e <_fwalk_reent+0x22>
1a005b4a:	6824      	ldr	r4, [r4, #0]
1a005b4c:	e7f5      	b.n	1a005b3a <_fwalk_reent+0xe>
1a005b4e:	89ab      	ldrh	r3, [r5, #12]
1a005b50:	2b01      	cmp	r3, #1
1a005b52:	d907      	bls.n	1a005b64 <_fwalk_reent+0x38>
1a005b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a005b58:	3301      	adds	r3, #1
1a005b5a:	d003      	beq.n	1a005b64 <_fwalk_reent+0x38>
1a005b5c:	4629      	mov	r1, r5
1a005b5e:	4640      	mov	r0, r8
1a005b60:	47c8      	blx	r9
1a005b62:	4306      	orrs	r6, r0
1a005b64:	3568      	adds	r5, #104	; 0x68
1a005b66:	e7ee      	b.n	1a005b46 <_fwalk_reent+0x1a>

1a005b68 <__libc_init_array>:
1a005b68:	b570      	push	{r4, r5, r6, lr}
1a005b6a:	4e0d      	ldr	r6, [pc, #52]	; (1a005ba0 <__libc_init_array+0x38>)
1a005b6c:	4c0d      	ldr	r4, [pc, #52]	; (1a005ba4 <__libc_init_array+0x3c>)
1a005b6e:	1ba4      	subs	r4, r4, r6
1a005b70:	10a4      	asrs	r4, r4, #2
1a005b72:	2500      	movs	r5, #0
1a005b74:	42a5      	cmp	r5, r4
1a005b76:	d109      	bne.n	1a005b8c <__libc_init_array+0x24>
1a005b78:	4e0b      	ldr	r6, [pc, #44]	; (1a005ba8 <__libc_init_array+0x40>)
1a005b7a:	4c0c      	ldr	r4, [pc, #48]	; (1a005bac <__libc_init_array+0x44>)
1a005b7c:	f7fc f99f 	bl	1a001ebe <_init>
1a005b80:	1ba4      	subs	r4, r4, r6
1a005b82:	10a4      	asrs	r4, r4, #2
1a005b84:	2500      	movs	r5, #0
1a005b86:	42a5      	cmp	r5, r4
1a005b88:	d105      	bne.n	1a005b96 <__libc_init_array+0x2e>
1a005b8a:	bd70      	pop	{r4, r5, r6, pc}
1a005b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005b90:	4798      	blx	r3
1a005b92:	3501      	adds	r5, #1
1a005b94:	e7ee      	b.n	1a005b74 <__libc_init_array+0xc>
1a005b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a005b9a:	4798      	blx	r3
1a005b9c:	3501      	adds	r5, #1
1a005b9e:	e7f2      	b.n	1a005b86 <__libc_init_array+0x1e>
1a005ba0:	1a006fc0 	.word	0x1a006fc0
1a005ba4:	1a006fc0 	.word	0x1a006fc0
1a005ba8:	1a006fc0 	.word	0x1a006fc0
1a005bac:	1a006fc4 	.word	0x1a006fc4

1a005bb0 <memcpy>:
1a005bb0:	b510      	push	{r4, lr}
1a005bb2:	1e43      	subs	r3, r0, #1
1a005bb4:	440a      	add	r2, r1
1a005bb6:	4291      	cmp	r1, r2
1a005bb8:	d100      	bne.n	1a005bbc <memcpy+0xc>
1a005bba:	bd10      	pop	{r4, pc}
1a005bbc:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005bc4:	e7f7      	b.n	1a005bb6 <memcpy+0x6>

1a005bc6 <memset>:
1a005bc6:	4402      	add	r2, r0
1a005bc8:	4603      	mov	r3, r0
1a005bca:	4293      	cmp	r3, r2
1a005bcc:	d100      	bne.n	1a005bd0 <memset+0xa>
1a005bce:	4770      	bx	lr
1a005bd0:	f803 1b01 	strb.w	r1, [r3], #1
1a005bd4:	e7f9      	b.n	1a005bca <memset+0x4>
1a005bd6:	Address 0x000000001a005bd6 is out of bounds.


1a005bd8 <_free_r>:
1a005bd8:	b538      	push	{r3, r4, r5, lr}
1a005bda:	4605      	mov	r5, r0
1a005bdc:	2900      	cmp	r1, #0
1a005bde:	d045      	beq.n	1a005c6c <_free_r+0x94>
1a005be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005be4:	1f0c      	subs	r4, r1, #4
1a005be6:	2b00      	cmp	r3, #0
1a005be8:	bfb8      	it	lt
1a005bea:	18e4      	addlt	r4, r4, r3
1a005bec:	f000 fad0 	bl	1a006190 <__malloc_lock>
1a005bf0:	4a1f      	ldr	r2, [pc, #124]	; (1a005c70 <_free_r+0x98>)
1a005bf2:	6813      	ldr	r3, [r2, #0]
1a005bf4:	4610      	mov	r0, r2
1a005bf6:	b933      	cbnz	r3, 1a005c06 <_free_r+0x2e>
1a005bf8:	6063      	str	r3, [r4, #4]
1a005bfa:	6014      	str	r4, [r2, #0]
1a005bfc:	4628      	mov	r0, r5
1a005bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005c02:	f000 bac6 	b.w	1a006192 <__malloc_unlock>
1a005c06:	42a3      	cmp	r3, r4
1a005c08:	d90c      	bls.n	1a005c24 <_free_r+0x4c>
1a005c0a:	6821      	ldr	r1, [r4, #0]
1a005c0c:	1862      	adds	r2, r4, r1
1a005c0e:	4293      	cmp	r3, r2
1a005c10:	bf04      	itt	eq
1a005c12:	681a      	ldreq	r2, [r3, #0]
1a005c14:	685b      	ldreq	r3, [r3, #4]
1a005c16:	6063      	str	r3, [r4, #4]
1a005c18:	bf04      	itt	eq
1a005c1a:	1852      	addeq	r2, r2, r1
1a005c1c:	6022      	streq	r2, [r4, #0]
1a005c1e:	6004      	str	r4, [r0, #0]
1a005c20:	e7ec      	b.n	1a005bfc <_free_r+0x24>
1a005c22:	4613      	mov	r3, r2
1a005c24:	685a      	ldr	r2, [r3, #4]
1a005c26:	b10a      	cbz	r2, 1a005c2c <_free_r+0x54>
1a005c28:	42a2      	cmp	r2, r4
1a005c2a:	d9fa      	bls.n	1a005c22 <_free_r+0x4a>
1a005c2c:	6819      	ldr	r1, [r3, #0]
1a005c2e:	1858      	adds	r0, r3, r1
1a005c30:	42a0      	cmp	r0, r4
1a005c32:	d10b      	bne.n	1a005c4c <_free_r+0x74>
1a005c34:	6820      	ldr	r0, [r4, #0]
1a005c36:	4401      	add	r1, r0
1a005c38:	1858      	adds	r0, r3, r1
1a005c3a:	4282      	cmp	r2, r0
1a005c3c:	6019      	str	r1, [r3, #0]
1a005c3e:	d1dd      	bne.n	1a005bfc <_free_r+0x24>
1a005c40:	6810      	ldr	r0, [r2, #0]
1a005c42:	6852      	ldr	r2, [r2, #4]
1a005c44:	605a      	str	r2, [r3, #4]
1a005c46:	4401      	add	r1, r0
1a005c48:	6019      	str	r1, [r3, #0]
1a005c4a:	e7d7      	b.n	1a005bfc <_free_r+0x24>
1a005c4c:	d902      	bls.n	1a005c54 <_free_r+0x7c>
1a005c4e:	230c      	movs	r3, #12
1a005c50:	602b      	str	r3, [r5, #0]
1a005c52:	e7d3      	b.n	1a005bfc <_free_r+0x24>
1a005c54:	6820      	ldr	r0, [r4, #0]
1a005c56:	1821      	adds	r1, r4, r0
1a005c58:	428a      	cmp	r2, r1
1a005c5a:	bf04      	itt	eq
1a005c5c:	6811      	ldreq	r1, [r2, #0]
1a005c5e:	6852      	ldreq	r2, [r2, #4]
1a005c60:	6062      	str	r2, [r4, #4]
1a005c62:	bf04      	itt	eq
1a005c64:	1809      	addeq	r1, r1, r0
1a005c66:	6021      	streq	r1, [r4, #0]
1a005c68:	605c      	str	r4, [r3, #4]
1a005c6a:	e7c7      	b.n	1a005bfc <_free_r+0x24>
1a005c6c:	bd38      	pop	{r3, r4, r5, pc}
1a005c6e:	bf00      	nop
1a005c70:	10004db4 	.word	0x10004db4

1a005c74 <_malloc_r>:
1a005c74:	b570      	push	{r4, r5, r6, lr}
1a005c76:	1ccd      	adds	r5, r1, #3
1a005c78:	f025 0503 	bic.w	r5, r5, #3
1a005c7c:	3508      	adds	r5, #8
1a005c7e:	2d0c      	cmp	r5, #12
1a005c80:	bf38      	it	cc
1a005c82:	250c      	movcc	r5, #12
1a005c84:	2d00      	cmp	r5, #0
1a005c86:	4606      	mov	r6, r0
1a005c88:	db01      	blt.n	1a005c8e <_malloc_r+0x1a>
1a005c8a:	42a9      	cmp	r1, r5
1a005c8c:	d903      	bls.n	1a005c96 <_malloc_r+0x22>
1a005c8e:	230c      	movs	r3, #12
1a005c90:	6033      	str	r3, [r6, #0]
1a005c92:	2000      	movs	r0, #0
1a005c94:	bd70      	pop	{r4, r5, r6, pc}
1a005c96:	f000 fa7b 	bl	1a006190 <__malloc_lock>
1a005c9a:	4a21      	ldr	r2, [pc, #132]	; (1a005d20 <_malloc_r+0xac>)
1a005c9c:	6814      	ldr	r4, [r2, #0]
1a005c9e:	4621      	mov	r1, r4
1a005ca0:	b991      	cbnz	r1, 1a005cc8 <_malloc_r+0x54>
1a005ca2:	4c20      	ldr	r4, [pc, #128]	; (1a005d24 <_malloc_r+0xb0>)
1a005ca4:	6823      	ldr	r3, [r4, #0]
1a005ca6:	b91b      	cbnz	r3, 1a005cb0 <_malloc_r+0x3c>
1a005ca8:	4630      	mov	r0, r6
1a005caa:	f7fc f95d 	bl	1a001f68 <_sbrk_r>
1a005cae:	6020      	str	r0, [r4, #0]
1a005cb0:	4629      	mov	r1, r5
1a005cb2:	4630      	mov	r0, r6
1a005cb4:	f7fc f958 	bl	1a001f68 <_sbrk_r>
1a005cb8:	1c43      	adds	r3, r0, #1
1a005cba:	d124      	bne.n	1a005d06 <_malloc_r+0x92>
1a005cbc:	230c      	movs	r3, #12
1a005cbe:	6033      	str	r3, [r6, #0]
1a005cc0:	4630      	mov	r0, r6
1a005cc2:	f000 fa66 	bl	1a006192 <__malloc_unlock>
1a005cc6:	e7e4      	b.n	1a005c92 <_malloc_r+0x1e>
1a005cc8:	680b      	ldr	r3, [r1, #0]
1a005cca:	1b5b      	subs	r3, r3, r5
1a005ccc:	d418      	bmi.n	1a005d00 <_malloc_r+0x8c>
1a005cce:	2b0b      	cmp	r3, #11
1a005cd0:	d90f      	bls.n	1a005cf2 <_malloc_r+0x7e>
1a005cd2:	600b      	str	r3, [r1, #0]
1a005cd4:	50cd      	str	r5, [r1, r3]
1a005cd6:	18cc      	adds	r4, r1, r3
1a005cd8:	4630      	mov	r0, r6
1a005cda:	f000 fa5a 	bl	1a006192 <__malloc_unlock>
1a005cde:	f104 000b 	add.w	r0, r4, #11
1a005ce2:	1d23      	adds	r3, r4, #4
1a005ce4:	f020 0007 	bic.w	r0, r0, #7
1a005ce8:	1ac3      	subs	r3, r0, r3
1a005cea:	d0d3      	beq.n	1a005c94 <_malloc_r+0x20>
1a005cec:	425a      	negs	r2, r3
1a005cee:	50e2      	str	r2, [r4, r3]
1a005cf0:	e7d0      	b.n	1a005c94 <_malloc_r+0x20>
1a005cf2:	428c      	cmp	r4, r1
1a005cf4:	684b      	ldr	r3, [r1, #4]
1a005cf6:	bf16      	itet	ne
1a005cf8:	6063      	strne	r3, [r4, #4]
1a005cfa:	6013      	streq	r3, [r2, #0]
1a005cfc:	460c      	movne	r4, r1
1a005cfe:	e7eb      	b.n	1a005cd8 <_malloc_r+0x64>
1a005d00:	460c      	mov	r4, r1
1a005d02:	6849      	ldr	r1, [r1, #4]
1a005d04:	e7cc      	b.n	1a005ca0 <_malloc_r+0x2c>
1a005d06:	1cc4      	adds	r4, r0, #3
1a005d08:	f024 0403 	bic.w	r4, r4, #3
1a005d0c:	42a0      	cmp	r0, r4
1a005d0e:	d005      	beq.n	1a005d1c <_malloc_r+0xa8>
1a005d10:	1a21      	subs	r1, r4, r0
1a005d12:	4630      	mov	r0, r6
1a005d14:	f7fc f928 	bl	1a001f68 <_sbrk_r>
1a005d18:	3001      	adds	r0, #1
1a005d1a:	d0cf      	beq.n	1a005cbc <_malloc_r+0x48>
1a005d1c:	6025      	str	r5, [r4, #0]
1a005d1e:	e7db      	b.n	1a005cd8 <_malloc_r+0x64>
1a005d20:	10004db4 	.word	0x10004db4
1a005d24:	10004db8 	.word	0x10004db8

1a005d28 <iprintf>:
1a005d28:	b40f      	push	{r0, r1, r2, r3}
1a005d2a:	4b0a      	ldr	r3, [pc, #40]	; (1a005d54 <iprintf+0x2c>)
1a005d2c:	b513      	push	{r0, r1, r4, lr}
1a005d2e:	681c      	ldr	r4, [r3, #0]
1a005d30:	b124      	cbz	r4, 1a005d3c <iprintf+0x14>
1a005d32:	69a3      	ldr	r3, [r4, #24]
1a005d34:	b913      	cbnz	r3, 1a005d3c <iprintf+0x14>
1a005d36:	4620      	mov	r0, r4
1a005d38:	f7ff fe8c 	bl	1a005a54 <__sinit>
1a005d3c:	ab05      	add	r3, sp, #20
1a005d3e:	9a04      	ldr	r2, [sp, #16]
1a005d40:	68a1      	ldr	r1, [r4, #8]
1a005d42:	9301      	str	r3, [sp, #4]
1a005d44:	4620      	mov	r0, r4
1a005d46:	f000 fa4f 	bl	1a0061e8 <_vfiprintf_r>
1a005d4a:	b002      	add	sp, #8
1a005d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a005d50:	b004      	add	sp, #16
1a005d52:	4770      	bx	lr
1a005d54:	100018bc 	.word	0x100018bc

1a005d58 <_puts_r>:
1a005d58:	b570      	push	{r4, r5, r6, lr}
1a005d5a:	460e      	mov	r6, r1
1a005d5c:	4605      	mov	r5, r0
1a005d5e:	b118      	cbz	r0, 1a005d68 <_puts_r+0x10>
1a005d60:	6983      	ldr	r3, [r0, #24]
1a005d62:	b90b      	cbnz	r3, 1a005d68 <_puts_r+0x10>
1a005d64:	f7ff fe76 	bl	1a005a54 <__sinit>
1a005d68:	69ab      	ldr	r3, [r5, #24]
1a005d6a:	68ac      	ldr	r4, [r5, #8]
1a005d6c:	b913      	cbnz	r3, 1a005d74 <_puts_r+0x1c>
1a005d6e:	4628      	mov	r0, r5
1a005d70:	f7ff fe70 	bl	1a005a54 <__sinit>
1a005d74:	4b23      	ldr	r3, [pc, #140]	; (1a005e04 <_puts_r+0xac>)
1a005d76:	429c      	cmp	r4, r3
1a005d78:	d117      	bne.n	1a005daa <_puts_r+0x52>
1a005d7a:	686c      	ldr	r4, [r5, #4]
1a005d7c:	89a3      	ldrh	r3, [r4, #12]
1a005d7e:	071b      	lsls	r3, r3, #28
1a005d80:	d51d      	bpl.n	1a005dbe <_puts_r+0x66>
1a005d82:	6923      	ldr	r3, [r4, #16]
1a005d84:	b1db      	cbz	r3, 1a005dbe <_puts_r+0x66>
1a005d86:	3e01      	subs	r6, #1
1a005d88:	68a3      	ldr	r3, [r4, #8]
1a005d8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a005d8e:	3b01      	subs	r3, #1
1a005d90:	60a3      	str	r3, [r4, #8]
1a005d92:	b9e9      	cbnz	r1, 1a005dd0 <_puts_r+0x78>
1a005d94:	2b00      	cmp	r3, #0
1a005d96:	da2e      	bge.n	1a005df6 <_puts_r+0x9e>
1a005d98:	4622      	mov	r2, r4
1a005d9a:	210a      	movs	r1, #10
1a005d9c:	4628      	mov	r0, r5
1a005d9e:	f000 f8d3 	bl	1a005f48 <__swbuf_r>
1a005da2:	3001      	adds	r0, #1
1a005da4:	d011      	beq.n	1a005dca <_puts_r+0x72>
1a005da6:	200a      	movs	r0, #10
1a005da8:	e011      	b.n	1a005dce <_puts_r+0x76>
1a005daa:	4b17      	ldr	r3, [pc, #92]	; (1a005e08 <_puts_r+0xb0>)
1a005dac:	429c      	cmp	r4, r3
1a005dae:	d101      	bne.n	1a005db4 <_puts_r+0x5c>
1a005db0:	68ac      	ldr	r4, [r5, #8]
1a005db2:	e7e3      	b.n	1a005d7c <_puts_r+0x24>
1a005db4:	4b15      	ldr	r3, [pc, #84]	; (1a005e0c <_puts_r+0xb4>)
1a005db6:	429c      	cmp	r4, r3
1a005db8:	bf08      	it	eq
1a005dba:	68ec      	ldreq	r4, [r5, #12]
1a005dbc:	e7de      	b.n	1a005d7c <_puts_r+0x24>
1a005dbe:	4621      	mov	r1, r4
1a005dc0:	4628      	mov	r0, r5
1a005dc2:	f000 f913 	bl	1a005fec <__swsetup_r>
1a005dc6:	2800      	cmp	r0, #0
1a005dc8:	d0dd      	beq.n	1a005d86 <_puts_r+0x2e>
1a005dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005dce:	bd70      	pop	{r4, r5, r6, pc}
1a005dd0:	2b00      	cmp	r3, #0
1a005dd2:	da04      	bge.n	1a005dde <_puts_r+0x86>
1a005dd4:	69a2      	ldr	r2, [r4, #24]
1a005dd6:	429a      	cmp	r2, r3
1a005dd8:	dc06      	bgt.n	1a005de8 <_puts_r+0x90>
1a005dda:	290a      	cmp	r1, #10
1a005ddc:	d004      	beq.n	1a005de8 <_puts_r+0x90>
1a005dde:	6823      	ldr	r3, [r4, #0]
1a005de0:	1c5a      	adds	r2, r3, #1
1a005de2:	6022      	str	r2, [r4, #0]
1a005de4:	7019      	strb	r1, [r3, #0]
1a005de6:	e7cf      	b.n	1a005d88 <_puts_r+0x30>
1a005de8:	4622      	mov	r2, r4
1a005dea:	4628      	mov	r0, r5
1a005dec:	f000 f8ac 	bl	1a005f48 <__swbuf_r>
1a005df0:	3001      	adds	r0, #1
1a005df2:	d1c9      	bne.n	1a005d88 <_puts_r+0x30>
1a005df4:	e7e9      	b.n	1a005dca <_puts_r+0x72>
1a005df6:	6823      	ldr	r3, [r4, #0]
1a005df8:	200a      	movs	r0, #10
1a005dfa:	1c5a      	adds	r2, r3, #1
1a005dfc:	6022      	str	r2, [r4, #0]
1a005dfe:	7018      	strb	r0, [r3, #0]
1a005e00:	e7e5      	b.n	1a005dce <_puts_r+0x76>
1a005e02:	bf00      	nop
1a005e04:	1a006f48 	.word	0x1a006f48
1a005e08:	1a006f68 	.word	0x1a006f68
1a005e0c:	1a006f28 	.word	0x1a006f28

1a005e10 <puts>:
1a005e10:	4b02      	ldr	r3, [pc, #8]	; (1a005e1c <puts+0xc>)
1a005e12:	4601      	mov	r1, r0
1a005e14:	6818      	ldr	r0, [r3, #0]
1a005e16:	f7ff bf9f 	b.w	1a005d58 <_puts_r>
1a005e1a:	bf00      	nop
1a005e1c:	100018bc 	.word	0x100018bc

1a005e20 <__sread>:
1a005e20:	b510      	push	{r4, lr}
1a005e22:	460c      	mov	r4, r1
1a005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005e28:	f7fc f862 	bl	1a001ef0 <_read_r>
1a005e2c:	2800      	cmp	r0, #0
1a005e2e:	bfab      	itete	ge
1a005e30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a005e32:	89a3      	ldrhlt	r3, [r4, #12]
1a005e34:	181b      	addge	r3, r3, r0
1a005e36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a005e3a:	bfac      	ite	ge
1a005e3c:	6563      	strge	r3, [r4, #84]	; 0x54
1a005e3e:	81a3      	strhlt	r3, [r4, #12]
1a005e40:	bd10      	pop	{r4, pc}

1a005e42 <__swrite>:
1a005e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005e46:	461f      	mov	r7, r3
1a005e48:	898b      	ldrh	r3, [r1, #12]
1a005e4a:	05db      	lsls	r3, r3, #23
1a005e4c:	4605      	mov	r5, r0
1a005e4e:	460c      	mov	r4, r1
1a005e50:	4616      	mov	r6, r2
1a005e52:	d505      	bpl.n	1a005e60 <__swrite+0x1e>
1a005e54:	2302      	movs	r3, #2
1a005e56:	2200      	movs	r2, #0
1a005e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005e5c:	f7fc f843 	bl	1a001ee6 <_lseek_r>
1a005e60:	89a3      	ldrh	r3, [r4, #12]
1a005e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005e66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a005e6a:	81a3      	strh	r3, [r4, #12]
1a005e6c:	4632      	mov	r2, r6
1a005e6e:	463b      	mov	r3, r7
1a005e70:	4628      	mov	r0, r5
1a005e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a005e76:	f7fc b862 	b.w	1a001f3e <_write_r>

1a005e7a <__sseek>:
1a005e7a:	b510      	push	{r4, lr}
1a005e7c:	460c      	mov	r4, r1
1a005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005e82:	f7fc f830 	bl	1a001ee6 <_lseek_r>
1a005e86:	1c43      	adds	r3, r0, #1
1a005e88:	89a3      	ldrh	r3, [r4, #12]
1a005e8a:	bf15      	itete	ne
1a005e8c:	6560      	strne	r0, [r4, #84]	; 0x54
1a005e8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a005e92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a005e96:	81a3      	strheq	r3, [r4, #12]
1a005e98:	bf18      	it	ne
1a005e9a:	81a3      	strhne	r3, [r4, #12]
1a005e9c:	bd10      	pop	{r4, pc}

1a005e9e <__sclose>:
1a005e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005ea2:	f7fc b80d 	b.w	1a001ec0 <_close_r>

1a005ea6 <strcat>:
1a005ea6:	b510      	push	{r4, lr}
1a005ea8:	4603      	mov	r3, r0
1a005eaa:	781a      	ldrb	r2, [r3, #0]
1a005eac:	1c5c      	adds	r4, r3, #1
1a005eae:	b93a      	cbnz	r2, 1a005ec0 <strcat+0x1a>
1a005eb0:	3b01      	subs	r3, #1
1a005eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
1a005eba:	2a00      	cmp	r2, #0
1a005ebc:	d1f9      	bne.n	1a005eb2 <strcat+0xc>
1a005ebe:	bd10      	pop	{r4, pc}
1a005ec0:	4623      	mov	r3, r4
1a005ec2:	e7f2      	b.n	1a005eaa <strcat+0x4>

1a005ec4 <strchr>:
1a005ec4:	b2c9      	uxtb	r1, r1
1a005ec6:	4603      	mov	r3, r0
1a005ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005ecc:	b11a      	cbz	r2, 1a005ed6 <strchr+0x12>
1a005ece:	428a      	cmp	r2, r1
1a005ed0:	d1f9      	bne.n	1a005ec6 <strchr+0x2>
1a005ed2:	4618      	mov	r0, r3
1a005ed4:	4770      	bx	lr
1a005ed6:	2900      	cmp	r1, #0
1a005ed8:	bf18      	it	ne
1a005eda:	2300      	movne	r3, #0
1a005edc:	e7f9      	b.n	1a005ed2 <strchr+0xe>

1a005ede <strcmp>:
1a005ede:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005ee6:	2a01      	cmp	r2, #1
1a005ee8:	bf28      	it	cs
1a005eea:	429a      	cmpcs	r2, r3
1a005eec:	d0f7      	beq.n	1a005ede <strcmp>
1a005eee:	1ad0      	subs	r0, r2, r3
1a005ef0:	4770      	bx	lr

1a005ef2 <strcpy>:
1a005ef2:	4603      	mov	r3, r0
1a005ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
1a005ef8:	f803 2b01 	strb.w	r2, [r3], #1
1a005efc:	2a00      	cmp	r2, #0
1a005efe:	d1f9      	bne.n	1a005ef4 <strcpy+0x2>
1a005f00:	4770      	bx	lr

1a005f02 <strlen>:
1a005f02:	4603      	mov	r3, r0
1a005f04:	f813 2b01 	ldrb.w	r2, [r3], #1
1a005f08:	2a00      	cmp	r2, #0
1a005f0a:	d1fb      	bne.n	1a005f04 <strlen+0x2>
1a005f0c:	1a18      	subs	r0, r3, r0
1a005f0e:	3801      	subs	r0, #1
1a005f10:	4770      	bx	lr

1a005f12 <strstr>:
1a005f12:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005f14:	7803      	ldrb	r3, [r0, #0]
1a005f16:	b17b      	cbz	r3, 1a005f38 <strstr+0x26>
1a005f18:	4604      	mov	r4, r0
1a005f1a:	7823      	ldrb	r3, [r4, #0]
1a005f1c:	4620      	mov	r0, r4
1a005f1e:	1c66      	adds	r6, r4, #1
1a005f20:	b17b      	cbz	r3, 1a005f42 <strstr+0x30>
1a005f22:	1e4a      	subs	r2, r1, #1
1a005f24:	1e63      	subs	r3, r4, #1
1a005f26:	f812 5f01 	ldrb.w	r5, [r2, #1]!
1a005f2a:	b14d      	cbz	r5, 1a005f40 <strstr+0x2e>
1a005f2c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a005f30:	42af      	cmp	r7, r5
1a005f32:	4634      	mov	r4, r6
1a005f34:	d0f7      	beq.n	1a005f26 <strstr+0x14>
1a005f36:	e7f0      	b.n	1a005f1a <strstr+0x8>
1a005f38:	780b      	ldrb	r3, [r1, #0]
1a005f3a:	2b00      	cmp	r3, #0
1a005f3c:	bf18      	it	ne
1a005f3e:	2000      	movne	r0, #0
1a005f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005f42:	4618      	mov	r0, r3
1a005f44:	e7fc      	b.n	1a005f40 <strstr+0x2e>
1a005f46:	Address 0x000000001a005f46 is out of bounds.


1a005f48 <__swbuf_r>:
1a005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005f4a:	460e      	mov	r6, r1
1a005f4c:	4614      	mov	r4, r2
1a005f4e:	4605      	mov	r5, r0
1a005f50:	b118      	cbz	r0, 1a005f5a <__swbuf_r+0x12>
1a005f52:	6983      	ldr	r3, [r0, #24]
1a005f54:	b90b      	cbnz	r3, 1a005f5a <__swbuf_r+0x12>
1a005f56:	f7ff fd7d 	bl	1a005a54 <__sinit>
1a005f5a:	4b21      	ldr	r3, [pc, #132]	; (1a005fe0 <__swbuf_r+0x98>)
1a005f5c:	429c      	cmp	r4, r3
1a005f5e:	d12a      	bne.n	1a005fb6 <__swbuf_r+0x6e>
1a005f60:	686c      	ldr	r4, [r5, #4]
1a005f62:	69a3      	ldr	r3, [r4, #24]
1a005f64:	60a3      	str	r3, [r4, #8]
1a005f66:	89a3      	ldrh	r3, [r4, #12]
1a005f68:	071a      	lsls	r2, r3, #28
1a005f6a:	d52e      	bpl.n	1a005fca <__swbuf_r+0x82>
1a005f6c:	6923      	ldr	r3, [r4, #16]
1a005f6e:	b363      	cbz	r3, 1a005fca <__swbuf_r+0x82>
1a005f70:	6923      	ldr	r3, [r4, #16]
1a005f72:	6820      	ldr	r0, [r4, #0]
1a005f74:	1ac0      	subs	r0, r0, r3
1a005f76:	6963      	ldr	r3, [r4, #20]
1a005f78:	b2f6      	uxtb	r6, r6
1a005f7a:	4283      	cmp	r3, r0
1a005f7c:	4637      	mov	r7, r6
1a005f7e:	dc04      	bgt.n	1a005f8a <__swbuf_r+0x42>
1a005f80:	4621      	mov	r1, r4
1a005f82:	4628      	mov	r0, r5
1a005f84:	f7ff fcfc 	bl	1a005980 <_fflush_r>
1a005f88:	bb28      	cbnz	r0, 1a005fd6 <__swbuf_r+0x8e>
1a005f8a:	68a3      	ldr	r3, [r4, #8]
1a005f8c:	3b01      	subs	r3, #1
1a005f8e:	60a3      	str	r3, [r4, #8]
1a005f90:	6823      	ldr	r3, [r4, #0]
1a005f92:	1c5a      	adds	r2, r3, #1
1a005f94:	6022      	str	r2, [r4, #0]
1a005f96:	701e      	strb	r6, [r3, #0]
1a005f98:	6963      	ldr	r3, [r4, #20]
1a005f9a:	3001      	adds	r0, #1
1a005f9c:	4283      	cmp	r3, r0
1a005f9e:	d004      	beq.n	1a005faa <__swbuf_r+0x62>
1a005fa0:	89a3      	ldrh	r3, [r4, #12]
1a005fa2:	07db      	lsls	r3, r3, #31
1a005fa4:	d519      	bpl.n	1a005fda <__swbuf_r+0x92>
1a005fa6:	2e0a      	cmp	r6, #10
1a005fa8:	d117      	bne.n	1a005fda <__swbuf_r+0x92>
1a005faa:	4621      	mov	r1, r4
1a005fac:	4628      	mov	r0, r5
1a005fae:	f7ff fce7 	bl	1a005980 <_fflush_r>
1a005fb2:	b190      	cbz	r0, 1a005fda <__swbuf_r+0x92>
1a005fb4:	e00f      	b.n	1a005fd6 <__swbuf_r+0x8e>
1a005fb6:	4b0b      	ldr	r3, [pc, #44]	; (1a005fe4 <__swbuf_r+0x9c>)
1a005fb8:	429c      	cmp	r4, r3
1a005fba:	d101      	bne.n	1a005fc0 <__swbuf_r+0x78>
1a005fbc:	68ac      	ldr	r4, [r5, #8]
1a005fbe:	e7d0      	b.n	1a005f62 <__swbuf_r+0x1a>
1a005fc0:	4b09      	ldr	r3, [pc, #36]	; (1a005fe8 <__swbuf_r+0xa0>)
1a005fc2:	429c      	cmp	r4, r3
1a005fc4:	bf08      	it	eq
1a005fc6:	68ec      	ldreq	r4, [r5, #12]
1a005fc8:	e7cb      	b.n	1a005f62 <__swbuf_r+0x1a>
1a005fca:	4621      	mov	r1, r4
1a005fcc:	4628      	mov	r0, r5
1a005fce:	f000 f80d 	bl	1a005fec <__swsetup_r>
1a005fd2:	2800      	cmp	r0, #0
1a005fd4:	d0cc      	beq.n	1a005f70 <__swbuf_r+0x28>
1a005fd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a005fda:	4638      	mov	r0, r7
1a005fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005fde:	bf00      	nop
1a005fe0:	1a006f48 	.word	0x1a006f48
1a005fe4:	1a006f68 	.word	0x1a006f68
1a005fe8:	1a006f28 	.word	0x1a006f28

1a005fec <__swsetup_r>:
1a005fec:	4b32      	ldr	r3, [pc, #200]	; (1a0060b8 <__swsetup_r+0xcc>)
1a005fee:	b570      	push	{r4, r5, r6, lr}
1a005ff0:	681d      	ldr	r5, [r3, #0]
1a005ff2:	4606      	mov	r6, r0
1a005ff4:	460c      	mov	r4, r1
1a005ff6:	b125      	cbz	r5, 1a006002 <__swsetup_r+0x16>
1a005ff8:	69ab      	ldr	r3, [r5, #24]
1a005ffa:	b913      	cbnz	r3, 1a006002 <__swsetup_r+0x16>
1a005ffc:	4628      	mov	r0, r5
1a005ffe:	f7ff fd29 	bl	1a005a54 <__sinit>
1a006002:	4b2e      	ldr	r3, [pc, #184]	; (1a0060bc <__swsetup_r+0xd0>)
1a006004:	429c      	cmp	r4, r3
1a006006:	d10f      	bne.n	1a006028 <__swsetup_r+0x3c>
1a006008:	686c      	ldr	r4, [r5, #4]
1a00600a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00600e:	b29a      	uxth	r2, r3
1a006010:	0715      	lsls	r5, r2, #28
1a006012:	d42c      	bmi.n	1a00606e <__swsetup_r+0x82>
1a006014:	06d0      	lsls	r0, r2, #27
1a006016:	d411      	bmi.n	1a00603c <__swsetup_r+0x50>
1a006018:	2209      	movs	r2, #9
1a00601a:	6032      	str	r2, [r6, #0]
1a00601c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006020:	81a3      	strh	r3, [r4, #12]
1a006022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006026:	e03e      	b.n	1a0060a6 <__swsetup_r+0xba>
1a006028:	4b25      	ldr	r3, [pc, #148]	; (1a0060c0 <__swsetup_r+0xd4>)
1a00602a:	429c      	cmp	r4, r3
1a00602c:	d101      	bne.n	1a006032 <__swsetup_r+0x46>
1a00602e:	68ac      	ldr	r4, [r5, #8]
1a006030:	e7eb      	b.n	1a00600a <__swsetup_r+0x1e>
1a006032:	4b24      	ldr	r3, [pc, #144]	; (1a0060c4 <__swsetup_r+0xd8>)
1a006034:	429c      	cmp	r4, r3
1a006036:	bf08      	it	eq
1a006038:	68ec      	ldreq	r4, [r5, #12]
1a00603a:	e7e6      	b.n	1a00600a <__swsetup_r+0x1e>
1a00603c:	0751      	lsls	r1, r2, #29
1a00603e:	d512      	bpl.n	1a006066 <__swsetup_r+0x7a>
1a006040:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a006042:	b141      	cbz	r1, 1a006056 <__swsetup_r+0x6a>
1a006044:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a006048:	4299      	cmp	r1, r3
1a00604a:	d002      	beq.n	1a006052 <__swsetup_r+0x66>
1a00604c:	4630      	mov	r0, r6
1a00604e:	f7ff fdc3 	bl	1a005bd8 <_free_r>
1a006052:	2300      	movs	r3, #0
1a006054:	6363      	str	r3, [r4, #52]	; 0x34
1a006056:	89a3      	ldrh	r3, [r4, #12]
1a006058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a00605c:	81a3      	strh	r3, [r4, #12]
1a00605e:	2300      	movs	r3, #0
1a006060:	6063      	str	r3, [r4, #4]
1a006062:	6923      	ldr	r3, [r4, #16]
1a006064:	6023      	str	r3, [r4, #0]
1a006066:	89a3      	ldrh	r3, [r4, #12]
1a006068:	f043 0308 	orr.w	r3, r3, #8
1a00606c:	81a3      	strh	r3, [r4, #12]
1a00606e:	6923      	ldr	r3, [r4, #16]
1a006070:	b94b      	cbnz	r3, 1a006086 <__swsetup_r+0x9a>
1a006072:	89a3      	ldrh	r3, [r4, #12]
1a006074:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00607c:	d003      	beq.n	1a006086 <__swsetup_r+0x9a>
1a00607e:	4621      	mov	r1, r4
1a006080:	4630      	mov	r0, r6
1a006082:	f000 f845 	bl	1a006110 <__smakebuf_r>
1a006086:	89a2      	ldrh	r2, [r4, #12]
1a006088:	f012 0301 	ands.w	r3, r2, #1
1a00608c:	d00c      	beq.n	1a0060a8 <__swsetup_r+0xbc>
1a00608e:	2300      	movs	r3, #0
1a006090:	60a3      	str	r3, [r4, #8]
1a006092:	6963      	ldr	r3, [r4, #20]
1a006094:	425b      	negs	r3, r3
1a006096:	61a3      	str	r3, [r4, #24]
1a006098:	6923      	ldr	r3, [r4, #16]
1a00609a:	b953      	cbnz	r3, 1a0060b2 <__swsetup_r+0xc6>
1a00609c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0060a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0060a4:	d1ba      	bne.n	1a00601c <__swsetup_r+0x30>
1a0060a6:	bd70      	pop	{r4, r5, r6, pc}
1a0060a8:	0792      	lsls	r2, r2, #30
1a0060aa:	bf58      	it	pl
1a0060ac:	6963      	ldrpl	r3, [r4, #20]
1a0060ae:	60a3      	str	r3, [r4, #8]
1a0060b0:	e7f2      	b.n	1a006098 <__swsetup_r+0xac>
1a0060b2:	2000      	movs	r0, #0
1a0060b4:	e7f7      	b.n	1a0060a6 <__swsetup_r+0xba>
1a0060b6:	bf00      	nop
1a0060b8:	100018bc 	.word	0x100018bc
1a0060bc:	1a006f48 	.word	0x1a006f48
1a0060c0:	1a006f68 	.word	0x1a006f68
1a0060c4:	1a006f28 	.word	0x1a006f28

1a0060c8 <__swhatbuf_r>:
1a0060c8:	b570      	push	{r4, r5, r6, lr}
1a0060ca:	460e      	mov	r6, r1
1a0060cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0060d0:	2900      	cmp	r1, #0
1a0060d2:	b096      	sub	sp, #88	; 0x58
1a0060d4:	4614      	mov	r4, r2
1a0060d6:	461d      	mov	r5, r3
1a0060d8:	da07      	bge.n	1a0060ea <__swhatbuf_r+0x22>
1a0060da:	2300      	movs	r3, #0
1a0060dc:	602b      	str	r3, [r5, #0]
1a0060de:	89b3      	ldrh	r3, [r6, #12]
1a0060e0:	061a      	lsls	r2, r3, #24
1a0060e2:	d410      	bmi.n	1a006106 <__swhatbuf_r+0x3e>
1a0060e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0060e8:	e00e      	b.n	1a006108 <__swhatbuf_r+0x40>
1a0060ea:	466a      	mov	r2, sp
1a0060ec:	f7fb feed 	bl	1a001eca <_fstat_r>
1a0060f0:	2800      	cmp	r0, #0
1a0060f2:	dbf2      	blt.n	1a0060da <__swhatbuf_r+0x12>
1a0060f4:	9a01      	ldr	r2, [sp, #4]
1a0060f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0060fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0060fe:	425a      	negs	r2, r3
1a006100:	415a      	adcs	r2, r3
1a006102:	602a      	str	r2, [r5, #0]
1a006104:	e7ee      	b.n	1a0060e4 <__swhatbuf_r+0x1c>
1a006106:	2340      	movs	r3, #64	; 0x40
1a006108:	2000      	movs	r0, #0
1a00610a:	6023      	str	r3, [r4, #0]
1a00610c:	b016      	add	sp, #88	; 0x58
1a00610e:	bd70      	pop	{r4, r5, r6, pc}

1a006110 <__smakebuf_r>:
1a006110:	898b      	ldrh	r3, [r1, #12]
1a006112:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a006114:	079d      	lsls	r5, r3, #30
1a006116:	4606      	mov	r6, r0
1a006118:	460c      	mov	r4, r1
1a00611a:	d507      	bpl.n	1a00612c <__smakebuf_r+0x1c>
1a00611c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a006120:	6023      	str	r3, [r4, #0]
1a006122:	6123      	str	r3, [r4, #16]
1a006124:	2301      	movs	r3, #1
1a006126:	6163      	str	r3, [r4, #20]
1a006128:	b002      	add	sp, #8
1a00612a:	bd70      	pop	{r4, r5, r6, pc}
1a00612c:	ab01      	add	r3, sp, #4
1a00612e:	466a      	mov	r2, sp
1a006130:	f7ff ffca 	bl	1a0060c8 <__swhatbuf_r>
1a006134:	9900      	ldr	r1, [sp, #0]
1a006136:	4605      	mov	r5, r0
1a006138:	4630      	mov	r0, r6
1a00613a:	f7ff fd9b 	bl	1a005c74 <_malloc_r>
1a00613e:	b948      	cbnz	r0, 1a006154 <__smakebuf_r+0x44>
1a006140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006144:	059a      	lsls	r2, r3, #22
1a006146:	d4ef      	bmi.n	1a006128 <__smakebuf_r+0x18>
1a006148:	f023 0303 	bic.w	r3, r3, #3
1a00614c:	f043 0302 	orr.w	r3, r3, #2
1a006150:	81a3      	strh	r3, [r4, #12]
1a006152:	e7e3      	b.n	1a00611c <__smakebuf_r+0xc>
1a006154:	4b0d      	ldr	r3, [pc, #52]	; (1a00618c <__smakebuf_r+0x7c>)
1a006156:	62b3      	str	r3, [r6, #40]	; 0x28
1a006158:	89a3      	ldrh	r3, [r4, #12]
1a00615a:	6020      	str	r0, [r4, #0]
1a00615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006160:	81a3      	strh	r3, [r4, #12]
1a006162:	9b00      	ldr	r3, [sp, #0]
1a006164:	6163      	str	r3, [r4, #20]
1a006166:	9b01      	ldr	r3, [sp, #4]
1a006168:	6120      	str	r0, [r4, #16]
1a00616a:	b15b      	cbz	r3, 1a006184 <__smakebuf_r+0x74>
1a00616c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006170:	4630      	mov	r0, r6
1a006172:	f7fb feaf 	bl	1a001ed4 <_isatty_r>
1a006176:	b128      	cbz	r0, 1a006184 <__smakebuf_r+0x74>
1a006178:	89a3      	ldrh	r3, [r4, #12]
1a00617a:	f023 0303 	bic.w	r3, r3, #3
1a00617e:	f043 0301 	orr.w	r3, r3, #1
1a006182:	81a3      	strh	r3, [r4, #12]
1a006184:	89a3      	ldrh	r3, [r4, #12]
1a006186:	431d      	orrs	r5, r3
1a006188:	81a5      	strh	r5, [r4, #12]
1a00618a:	e7cd      	b.n	1a006128 <__smakebuf_r+0x18>
1a00618c:	1a005a1d 	.word	0x1a005a1d

1a006190 <__malloc_lock>:
1a006190:	4770      	bx	lr

1a006192 <__malloc_unlock>:
1a006192:	4770      	bx	lr

1a006194 <__sfputc_r>:
1a006194:	6893      	ldr	r3, [r2, #8]
1a006196:	3b01      	subs	r3, #1
1a006198:	2b00      	cmp	r3, #0
1a00619a:	b410      	push	{r4}
1a00619c:	6093      	str	r3, [r2, #8]
1a00619e:	da08      	bge.n	1a0061b2 <__sfputc_r+0x1e>
1a0061a0:	6994      	ldr	r4, [r2, #24]
1a0061a2:	42a3      	cmp	r3, r4
1a0061a4:	db01      	blt.n	1a0061aa <__sfputc_r+0x16>
1a0061a6:	290a      	cmp	r1, #10
1a0061a8:	d103      	bne.n	1a0061b2 <__sfputc_r+0x1e>
1a0061aa:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0061ae:	f7ff becb 	b.w	1a005f48 <__swbuf_r>
1a0061b2:	6813      	ldr	r3, [r2, #0]
1a0061b4:	1c58      	adds	r0, r3, #1
1a0061b6:	6010      	str	r0, [r2, #0]
1a0061b8:	7019      	strb	r1, [r3, #0]
1a0061ba:	4608      	mov	r0, r1
1a0061bc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0061c0:	4770      	bx	lr

1a0061c2 <__sfputs_r>:
1a0061c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0061c4:	4606      	mov	r6, r0
1a0061c6:	460f      	mov	r7, r1
1a0061c8:	4614      	mov	r4, r2
1a0061ca:	18d5      	adds	r5, r2, r3
1a0061cc:	42ac      	cmp	r4, r5
1a0061ce:	d101      	bne.n	1a0061d4 <__sfputs_r+0x12>
1a0061d0:	2000      	movs	r0, #0
1a0061d2:	e007      	b.n	1a0061e4 <__sfputs_r+0x22>
1a0061d4:	463a      	mov	r2, r7
1a0061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0061da:	4630      	mov	r0, r6
1a0061dc:	f7ff ffda 	bl	1a006194 <__sfputc_r>
1a0061e0:	1c43      	adds	r3, r0, #1
1a0061e2:	d1f3      	bne.n	1a0061cc <__sfputs_r+0xa>
1a0061e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0061e6:	Address 0x000000001a0061e6 is out of bounds.


1a0061e8 <_vfiprintf_r>:
1a0061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0061ec:	460c      	mov	r4, r1
1a0061ee:	b09d      	sub	sp, #116	; 0x74
1a0061f0:	4617      	mov	r7, r2
1a0061f2:	461d      	mov	r5, r3
1a0061f4:	4606      	mov	r6, r0
1a0061f6:	b118      	cbz	r0, 1a006200 <_vfiprintf_r+0x18>
1a0061f8:	6983      	ldr	r3, [r0, #24]
1a0061fa:	b90b      	cbnz	r3, 1a006200 <_vfiprintf_r+0x18>
1a0061fc:	f7ff fc2a 	bl	1a005a54 <__sinit>
1a006200:	4b7c      	ldr	r3, [pc, #496]	; (1a0063f4 <_vfiprintf_r+0x20c>)
1a006202:	429c      	cmp	r4, r3
1a006204:	d158      	bne.n	1a0062b8 <_vfiprintf_r+0xd0>
1a006206:	6874      	ldr	r4, [r6, #4]
1a006208:	89a3      	ldrh	r3, [r4, #12]
1a00620a:	0718      	lsls	r0, r3, #28
1a00620c:	d55e      	bpl.n	1a0062cc <_vfiprintf_r+0xe4>
1a00620e:	6923      	ldr	r3, [r4, #16]
1a006210:	2b00      	cmp	r3, #0
1a006212:	d05b      	beq.n	1a0062cc <_vfiprintf_r+0xe4>
1a006214:	2300      	movs	r3, #0
1a006216:	9309      	str	r3, [sp, #36]	; 0x24
1a006218:	2320      	movs	r3, #32
1a00621a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00621e:	2330      	movs	r3, #48	; 0x30
1a006220:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a006224:	9503      	str	r5, [sp, #12]
1a006226:	f04f 0b01 	mov.w	fp, #1
1a00622a:	46b8      	mov	r8, r7
1a00622c:	4645      	mov	r5, r8
1a00622e:	f815 3b01 	ldrb.w	r3, [r5], #1
1a006232:	b10b      	cbz	r3, 1a006238 <_vfiprintf_r+0x50>
1a006234:	2b25      	cmp	r3, #37	; 0x25
1a006236:	d154      	bne.n	1a0062e2 <_vfiprintf_r+0xfa>
1a006238:	ebb8 0a07 	subs.w	sl, r8, r7
1a00623c:	d00b      	beq.n	1a006256 <_vfiprintf_r+0x6e>
1a00623e:	4653      	mov	r3, sl
1a006240:	463a      	mov	r2, r7
1a006242:	4621      	mov	r1, r4
1a006244:	4630      	mov	r0, r6
1a006246:	f7ff ffbc 	bl	1a0061c2 <__sfputs_r>
1a00624a:	3001      	adds	r0, #1
1a00624c:	f000 80c2 	beq.w	1a0063d4 <_vfiprintf_r+0x1ec>
1a006250:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006252:	4453      	add	r3, sl
1a006254:	9309      	str	r3, [sp, #36]	; 0x24
1a006256:	f898 3000 	ldrb.w	r3, [r8]
1a00625a:	2b00      	cmp	r3, #0
1a00625c:	f000 80ba 	beq.w	1a0063d4 <_vfiprintf_r+0x1ec>
1a006260:	2300      	movs	r3, #0
1a006262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a006266:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00626a:	9304      	str	r3, [sp, #16]
1a00626c:	9307      	str	r3, [sp, #28]
1a00626e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a006272:	931a      	str	r3, [sp, #104]	; 0x68
1a006274:	46a8      	mov	r8, r5
1a006276:	2205      	movs	r2, #5
1a006278:	f818 1b01 	ldrb.w	r1, [r8], #1
1a00627c:	485e      	ldr	r0, [pc, #376]	; (1a0063f8 <_vfiprintf_r+0x210>)
1a00627e:	f000 fa57 	bl	1a006730 <memchr>
1a006282:	9b04      	ldr	r3, [sp, #16]
1a006284:	bb78      	cbnz	r0, 1a0062e6 <_vfiprintf_r+0xfe>
1a006286:	06d9      	lsls	r1, r3, #27
1a006288:	bf44      	itt	mi
1a00628a:	2220      	movmi	r2, #32
1a00628c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a006290:	071a      	lsls	r2, r3, #28
1a006292:	bf44      	itt	mi
1a006294:	222b      	movmi	r2, #43	; 0x2b
1a006296:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00629a:	782a      	ldrb	r2, [r5, #0]
1a00629c:	2a2a      	cmp	r2, #42	; 0x2a
1a00629e:	d02a      	beq.n	1a0062f6 <_vfiprintf_r+0x10e>
1a0062a0:	9a07      	ldr	r2, [sp, #28]
1a0062a2:	46a8      	mov	r8, r5
1a0062a4:	2000      	movs	r0, #0
1a0062a6:	250a      	movs	r5, #10
1a0062a8:	4641      	mov	r1, r8
1a0062aa:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0062ae:	3b30      	subs	r3, #48	; 0x30
1a0062b0:	2b09      	cmp	r3, #9
1a0062b2:	d969      	bls.n	1a006388 <_vfiprintf_r+0x1a0>
1a0062b4:	b360      	cbz	r0, 1a006310 <_vfiprintf_r+0x128>
1a0062b6:	e024      	b.n	1a006302 <_vfiprintf_r+0x11a>
1a0062b8:	4b50      	ldr	r3, [pc, #320]	; (1a0063fc <_vfiprintf_r+0x214>)
1a0062ba:	429c      	cmp	r4, r3
1a0062bc:	d101      	bne.n	1a0062c2 <_vfiprintf_r+0xda>
1a0062be:	68b4      	ldr	r4, [r6, #8]
1a0062c0:	e7a2      	b.n	1a006208 <_vfiprintf_r+0x20>
1a0062c2:	4b4f      	ldr	r3, [pc, #316]	; (1a006400 <_vfiprintf_r+0x218>)
1a0062c4:	429c      	cmp	r4, r3
1a0062c6:	bf08      	it	eq
1a0062c8:	68f4      	ldreq	r4, [r6, #12]
1a0062ca:	e79d      	b.n	1a006208 <_vfiprintf_r+0x20>
1a0062cc:	4621      	mov	r1, r4
1a0062ce:	4630      	mov	r0, r6
1a0062d0:	f7ff fe8c 	bl	1a005fec <__swsetup_r>
1a0062d4:	2800      	cmp	r0, #0
1a0062d6:	d09d      	beq.n	1a006214 <_vfiprintf_r+0x2c>
1a0062d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0062dc:	b01d      	add	sp, #116	; 0x74
1a0062de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0062e2:	46a8      	mov	r8, r5
1a0062e4:	e7a2      	b.n	1a00622c <_vfiprintf_r+0x44>
1a0062e6:	4a44      	ldr	r2, [pc, #272]	; (1a0063f8 <_vfiprintf_r+0x210>)
1a0062e8:	1a80      	subs	r0, r0, r2
1a0062ea:	fa0b f000 	lsl.w	r0, fp, r0
1a0062ee:	4318      	orrs	r0, r3
1a0062f0:	9004      	str	r0, [sp, #16]
1a0062f2:	4645      	mov	r5, r8
1a0062f4:	e7be      	b.n	1a006274 <_vfiprintf_r+0x8c>
1a0062f6:	9a03      	ldr	r2, [sp, #12]
1a0062f8:	1d11      	adds	r1, r2, #4
1a0062fa:	6812      	ldr	r2, [r2, #0]
1a0062fc:	9103      	str	r1, [sp, #12]
1a0062fe:	2a00      	cmp	r2, #0
1a006300:	db01      	blt.n	1a006306 <_vfiprintf_r+0x11e>
1a006302:	9207      	str	r2, [sp, #28]
1a006304:	e004      	b.n	1a006310 <_vfiprintf_r+0x128>
1a006306:	4252      	negs	r2, r2
1a006308:	f043 0302 	orr.w	r3, r3, #2
1a00630c:	9207      	str	r2, [sp, #28]
1a00630e:	9304      	str	r3, [sp, #16]
1a006310:	f898 3000 	ldrb.w	r3, [r8]
1a006314:	2b2e      	cmp	r3, #46	; 0x2e
1a006316:	d10e      	bne.n	1a006336 <_vfiprintf_r+0x14e>
1a006318:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00631c:	2b2a      	cmp	r3, #42	; 0x2a
1a00631e:	d138      	bne.n	1a006392 <_vfiprintf_r+0x1aa>
1a006320:	9b03      	ldr	r3, [sp, #12]
1a006322:	1d1a      	adds	r2, r3, #4
1a006324:	681b      	ldr	r3, [r3, #0]
1a006326:	9203      	str	r2, [sp, #12]
1a006328:	2b00      	cmp	r3, #0
1a00632a:	bfb8      	it	lt
1a00632c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a006330:	f108 0802 	add.w	r8, r8, #2
1a006334:	9305      	str	r3, [sp, #20]
1a006336:	4d33      	ldr	r5, [pc, #204]	; (1a006404 <_vfiprintf_r+0x21c>)
1a006338:	f898 1000 	ldrb.w	r1, [r8]
1a00633c:	2203      	movs	r2, #3
1a00633e:	4628      	mov	r0, r5
1a006340:	f000 f9f6 	bl	1a006730 <memchr>
1a006344:	b140      	cbz	r0, 1a006358 <_vfiprintf_r+0x170>
1a006346:	2340      	movs	r3, #64	; 0x40
1a006348:	1b40      	subs	r0, r0, r5
1a00634a:	fa03 f000 	lsl.w	r0, r3, r0
1a00634e:	9b04      	ldr	r3, [sp, #16]
1a006350:	4303      	orrs	r3, r0
1a006352:	f108 0801 	add.w	r8, r8, #1
1a006356:	9304      	str	r3, [sp, #16]
1a006358:	f898 1000 	ldrb.w	r1, [r8]
1a00635c:	482a      	ldr	r0, [pc, #168]	; (1a006408 <_vfiprintf_r+0x220>)
1a00635e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a006362:	2206      	movs	r2, #6
1a006364:	f108 0701 	add.w	r7, r8, #1
1a006368:	f000 f9e2 	bl	1a006730 <memchr>
1a00636c:	2800      	cmp	r0, #0
1a00636e:	d037      	beq.n	1a0063e0 <_vfiprintf_r+0x1f8>
1a006370:	4b26      	ldr	r3, [pc, #152]	; (1a00640c <_vfiprintf_r+0x224>)
1a006372:	bb1b      	cbnz	r3, 1a0063bc <_vfiprintf_r+0x1d4>
1a006374:	9b03      	ldr	r3, [sp, #12]
1a006376:	3307      	adds	r3, #7
1a006378:	f023 0307 	bic.w	r3, r3, #7
1a00637c:	3308      	adds	r3, #8
1a00637e:	9303      	str	r3, [sp, #12]
1a006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a006382:	444b      	add	r3, r9
1a006384:	9309      	str	r3, [sp, #36]	; 0x24
1a006386:	e750      	b.n	1a00622a <_vfiprintf_r+0x42>
1a006388:	fb05 3202 	mla	r2, r5, r2, r3
1a00638c:	2001      	movs	r0, #1
1a00638e:	4688      	mov	r8, r1
1a006390:	e78a      	b.n	1a0062a8 <_vfiprintf_r+0xc0>
1a006392:	2300      	movs	r3, #0
1a006394:	f108 0801 	add.w	r8, r8, #1
1a006398:	9305      	str	r3, [sp, #20]
1a00639a:	4619      	mov	r1, r3
1a00639c:	250a      	movs	r5, #10
1a00639e:	4640      	mov	r0, r8
1a0063a0:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0063a4:	3a30      	subs	r2, #48	; 0x30
1a0063a6:	2a09      	cmp	r2, #9
1a0063a8:	d903      	bls.n	1a0063b2 <_vfiprintf_r+0x1ca>
1a0063aa:	2b00      	cmp	r3, #0
1a0063ac:	d0c3      	beq.n	1a006336 <_vfiprintf_r+0x14e>
1a0063ae:	9105      	str	r1, [sp, #20]
1a0063b0:	e7c1      	b.n	1a006336 <_vfiprintf_r+0x14e>
1a0063b2:	fb05 2101 	mla	r1, r5, r1, r2
1a0063b6:	2301      	movs	r3, #1
1a0063b8:	4680      	mov	r8, r0
1a0063ba:	e7f0      	b.n	1a00639e <_vfiprintf_r+0x1b6>
1a0063bc:	ab03      	add	r3, sp, #12
1a0063be:	9300      	str	r3, [sp, #0]
1a0063c0:	4622      	mov	r2, r4
1a0063c2:	4b13      	ldr	r3, [pc, #76]	; (1a006410 <_vfiprintf_r+0x228>)
1a0063c4:	a904      	add	r1, sp, #16
1a0063c6:	4630      	mov	r0, r6
1a0063c8:	f3af 8000 	nop.w
1a0063cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0063d0:	4681      	mov	r9, r0
1a0063d2:	d1d5      	bne.n	1a006380 <_vfiprintf_r+0x198>
1a0063d4:	89a3      	ldrh	r3, [r4, #12]
1a0063d6:	065b      	lsls	r3, r3, #25
1a0063d8:	f53f af7e 	bmi.w	1a0062d8 <_vfiprintf_r+0xf0>
1a0063dc:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0063de:	e77d      	b.n	1a0062dc <_vfiprintf_r+0xf4>
1a0063e0:	ab03      	add	r3, sp, #12
1a0063e2:	9300      	str	r3, [sp, #0]
1a0063e4:	4622      	mov	r2, r4
1a0063e6:	4b0a      	ldr	r3, [pc, #40]	; (1a006410 <_vfiprintf_r+0x228>)
1a0063e8:	a904      	add	r1, sp, #16
1a0063ea:	4630      	mov	r0, r6
1a0063ec:	f000 f888 	bl	1a006500 <_printf_i>
1a0063f0:	e7ec      	b.n	1a0063cc <_vfiprintf_r+0x1e4>
1a0063f2:	bf00      	nop
1a0063f4:	1a006f48 	.word	0x1a006f48
1a0063f8:	1a006f8c 	.word	0x1a006f8c
1a0063fc:	1a006f68 	.word	0x1a006f68
1a006400:	1a006f28 	.word	0x1a006f28
1a006404:	1a006f92 	.word	0x1a006f92
1a006408:	1a006f96 	.word	0x1a006f96
1a00640c:	00000000 	.word	0x00000000
1a006410:	1a0061c3 	.word	0x1a0061c3

1a006414 <_printf_common>:
1a006414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006418:	4691      	mov	r9, r2
1a00641a:	461f      	mov	r7, r3
1a00641c:	688a      	ldr	r2, [r1, #8]
1a00641e:	690b      	ldr	r3, [r1, #16]
1a006420:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a006424:	4293      	cmp	r3, r2
1a006426:	bfb8      	it	lt
1a006428:	4613      	movlt	r3, r2
1a00642a:	f8c9 3000 	str.w	r3, [r9]
1a00642e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a006432:	4606      	mov	r6, r0
1a006434:	460c      	mov	r4, r1
1a006436:	b112      	cbz	r2, 1a00643e <_printf_common+0x2a>
1a006438:	3301      	adds	r3, #1
1a00643a:	f8c9 3000 	str.w	r3, [r9]
1a00643e:	6823      	ldr	r3, [r4, #0]
1a006440:	0699      	lsls	r1, r3, #26
1a006442:	bf42      	ittt	mi
1a006444:	f8d9 3000 	ldrmi.w	r3, [r9]
1a006448:	3302      	addmi	r3, #2
1a00644a:	f8c9 3000 	strmi.w	r3, [r9]
1a00644e:	6825      	ldr	r5, [r4, #0]
1a006450:	f015 0506 	ands.w	r5, r5, #6
1a006454:	d107      	bne.n	1a006466 <_printf_common+0x52>
1a006456:	f104 0a19 	add.w	sl, r4, #25
1a00645a:	68e3      	ldr	r3, [r4, #12]
1a00645c:	f8d9 2000 	ldr.w	r2, [r9]
1a006460:	1a9b      	subs	r3, r3, r2
1a006462:	42ab      	cmp	r3, r5
1a006464:	dc28      	bgt.n	1a0064b8 <_printf_common+0xa4>
1a006466:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00646a:	6822      	ldr	r2, [r4, #0]
1a00646c:	3300      	adds	r3, #0
1a00646e:	bf18      	it	ne
1a006470:	2301      	movne	r3, #1
1a006472:	0692      	lsls	r2, r2, #26
1a006474:	d42d      	bmi.n	1a0064d2 <_printf_common+0xbe>
1a006476:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00647a:	4639      	mov	r1, r7
1a00647c:	4630      	mov	r0, r6
1a00647e:	47c0      	blx	r8
1a006480:	3001      	adds	r0, #1
1a006482:	d020      	beq.n	1a0064c6 <_printf_common+0xb2>
1a006484:	6823      	ldr	r3, [r4, #0]
1a006486:	68e5      	ldr	r5, [r4, #12]
1a006488:	f8d9 2000 	ldr.w	r2, [r9]
1a00648c:	f003 0306 	and.w	r3, r3, #6
1a006490:	2b04      	cmp	r3, #4
1a006492:	bf08      	it	eq
1a006494:	1aad      	subeq	r5, r5, r2
1a006496:	68a3      	ldr	r3, [r4, #8]
1a006498:	6922      	ldr	r2, [r4, #16]
1a00649a:	bf0c      	ite	eq
1a00649c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0064a0:	2500      	movne	r5, #0
1a0064a2:	4293      	cmp	r3, r2
1a0064a4:	bfc4      	itt	gt
1a0064a6:	1a9b      	subgt	r3, r3, r2
1a0064a8:	18ed      	addgt	r5, r5, r3
1a0064aa:	f04f 0900 	mov.w	r9, #0
1a0064ae:	341a      	adds	r4, #26
1a0064b0:	454d      	cmp	r5, r9
1a0064b2:	d11a      	bne.n	1a0064ea <_printf_common+0xd6>
1a0064b4:	2000      	movs	r0, #0
1a0064b6:	e008      	b.n	1a0064ca <_printf_common+0xb6>
1a0064b8:	2301      	movs	r3, #1
1a0064ba:	4652      	mov	r2, sl
1a0064bc:	4639      	mov	r1, r7
1a0064be:	4630      	mov	r0, r6
1a0064c0:	47c0      	blx	r8
1a0064c2:	3001      	adds	r0, #1
1a0064c4:	d103      	bne.n	1a0064ce <_printf_common+0xba>
1a0064c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0064ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0064ce:	3501      	adds	r5, #1
1a0064d0:	e7c3      	b.n	1a00645a <_printf_common+0x46>
1a0064d2:	18e1      	adds	r1, r4, r3
1a0064d4:	1c5a      	adds	r2, r3, #1
1a0064d6:	2030      	movs	r0, #48	; 0x30
1a0064d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0064dc:	4422      	add	r2, r4
1a0064de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0064e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0064e6:	3302      	adds	r3, #2
1a0064e8:	e7c5      	b.n	1a006476 <_printf_common+0x62>
1a0064ea:	2301      	movs	r3, #1
1a0064ec:	4622      	mov	r2, r4
1a0064ee:	4639      	mov	r1, r7
1a0064f0:	4630      	mov	r0, r6
1a0064f2:	47c0      	blx	r8
1a0064f4:	3001      	adds	r0, #1
1a0064f6:	d0e6      	beq.n	1a0064c6 <_printf_common+0xb2>
1a0064f8:	f109 0901 	add.w	r9, r9, #1
1a0064fc:	e7d8      	b.n	1a0064b0 <_printf_common+0x9c>
1a0064fe:	Address 0x000000001a0064fe is out of bounds.


1a006500 <_printf_i>:
1a006500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a006504:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a006508:	460c      	mov	r4, r1
1a00650a:	7e09      	ldrb	r1, [r1, #24]
1a00650c:	b085      	sub	sp, #20
1a00650e:	296e      	cmp	r1, #110	; 0x6e
1a006510:	4617      	mov	r7, r2
1a006512:	4606      	mov	r6, r0
1a006514:	4698      	mov	r8, r3
1a006516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a006518:	f000 80b3 	beq.w	1a006682 <_printf_i+0x182>
1a00651c:	d822      	bhi.n	1a006564 <_printf_i+0x64>
1a00651e:	2963      	cmp	r1, #99	; 0x63
1a006520:	d036      	beq.n	1a006590 <_printf_i+0x90>
1a006522:	d80a      	bhi.n	1a00653a <_printf_i+0x3a>
1a006524:	2900      	cmp	r1, #0
1a006526:	f000 80b9 	beq.w	1a00669c <_printf_i+0x19c>
1a00652a:	2958      	cmp	r1, #88	; 0x58
1a00652c:	f000 8083 	beq.w	1a006636 <_printf_i+0x136>
1a006530:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a006534:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a006538:	e032      	b.n	1a0065a0 <_printf_i+0xa0>
1a00653a:	2964      	cmp	r1, #100	; 0x64
1a00653c:	d001      	beq.n	1a006542 <_printf_i+0x42>
1a00653e:	2969      	cmp	r1, #105	; 0x69
1a006540:	d1f6      	bne.n	1a006530 <_printf_i+0x30>
1a006542:	6820      	ldr	r0, [r4, #0]
1a006544:	6813      	ldr	r3, [r2, #0]
1a006546:	0605      	lsls	r5, r0, #24
1a006548:	f103 0104 	add.w	r1, r3, #4
1a00654c:	d52a      	bpl.n	1a0065a4 <_printf_i+0xa4>
1a00654e:	681b      	ldr	r3, [r3, #0]
1a006550:	6011      	str	r1, [r2, #0]
1a006552:	2b00      	cmp	r3, #0
1a006554:	da03      	bge.n	1a00655e <_printf_i+0x5e>
1a006556:	222d      	movs	r2, #45	; 0x2d
1a006558:	425b      	negs	r3, r3
1a00655a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a00655e:	486f      	ldr	r0, [pc, #444]	; (1a00671c <_printf_i+0x21c>)
1a006560:	220a      	movs	r2, #10
1a006562:	e039      	b.n	1a0065d8 <_printf_i+0xd8>
1a006564:	2973      	cmp	r1, #115	; 0x73
1a006566:	f000 809d 	beq.w	1a0066a4 <_printf_i+0x1a4>
1a00656a:	d808      	bhi.n	1a00657e <_printf_i+0x7e>
1a00656c:	296f      	cmp	r1, #111	; 0x6f
1a00656e:	d020      	beq.n	1a0065b2 <_printf_i+0xb2>
1a006570:	2970      	cmp	r1, #112	; 0x70
1a006572:	d1dd      	bne.n	1a006530 <_printf_i+0x30>
1a006574:	6823      	ldr	r3, [r4, #0]
1a006576:	f043 0320 	orr.w	r3, r3, #32
1a00657a:	6023      	str	r3, [r4, #0]
1a00657c:	e003      	b.n	1a006586 <_printf_i+0x86>
1a00657e:	2975      	cmp	r1, #117	; 0x75
1a006580:	d017      	beq.n	1a0065b2 <_printf_i+0xb2>
1a006582:	2978      	cmp	r1, #120	; 0x78
1a006584:	d1d4      	bne.n	1a006530 <_printf_i+0x30>
1a006586:	2378      	movs	r3, #120	; 0x78
1a006588:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00658c:	4864      	ldr	r0, [pc, #400]	; (1a006720 <_printf_i+0x220>)
1a00658e:	e055      	b.n	1a00663c <_printf_i+0x13c>
1a006590:	6813      	ldr	r3, [r2, #0]
1a006592:	1d19      	adds	r1, r3, #4
1a006594:	681b      	ldr	r3, [r3, #0]
1a006596:	6011      	str	r1, [r2, #0]
1a006598:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00659c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0065a0:	2301      	movs	r3, #1
1a0065a2:	e08c      	b.n	1a0066be <_printf_i+0x1be>
1a0065a4:	681b      	ldr	r3, [r3, #0]
1a0065a6:	6011      	str	r1, [r2, #0]
1a0065a8:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0065ac:	bf18      	it	ne
1a0065ae:	b21b      	sxthne	r3, r3
1a0065b0:	e7cf      	b.n	1a006552 <_printf_i+0x52>
1a0065b2:	6813      	ldr	r3, [r2, #0]
1a0065b4:	6825      	ldr	r5, [r4, #0]
1a0065b6:	1d18      	adds	r0, r3, #4
1a0065b8:	6010      	str	r0, [r2, #0]
1a0065ba:	0628      	lsls	r0, r5, #24
1a0065bc:	d501      	bpl.n	1a0065c2 <_printf_i+0xc2>
1a0065be:	681b      	ldr	r3, [r3, #0]
1a0065c0:	e002      	b.n	1a0065c8 <_printf_i+0xc8>
1a0065c2:	0668      	lsls	r0, r5, #25
1a0065c4:	d5fb      	bpl.n	1a0065be <_printf_i+0xbe>
1a0065c6:	881b      	ldrh	r3, [r3, #0]
1a0065c8:	4854      	ldr	r0, [pc, #336]	; (1a00671c <_printf_i+0x21c>)
1a0065ca:	296f      	cmp	r1, #111	; 0x6f
1a0065cc:	bf14      	ite	ne
1a0065ce:	220a      	movne	r2, #10
1a0065d0:	2208      	moveq	r2, #8
1a0065d2:	2100      	movs	r1, #0
1a0065d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0065d8:	6865      	ldr	r5, [r4, #4]
1a0065da:	60a5      	str	r5, [r4, #8]
1a0065dc:	2d00      	cmp	r5, #0
1a0065de:	f2c0 8095 	blt.w	1a00670c <_printf_i+0x20c>
1a0065e2:	6821      	ldr	r1, [r4, #0]
1a0065e4:	f021 0104 	bic.w	r1, r1, #4
1a0065e8:	6021      	str	r1, [r4, #0]
1a0065ea:	2b00      	cmp	r3, #0
1a0065ec:	d13d      	bne.n	1a00666a <_printf_i+0x16a>
1a0065ee:	2d00      	cmp	r5, #0
1a0065f0:	f040 808e 	bne.w	1a006710 <_printf_i+0x210>
1a0065f4:	4665      	mov	r5, ip
1a0065f6:	2a08      	cmp	r2, #8
1a0065f8:	d10b      	bne.n	1a006612 <_printf_i+0x112>
1a0065fa:	6823      	ldr	r3, [r4, #0]
1a0065fc:	07db      	lsls	r3, r3, #31
1a0065fe:	d508      	bpl.n	1a006612 <_printf_i+0x112>
1a006600:	6923      	ldr	r3, [r4, #16]
1a006602:	6862      	ldr	r2, [r4, #4]
1a006604:	429a      	cmp	r2, r3
1a006606:	bfde      	ittt	le
1a006608:	2330      	movle	r3, #48	; 0x30
1a00660a:	f805 3c01 	strble.w	r3, [r5, #-1]
1a00660e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a006612:	ebac 0305 	sub.w	r3, ip, r5
1a006616:	6123      	str	r3, [r4, #16]
1a006618:	f8cd 8000 	str.w	r8, [sp]
1a00661c:	463b      	mov	r3, r7
1a00661e:	aa03      	add	r2, sp, #12
1a006620:	4621      	mov	r1, r4
1a006622:	4630      	mov	r0, r6
1a006624:	f7ff fef6 	bl	1a006414 <_printf_common>
1a006628:	3001      	adds	r0, #1
1a00662a:	d14d      	bne.n	1a0066c8 <_printf_i+0x1c8>
1a00662c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006630:	b005      	add	sp, #20
1a006632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a006636:	4839      	ldr	r0, [pc, #228]	; (1a00671c <_printf_i+0x21c>)
1a006638:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a00663c:	6813      	ldr	r3, [r2, #0]
1a00663e:	6821      	ldr	r1, [r4, #0]
1a006640:	1d1d      	adds	r5, r3, #4
1a006642:	681b      	ldr	r3, [r3, #0]
1a006644:	6015      	str	r5, [r2, #0]
1a006646:	060a      	lsls	r2, r1, #24
1a006648:	d50b      	bpl.n	1a006662 <_printf_i+0x162>
1a00664a:	07ca      	lsls	r2, r1, #31
1a00664c:	bf44      	itt	mi
1a00664e:	f041 0120 	orrmi.w	r1, r1, #32
1a006652:	6021      	strmi	r1, [r4, #0]
1a006654:	b91b      	cbnz	r3, 1a00665e <_printf_i+0x15e>
1a006656:	6822      	ldr	r2, [r4, #0]
1a006658:	f022 0220 	bic.w	r2, r2, #32
1a00665c:	6022      	str	r2, [r4, #0]
1a00665e:	2210      	movs	r2, #16
1a006660:	e7b7      	b.n	1a0065d2 <_printf_i+0xd2>
1a006662:	064d      	lsls	r5, r1, #25
1a006664:	bf48      	it	mi
1a006666:	b29b      	uxthmi	r3, r3
1a006668:	e7ef      	b.n	1a00664a <_printf_i+0x14a>
1a00666a:	4665      	mov	r5, ip
1a00666c:	fbb3 f1f2 	udiv	r1, r3, r2
1a006670:	fb02 3311 	mls	r3, r2, r1, r3
1a006674:	5cc3      	ldrb	r3, [r0, r3]
1a006676:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a00667a:	460b      	mov	r3, r1
1a00667c:	2900      	cmp	r1, #0
1a00667e:	d1f5      	bne.n	1a00666c <_printf_i+0x16c>
1a006680:	e7b9      	b.n	1a0065f6 <_printf_i+0xf6>
1a006682:	6813      	ldr	r3, [r2, #0]
1a006684:	6825      	ldr	r5, [r4, #0]
1a006686:	6961      	ldr	r1, [r4, #20]
1a006688:	1d18      	adds	r0, r3, #4
1a00668a:	6010      	str	r0, [r2, #0]
1a00668c:	0628      	lsls	r0, r5, #24
1a00668e:	681b      	ldr	r3, [r3, #0]
1a006690:	d501      	bpl.n	1a006696 <_printf_i+0x196>
1a006692:	6019      	str	r1, [r3, #0]
1a006694:	e002      	b.n	1a00669c <_printf_i+0x19c>
1a006696:	066a      	lsls	r2, r5, #25
1a006698:	d5fb      	bpl.n	1a006692 <_printf_i+0x192>
1a00669a:	8019      	strh	r1, [r3, #0]
1a00669c:	2300      	movs	r3, #0
1a00669e:	6123      	str	r3, [r4, #16]
1a0066a0:	4665      	mov	r5, ip
1a0066a2:	e7b9      	b.n	1a006618 <_printf_i+0x118>
1a0066a4:	6813      	ldr	r3, [r2, #0]
1a0066a6:	1d19      	adds	r1, r3, #4
1a0066a8:	6011      	str	r1, [r2, #0]
1a0066aa:	681d      	ldr	r5, [r3, #0]
1a0066ac:	6862      	ldr	r2, [r4, #4]
1a0066ae:	2100      	movs	r1, #0
1a0066b0:	4628      	mov	r0, r5
1a0066b2:	f000 f83d 	bl	1a006730 <memchr>
1a0066b6:	b108      	cbz	r0, 1a0066bc <_printf_i+0x1bc>
1a0066b8:	1b40      	subs	r0, r0, r5
1a0066ba:	6060      	str	r0, [r4, #4]
1a0066bc:	6863      	ldr	r3, [r4, #4]
1a0066be:	6123      	str	r3, [r4, #16]
1a0066c0:	2300      	movs	r3, #0
1a0066c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a0066c6:	e7a7      	b.n	1a006618 <_printf_i+0x118>
1a0066c8:	6923      	ldr	r3, [r4, #16]
1a0066ca:	462a      	mov	r2, r5
1a0066cc:	4639      	mov	r1, r7
1a0066ce:	4630      	mov	r0, r6
1a0066d0:	47c0      	blx	r8
1a0066d2:	3001      	adds	r0, #1
1a0066d4:	d0aa      	beq.n	1a00662c <_printf_i+0x12c>
1a0066d6:	6823      	ldr	r3, [r4, #0]
1a0066d8:	079b      	lsls	r3, r3, #30
1a0066da:	d413      	bmi.n	1a006704 <_printf_i+0x204>
1a0066dc:	68e0      	ldr	r0, [r4, #12]
1a0066de:	9b03      	ldr	r3, [sp, #12]
1a0066e0:	4298      	cmp	r0, r3
1a0066e2:	bfb8      	it	lt
1a0066e4:	4618      	movlt	r0, r3
1a0066e6:	e7a3      	b.n	1a006630 <_printf_i+0x130>
1a0066e8:	2301      	movs	r3, #1
1a0066ea:	464a      	mov	r2, r9
1a0066ec:	4639      	mov	r1, r7
1a0066ee:	4630      	mov	r0, r6
1a0066f0:	47c0      	blx	r8
1a0066f2:	3001      	adds	r0, #1
1a0066f4:	d09a      	beq.n	1a00662c <_printf_i+0x12c>
1a0066f6:	3501      	adds	r5, #1
1a0066f8:	68e3      	ldr	r3, [r4, #12]
1a0066fa:	9a03      	ldr	r2, [sp, #12]
1a0066fc:	1a9b      	subs	r3, r3, r2
1a0066fe:	42ab      	cmp	r3, r5
1a006700:	dcf2      	bgt.n	1a0066e8 <_printf_i+0x1e8>
1a006702:	e7eb      	b.n	1a0066dc <_printf_i+0x1dc>
1a006704:	2500      	movs	r5, #0
1a006706:	f104 0919 	add.w	r9, r4, #25
1a00670a:	e7f5      	b.n	1a0066f8 <_printf_i+0x1f8>
1a00670c:	2b00      	cmp	r3, #0
1a00670e:	d1ac      	bne.n	1a00666a <_printf_i+0x16a>
1a006710:	7803      	ldrb	r3, [r0, #0]
1a006712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a006716:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00671a:	e76c      	b.n	1a0065f6 <_printf_i+0xf6>
1a00671c:	1a006f9d 	.word	0x1a006f9d
1a006720:	1a006fae 	.word	0x1a006fae
1a006724:	ffffffff 	.word	0xffffffff
1a006728:	ffffffff 	.word	0xffffffff
1a00672c:	ffffffff 	.word	0xffffffff

1a006730 <memchr>:
1a006730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006734:	2a10      	cmp	r2, #16
1a006736:	db2b      	blt.n	1a006790 <memchr+0x60>
1a006738:	f010 0f07 	tst.w	r0, #7
1a00673c:	d008      	beq.n	1a006750 <memchr+0x20>
1a00673e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006742:	3a01      	subs	r2, #1
1a006744:	428b      	cmp	r3, r1
1a006746:	d02d      	beq.n	1a0067a4 <memchr+0x74>
1a006748:	f010 0f07 	tst.w	r0, #7
1a00674c:	b342      	cbz	r2, 1a0067a0 <memchr+0x70>
1a00674e:	d1f6      	bne.n	1a00673e <memchr+0xe>
1a006750:	b4f0      	push	{r4, r5, r6, r7}
1a006752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a006756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00675a:	f022 0407 	bic.w	r4, r2, #7
1a00675e:	f07f 0700 	mvns.w	r7, #0
1a006762:	2300      	movs	r3, #0
1a006764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006768:	3c08      	subs	r4, #8
1a00676a:	ea85 0501 	eor.w	r5, r5, r1
1a00676e:	ea86 0601 	eor.w	r6, r6, r1
1a006772:	fa85 f547 	uadd8	r5, r5, r7
1a006776:	faa3 f587 	sel	r5, r3, r7
1a00677a:	fa86 f647 	uadd8	r6, r6, r7
1a00677e:	faa5 f687 	sel	r6, r5, r7
1a006782:	b98e      	cbnz	r6, 1a0067a8 <memchr+0x78>
1a006784:	d1ee      	bne.n	1a006764 <memchr+0x34>
1a006786:	bcf0      	pop	{r4, r5, r6, r7}
1a006788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00678c:	f002 0207 	and.w	r2, r2, #7
1a006790:	b132      	cbz	r2, 1a0067a0 <memchr+0x70>
1a006792:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006796:	3a01      	subs	r2, #1
1a006798:	ea83 0301 	eor.w	r3, r3, r1
1a00679c:	b113      	cbz	r3, 1a0067a4 <memchr+0x74>
1a00679e:	d1f8      	bne.n	1a006792 <memchr+0x62>
1a0067a0:	2000      	movs	r0, #0
1a0067a2:	4770      	bx	lr
1a0067a4:	3801      	subs	r0, #1
1a0067a6:	4770      	bx	lr
1a0067a8:	2d00      	cmp	r5, #0
1a0067aa:	bf06      	itte	eq
1a0067ac:	4635      	moveq	r5, r6
1a0067ae:	3803      	subeq	r0, #3
1a0067b0:	3807      	subne	r0, #7
1a0067b2:	f015 0f01 	tst.w	r5, #1
1a0067b6:	d107      	bne.n	1a0067c8 <memchr+0x98>
1a0067b8:	3001      	adds	r0, #1
1a0067ba:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0067be:	bf02      	ittt	eq
1a0067c0:	3001      	addeq	r0, #1
1a0067c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0067c6:	3001      	addeq	r0, #1
1a0067c8:	bcf0      	pop	{r4, r5, r6, r7}
1a0067ca:	3801      	subs	r0, #1
1a0067cc:	4770      	bx	lr
1a0067ce:	bf00      	nop
1a0067d0:	6f727245 	.word	0x6f727245
1a0067d4:	6c612072 	.word	0x6c612072
1a0067d8:	636e6920 	.word	0x636e6920
1a0067dc:	696c6169 	.word	0x696c6169
1a0067e0:	2072617a 	.word	0x2072617a
1a0067e4:	54524155 	.word	0x54524155
1a0067e8:	50534520 	.word	0x50534520
1a0067ec:	00000000 	.word	0x00000000
1a0067f0:	0a0d5441 	.word	0x0a0d5441
1a0067f4:	00000000 	.word	0x00000000
1a0067f8:	432b5441 	.word	0x432b5441
1a0067fc:	444f4d57 	.word	0x444f4d57
1a006800:	0d333d45 	.word	0x0d333d45
1a006804:	0000000a 	.word	0x0000000a
1a006808:	432b5441 	.word	0x432b5441
1a00680c:	50414a57 	.word	0x50414a57
1a006810:	000a0d3f 	.word	0x000a0d3f
1a006814:	432b5441 	.word	0x432b5441
1a006818:	50414a57 	.word	0x50414a57
1a00681c:	7325223d 	.word	0x7325223d
1a006820:	25222c22 	.word	0x25222c22
1a006824:	00002273 	.word	0x00002273
1a006828:	432b5441 	.word	0x432b5441
1a00682c:	554d5049 	.word	0x554d5049
1a006830:	0d313d58 	.word	0x0d313d58
1a006834:	0000000a 	.word	0x0000000a
1a006838:	432b5441 	.word	0x432b5441
1a00683c:	4c435049 	.word	0x4c435049
1a006840:	3d45534f 	.word	0x3d45534f
1a006844:	0a0d6425 	.word	0x0a0d6425
1a006848:	00000000 	.word	0x00000000
1a00684c:	432b5441 	.word	0x432b5441
1a006850:	45535049 	.word	0x45535049
1a006854:	52455652 	.word	0x52455652
1a006858:	382c313d 	.word	0x382c313d
1a00685c:	000a0d30 	.word	0x000a0d30
1a006860:	432b5441 	.word	0x432b5441
1a006864:	52534649 	.word	0x52534649
1a006868:	00000a0d 	.word	0x00000a0d
1a00686c:	4f525245 	.word	0x4f525245
1a006870:	4c203a52 	.word	0x4c203a52
1a006874:	6f6c2061 	.word	0x6f6c2061
1a006878:	7469676e 	.word	0x7469676e
1a00687c:	64206475 	.word	0x64206475
1a006880:	61642065 	.word	0x61642065
1a006884:	20736f74 	.word	0x20736f74
1a006888:	50545448 	.word	0x50545448
1a00688c:	70757320 	.word	0x70757320
1a006890:	20617265 	.word	0x20617265
1a006894:	6d206c65 	.word	0x6d206c65
1a006898:	6d697861 	.word	0x6d697861
1a00689c:	6570206f 	.word	0x6570206f
1a0068a0:	74696d72 	.word	0x74696d72
1a0068a4:	206f6469 	.word	0x206f6469
1a0068a8:	25206564 	.word	0x25206564
1a0068ac:	79622064 	.word	0x79622064
1a0068b0:	2e736574 	.word	0x2e736574
1a0068b4:	00000000 	.word	0x00000000
1a0068b8:	432b5441 	.word	0x432b5441
1a0068bc:	45535049 	.word	0x45535049
1a0068c0:	253d444e 	.word	0x253d444e
1a0068c4:	64252c63 	.word	0x64252c63
1a0068c8:	00000a0d 	.word	0x00000a0d
1a0068cc:	00007325 	.word	0x00007325
1a0068d0:	432b5441 	.word	0x432b5441
1a0068d4:	4c435049 	.word	0x4c435049
1a0068d8:	3d45534f 	.word	0x3d45534f
1a0068dc:	0a0d6325 	.word	0x0a0d6325
1a0068e0:	ffffff00 	.word	0xffffff00
1a0068e4:	00006325 	.word	0x00006325
1a0068e8:	ff000d0a 	.word	0xff000d0a

1a0068ec <Response_CIFSR>:
1a0068ec:	4649432b 533a5253 50494154 ff00222c     +CIFSR:STAIP,"..

1a0068fc <Response_COMMA>:
1a0068fc:	ffff002c                                ,...

1a006900 <Response_CWJAP_1>:
1a006900:	49464957 4e4f4320 5443454e ff004445     WIFI CONNECTED..

1a006910 <Response_CWJAP_2>:
1a006910:	49464957 544f4720 00504920              WIFI GOT IP.

1a00691c <Response_CWJAP_OK>:
1a00691c:	4a57432b 003a5041                       +CWJAP:.

1a006924 <Response_IPD>:
1a006924:	4450492b ffff002c                       +IPD,...

1a00692c <Response_OK>:
1a00692c:	ff004b4f                                OK..

1a006930 <Response_SEND_OK>:
1a006930:	444e4553 004b4f20 614c200a 71657220     SEND OK.. La req
1a006940:	74736575 65697420 7520656e 6c20616e     uest tiene una l
1a006950:	69676e6f 20647574 203a6564 0a206425     ongitud de: %d .
1a006960:	00000000 614c200a 71657220 74736575     ..... La request
1a006970:	6d6f6320 74656c70 73652061 7325203a      completa es: %s
1a006980:	00000a20 00544547 7461642f 00000061      ...GET./data...
1a006990:	7475622f 006e6f74 6e61702f 00006c65     /button./panel..
1a0069a0:	646f622f 00000079 7661732f 00000065     /body.../save...
1a0069b0:	54534f50 00000000 7475622f 246e6f74     POST..../button$
1a0069c0:	00000000 7661732f 00002465 74616424     ..../save$..$dat
1a0069d0:	005b3a61 614c200a 71657220 74736575     a:[.. La request
1a0069e0:	6d696c20 20616970 203a7365 0a207325      limpia es: %s .
1a0069f0:	00000000 6c45200a 74656d20 206f646f     ..... El metodo 
1a006a00:	203a7365 0a207325 00000000 614c200a     es: %s ...... La
1a006a10:	72657620 6e6f6973 20656420 50545448      version de HTTP
1a006a20:	3a736520 20732520 ffff000a 50545448      es: %s ....HTTP
1a006a30:	ffff002f 74736554 ffffff00 6e617254     /...Test....Tran
1a006a40:	74696d73 ffffff00 65746e49 65727072     smit....Interpre
1a006a50:	ff006574 6170227b 226c656e 2c64253a     te..{"panel":%d,
1a006a60:	74616422 5b3a2261 00000000 002c6425     "data":[....%d,.
1a006a70:	ff007d5d 69420d0a 65766e65 6f64696e     ]}....Bienvenido
1a006a80:	206c6120 76726573 726f6469 54544820      al servidor HTT
1a006a90:	73452050 36323870 6f632036 4445206e     P Esp8266 con ED
1a006aa0:	49432055 00004141 614c0d0a 6e6f6320     U CIAA....La con
1a006ab0:	75676966 69636172 70206e6f 65646575     figuracion puede
1a006ac0:	72617420 20726164 74736168 20312061      tardar hasta 1 
1a006ad0:	756e696d 002e6f74 6373696d 67656c6f     minuto..miscoleg
1a006ae0:	00007361 61736143 72614d2d 006c6f6d     as..Casa-Marmol.
1a006af0:	65530d0a 64697672 4820726f 20505454     ..Servidor HTTP 
1a006b00:	666e6f63 72756769 2e6f6461 3a504920     configurado. IP:
1a006b10:	00732520 72450d0a 20726f72 63206c61      %s...Error al c
1a006b20:	69666e6f 61727567 65732072 64697672     onfigurar servid
1a006b30:	4820726f 2e505454 00000000 65500d0a     or HTTP.......Pe
1a006b40:	69636974 72206e6f 6f707365 6469646e     ticion respondid
1a006b50:	6c612061 696c6320 65746e65 54544820     a al cliente HTT
1a006b60:	64252050 0000002e 65500d0a 69636974     P %d......Petici
1a006b70:	6e206e6f 6572206f 6e6f7073 61646964     on no respondida
1a006b80:	206c6120 65696c63 2065746e 50545448      al cliente HTTP
1a006b90:	2e642520 ffffff00 6154796d 00006b73      %d.....myTask..
1a006ba0:	6154796d 00336b73 6c707041 74616369     myTask3.Applicat
1a006bb0:	206e6f69 6c6c614d 4620636f 656c6961     ion Malloc Faile
1a006bc0:	6f482064 0d216b6f 00000000 7362696c     d Hook!.....libs
1a006bd0:	6572662f 6f747265 6f732f73 65637275     /freertos/source
1a006be0:	6f6f682f 632e736b ffffff00 70410a0d     /hooks.c......Ap
1a006bf0:	63696c70 6f697461 7453206e 206b6361     plication Stack 
1a006c00:	7265764f 776f6c66 6f202121 6154206e     Overflow!! on Ta
1a006c10:	203a6b73 0a0d7325 ffffff00 41760a0d     sk: %s........vA
1a006c20:	72657373 6c614374 2864656c 200a0d29     ssertCalled().. 
1a006c30:	4c4c2020 20656e69 626d754e 3d207265       LLine Number =
1a006c40:	0d642520 2020200a 656c6946 6d614e20      %d..   File Nam
1a006c50:	203d2065 0a0d7325 ff000a0d 454c4449     e = %s......IDLE
1a006c60:	ffffff00 51726d54 ffffff00 20726d54     ....TmrQ....Tmr 
1a006c70:	00637653                                Svc.

1a006c74 <ExtRateIn>:
1a006c74:	00000000                                ....

1a006c78 <GpioButtons>:
1a006c78:	08000400 09010900                       ........

1a006c80 <GpioLeds>:
1a006c80:	01050005 0e000205 0c010b01              ............

1a006c8c <GpioPorts>:
1a006c8c:	03030003 0f050403 05031005 07030603     ................
1a006c9c:	ffff0802                                ....

1a006ca0 <OscRateIn>:
1a006ca0:	00b71b00                                ....

1a006ca4 <InitClkStates>:
1a006ca4:	01010f01                                ....

1a006ca8 <pinmuxing>:
1a006ca8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a006cb8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a006cc8:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a006cd8:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a006ce8:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a006cf8:	00d50301 00d50401 00160107 00560207     ..............V.
1a006d08:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a006d18:	00570206                                ..W.

1a006d1c <UART_BClock>:
1a006d1c:	01a201c2 01620182                       ......b.

1a006d24 <UART_PClock>:
1a006d24:	00820081 00a200a1 08040201 0f0f0f03     ................
1a006d34:	ffff00ff                                ....

1a006d38 <periph_to_base>:
1a006d38:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a006d48:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a006d58:	000100e0 01000100 01200003 00060120     .......... . ...
1a006d68:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a006d78:	01820013 00120182 01a201a2 01c20011     ................
1a006d88:	001001c2 01e201e2 0202000f 000e0202     ................
1a006d98:	02220222 0223000d 001c0223              "."...#.#...

1a006da4 <InitClkStates>:
1a006da4:	00010100 00010909 0001090a 01010701     ................
1a006db4:	00010902 00010906 0101090c 0001090d     ................
1a006dc4:	0001090e 0001090f 00010910 00010911     ................
1a006dd4:	00010912 00010913 00011114 00011119     ................
1a006de4:	0001111a 0001111b                       ........

1a006dec <lpcUarts>:
1a006dec:	40081000 06020406 00180205 40081000     ...@...........@
1a006dfc:	09070509 00180706 40082000 00000000     ......... .@....
1a006e0c:	00190000 400c1000 07060107 001a0602     .......@........
1a006e1c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006e2c:	02020302 001b0204                       ........

1a006e34 <gpioPinsInit>:
1a006e34:	02000104 00050701 05010d03 04080100     ................
1a006e44:	02020002 02000304 00000403 04070002     ................
1a006e54:	030c0300 09050402 05040103 04030208     ................
1a006e64:	04020305 06040504 0802000c 03000b06     ................
1a006e74:	00090607 07060503 060f0504 03030004     ................
1a006e84:	02000404 00050404 06040502 04060200     ................
1a006e94:	0c050408 05040a04 0003010e 14010a00     ................
1a006ea4:	010f0000 0d000012 00001101 0010010c     ................
1a006eb4:	07070300 000f0300 01000001 00000000     ................
1a006ec4:	000a0600 08060603 06100504 04030005     ................
1a006ed4:	03000106 04090400 04010d05 010b0000     ................
1a006ee4:	0200000f 00000001 00010104 02010800     ................
1a006ef4:	01090000 09010006 05040002 04010200     ................
1a006f04:	02020105 02020504 0e00000a 01000b02     ................
1a006f14:	000c020b ffff0c01 6c756e28 0000296c     ........(null)..

1a006f24 <ultrasonicSensorsIrqMap>:
1a006f24:	ff020100                                ....

1a006f28 <__sf_fake_stderr>:
	...

1a006f48 <__sf_fake_stdin>:
	...

1a006f68 <__sf_fake_stdout>:
	...

1a006f88 <_global_impure_ptr>:
1a006f88:	100018c0 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a006f98:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a006fa8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a006fb8:	64636261 ff006665                       abcdef..
