
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf:     file format elf32-littlearm
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0012e5

Program Header:
0x70000001 off    0x00017668 vaddr 0x1a007668 paddr 0x1a007668 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002e20 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00007670 memsz 0x00007670 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a007670 align 2**16
         filesz 0x00000138 memsz 0x00000138 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007664  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  10000000  1a007670  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020138  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020138  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020138  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020138  2**2
                  CONTENTS
  6 .bss          00002ce8  10000138  10000138  00000138  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020138  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020138  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020138  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020138  2**2
                  CONTENTS
 11 .init_array   00000004  1a007664  1a007664  00017664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a007668  1a007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020138  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020138  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020138  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020138  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020138  2**2
                  CONTENTS
 18 .noinit       00000000  10002e20  10002e20  00020138  2**2
                  CONTENTS
 19 .debug_info   000388ae  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00006cc1  00000000  00000000  000589e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000ce42  00000000  00000000  0005f6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000011f8  00000000  00000000  0006c4e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000012e8  00000000  00000000  0006d6e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000127bb  00000000  00000000  0006e9c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00019e9c  00000000  00000000  00081184  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000312b5  00000000  00000000  0009b020  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000cc2d5  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000cc354  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003508  00000000  00000000  000cc38c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000138 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007664 l    d  .init_array	00000000 .init_array
1a007668 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002e20 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a004004 l     F .text	000000c8 uartProcessIRQ
10002d8c l     O .bss	00000004 rxIsrCallbackUART0
10002d90 l     O .bss	00000004 rxIsrCallbackUART0Params
10002d94 l     O .bss	00000004 rxIsrCallbackUART2
10002d98 l     O .bss	00000004 rxIsrCallbackUART2Params
10002d9c l     O .bss	00000004 rxIsrCallbackUART3
10002da0 l     O .bss	00000004 rxIsrCallbackUART3Params
10002da4 l     O .bss	00000004 txIsrCallbackUART0
10002da8 l     O .bss	00000004 txIsrCallbackUART0Params
10002dac l     O .bss	00000004 txIsrCallbackUART2
10002db0 l     O .bss	00000004 txIsrCallbackUART2Params
10002db4 l     O .bss	00000004 txIsrCallbackUART3
10002db8 l     O .bss	00000004 txIsrCallbackUART3Params
1a007490 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Esp8266FreeRTOS.c
1a000300 l     F .text	0000000c SetEsp8622Status
1a00030c l     F .text	00000074 IsWaitedResponse
1a00057c l     F .text	000007ec ExcecuteHttpServerFsm
10000138 l     O .bss	00000001 CurrentConnectionId
10000139 l     O .bss	00000001 CurrentReqLength
10000140 l     O .bss	00000018 Esp8266Delay
10000158 l     O .bss	00000004 Esp8266ResponseToWait
1000015c l     O .bss	00000001 Esp8266Status
10000160 l     O .bss	00000004 PointerOfHttpWebPage
10000164 l     O .bss	00000010 UARTEsp
10000174 l     O .bss	00000014 WifiIp
10000188 l     O .bss	0000001e WifiName
100001a8 l     O .bss	0000001e WifiPass
100001c6 l     O .bss	00000001 auxIndex.14561
100001c7 l     O .bss	00000001 byteReceived.14560
100001c8 l     O .bss	00000002 i.14559
100001ca l     O .bss	00000001 index.14598
100001cb l     O .bss	00000001 parametersReceived.14549
100001cc l     O .bss	00000100 rawRequest
1a006b08 l     O .text	0000000f Response_CIFSR
1a006b18 l     O .text	00000002 Response_COMMA
1a006b1c l     O .text	0000000f Response_CWJAP_1
1a006b2c l     O .text	0000000c Response_CWJAP_2
1a006b38 l     O .text	00000008 Response_CWJAP_OK
1a006b40 l     O .text	00000006 Response_IPD
1a006b48 l     O .text	00000003 Response_OK
1a006b4c l     O .text	00000008 Response_SEND_OK
00000000 l    df *ABS*	00000000 UARTEspDriver.c
00000000 l    df *ABS*	00000000 portsDriver.c
100002cc l     O .bss	00000001 byteIndex.14479
100002cd l     O .bss	00000001 byteNumber.14456
100002d0 l     O .bss	00000012 dataToSend.14477
100002e2 l     O .bss	00000001 portIndex.14478
100002e4 l     O .bss	00000004 receivedData.14455
100002e8 l     O .bss	00000001 transmitEmpty.14482
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 modPrincipalCIAA.c
100002ec l     O .bss	00000054 ports.14513
00000000 l    df *ABS*	00000000 system.c
10000340 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a001438 l     F .text	00000064 prvHeapInit
10000348 l     O .bss	00002000 ucHeap
1a00149c l     F .text	00000058 prvInsertBlockIntoFreeList
10000344 l     O .bss	00000004 pxEnd
10002348 l     O .bss	00000004 xBlockAllocatedBit
1000234c l     O .bss	00000004 xFreeBytesRemaining
10002350 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002354 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a001680 l     F .text	0000001e prvIsQueueFull
1a00169e l     F .text	0000001a prvIsQueueEmpty
1a0016b8 l     F .text	00000076 prvCopyDataToQueue
1a00172e l     F .text	00000024 prvCopyDataFromQueue
1a001752 l     F .text	0000006e prvUnlockQueue
1a001844 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
1000235c l     O .bss	00000168 uxIdleTaskStack.10728
100024c4 l     O .bss	000005a0 uxTimerTaskStack.10735
10002a64 l     O .bss	00000060 xIdleTaskTCB.10727
10002ac4 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001f30 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001f5c l     F .text	00000092 prvInitialiseNewTask
1a001ff0 l     F .text	00000068 prvInitialiseTaskLists
1a002058 l     F .text	000000ac prvAddNewTaskToReadyList
1a002104 l     F .text	00000038 prvDeleteTCB
1a00213c l     F .text	0000004c prvCheckTasksWaitingTermination
1a002188 l     F .text	00000028 prvIdleTask
1a0021b0 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002b28 l     O .bss	00000004 pxDelayedTaskList
10002b2c l     O .bss	00000004 pxOverflowDelayedTaskList
10002b30 l     O .bss	0000008c pxReadyTasksLists
10002bbc l     O .bss	00000004 uxCurrentNumberOfTasks
10002bc0 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002bc4 l     O .bss	00000004 uxPendedTicks
10002bc8 l     O .bss	00000004 uxSchedulerSuspended
10002bcc l     O .bss	00000004 uxTaskNumber
10002bd0 l     O .bss	00000004 uxTopReadyPriority
10002bd4 l     O .bss	00000014 xDelayedTaskList1
10002be8 l     O .bss	00000014 xDelayedTaskList2
10002bfc l     O .bss	00000004 xNextTaskUnblockTime
10002c00 l     O .bss	00000004 xNumOfOverflows
10002c04 l     O .bss	00000014 xPendingReadyList
10002c18 l     O .bss	00000004 xSchedulerRunning
10002c1c l     O .bss	00000014 xSuspendedTaskList
10002c30 l     O .bss	00000014 xTasksWaitingTermination
10002c44 l     O .bss	00000004 xTickCount
10002c48 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0029fc l     F .text	00000020 prvGetNextExpireTime
1a002a1c l     F .text	00000048 prvInsertTimerInActiveList
1a002a64 l     F .text	00000070 prvCheckForValidListAndQueue
1a002ad4 l     F .text	00000040 prvInitialiseNewTimer
1a002e90 l     F .text	00000016 prvTimerTask
1a002c1c l     F .text	00000078 prvSwitchTimerLists
1a002c94 l     F .text	0000002c prvSampleTimeNow
1a002cc0 l     F .text	00000060 prvProcessExpiredTimer
1a002d20 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002d94 l     F .text	000000fc prvProcessReceivedCommands
10002c4c l     O .bss	00000004 pxCurrentTimerList
10002c50 l     O .bss	00000004 pxOverflowTimerList
10002c54 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002cf4 l     O .bss	00000014 xActiveTimerList1
10002d08 l     O .bss	00000014 xActiveTimerList2
10002d1c l     O .bss	00000004 xLastTime.11777
10002d20 l     O .bss	00000050 xStaticTimerQueue.11827
10002d70 l     O .bss	00000004 xTimerQueue
10002d74 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002ecc l     F .text	00000040 prvTaskExitError
1a002f0c l     F .text	00000022 prvPortStartFirstTask
1a002f34 l     F .text	0000000e vPortEnableVFP
1a002fa0 l       .text	00000000 pxCurrentTCBConst2
1a003080 l       .text	00000000 pxCurrentTCBConst
10002d78 l     O .bss	00000001 ucMaxSysCallPriority
10002d7c l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a003274 l     F .text	00000044 Board_LED_Init
1a0032b8 l     F .text	00000040 Board_TEC_Init
1a0032f8 l     F .text	00000040 Board_GPIO_Init
1a003338 l     F .text	00000030 Board_ADC_Init
1a003368 l     F .text	00000038 Board_SPI_Init
1a0033a0 l     F .text	00000024 Board_I2C_Init
1a00731c l     O .text	00000008 GpioButtons
1a007324 l     O .text	0000000c GpioLeds
1a007330 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007348 l     O .text	00000004 InitClkStates
1a00734c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a003590 l     F .text	0000002c Chip_UART_GetIndex
1a0073c0 l     O .text	00000008 UART_BClock
1a0073c8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003738 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00374c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003800 l     F .text	000000a4 pll_calc_divs
1a0038a4 l     F .text	0000010c pll_get_frac
1a0039b0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003c24 l     F .text	00000022 Chip_Clock_GetDivRate
10002d84 l     O .bss	00000008 audio_usb_pll_freq
1a0073dc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007448 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003efc l     F .text	00000014 Chip_SSP_GetClockIndex
1a003f10 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a004364 l     F .text	00000002 errorOcurred
1a004366 l     F .text	00000002 doNothing
10000048 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004470 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002dbc l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_stdio.c
1a004878 l     F .text	00000018 printchar
1a004890 l     F .text	00000080 prints
1a004910 l     F .text	000000a2 printi
1a0049b4 l     F .text	00000148 print
10002dc0 l     O .bss	00000001 prev.13796
10000088 l     O .data	00000001 UartPrintf
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a004b38 l     F .text	00000010 clearInterrupt
1a004b48 l     F .text	0000005c serveInterrupt
1000008c l     O .data	00000048 ultrasonicSensors
1a0075c8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a005024 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0057c4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100000d8 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a007668 l       .init_array	00000000 __init_array_end
1a007664 l       .bss_RAM5	00000000 __preinit_array_end
1a007664 l       .init_array	00000000 __init_array_start
1a007664 l       .bss_RAM5	00000000 __preinit_array_start
1a003a48 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001384 g     F .text	00000012 _isatty_r
1a005524 g     F .text	00000010 strcpy
1a0053a8 g     F .text	000000b8 _puts_r
1a0043e8 g     F .text	00000044 TIMER2_IRQHandler
1a004288 g     F .text	00000014 uartRxRead
1a001396 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a0010a4 g     F .text	000000a4 portsdriverInit
1a000114 g       .text	00000000 __section_table_start
1a000dcc g     F .text	0000002c gesp8266WriteHttpServer
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002fe8 g     F .text	0000002c vPortExitCritical
1a002b78 g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a005378 g     F .text	00000030 printf
1a00345a g     F .text	00000008 __stdio_init
1a0047e0 g     F .text	00000042 delayRead
1a0054ca g     F .text	00000024 __sseek
1a0050a4 g     F .text	00000060 __sinit
1a005578 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001db8 g     F .text	00000052 vQueueWaitForMessageRestricted
1a005078 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0037f2 g     F .text	0000000c Chip_ADC_SetResolution
1a0057c2 g     F .text	00000002 __malloc_unlock
1a000eac g     F .text	0000008c onRxCallback
1a003084 g     F .text	0000002c SysTick_Handler
1a003610 g     F .text	00000040 Chip_UART_SetBaud
1a0012e0  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0033fc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a003020 g     F .text	00000064 PendSV_Handler
1a001ac0 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a007670 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
10002dcc g     O .bss	00000004 requestAnswer
1a000f60 g     F .text	00000104 onTxCallback
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a006bd0 g     O .text	00000438 panel0
10002b24 g     O .bss	00000004 pxCurrentTCB
1a00137a g     F .text	0000000a _fstat_r
53ff65aa g       *ABS*	00000000 __valid_user_code_checksum
1a000df8 g     F .text	00000054 EspRxCallback
1a007670 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a002888 g     F .text	00000018 vTaskInternalSetTimeOutState
1a004218 g     F .text	00000028 uartCallbackClr
1a00442c g     F .text	00000044 TIMER3_IRQHandler
1a003cc6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a004b18 g     F .text	0000001e stdioSprintf
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0030e8 g     F .text	00000110 xPortStartScheduler
1a00117c g     F .text	000000f0 myTask3
1a005200 g     F .text	00000016 memcpy
1a002794 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00506c g     F .text	0000000c _cleanup_r
1a0030b0  w    F .text	00000038 vPortSetupTimerInterrupt
1a004bc4 g     F .text	00000000 .hidden __aeabi_uldivmod
10002e20 g       .noinit	00000000 _noinit
1a005460 g     F .text	00000010 puts
1a001610 g     F .text	00000070 vPortFree
1a006354 g     O .text	000007aa HttpWebPage
10002e18 g     O .bss	00000004 SystemCoreClock
1a0035bc g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0031f8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003d44 g     F .text	0000004c Chip_Clock_GetRate
1a001e26 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00349c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004bf4 g     F .text	000002cc .hidden __udivmoddi4
1a001418 g     F .text	00000020 _sbrk_r
1a007318 g     O .text	00000004 ExtRateIn
1a000f38 g     F .text	00000028 onTxTimeOutCallback
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000e9c g     F .text	00000010 receiveEspByte
1a0013a0 g     F .text	0000004e _read_r
1a001e20 g     F .text	00000006 vListInitialiseItem
1a001148 g     F .text	00000034 myTask
1a004bae g     F .text	0000000a GPIO1_IRQHandler
1a001b8c g     F .text	00000158 xQueueReceive
10002dd8 g     O .bss	00000040 xQueueRegistry
1a001eb4 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a007668 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00762c g     O .text	00000004 _global_impure_ptr
1a0051b8 g     F .text	00000048 __libc_init_array
10002dd0 g     O .bss	00000004 actualPanel
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0014f4 g     F .text	0000011c pvPortMalloc
1a003418 g     F .text	00000030 Board_Init
1a00136e  w    F .text	00000002 _init
1a000db4 g     F .text	00000018 gesp8266ReadHttpServer
1a001e0a g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a000388 g     F .text	00000010 gesp8266GetConnectionId
1a001064 g     F .text	0000003e portsDataInit
1a0023c4 g     F .text	0000000c xTaskGetTickCount
1a001944 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002e20 g       .bss	00000000 _ebss
1a004824 g     F .text	00000014 _outbyte
1a004368 g     F .text	00000040 TIMER0_IRQHandler
1a0012e4 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003558 g     F .text	00000038 Chip_I2C_SetClockRate
1a00294c g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0039fc g     F .text	0000004c Chip_Clock_EnableCrystal
1a0003d4 g     F .text	000001a8 requestCallback
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0027fc g     F .text	0000008c xTaskRemoveFromEventList
1a001ef8  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0043a8 g     F .text	00000040 TIMER1_IRQHandler
1a0075cc g     O .text	00000020 __sf_fake_stderr
1a003534 g     F .text	00000024 Chip_I2C_Init
1a004346 g     F .text	0000000a UART2_IRQHandler
1a003bb8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0074d8 g     O .text	000000e6 gpioPinsInit
1a0040cc g     F .text	00000090 uartInterrupt
1a001ecc  w    F .text	0000002c vAssertCalled
1a00432c g     F .text	0000001a uartWriteByte
1a003f28 g     F .text	00000012 Chip_SSP_SetClockRate
1a004722 g     F .text	00000016 gpioToggle
1a0057f2 g     F .text	00000024 __sfputs_r
1a004bb8 g     F .text	0000000a GPIO2_IRQHandler
1a005d60 g     F .text	00000000 memchr
1a0028a0 g     F .text	00000080 xTaskCheckForTimeOut
1a005228 g     F .text	0000009c _free_r
1a003ca0 g     F .text	00000026 Chip_Clock_GetBaseClock
10000138 g       .bss	00000000 _bss
1a0037c0 g     F .text	00000032 Chip_ADC_SetSampleRate
10002d80 g     O .bss	00000004 freeRtosInterruptCallback
1a0023b4 g     F .text	00000010 vTaskSuspendAll
1a005544 g     F .text	00000034 strstr
1a0047c0 g     F .text	00000020 delayInit
1a004240 g     F .text	00000030 uartSetPendingInterrupt
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003f3a g     F .text	0000003e Chip_SSP_SetBitRate
1a001e72 g     F .text	00000028 uxListRemove
1a003ef8 g     F .text	00000002 Chip_GPIO_Init
1a007344 g     O .text	00000004 OscRateIn
1a000d68 g     F .text	0000004c gesp8266InitHttpServer
1a0042b0 g     F .text	0000007c uartInit
1a002248 g     F .text	00000072 xTaskCreateStatic
10002e20 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0026cc g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001866 g     F .text	00000090 xQueueGenericCreateStatic
1a0027c4 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a001370 g     F .text	0000000a _close_r
1a0044a4 g     F .text	000001ac gpioInit
1a001e9c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002bb0 g     F .text	0000006c xTimerGenericCommand
1a00561c g     F .text	000000dc __swsetup_r
1a001f14  w    F .text	0000001c vApplicationStackOverflowHook
1a004ec0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a005104 g     F .text	00000078 __sfp
1a005470 g     F .text	00000022 __sread
1a004738 g     F .text	0000001c USB0_IRQHandler
1a004838 g     F .text	00000040 outbyte
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0057c0 g     F .text	00000002 __malloc_lock
1a0033e8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004fd0 g     F .text	00000054 _fflush_r
1a0075ec g     O .text	00000020 __sf_fake_stdin
1a003a64 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a005216 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00126c g     F .text	00000074 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001e3e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002f80 g     F .text	00000024 SVC_Handler
1a0054ee g     F .text	00000008 __sclose
1a002b14 g     F .text	00000064 xTimerCreateTimerTask
1a0052c4 g     F .text	000000b4 _malloc_r
1a004270 g     F .text	00000018 uartTxReady
1a0025dc g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003cd4 g     F .text	0000003c Chip_Clock_EnableOpts
1a003452 g     F .text	00000008 __stdio_getchar
1a001ce4 g     F .text	000000aa xQueueReceiveFromISR
1a0018f6 g     F .text	0000004e xQueueGenericCreate
1a003a80 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000380 g     F .text	00000008 gesp8266GetIpAddress
1a005510 g     F .text	00000014 strcmp
1a003b38 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003fb0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a004650 g     F .text	0000006a gpioWrite
1a00136c  w    F .text	00000002 _fini
1a005378 g     F .text	00000030 iprintf
1a0024e8 g     F .text	000000f4 xTaskResumeAll
1a002320 g     F .text	00000094 vTaskStartScheduler
1a003780 g     F .text	00000040 Chip_ADC_Init
10002e1c g     O .bss	00000004 g_pUsbApi
1a003464 g     F .text	00000038 Board_SetupMuxing
1a003650 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a00435a g     F .text	0000000a tickRead
1a0013ee g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a002ea6 g     F .text	00000026 pvTimerGetTimerID
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005a44 g     F .text	000000ea _printf_common
100000d4 g     O .data	00000004 _impure_ptr
1a004ec4 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a006b54 g     O .text	00000003 ok
1a00429c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a006b58 g     O .text	00000075 pageData0
1a002920 g     F .text	0000000c vTaskMissedYield
10002e20 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003f78 g     F .text	00000038 Chip_SSP_Init
1a001d90 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0023d0 g     F .text	00000118 xTaskIncrementTick
1a0056f8 g     F .text	00000048 __swhatbuf_r
1a003254 g     F .text	00000020 DAC_IRQHandler
1a0033c4 g     F .text	00000024 Board_Debug_Init
1a0070f4 g     O .text	00000010 requestError
1a003448 g     F .text	0000000a __stdio_putchar
1a0017c0 g     F .text	00000084 xQueueGenericReset
10000138 g       .data	00000000 _edata
10002dd4 g     O .bss	00000004 actualPageData
1a003514 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0022ba g     F .text	00000066 xTaskCreate
1a003da4 g     F .text	00000154 Chip_SetupCoreClock
1a005492 g     F .text	00000038 __swrite
1a004ba4 g     F .text	0000000a GPIO0_IRQHandler
1a005818 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a00517c g     F .text	0000003c _fwalk_reent
1a003d90 g     F .text	00000014 SystemCoreClockUpdate
1a000e4c g     F .text	00000050 UARTEspInit
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a002680 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00760c g     O .text	00000020 __sf_fake_stdout
1a00292c g     F .text	00000020 xTaskGetSchedulerState
1a004ec0  w    F .text	00000002 .hidden __aeabi_idiv0
1a005f14 g     O .text	0000043e HttpBody
1a00415c g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a005740 g     F .text	00000080 __smakebuf_r
1a005534 g     F .text	00000010 strlen
1a002f48 g     F .text	0000002c pxPortInitialiseStack
1a005b30 g     F .text	00000224 _printf_i
1a003d10 g     F .text	00000034 Chip_Clock_Enable
1a004350 g     F .text	0000000a UART3_IRQHandler
10002dc8 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0054f6 g     F .text	0000001a strchr
1a0046ba g     F .text	00000068 gpioRead
1a004afc g     F .text	0000001c stdioPrintf
1a004754 g     F .text	0000006c boardInit
1a002fa4 g     F .text	00000044 vPortEnterCritical
10002dc4 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a005818 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a000398 g     F .text	0000003c requestSeparate
1a003c48 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003fe8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a003508 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e5 12 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a aa 65 ff 53     }............e.S
	...
1a00002c:	81 2f 00 1a 85 01 00 1a 00 00 00 00 21 30 00 1a     ./..........!0..
1a00003c:	85 30 00 1a                                         .0..

1a000040 <g_pfnVendorVectors>:
1a000040:	55 32 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     U2..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	39 47 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     9G..............
1a000070:	69 43 00 1a a9 43 00 1a e9 43 00 1a 2d 44 00 1a     iC...C...C..-D..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 47 43 00 1a 51 43 00 1a     ........GC..QC..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	a5 4b 00 1a af 4b 00 1a b9 4b 00 1a bb 01 00 1a     .K...K...K......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a007670 	.word	0x1a007670
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000138 	.word	0x00000138
1a000120:	1a007670 	.word	0x1a007670
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007670 	.word	0x1a007670
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007670 	.word	0x1a007670
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007670 	.word	0x1a007670
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000138 	.word	0x10000138
1a000154:	00002ce8 	.word	0x00002ce8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 ff20 	bl	1a004004 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <SetEsp8622Status>:
 * Setea el estado global del modulo Esp8266.
 * @param status Estado a setear.
 */
static void SetEsp8622Status(Esp8266Status_t status)
{
	Esp8266Status = status;
1a000300:	4b01      	ldr	r3, [pc, #4]	; (1a000308 <SetEsp8622Status+0x8>)
1a000302:	7018      	strb	r0, [r3, #0]
	if (Esp8266DebugBaudRate > 0)
	{
//		stdioPrintf(Esp8266DebugUart, "\n\rESP8266 State = %s\n\r", Esp8266StatusToString[status]);
	}
}
1a000304:	4770      	bx	lr
1a000306:	bf00      	nop
1a000308:	1000015c 	.word	0x1000015c

1a00030c <IsWaitedResponse>:
{
1a00030c:	b500      	push	{lr}
1a00030e:	b083      	sub	sp, #12
	if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000310:	220a      	movs	r2, #10
1a000312:	f10d 0107 	add.w	r1, sp, #7
1a000316:	4815      	ldr	r0, [pc, #84]	; (1a00036c <IsWaitedResponse+0x60>)
1a000318:	f000 fdc0 	bl	1a000e9c <receiveEspByte>
1a00031c:	4603      	mov	r3, r0
1a00031e:	b188      	cbz	r0, 1a000344 <IsWaitedResponse+0x38>
			stdioPrintf(Esp8266DebugUart, "%c", byteReceived);
1a000320:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000324:	4912      	ldr	r1, [pc, #72]	; (1a000370 <IsWaitedResponse+0x64>)
1a000326:	2003      	movs	r0, #3
1a000328:	f004 fbe8 	bl	1a004afc <stdioPrintf>
		if (byteReceived == Esp8266ResponseToWait[index])
1a00032c:	4b11      	ldr	r3, [pc, #68]	; (1a000374 <IsWaitedResponse+0x68>)
1a00032e:	6819      	ldr	r1, [r3, #0]
1a000330:	4b11      	ldr	r3, [pc, #68]	; (1a000378 <IsWaitedResponse+0x6c>)
1a000332:	781b      	ldrb	r3, [r3, #0]
1a000334:	5cc8      	ldrb	r0, [r1, r3]
1a000336:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a00033a:	4290      	cmp	r0, r2
1a00033c:	d006      	beq.n	1a00034c <IsWaitedResponse+0x40>
			index = 0;
1a00033e:	2300      	movs	r3, #0
1a000340:	4a0d      	ldr	r2, [pc, #52]	; (1a000378 <IsWaitedResponse+0x6c>)
1a000342:	7013      	strb	r3, [r2, #0]
}
1a000344:	4618      	mov	r0, r3
1a000346:	b003      	add	sp, #12
1a000348:	f85d fb04 	ldr.w	pc, [sp], #4
			index++;
1a00034c:	3301      	adds	r3, #1
1a00034e:	b2db      	uxtb	r3, r3
1a000350:	4809      	ldr	r0, [pc, #36]	; (1a000378 <IsWaitedResponse+0x6c>)
1a000352:	7003      	strb	r3, [r0, #0]
			if (Esp8266ResponseToWait[index] == '\0')
1a000354:	5ccb      	ldrb	r3, [r1, r3]
1a000356:	b93b      	cbnz	r3, 1a000368 <IsWaitedResponse+0x5c>
				index = 0;
1a000358:	2100      	movs	r1, #0
1a00035a:	7001      	strb	r1, [r0, #0]
					stdioPrintf(Esp8266DebugUart, "\n\r", byteReceived);
1a00035c:	4907      	ldr	r1, [pc, #28]	; (1a00037c <IsWaitedResponse+0x70>)
1a00035e:	2003      	movs	r0, #3
1a000360:	f004 fbcc 	bl	1a004afc <stdioPrintf>
				moduleResponse = TRUE;
1a000364:	2301      	movs	r3, #1
1a000366:	e7ed      	b.n	1a000344 <IsWaitedResponse+0x38>
	bool_t moduleResponse = FALSE;
1a000368:	2300      	movs	r3, #0
1a00036a:	e7eb      	b.n	1a000344 <IsWaitedResponse+0x38>
1a00036c:	10000164 	.word	0x10000164
1a000370:	1a006b00 	.word	0x1a006b00
1a000374:	10000158 	.word	0x10000158
1a000378:	100001ca 	.word	0x100001ca
1a00037c:	1a006b04 	.word	0x1a006b04

1a000380 <gesp8266GetIpAddress>:
}
1a000380:	4800      	ldr	r0, [pc, #0]	; (1a000384 <gesp8266GetIpAddress+0x4>)
1a000382:	4770      	bx	lr
1a000384:	10000174 	.word	0x10000174

1a000388 <gesp8266GetConnectionId>:
	return CurrentConnectionId - '0';
1a000388:	4b02      	ldr	r3, [pc, #8]	; (1a000394 <gesp8266GetConnectionId+0xc>)
1a00038a:	7818      	ldrb	r0, [r3, #0]
1a00038c:	3830      	subs	r0, #48	; 0x30
}
1a00038e:	b2c0      	uxtb	r0, r0
1a000390:	4770      	bx	lr
1a000392:	bf00      	nop
1a000394:	10000138 	.word	0x10000138

1a000398 <requestSeparate>:
//**request: apunta a la parte de rawReq que es la solicitud limpia de la HTTP Request
//**version: apunta a la parte de rawReq que la version del HTTP de la HTTP Request
//

void requestSeparate(char *rawReq, char **methode,char **request,char **HTTPVersion)
	{
1a000398:	b570      	push	{r4, r5, r6, lr}
1a00039a:	4604      	mov	r4, r0
1a00039c:	4616      	mov	r6, r2
1a00039e:	461d      	mov	r5, r3
	 //puntero al string de la version HTTP
	char *aux;

	//

	*methode=rawReq;
1a0003a0:	6008      	str	r0, [r1, #0]
	*HTTPVersion = strstr(rawReq, "HTTP/");//busco el inicio del string de la version HTTP
1a0003a2:	490b      	ldr	r1, [pc, #44]	; (1a0003d0 <requestSeparate+0x38>)
1a0003a4:	f005 f8ce 	bl	1a005544 <strstr>
1a0003a8:	6028      	str	r0, [r5, #0]
	uint16_t i =0;
1a0003aa:	2300      	movs	r3, #0
	while (rawReq[i]!=' ')
1a0003ac:	e001      	b.n	1a0003b2 <requestSeparate+0x1a>
		i++;
1a0003ae:	3301      	adds	r3, #1
1a0003b0:	b29b      	uxth	r3, r3
	while (rawReq[i]!=' ')
1a0003b2:	4619      	mov	r1, r3
1a0003b4:	18e0      	adds	r0, r4, r3
1a0003b6:	5ce2      	ldrb	r2, [r4, r3]
1a0003b8:	2a20      	cmp	r2, #32
1a0003ba:	d1f8      	bne.n	1a0003ae <requestSeparate+0x16>
	rawReq[i]=0; 	//pongo fin de cadena entre GET y la request propiamente dicha para separar el
1a0003bc:	2300      	movs	r3, #0
1a0003be:	7003      	strb	r3, [r0, #0]
					//string en 3 strings (methode, request y HTTPVersion)
	*request=&rawReq[i+1]; //la request empieza un caracter despues del espacio que viene despues del GE
1a0003c0:	3101      	adds	r1, #1
1a0003c2:	440c      	add	r4, r1
1a0003c4:	6034      	str	r4, [r6, #0]

	aux=*HTTPVersion-sizeof(char);//poner el /0 antes de la posicion apuntada por HTTPVersion
1a0003c6:	682a      	ldr	r2, [r5, #0]
	*aux=0;
1a0003c8:	f802 3c01 	strb.w	r3, [r2, #-1]

	}
1a0003cc:	bd70      	pop	{r4, r5, r6, pc}
1a0003ce:	bf00      	nop
1a0003d0:	1a007104 	.word	0x1a007104

1a0003d4 <requestCallback>:
void requestCallback(char *rawReq, uint8_t reqLength){
1a0003d4:	b510      	push	{r4, lr}
1a0003d6:	b084      	sub	sp, #16
1a0003d8:	4604      	mov	r4, r0

stdioPrintf(UART_USB, "\n La request tiene una longitud de: %d \n",CurrentReqLength);
1a0003da:	4b4f      	ldr	r3, [pc, #316]	; (1a000518 <requestCallback+0x144>)
1a0003dc:	781a      	ldrb	r2, [r3, #0]
1a0003de:	494f      	ldr	r1, [pc, #316]	; (1a00051c <requestCallback+0x148>)
1a0003e0:	2003      	movs	r0, #3
1a0003e2:	f004 fb8b 	bl	1a004afc <stdioPrintf>
stdioPrintf(UART_USB, "\n La request completa es: %s \n",rawReq);
1a0003e6:	4622      	mov	r2, r4
1a0003e8:	494d      	ldr	r1, [pc, #308]	; (1a000520 <requestCallback+0x14c>)
1a0003ea:	2003      	movs	r0, #3
1a0003ec:	f004 fb86 	bl	1a004afc <stdioPrintf>
char *auxpointer1;
char *auxpointer2;
char auxString[10];
uint32_t panel;
uint32_t buttonId;
actualPageData = pageData0;
1a0003f0:	4b4c      	ldr	r3, [pc, #304]	; (1a000524 <requestCallback+0x150>)
1a0003f2:	4a4d      	ldr	r2, [pc, #308]	; (1a000528 <requestCallback+0x154>)
1a0003f4:	601a      	str	r2, [r3, #0]
actualPanel=panel0;
1a0003f6:	4b4d      	ldr	r3, [pc, #308]	; (1a00052c <requestCallback+0x158>)
1a0003f8:	4a4d      	ldr	r2, [pc, #308]	; (1a000530 <requestCallback+0x15c>)
1a0003fa:	601a      	str	r2, [r3, #0]
//separo la request completa en 3 bloques (metodo, request limpia y version de HTTP)
requestSeparate(rawReq,&methode,&request,&HTTPVersion);
1a0003fc:	ab01      	add	r3, sp, #4
1a0003fe:	aa02      	add	r2, sp, #8
1a000400:	a903      	add	r1, sp, #12
1a000402:	4620      	mov	r0, r4
1a000404:	f7ff ffc8 	bl	1a000398 <requestSeparate>

if (!strcmp(methode,"GET"))
1a000408:	9c03      	ldr	r4, [sp, #12]
1a00040a:	494a      	ldr	r1, [pc, #296]	; (1a000534 <requestCallback+0x160>)
1a00040c:	4620      	mov	r0, r4
1a00040e:	f005 f87f 	bl	1a005510 <strcmp>
1a000412:	2800      	cmp	r0, #0
1a000414:	d13c      	bne.n	1a000490 <requestCallback+0xbc>
{
	if (!strcmp(request, "/"))
1a000416:	9c02      	ldr	r4, [sp, #8]
1a000418:	4947      	ldr	r1, [pc, #284]	; (1a000538 <requestCallback+0x164>)
1a00041a:	4620      	mov	r0, r4
1a00041c:	f005 f878 	bl	1a005510 <strcmp>
1a000420:	b148      	cbz	r0, 1a000436 <requestCallback+0x62>
			requestAnswer=HttpWebPage;
	else
		{
		if (strstr(request, "/data"))
1a000422:	4946      	ldr	r1, [pc, #280]	; (1a00053c <requestCallback+0x168>)
1a000424:	4620      	mov	r0, r4
1a000426:	f005 f88d 	bl	1a005544 <strstr>
1a00042a:	b140      	cbz	r0, 1a00043e <requestCallback+0x6a>
				{
			requestAnswer = actualPageData;
1a00042c:	4b3d      	ldr	r3, [pc, #244]	; (1a000524 <requestCallback+0x150>)
1a00042e:	681a      	ldr	r2, [r3, #0]
1a000430:	4b43      	ldr	r3, [pc, #268]	; (1a000540 <requestCallback+0x16c>)
1a000432:	601a      	str	r2, [r3, #0]
1a000434:	e05f      	b.n	1a0004f6 <requestCallback+0x122>
			requestAnswer=HttpWebPage;
1a000436:	4b42      	ldr	r3, [pc, #264]	; (1a000540 <requestCallback+0x16c>)
1a000438:	4a42      	ldr	r2, [pc, #264]	; (1a000544 <requestCallback+0x170>)
1a00043a:	601a      	str	r2, [r3, #0]
1a00043c:	e05b      	b.n	1a0004f6 <requestCallback+0x122>
				}
		else
			if (strstr(request, "/button"))
1a00043e:	4942      	ldr	r1, [pc, #264]	; (1a000548 <requestCallback+0x174>)
1a000440:	4620      	mov	r0, r4
1a000442:	f005 f87f 	bl	1a005544 <strstr>
1a000446:	b118      	cbz	r0, 1a000450 <requestCallback+0x7c>
							{
						requestAnswer = ok;
1a000448:	4b3d      	ldr	r3, [pc, #244]	; (1a000540 <requestCallback+0x16c>)
1a00044a:	4a40      	ldr	r2, [pc, #256]	; (1a00054c <requestCallback+0x178>)
1a00044c:	601a      	str	r2, [r3, #0]
1a00044e:	e052      	b.n	1a0004f6 <requestCallback+0x122>
							}
			else
				if (strstr(request, "/panel"))
1a000450:	493f      	ldr	r1, [pc, #252]	; (1a000550 <requestCallback+0x17c>)
1a000452:	4620      	mov	r0, r4
1a000454:	f005 f876 	bl	1a005544 <strstr>
1a000458:	b118      	cbz	r0, 1a000462 <requestCallback+0x8e>
								{
							requestAnswer = panel0;
1a00045a:	4b39      	ldr	r3, [pc, #228]	; (1a000540 <requestCallback+0x16c>)
1a00045c:	4a34      	ldr	r2, [pc, #208]	; (1a000530 <requestCallback+0x15c>)
1a00045e:	601a      	str	r2, [r3, #0]
1a000460:	e049      	b.n	1a0004f6 <requestCallback+0x122>
								}
				else
					if (strstr(request, "/body"))
1a000462:	493c      	ldr	r1, [pc, #240]	; (1a000554 <requestCallback+0x180>)
1a000464:	4620      	mov	r0, r4
1a000466:	f005 f86d 	bl	1a005544 <strstr>
1a00046a:	b118      	cbz	r0, 1a000474 <requestCallback+0xa0>
									{
								requestAnswer = HttpBody;
1a00046c:	4b34      	ldr	r3, [pc, #208]	; (1a000540 <requestCallback+0x16c>)
1a00046e:	4a3a      	ldr	r2, [pc, #232]	; (1a000558 <requestCallback+0x184>)
1a000470:	601a      	str	r2, [r3, #0]
1a000472:	e040      	b.n	1a0004f6 <requestCallback+0x122>
									}
					else
						if (strstr(request, "/save"))
1a000474:	4939      	ldr	r1, [pc, #228]	; (1a00055c <requestCallback+0x188>)
1a000476:	4620      	mov	r0, r4
1a000478:	f005 f864 	bl	1a005544 <strstr>
1a00047c:	b120      	cbz	r0, 1a000488 <requestCallback+0xb4>
								{
							requestAnswer = actualPageData;
1a00047e:	4b29      	ldr	r3, [pc, #164]	; (1a000524 <requestCallback+0x150>)
1a000480:	681a      	ldr	r2, [r3, #0]
1a000482:	4b2f      	ldr	r3, [pc, #188]	; (1a000540 <requestCallback+0x16c>)
1a000484:	601a      	str	r2, [r3, #0]
1a000486:	e036      	b.n	1a0004f6 <requestCallback+0x122>
								}
						else
							requestAnswer = requestError;
1a000488:	4b2d      	ldr	r3, [pc, #180]	; (1a000540 <requestCallback+0x16c>)
1a00048a:	4a35      	ldr	r2, [pc, #212]	; (1a000560 <requestCallback+0x18c>)
1a00048c:	601a      	str	r2, [r3, #0]
1a00048e:	e032      	b.n	1a0004f6 <requestCallback+0x122>
		}
}
else
	if (!strcmp(methode,"POST"))
1a000490:	4934      	ldr	r1, [pc, #208]	; (1a000564 <requestCallback+0x190>)
1a000492:	4620      	mov	r0, r4
1a000494:	f005 f83c 	bl	1a005510 <strcmp>
1a000498:	bb50      	cbnz	r0, 1a0004f0 <requestCallback+0x11c>
	{
		if (strstr(request, "/button$"))
1a00049a:	9c02      	ldr	r4, [sp, #8]
1a00049c:	4932      	ldr	r1, [pc, #200]	; (1a000568 <requestCallback+0x194>)
1a00049e:	4620      	mov	r0, r4
1a0004a0:	f005 f850 	bl	1a005544 <strstr>
1a0004a4:	b168      	cbz	r0, 1a0004c2 <requestCallback+0xee>
		{
			//reemplazo los "$" por fin de cadena
			auxpointer1= strstr(request, "$");
1a0004a6:	2124      	movs	r1, #36	; 0x24
1a0004a8:	4620      	mov	r0, r4
1a0004aa:	f005 f824 	bl	1a0054f6 <strchr>
			auxpointer2= strstr(auxpointer1, "$");
1a0004ae:	2124      	movs	r1, #36	; 0x24
1a0004b0:	f005 f821 	bl	1a0054f6 <strchr>
			auxpointer2[0]=0;
1a0004b4:	2300      	movs	r3, #0
1a0004b6:	7003      	strb	r3, [r0, #0]
			panel= stringToInt(&auxpointer1[1]);
			buttonId= stringToInt(&auxpointer2[1]);
//*****enviar orden y esperar a que se ejecute
			requestAnswer=actualPageData;
1a0004b8:	4b1a      	ldr	r3, [pc, #104]	; (1a000524 <requestCallback+0x150>)
1a0004ba:	681a      	ldr	r2, [r3, #0]
1a0004bc:	4b20      	ldr	r3, [pc, #128]	; (1a000540 <requestCallback+0x16c>)
1a0004be:	601a      	str	r2, [r3, #0]
1a0004c0:	e019      	b.n	1a0004f6 <requestCallback+0x122>
		}
		else
		{
			if (strstr(request, "/save$"))
1a0004c2:	492a      	ldr	r1, [pc, #168]	; (1a00056c <requestCallback+0x198>)
1a0004c4:	4620      	mov	r0, r4
1a0004c6:	f005 f83d 	bl	1a005544 <strstr>
1a0004ca:	b168      	cbz	r0, 1a0004e8 <requestCallback+0x114>
			{
				//reemplazo los "$" por fin de cadena
				auxpointer1= strstr(request, "$");
1a0004cc:	2124      	movs	r1, #36	; 0x24
1a0004ce:	4620      	mov	r0, r4
1a0004d0:	f005 f811 	bl	1a0054f6 <strchr>
				auxpointer2= strstr(auxpointer1, "$");
1a0004d4:	2124      	movs	r1, #36	; 0x24
1a0004d6:	f005 f80e 	bl	1a0054f6 <strchr>
				auxpointer2[0]=0;
1a0004da:	2300      	movs	r3, #0
1a0004dc:	7003      	strb	r3, [r0, #0]
				panel= stringToInt(&auxpointer1[1]);

//*****enviar orden y esperar a que se ejecute
				requestAnswer = actualPageData;
1a0004de:	4b11      	ldr	r3, [pc, #68]	; (1a000524 <requestCallback+0x150>)
1a0004e0:	681a      	ldr	r2, [r3, #0]
1a0004e2:	4b17      	ldr	r3, [pc, #92]	; (1a000540 <requestCallback+0x16c>)
1a0004e4:	601a      	str	r2, [r3, #0]
1a0004e6:	e006      	b.n	1a0004f6 <requestCallback+0x122>
			}
			else
				requestAnswer = requestError;
1a0004e8:	4b15      	ldr	r3, [pc, #84]	; (1a000540 <requestCallback+0x16c>)
1a0004ea:	4a1d      	ldr	r2, [pc, #116]	; (1a000560 <requestCallback+0x18c>)
1a0004ec:	601a      	str	r2, [r3, #0]
1a0004ee:	e002      	b.n	1a0004f6 <requestCallback+0x122>
		}
	}
	else

		requestAnswer = requestError;
1a0004f0:	4b13      	ldr	r3, [pc, #76]	; (1a000540 <requestCallback+0x16c>)
1a0004f2:	4a1b      	ldr	r2, [pc, #108]	; (1a000560 <requestCallback+0x18c>)
1a0004f4:	601a      	str	r2, [r3, #0]

stdioPrintf(UART_USB, "\n La request limpia es: %s \n",request);
1a0004f6:	9a02      	ldr	r2, [sp, #8]
1a0004f8:	491d      	ldr	r1, [pc, #116]	; (1a000570 <requestCallback+0x19c>)
1a0004fa:	2003      	movs	r0, #3
1a0004fc:	f004 fafe 	bl	1a004afc <stdioPrintf>
stdioPrintf(UART_USB, "\n El metodo es: %s \n",methode);
1a000500:	9a03      	ldr	r2, [sp, #12]
1a000502:	491c      	ldr	r1, [pc, #112]	; (1a000574 <requestCallback+0x1a0>)
1a000504:	2003      	movs	r0, #3
1a000506:	f004 faf9 	bl	1a004afc <stdioPrintf>
stdioPrintf(UART_USB, "\n La version de HTTP es: %s \n",HTTPVersion);
1a00050a:	9a01      	ldr	r2, [sp, #4]
1a00050c:	491a      	ldr	r1, [pc, #104]	; (1a000578 <requestCallback+0x1a4>)
1a00050e:	2003      	movs	r0, #3
1a000510:	f004 faf4 	bl	1a004afc <stdioPrintf>


//Con los tres segmentos separados queda identificar el metodo y luego la solicitud.

	return;
}
1a000514:	b004      	add	sp, #16
1a000516:	bd10      	pop	{r4, pc}
1a000518:	10000139 	.word	0x10000139
1a00051c:	1a007008 	.word	0x1a007008
1a000520:	1a007034 	.word	0x1a007034
1a000524:	10002dd4 	.word	0x10002dd4
1a000528:	1a006b58 	.word	0x1a006b58
1a00052c:	10002dd0 	.word	0x10002dd0
1a000530:	1a006bd0 	.word	0x1a006bd0
1a000534:	1a007054 	.word	0x1a007054
1a000538:	1a007108 	.word	0x1a007108
1a00053c:	1a007058 	.word	0x1a007058
1a000540:	10002dcc 	.word	0x10002dcc
1a000544:	1a006354 	.word	0x1a006354
1a000548:	1a007060 	.word	0x1a007060
1a00054c:	1a006b54 	.word	0x1a006b54
1a000550:	1a007068 	.word	0x1a007068
1a000554:	1a007070 	.word	0x1a007070
1a000558:	1a005f14 	.word	0x1a005f14
1a00055c:	1a007078 	.word	0x1a007078
1a000560:	1a0070f4 	.word	0x1a0070f4
1a000564:	1a007080 	.word	0x1a007080
1a000568:	1a007088 	.word	0x1a007088
1a00056c:	1a007094 	.word	0x1a007094
1a000570:	1a00709c 	.word	0x1a00709c
1a000574:	1a0070bc 	.word	0x1a0070bc
1a000578:	1a0070d4 	.word	0x1a0070d4

1a00057c <ExcecuteHttpServerFsm>:
{
1a00057c:	b510      	push	{r4, lr}
	UARTEsp.uartValue=ESP8266_UART;
1a00057e:	4ba8      	ldr	r3, [pc, #672]	; (1a000820 <ExcecuteHttpServerFsm+0x2a4>)
1a000580:	2205      	movs	r2, #5
1a000582:	701a      	strb	r2, [r3, #0]
	UARTEsp.baudRate=ESP8266_BAUD_RATE;
1a000584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000588:	605a      	str	r2, [r3, #4]
	switch (Esp8266Status)
1a00058a:	4ba6      	ldr	r3, [pc, #664]	; (1a000824 <ExcecuteHttpServerFsm+0x2a8>)
1a00058c:	781b      	ldrb	r3, [r3, #0]
1a00058e:	2b2e      	cmp	r3, #46	; 0x2e
1a000590:	d842      	bhi.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
1a000592:	e8df f013 	tbh	[pc, r3, lsl #1]
1a000596:	002f      	.short	0x002f
1a000598:	005d0047 	.word	0x005d0047
1a00059c:	00c100ab 	.word	0x00c100ab
1a0005a0:	00f800db 	.word	0x00f800db
1a0005a4:	012c010f 	.word	0x012c010f
1a0005a8:	017b0161 	.word	0x017b0161
1a0005ac:	00410195 	.word	0x00410195
1a0005b0:	00410041 	.word	0x00410041
1a0005b4:	00410041 	.word	0x00410041
1a0005b8:	00410041 	.word	0x00410041
1a0005bc:	00410041 	.word	0x00410041
1a0005c0:	01c601ac 	.word	0x01c601ac
1a0005c4:	020701f0 	.word	0x020701f0
1a0005c8:	00410041 	.word	0x00410041
1a0005cc:	00410041 	.word	0x00410041
1a0005d0:	034a0321 	.word	0x034a0321
1a0005d4:	0377036a 	.word	0x0377036a
1a0005d8:	00410041 	.word	0x00410041
1a0005dc:	03a60394 	.word	0x03a60394
1a0005e0:	023b0224 	.word	0x023b0224
1a0005e4:	00790255 	.word	0x00790255
1a0005e8:	0274008f 	.word	0x0274008f
1a0005ec:	029e028b 	.word	0x029e028b
1a0005f0:	02fd02b8 	.word	0x02fd02b8
			uartConfig(Esp8266DebugUart, Esp8266DebugBaudRate);
1a0005f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005f8:	2003      	movs	r0, #3
1a0005fa:	f003 fe59 	bl	1a0042b0 <uartInit>
		if(UARTEspInit(&UARTEsp)==false)
1a0005fe:	4888      	ldr	r0, [pc, #544]	; (1a000820 <ExcecuteHttpServerFsm+0x2a4>)
1a000600:	f000 fc24 	bl	1a000e4c <UARTEspInit>
1a000604:	b148      	cbz	r0, 1a00061a <ExcecuteHttpServerFsm+0x9e>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000606:	f241 3288 	movw	r2, #5000	; 0x1388
1a00060a:	2300      	movs	r3, #0
1a00060c:	4886      	ldr	r0, [pc, #536]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a00060e:	f004 f8d7 	bl	1a0047c0 <delayInit>
		SetEsp8622Status(ESP_SEND_AT);
1a000612:	2001      	movs	r0, #1
1a000614:	f7ff fe74 	bl	1a000300 <SetEsp8622Status>
}
1a000618:	bd10      	pop	{r4, pc}
			stdioPrintf(Esp8266DebugUart, "Error al incializar UART ESP");
1a00061a:	4984      	ldr	r1, [pc, #528]	; (1a00082c <ExcecuteHttpServerFsm+0x2b0>)
1a00061c:	2003      	movs	r0, #3
1a00061e:	f004 fa6d 	bl	1a004afc <stdioPrintf>
1a000622:	e7f0      	b.n	1a000606 <ExcecuteHttpServerFsm+0x8a>
		if (delayRead(&Esp8266Delay))
1a000624:	4880      	ldr	r0, [pc, #512]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000626:	f004 f8db 	bl	1a0047e0 <delayRead>
1a00062a:	2800      	cmp	r0, #0
1a00062c:	d0f4      	beq.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT\r\n");
1a00062e:	4980      	ldr	r1, [pc, #512]	; (1a000830 <ExcecuteHttpServerFsm+0x2b4>)
1a000630:	2005      	movs	r0, #5
1a000632:	f004 fa63 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000636:	4b7f      	ldr	r3, [pc, #508]	; (1a000834 <ExcecuteHttpServerFsm+0x2b8>)
1a000638:	4a7f      	ldr	r2, [pc, #508]	; (1a000838 <ExcecuteHttpServerFsm+0x2bc>)
1a00063a:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a00063c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000640:	2300      	movs	r3, #0
1a000642:	4879      	ldr	r0, [pc, #484]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000644:	f004 f8bc 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_AT);
1a000648:	2002      	movs	r0, #2
1a00064a:	f7ff fe59 	bl	1a000300 <SetEsp8622Status>
1a00064e:	e7e3      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000650:	f7ff fe5c 	bl	1a00030c <IsWaitedResponse>
1a000654:	b970      	cbnz	r0, 1a000674 <ExcecuteHttpServerFsm+0xf8>
		if (delayRead(&Esp8266Delay))
1a000656:	4874      	ldr	r0, [pc, #464]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000658:	f004 f8c2 	bl	1a0047e0 <delayRead>
1a00065c:	2800      	cmp	r0, #0
1a00065e:	d0db      	beq.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000660:	f241 3288 	movw	r2, #5000	; 0x1388
1a000664:	2300      	movs	r3, #0
1a000666:	4870      	ldr	r0, [pc, #448]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000668:	f004 f8aa 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a00066c:	2001      	movs	r0, #1
1a00066e:	f7ff fe47 	bl	1a000300 <SetEsp8622Status>
1a000672:	e7d1      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000674:	f241 3288 	movw	r2, #5000	; 0x1388
1a000678:	2300      	movs	r3, #0
1a00067a:	486b      	ldr	r0, [pc, #428]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a00067c:	f004 f8a0 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a000680:	2028      	movs	r0, #40	; 0x28
1a000682:	f7ff fe3d 	bl	1a000300 <SetEsp8622Status>
1a000686:	e7e6      	b.n	1a000656 <ExcecuteHttpServerFsm+0xda>
		if (delayRead(&Esp8266Delay))
1a000688:	4867      	ldr	r0, [pc, #412]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a00068a:	f004 f8a9 	bl	1a0047e0 <delayRead>
1a00068e:	2800      	cmp	r0, #0
1a000690:	d0c2      	beq.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000692:	496a      	ldr	r1, [pc, #424]	; (1a00083c <ExcecuteHttpServerFsm+0x2c0>)
1a000694:	2005      	movs	r0, #5
1a000696:	f004 fa31 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00069a:	4b66      	ldr	r3, [pc, #408]	; (1a000834 <ExcecuteHttpServerFsm+0x2b8>)
1a00069c:	4a66      	ldr	r2, [pc, #408]	; (1a000838 <ExcecuteHttpServerFsm+0x2bc>)
1a00069e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0006a0:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006a4:	2300      	movs	r3, #0
1a0006a6:	4860      	ldr	r0, [pc, #384]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0006a8:	f004 f88a 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWMODE);
1a0006ac:	2029      	movs	r0, #41	; 0x29
1a0006ae:	f7ff fe27 	bl	1a000300 <SetEsp8622Status>
1a0006b2:	e7b1      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a0006b4:	f7ff fe2a 	bl	1a00030c <IsWaitedResponse>
1a0006b8:	b970      	cbnz	r0, 1a0006d8 <ExcecuteHttpServerFsm+0x15c>
		if (delayRead(&Esp8266Delay))
1a0006ba:	485b      	ldr	r0, [pc, #364]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0006bc:	f004 f890 	bl	1a0047e0 <delayRead>
1a0006c0:	2800      	cmp	r0, #0
1a0006c2:	d0a9      	beq.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0006c4:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006c8:	2300      	movs	r3, #0
1a0006ca:	4857      	ldr	r0, [pc, #348]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0006cc:	f004 f878 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a0006d0:	2028      	movs	r0, #40	; 0x28
1a0006d2:	f7ff fe15 	bl	1a000300 <SetEsp8622Status>
1a0006d6:	e79f      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0006d8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0006dc:	2300      	movs	r3, #0
1a0006de:	4852      	ldr	r0, [pc, #328]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0006e0:	f004 f86e 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CWJAP_CONS);
1a0006e4:	2003      	movs	r0, #3
1a0006e6:	f7ff fe0b 	bl	1a000300 <SetEsp8622Status>
1a0006ea:	e7e6      	b.n	1a0006ba <ExcecuteHttpServerFsm+0x13e>
		if (delayRead(&Esp8266Delay))
1a0006ec:	484e      	ldr	r0, [pc, #312]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0006ee:	f004 f877 	bl	1a0047e0 <delayRead>
1a0006f2:	2800      	cmp	r0, #0
1a0006f4:	d090      	beq.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWJAP?\r\n");
1a0006f6:	4952      	ldr	r1, [pc, #328]	; (1a000840 <ExcecuteHttpServerFsm+0x2c4>)
1a0006f8:	2005      	movs	r0, #5
1a0006fa:	f004 f9ff 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_OK;
1a0006fe:	4b4d      	ldr	r3, [pc, #308]	; (1a000834 <ExcecuteHttpServerFsm+0x2b8>)
1a000700:	4a50      	ldr	r2, [pc, #320]	; (1a000844 <ExcecuteHttpServerFsm+0x2c8>)
1a000702:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000704:	f241 3288 	movw	r2, #5000	; 0x1388
1a000708:	2300      	movs	r3, #0
1a00070a:	4847      	ldr	r0, [pc, #284]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a00070c:	f004 f858 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_1);
1a000710:	2004      	movs	r0, #4
1a000712:	f7ff fdf5 	bl	1a000300 <SetEsp8622Status>
1a000716:	e77f      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000718:	f7ff fdf8 	bl	1a00030c <IsWaitedResponse>
1a00071c:	b978      	cbnz	r0, 1a00073e <ExcecuteHttpServerFsm+0x1c2>
		if (delayRead(&Esp8266Delay))
1a00071e:	4842      	ldr	r0, [pc, #264]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000720:	f004 f85e 	bl	1a0047e0 <delayRead>
1a000724:	2800      	cmp	r0, #0
1a000726:	f43f af77 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00072a:	f241 3288 	movw	r2, #5000	; 0x1388
1a00072e:	2300      	movs	r3, #0
1a000730:	483d      	ldr	r0, [pc, #244]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000732:	f004 f845 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE_SET);
1a000736:	2006      	movs	r0, #6
1a000738:	f7ff fde2 	bl	1a000300 <SetEsp8622Status>
1a00073c:	e76c      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_OK;
1a00073e:	4b3d      	ldr	r3, [pc, #244]	; (1a000834 <ExcecuteHttpServerFsm+0x2b8>)
1a000740:	4a3d      	ldr	r2, [pc, #244]	; (1a000838 <ExcecuteHttpServerFsm+0x2bc>)
1a000742:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_2);
1a000744:	2005      	movs	r0, #5
1a000746:	f7ff fddb 	bl	1a000300 <SetEsp8622Status>
1a00074a:	e7e8      	b.n	1a00071e <ExcecuteHttpServerFsm+0x1a2>
		if (IsWaitedResponse())
1a00074c:	f7ff fdde 	bl	1a00030c <IsWaitedResponse>
1a000750:	b978      	cbnz	r0, 1a000772 <ExcecuteHttpServerFsm+0x1f6>
		if (delayRead(&Esp8266Delay))
1a000752:	4835      	ldr	r0, [pc, #212]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000754:	f004 f844 	bl	1a0047e0 <delayRead>
1a000758:	2800      	cmp	r0, #0
1a00075a:	f43f af5d 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00075e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000762:	2300      	movs	r3, #0
1a000764:	4830      	ldr	r0, [pc, #192]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000766:	f004 f82b 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a00076a:	2001      	movs	r0, #1
1a00076c:	f7ff fdc8 	bl	1a000300 <SetEsp8622Status>
1a000770:	e752      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000772:	f241 3288 	movw	r2, #5000	; 0x1388
1a000776:	2300      	movs	r3, #0
1a000778:	482b      	ldr	r0, [pc, #172]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a00077a:	f004 f821 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a00077e:	2015      	movs	r0, #21
1a000780:	f7ff fdbe 	bl	1a000300 <SetEsp8622Status>
1a000784:	e7e5      	b.n	1a000752 <ExcecuteHttpServerFsm+0x1d6>
		if (delayRead(&Esp8266Delay))
1a000786:	4828      	ldr	r0, [pc, #160]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000788:	f004 f82a 	bl	1a0047e0 <delayRead>
1a00078c:	2800      	cmp	r0, #0
1a00078e:	f43f af43 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000792:	492a      	ldr	r1, [pc, #168]	; (1a00083c <ExcecuteHttpServerFsm+0x2c0>)
1a000794:	2005      	movs	r0, #5
1a000796:	f004 f9b1 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00079a:	4b26      	ldr	r3, [pc, #152]	; (1a000834 <ExcecuteHttpServerFsm+0x2b8>)
1a00079c:	4a26      	ldr	r2, [pc, #152]	; (1a000838 <ExcecuteHttpServerFsm+0x2bc>)
1a00079e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0007a0:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007a4:	2300      	movs	r3, #0
1a0007a6:	4820      	ldr	r0, [pc, #128]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0007a8:	f004 f80a 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWMODE_SET);
1a0007ac:	2007      	movs	r0, #7
1a0007ae:	f7ff fda7 	bl	1a000300 <SetEsp8622Status>
1a0007b2:	e731      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a0007b4:	f7ff fdaa 	bl	1a00030c <IsWaitedResponse>
1a0007b8:	b978      	cbnz	r0, 1a0007da <ExcecuteHttpServerFsm+0x25e>
		if (delayRead(&Esp8266Delay))
1a0007ba:	481b      	ldr	r0, [pc, #108]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0007bc:	f004 f810 	bl	1a0047e0 <delayRead>
1a0007c0:	2800      	cmp	r0, #0
1a0007c2:	f43f af29 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007c6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007ca:	2300      	movs	r3, #0
1a0007cc:	4816      	ldr	r0, [pc, #88]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0007ce:	f003 fff7 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0007d2:	2001      	movs	r0, #1
1a0007d4:	f7ff fd94 	bl	1a000300 <SetEsp8622Status>
1a0007d8:	e71e      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007da:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007de:	2300      	movs	r3, #0
1a0007e0:	4811      	ldr	r0, [pc, #68]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0007e2:	f003 ffed 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CWJAP_SET);
1a0007e6:	2008      	movs	r0, #8
1a0007e8:	f7ff fd8a 	bl	1a000300 <SetEsp8622Status>
1a0007ec:	e7e5      	b.n	1a0007ba <ExcecuteHttpServerFsm+0x23e>
		if (delayRead(&Esp8266Delay))
1a0007ee:	480e      	ldr	r0, [pc, #56]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a0007f0:	f003 fff6 	bl	1a0047e0 <delayRead>
1a0007f4:	2800      	cmp	r0, #0
1a0007f6:	f43f af0f 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CWJAP=\"%s\",\"%s\"", WifiName,
1a0007fa:	4b13      	ldr	r3, [pc, #76]	; (1a000848 <ExcecuteHttpServerFsm+0x2cc>)
1a0007fc:	4a13      	ldr	r2, [pc, #76]	; (1a00084c <ExcecuteHttpServerFsm+0x2d0>)
1a0007fe:	4914      	ldr	r1, [pc, #80]	; (1a000850 <ExcecuteHttpServerFsm+0x2d4>)
1a000800:	2005      	movs	r0, #5
1a000802:	f004 f97b 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_1;
1a000806:	4b0b      	ldr	r3, [pc, #44]	; (1a000834 <ExcecuteHttpServerFsm+0x2b8>)
1a000808:	4a12      	ldr	r2, [pc, #72]	; (1a000854 <ExcecuteHttpServerFsm+0x2d8>)
1a00080a:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a00080c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000810:	2300      	movs	r3, #0
1a000812:	4805      	ldr	r0, [pc, #20]	; (1a000828 <ExcecuteHttpServerFsm+0x2ac>)
1a000814:	f003 ffd4 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_1);
1a000818:	2009      	movs	r0, #9
1a00081a:	f7ff fd71 	bl	1a000300 <SetEsp8622Status>
1a00081e:	e6fb      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
1a000820:	10000164 	.word	0x10000164
1a000824:	1000015c 	.word	0x1000015c
1a000828:	10000140 	.word	0x10000140
1a00082c:	1a005e00 	.word	0x1a005e00
1a000830:	1a005e20 	.word	0x1a005e20
1a000834:	10000158 	.word	0x10000158
1a000838:	1a006b48 	.word	0x1a006b48
1a00083c:	1a005e28 	.word	0x1a005e28
1a000840:	1a005e38 	.word	0x1a005e38
1a000844:	1a006b38 	.word	0x1a006b38
1a000848:	100001a8 	.word	0x100001a8
1a00084c:	10000188 	.word	0x10000188
1a000850:	1a005e44 	.word	0x1a005e44
1a000854:	1a006b1c 	.word	0x1a006b1c
		if (IsWaitedResponse())
1a000858:	f7ff fd58 	bl	1a00030c <IsWaitedResponse>
1a00085c:	b978      	cbnz	r0, 1a00087e <ExcecuteHttpServerFsm+0x302>
		if (delayRead(&Esp8266Delay))
1a00085e:	48b5      	ldr	r0, [pc, #724]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000860:	f003 ffbe 	bl	1a0047e0 <delayRead>
1a000864:	2800      	cmp	r0, #0
1a000866:	f43f aed7 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00086a:	f241 3288 	movw	r2, #5000	; 0x1388
1a00086e:	2300      	movs	r3, #0
1a000870:	48b0      	ldr	r0, [pc, #704]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000872:	f003 ffa5 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000876:	2001      	movs	r0, #1
1a000878:	f7ff fd42 	bl	1a000300 <SetEsp8622Status>
1a00087c:	e6cc      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_CWJAP_2;
1a00087e:	4bae      	ldr	r3, [pc, #696]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a000880:	4aae      	ldr	r2, [pc, #696]	; (1a000b3c <ExcecuteHttpServerFsm+0x5c0>)
1a000882:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_2);
1a000884:	200a      	movs	r0, #10
1a000886:	f7ff fd3b 	bl	1a000300 <SetEsp8622Status>
1a00088a:	e7e8      	b.n	1a00085e <ExcecuteHttpServerFsm+0x2e2>
		if (IsWaitedResponse())
1a00088c:	f7ff fd3e 	bl	1a00030c <IsWaitedResponse>
1a000890:	b978      	cbnz	r0, 1a0008b2 <ExcecuteHttpServerFsm+0x336>
		if (delayRead(&Esp8266Delay))
1a000892:	48a8      	ldr	r0, [pc, #672]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000894:	f003 ffa4 	bl	1a0047e0 <delayRead>
1a000898:	2800      	cmp	r0, #0
1a00089a:	f43f aebd 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00089e:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008a2:	2300      	movs	r3, #0
1a0008a4:	48a3      	ldr	r0, [pc, #652]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0008a6:	f003 ff8b 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0008aa:	2001      	movs	r0, #1
1a0008ac:	f7ff fd28 	bl	1a000300 <SetEsp8622Status>
1a0008b0:	e6b2      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_OK;
1a0008b2:	4ba1      	ldr	r3, [pc, #644]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a0008b4:	4aa2      	ldr	r2, [pc, #648]	; (1a000b40 <ExcecuteHttpServerFsm+0x5c4>)
1a0008b6:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_3);
1a0008b8:	200b      	movs	r0, #11
1a0008ba:	f7ff fd21 	bl	1a000300 <SetEsp8622Status>
1a0008be:	e7e8      	b.n	1a000892 <ExcecuteHttpServerFsm+0x316>
		if (IsWaitedResponse())
1a0008c0:	f7ff fd24 	bl	1a00030c <IsWaitedResponse>
1a0008c4:	b978      	cbnz	r0, 1a0008e6 <ExcecuteHttpServerFsm+0x36a>
		if (delayRead(&Esp8266Delay))
1a0008c6:	489b      	ldr	r0, [pc, #620]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0008c8:	f003 ff8a 	bl	1a0047e0 <delayRead>
1a0008cc:	2800      	cmp	r0, #0
1a0008ce:	f43f aea3 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0008d2:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008d6:	2300      	movs	r3, #0
1a0008d8:	4896      	ldr	r0, [pc, #600]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0008da:	f003 ff71 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0008de:	2001      	movs	r0, #1
1a0008e0:	f7ff fd0e 	bl	1a000300 <SetEsp8622Status>
1a0008e4:	e698      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a0008e6:	2015      	movs	r0, #21
1a0008e8:	f7ff fd0a 	bl	1a000300 <SetEsp8622Status>
1a0008ec:	e7eb      	b.n	1a0008c6 <ExcecuteHttpServerFsm+0x34a>
		if (delayRead(&Esp8266Delay))
1a0008ee:	4891      	ldr	r0, [pc, #580]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0008f0:	f003 ff76 	bl	1a0047e0 <delayRead>
1a0008f4:	2800      	cmp	r0, #0
1a0008f6:	f43f ae8f 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CIPMUX=1\r\n");
1a0008fa:	4992      	ldr	r1, [pc, #584]	; (1a000b44 <ExcecuteHttpServerFsm+0x5c8>)
1a0008fc:	2005      	movs	r0, #5
1a0008fe:	f004 f8fd 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000902:	4b8d      	ldr	r3, [pc, #564]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a000904:	4a8e      	ldr	r2, [pc, #568]	; (1a000b40 <ExcecuteHttpServerFsm+0x5c4>)
1a000906:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000908:	f241 3288 	movw	r2, #5000	; 0x1388
1a00090c:	2300      	movs	r3, #0
1a00090e:	4889      	ldr	r0, [pc, #548]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000910:	f003 ff56 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPMUX);
1a000914:	2016      	movs	r0, #22
1a000916:	f7ff fcf3 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a00091a:	4b8b      	ldr	r3, [pc, #556]	; (1a000b48 <ExcecuteHttpServerFsm+0x5cc>)
1a00091c:	2200      	movs	r2, #0
1a00091e:	701a      	strb	r2, [r3, #0]
1a000920:	e67a      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000922:	f7ff fcf3 	bl	1a00030c <IsWaitedResponse>
1a000926:	b9e0      	cbnz	r0, 1a000962 <ExcecuteHttpServerFsm+0x3e6>
		if (delayRead(&Esp8266Delay))
1a000928:	4882      	ldr	r0, [pc, #520]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a00092a:	f003 ff59 	bl	1a0047e0 <delayRead>
1a00092e:	2800      	cmp	r0, #0
1a000930:	f43f ae72 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000934:	f241 3288 	movw	r2, #5000	; 0x1388
1a000938:	2300      	movs	r3, #0
1a00093a:	487e      	ldr	r0, [pc, #504]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a00093c:	f003 ff40 	bl	1a0047c0 <delayInit>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%d\r\n", auxIndex);
1a000940:	4c81      	ldr	r4, [pc, #516]	; (1a000b48 <ExcecuteHttpServerFsm+0x5cc>)
1a000942:	7822      	ldrb	r2, [r4, #0]
1a000944:	4981      	ldr	r1, [pc, #516]	; (1a000b4c <ExcecuteHttpServerFsm+0x5d0>)
1a000946:	2005      	movs	r0, #5
1a000948:	f004 f8d8 	bl	1a004afc <stdioPrintf>
			if (++auxIndex >= 4)
1a00094c:	7823      	ldrb	r3, [r4, #0]
1a00094e:	3301      	adds	r3, #1
1a000950:	b2db      	uxtb	r3, r3
1a000952:	7023      	strb	r3, [r4, #0]
1a000954:	2b03      	cmp	r3, #3
1a000956:	f67f ae5f 	bls.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
				SetEsp8622Status(ESP_CIPMUX_SEND);
1a00095a:	2015      	movs	r0, #21
1a00095c:	f7ff fcd0 	bl	1a000300 <SetEsp8622Status>
1a000960:	e65a      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000962:	f241 3288 	movw	r2, #5000	; 0x1388
1a000966:	2300      	movs	r3, #0
1a000968:	4872      	ldr	r0, [pc, #456]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a00096a:	f003 ff29 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPSERVER);
1a00096e:	2017      	movs	r0, #23
1a000970:	f7ff fcc6 	bl	1a000300 <SetEsp8622Status>
1a000974:	e7d8      	b.n	1a000928 <ExcecuteHttpServerFsm+0x3ac>
		if (delayRead(&Esp8266Delay))
1a000976:	486f      	ldr	r0, [pc, #444]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000978:	f003 ff32 	bl	1a0047e0 <delayRead>
1a00097c:	2800      	cmp	r0, #0
1a00097e:	f43f ae4b 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CIPSERVER=1,80\r\n");
1a000982:	4973      	ldr	r1, [pc, #460]	; (1a000b50 <ExcecuteHttpServerFsm+0x5d4>)
1a000984:	2005      	movs	r0, #5
1a000986:	f004 f8b9 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00098a:	4b6b      	ldr	r3, [pc, #428]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a00098c:	4a6c      	ldr	r2, [pc, #432]	; (1a000b40 <ExcecuteHttpServerFsm+0x5c4>)
1a00098e:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000990:	f241 3288 	movw	r2, #5000	; 0x1388
1a000994:	2300      	movs	r3, #0
1a000996:	4867      	ldr	r0, [pc, #412]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000998:	f003 ff12 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPSERVER);
1a00099c:	2018      	movs	r0, #24
1a00099e:	f7ff fcaf 	bl	1a000300 <SetEsp8622Status>
1a0009a2:	e639      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a0009a4:	f7ff fcb2 	bl	1a00030c <IsWaitedResponse>
1a0009a8:	b978      	cbnz	r0, 1a0009ca <ExcecuteHttpServerFsm+0x44e>
		if (delayRead(&Esp8266Delay))
1a0009aa:	4862      	ldr	r0, [pc, #392]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0009ac:	f003 ff18 	bl	1a0047e0 <delayRead>
1a0009b0:	2800      	cmp	r0, #0
1a0009b2:	f43f ae31 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009b6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009ba:	2300      	movs	r3, #0
1a0009bc:	485d      	ldr	r0, [pc, #372]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0009be:	f003 feff 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0009c2:	2001      	movs	r0, #1
1a0009c4:	f7ff fc9c 	bl	1a000300 <SetEsp8622Status>
1a0009c8:	e626      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009ca:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009ce:	2300      	movs	r3, #0
1a0009d0:	4858      	ldr	r0, [pc, #352]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0009d2:	f003 fef5 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a0009d6:	2025      	movs	r0, #37	; 0x25
1a0009d8:	f7ff fc92 	bl	1a000300 <SetEsp8622Status>
1a0009dc:	e7e5      	b.n	1a0009aa <ExcecuteHttpServerFsm+0x42e>
		if (delayRead(&Esp8266Delay))
1a0009de:	4855      	ldr	r0, [pc, #340]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a0009e0:	f003 fefe 	bl	1a0047e0 <delayRead>
1a0009e4:	2800      	cmp	r0, #0
1a0009e6:	f43f ae17 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioPrintf(ESP8266_UART, "AT+CIFSR\r\n");
1a0009ea:	495a      	ldr	r1, [pc, #360]	; (1a000b54 <ExcecuteHttpServerFsm+0x5d8>)
1a0009ec:	2005      	movs	r0, #5
1a0009ee:	f004 f885 	bl	1a004afc <stdioPrintf>
			Esp8266ResponseToWait = Response_CIFSR;
1a0009f2:	4b51      	ldr	r3, [pc, #324]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a0009f4:	4a58      	ldr	r2, [pc, #352]	; (1a000b58 <ExcecuteHttpServerFsm+0x5dc>)
1a0009f6:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009f8:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009fc:	2300      	movs	r3, #0
1a0009fe:	484d      	ldr	r0, [pc, #308]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000a00:	f003 fede 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIFSR);
1a000a04:	2026      	movs	r0, #38	; 0x26
1a000a06:	f7ff fc7b 	bl	1a000300 <SetEsp8622Status>
1a000a0a:	e605      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000a0c:	f7ff fc7e 	bl	1a00030c <IsWaitedResponse>
1a000a10:	b978      	cbnz	r0, 1a000a32 <ExcecuteHttpServerFsm+0x4b6>
		if (delayRead(&Esp8266Delay))
1a000a12:	4848      	ldr	r0, [pc, #288]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000a14:	f003 fee4 	bl	1a0047e0 <delayRead>
1a000a18:	2800      	cmp	r0, #0
1a000a1a:	f43f adfd 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a1e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a22:	2300      	movs	r3, #0
1a000a24:	4843      	ldr	r0, [pc, #268]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000a26:	f003 fecb 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a000a2a:	2025      	movs	r0, #37	; 0x25
1a000a2c:	f7ff fc68 	bl	1a000300 <SetEsp8622Status>
1a000a30:	e5f2      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_LOAD_IP);
1a000a32:	2027      	movs	r0, #39	; 0x27
1a000a34:	f7ff fc64 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a000a38:	4b43      	ldr	r3, [pc, #268]	; (1a000b48 <ExcecuteHttpServerFsm+0x5cc>)
1a000a3a:	2200      	movs	r2, #0
1a000a3c:	701a      	strb	r2, [r3, #0]
1a000a3e:	e7e8      	b.n	1a000a12 <ExcecuteHttpServerFsm+0x496>
		if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000a40:	220a      	movs	r2, #10
1a000a42:	4946      	ldr	r1, [pc, #280]	; (1a000b5c <ExcecuteHttpServerFsm+0x5e0>)
1a000a44:	4846      	ldr	r0, [pc, #280]	; (1a000b60 <ExcecuteHttpServerFsm+0x5e4>)
1a000a46:	f000 fa29 	bl	1a000e9c <receiveEspByte>
1a000a4a:	2800      	cmp	r0, #0
1a000a4c:	f43f ade4 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			if (byteReceived != '"')
1a000a50:	4b42      	ldr	r3, [pc, #264]	; (1a000b5c <ExcecuteHttpServerFsm+0x5e0>)
1a000a52:	781a      	ldrb	r2, [r3, #0]
1a000a54:	2a22      	cmp	r2, #34	; 0x22
1a000a56:	d006      	beq.n	1a000a66 <ExcecuteHttpServerFsm+0x4ea>
				WifiIp[auxIndex] = byteReceived;
1a000a58:	493b      	ldr	r1, [pc, #236]	; (1a000b48 <ExcecuteHttpServerFsm+0x5cc>)
1a000a5a:	780b      	ldrb	r3, [r1, #0]
1a000a5c:	4841      	ldr	r0, [pc, #260]	; (1a000b64 <ExcecuteHttpServerFsm+0x5e8>)
1a000a5e:	54c2      	strb	r2, [r0, r3]
				auxIndex++;
1a000a60:	3301      	adds	r3, #1
1a000a62:	700b      	strb	r3, [r1, #0]
1a000a64:	e5d8      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
				WifiIp[auxIndex] = '\0';
1a000a66:	4b38      	ldr	r3, [pc, #224]	; (1a000b48 <ExcecuteHttpServerFsm+0x5cc>)
1a000a68:	781b      	ldrb	r3, [r3, #0]
1a000a6a:	4a3e      	ldr	r2, [pc, #248]	; (1a000b64 <ExcecuteHttpServerFsm+0x5e8>)
1a000a6c:	2100      	movs	r1, #0
1a000a6e:	54d1      	strb	r1, [r2, r3]
				Esp8266ResponseToWait = Response_IPD;
1a000a70:	4b31      	ldr	r3, [pc, #196]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a000a72:	4a3d      	ldr	r2, [pc, #244]	; (1a000b68 <ExcecuteHttpServerFsm+0x5ec>)
1a000a74:	601a      	str	r2, [r3, #0]
				SetEsp8622Status(ESP_WAIT_IPD);
1a000a76:	202a      	movs	r0, #42	; 0x2a
1a000a78:	f7ff fc42 	bl	1a000300 <SetEsp8622Status>
1a000a7c:	e5cc      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000a7e:	f7ff fc45 	bl	1a00030c <IsWaitedResponse>
1a000a82:	b978      	cbnz	r0, 1a000aa4 <ExcecuteHttpServerFsm+0x528>
		if (delayRead(&Esp8266Delay))
1a000a84:	482b      	ldr	r0, [pc, #172]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000a86:	f003 feab 	bl	1a0047e0 <delayRead>
1a000a8a:	2800      	cmp	r0, #0
1a000a8c:	f43f adc4 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a90:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a94:	2300      	movs	r3, #0
1a000a96:	4827      	ldr	r0, [pc, #156]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000a98:	f003 fe92 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a000a9c:	202a      	movs	r0, #42	; 0x2a
1a000a9e:	f7ff fc2f 	bl	1a000300 <SetEsp8622Status>
1a000aa2:	e5b9      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_GET_REQUEST_ID);
1a000aa4:	202b      	movs	r0, #43	; 0x2b
1a000aa6:	f7ff fc2b 	bl	1a000300 <SetEsp8622Status>
1a000aaa:	e7eb      	b.n	1a000a84 <ExcecuteHttpServerFsm+0x508>
		if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000aac:	220a      	movs	r2, #10
1a000aae:	492b      	ldr	r1, [pc, #172]	; (1a000b5c <ExcecuteHttpServerFsm+0x5e0>)
1a000ab0:	482b      	ldr	r0, [pc, #172]	; (1a000b60 <ExcecuteHttpServerFsm+0x5e4>)
1a000ab2:	f000 f9f3 	bl	1a000e9c <receiveEspByte>
1a000ab6:	2800      	cmp	r0, #0
1a000ab8:	f43f adae 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			CurrentConnectionId = byteReceived;
1a000abc:	4b27      	ldr	r3, [pc, #156]	; (1a000b5c <ExcecuteHttpServerFsm+0x5e0>)
1a000abe:	781a      	ldrb	r2, [r3, #0]
1a000ac0:	4b2a      	ldr	r3, [pc, #168]	; (1a000b6c <ExcecuteHttpServerFsm+0x5f0>)
1a000ac2:	701a      	strb	r2, [r3, #0]
			Esp8266ResponseToWait = Response_COMMA;
1a000ac4:	4b1c      	ldr	r3, [pc, #112]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a000ac6:	4a2a      	ldr	r2, [pc, #168]	; (1a000b70 <ExcecuteHttpServerFsm+0x5f4>)
1a000ac8:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_COMMA);
1a000aca:	202c      	movs	r0, #44	; 0x2c
1a000acc:	f7ff fc18 	bl	1a000300 <SetEsp8622Status>
1a000ad0:	e5a2      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000ad2:	f7ff fc1b 	bl	1a00030c <IsWaitedResponse>
1a000ad6:	b990      	cbnz	r0, 1a000afe <ExcecuteHttpServerFsm+0x582>
		if (delayRead(&Esp8266Delay))
1a000ad8:	4816      	ldr	r0, [pc, #88]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000ada:	f003 fe81 	bl	1a0047e0 <delayRead>
1a000ade:	2800      	cmp	r0, #0
1a000ae0:	f43f ad9a 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			Esp8266ResponseToWait = Response_IPD;
1a000ae4:	4b14      	ldr	r3, [pc, #80]	; (1a000b38 <ExcecuteHttpServerFsm+0x5bc>)
1a000ae6:	4a20      	ldr	r2, [pc, #128]	; (1a000b68 <ExcecuteHttpServerFsm+0x5ec>)
1a000ae8:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000aea:	f241 3288 	movw	r2, #5000	; 0x1388
1a000aee:	2300      	movs	r3, #0
1a000af0:	4810      	ldr	r0, [pc, #64]	; (1a000b34 <ExcecuteHttpServerFsm+0x5b8>)
1a000af2:	f003 fe65 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a000af6:	202a      	movs	r0, #42	; 0x2a
1a000af8:	f7ff fc02 	bl	1a000300 <SetEsp8622Status>
1a000afc:	e58c      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			SetEsp8622Status(ESP_GET_REQUEST_LENGTH);
1a000afe:	202d      	movs	r0, #45	; 0x2d
1a000b00:	f7ff fbfe 	bl	1a000300 <SetEsp8622Status>
1a000b04:	e7e8      	b.n	1a000ad8 <ExcecuteHttpServerFsm+0x55c>
		if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000b06:	220a      	movs	r2, #10
1a000b08:	4914      	ldr	r1, [pc, #80]	; (1a000b5c <ExcecuteHttpServerFsm+0x5e0>)
1a000b0a:	4815      	ldr	r0, [pc, #84]	; (1a000b60 <ExcecuteHttpServerFsm+0x5e4>)
1a000b0c:	f000 f9c6 	bl	1a000e9c <receiveEspByte>
1a000b10:	2800      	cmp	r0, #0
1a000b12:	f43f ad81 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			if (byteReceived != ':'&& byteReceived >= '0' && byteReceived <= '9')
1a000b16:	4b11      	ldr	r3, [pc, #68]	; (1a000b5c <ExcecuteHttpServerFsm+0x5e0>)
1a000b18:	781b      	ldrb	r3, [r3, #0]
1a000b1a:	2b3a      	cmp	r3, #58	; 0x3a
1a000b1c:	d003      	beq.n	1a000b26 <ExcecuteHttpServerFsm+0x5aa>
1a000b1e:	2b2f      	cmp	r3, #47	; 0x2f
1a000b20:	d901      	bls.n	1a000b26 <ExcecuteHttpServerFsm+0x5aa>
1a000b22:	2b39      	cmp	r3, #57	; 0x39
1a000b24:	d928      	bls.n	1a000b78 <ExcecuteHttpServerFsm+0x5fc>
				i=0; //reinicio el indice del request
1a000b26:	4b13      	ldr	r3, [pc, #76]	; (1a000b74 <ExcecuteHttpServerFsm+0x5f8>)
1a000b28:	2200      	movs	r2, #0
1a000b2a:	801a      	strh	r2, [r3, #0]
				SetEsp8622Status(ESP_GET_REQUEST);
1a000b2c:	202e      	movs	r0, #46	; 0x2e
1a000b2e:	f7ff fbe7 	bl	1a000300 <SetEsp8622Status>
1a000b32:	e571      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
1a000b34:	10000140 	.word	0x10000140
1a000b38:	10000158 	.word	0x10000158
1a000b3c:	1a006b2c 	.word	0x1a006b2c
1a000b40:	1a006b48 	.word	0x1a006b48
1a000b44:	1a005e58 	.word	0x1a005e58
1a000b48:	100001c6 	.word	0x100001c6
1a000b4c:	1a005e68 	.word	0x1a005e68
1a000b50:	1a005e7c 	.word	0x1a005e7c
1a000b54:	1a005e90 	.word	0x1a005e90
1a000b58:	1a006b08 	.word	0x1a006b08
1a000b5c:	100001c7 	.word	0x100001c7
1a000b60:	10000164 	.word	0x10000164
1a000b64:	10000174 	.word	0x10000174
1a000b68:	1a006b40 	.word	0x1a006b40
1a000b6c:	10000138 	.word	0x10000138
1a000b70:	1a006b18 	.word	0x1a006b18
1a000b74:	100001c8 	.word	0x100001c8
						+ (byteReceived - '0'); //guardo el valor de la longituda de la request.
1a000b78:	496b      	ldr	r1, [pc, #428]	; (1a000d28 <ExcecuteHttpServerFsm+0x7ac>)
1a000b7a:	780a      	ldrb	r2, [r1, #0]
1a000b7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000b80:	0050      	lsls	r0, r2, #1
1a000b82:	4403      	add	r3, r0
1a000b84:	3b30      	subs	r3, #48	; 0x30
				CurrentReqLength = (CurrentReqLength * 10)
1a000b86:	700b      	strb	r3, [r1, #0]
				SetEsp8622Status(ESP_GET_REQUEST_LENGTH);
1a000b88:	202d      	movs	r0, #45	; 0x2d
1a000b8a:	f7ff fbb9 	bl	1a000300 <SetEsp8622Status>
1a000b8e:	e543      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			if ( receiveEspByte(&UARTEsp,&byteReceived,10))
1a000b90:	220a      	movs	r2, #10
1a000b92:	4966      	ldr	r1, [pc, #408]	; (1a000d2c <ExcecuteHttpServerFsm+0x7b0>)
1a000b94:	4866      	ldr	r0, [pc, #408]	; (1a000d30 <ExcecuteHttpServerFsm+0x7b4>)
1a000b96:	f000 f981 	bl	1a000e9c <receiveEspByte>
1a000b9a:	2800      	cmp	r0, #0
1a000b9c:	f43f ad3c 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
				if (byteReceived != 0x0D && byteReceived != 0x0A ) //si es distinto de CR o LF (enter)
1a000ba0:	4b62      	ldr	r3, [pc, #392]	; (1a000d2c <ExcecuteHttpServerFsm+0x7b0>)
1a000ba2:	781b      	ldrb	r3, [r3, #0]
1a000ba4:	2b0d      	cmp	r3, #13
1a000ba6:	d001      	beq.n	1a000bac <ExcecuteHttpServerFsm+0x630>
1a000ba8:	2b0a      	cmp	r3, #10
1a000baa:	d10b      	bne.n	1a000bc4 <ExcecuteHttpServerFsm+0x648>
					rawRequest[i]=0;
1a000bac:	4b61      	ldr	r3, [pc, #388]	; (1a000d34 <ExcecuteHttpServerFsm+0x7b8>)
1a000bae:	8819      	ldrh	r1, [r3, #0]
1a000bb0:	4861      	ldr	r0, [pc, #388]	; (1a000d38 <ExcecuteHttpServerFsm+0x7bc>)
1a000bb2:	2300      	movs	r3, #0
1a000bb4:	5443      	strb	r3, [r0, r1]
					requestCallback(rawRequest, i); //envio al callback del request la request completa (GET + algo) y el tamaño de la request
1a000bb6:	b2c9      	uxtb	r1, r1
1a000bb8:	f7ff fc0c 	bl	1a0003d4 <requestCallback>
					SetEsp8622Status(ESP_SEND_CIPSEND);
1a000bbc:	201d      	movs	r0, #29
1a000bbe:	f7ff fb9f 	bl	1a000300 <SetEsp8622Status>
1a000bc2:	e529      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
					rawRequest[i]=byteReceived;
1a000bc4:	495b      	ldr	r1, [pc, #364]	; (1a000d34 <ExcecuteHttpServerFsm+0x7b8>)
1a000bc6:	880a      	ldrh	r2, [r1, #0]
1a000bc8:	485b      	ldr	r0, [pc, #364]	; (1a000d38 <ExcecuteHttpServerFsm+0x7bc>)
1a000bca:	5483      	strb	r3, [r0, r2]
					i++;
1a000bcc:	3201      	adds	r2, #1
1a000bce:	800a      	strh	r2, [r1, #0]
					SetEsp8622Status(ESP_GET_REQUEST);
1a000bd0:	202e      	movs	r0, #46	; 0x2e
1a000bd2:	f7ff fb95 	bl	1a000300 <SetEsp8622Status>
1a000bd6:	e51f      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		lenghtOfHttpLines = (strlen(PointerOfHttpWebPage));
1a000bd8:	4b58      	ldr	r3, [pc, #352]	; (1a000d3c <ExcecuteHttpServerFsm+0x7c0>)
1a000bda:	681c      	ldr	r4, [r3, #0]
1a000bdc:	4620      	mov	r0, r4
1a000bde:	f004 fca9 	bl	1a005534 <strlen>
1a000be2:	b283      	uxth	r3, r0
		if (lenghtOfHttpLines >= MAX_HTTP_WEB_LENGHT)
1a000be4:	f240 72fe 	movw	r2, #2046	; 0x7fe
1a000be8:	4293      	cmp	r3, r2
1a000bea:	d812      	bhi.n	1a000c12 <ExcecuteHttpServerFsm+0x696>
		stdioPrintf(ESP8266_UART, "AT+CIPSEND=%c,%d\r\n", CurrentConnectionId,
1a000bec:	4a54      	ldr	r2, [pc, #336]	; (1a000d40 <ExcecuteHttpServerFsm+0x7c4>)
1a000bee:	7812      	ldrb	r2, [r2, #0]
1a000bf0:	4954      	ldr	r1, [pc, #336]	; (1a000d44 <ExcecuteHttpServerFsm+0x7c8>)
1a000bf2:	2005      	movs	r0, #5
1a000bf4:	f003 ff82 	bl	1a004afc <stdioPrintf>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000bf8:	f241 3288 	movw	r2, #5000	; 0x1388
1a000bfc:	2300      	movs	r3, #0
1a000bfe:	4852      	ldr	r0, [pc, #328]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000c00:	f003 fdde 	bl	1a0047c0 <delayInit>
		SetEsp8622Status(ESP_WAIT_CIPSEND);
1a000c04:	201e      	movs	r0, #30
1a000c06:	f7ff fb7b 	bl	1a000300 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_OK;
1a000c0a:	4b50      	ldr	r3, [pc, #320]	; (1a000d4c <ExcecuteHttpServerFsm+0x7d0>)
1a000c0c:	4a50      	ldr	r2, [pc, #320]	; (1a000d50 <ExcecuteHttpServerFsm+0x7d4>)
1a000c0e:	601a      	str	r2, [r3, #0]
		break;
1a000c10:	e502      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			stdioSprintf(PointerOfHttpWebPage,
1a000c12:	f240 72ff 	movw	r2, #2047	; 0x7ff
1a000c16:	494f      	ldr	r1, [pc, #316]	; (1a000d54 <ExcecuteHttpServerFsm+0x7d8>)
1a000c18:	4620      	mov	r0, r4
1a000c1a:	f003 ff7d 	bl	1a004b18 <stdioSprintf>
			lenghtOfHttpLines = (strlen(PointerOfHttpWebPage));
1a000c1e:	4b47      	ldr	r3, [pc, #284]	; (1a000d3c <ExcecuteHttpServerFsm+0x7c0>)
1a000c20:	6818      	ldr	r0, [r3, #0]
1a000c22:	f004 fc87 	bl	1a005534 <strlen>
1a000c26:	b283      	uxth	r3, r0
1a000c28:	e7e0      	b.n	1a000bec <ExcecuteHttpServerFsm+0x670>
		if (IsWaitedResponse())
1a000c2a:	f7ff fb6f 	bl	1a00030c <IsWaitedResponse>
1a000c2e:	b990      	cbnz	r0, 1a000c56 <ExcecuteHttpServerFsm+0x6da>
		if (delayRead(&Esp8266Delay))
1a000c30:	4845      	ldr	r0, [pc, #276]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000c32:	f003 fdd5 	bl	1a0047e0 <delayRead>
1a000c36:	2800      	cmp	r0, #0
1a000c38:	f43f acee 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c3c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c40:	2300      	movs	r3, #0
1a000c42:	4841      	ldr	r0, [pc, #260]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000c44:	f003 fdbc 	bl	1a0047c0 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000c48:	4b40      	ldr	r3, [pc, #256]	; (1a000d4c <ExcecuteHttpServerFsm+0x7d0>)
1a000c4a:	4a43      	ldr	r2, [pc, #268]	; (1a000d58 <ExcecuteHttpServerFsm+0x7dc>)
1a000c4c:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000c4e:	202a      	movs	r0, #42	; 0x2a
1a000c50:	f7ff fb56 	bl	1a000300 <SetEsp8622Status>
1a000c54:	e4e0      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c56:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c5a:	2300      	movs	r3, #0
1a000c5c:	483a      	ldr	r0, [pc, #232]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000c5e:	f003 fdaf 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_HTTP);
1a000c62:	201f      	movs	r0, #31
1a000c64:	f7ff fb4c 	bl	1a000300 <SetEsp8622Status>
1a000c68:	e7e2      	b.n	1a000c30 <ExcecuteHttpServerFsm+0x6b4>
		stdioPrintf(ESP8266_UART, "%s",PointerOfHttpWebPage);
1a000c6a:	4b34      	ldr	r3, [pc, #208]	; (1a000d3c <ExcecuteHttpServerFsm+0x7c0>)
1a000c6c:	681a      	ldr	r2, [r3, #0]
1a000c6e:	493b      	ldr	r1, [pc, #236]	; (1a000d5c <ExcecuteHttpServerFsm+0x7e0>)
1a000c70:	2005      	movs	r0, #5
1a000c72:	f003 ff43 	bl	1a004afc <stdioPrintf>
		SetEsp8622Status(ESP_WAIT_HTTP);
1a000c76:	2020      	movs	r0, #32
1a000c78:	f7ff fb42 	bl	1a000300 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_SEND_OK;
1a000c7c:	4b33      	ldr	r3, [pc, #204]	; (1a000d4c <ExcecuteHttpServerFsm+0x7d0>)
1a000c7e:	4a38      	ldr	r2, [pc, #224]	; (1a000d60 <ExcecuteHttpServerFsm+0x7e4>)
1a000c80:	601a      	str	r2, [r3, #0]
		break;
1a000c82:	e4c9      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000c84:	f7ff fb42 	bl	1a00030c <IsWaitedResponse>
1a000c88:	b978      	cbnz	r0, 1a000caa <ExcecuteHttpServerFsm+0x72e>
		if (delayRead(&Esp8266Delay))
1a000c8a:	482f      	ldr	r0, [pc, #188]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000c8c:	f003 fda8 	bl	1a0047e0 <delayRead>
1a000c90:	2800      	cmp	r0, #0
1a000c92:	f43f acc1 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c96:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c9a:	2300      	movs	r3, #0
1a000c9c:	482a      	ldr	r0, [pc, #168]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000c9e:	f003 fd8f 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPSEND);
1a000ca2:	201d      	movs	r0, #29
1a000ca4:	f7ff fb2c 	bl	1a000300 <SetEsp8622Status>
1a000ca8:	e4b6      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000caa:	f241 3288 	movw	r2, #5000	; 0x1388
1a000cae:	2300      	movs	r3, #0
1a000cb0:	4825      	ldr	r0, [pc, #148]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000cb2:	f003 fd85 	bl	1a0047c0 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPCLOSE);
1a000cb6:	2023      	movs	r0, #35	; 0x23
1a000cb8:	f7ff fb22 	bl	1a000300 <SetEsp8622Status>
1a000cbc:	e7e5      	b.n	1a000c8a <ExcecuteHttpServerFsm+0x70e>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%c\r\n",
1a000cbe:	4b20      	ldr	r3, [pc, #128]	; (1a000d40 <ExcecuteHttpServerFsm+0x7c4>)
1a000cc0:	781a      	ldrb	r2, [r3, #0]
1a000cc2:	4928      	ldr	r1, [pc, #160]	; (1a000d64 <ExcecuteHttpServerFsm+0x7e8>)
1a000cc4:	2005      	movs	r0, #5
1a000cc6:	f003 ff19 	bl	1a004afc <stdioPrintf>
			delayConfig(&Esp8266Delay, 100);
1a000cca:	2264      	movs	r2, #100	; 0x64
1a000ccc:	2300      	movs	r3, #0
1a000cce:	481e      	ldr	r0, [pc, #120]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000cd0:	f003 fd76 	bl	1a0047c0 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000cd4:	4b1d      	ldr	r3, [pc, #116]	; (1a000d4c <ExcecuteHttpServerFsm+0x7d0>)
1a000cd6:	4a20      	ldr	r2, [pc, #128]	; (1a000d58 <ExcecuteHttpServerFsm+0x7dc>)
1a000cd8:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000cda:	202a      	movs	r0, #42	; 0x2a
1a000cdc:	f7ff fb10 	bl	1a000300 <SetEsp8622Status>
		break;
1a000ce0:	e49a      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
		if (IsWaitedResponse())
1a000ce2:	f7ff fb13 	bl	1a00030c <IsWaitedResponse>
1a000ce6:	b990      	cbnz	r0, 1a000d0e <ExcecuteHttpServerFsm+0x792>
		if (delayRead(&Esp8266Delay))
1a000ce8:	4817      	ldr	r0, [pc, #92]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000cea:	f003 fd79 	bl	1a0047e0 <delayRead>
1a000cee:	2800      	cmp	r0, #0
1a000cf0:	f43f ac92 	beq.w	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000cf4:	f241 3288 	movw	r2, #5000	; 0x1388
1a000cf8:	2300      	movs	r3, #0
1a000cfa:	4813      	ldr	r0, [pc, #76]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000cfc:	f003 fd60 	bl	1a0047c0 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000d00:	4b12      	ldr	r3, [pc, #72]	; (1a000d4c <ExcecuteHttpServerFsm+0x7d0>)
1a000d02:	4a15      	ldr	r2, [pc, #84]	; (1a000d58 <ExcecuteHttpServerFsm+0x7dc>)
1a000d04:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000d06:	202a      	movs	r0, #42	; 0x2a
1a000d08:	f7ff fafa 	bl	1a000300 <SetEsp8622Status>
}
1a000d0c:	e484      	b.n	1a000618 <ExcecuteHttpServerFsm+0x9c>
			delayConfig(&Esp8266Delay, 1);
1a000d0e:	2201      	movs	r2, #1
1a000d10:	2300      	movs	r3, #0
1a000d12:	480d      	ldr	r0, [pc, #52]	; (1a000d48 <ExcecuteHttpServerFsm+0x7cc>)
1a000d14:	f003 fd54 	bl	1a0047c0 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000d18:	4b0c      	ldr	r3, [pc, #48]	; (1a000d4c <ExcecuteHttpServerFsm+0x7d0>)
1a000d1a:	4a0f      	ldr	r2, [pc, #60]	; (1a000d58 <ExcecuteHttpServerFsm+0x7dc>)
1a000d1c:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000d1e:	202a      	movs	r0, #42	; 0x2a
1a000d20:	f7ff faee 	bl	1a000300 <SetEsp8622Status>
1a000d24:	e7e0      	b.n	1a000ce8 <ExcecuteHttpServerFsm+0x76c>
1a000d26:	bf00      	nop
1a000d28:	10000139 	.word	0x10000139
1a000d2c:	100001c7 	.word	0x100001c7
1a000d30:	10000164 	.word	0x10000164
1a000d34:	100001c8 	.word	0x100001c8
1a000d38:	100001cc 	.word	0x100001cc
1a000d3c:	10000160 	.word	0x10000160
1a000d40:	10000138 	.word	0x10000138
1a000d44:	1a005ee8 	.word	0x1a005ee8
1a000d48:	10000140 	.word	0x10000140
1a000d4c:	10000158 	.word	0x10000158
1a000d50:	1a006b48 	.word	0x1a006b48
1a000d54:	1a005e9c 	.word	0x1a005e9c
1a000d58:	1a006b40 	.word	0x1a006b40
1a000d5c:	1a005efc 	.word	0x1a005efc
1a000d60:	1a006b4c 	.word	0x1a006b4c
1a000d64:	1a005f00 	.word	0x1a005f00

1a000d68 <gesp8266InitHttpServer>:
{
1a000d68:	b510      	push	{r4, lr}
	if (!parametersReceived)
1a000d6a:	4b0e      	ldr	r3, [pc, #56]	; (1a000da4 <gesp8266InitHttpServer+0x3c>)
1a000d6c:	781b      	ldrb	r3, [r3, #0]
1a000d6e:	b143      	cbz	r3, 1a000d82 <gesp8266InitHttpServer+0x1a>
	ExcecuteHttpServerFsm();
1a000d70:	f7ff fc04 	bl	1a00057c <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_WAIT_IPD); //si llego al estado ESP_WAIT_IPD es porque el modulo ya esta configurado.
1a000d74:	4b0c      	ldr	r3, [pc, #48]	; (1a000da8 <gesp8266InitHttpServer+0x40>)
1a000d76:	7818      	ldrb	r0, [r3, #0]
}
1a000d78:	282a      	cmp	r0, #42	; 0x2a
1a000d7a:	bf14      	ite	ne
1a000d7c:	2000      	movne	r0, #0
1a000d7e:	2001      	moveq	r0, #1
1a000d80:	bd10      	pop	{r4, pc}
1a000d82:	460c      	mov	r4, r1
		strcpy(WifiName, wifiName);
1a000d84:	4601      	mov	r1, r0
1a000d86:	4809      	ldr	r0, [pc, #36]	; (1a000dac <gesp8266InitHttpServer+0x44>)
1a000d88:	f004 fbcc 	bl	1a005524 <strcpy>
		strcpy(WifiPass, wifiPass);
1a000d8c:	4621      	mov	r1, r4
1a000d8e:	4808      	ldr	r0, [pc, #32]	; (1a000db0 <gesp8266InitHttpServer+0x48>)
1a000d90:	f004 fbc8 	bl	1a005524 <strcpy>
		SetEsp8622Status(ESP_INIT);
1a000d94:	2000      	movs	r0, #0
1a000d96:	f7ff fab3 	bl	1a000300 <SetEsp8622Status>
		parametersReceived = TRUE;
1a000d9a:	4b02      	ldr	r3, [pc, #8]	; (1a000da4 <gesp8266InitHttpServer+0x3c>)
1a000d9c:	2201      	movs	r2, #1
1a000d9e:	701a      	strb	r2, [r3, #0]
1a000da0:	e7e6      	b.n	1a000d70 <gesp8266InitHttpServer+0x8>
1a000da2:	bf00      	nop
1a000da4:	100001cb 	.word	0x100001cb
1a000da8:	1000015c 	.word	0x1000015c
1a000dac:	10000188 	.word	0x10000188
1a000db0:	100001a8 	.word	0x100001a8

1a000db4 <gesp8266ReadHttpServer>:
{
1a000db4:	b508      	push	{r3, lr}
	ExcecuteHttpServerFsm();
1a000db6:	f7ff fbe1 	bl	1a00057c <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPSEND); //si la FSM llego al estado ESP_SEND_CIPSEND significa que ya llego una peticion
1a000dba:	4b03      	ldr	r3, [pc, #12]	; (1a000dc8 <gesp8266ReadHttpServer+0x14>)
1a000dbc:	7818      	ldrb	r0, [r3, #0]
}
1a000dbe:	281d      	cmp	r0, #29
1a000dc0:	bf14      	ite	ne
1a000dc2:	2000      	movne	r0, #0
1a000dc4:	2001      	moveq	r0, #1
1a000dc6:	bd08      	pop	{r3, pc}
1a000dc8:	1000015c 	.word	0x1000015c

1a000dcc <gesp8266WriteHttpServer>:
{
1a000dcc:	b508      	push	{r3, lr}
	if (Esp8266Status == ESP_SEND_CIPSEND)
1a000dce:	4b08      	ldr	r3, [pc, #32]	; (1a000df0 <gesp8266WriteHttpServer+0x24>)
1a000dd0:	781b      	ldrb	r3, [r3, #0]
1a000dd2:	2b1d      	cmp	r3, #29
1a000dd4:	d008      	beq.n	1a000de8 <gesp8266WriteHttpServer+0x1c>
	ExcecuteHttpServerFsm();
1a000dd6:	f7ff fbd1 	bl	1a00057c <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPCLOSE);
1a000dda:	4b05      	ldr	r3, [pc, #20]	; (1a000df0 <gesp8266WriteHttpServer+0x24>)
1a000ddc:	7818      	ldrb	r0, [r3, #0]
}
1a000dde:	2823      	cmp	r0, #35	; 0x23
1a000de0:	bf14      	ite	ne
1a000de2:	2000      	movne	r0, #0
1a000de4:	2001      	moveq	r0, #1
1a000de6:	bd08      	pop	{r3, pc}
		PointerOfHttpWebPage = answer;
1a000de8:	4b02      	ldr	r3, [pc, #8]	; (1a000df4 <gesp8266WriteHttpServer+0x28>)
1a000dea:	6018      	str	r0, [r3, #0]
1a000dec:	e7f3      	b.n	1a000dd6 <gesp8266WriteHttpServer+0xa>
1a000dee:	bf00      	nop
1a000df0:	1000015c 	.word	0x1000015c
1a000df4:	10000160 	.word	0x10000160

1a000df8 <EspRxCallback>:
}


// Callback para la recepción serie
void EspRxCallback(void *param)
{
1a000df8:	b530      	push	{r4, r5, lr}
1a000dfa:	b083      	sub	sp, #12
1a000dfc:	4604      	mov	r4, r0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000dfe:	f3ef 8511 	mrs	r5, BASEPRI
1a000e02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e06:	f383 8811 	msr	BASEPRI, r3
1a000e0a:	f3bf 8f6f 	isb	sy
1a000e0e:	f3bf 8f4f 	dsb	sy
	UARTData_t* UARTData = (UARTData_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	receivedData = uartRxRead(UARTData->uartValue);
1a000e12:	7800      	ldrb	r0, [r0, #0]
1a000e14:	f003 fa38 	bl	1a004288 <uartRxRead>
1a000e18:	f88d 0003 	strb.w	r0, [sp, #3]

	xQueueSendFromISR( UARTData->onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a000e1c:	2300      	movs	r3, #0
1a000e1e:	aa01      	add	r2, sp, #4
1a000e20:	f10d 0103 	add.w	r1, sp, #3
1a000e24:	68e0      	ldr	r0, [r4, #12]
1a000e26:	f000 fe4b 	bl	1a001ac0 <xQueueGenericSendFromISR>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000e2a:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a000e2e:	9b01      	ldr	r3, [sp, #4]
1a000e30:	b13b      	cbz	r3, 1a000e42 <EspRxCallback+0x4a>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a000e32:	4b05      	ldr	r3, [pc, #20]	; (1a000e48 <EspRxCallback+0x50>)
1a000e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e38:	601a      	str	r2, [r3, #0]
1a000e3a:	f3bf 8f4f 	dsb	sy
1a000e3e:	f3bf 8f6f 	isb	sy
	}

}
1a000e42:	b003      	add	sp, #12
1a000e44:	bd30      	pop	{r4, r5, pc}
1a000e46:	bf00      	nop
1a000e48:	e000ed04 	.word	0xe000ed04

1a000e4c <UARTEspInit>:
{
1a000e4c:	b510      	push	{r4, lr}
1a000e4e:	4604      	mov	r4, r0
		UARTData->onRxQueue = xQueueCreate(ESP_IN_QUEUE_LEN, sizeof(uint8_t));
1a000e50:	2200      	movs	r2, #0
1a000e52:	2101      	movs	r1, #1
1a000e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
1a000e58:	f000 fd4d 	bl	1a0018f6 <xQueueGenericCreate>
1a000e5c:	60e0      	str	r0, [r4, #12]
		UARTData->onTxQueue = xQueueCreate(ESP_OUT_QUEUE_LEN, sizeof(uint8_t));
1a000e5e:	2200      	movs	r2, #0
1a000e60:	2101      	movs	r1, #1
1a000e62:	201e      	movs	r0, #30
1a000e64:	f000 fd47 	bl	1a0018f6 <xQueueGenericCreate>
1a000e68:	60a0      	str	r0, [r4, #8]
		if((UARTData->onRxQueue == NULL)||(UARTData->onTxQueue == NULL))
1a000e6a:	68e3      	ldr	r3, [r4, #12]
1a000e6c:	b183      	cbz	r3, 1a000e90 <UARTEspInit+0x44>
1a000e6e:	b188      	cbz	r0, 1a000e94 <UARTEspInit+0x48>
	uartConfig(UARTData->uartValue, UARTData->baudRate);
1a000e70:	6861      	ldr	r1, [r4, #4]
1a000e72:	7820      	ldrb	r0, [r4, #0]
1a000e74:	f003 fa1c 	bl	1a0042b0 <uartInit>
	uartCallbackSet(UARTData->uartValue, UART_RECEIVE, EspRxCallback,(void*) UARTData);
1a000e78:	4623      	mov	r3, r4
1a000e7a:	4a07      	ldr	r2, [pc, #28]	; (1a000e98 <UARTEspInit+0x4c>)
1a000e7c:	2100      	movs	r1, #0
1a000e7e:	7820      	ldrb	r0, [r4, #0]
1a000e80:	f003 f96c 	bl	1a00415c <uartCallbackSet>
	uartInterrupt(UARTData->uartValue, true);
1a000e84:	2101      	movs	r1, #1
1a000e86:	7820      	ldrb	r0, [r4, #0]
1a000e88:	f003 f920 	bl	1a0040cc <uartInterrupt>
	return(true);
1a000e8c:	2001      	movs	r0, #1
}
1a000e8e:	bd10      	pop	{r4, pc}
			return (false);
1a000e90:	2000      	movs	r0, #0
1a000e92:	e7fc      	b.n	1a000e8e <UARTEspInit+0x42>
1a000e94:	2000      	movs	r0, #0
1a000e96:	e7fa      	b.n	1a000e8e <UARTEspInit+0x42>
1a000e98:	1a000df9 	.word	0x1a000df9

1a000e9c <receiveEspByte>:
	}

}

bool_t receiveEspByte(UARTData_t* UARTData,uint8_t *receivedByte,TickType_t timeout)
{
1a000e9c:	b508      	push	{r3, lr}


	if (pdTRUE==xQueueReceive( UARTData->onRxQueue, ( void * ) receivedByte, timeout )) //Leo de la cola el dato recibido
1a000e9e:	68c0      	ldr	r0, [r0, #12]
1a000ea0:	f000 fe74 	bl	1a001b8c <xQueueReceive>
1a000ea4:	2801      	cmp	r0, #1
1a000ea6:	d000      	beq.n	1a000eaa <receiveEspByte+0xe>
	{
		return true;
	}
	else
		return false;
1a000ea8:	2000      	movs	r0, #0

}
1a000eaa:	bd08      	pop	{r3, pc}

1a000eac <onRxCallback>:
}


// Callback para la recepción serie a través de la UART USB.
void onRxCallback(void *param)
{
1a000eac:	b530      	push	{r4, r5, lr}
1a000eae:	b083      	sub	sp, #12
1a000eb0:	4604      	mov	r4, r0
	__asm volatile
1a000eb2:	f3ef 8511 	mrs	r5, BASEPRI
1a000eb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eba:	f383 8811 	msr	BASEPRI, r3
1a000ebe:	f3bf 8f6f 	isb	sy
1a000ec2:	f3bf 8f4f 	dsb	sy
	portsConfig_t* ports = (portsConfig_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	aux = uartRxRead(ports->uartValue);
1a000ec6:	7800      	ldrb	r0, [r0, #0]
1a000ec8:	f003 f9de 	bl	1a004288 <uartRxRead>

	if(aux & 0x80) //Si el primer bit es 1 significa que estoy recibiendo el primer byte
1a000ecc:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000ed0:	d109      	bne.n	1a000ee6 <onRxCallback+0x3a>
		byteNumber=1;
		receivedData.rxData [0]=aux;
		}
	else
	{
		if(byteNumber==1)
1a000ed2:	4b16      	ldr	r3, [pc, #88]	; (1a000f2c <onRxCallback+0x80>)
1a000ed4:	781b      	ldrb	r3, [r3, #0]
1a000ed6:	2b01      	cmp	r3, #1
1a000ed8:	d118      	bne.n	1a000f0c <onRxCallback+0x60>
		{
			byteNumber=2;
1a000eda:	4b14      	ldr	r3, [pc, #80]	; (1a000f2c <onRxCallback+0x80>)
1a000edc:	2202      	movs	r2, #2
1a000ede:	701a      	strb	r2, [r3, #0]
			receivedData.rxData [1]= aux;
1a000ee0:	4b13      	ldr	r3, [pc, #76]	; (1a000f30 <onRxCallback+0x84>)
1a000ee2:	7058      	strb	r0, [r3, #1]
1a000ee4:	e004      	b.n	1a000ef0 <onRxCallback+0x44>
		byteNumber=1;
1a000ee6:	4b11      	ldr	r3, [pc, #68]	; (1a000f2c <onRxCallback+0x80>)
1a000ee8:	2201      	movs	r2, #1
1a000eea:	701a      	strb	r2, [r3, #0]
		receivedData.rxData [0]=aux;
1a000eec:	4b10      	ldr	r3, [pc, #64]	; (1a000f30 <onRxCallback+0x84>)
1a000eee:	7018      	strb	r0, [r3, #0]
	__asm volatile
1a000ef0:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a000ef4:	9b01      	ldr	r3, [sp, #4]
1a000ef6:	b13b      	cbz	r3, 1a000f08 <onRxCallback+0x5c>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a000ef8:	4b0e      	ldr	r3, [pc, #56]	; (1a000f34 <onRxCallback+0x88>)
1a000efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000efe:	601a      	str	r2, [r3, #0]
1a000f00:	f3bf 8f4f 	dsb	sy
1a000f04:	f3bf 8f6f 	isb	sy
	}

}
1a000f08:	b003      	add	sp, #12
1a000f0a:	bd30      	pop	{r4, r5, pc}
			receivedData.rxData [2] = aux;
1a000f0c:	4908      	ldr	r1, [pc, #32]	; (1a000f30 <onRxCallback+0x84>)
1a000f0e:	7088      	strb	r0, [r1, #2]
			aux=(receivedData.rxData[0]>>4)&0x07; //Obtengo el address del puerto que envio el dato
1a000f10:	780b      	ldrb	r3, [r1, #0]
1a000f12:	f3c3 1302 	ubfx	r3, r3, #4, #3
			xQueueSendFromISR( ports->port[aux].onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a000f16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000f1a:	009a      	lsls	r2, r3, #2
1a000f1c:	4414      	add	r4, r2
1a000f1e:	2300      	movs	r3, #0
1a000f20:	aa01      	add	r2, sp, #4
1a000f22:	6960      	ldr	r0, [r4, #20]
1a000f24:	f000 fdcc 	bl	1a001ac0 <xQueueGenericSendFromISR>
1a000f28:	e7e2      	b.n	1a000ef0 <onRxCallback+0x44>
1a000f2a:	bf00      	nop
1a000f2c:	100002cd 	.word	0x100002cd
1a000f30:	100002e4 	.word	0x100002e4
1a000f34:	e000ed04 	.word	0xe000ed04

1a000f38 <onTxTimeOutCallback>:

//Callback del timer de transmision
void onTxTimeOutCallback(TimerHandle_t xTimer)
{
1a000f38:	b510      	push	{r4, lr}
	// Obtenemos los datos de la UART seleccionada, aprovechando el campo reservado
	// para el Timer ID.
	portsConfig_t *ports= (portsConfig_t *) pvTimerGetTimerID(xTimer);
1a000f3a:	f001 ffb4 	bl	1a002ea6 <pvTimerGetTimerID>
1a000f3e:	4604      	mov	r4, r0
	gpioToggle( GPIO0 );
1a000f40:	2020      	movs	r0, #32
1a000f42:	f003 fbee 	bl	1a004722 <gpioToggle>

	//Configuro el callback de la transmision de UART
	uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a000f46:	4623      	mov	r3, r4
1a000f48:	4a04      	ldr	r2, [pc, #16]	; (1a000f5c <onTxTimeOutCallback+0x24>)
1a000f4a:	2101      	movs	r1, #1
1a000f4c:	7820      	ldrb	r0, [r4, #0]
1a000f4e:	f003 f905 	bl	1a00415c <uartCallbackSet>
	uartSetPendingInterrupt(ports->uartValue);
1a000f52:	7820      	ldrb	r0, [r4, #0]
1a000f54:	f003 f974 	bl	1a004240 <uartSetPendingInterrupt>
}
1a000f58:	bd10      	pop	{r4, pc}
1a000f5a:	bf00      	nop
1a000f5c:	1a000f61 	.word	0x1a000f61

1a000f60 <onTxCallback>:
}



void onTxCallback(void*param)
{
1a000f60:	b530      	push	{r4, r5, lr}
1a000f62:	b083      	sub	sp, #12
1a000f64:	4605      	mov	r5, r0
	portsConfig_t *ports = (portsConfig_t *) param;
	BaseType_t xTaskWokenByReceive = pdFALSE; //Variable para evaluar el cambio de contexto al finaliza la interrupcion
1a000f66:	2300      	movs	r3, #0
1a000f68:	9301      	str	r3, [sp, #4]
	uint8_t emptyData = 0xff; //Byte que se envia dos veces para darle tiempo al esclavo para responder
	static uint8_t transmitEmpty = 0;



	if (portIndex==0 && byteIndex==0)
1a000f6a:	4b38      	ldr	r3, [pc, #224]	; (1a00104c <onTxCallback+0xec>)
1a000f6c:	781b      	ldrb	r3, [r3, #0]
1a000f6e:	b91b      	cbnz	r3, 1a000f78 <onTxCallback+0x18>
1a000f70:	4b37      	ldr	r3, [pc, #220]	; (1a001050 <onTxCallback+0xf0>)
1a000f72:	781c      	ldrb	r4, [r3, #0]
1a000f74:	2c00      	cmp	r4, #0
1a000f76:	d035      	beq.n	1a000fe4 <onTxCallback+0x84>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);

	}

	//Si llegué a la interrupcion es porque hay que enviar datos
	if(transmitEmpty==0)
1a000f78:	4b36      	ldr	r3, [pc, #216]	; (1a001054 <onTxCallback+0xf4>)
1a000f7a:	781b      	ldrb	r3, [r3, #0]
1a000f7c:	2b00      	cmp	r3, #0
1a000f7e:	d14a      	bne.n	1a001016 <onTxCallback+0xb6>
	{
		uartTxWrite(ports->uartValue,dataToSend[portIndex].txData[byteIndex]);
1a000f80:	4b32      	ldr	r3, [pc, #200]	; (1a00104c <onTxCallback+0xec>)
1a000f82:	781b      	ldrb	r3, [r3, #0]
1a000f84:	4c32      	ldr	r4, [pc, #200]	; (1a001050 <onTxCallback+0xf0>)
1a000f86:	7821      	ldrb	r1, [r4, #0]
1a000f88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000f8c:	4a32      	ldr	r2, [pc, #200]	; (1a001058 <onTxCallback+0xf8>)
1a000f8e:	4413      	add	r3, r2
1a000f90:	5c59      	ldrb	r1, [r3, r1]
1a000f92:	7828      	ldrb	r0, [r5, #0]
1a000f94:	f003 f982 	bl	1a00429c <uartTxWrite>
		//Luego verifico si termine de enviar el frame completo y deshabilito la interrupcion
		if (byteIndex<2)
1a000f98:	7823      	ldrb	r3, [r4, #0]
1a000f9a:	2b01      	cmp	r3, #1
1a000f9c:	d925      	bls.n	1a000fea <onTxCallback+0x8a>
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
		}
		else
		{
			transmitEmpty=1;//
1a000f9e:	4b2d      	ldr	r3, [pc, #180]	; (1a001054 <onTxCallback+0xf4>)
1a000fa0:	2201      	movs	r2, #1
1a000fa2:	701a      	strb	r2, [r3, #0]
			if (portIndex<(PORTS_NUMBER-1))
1a000fa4:	4b29      	ldr	r3, [pc, #164]	; (1a00104c <onTxCallback+0xec>)
1a000fa6:	781b      	ldrb	r3, [r3, #0]
1a000fa8:	2b04      	cmp	r3, #4
1a000faa:	d82a      	bhi.n	1a001002 <onTxCallback+0xa2>
			{
				portIndex++;
1a000fac:	4413      	add	r3, r2
1a000fae:	4a27      	ldr	r2, [pc, #156]	; (1a00104c <onTxCallback+0xec>)
1a000fb0:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a000fb2:	4b27      	ldr	r3, [pc, #156]	; (1a001050 <onTxCallback+0xf0>)
1a000fb4:	2200      	movs	r2, #0
1a000fb6:	701a      	strb	r2, [r3, #0]
				uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a000fb8:	462b      	mov	r3, r5
1a000fba:	4a28      	ldr	r2, [pc, #160]	; (1a00105c <onTxCallback+0xfc>)
1a000fbc:	2101      	movs	r1, #1
1a000fbe:	7828      	ldrb	r0, [r5, #0]
1a000fc0:	f003 f8cc 	bl	1a00415c <uartCallbackSet>
				uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
1a000fc4:	7828      	ldrb	r0, [r5, #0]
1a000fc6:	f003 f93b 	bl	1a004240 <uartSetPendingInterrupt>
1a000fca:	e02f      	b.n	1a00102c <onTxCallback+0xcc>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);
1a000fcc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000fd0:	eb05 0083 	add.w	r0, r5, r3, lsl #2
1a000fd4:	aa01      	add	r2, sp, #4
1a000fd6:	4920      	ldr	r1, [pc, #128]	; (1a001058 <onTxCallback+0xf8>)
1a000fd8:	4419      	add	r1, r3
1a000fda:	6900      	ldr	r0, [r0, #16]
1a000fdc:	f000 fe82 	bl	1a001ce4 <xQueueReceiveFromISR>
		for (i=0;i<PORTS_NUMBER;i++)
1a000fe0:	3401      	adds	r4, #1
1a000fe2:	b2e4      	uxtb	r4, r4
1a000fe4:	2c05      	cmp	r4, #5
1a000fe6:	d9f1      	bls.n	1a000fcc <onTxCallback+0x6c>
1a000fe8:	e7c6      	b.n	1a000f78 <onTxCallback+0x18>
			byteIndex++;
1a000fea:	3301      	adds	r3, #1
1a000fec:	7023      	strb	r3, [r4, #0]
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a000fee:	462b      	mov	r3, r5
1a000ff0:	4a1a      	ldr	r2, [pc, #104]	; (1a00105c <onTxCallback+0xfc>)
1a000ff2:	2101      	movs	r1, #1
1a000ff4:	7828      	ldrb	r0, [r5, #0]
1a000ff6:	f003 f8b1 	bl	1a00415c <uartCallbackSet>
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
1a000ffa:	7828      	ldrb	r0, [r5, #0]
1a000ffc:	f003 f920 	bl	1a004240 <uartSetPendingInterrupt>
1a001000:	e014      	b.n	1a00102c <onTxCallback+0xcc>
			}
			else
			{
				portIndex=0;
1a001002:	2300      	movs	r3, #0
1a001004:	4a11      	ldr	r2, [pc, #68]	; (1a00104c <onTxCallback+0xec>)
1a001006:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a001008:	4a11      	ldr	r2, [pc, #68]	; (1a001050 <onTxCallback+0xf0>)
1a00100a:	7013      	strb	r3, [r2, #0]
				uartCallbackClr(ports->uartValue, UART_TRANSMITER_FREE); //Deshabilito la interrupcion de TX
1a00100c:	2101      	movs	r1, #1
1a00100e:	7828      	ldrb	r0, [r5, #0]
1a001010:	f003 f902 	bl	1a004218 <uartCallbackClr>
1a001014:	e00a      	b.n	1a00102c <onTxCallback+0xcc>
			}
		}
	}
	else
	{
		uartTxWrite(ports->uartValue,emptyData);
1a001016:	21ff      	movs	r1, #255	; 0xff
1a001018:	7828      	ldrb	r0, [r5, #0]
1a00101a:	f003 f93f 	bl	1a00429c <uartTxWrite>
		if (transmitEmpty==2)
1a00101e:	4b0d      	ldr	r3, [pc, #52]	; (1a001054 <onTxCallback+0xf4>)
1a001020:	781b      	ldrb	r3, [r3, #0]
1a001022:	2b02      	cmp	r3, #2
1a001024:	d00e      	beq.n	1a001044 <onTxCallback+0xe4>
			transmitEmpty=0;
		else
			transmitEmpty++;
1a001026:	3301      	adds	r3, #1
1a001028:	4a0a      	ldr	r2, [pc, #40]	; (1a001054 <onTxCallback+0xf4>)
1a00102a:	7013      	strb	r3, [r2, #0]

	}


	//Hago la evaluacion de cambio de cambio de contexto necesario.
	if (xTaskWokenByReceive != pdFALSE)
1a00102c:	9b01      	ldr	r3, [sp, #4]
1a00102e:	b13b      	cbz	r3, 1a001040 <onTxCallback+0xe0>
	{
		taskYIELD ();
1a001030:	4b0b      	ldr	r3, [pc, #44]	; (1a001060 <onTxCallback+0x100>)
1a001032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001036:	601a      	str	r2, [r3, #0]
1a001038:	f3bf 8f4f 	dsb	sy
1a00103c:	f3bf 8f6f 	isb	sy
	}
}
1a001040:	b003      	add	sp, #12
1a001042:	bd30      	pop	{r4, r5, pc}
			transmitEmpty=0;
1a001044:	4b03      	ldr	r3, [pc, #12]	; (1a001054 <onTxCallback+0xf4>)
1a001046:	2200      	movs	r2, #0
1a001048:	701a      	strb	r2, [r3, #0]
1a00104a:	e7ef      	b.n	1a00102c <onTxCallback+0xcc>
1a00104c:	100002e2 	.word	0x100002e2
1a001050:	100002cc 	.word	0x100002cc
1a001054:	100002e8 	.word	0x100002e8
1a001058:	100002d0 	.word	0x100002d0
1a00105c:	1a000f61 	.word	0x1a000f61
1a001060:	e000ed04 	.word	0xe000ed04

1a001064 <portsDataInit>:
{
1a001064:	b530      	push	{r4, r5, lr}
1a001066:	b083      	sub	sp, #12
1a001068:	4605      	mov	r5, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a00106a:	2400      	movs	r4, #0
1a00106c:	e015      	b.n	1a00109a <portsDataInit+0x36>
		portData.txData[0]=(i<<4)|0x80; //Armo el primer byte con el primer bit en uno y el address
1a00106e:	0123      	lsls	r3, r4, #4
1a001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a001074:	f88d 3004 	strb.w	r3, [sp, #4]
		portData.txData[1]=0x00;
1a001078:	2300      	movs	r3, #0
1a00107a:	f88d 3005 	strb.w	r3, [sp, #5]
		portData.txData[2]=0x00;
1a00107e:	f88d 3006 	strb.w	r3, [sp, #6]
		xQueueSend( port[i].onTxQueue, ( void * ) &portData, ( TickType_t ) portMAX_DELAY ); //Pongo en cola el primer dato a enviar
1a001082:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a001086:	008a      	lsls	r2, r1, #2
1a001088:	18a8      	adds	r0, r5, r2
1a00108a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00108e:	a901      	add	r1, sp, #4
1a001090:	6840      	ldr	r0, [r0, #4]
1a001092:	f000 fc57 	bl	1a001944 <xQueueGenericSend>
	for (i=0; i< PORTS_NUMBER; i++)
1a001096:	3401      	adds	r4, #1
1a001098:	b2e4      	uxtb	r4, r4
1a00109a:	2c05      	cmp	r4, #5
1a00109c:	d9e7      	bls.n	1a00106e <portsDataInit+0xa>
}
1a00109e:	b003      	add	sp, #12
1a0010a0:	bd30      	pop	{r4, r5, pc}
1a0010a2:	Address 0x000000001a0010a2 is out of bounds.


1a0010a4 <portsdriverInit>:
{
1a0010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0010a6:	b083      	sub	sp, #12
1a0010a8:	4607      	mov	r7, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a0010aa:	2400      	movs	r4, #0
1a0010ac:	2c05      	cmp	r4, #5
1a0010ae:	d816      	bhi.n	1a0010de <portsdriverInit+0x3a>
		ports->port[i].portAddr = i;
1a0010b0:	0066      	lsls	r6, r4, #1
1a0010b2:	1933      	adds	r3, r6, r4
1a0010b4:	009d      	lsls	r5, r3, #2
1a0010b6:	443d      	add	r5, r7
1a0010b8:	732c      	strb	r4, [r5, #12]
		ports->port[i].onRxQueue  = xQueueCreate(IN_QUEUE_LEN, sizeof(rxData_t));
1a0010ba:	2200      	movs	r2, #0
1a0010bc:	2104      	movs	r1, #4
1a0010be:	201e      	movs	r0, #30
1a0010c0:	f000 fc19 	bl	1a0018f6 <xQueueGenericCreate>
1a0010c4:	6168      	str	r0, [r5, #20]
		ports->port[i].onTxQueue = xQueueCreate(OUT_QUEUE_LEN, sizeof(txData_t));
1a0010c6:	2200      	movs	r2, #0
1a0010c8:	2103      	movs	r1, #3
1a0010ca:	201e      	movs	r0, #30
1a0010cc:	f000 fc13 	bl	1a0018f6 <xQueueGenericCreate>
1a0010d0:	6128      	str	r0, [r5, #16]
		if((ports->port[i].onRxQueue == NULL)||(ports->port[i].onTxQueue == NULL))
1a0010d2:	696b      	ldr	r3, [r5, #20]
1a0010d4:	b363      	cbz	r3, 1a001130 <portsdriverInit+0x8c>
1a0010d6:	b368      	cbz	r0, 1a001134 <portsdriverInit+0x90>
	for (i=0; i< PORTS_NUMBER; i++)
1a0010d8:	3401      	adds	r4, #1
1a0010da:	b2e4      	uxtb	r4, r4
1a0010dc:	e7e6      	b.n	1a0010ac <portsdriverInit+0x8>
	ports->onTxTimeOut = xTimerCreate("Transmit", pdMS_TO_TICKS(1),pdTRUE, (void*) ports, onTxTimeOutCallback);
1a0010de:	4b17      	ldr	r3, [pc, #92]	; (1a00113c <portsdriverInit+0x98>)
1a0010e0:	9300      	str	r3, [sp, #0]
1a0010e2:	463b      	mov	r3, r7
1a0010e4:	2201      	movs	r2, #1
1a0010e6:	4611      	mov	r1, r2
1a0010e8:	4815      	ldr	r0, [pc, #84]	; (1a001140 <portsdriverInit+0x9c>)
1a0010ea:	f001 fd45 	bl	1a002b78 <xTimerCreate>
1a0010ee:	60b8      	str	r0, [r7, #8]
	if (ports->onTxTimeOut==NULL)
1a0010f0:	b310      	cbz	r0, 1a001138 <portsdriverInit+0x94>
	uartConfig(ports->uartValue, ports->baudRate);
1a0010f2:	6879      	ldr	r1, [r7, #4]
1a0010f4:	7838      	ldrb	r0, [r7, #0]
1a0010f6:	f003 f8db 	bl	1a0042b0 <uartInit>
	uartCallbackSet(ports->uartValue, UART_RECEIVE, onRxCallback,(void*) ports);
1a0010fa:	463b      	mov	r3, r7
1a0010fc:	4a11      	ldr	r2, [pc, #68]	; (1a001144 <portsdriverInit+0xa0>)
1a0010fe:	2100      	movs	r1, #0
1a001100:	7838      	ldrb	r0, [r7, #0]
1a001102:	f003 f82b 	bl	1a00415c <uartCallbackSet>
	portsDataInit (ports->port);
1a001106:	f107 000c 	add.w	r0, r7, #12
1a00110a:	f7ff ffab 	bl	1a001064 <portsDataInit>
	uartInterrupt(ports->uartValue, true);
1a00110e:	2101      	movs	r1, #1
1a001110:	7838      	ldrb	r0, [r7, #0]
1a001112:	f002 ffdb 	bl	1a0040cc <uartInterrupt>
	xTimerStart( ports->onTxTimeOut, 0 );
1a001116:	68bc      	ldr	r4, [r7, #8]
1a001118:	f001 f954 	bl	1a0023c4 <xTaskGetTickCount>
1a00111c:	2300      	movs	r3, #0
1a00111e:	9300      	str	r3, [sp, #0]
1a001120:	4602      	mov	r2, r0
1a001122:	2101      	movs	r1, #1
1a001124:	4620      	mov	r0, r4
1a001126:	f001 fd43 	bl	1a002bb0 <xTimerGenericCommand>
	return(true);
1a00112a:	2001      	movs	r0, #1
}
1a00112c:	b003      	add	sp, #12
1a00112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (false);
1a001130:	2000      	movs	r0, #0
1a001132:	e7fb      	b.n	1a00112c <portsdriverInit+0x88>
1a001134:	2000      	movs	r0, #0
1a001136:	e7f9      	b.n	1a00112c <portsdriverInit+0x88>
		return (false);
1a001138:	2000      	movs	r0, #0
1a00113a:	e7f7      	b.n	1a00112c <portsdriverInit+0x88>
1a00113c:	1a000f39 	.word	0x1a000f39
1a001140:	1a00710c 	.word	0x1a00710c
1a001144:	1a000ead 	.word	0x1a000ead

1a001148 <myTask>:

/*=====[Implementations of public functions]=================================*/

// Task implementation
void myTask( void* taskParmPtr )
{
1a001148:	b500      	push	{lr}
1a00114a:	b083      	sub	sp, #12
	txData_t portData;
	uint16_t DAC=0;
	uint8_t digitalOuts=0;
	// ----- Task setup -----------------------------------

   gpioWrite( LED, ON );
1a00114c:	2101      	movs	r1, #1
1a00114e:	202a      	movs	r0, #42	; 0x2a
1a001150:	f003 fa7e 	bl	1a004650 <gpioWrite>

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a001154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001158:	f001 fa92 	bl	1a002680 <vTaskDelay>

   gpioWrite( LED, OFF ); 
1a00115c:	2100      	movs	r1, #0
1a00115e:	202a      	movs	r0, #42	; 0x2a
1a001160:	f003 fa76 	bl	1a004650 <gpioWrite>

   // Periodic task every 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a001164:	f001 f92e 	bl	1a0023c4 <xTaskGetTickCount>
1a001168:	9001      	str	r0, [sp, #4]

   // ----- Task repeat for ever -------------------------
   while(TRUE) {
      gpioToggle( LED );
1a00116a:	202a      	movs	r0, #42	; 0x2a
1a00116c:	f003 fad9 	bl	1a004722 <gpioToggle>
    	//  digitalOuts=0x0F;
      //else
    	//  digitalOuts=0x00;
      // Send the task to the locked state during xPeriodicity
      // (periodical delay)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a001170:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a001174:	a801      	add	r0, sp, #4
1a001176:	f001 fa31 	bl	1a0025dc <vTaskDelayUntil>
1a00117a:	e7f6      	b.n	1a00116a <myTask+0x22>

1a00117c <myTask3>:
   }
}


void myTask3( void* taskParmPtr )
{
1a00117c:	b510      	push	{r4, lr}
1a00117e:	b086      	sub	sp, #24
	uint8_t counter = 0;
	delay_t wifiDelay;
	uint8_t i=0;

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001184:	f001 fa7c 	bl	1a002680 <vTaskDelay>

   // Envia un mensaje de bienvenida.
   stdioPrintf(UART_USB, "\n\rBienvenido al servidor HTTP Esp8266 con EDU CIAA");
1a001188:	492f      	ldr	r1, [pc, #188]	; (1a001248 <myTask3+0xcc>)
1a00118a:	2003      	movs	r0, #3
1a00118c:	f003 fcb6 	bl	1a004afc <stdioPrintf>
   stdioPrintf(UART_USB, "\n\rLa configuracion puede tardar hasta 1 minuto.");
1a001190:	492e      	ldr	r1, [pc, #184]	; (1a00124c <myTask3+0xd0>)
1a001192:	2003      	movs	r0, #3
1a001194:	f003 fcb2 	bl	1a004afc <stdioPrintf>

   error = FALSE;
   // Configura un delay para salir de la configuracion en caso de error.
   delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a001198:	f64e 2260 	movw	r2, #60000	; 0xea60
1a00119c:	2300      	movs	r3, #0
1a00119e:	4668      	mov	r0, sp
1a0011a0:	f003 fb0e 	bl	1a0047c0 <delayInit>
   error = FALSE;
1a0011a4:	2400      	movs	r4, #0

   // Mientras no termine la configuracion o mientras no pase el tiempo maximo, ejecuta la configuracion.
   // A la configuracion se le pasa nombre y contrasenia de RED
   while (!gesp8266ConfigHttpServer(WIFI_NAME, WIFI_PASS) && !error) {
1a0011a6:	e004      	b.n	1a0011b2 <myTask3+0x36>
      if (delayRead(&wifiDelay)) {
1a0011a8:	4668      	mov	r0, sp
1a0011aa:	f003 fb19 	bl	1a0047e0 <delayRead>
1a0011ae:	b100      	cbz	r0, 1a0011b2 <myTask3+0x36>
         error = TRUE;
1a0011b0:	2401      	movs	r4, #1
   while (!gesp8266ConfigHttpServer(WIFI_NAME, WIFI_PASS) && !error) {
1a0011b2:	4927      	ldr	r1, [pc, #156]	; (1a001250 <myTask3+0xd4>)
1a0011b4:	4827      	ldr	r0, [pc, #156]	; (1a001254 <myTask3+0xd8>)
1a0011b6:	f7ff fdd7 	bl	1a000d68 <gesp8266InitHttpServer>
1a0011ba:	b908      	cbnz	r0, 1a0011c0 <myTask3+0x44>
1a0011bc:	2c00      	cmp	r4, #0
1a0011be:	d0f3      	beq.n	1a0011a8 <myTask3+0x2c>
      }
   }

   // Avisa al usuario como salio la configuracion
   if (!error) {
1a0011c0:	b95c      	cbnz	r4, 1a0011da <myTask3+0x5e>
      stdioPrintf(UART_USB, "\n\rServidor HTTP configurado. IP: %s", gesp8266GetIpAddress());
1a0011c2:	f7ff f8dd 	bl	1a000380 <gesp8266GetIpAddress>
1a0011c6:	4602      	mov	r2, r0
1a0011c8:	4923      	ldr	r1, [pc, #140]	; (1a001258 <myTask3+0xdc>)
1a0011ca:	2003      	movs	r0, #3
1a0011cc:	f003 fc96 	bl	1a004afc <stdioPrintf>
      // Enciende LEDG indicando que el modulo esta configurado.
      gpioWrite(LEDG, TRUE);
1a0011d0:	2101      	movs	r1, #1
1a0011d2:	2029      	movs	r0, #41	; 0x29
1a0011d4:	f003 fa3c 	bl	1a004650 <gpioWrite>
1a0011d8:	e013      	b.n	1a001202 <myTask3+0x86>
   } else {
      stdioPrintf(UART_USB, "\n\rError al configurar servidor HTTP.");
1a0011da:	4920      	ldr	r1, [pc, #128]	; (1a00125c <myTask3+0xe0>)
1a0011dc:	2003      	movs	r0, #3
1a0011de:	f003 fc8d 	bl	1a004afc <stdioPrintf>
      // Enciende LEDR indicando que el modulo esta en error.
      gpioWrite(LEDR, TRUE);
1a0011e2:	2101      	movs	r1, #1
1a0011e4:	2028      	movs	r0, #40	; 0x28
1a0011e6:	f003 fa33 	bl	1a004650 <gpioWrite>
1a0011ea:	e00a      	b.n	1a001202 <myTask3+0x86>
               error = TRUE;
            }

         }
		 // Avisa al usuario como fue el envio
		 if (!error) {
1a0011ec:	bb0c      	cbnz	r4, 1a001232 <myTask3+0xb6>
			stdioPrintf(UART_USB, "\n\rPeticion respondida al cliente HTTP %d.", gesp8266GetConnectionId());
1a0011ee:	f7ff f8cb 	bl	1a000388 <gesp8266GetConnectionId>
1a0011f2:	4602      	mov	r2, r0
1a0011f4:	491a      	ldr	r1, [pc, #104]	; (1a001260 <myTask3+0xe4>)
1a0011f6:	2003      	movs	r0, #3
1a0011f8:	f003 fc80 	bl	1a004afc <stdioPrintf>
			gpioToggle(LEDG);
1a0011fc:	2029      	movs	r0, #41	; 0x29
1a0011fe:	f003 fa90 	bl	1a004722 <gpioToggle>
      if (gesp8266ReadHttpServer()) {
1a001202:	f7ff fdd7 	bl	1a000db4 <gesp8266ReadHttpServer>
1a001206:	2800      	cmp	r0, #0
1a001208:	d0fb      	beq.n	1a001202 <myTask3+0x86>
         delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a00120a:	f64e 2260 	movw	r2, #60000	; 0xea60
1a00120e:	2300      	movs	r3, #0
1a001210:	4668      	mov	r0, sp
1a001212:	f003 fad5 	bl	1a0047c0 <delayInit>
         error = FALSE;
1a001216:	2400      	movs	r4, #0
       while (!gesp8266WriteHttpServer(requestAnswer) )
1a001218:	4b12      	ldr	r3, [pc, #72]	; (1a001264 <myTask3+0xe8>)
1a00121a:	6818      	ldr	r0, [r3, #0]
1a00121c:	f7ff fdd6 	bl	1a000dcc <gesp8266WriteHttpServer>
1a001220:	2800      	cmp	r0, #0
1a001222:	d1e3      	bne.n	1a0011ec <myTask3+0x70>
            if (delayRead(&wifiDelay))
1a001224:	4668      	mov	r0, sp
1a001226:	f003 fadb 	bl	1a0047e0 <delayRead>
1a00122a:	2800      	cmp	r0, #0
1a00122c:	d0f4      	beq.n	1a001218 <myTask3+0x9c>
               error = TRUE;
1a00122e:	2401      	movs	r4, #1
1a001230:	e7f2      	b.n	1a001218 <myTask3+0x9c>
		 }
		 else {
			stdioPrintf(UART_USB, "\n\rPeticion no respondida al cliente HTTP %d.", gesp8266GetConnectionId());
1a001232:	f7ff f8a9 	bl	1a000388 <gesp8266GetConnectionId>
1a001236:	4602      	mov	r2, r0
1a001238:	490b      	ldr	r1, [pc, #44]	; (1a001268 <myTask3+0xec>)
1a00123a:	2003      	movs	r0, #3
1a00123c:	f003 fc5e 	bl	1a004afc <stdioPrintf>
			gpioToggle(LEDR);
1a001240:	2028      	movs	r0, #40	; 0x28
1a001242:	f003 fa6e 	bl	1a004722 <gpioToggle>
1a001246:	e7dc      	b.n	1a001202 <myTask3+0x86>
1a001248:	1a007118 	.word	0x1a007118
1a00124c:	1a00714c 	.word	0x1a00714c
1a001250:	1a00717c 	.word	0x1a00717c
1a001254:	1a007188 	.word	0x1a007188
1a001258:	1a007194 	.word	0x1a007194
1a00125c:	1a0071b8 	.word	0x1a0071b8
1a001260:	1a0071e0 	.word	0x1a0071e0
1a001264:	10002dcc 	.word	0x10002dcc
1a001268:	1a00720c 	.word	0x1a00720c

1a00126c <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a00126c:	b500      	push	{lr}
1a00126e:	b083      	sub	sp, #12

	static portsConfig_t ports;
	static UARTData_t UARTData;
	static testState_t test;

	ports.uartValue = UART_GPIO;
1a001270:	4d16      	ldr	r5, [pc, #88]	; (1a0012cc <main+0x60>)
1a001272:	2400      	movs	r4, #0
1a001274:	702c      	strb	r4, [r5, #0]
	ports.baudRate = 460800;
1a001276:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
1a00127a:	606b      	str	r3, [r5, #4]
	UARTData.uartValue = UART_USB;
	UARTData.baudRate = 115200;
*/


   boardInit();
1a00127c:	f003 fa6a 	bl	1a004754 <boardInit>

   gpioInit( GPIO0, GPIO_OUTPUT );
1a001280:	2101      	movs	r1, #1
1a001282:	2020      	movs	r0, #32
1a001284:	f003 f90e 	bl	1a0044a4 <gpioInit>
   gpioInit( T_COL1, GPIO_OUTPUT );
1a001288:	2101      	movs	r1, #1
1a00128a:	2006      	movs	r0, #6
1a00128c:	f003 f90a 	bl	1a0044a4 <gpioInit>
   gpioWrite( T_COL1, ON ); //Habilito el modulo wifi
1a001290:	2101      	movs	r1, #1
1a001292:	2006      	movs	r0, #6
1a001294:	f003 f9dc 	bl	1a004650 <gpioWrite>

   portsdriverInit(&ports);
1a001298:	4628      	mov	r0, r5
1a00129a:	f7ff ff03 	bl	1a0010a4 <portsdriverInit>

   //UARTEspInit(&UARTData);

   // Create a task in freeRTOS with dynamic memory

   xTaskCreate(
1a00129e:	9401      	str	r4, [sp, #4]
1a0012a0:	2301      	movs	r3, #1
1a0012a2:	9300      	str	r3, [sp, #0]
1a0012a4:	f105 030c 	add.w	r3, r5, #12
1a0012a8:	22b4      	movs	r2, #180	; 0xb4
1a0012aa:	4909      	ldr	r1, [pc, #36]	; (1a0012d0 <main+0x64>)
1a0012ac:	4809      	ldr	r0, [pc, #36]	; (1a0012d4 <main+0x68>)
1a0012ae:	f001 f804 	bl	1a0022ba <xTaskCreate>
      (void*)&UARTData,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );*/

   xTaskCreate(
1a0012b2:	9401      	str	r4, [sp, #4]
1a0012b4:	2302      	movs	r3, #2
1a0012b6:	9300      	str	r3, [sp, #0]
1a0012b8:	4623      	mov	r3, r4
1a0012ba:	22b4      	movs	r2, #180	; 0xb4
1a0012bc:	4906      	ldr	r1, [pc, #24]	; (1a0012d8 <main+0x6c>)
1a0012be:	4807      	ldr	r0, [pc, #28]	; (1a0012dc <main+0x70>)
1a0012c0:	f000 fffb 	bl	1a0022ba <xTaskCreate>
         configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
         (void*)&test,                          // Parameter passed into the task.
         tskIDLE_PRIORITY+1,         // Priority at which the task is created.
         0                           // Pointer to the task created in the system
      );*/
   vTaskStartScheduler(); // Initialize scheduler
1a0012c4:	f001 f82c 	bl	1a002320 <vTaskStartScheduler>
1a0012c8:	e7fe      	b.n	1a0012c8 <main+0x5c>
1a0012ca:	bf00      	nop
1a0012cc:	100002ec 	.word	0x100002ec
1a0012d0:	1a00723c 	.word	0x1a00723c
1a0012d4:	1a001149 	.word	0x1a001149
1a0012d8:	1a007244 	.word	0x1a007244
1a0012dc:	1a00117d 	.word	0x1a00117d

1a0012e0 <initialise_monitor_handles>:
}
1a0012e0:	4770      	bx	lr
1a0012e2:	Address 0x000000001a0012e2 is out of bounds.


1a0012e4 <Reset_Handler>:
void Reset_Handler(void) {
1a0012e4:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0012e6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0012e8:	4b19      	ldr	r3, [pc, #100]	; (1a001350 <Reset_Handler+0x6c>)
1a0012ea:	4a1a      	ldr	r2, [pc, #104]	; (1a001354 <Reset_Handler+0x70>)
1a0012ec:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0012ee:	3304      	adds	r3, #4
1a0012f0:	4a19      	ldr	r2, [pc, #100]	; (1a001358 <Reset_Handler+0x74>)
1a0012f2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0012f4:	2300      	movs	r3, #0
1a0012f6:	e005      	b.n	1a001304 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0012f8:	4a18      	ldr	r2, [pc, #96]	; (1a00135c <Reset_Handler+0x78>)
1a0012fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0012fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001302:	3301      	adds	r3, #1
1a001304:	2b07      	cmp	r3, #7
1a001306:	d9f7      	bls.n	1a0012f8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a001308:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00130a:	4b15      	ldr	r3, [pc, #84]	; (1a001360 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00130c:	e007      	b.n	1a00131e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00130e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001312:	689a      	ldr	r2, [r3, #8]
1a001314:	6859      	ldr	r1, [r3, #4]
1a001316:	6818      	ldr	r0, [r3, #0]
1a001318:	f7fe ff37 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a00131c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00131e:	4a11      	ldr	r2, [pc, #68]	; (1a001364 <Reset_Handler+0x80>)
1a001320:	4293      	cmp	r3, r2
1a001322:	d3f4      	bcc.n	1a00130e <Reset_Handler+0x2a>
1a001324:	e006      	b.n	1a001334 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a001326:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001328:	6859      	ldr	r1, [r3, #4]
1a00132a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00132e:	f7fe ff3b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a001332:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001334:	4a0c      	ldr	r2, [pc, #48]	; (1a001368 <Reset_Handler+0x84>)
1a001336:	4293      	cmp	r3, r2
1a001338:	d3f5      	bcc.n	1a001326 <Reset_Handler+0x42>
    SystemInit();
1a00133a:	f002 fe39 	bl	1a003fb0 <SystemInit>
    __libc_init_array();
1a00133e:	f003 ff3b 	bl	1a0051b8 <__libc_init_array>
    initialise_monitor_handles();
1a001342:	f7ff ffcd 	bl	1a0012e0 <initialise_monitor_handles>
    main();
1a001346:	f7ff ff91 	bl	1a00126c <main>
        __asm__ volatile("wfi");
1a00134a:	bf30      	wfi
1a00134c:	e7fd      	b.n	1a00134a <Reset_Handler+0x66>
1a00134e:	bf00      	nop
1a001350:	40053100 	.word	0x40053100
1a001354:	10df1000 	.word	0x10df1000
1a001358:	01dff7ff 	.word	0x01dff7ff
1a00135c:	e000e280 	.word	0xe000e280
1a001360:	1a000114 	.word	0x1a000114
1a001364:	1a000150 	.word	0x1a000150
1a001368:	1a000178 	.word	0x1a000178

1a00136c <_fini>:
void _fini(void) {}
1a00136c:	4770      	bx	lr

1a00136e <_init>:
void _init(void) {}
1a00136e:	4770      	bx	lr

1a001370 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001370:	2309      	movs	r3, #9
1a001372:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001378:	4770      	bx	lr

1a00137a <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a00137a:	2358      	movs	r3, #88	; 0x58
1a00137c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00137e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001382:	4770      	bx	lr

1a001384 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a001384:	2902      	cmp	r1, #2
1a001386:	d801      	bhi.n	1a00138c <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a001388:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a00138a:	4770      	bx	lr
       SET_ERR(EBADF);
1a00138c:	2309      	movs	r3, #9
1a00138e:	6003      	str	r3, [r0, #0]
       return -1;
1a001390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001394:	4770      	bx	lr

1a001396 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a001396:	2358      	movs	r3, #88	; 0x58
1a001398:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00139a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00139e:	4770      	bx	lr

1a0013a0 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0013a0:	2902      	cmp	r1, #2
1a0013a2:	d81f      	bhi.n	1a0013e4 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0013a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0013a8:	461d      	mov	r5, r3
1a0013aa:	4617      	mov	r7, r2
1a0013ac:	4606      	mov	r6, r0
  size_t i = 0;
1a0013ae:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0013b0:	42ac      	cmp	r4, r5
1a0013b2:	d211      	bcs.n	1a0013d8 <_read_r+0x38>
         int c = __stdio_getchar();
1a0013b4:	f002 f84d 	bl	1a003452 <__stdio_getchar>
         if( c != -1 ){
1a0013b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0013bc:	d0f8      	beq.n	1a0013b0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0013be:	f104 0801 	add.w	r8, r4, #1
1a0013c2:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0013c4:	280d      	cmp	r0, #13
1a0013c6:	d003      	beq.n	1a0013d0 <_read_r+0x30>
1a0013c8:	280a      	cmp	r0, #10
1a0013ca:	d001      	beq.n	1a0013d0 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0013cc:	4644      	mov	r4, r8
1a0013ce:	e7ef      	b.n	1a0013b0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0013d0:	f002 f83f 	bl	1a003452 <__stdio_getchar>
               return i;
1a0013d4:	4640      	mov	r0, r8
1a0013d6:	e003      	b.n	1a0013e0 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0013d8:	2313      	movs	r3, #19
1a0013da:	6033      	str	r3, [r6, #0]
      return -1;
1a0013dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0013e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0013e4:	2313      	movs	r3, #19
1a0013e6:	6003      	str	r3, [r0, #0]
      return -1;
1a0013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0013ec:	4770      	bx	lr

1a0013ee <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0013ee:	2902      	cmp	r1, #2
1a0013f0:	d80c      	bhi.n	1a00140c <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0013f2:	b570      	push	{r4, r5, r6, lr}
1a0013f4:	461d      	mov	r5, r3
1a0013f6:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0013f8:	2400      	movs	r4, #0
1a0013fa:	e003      	b.n	1a001404 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0013fc:	5d30      	ldrb	r0, [r6, r4]
1a0013fe:	f002 f823 	bl	1a003448 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a001402:	3401      	adds	r4, #1
1a001404:	42ac      	cmp	r4, r5
1a001406:	d3f9      	bcc.n	1a0013fc <_write_r+0xe>
       return n;
1a001408:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00140a:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00140c:	2313      	movs	r3, #19
1a00140e:	6003      	str	r3, [r0, #0]
       return -1;
1a001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a001414:	4770      	bx	lr
1a001416:	Address 0x000000001a001416 is out of bounds.


1a001418 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001418:	4b05      	ldr	r3, [pc, #20]	; (1a001430 <_sbrk_r+0x18>)
1a00141a:	681b      	ldr	r3, [r3, #0]
1a00141c:	b123      	cbz	r3, 1a001428 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00141e:	4b04      	ldr	r3, [pc, #16]	; (1a001430 <_sbrk_r+0x18>)
1a001420:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a001422:	4401      	add	r1, r0
1a001424:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001426:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001428:	4b01      	ldr	r3, [pc, #4]	; (1a001430 <_sbrk_r+0x18>)
1a00142a:	4a02      	ldr	r2, [pc, #8]	; (1a001434 <_sbrk_r+0x1c>)
1a00142c:	601a      	str	r2, [r3, #0]
1a00142e:	e7f6      	b.n	1a00141e <_sbrk_r+0x6>
1a001430:	10000340 	.word	0x10000340
1a001434:	10002e20 	.word	0x10002e20

1a001438 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a001438:	4a12      	ldr	r2, [pc, #72]	; (1a001484 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00143a:	f012 0f07 	tst.w	r2, #7
1a00143e:	d01e      	beq.n	1a00147e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a001440:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a001442:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a001446:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a00144a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00144c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00144e:	480e      	ldr	r0, [pc, #56]	; (1a001488 <prvHeapInit+0x50>)
1a001450:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a001452:	2100      	movs	r1, #0
1a001454:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a001456:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a001458:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00145a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00145e:	480b      	ldr	r0, [pc, #44]	; (1a00148c <prvHeapInit+0x54>)
1a001460:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a001462:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a001464:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a001466:	1a99      	subs	r1, r3, r2
1a001468:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a00146a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00146c:	4b08      	ldr	r3, [pc, #32]	; (1a001490 <prvHeapInit+0x58>)
1a00146e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a001470:	4b08      	ldr	r3, [pc, #32]	; (1a001494 <prvHeapInit+0x5c>)
1a001472:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a001474:	4b08      	ldr	r3, [pc, #32]	; (1a001498 <prvHeapInit+0x60>)
1a001476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a00147a:	601a      	str	r2, [r3, #0]
}
1a00147c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00147e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a001482:	e7e4      	b.n	1a00144e <prvHeapInit+0x16>
1a001484:	10000348 	.word	0x10000348
1a001488:	10002354 	.word	0x10002354
1a00148c:	10000344 	.word	0x10000344
1a001490:	10002350 	.word	0x10002350
1a001494:	1000234c 	.word	0x1000234c
1a001498:	10002348 	.word	0x10002348

1a00149c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a00149c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00149e:	4b13      	ldr	r3, [pc, #76]	; (1a0014ec <prvInsertBlockIntoFreeList+0x50>)
1a0014a0:	681a      	ldr	r2, [r3, #0]
1a0014a2:	4282      	cmp	r2, r0
1a0014a4:	d31b      	bcc.n	1a0014de <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0014a6:	6859      	ldr	r1, [r3, #4]
1a0014a8:	185c      	adds	r4, r3, r1
1a0014aa:	4284      	cmp	r4, r0
1a0014ac:	d103      	bne.n	1a0014b6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0014ae:	6840      	ldr	r0, [r0, #4]
1a0014b0:	4401      	add	r1, r0
1a0014b2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a0014b4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0014b6:	6841      	ldr	r1, [r0, #4]
1a0014b8:	1844      	adds	r4, r0, r1
1a0014ba:	42a2      	cmp	r2, r4
1a0014bc:	d113      	bne.n	1a0014e6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0014be:	4c0c      	ldr	r4, [pc, #48]	; (1a0014f0 <prvInsertBlockIntoFreeList+0x54>)
1a0014c0:	6824      	ldr	r4, [r4, #0]
1a0014c2:	42a2      	cmp	r2, r4
1a0014c4:	d00d      	beq.n	1a0014e2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0014c6:	6852      	ldr	r2, [r2, #4]
1a0014c8:	4411      	add	r1, r2
1a0014ca:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0014cc:	681a      	ldr	r2, [r3, #0]
1a0014ce:	6812      	ldr	r2, [r2, #0]
1a0014d0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0014d2:	4298      	cmp	r0, r3
1a0014d4:	d000      	beq.n	1a0014d8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0014d6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0014d8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0014dc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0014de:	4613      	mov	r3, r2
1a0014e0:	e7de      	b.n	1a0014a0 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0014e2:	6004      	str	r4, [r0, #0]
1a0014e4:	e7f5      	b.n	1a0014d2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0014e6:	6002      	str	r2, [r0, #0]
1a0014e8:	e7f3      	b.n	1a0014d2 <prvInsertBlockIntoFreeList+0x36>
1a0014ea:	bf00      	nop
1a0014ec:	10002354 	.word	0x10002354
1a0014f0:	10000344 	.word	0x10000344

1a0014f4 <pvPortMalloc>:
{
1a0014f4:	b570      	push	{r4, r5, r6, lr}
1a0014f6:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0014f8:	f000 ff5c 	bl	1a0023b4 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0014fc:	4b3f      	ldr	r3, [pc, #252]	; (1a0015fc <pvPortMalloc+0x108>)
1a0014fe:	681b      	ldr	r3, [r3, #0]
1a001500:	b1a3      	cbz	r3, 1a00152c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a001502:	4b3f      	ldr	r3, [pc, #252]	; (1a001600 <pvPortMalloc+0x10c>)
1a001504:	681b      	ldr	r3, [r3, #0]
1a001506:	421c      	tst	r4, r3
1a001508:	d013      	beq.n	1a001532 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a00150a:	f000 ffed 	bl	1a0024e8 <xTaskResumeAll>
void *pvReturn = NULL;
1a00150e:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a001510:	f000 fcf2 	bl	1a001ef8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a001514:	f016 0f07 	tst.w	r6, #7
1a001518:	d06e      	beq.n	1a0015f8 <pvPortMalloc+0x104>
	__asm volatile
1a00151a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00151e:	f383 8811 	msr	BASEPRI, r3
1a001522:	f3bf 8f6f 	isb	sy
1a001526:	f3bf 8f4f 	dsb	sy
1a00152a:	e7fe      	b.n	1a00152a <pvPortMalloc+0x36>
			prvHeapInit();
1a00152c:	f7ff ff84 	bl	1a001438 <prvHeapInit>
1a001530:	e7e7      	b.n	1a001502 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a001532:	b194      	cbz	r4, 1a00155a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a001534:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a001536:	f014 0f07 	tst.w	r4, #7
1a00153a:	d00e      	beq.n	1a00155a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a00153c:	f024 0407 	bic.w	r4, r4, #7
1a001540:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a001542:	f004 0307 	and.w	r3, r4, #7
1a001546:	b143      	cbz	r3, 1a00155a <pvPortMalloc+0x66>
1a001548:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00154c:	f383 8811 	msr	BASEPRI, r3
1a001550:	f3bf 8f6f 	isb	sy
1a001554:	f3bf 8f4f 	dsb	sy
1a001558:	e7fe      	b.n	1a001558 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a00155a:	b134      	cbz	r4, 1a00156a <pvPortMalloc+0x76>
1a00155c:	4b29      	ldr	r3, [pc, #164]	; (1a001604 <pvPortMalloc+0x110>)
1a00155e:	681b      	ldr	r3, [r3, #0]
1a001560:	42a3      	cmp	r3, r4
1a001562:	d306      	bcc.n	1a001572 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a001564:	4b28      	ldr	r3, [pc, #160]	; (1a001608 <pvPortMalloc+0x114>)
1a001566:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a001568:	e009      	b.n	1a00157e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a00156a:	f000 ffbd 	bl	1a0024e8 <xTaskResumeAll>
void *pvReturn = NULL;
1a00156e:	2600      	movs	r6, #0
1a001570:	e7ce      	b.n	1a001510 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a001572:	f000 ffb9 	bl	1a0024e8 <xTaskResumeAll>
void *pvReturn = NULL;
1a001576:	2600      	movs	r6, #0
1a001578:	e7ca      	b.n	1a001510 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a00157a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a00157c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00157e:	686a      	ldr	r2, [r5, #4]
1a001580:	42a2      	cmp	r2, r4
1a001582:	d202      	bcs.n	1a00158a <pvPortMalloc+0x96>
1a001584:	682a      	ldr	r2, [r5, #0]
1a001586:	2a00      	cmp	r2, #0
1a001588:	d1f7      	bne.n	1a00157a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a00158a:	4a1c      	ldr	r2, [pc, #112]	; (1a0015fc <pvPortMalloc+0x108>)
1a00158c:	6812      	ldr	r2, [r2, #0]
1a00158e:	42aa      	cmp	r2, r5
1a001590:	d014      	beq.n	1a0015bc <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a001592:	681e      	ldr	r6, [r3, #0]
1a001594:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a001596:	682a      	ldr	r2, [r5, #0]
1a001598:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00159a:	686b      	ldr	r3, [r5, #4]
1a00159c:	1b1b      	subs	r3, r3, r4
1a00159e:	2b10      	cmp	r3, #16
1a0015a0:	d914      	bls.n	1a0015cc <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a0015a2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0015a4:	f010 0f07 	tst.w	r0, #7
1a0015a8:	d00c      	beq.n	1a0015c4 <pvPortMalloc+0xd0>
1a0015aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ae:	f383 8811 	msr	BASEPRI, r3
1a0015b2:	f3bf 8f6f 	isb	sy
1a0015b6:	f3bf 8f4f 	dsb	sy
1a0015ba:	e7fe      	b.n	1a0015ba <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a0015bc:	f000 ff94 	bl	1a0024e8 <xTaskResumeAll>
void *pvReturn = NULL;
1a0015c0:	2600      	movs	r6, #0
1a0015c2:	e7a5      	b.n	1a001510 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0015c4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0015c6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0015c8:	f7ff ff68 	bl	1a00149c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0015cc:	686a      	ldr	r2, [r5, #4]
1a0015ce:	490d      	ldr	r1, [pc, #52]	; (1a001604 <pvPortMalloc+0x110>)
1a0015d0:	680b      	ldr	r3, [r1, #0]
1a0015d2:	1a9b      	subs	r3, r3, r2
1a0015d4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0015d6:	490d      	ldr	r1, [pc, #52]	; (1a00160c <pvPortMalloc+0x118>)
1a0015d8:	6809      	ldr	r1, [r1, #0]
1a0015da:	428b      	cmp	r3, r1
1a0015dc:	d201      	bcs.n	1a0015e2 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0015de:	490b      	ldr	r1, [pc, #44]	; (1a00160c <pvPortMalloc+0x118>)
1a0015e0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0015e2:	4b07      	ldr	r3, [pc, #28]	; (1a001600 <pvPortMalloc+0x10c>)
1a0015e4:	681b      	ldr	r3, [r3, #0]
1a0015e6:	4313      	orrs	r3, r2
1a0015e8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0015ea:	2300      	movs	r3, #0
1a0015ec:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0015ee:	f000 ff7b 	bl	1a0024e8 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0015f2:	2e00      	cmp	r6, #0
1a0015f4:	d18e      	bne.n	1a001514 <pvPortMalloc+0x20>
1a0015f6:	e78b      	b.n	1a001510 <pvPortMalloc+0x1c>
}
1a0015f8:	4630      	mov	r0, r6
1a0015fa:	bd70      	pop	{r4, r5, r6, pc}
1a0015fc:	10000344 	.word	0x10000344
1a001600:	10002348 	.word	0x10002348
1a001604:	1000234c 	.word	0x1000234c
1a001608:	10002354 	.word	0x10002354
1a00160c:	10002350 	.word	0x10002350

1a001610 <vPortFree>:
	if( pv != NULL )
1a001610:	b380      	cbz	r0, 1a001674 <vPortFree+0x64>
{
1a001612:	b538      	push	{r3, r4, r5, lr}
1a001614:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a001616:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00161a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00161e:	4916      	ldr	r1, [pc, #88]	; (1a001678 <vPortFree+0x68>)
1a001620:	6809      	ldr	r1, [r1, #0]
1a001622:	420a      	tst	r2, r1
1a001624:	d108      	bne.n	1a001638 <vPortFree+0x28>
1a001626:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00162a:	f383 8811 	msr	BASEPRI, r3
1a00162e:	f3bf 8f6f 	isb	sy
1a001632:	f3bf 8f4f 	dsb	sy
1a001636:	e7fe      	b.n	1a001636 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a001638:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a00163c:	b140      	cbz	r0, 1a001650 <vPortFree+0x40>
1a00163e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001642:	f383 8811 	msr	BASEPRI, r3
1a001646:	f3bf 8f6f 	isb	sy
1a00164a:	f3bf 8f4f 	dsb	sy
1a00164e:	e7fe      	b.n	1a00164e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a001650:	ea22 0201 	bic.w	r2, r2, r1
1a001654:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a001658:	f000 feac 	bl	1a0023b4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a00165c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a001660:	4a06      	ldr	r2, [pc, #24]	; (1a00167c <vPortFree+0x6c>)
1a001662:	6813      	ldr	r3, [r2, #0]
1a001664:	440b      	add	r3, r1
1a001666:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a001668:	4628      	mov	r0, r5
1a00166a:	f7ff ff17 	bl	1a00149c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00166e:	f000 ff3b 	bl	1a0024e8 <xTaskResumeAll>
}
1a001672:	bd38      	pop	{r3, r4, r5, pc}
1a001674:	4770      	bx	lr
1a001676:	bf00      	nop
1a001678:	10002348 	.word	0x10002348
1a00167c:	1000234c 	.word	0x1000234c

1a001680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a001680:	b510      	push	{r4, lr}
1a001682:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a001684:	f001 fc8e 	bl	1a002fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a001688:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00168a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00168c:	429a      	cmp	r2, r3
1a00168e:	d004      	beq.n	1a00169a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a001690:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a001692:	f001 fca9 	bl	1a002fe8 <vPortExitCritical>

	return xReturn;
}
1a001696:	4620      	mov	r0, r4
1a001698:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a00169a:	2401      	movs	r4, #1
1a00169c:	e7f9      	b.n	1a001692 <prvIsQueueFull+0x12>

1a00169e <prvIsQueueEmpty>:
{
1a00169e:	b510      	push	{r4, lr}
1a0016a0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0016a2:	f001 fc7f 	bl	1a002fa4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0016a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0016a8:	b123      	cbz	r3, 1a0016b4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0016aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0016ac:	f001 fc9c 	bl	1a002fe8 <vPortExitCritical>
}
1a0016b0:	4620      	mov	r0, r4
1a0016b2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0016b4:	2401      	movs	r4, #1
1a0016b6:	e7f9      	b.n	1a0016ac <prvIsQueueEmpty+0xe>

1a0016b8 <prvCopyDataToQueue>:
{
1a0016b8:	b570      	push	{r4, r5, r6, lr}
1a0016ba:	4604      	mov	r4, r0
1a0016bc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0016be:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0016c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0016c2:	b95a      	cbnz	r2, 1a0016dc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0016c4:	6803      	ldr	r3, [r0, #0]
1a0016c6:	b11b      	cbz	r3, 1a0016d0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0016c8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0016ca:	3501      	adds	r5, #1
1a0016cc:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0016ce:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0016d0:	6840      	ldr	r0, [r0, #4]
1a0016d2:	f001 f93b 	bl	1a00294c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0016d6:	2300      	movs	r3, #0
1a0016d8:	6063      	str	r3, [r4, #4]
1a0016da:	e7f6      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0016dc:	b96e      	cbnz	r6, 1a0016fa <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0016de:	6880      	ldr	r0, [r0, #8]
1a0016e0:	f003 fd8e 	bl	1a005200 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0016e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0016e6:	68a3      	ldr	r3, [r4, #8]
1a0016e8:	4413      	add	r3, r2
1a0016ea:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0016ec:	6862      	ldr	r2, [r4, #4]
1a0016ee:	4293      	cmp	r3, r2
1a0016f0:	d319      	bcc.n	1a001726 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0016f2:	6823      	ldr	r3, [r4, #0]
1a0016f4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0016f6:	2000      	movs	r0, #0
1a0016f8:	e7e7      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0016fa:	68c0      	ldr	r0, [r0, #12]
1a0016fc:	f003 fd80 	bl	1a005200 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001700:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001702:	4252      	negs	r2, r2
1a001704:	68e3      	ldr	r3, [r4, #12]
1a001706:	4413      	add	r3, r2
1a001708:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00170a:	6821      	ldr	r1, [r4, #0]
1a00170c:	428b      	cmp	r3, r1
1a00170e:	d202      	bcs.n	1a001716 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001710:	6863      	ldr	r3, [r4, #4]
1a001712:	441a      	add	r2, r3
1a001714:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a001716:	2e02      	cmp	r6, #2
1a001718:	d001      	beq.n	1a00171e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00171a:	2000      	movs	r0, #0
1a00171c:	e7d5      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00171e:	b125      	cbz	r5, 1a00172a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001720:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001722:	2000      	movs	r0, #0
1a001724:	e7d1      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
1a001726:	2000      	movs	r0, #0
1a001728:	e7cf      	b.n	1a0016ca <prvCopyDataToQueue+0x12>
1a00172a:	2000      	movs	r0, #0
1a00172c:	e7cd      	b.n	1a0016ca <prvCopyDataToQueue+0x12>

1a00172e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00172e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001730:	b172      	cbz	r2, 1a001750 <prvCopyDataFromQueue+0x22>
{
1a001732:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001734:	68c3      	ldr	r3, [r0, #12]
1a001736:	4413      	add	r3, r2
1a001738:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00173a:	6844      	ldr	r4, [r0, #4]
1a00173c:	42a3      	cmp	r3, r4
1a00173e:	d301      	bcc.n	1a001744 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a001740:	6803      	ldr	r3, [r0, #0]
1a001742:	60c3      	str	r3, [r0, #12]
1a001744:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a001746:	68c1      	ldr	r1, [r0, #12]
1a001748:	4620      	mov	r0, r4
1a00174a:	f003 fd59 	bl	1a005200 <memcpy>
}
1a00174e:	bd10      	pop	{r4, pc}
1a001750:	4770      	bx	lr

1a001752 <prvUnlockQueue>:
{
1a001752:	b538      	push	{r3, r4, r5, lr}
1a001754:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a001756:	f001 fc25 	bl	1a002fa4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00175a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00175e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a001760:	e003      	b.n	1a00176a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a001762:	f001 f8dd 	bl	1a002920 <vTaskMissedYield>
			--cTxLock;
1a001766:	3c01      	subs	r4, #1
1a001768:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00176a:	2c00      	cmp	r4, #0
1a00176c:	dd08      	ble.n	1a001780 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00176e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a001770:	b133      	cbz	r3, 1a001780 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001772:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a001776:	f001 f841 	bl	1a0027fc <xTaskRemoveFromEventList>
1a00177a:	2800      	cmp	r0, #0
1a00177c:	d0f3      	beq.n	1a001766 <prvUnlockQueue+0x14>
1a00177e:	e7f0      	b.n	1a001762 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a001780:	23ff      	movs	r3, #255	; 0xff
1a001782:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a001786:	f001 fc2f 	bl	1a002fe8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a00178a:	f001 fc0b 	bl	1a002fa4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a00178e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a001792:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001794:	e003      	b.n	1a00179e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a001796:	f001 f8c3 	bl	1a002920 <vTaskMissedYield>
				--cRxLock;
1a00179a:	3c01      	subs	r4, #1
1a00179c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a00179e:	2c00      	cmp	r4, #0
1a0017a0:	dd08      	ble.n	1a0017b4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0017a2:	692b      	ldr	r3, [r5, #16]
1a0017a4:	b133      	cbz	r3, 1a0017b4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0017a6:	f105 0010 	add.w	r0, r5, #16
1a0017aa:	f001 f827 	bl	1a0027fc <xTaskRemoveFromEventList>
1a0017ae:	2800      	cmp	r0, #0
1a0017b0:	d0f3      	beq.n	1a00179a <prvUnlockQueue+0x48>
1a0017b2:	e7f0      	b.n	1a001796 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0017b4:	23ff      	movs	r3, #255	; 0xff
1a0017b6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0017ba:	f001 fc15 	bl	1a002fe8 <vPortExitCritical>
}
1a0017be:	bd38      	pop	{r3, r4, r5, pc}

1a0017c0 <xQueueGenericReset>:
{
1a0017c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0017c2:	b940      	cbnz	r0, 1a0017d6 <xQueueGenericReset+0x16>
1a0017c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017c8:	f383 8811 	msr	BASEPRI, r3
1a0017cc:	f3bf 8f6f 	isb	sy
1a0017d0:	f3bf 8f4f 	dsb	sy
1a0017d4:	e7fe      	b.n	1a0017d4 <xQueueGenericReset+0x14>
1a0017d6:	4604      	mov	r4, r0
1a0017d8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a0017da:	f001 fbe3 	bl	1a002fa4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0017de:	6821      	ldr	r1, [r4, #0]
1a0017e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0017e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0017e4:	fb03 1002 	mla	r0, r3, r2, r1
1a0017e8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0017ea:	2000      	movs	r0, #0
1a0017ec:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a0017ee:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a0017f0:	3a01      	subs	r2, #1
1a0017f2:	fb02 1303 	mla	r3, r2, r3, r1
1a0017f6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a0017f8:	23ff      	movs	r3, #255	; 0xff
1a0017fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a0017fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001802:	b9a5      	cbnz	r5, 1a00182e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001804:	6923      	ldr	r3, [r4, #16]
1a001806:	b91b      	cbnz	r3, 1a001810 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a001808:	f001 fbee 	bl	1a002fe8 <vPortExitCritical>
}
1a00180c:	2001      	movs	r0, #1
1a00180e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001810:	f104 0010 	add.w	r0, r4, #16
1a001814:	f000 fff2 	bl	1a0027fc <xTaskRemoveFromEventList>
1a001818:	2800      	cmp	r0, #0
1a00181a:	d0f5      	beq.n	1a001808 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a00181c:	4b08      	ldr	r3, [pc, #32]	; (1a001840 <xQueueGenericReset+0x80>)
1a00181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001822:	601a      	str	r2, [r3, #0]
1a001824:	f3bf 8f4f 	dsb	sy
1a001828:	f3bf 8f6f 	isb	sy
1a00182c:	e7ec      	b.n	1a001808 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00182e:	f104 0010 	add.w	r0, r4, #16
1a001832:	f000 faea 	bl	1a001e0a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a001836:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00183a:	f000 fae6 	bl	1a001e0a <vListInitialise>
1a00183e:	e7e3      	b.n	1a001808 <xQueueGenericReset+0x48>
1a001840:	e000ed04 	.word	0xe000ed04

1a001844 <prvInitialiseNewQueue>:
{
1a001844:	b538      	push	{r3, r4, r5, lr}
1a001846:	461d      	mov	r5, r3
1a001848:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00184a:	460b      	mov	r3, r1
1a00184c:	b149      	cbz	r1, 1a001862 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00184e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001850:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001852:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001854:	2101      	movs	r1, #1
1a001856:	4620      	mov	r0, r4
1a001858:	f7ff ffb2 	bl	1a0017c0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a00185c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001860:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001862:	6024      	str	r4, [r4, #0]
1a001864:	e7f4      	b.n	1a001850 <prvInitialiseNewQueue+0xc>

1a001866 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001866:	b940      	cbnz	r0, 1a00187a <xQueueGenericCreateStatic+0x14>
1a001868:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00186c:	f383 8811 	msr	BASEPRI, r3
1a001870:	f3bf 8f6f 	isb	sy
1a001874:	f3bf 8f4f 	dsb	sy
1a001878:	e7fe      	b.n	1a001878 <xQueueGenericCreateStatic+0x12>
	{
1a00187a:	b510      	push	{r4, lr}
1a00187c:	b084      	sub	sp, #16
1a00187e:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a001880:	b153      	cbz	r3, 1a001898 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a001882:	b192      	cbz	r2, 1a0018aa <xQueueGenericCreateStatic+0x44>
1a001884:	b989      	cbnz	r1, 1a0018aa <xQueueGenericCreateStatic+0x44>
1a001886:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00188a:	f383 8811 	msr	BASEPRI, r3
1a00188e:	f3bf 8f6f 	isb	sy
1a001892:	f3bf 8f4f 	dsb	sy
1a001896:	e7fe      	b.n	1a001896 <xQueueGenericCreateStatic+0x30>
1a001898:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00189c:	f383 8811 	msr	BASEPRI, r3
1a0018a0:	f3bf 8f6f 	isb	sy
1a0018a4:	f3bf 8f4f 	dsb	sy
1a0018a8:	e7fe      	b.n	1a0018a8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0018aa:	b94a      	cbnz	r2, 1a0018c0 <xQueueGenericCreateStatic+0x5a>
1a0018ac:	b141      	cbz	r1, 1a0018c0 <xQueueGenericCreateStatic+0x5a>
1a0018ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018b2:	f383 8811 	msr	BASEPRI, r3
1a0018b6:	f3bf 8f6f 	isb	sy
1a0018ba:	f3bf 8f4f 	dsb	sy
1a0018be:	e7fe      	b.n	1a0018be <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0018c0:	2050      	movs	r0, #80	; 0x50
1a0018c2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0018c4:	9803      	ldr	r0, [sp, #12]
1a0018c6:	2850      	cmp	r0, #80	; 0x50
1a0018c8:	d008      	beq.n	1a0018dc <xQueueGenericCreateStatic+0x76>
1a0018ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ce:	f383 8811 	msr	BASEPRI, r3
1a0018d2:	f3bf 8f6f 	isb	sy
1a0018d6:	f3bf 8f4f 	dsb	sy
1a0018da:	e7fe      	b.n	1a0018da <xQueueGenericCreateStatic+0x74>
1a0018dc:	4620      	mov	r0, r4
1a0018de:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a0018e0:	2301      	movs	r3, #1
1a0018e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a0018e6:	9400      	str	r4, [sp, #0]
1a0018e8:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a0018ec:	f7ff ffaa 	bl	1a001844 <prvInitialiseNewQueue>
	}
1a0018f0:	4620      	mov	r0, r4
1a0018f2:	b004      	add	sp, #16
1a0018f4:	bd10      	pop	{r4, pc}

1a0018f6 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0018f6:	b940      	cbnz	r0, 1a00190a <xQueueGenericCreate+0x14>
1a0018f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018fc:	f383 8811 	msr	BASEPRI, r3
1a001900:	f3bf 8f6f 	isb	sy
1a001904:	f3bf 8f4f 	dsb	sy
1a001908:	e7fe      	b.n	1a001908 <xQueueGenericCreate+0x12>
	{
1a00190a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00190c:	b083      	sub	sp, #12
1a00190e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001910:	b111      	cbz	r1, 1a001918 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001912:	fb01 f000 	mul.w	r0, r1, r0
1a001916:	e000      	b.n	1a00191a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001918:	2000      	movs	r0, #0
1a00191a:	4617      	mov	r7, r2
1a00191c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00191e:	3050      	adds	r0, #80	; 0x50
1a001920:	f7ff fde8 	bl	1a0014f4 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001924:	4605      	mov	r5, r0
1a001926:	b150      	cbz	r0, 1a00193e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001928:	2300      	movs	r3, #0
1a00192a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00192e:	9000      	str	r0, [sp, #0]
1a001930:	463b      	mov	r3, r7
1a001932:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001936:	4621      	mov	r1, r4
1a001938:	4630      	mov	r0, r6
1a00193a:	f7ff ff83 	bl	1a001844 <prvInitialiseNewQueue>
	}
1a00193e:	4628      	mov	r0, r5
1a001940:	b003      	add	sp, #12
1a001942:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001944 <xQueueGenericSend>:
{
1a001944:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001946:	b085      	sub	sp, #20
1a001948:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00194a:	b160      	cbz	r0, 1a001966 <xQueueGenericSend+0x22>
1a00194c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00194e:	b999      	cbnz	r1, 1a001978 <xQueueGenericSend+0x34>
1a001950:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001952:	b18a      	cbz	r2, 1a001978 <xQueueGenericSend+0x34>
1a001954:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001958:	f383 8811 	msr	BASEPRI, r3
1a00195c:	f3bf 8f6f 	isb	sy
1a001960:	f3bf 8f4f 	dsb	sy
1a001964:	e7fe      	b.n	1a001964 <xQueueGenericSend+0x20>
1a001966:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00196a:	f383 8811 	msr	BASEPRI, r3
1a00196e:	f3bf 8f6f 	isb	sy
1a001972:	f3bf 8f4f 	dsb	sy
1a001976:	e7fe      	b.n	1a001976 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001978:	2b02      	cmp	r3, #2
1a00197a:	d10b      	bne.n	1a001994 <xQueueGenericSend+0x50>
1a00197c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00197e:	2a01      	cmp	r2, #1
1a001980:	d008      	beq.n	1a001994 <xQueueGenericSend+0x50>
1a001982:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001986:	f383 8811 	msr	BASEPRI, r3
1a00198a:	f3bf 8f6f 	isb	sy
1a00198e:	f3bf 8f4f 	dsb	sy
1a001992:	e7fe      	b.n	1a001992 <xQueueGenericSend+0x4e>
1a001994:	461e      	mov	r6, r3
1a001996:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001998:	f000 ffc8 	bl	1a00292c <xTaskGetSchedulerState>
1a00199c:	b950      	cbnz	r0, 1a0019b4 <xQueueGenericSend+0x70>
1a00199e:	9b01      	ldr	r3, [sp, #4]
1a0019a0:	b153      	cbz	r3, 1a0019b8 <xQueueGenericSend+0x74>
1a0019a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019a6:	f383 8811 	msr	BASEPRI, r3
1a0019aa:	f3bf 8f6f 	isb	sy
1a0019ae:	f3bf 8f4f 	dsb	sy
1a0019b2:	e7fe      	b.n	1a0019b2 <xQueueGenericSend+0x6e>
1a0019b4:	2500      	movs	r5, #0
1a0019b6:	e03a      	b.n	1a001a2e <xQueueGenericSend+0xea>
1a0019b8:	2500      	movs	r5, #0
1a0019ba:	e038      	b.n	1a001a2e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0019bc:	4632      	mov	r2, r6
1a0019be:	4639      	mov	r1, r7
1a0019c0:	4620      	mov	r0, r4
1a0019c2:	f7ff fe79 	bl	1a0016b8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0019c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0019c8:	b94b      	cbnz	r3, 1a0019de <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0019ca:	b1a8      	cbz	r0, 1a0019f8 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0019cc:	4b3b      	ldr	r3, [pc, #236]	; (1a001abc <xQueueGenericSend+0x178>)
1a0019ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019d2:	601a      	str	r2, [r3, #0]
1a0019d4:	f3bf 8f4f 	dsb	sy
1a0019d8:	f3bf 8f6f 	isb	sy
1a0019dc:	e00c      	b.n	1a0019f8 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0019de:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0019e2:	f000 ff0b 	bl	1a0027fc <xTaskRemoveFromEventList>
1a0019e6:	b138      	cbz	r0, 1a0019f8 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a0019e8:	4b34      	ldr	r3, [pc, #208]	; (1a001abc <xQueueGenericSend+0x178>)
1a0019ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019ee:	601a      	str	r2, [r3, #0]
1a0019f0:	f3bf 8f4f 	dsb	sy
1a0019f4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0019f8:	f001 faf6 	bl	1a002fe8 <vPortExitCritical>
				return pdPASS;
1a0019fc:	2001      	movs	r0, #1
}
1a0019fe:	b005      	add	sp, #20
1a001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a001a02:	f001 faf1 	bl	1a002fe8 <vPortExitCritical>
					return errQUEUE_FULL;
1a001a06:	2000      	movs	r0, #0
1a001a08:	e7f9      	b.n	1a0019fe <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001a0a:	a802      	add	r0, sp, #8
1a001a0c:	f000 ff3c 	bl	1a002888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001a10:	2501      	movs	r5, #1
1a001a12:	e019      	b.n	1a001a48 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a001a14:	2300      	movs	r3, #0
1a001a16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001a1a:	e021      	b.n	1a001a60 <xQueueGenericSend+0x11c>
1a001a1c:	2300      	movs	r3, #0
1a001a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001a22:	e023      	b.n	1a001a6c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a001a24:	4620      	mov	r0, r4
1a001a26:	f7ff fe94 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001a2a:	f000 fd5d 	bl	1a0024e8 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001a2e:	f001 fab9 	bl	1a002fa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001a32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001a36:	429a      	cmp	r2, r3
1a001a38:	d3c0      	bcc.n	1a0019bc <xQueueGenericSend+0x78>
1a001a3a:	2e02      	cmp	r6, #2
1a001a3c:	d0be      	beq.n	1a0019bc <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001a3e:	9b01      	ldr	r3, [sp, #4]
1a001a40:	2b00      	cmp	r3, #0
1a001a42:	d0de      	beq.n	1a001a02 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a001a44:	2d00      	cmp	r5, #0
1a001a46:	d0e0      	beq.n	1a001a0a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001a48:	f001 face 	bl	1a002fe8 <vPortExitCritical>
		vTaskSuspendAll();
1a001a4c:	f000 fcb2 	bl	1a0023b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001a50:	f001 faa8 	bl	1a002fa4 <vPortEnterCritical>
1a001a54:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001a58:	b25b      	sxtb	r3, r3
1a001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a5e:	d0d9      	beq.n	1a001a14 <xQueueGenericSend+0xd0>
1a001a60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001a64:	b25b      	sxtb	r3, r3
1a001a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001a6a:	d0d7      	beq.n	1a001a1c <xQueueGenericSend+0xd8>
1a001a6c:	f001 fabc 	bl	1a002fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001a70:	a901      	add	r1, sp, #4
1a001a72:	a802      	add	r0, sp, #8
1a001a74:	f000 ff14 	bl	1a0028a0 <xTaskCheckForTimeOut>
1a001a78:	b9c8      	cbnz	r0, 1a001aae <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001a7a:	4620      	mov	r0, r4
1a001a7c:	f7ff fe00 	bl	1a001680 <prvIsQueueFull>
1a001a80:	2800      	cmp	r0, #0
1a001a82:	d0cf      	beq.n	1a001a24 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001a84:	9901      	ldr	r1, [sp, #4]
1a001a86:	f104 0010 	add.w	r0, r4, #16
1a001a8a:	f000 fe83 	bl	1a002794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001a8e:	4620      	mov	r0, r4
1a001a90:	f7ff fe5f 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001a94:	f000 fd28 	bl	1a0024e8 <xTaskResumeAll>
1a001a98:	2800      	cmp	r0, #0
1a001a9a:	d1c8      	bne.n	1a001a2e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001a9c:	4b07      	ldr	r3, [pc, #28]	; (1a001abc <xQueueGenericSend+0x178>)
1a001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001aa2:	601a      	str	r2, [r3, #0]
1a001aa4:	f3bf 8f4f 	dsb	sy
1a001aa8:	f3bf 8f6f 	isb	sy
1a001aac:	e7bf      	b.n	1a001a2e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001aae:	4620      	mov	r0, r4
1a001ab0:	f7ff fe4f 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001ab4:	f000 fd18 	bl	1a0024e8 <xTaskResumeAll>
			return errQUEUE_FULL;
1a001ab8:	2000      	movs	r0, #0
1a001aba:	e7a0      	b.n	1a0019fe <xQueueGenericSend+0xba>
1a001abc:	e000ed04 	.word	0xe000ed04

1a001ac0 <xQueueGenericSendFromISR>:
{
1a001ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001ac4:	b160      	cbz	r0, 1a001ae0 <xQueueGenericSendFromISR+0x20>
1a001ac6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001ac8:	b999      	cbnz	r1, 1a001af2 <xQueueGenericSendFromISR+0x32>
1a001aca:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001acc:	b188      	cbz	r0, 1a001af2 <xQueueGenericSendFromISR+0x32>
1a001ace:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ad2:	f383 8811 	msr	BASEPRI, r3
1a001ad6:	f3bf 8f6f 	isb	sy
1a001ada:	f3bf 8f4f 	dsb	sy
1a001ade:	e7fe      	b.n	1a001ade <xQueueGenericSendFromISR+0x1e>
1a001ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae4:	f383 8811 	msr	BASEPRI, r3
1a001ae8:	f3bf 8f6f 	isb	sy
1a001aec:	f3bf 8f4f 	dsb	sy
1a001af0:	e7fe      	b.n	1a001af0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001af2:	2b02      	cmp	r3, #2
1a001af4:	d10b      	bne.n	1a001b0e <xQueueGenericSendFromISR+0x4e>
1a001af6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001af8:	2801      	cmp	r0, #1
1a001afa:	d008      	beq.n	1a001b0e <xQueueGenericSendFromISR+0x4e>
1a001afc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b00:	f383 8811 	msr	BASEPRI, r3
1a001b04:	f3bf 8f6f 	isb	sy
1a001b08:	f3bf 8f4f 	dsb	sy
1a001b0c:	e7fe      	b.n	1a001b0c <xQueueGenericSendFromISR+0x4c>
1a001b0e:	461f      	mov	r7, r3
1a001b10:	4690      	mov	r8, r2
1a001b12:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001b14:	f001 fb70 	bl	1a0031f8 <vPortValidateInterruptPriority>
	__asm volatile
1a001b18:	f3ef 8611 	mrs	r6, BASEPRI
1a001b1c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b20:	f383 8811 	msr	BASEPRI, r3
1a001b24:	f3bf 8f6f 	isb	sy
1a001b28:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001b2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001b2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001b30:	429a      	cmp	r2, r3
1a001b32:	d303      	bcc.n	1a001b3c <xQueueGenericSendFromISR+0x7c>
1a001b34:	2f02      	cmp	r7, #2
1a001b36:	d001      	beq.n	1a001b3c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001b38:	2000      	movs	r0, #0
1a001b3a:	e00f      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001b3c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001b40:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001b42:	463a      	mov	r2, r7
1a001b44:	4649      	mov	r1, r9
1a001b46:	4620      	mov	r0, r4
1a001b48:	f7ff fdb6 	bl	1a0016b8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a001b4c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001b50:	d008      	beq.n	1a001b64 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001b52:	1c6b      	adds	r3, r5, #1
1a001b54:	b25b      	sxtb	r3, r3
1a001b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a001b5a:	2001      	movs	r0, #1
	__asm volatile
1a001b5c:	f386 8811 	msr	BASEPRI, r6
}
1a001b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001b66:	b15b      	cbz	r3, 1a001b80 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001b68:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001b6c:	f000 fe46 	bl	1a0027fc <xTaskRemoveFromEventList>
1a001b70:	b140      	cbz	r0, 1a001b84 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a001b72:	f1b8 0f00 	cmp.w	r8, #0
1a001b76:	d007      	beq.n	1a001b88 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a001b78:	2001      	movs	r0, #1
1a001b7a:	f8c8 0000 	str.w	r0, [r8]
1a001b7e:	e7ed      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a001b80:	2001      	movs	r0, #1
1a001b82:	e7eb      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
1a001b84:	2001      	movs	r0, #1
1a001b86:	e7e9      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>
1a001b88:	2001      	movs	r0, #1
1a001b8a:	e7e7      	b.n	1a001b5c <xQueueGenericSendFromISR+0x9c>

1a001b8c <xQueueReceive>:
{
1a001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001b8e:	b085      	sub	sp, #20
1a001b90:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001b92:	b160      	cbz	r0, 1a001bae <xQueueReceive+0x22>
1a001b94:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001b96:	b999      	cbnz	r1, 1a001bc0 <xQueueReceive+0x34>
1a001b98:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001b9a:	b18b      	cbz	r3, 1a001bc0 <xQueueReceive+0x34>
	__asm volatile
1a001b9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba0:	f383 8811 	msr	BASEPRI, r3
1a001ba4:	f3bf 8f6f 	isb	sy
1a001ba8:	f3bf 8f4f 	dsb	sy
1a001bac:	e7fe      	b.n	1a001bac <xQueueReceive+0x20>
1a001bae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bb2:	f383 8811 	msr	BASEPRI, r3
1a001bb6:	f3bf 8f6f 	isb	sy
1a001bba:	f3bf 8f4f 	dsb	sy
1a001bbe:	e7fe      	b.n	1a001bbe <xQueueReceive+0x32>
1a001bc0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001bc2:	f000 feb3 	bl	1a00292c <xTaskGetSchedulerState>
1a001bc6:	b950      	cbnz	r0, 1a001bde <xQueueReceive+0x52>
1a001bc8:	9b01      	ldr	r3, [sp, #4]
1a001bca:	b153      	cbz	r3, 1a001be2 <xQueueReceive+0x56>
1a001bcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bd0:	f383 8811 	msr	BASEPRI, r3
1a001bd4:	f3bf 8f6f 	isb	sy
1a001bd8:	f3bf 8f4f 	dsb	sy
1a001bdc:	e7fe      	b.n	1a001bdc <xQueueReceive+0x50>
1a001bde:	2600      	movs	r6, #0
1a001be0:	e03e      	b.n	1a001c60 <xQueueReceive+0xd4>
1a001be2:	2600      	movs	r6, #0
1a001be4:	e03c      	b.n	1a001c60 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001be6:	4639      	mov	r1, r7
1a001be8:	4620      	mov	r0, r4
1a001bea:	f7ff fda0 	bl	1a00172e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001bee:	3d01      	subs	r5, #1
1a001bf0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001bf2:	6923      	ldr	r3, [r4, #16]
1a001bf4:	b923      	cbnz	r3, 1a001c00 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001bf6:	f001 f9f7 	bl	1a002fe8 <vPortExitCritical>
				return pdPASS;
1a001bfa:	2001      	movs	r0, #1
}
1a001bfc:	b005      	add	sp, #20
1a001bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001c00:	f104 0010 	add.w	r0, r4, #16
1a001c04:	f000 fdfa 	bl	1a0027fc <xTaskRemoveFromEventList>
1a001c08:	2800      	cmp	r0, #0
1a001c0a:	d0f4      	beq.n	1a001bf6 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001c0c:	4b34      	ldr	r3, [pc, #208]	; (1a001ce0 <xQueueReceive+0x154>)
1a001c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c12:	601a      	str	r2, [r3, #0]
1a001c14:	f3bf 8f4f 	dsb	sy
1a001c18:	f3bf 8f6f 	isb	sy
1a001c1c:	e7eb      	b.n	1a001bf6 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001c1e:	f001 f9e3 	bl	1a002fe8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001c22:	2000      	movs	r0, #0
1a001c24:	e7ea      	b.n	1a001bfc <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001c26:	a802      	add	r0, sp, #8
1a001c28:	f000 fe2e 	bl	1a002888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001c2c:	2601      	movs	r6, #1
1a001c2e:	e021      	b.n	1a001c74 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001c30:	2300      	movs	r3, #0
1a001c32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001c36:	e029      	b.n	1a001c8c <xQueueReceive+0x100>
1a001c38:	2300      	movs	r3, #0
1a001c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001c3e:	e02b      	b.n	1a001c98 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001c40:	4620      	mov	r0, r4
1a001c42:	f7ff fd86 	bl	1a001752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001c46:	f000 fc4f 	bl	1a0024e8 <xTaskResumeAll>
1a001c4a:	e009      	b.n	1a001c60 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a001c4c:	4620      	mov	r0, r4
1a001c4e:	f7ff fd80 	bl	1a001752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001c52:	f000 fc49 	bl	1a0024e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001c56:	4620      	mov	r0, r4
1a001c58:	f7ff fd21 	bl	1a00169e <prvIsQueueEmpty>
1a001c5c:	2800      	cmp	r0, #0
1a001c5e:	d13d      	bne.n	1a001cdc <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a001c60:	f001 f9a0 	bl	1a002fa4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001c64:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001c66:	2d00      	cmp	r5, #0
1a001c68:	d1bd      	bne.n	1a001be6 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001c6a:	9b01      	ldr	r3, [sp, #4]
1a001c6c:	2b00      	cmp	r3, #0
1a001c6e:	d0d6      	beq.n	1a001c1e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001c70:	2e00      	cmp	r6, #0
1a001c72:	d0d8      	beq.n	1a001c26 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a001c74:	f001 f9b8 	bl	1a002fe8 <vPortExitCritical>
		vTaskSuspendAll();
1a001c78:	f000 fb9c 	bl	1a0023b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001c7c:	f001 f992 	bl	1a002fa4 <vPortEnterCritical>
1a001c80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001c84:	b25b      	sxtb	r3, r3
1a001c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001c8a:	d0d1      	beq.n	1a001c30 <xQueueReceive+0xa4>
1a001c8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001c90:	b25b      	sxtb	r3, r3
1a001c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001c96:	d0cf      	beq.n	1a001c38 <xQueueReceive+0xac>
1a001c98:	f001 f9a6 	bl	1a002fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001c9c:	a901      	add	r1, sp, #4
1a001c9e:	a802      	add	r0, sp, #8
1a001ca0:	f000 fdfe 	bl	1a0028a0 <xTaskCheckForTimeOut>
1a001ca4:	2800      	cmp	r0, #0
1a001ca6:	d1d1      	bne.n	1a001c4c <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001ca8:	4620      	mov	r0, r4
1a001caa:	f7ff fcf8 	bl	1a00169e <prvIsQueueEmpty>
1a001cae:	2800      	cmp	r0, #0
1a001cb0:	d0c6      	beq.n	1a001c40 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001cb2:	9901      	ldr	r1, [sp, #4]
1a001cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001cb8:	f000 fd6c 	bl	1a002794 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001cbc:	4620      	mov	r0, r4
1a001cbe:	f7ff fd48 	bl	1a001752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001cc2:	f000 fc11 	bl	1a0024e8 <xTaskResumeAll>
1a001cc6:	2800      	cmp	r0, #0
1a001cc8:	d1ca      	bne.n	1a001c60 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001cca:	4b05      	ldr	r3, [pc, #20]	; (1a001ce0 <xQueueReceive+0x154>)
1a001ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cd0:	601a      	str	r2, [r3, #0]
1a001cd2:	f3bf 8f4f 	dsb	sy
1a001cd6:	f3bf 8f6f 	isb	sy
1a001cda:	e7c1      	b.n	1a001c60 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001cdc:	2000      	movs	r0, #0
1a001cde:	e78d      	b.n	1a001bfc <xQueueReceive+0x70>
1a001ce0:	e000ed04 	.word	0xe000ed04

1a001ce4 <xQueueReceiveFromISR>:
{
1a001ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001ce8:	b160      	cbz	r0, 1a001d04 <xQueueReceiveFromISR+0x20>
1a001cea:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001cec:	b999      	cbnz	r1, 1a001d16 <xQueueReceiveFromISR+0x32>
1a001cee:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001cf0:	b18b      	cbz	r3, 1a001d16 <xQueueReceiveFromISR+0x32>
1a001cf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cf6:	f383 8811 	msr	BASEPRI, r3
1a001cfa:	f3bf 8f6f 	isb	sy
1a001cfe:	f3bf 8f4f 	dsb	sy
1a001d02:	e7fe      	b.n	1a001d02 <xQueueReceiveFromISR+0x1e>
1a001d04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d08:	f383 8811 	msr	BASEPRI, r3
1a001d0c:	f3bf 8f6f 	isb	sy
1a001d10:	f3bf 8f4f 	dsb	sy
1a001d14:	e7fe      	b.n	1a001d14 <xQueueReceiveFromISR+0x30>
1a001d16:	4617      	mov	r7, r2
1a001d18:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001d1a:	f001 fa6d 	bl	1a0031f8 <vPortValidateInterruptPriority>
	__asm volatile
1a001d1e:	f3ef 8611 	mrs	r6, BASEPRI
1a001d22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d26:	f383 8811 	msr	BASEPRI, r3
1a001d2a:	f3bf 8f6f 	isb	sy
1a001d2e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001d32:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001d36:	f1b8 0f00 	cmp.w	r8, #0
1a001d3a:	d01d      	beq.n	1a001d78 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
1a001d3c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a001d40:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001d42:	4649      	mov	r1, r9
1a001d44:	4620      	mov	r0, r4
1a001d46:	f7ff fcf2 	bl	1a00172e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001d4a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a001d4e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a001d50:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001d54:	d005      	beq.n	1a001d62 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a001d56:	1c6b      	adds	r3, r5, #1
1a001d58:	b25b      	sxtb	r3, r3
1a001d5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a001d5e:	2001      	movs	r0, #1
1a001d60:	e00b      	b.n	1a001d7a <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001d62:	6923      	ldr	r3, [r4, #16]
1a001d64:	b16b      	cbz	r3, 1a001d82 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001d66:	f104 0010 	add.w	r0, r4, #16
1a001d6a:	f000 fd47 	bl	1a0027fc <xTaskRemoveFromEventList>
1a001d6e:	b150      	cbz	r0, 1a001d86 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
1a001d70:	b15f      	cbz	r7, 1a001d8a <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a001d72:	2001      	movs	r0, #1
1a001d74:	6038      	str	r0, [r7, #0]
1a001d76:	e000      	b.n	1a001d7a <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
1a001d78:	2000      	movs	r0, #0
	__asm volatile
1a001d7a:	f386 8811 	msr	BASEPRI, r6
}
1a001d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
1a001d82:	2001      	movs	r0, #1
1a001d84:	e7f9      	b.n	1a001d7a <xQueueReceiveFromISR+0x96>
1a001d86:	2001      	movs	r0, #1
1a001d88:	e7f7      	b.n	1a001d7a <xQueueReceiveFromISR+0x96>
1a001d8a:	2001      	movs	r0, #1
1a001d8c:	e7f5      	b.n	1a001d7a <xQueueReceiveFromISR+0x96>
1a001d8e:	Address 0x000000001a001d8e is out of bounds.


1a001d90 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001d90:	2300      	movs	r3, #0
1a001d92:	2b07      	cmp	r3, #7
1a001d94:	d80c      	bhi.n	1a001db0 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001d96:	4a07      	ldr	r2, [pc, #28]	; (1a001db4 <vQueueAddToRegistry+0x24>)
1a001d98:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001d9c:	b10a      	cbz	r2, 1a001da2 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001d9e:	3301      	adds	r3, #1
1a001da0:	e7f7      	b.n	1a001d92 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001da2:	4a04      	ldr	r2, [pc, #16]	; (1a001db4 <vQueueAddToRegistry+0x24>)
1a001da4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001da8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001dac:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001dae:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001db0:	4770      	bx	lr
1a001db2:	bf00      	nop
1a001db4:	10002dd8 	.word	0x10002dd8

1a001db8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001db8:	b570      	push	{r4, r5, r6, lr}
1a001dba:	4604      	mov	r4, r0
1a001dbc:	460d      	mov	r5, r1
1a001dbe:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001dc0:	f001 f8f0 	bl	1a002fa4 <vPortEnterCritical>
1a001dc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001dc8:	b25b      	sxtb	r3, r3
1a001dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001dce:	d00d      	beq.n	1a001dec <vQueueWaitForMessageRestricted+0x34>
1a001dd0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001dd4:	b25b      	sxtb	r3, r3
1a001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001dda:	d00b      	beq.n	1a001df4 <vQueueWaitForMessageRestricted+0x3c>
1a001ddc:	f001 f904 	bl	1a002fe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001de2:	b15b      	cbz	r3, 1a001dfc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001de4:	4620      	mov	r0, r4
1a001de6:	f7ff fcb4 	bl	1a001752 <prvUnlockQueue>
	}
1a001dea:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001dec:	2300      	movs	r3, #0
1a001dee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001df2:	e7ed      	b.n	1a001dd0 <vQueueWaitForMessageRestricted+0x18>
1a001df4:	2300      	movs	r3, #0
1a001df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001dfa:	e7ef      	b.n	1a001ddc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001dfc:	4632      	mov	r2, r6
1a001dfe:	4629      	mov	r1, r5
1a001e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001e04:	f000 fcde 	bl	1a0027c4 <vTaskPlaceOnEventListRestricted>
1a001e08:	e7ec      	b.n	1a001de4 <vQueueWaitForMessageRestricted+0x2c>

1a001e0a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e0a:	f100 0308 	add.w	r3, r0, #8
1a001e0e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e14:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e16:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e18:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001e1a:	2300      	movs	r3, #0
1a001e1c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a001e1e:	4770      	bx	lr

1a001e20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001e20:	2300      	movs	r3, #0
1a001e22:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001e24:	4770      	bx	lr

1a001e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001e26:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001e28:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001e2a:	689a      	ldr	r2, [r3, #8]
1a001e2c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a001e2e:	689a      	ldr	r2, [r3, #8]
1a001e30:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001e32:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001e34:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001e36:	6803      	ldr	r3, [r0, #0]
1a001e38:	3301      	adds	r3, #1
1a001e3a:	6003      	str	r3, [r0, #0]
}
1a001e3c:	4770      	bx	lr

1a001e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001e3e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001e40:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001e42:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001e46:	d002      	beq.n	1a001e4e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e48:	f100 0208 	add.w	r2, r0, #8
1a001e4c:	e002      	b.n	1a001e54 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a001e4e:	6902      	ldr	r2, [r0, #16]
1a001e50:	e004      	b.n	1a001e5c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001e52:	461a      	mov	r2, r3
1a001e54:	6853      	ldr	r3, [r2, #4]
1a001e56:	681c      	ldr	r4, [r3, #0]
1a001e58:	42ac      	cmp	r4, r5
1a001e5a:	d9fa      	bls.n	1a001e52 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001e5c:	6853      	ldr	r3, [r2, #4]
1a001e5e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001e60:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001e62:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001e64:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001e66:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001e68:	6803      	ldr	r3, [r0, #0]
1a001e6a:	3301      	adds	r3, #1
1a001e6c:	6003      	str	r3, [r0, #0]
}
1a001e6e:	bc30      	pop	{r4, r5}
1a001e70:	4770      	bx	lr

1a001e72 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001e72:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001e74:	6842      	ldr	r2, [r0, #4]
1a001e76:	6881      	ldr	r1, [r0, #8]
1a001e78:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001e7a:	6882      	ldr	r2, [r0, #8]
1a001e7c:	6841      	ldr	r1, [r0, #4]
1a001e7e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001e80:	685a      	ldr	r2, [r3, #4]
1a001e82:	4282      	cmp	r2, r0
1a001e84:	d006      	beq.n	1a001e94 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001e86:	2200      	movs	r2, #0
1a001e88:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001e8a:	681a      	ldr	r2, [r3, #0]
1a001e8c:	3a01      	subs	r2, #1
1a001e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001e90:	6818      	ldr	r0, [r3, #0]
}
1a001e92:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001e94:	6882      	ldr	r2, [r0, #8]
1a001e96:	605a      	str	r2, [r3, #4]
1a001e98:	e7f5      	b.n	1a001e86 <uxListRemove+0x14>
1a001e9a:	Address 0x000000001a001e9a is out of bounds.


1a001e9c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001e9c:	4b03      	ldr	r3, [pc, #12]	; (1a001eac <vApplicationGetIdleTaskMemory+0x10>)
1a001e9e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001ea0:	4b03      	ldr	r3, [pc, #12]	; (1a001eb0 <vApplicationGetIdleTaskMemory+0x14>)
1a001ea2:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001ea4:	235a      	movs	r3, #90	; 0x5a
1a001ea6:	6013      	str	r3, [r2, #0]
}
1a001ea8:	4770      	bx	lr
1a001eaa:	bf00      	nop
1a001eac:	10002a64 	.word	0x10002a64
1a001eb0:	1000235c 	.word	0x1000235c

1a001eb4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001eb4:	4b03      	ldr	r3, [pc, #12]	; (1a001ec4 <vApplicationGetTimerTaskMemory+0x10>)
1a001eb6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001eb8:	4b03      	ldr	r3, [pc, #12]	; (1a001ec8 <vApplicationGetTimerTaskMemory+0x14>)
1a001eba:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001ebc:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001ec0:	6013      	str	r3, [r2, #0]
1a001ec2:	4770      	bx	lr
1a001ec4:	10002ac4 	.word	0x10002ac4
1a001ec8:	100024c4 	.word	0x100024c4

1a001ecc <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001ecc:	b510      	push	{r4, lr}
1a001ece:	b082      	sub	sp, #8
1a001ed0:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001ed2:	9001      	str	r0, [sp, #4]
1a001ed4:	2300      	movs	r3, #0
1a001ed6:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001ed8:	f001 f864 	bl	1a002fa4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001edc:	9901      	ldr	r1, [sp, #4]
1a001ede:	4622      	mov	r2, r4
1a001ee0:	4804      	ldr	r0, [pc, #16]	; (1a001ef4 <vAssertCalled+0x28>)
1a001ee2:	f003 fa49 	bl	1a005378 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001ee6:	9b00      	ldr	r3, [sp, #0]
1a001ee8:	2b00      	cmp	r3, #0
1a001eea:	d0fc      	beq.n	1a001ee6 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001eec:	f001 f87c 	bl	1a002fe8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001ef0:	b002      	add	sp, #8
1a001ef2:	bd10      	pop	{r4, pc}
1a001ef4:	1a0072c0 	.word	0x1a0072c0

1a001ef8 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001ef8:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a001efa:	4804      	ldr	r0, [pc, #16]	; (1a001f0c <vApplicationMallocFailedHook+0x14>)
1a001efc:	f003 fab0 	bl	1a005460 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001f00:	4903      	ldr	r1, [pc, #12]	; (1a001f10 <vApplicationMallocFailedHook+0x18>)
1a001f02:	202c      	movs	r0, #44	; 0x2c
1a001f04:	f7ff ffe2 	bl	1a001ecc <vAssertCalled>
}
1a001f08:	bd08      	pop	{r3, pc}
1a001f0a:	bf00      	nop
1a001f0c:	1a00724c 	.word	0x1a00724c
1a001f10:	1a007270 	.word	0x1a007270

1a001f14 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001f14:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001f16:	4804      	ldr	r0, [pc, #16]	; (1a001f28 <vApplicationStackOverflowHook+0x14>)
1a001f18:	f003 fa2e 	bl	1a005378 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001f1c:	4903      	ldr	r1, [pc, #12]	; (1a001f2c <vApplicationStackOverflowHook+0x18>)
1a001f1e:	2050      	movs	r0, #80	; 0x50
1a001f20:	f7ff ffd4 	bl	1a001ecc <vAssertCalled>
}
1a001f24:	bd08      	pop	{r3, pc}
1a001f26:	bf00      	nop
1a001f28:	1a007290 	.word	0x1a007290
1a001f2c:	1a007270 	.word	0x1a007270

1a001f30 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001f30:	4b08      	ldr	r3, [pc, #32]	; (1a001f54 <prvResetNextTaskUnblockTime+0x24>)
1a001f32:	681b      	ldr	r3, [r3, #0]
1a001f34:	681b      	ldr	r3, [r3, #0]
1a001f36:	b13b      	cbz	r3, 1a001f48 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001f38:	4b06      	ldr	r3, [pc, #24]	; (1a001f54 <prvResetNextTaskUnblockTime+0x24>)
1a001f3a:	681b      	ldr	r3, [r3, #0]
1a001f3c:	68db      	ldr	r3, [r3, #12]
1a001f3e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001f40:	685a      	ldr	r2, [r3, #4]
1a001f42:	4b05      	ldr	r3, [pc, #20]	; (1a001f58 <prvResetNextTaskUnblockTime+0x28>)
1a001f44:	601a      	str	r2, [r3, #0]
	}
}
1a001f46:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001f48:	4b03      	ldr	r3, [pc, #12]	; (1a001f58 <prvResetNextTaskUnblockTime+0x28>)
1a001f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001f4e:	601a      	str	r2, [r3, #0]
1a001f50:	4770      	bx	lr
1a001f52:	bf00      	nop
1a001f54:	10002b28 	.word	0x10002b28
1a001f58:	10002bfc 	.word	0x10002bfc

1a001f5c <prvInitialiseNewTask>:
{
1a001f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001f60:	4681      	mov	r9, r0
1a001f62:	460d      	mov	r5, r1
1a001f64:	4617      	mov	r7, r2
1a001f66:	469a      	mov	sl, r3
1a001f68:	9e08      	ldr	r6, [sp, #32]
1a001f6a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001f70:	0092      	lsls	r2, r2, #2
1a001f72:	21a5      	movs	r1, #165	; 0xa5
1a001f74:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001f76:	f003 f94e 	bl	1a005216 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001f7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001f7c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001f80:	3a01      	subs	r2, #1
1a001f82:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001f86:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001f8a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f8c:	2300      	movs	r3, #0
1a001f8e:	2b0f      	cmp	r3, #15
1a001f90:	d807      	bhi.n	1a001fa2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001f92:	5ce9      	ldrb	r1, [r5, r3]
1a001f94:	18e2      	adds	r2, r4, r3
1a001f96:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001f9a:	5cea      	ldrb	r2, [r5, r3]
1a001f9c:	b10a      	cbz	r2, 1a001fa2 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001f9e:	3301      	adds	r3, #1
1a001fa0:	e7f5      	b.n	1a001f8e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001fa2:	2300      	movs	r3, #0
1a001fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001fa8:	2e06      	cmp	r6, #6
1a001faa:	d900      	bls.n	1a001fae <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001fac:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001fae:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001fb0:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001fb2:	2500      	movs	r5, #0
1a001fb4:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001fb6:	1d20      	adds	r0, r4, #4
1a001fb8:	f7ff ff32 	bl	1a001e20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001fbc:	f104 0018 	add.w	r0, r4, #24
1a001fc0:	f7ff ff2e 	bl	1a001e20 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001fc4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001fc6:	f1c6 0607 	rsb	r6, r6, #7
1a001fca:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001fcc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001fce:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001fd0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001fd4:	4652      	mov	r2, sl
1a001fd6:	4649      	mov	r1, r9
1a001fd8:	4638      	mov	r0, r7
1a001fda:	f000 ffb5 	bl	1a002f48 <pxPortInitialiseStack>
1a001fde:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001fe0:	f1b8 0f00 	cmp.w	r8, #0
1a001fe4:	d001      	beq.n	1a001fea <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001fe6:	f8c8 4000 	str.w	r4, [r8]
}
1a001fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001fee:	Address 0x000000001a001fee is out of bounds.


1a001ff0 <prvInitialiseTaskLists>:
{
1a001ff0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001ff2:	2400      	movs	r4, #0
1a001ff4:	e007      	b.n	1a002006 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001ff6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001ffa:	0093      	lsls	r3, r2, #2
1a001ffc:	480e      	ldr	r0, [pc, #56]	; (1a002038 <prvInitialiseTaskLists+0x48>)
1a001ffe:	4418      	add	r0, r3
1a002000:	f7ff ff03 	bl	1a001e0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a002004:	3401      	adds	r4, #1
1a002006:	2c06      	cmp	r4, #6
1a002008:	d9f5      	bls.n	1a001ff6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00200a:	4d0c      	ldr	r5, [pc, #48]	; (1a00203c <prvInitialiseTaskLists+0x4c>)
1a00200c:	4628      	mov	r0, r5
1a00200e:	f7ff fefc 	bl	1a001e0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a002012:	4c0b      	ldr	r4, [pc, #44]	; (1a002040 <prvInitialiseTaskLists+0x50>)
1a002014:	4620      	mov	r0, r4
1a002016:	f7ff fef8 	bl	1a001e0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00201a:	480a      	ldr	r0, [pc, #40]	; (1a002044 <prvInitialiseTaskLists+0x54>)
1a00201c:	f7ff fef5 	bl	1a001e0a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a002020:	4809      	ldr	r0, [pc, #36]	; (1a002048 <prvInitialiseTaskLists+0x58>)
1a002022:	f7ff fef2 	bl	1a001e0a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a002026:	4809      	ldr	r0, [pc, #36]	; (1a00204c <prvInitialiseTaskLists+0x5c>)
1a002028:	f7ff feef 	bl	1a001e0a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00202c:	4b08      	ldr	r3, [pc, #32]	; (1a002050 <prvInitialiseTaskLists+0x60>)
1a00202e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a002030:	4b08      	ldr	r3, [pc, #32]	; (1a002054 <prvInitialiseTaskLists+0x64>)
1a002032:	601c      	str	r4, [r3, #0]
}
1a002034:	bd38      	pop	{r3, r4, r5, pc}
1a002036:	bf00      	nop
1a002038:	10002b30 	.word	0x10002b30
1a00203c:	10002bd4 	.word	0x10002bd4
1a002040:	10002be8 	.word	0x10002be8
1a002044:	10002c04 	.word	0x10002c04
1a002048:	10002c30 	.word	0x10002c30
1a00204c:	10002c1c 	.word	0x10002c1c
1a002050:	10002b28 	.word	0x10002b28
1a002054:	10002b2c 	.word	0x10002b2c

1a002058 <prvAddNewTaskToReadyList>:
{
1a002058:	b510      	push	{r4, lr}
1a00205a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00205c:	f000 ffa2 	bl	1a002fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a002060:	4a21      	ldr	r2, [pc, #132]	; (1a0020e8 <prvAddNewTaskToReadyList+0x90>)
1a002062:	6813      	ldr	r3, [r2, #0]
1a002064:	3301      	adds	r3, #1
1a002066:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a002068:	4b20      	ldr	r3, [pc, #128]	; (1a0020ec <prvAddNewTaskToReadyList+0x94>)
1a00206a:	681b      	ldr	r3, [r3, #0]
1a00206c:	b15b      	cbz	r3, 1a002086 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00206e:	4b20      	ldr	r3, [pc, #128]	; (1a0020f0 <prvAddNewTaskToReadyList+0x98>)
1a002070:	681b      	ldr	r3, [r3, #0]
1a002072:	b96b      	cbnz	r3, 1a002090 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a002074:	4b1d      	ldr	r3, [pc, #116]	; (1a0020ec <prvAddNewTaskToReadyList+0x94>)
1a002076:	681b      	ldr	r3, [r3, #0]
1a002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00207a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00207c:	429a      	cmp	r2, r3
1a00207e:	d807      	bhi.n	1a002090 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a002080:	4b1a      	ldr	r3, [pc, #104]	; (1a0020ec <prvAddNewTaskToReadyList+0x94>)
1a002082:	601c      	str	r4, [r3, #0]
1a002084:	e004      	b.n	1a002090 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a002086:	4b19      	ldr	r3, [pc, #100]	; (1a0020ec <prvAddNewTaskToReadyList+0x94>)
1a002088:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00208a:	6813      	ldr	r3, [r2, #0]
1a00208c:	2b01      	cmp	r3, #1
1a00208e:	d027      	beq.n	1a0020e0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a002090:	4a18      	ldr	r2, [pc, #96]	; (1a0020f4 <prvAddNewTaskToReadyList+0x9c>)
1a002092:	6813      	ldr	r3, [r2, #0]
1a002094:	3301      	adds	r3, #1
1a002096:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a002098:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00209a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00209c:	2201      	movs	r2, #1
1a00209e:	409a      	lsls	r2, r3
1a0020a0:	4915      	ldr	r1, [pc, #84]	; (1a0020f8 <prvAddNewTaskToReadyList+0xa0>)
1a0020a2:	6808      	ldr	r0, [r1, #0]
1a0020a4:	4302      	orrs	r2, r0
1a0020a6:	600a      	str	r2, [r1, #0]
1a0020a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0020ac:	009a      	lsls	r2, r3, #2
1a0020ae:	1d21      	adds	r1, r4, #4
1a0020b0:	4812      	ldr	r0, [pc, #72]	; (1a0020fc <prvAddNewTaskToReadyList+0xa4>)
1a0020b2:	4410      	add	r0, r2
1a0020b4:	f7ff feb7 	bl	1a001e26 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0020b8:	f000 ff96 	bl	1a002fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0020bc:	4b0c      	ldr	r3, [pc, #48]	; (1a0020f0 <prvAddNewTaskToReadyList+0x98>)
1a0020be:	681b      	ldr	r3, [r3, #0]
1a0020c0:	b16b      	cbz	r3, 1a0020de <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0020c2:	4b0a      	ldr	r3, [pc, #40]	; (1a0020ec <prvAddNewTaskToReadyList+0x94>)
1a0020c4:	681b      	ldr	r3, [r3, #0]
1a0020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0020c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0020ca:	429a      	cmp	r2, r3
1a0020cc:	d207      	bcs.n	1a0020de <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0020ce:	4b0c      	ldr	r3, [pc, #48]	; (1a002100 <prvAddNewTaskToReadyList+0xa8>)
1a0020d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020d4:	601a      	str	r2, [r3, #0]
1a0020d6:	f3bf 8f4f 	dsb	sy
1a0020da:	f3bf 8f6f 	isb	sy
}
1a0020de:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0020e0:	f7ff ff86 	bl	1a001ff0 <prvInitialiseTaskLists>
1a0020e4:	e7d4      	b.n	1a002090 <prvAddNewTaskToReadyList+0x38>
1a0020e6:	bf00      	nop
1a0020e8:	10002bbc 	.word	0x10002bbc
1a0020ec:	10002b24 	.word	0x10002b24
1a0020f0:	10002c18 	.word	0x10002c18
1a0020f4:	10002bcc 	.word	0x10002bcc
1a0020f8:	10002bd0 	.word	0x10002bd0
1a0020fc:	10002b30 	.word	0x10002b30
1a002100:	e000ed04 	.word	0xe000ed04

1a002104 <prvDeleteTCB>:
	{
1a002104:	b510      	push	{r4, lr}
1a002106:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a002108:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00210c:	b933      	cbnz	r3, 1a00211c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a00210e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002110:	f7ff fa7e 	bl	1a001610 <vPortFree>
				vPortFree( pxTCB );
1a002114:	4620      	mov	r0, r4
1a002116:	f7ff fa7b 	bl	1a001610 <vPortFree>
	}
1a00211a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00211c:	2b01      	cmp	r3, #1
1a00211e:	d00a      	beq.n	1a002136 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a002120:	2b02      	cmp	r3, #2
1a002122:	d0fa      	beq.n	1a00211a <prvDeleteTCB+0x16>
	__asm volatile
1a002124:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002128:	f383 8811 	msr	BASEPRI, r3
1a00212c:	f3bf 8f6f 	isb	sy
1a002130:	f3bf 8f4f 	dsb	sy
1a002134:	e7fe      	b.n	1a002134 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a002136:	f7ff fa6b 	bl	1a001610 <vPortFree>
1a00213a:	e7ee      	b.n	1a00211a <prvDeleteTCB+0x16>

1a00213c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00213c:	4b0f      	ldr	r3, [pc, #60]	; (1a00217c <prvCheckTasksWaitingTermination+0x40>)
1a00213e:	681b      	ldr	r3, [r3, #0]
1a002140:	b1d3      	cbz	r3, 1a002178 <prvCheckTasksWaitingTermination+0x3c>
{
1a002142:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a002144:	f000 ff2e 	bl	1a002fa4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a002148:	4b0d      	ldr	r3, [pc, #52]	; (1a002180 <prvCheckTasksWaitingTermination+0x44>)
1a00214a:	68db      	ldr	r3, [r3, #12]
1a00214c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00214e:	1d20      	adds	r0, r4, #4
1a002150:	f7ff fe8f 	bl	1a001e72 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a002154:	4a0b      	ldr	r2, [pc, #44]	; (1a002184 <prvCheckTasksWaitingTermination+0x48>)
1a002156:	6813      	ldr	r3, [r2, #0]
1a002158:	3b01      	subs	r3, #1
1a00215a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00215c:	4a07      	ldr	r2, [pc, #28]	; (1a00217c <prvCheckTasksWaitingTermination+0x40>)
1a00215e:	6813      	ldr	r3, [r2, #0]
1a002160:	3b01      	subs	r3, #1
1a002162:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a002164:	f000 ff40 	bl	1a002fe8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a002168:	4620      	mov	r0, r4
1a00216a:	f7ff ffcb 	bl	1a002104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00216e:	4b03      	ldr	r3, [pc, #12]	; (1a00217c <prvCheckTasksWaitingTermination+0x40>)
1a002170:	681b      	ldr	r3, [r3, #0]
1a002172:	2b00      	cmp	r3, #0
1a002174:	d1e6      	bne.n	1a002144 <prvCheckTasksWaitingTermination+0x8>
}
1a002176:	bd10      	pop	{r4, pc}
1a002178:	4770      	bx	lr
1a00217a:	bf00      	nop
1a00217c:	10002bc0 	.word	0x10002bc0
1a002180:	10002c30 	.word	0x10002c30
1a002184:	10002bbc 	.word	0x10002bbc

1a002188 <prvIdleTask>:
{
1a002188:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00218a:	f7ff ffd7 	bl	1a00213c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00218e:	4b06      	ldr	r3, [pc, #24]	; (1a0021a8 <prvIdleTask+0x20>)
1a002190:	681b      	ldr	r3, [r3, #0]
1a002192:	2b01      	cmp	r3, #1
1a002194:	d9f9      	bls.n	1a00218a <prvIdleTask+0x2>
				taskYIELD();
1a002196:	4b05      	ldr	r3, [pc, #20]	; (1a0021ac <prvIdleTask+0x24>)
1a002198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00219c:	601a      	str	r2, [r3, #0]
1a00219e:	f3bf 8f4f 	dsb	sy
1a0021a2:	f3bf 8f6f 	isb	sy
1a0021a6:	e7f0      	b.n	1a00218a <prvIdleTask+0x2>
1a0021a8:	10002b30 	.word	0x10002b30
1a0021ac:	e000ed04 	.word	0xe000ed04

1a0021b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0021b0:	b570      	push	{r4, r5, r6, lr}
1a0021b2:	4604      	mov	r4, r0
1a0021b4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0021b6:	4b1d      	ldr	r3, [pc, #116]	; (1a00222c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0021b8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0021ba:	4b1d      	ldr	r3, [pc, #116]	; (1a002230 <prvAddCurrentTaskToDelayedList+0x80>)
1a0021bc:	6818      	ldr	r0, [r3, #0]
1a0021be:	3004      	adds	r0, #4
1a0021c0:	f7ff fe57 	bl	1a001e72 <uxListRemove>
1a0021c4:	b950      	cbnz	r0, 1a0021dc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0021c6:	4b1a      	ldr	r3, [pc, #104]	; (1a002230 <prvAddCurrentTaskToDelayedList+0x80>)
1a0021c8:	681b      	ldr	r3, [r3, #0]
1a0021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0021cc:	2301      	movs	r3, #1
1a0021ce:	fa03 f202 	lsl.w	r2, r3, r2
1a0021d2:	4918      	ldr	r1, [pc, #96]	; (1a002234 <prvAddCurrentTaskToDelayedList+0x84>)
1a0021d4:	680b      	ldr	r3, [r1, #0]
1a0021d6:	ea23 0302 	bic.w	r3, r3, r2
1a0021da:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0021dc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0021e0:	d013      	beq.n	1a00220a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0021e2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0021e4:	4b12      	ldr	r3, [pc, #72]	; (1a002230 <prvAddCurrentTaskToDelayedList+0x80>)
1a0021e6:	681b      	ldr	r3, [r3, #0]
1a0021e8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0021ea:	42a5      	cmp	r5, r4
1a0021ec:	d816      	bhi.n	1a00221c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0021ee:	4b12      	ldr	r3, [pc, #72]	; (1a002238 <prvAddCurrentTaskToDelayedList+0x88>)
1a0021f0:	6818      	ldr	r0, [r3, #0]
1a0021f2:	4b0f      	ldr	r3, [pc, #60]	; (1a002230 <prvAddCurrentTaskToDelayedList+0x80>)
1a0021f4:	6819      	ldr	r1, [r3, #0]
1a0021f6:	3104      	adds	r1, #4
1a0021f8:	f7ff fe21 	bl	1a001e3e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0021fc:	4b0f      	ldr	r3, [pc, #60]	; (1a00223c <prvAddCurrentTaskToDelayedList+0x8c>)
1a0021fe:	681b      	ldr	r3, [r3, #0]
1a002200:	42a3      	cmp	r3, r4
1a002202:	d912      	bls.n	1a00222a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a002204:	4b0d      	ldr	r3, [pc, #52]	; (1a00223c <prvAddCurrentTaskToDelayedList+0x8c>)
1a002206:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a002208:	e00f      	b.n	1a00222a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00220a:	2e00      	cmp	r6, #0
1a00220c:	d0e9      	beq.n	1a0021e2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00220e:	4b08      	ldr	r3, [pc, #32]	; (1a002230 <prvAddCurrentTaskToDelayedList+0x80>)
1a002210:	6819      	ldr	r1, [r3, #0]
1a002212:	3104      	adds	r1, #4
1a002214:	480a      	ldr	r0, [pc, #40]	; (1a002240 <prvAddCurrentTaskToDelayedList+0x90>)
1a002216:	f7ff fe06 	bl	1a001e26 <vListInsertEnd>
1a00221a:	e006      	b.n	1a00222a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00221c:	4b09      	ldr	r3, [pc, #36]	; (1a002244 <prvAddCurrentTaskToDelayedList+0x94>)
1a00221e:	6818      	ldr	r0, [r3, #0]
1a002220:	4b03      	ldr	r3, [pc, #12]	; (1a002230 <prvAddCurrentTaskToDelayedList+0x80>)
1a002222:	6819      	ldr	r1, [r3, #0]
1a002224:	3104      	adds	r1, #4
1a002226:	f7ff fe0a 	bl	1a001e3e <vListInsert>
}
1a00222a:	bd70      	pop	{r4, r5, r6, pc}
1a00222c:	10002c44 	.word	0x10002c44
1a002230:	10002b24 	.word	0x10002b24
1a002234:	10002bd0 	.word	0x10002bd0
1a002238:	10002b28 	.word	0x10002b28
1a00223c:	10002bfc 	.word	0x10002bfc
1a002240:	10002c1c 	.word	0x10002c1c
1a002244:	10002b2c 	.word	0x10002b2c

1a002248 <xTaskCreateStatic>:
	{
1a002248:	b570      	push	{r4, r5, r6, lr}
1a00224a:	b086      	sub	sp, #24
1a00224c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00224e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a002250:	b945      	cbnz	r5, 1a002264 <xTaskCreateStatic+0x1c>
1a002252:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002256:	f383 8811 	msr	BASEPRI, r3
1a00225a:	f3bf 8f6f 	isb	sy
1a00225e:	f3bf 8f4f 	dsb	sy
1a002262:	e7fe      	b.n	1a002262 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a002264:	b944      	cbnz	r4, 1a002278 <xTaskCreateStatic+0x30>
1a002266:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00226a:	f383 8811 	msr	BASEPRI, r3
1a00226e:	f3bf 8f6f 	isb	sy
1a002272:	f3bf 8f4f 	dsb	sy
1a002276:	e7fe      	b.n	1a002276 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a002278:	2660      	movs	r6, #96	; 0x60
1a00227a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00227c:	9e04      	ldr	r6, [sp, #16]
1a00227e:	2e60      	cmp	r6, #96	; 0x60
1a002280:	d008      	beq.n	1a002294 <xTaskCreateStatic+0x4c>
1a002282:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002286:	f383 8811 	msr	BASEPRI, r3
1a00228a:	f3bf 8f6f 	isb	sy
1a00228e:	f3bf 8f4f 	dsb	sy
1a002292:	e7fe      	b.n	1a002292 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a002294:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a002296:	2502      	movs	r5, #2
1a002298:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a00229c:	2500      	movs	r5, #0
1a00229e:	9503      	str	r5, [sp, #12]
1a0022a0:	9402      	str	r4, [sp, #8]
1a0022a2:	ad05      	add	r5, sp, #20
1a0022a4:	9501      	str	r5, [sp, #4]
1a0022a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0022a8:	9500      	str	r5, [sp, #0]
1a0022aa:	f7ff fe57 	bl	1a001f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0022ae:	4620      	mov	r0, r4
1a0022b0:	f7ff fed2 	bl	1a002058 <prvAddNewTaskToReadyList>
	}
1a0022b4:	9805      	ldr	r0, [sp, #20]
1a0022b6:	b006      	add	sp, #24
1a0022b8:	bd70      	pop	{r4, r5, r6, pc}

1a0022ba <xTaskCreate>:
	{
1a0022ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0022be:	b085      	sub	sp, #20
1a0022c0:	4607      	mov	r7, r0
1a0022c2:	4688      	mov	r8, r1
1a0022c4:	4615      	mov	r5, r2
1a0022c6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022c8:	0090      	lsls	r0, r2, #2
1a0022ca:	f7ff f913 	bl	1a0014f4 <pvPortMalloc>
			if( pxStack != NULL )
1a0022ce:	b308      	cbz	r0, 1a002314 <xTaskCreate+0x5a>
1a0022d0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0022d2:	2060      	movs	r0, #96	; 0x60
1a0022d4:	f7ff f90e 	bl	1a0014f4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0022d8:	4604      	mov	r4, r0
1a0022da:	b1b8      	cbz	r0, 1a00230c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a0022dc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0022de:	b1e4      	cbz	r4, 1a00231a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0022e0:	2300      	movs	r3, #0
1a0022e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0022e6:	9303      	str	r3, [sp, #12]
1a0022e8:	9402      	str	r4, [sp, #8]
1a0022ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0022ec:	9301      	str	r3, [sp, #4]
1a0022ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0022f0:	9300      	str	r3, [sp, #0]
1a0022f2:	464b      	mov	r3, r9
1a0022f4:	462a      	mov	r2, r5
1a0022f6:	4641      	mov	r1, r8
1a0022f8:	4638      	mov	r0, r7
1a0022fa:	f7ff fe2f 	bl	1a001f5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0022fe:	4620      	mov	r0, r4
1a002300:	f7ff feaa 	bl	1a002058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a002304:	2001      	movs	r0, #1
	}
1a002306:	b005      	add	sp, #20
1a002308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a00230c:	4630      	mov	r0, r6
1a00230e:	f7ff f97f 	bl	1a001610 <vPortFree>
1a002312:	e7e4      	b.n	1a0022de <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a002314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002318:	e7f5      	b.n	1a002306 <xTaskCreate+0x4c>
1a00231a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a00231e:	e7f2      	b.n	1a002306 <xTaskCreate+0x4c>

1a002320 <vTaskStartScheduler>:
{
1a002320:	b510      	push	{r4, lr}
1a002322:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a002324:	2400      	movs	r4, #0
1a002326:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a002328:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a00232a:	aa07      	add	r2, sp, #28
1a00232c:	a906      	add	r1, sp, #24
1a00232e:	a805      	add	r0, sp, #20
1a002330:	f7ff fdb4 	bl	1a001e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a002334:	9b05      	ldr	r3, [sp, #20]
1a002336:	9302      	str	r3, [sp, #8]
1a002338:	9b06      	ldr	r3, [sp, #24]
1a00233a:	9301      	str	r3, [sp, #4]
1a00233c:	9400      	str	r4, [sp, #0]
1a00233e:	4623      	mov	r3, r4
1a002340:	9a07      	ldr	r2, [sp, #28]
1a002342:	4917      	ldr	r1, [pc, #92]	; (1a0023a0 <vTaskStartScheduler+0x80>)
1a002344:	4817      	ldr	r0, [pc, #92]	; (1a0023a4 <vTaskStartScheduler+0x84>)
1a002346:	f7ff ff7f 	bl	1a002248 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a00234a:	b140      	cbz	r0, 1a00235e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a00234c:	f000 fbe2 	bl	1a002b14 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a002350:	2801      	cmp	r0, #1
1a002352:	d006      	beq.n	1a002362 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a002354:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002358:	d018      	beq.n	1a00238c <vTaskStartScheduler+0x6c>
}
1a00235a:	b008      	add	sp, #32
1a00235c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00235e:	2000      	movs	r0, #0
1a002360:	e7f6      	b.n	1a002350 <vTaskStartScheduler+0x30>
1a002362:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002366:	f383 8811 	msr	BASEPRI, r3
1a00236a:	f3bf 8f6f 	isb	sy
1a00236e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a002372:	4b0d      	ldr	r3, [pc, #52]	; (1a0023a8 <vTaskStartScheduler+0x88>)
1a002374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00237a:	4b0c      	ldr	r3, [pc, #48]	; (1a0023ac <vTaskStartScheduler+0x8c>)
1a00237c:	2201      	movs	r2, #1
1a00237e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a002380:	4b0b      	ldr	r3, [pc, #44]	; (1a0023b0 <vTaskStartScheduler+0x90>)
1a002382:	2200      	movs	r2, #0
1a002384:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a002386:	f000 feaf 	bl	1a0030e8 <xPortStartScheduler>
1a00238a:	e7e6      	b.n	1a00235a <vTaskStartScheduler+0x3a>
1a00238c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002390:	f383 8811 	msr	BASEPRI, r3
1a002394:	f3bf 8f6f 	isb	sy
1a002398:	f3bf 8f4f 	dsb	sy
1a00239c:	e7fe      	b.n	1a00239c <vTaskStartScheduler+0x7c>
1a00239e:	bf00      	nop
1a0023a0:	1a007300 	.word	0x1a007300
1a0023a4:	1a002189 	.word	0x1a002189
1a0023a8:	10002bfc 	.word	0x10002bfc
1a0023ac:	10002c18 	.word	0x10002c18
1a0023b0:	10002c44 	.word	0x10002c44

1a0023b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0023b4:	4a02      	ldr	r2, [pc, #8]	; (1a0023c0 <vTaskSuspendAll+0xc>)
1a0023b6:	6813      	ldr	r3, [r2, #0]
1a0023b8:	3301      	adds	r3, #1
1a0023ba:	6013      	str	r3, [r2, #0]
}
1a0023bc:	4770      	bx	lr
1a0023be:	bf00      	nop
1a0023c0:	10002bc8 	.word	0x10002bc8

1a0023c4 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0023c4:	4b01      	ldr	r3, [pc, #4]	; (1a0023cc <xTaskGetTickCount+0x8>)
1a0023c6:	6818      	ldr	r0, [r3, #0]
}
1a0023c8:	4770      	bx	lr
1a0023ca:	bf00      	nop
1a0023cc:	10002c44 	.word	0x10002c44

1a0023d0 <xTaskIncrementTick>:
{
1a0023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0023d2:	4b3a      	ldr	r3, [pc, #232]	; (1a0024bc <xTaskIncrementTick+0xec>)
1a0023d4:	681b      	ldr	r3, [r3, #0]
1a0023d6:	2b00      	cmp	r3, #0
1a0023d8:	d164      	bne.n	1a0024a4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0023da:	4b39      	ldr	r3, [pc, #228]	; (1a0024c0 <xTaskIncrementTick+0xf0>)
1a0023dc:	681d      	ldr	r5, [r3, #0]
1a0023de:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0023e0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0023e2:	b9c5      	cbnz	r5, 1a002416 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0023e4:	4b37      	ldr	r3, [pc, #220]	; (1a0024c4 <xTaskIncrementTick+0xf4>)
1a0023e6:	681b      	ldr	r3, [r3, #0]
1a0023e8:	681b      	ldr	r3, [r3, #0]
1a0023ea:	b143      	cbz	r3, 1a0023fe <xTaskIncrementTick+0x2e>
1a0023ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023f0:	f383 8811 	msr	BASEPRI, r3
1a0023f4:	f3bf 8f6f 	isb	sy
1a0023f8:	f3bf 8f4f 	dsb	sy
1a0023fc:	e7fe      	b.n	1a0023fc <xTaskIncrementTick+0x2c>
1a0023fe:	4a31      	ldr	r2, [pc, #196]	; (1a0024c4 <xTaskIncrementTick+0xf4>)
1a002400:	6811      	ldr	r1, [r2, #0]
1a002402:	4b31      	ldr	r3, [pc, #196]	; (1a0024c8 <xTaskIncrementTick+0xf8>)
1a002404:	6818      	ldr	r0, [r3, #0]
1a002406:	6010      	str	r0, [r2, #0]
1a002408:	6019      	str	r1, [r3, #0]
1a00240a:	4a30      	ldr	r2, [pc, #192]	; (1a0024cc <xTaskIncrementTick+0xfc>)
1a00240c:	6813      	ldr	r3, [r2, #0]
1a00240e:	3301      	adds	r3, #1
1a002410:	6013      	str	r3, [r2, #0]
1a002412:	f7ff fd8d 	bl	1a001f30 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a002416:	4b2e      	ldr	r3, [pc, #184]	; (1a0024d0 <xTaskIncrementTick+0x100>)
1a002418:	681b      	ldr	r3, [r3, #0]
1a00241a:	42ab      	cmp	r3, r5
1a00241c:	d938      	bls.n	1a002490 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a00241e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a002420:	4b2c      	ldr	r3, [pc, #176]	; (1a0024d4 <xTaskIncrementTick+0x104>)
1a002422:	681b      	ldr	r3, [r3, #0]
1a002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00242a:	009a      	lsls	r2, r3, #2
1a00242c:	4b2a      	ldr	r3, [pc, #168]	; (1a0024d8 <xTaskIncrementTick+0x108>)
1a00242e:	589b      	ldr	r3, [r3, r2]
1a002430:	2b01      	cmp	r3, #1
1a002432:	d93c      	bls.n	1a0024ae <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a002434:	2401      	movs	r4, #1
1a002436:	e03a      	b.n	1a0024ae <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a002438:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00243a:	4b22      	ldr	r3, [pc, #136]	; (1a0024c4 <xTaskIncrementTick+0xf4>)
1a00243c:	681b      	ldr	r3, [r3, #0]
1a00243e:	681b      	ldr	r3, [r3, #0]
1a002440:	b343      	cbz	r3, 1a002494 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a002442:	4b20      	ldr	r3, [pc, #128]	; (1a0024c4 <xTaskIncrementTick+0xf4>)
1a002444:	681b      	ldr	r3, [r3, #0]
1a002446:	68db      	ldr	r3, [r3, #12]
1a002448:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a00244a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a00244c:	429d      	cmp	r5, r3
1a00244e:	d326      	bcc.n	1a00249e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a002450:	1d37      	adds	r7, r6, #4
1a002452:	4638      	mov	r0, r7
1a002454:	f7ff fd0d 	bl	1a001e72 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a002458:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a00245a:	b11b      	cbz	r3, 1a002464 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00245c:	f106 0018 	add.w	r0, r6, #24
1a002460:	f7ff fd07 	bl	1a001e72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002464:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a002466:	2201      	movs	r2, #1
1a002468:	409a      	lsls	r2, r3
1a00246a:	491c      	ldr	r1, [pc, #112]	; (1a0024dc <xTaskIncrementTick+0x10c>)
1a00246c:	6808      	ldr	r0, [r1, #0]
1a00246e:	4302      	orrs	r2, r0
1a002470:	600a      	str	r2, [r1, #0]
1a002472:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002476:	009a      	lsls	r2, r3, #2
1a002478:	4639      	mov	r1, r7
1a00247a:	4817      	ldr	r0, [pc, #92]	; (1a0024d8 <xTaskIncrementTick+0x108>)
1a00247c:	4410      	add	r0, r2
1a00247e:	f7ff fcd2 	bl	1a001e26 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002482:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a002484:	4b13      	ldr	r3, [pc, #76]	; (1a0024d4 <xTaskIncrementTick+0x104>)
1a002486:	681b      	ldr	r3, [r3, #0]
1a002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00248a:	429a      	cmp	r2, r3
1a00248c:	d2d4      	bcs.n	1a002438 <xTaskIncrementTick+0x68>
1a00248e:	e7d4      	b.n	1a00243a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a002490:	2400      	movs	r4, #0
1a002492:	e7d2      	b.n	1a00243a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002494:	4b0e      	ldr	r3, [pc, #56]	; (1a0024d0 <xTaskIncrementTick+0x100>)
1a002496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00249a:	601a      	str	r2, [r3, #0]
					break;
1a00249c:	e7c0      	b.n	1a002420 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00249e:	4a0c      	ldr	r2, [pc, #48]	; (1a0024d0 <xTaskIncrementTick+0x100>)
1a0024a0:	6013      	str	r3, [r2, #0]
						break;
1a0024a2:	e7bd      	b.n	1a002420 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0024a4:	4a0e      	ldr	r2, [pc, #56]	; (1a0024e0 <xTaskIncrementTick+0x110>)
1a0024a6:	6813      	ldr	r3, [r2, #0]
1a0024a8:	3301      	adds	r3, #1
1a0024aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0024ac:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0024ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0024e4 <xTaskIncrementTick+0x114>)
1a0024b0:	681b      	ldr	r3, [r3, #0]
1a0024b2:	b103      	cbz	r3, 1a0024b6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0024b4:	2401      	movs	r4, #1
}
1a0024b6:	4620      	mov	r0, r4
1a0024b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0024ba:	bf00      	nop
1a0024bc:	10002bc8 	.word	0x10002bc8
1a0024c0:	10002c44 	.word	0x10002c44
1a0024c4:	10002b28 	.word	0x10002b28
1a0024c8:	10002b2c 	.word	0x10002b2c
1a0024cc:	10002c00 	.word	0x10002c00
1a0024d0:	10002bfc 	.word	0x10002bfc
1a0024d4:	10002b24 	.word	0x10002b24
1a0024d8:	10002b30 	.word	0x10002b30
1a0024dc:	10002bd0 	.word	0x10002bd0
1a0024e0:	10002bc4 	.word	0x10002bc4
1a0024e4:	10002c48 	.word	0x10002c48

1a0024e8 <xTaskResumeAll>:
{
1a0024e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0024ea:	4b33      	ldr	r3, [pc, #204]	; (1a0025b8 <xTaskResumeAll+0xd0>)
1a0024ec:	681b      	ldr	r3, [r3, #0]
1a0024ee:	b943      	cbnz	r3, 1a002502 <xTaskResumeAll+0x1a>
1a0024f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024f4:	f383 8811 	msr	BASEPRI, r3
1a0024f8:	f3bf 8f6f 	isb	sy
1a0024fc:	f3bf 8f4f 	dsb	sy
1a002500:	e7fe      	b.n	1a002500 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a002502:	f000 fd4f 	bl	1a002fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a002506:	4b2c      	ldr	r3, [pc, #176]	; (1a0025b8 <xTaskResumeAll+0xd0>)
1a002508:	681a      	ldr	r2, [r3, #0]
1a00250a:	3a01      	subs	r2, #1
1a00250c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00250e:	681b      	ldr	r3, [r3, #0]
1a002510:	2b00      	cmp	r3, #0
1a002512:	d14d      	bne.n	1a0025b0 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002514:	4b29      	ldr	r3, [pc, #164]	; (1a0025bc <xTaskResumeAll+0xd4>)
1a002516:	681b      	ldr	r3, [r3, #0]
1a002518:	b923      	cbnz	r3, 1a002524 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00251a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a00251c:	f000 fd64 	bl	1a002fe8 <vPortExitCritical>
}
1a002520:	4620      	mov	r0, r4
1a002522:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a002524:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a002526:	4b26      	ldr	r3, [pc, #152]	; (1a0025c0 <xTaskResumeAll+0xd8>)
1a002528:	681b      	ldr	r3, [r3, #0]
1a00252a:	b31b      	cbz	r3, 1a002574 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00252c:	4b24      	ldr	r3, [pc, #144]	; (1a0025c0 <xTaskResumeAll+0xd8>)
1a00252e:	68db      	ldr	r3, [r3, #12]
1a002530:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002532:	f104 0018 	add.w	r0, r4, #24
1a002536:	f7ff fc9c 	bl	1a001e72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00253a:	1d25      	adds	r5, r4, #4
1a00253c:	4628      	mov	r0, r5
1a00253e:	f7ff fc98 	bl	1a001e72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002542:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002544:	2201      	movs	r2, #1
1a002546:	409a      	lsls	r2, r3
1a002548:	491e      	ldr	r1, [pc, #120]	; (1a0025c4 <xTaskResumeAll+0xdc>)
1a00254a:	6808      	ldr	r0, [r1, #0]
1a00254c:	4302      	orrs	r2, r0
1a00254e:	600a      	str	r2, [r1, #0]
1a002550:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002554:	009a      	lsls	r2, r3, #2
1a002556:	4629      	mov	r1, r5
1a002558:	481b      	ldr	r0, [pc, #108]	; (1a0025c8 <xTaskResumeAll+0xe0>)
1a00255a:	4410      	add	r0, r2
1a00255c:	f7ff fc63 	bl	1a001e26 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002560:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002562:	4b1a      	ldr	r3, [pc, #104]	; (1a0025cc <xTaskResumeAll+0xe4>)
1a002564:	681b      	ldr	r3, [r3, #0]
1a002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002568:	429a      	cmp	r2, r3
1a00256a:	d3dc      	bcc.n	1a002526 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a00256c:	4b18      	ldr	r3, [pc, #96]	; (1a0025d0 <xTaskResumeAll+0xe8>)
1a00256e:	2201      	movs	r2, #1
1a002570:	601a      	str	r2, [r3, #0]
1a002572:	e7d8      	b.n	1a002526 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002574:	b10c      	cbz	r4, 1a00257a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a002576:	f7ff fcdb 	bl	1a001f30 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00257a:	4b16      	ldr	r3, [pc, #88]	; (1a0025d4 <xTaskResumeAll+0xec>)
1a00257c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00257e:	b154      	cbz	r4, 1a002596 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002580:	f7ff ff26 	bl	1a0023d0 <xTaskIncrementTick>
1a002584:	b110      	cbz	r0, 1a00258c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a002586:	4b12      	ldr	r3, [pc, #72]	; (1a0025d0 <xTaskResumeAll+0xe8>)
1a002588:	2201      	movs	r2, #1
1a00258a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a00258c:	3c01      	subs	r4, #1
1a00258e:	d1f7      	bne.n	1a002580 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002590:	4b10      	ldr	r3, [pc, #64]	; (1a0025d4 <xTaskResumeAll+0xec>)
1a002592:	2200      	movs	r2, #0
1a002594:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a002596:	4b0e      	ldr	r3, [pc, #56]	; (1a0025d0 <xTaskResumeAll+0xe8>)
1a002598:	681b      	ldr	r3, [r3, #0]
1a00259a:	b15b      	cbz	r3, 1a0025b4 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a00259c:	4b0e      	ldr	r3, [pc, #56]	; (1a0025d8 <xTaskResumeAll+0xf0>)
1a00259e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0025a2:	601a      	str	r2, [r3, #0]
1a0025a4:	f3bf 8f4f 	dsb	sy
1a0025a8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0025ac:	2401      	movs	r4, #1
1a0025ae:	e7b5      	b.n	1a00251c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0025b0:	2400      	movs	r4, #0
1a0025b2:	e7b3      	b.n	1a00251c <xTaskResumeAll+0x34>
1a0025b4:	2400      	movs	r4, #0
1a0025b6:	e7b1      	b.n	1a00251c <xTaskResumeAll+0x34>
1a0025b8:	10002bc8 	.word	0x10002bc8
1a0025bc:	10002bbc 	.word	0x10002bbc
1a0025c0:	10002c04 	.word	0x10002c04
1a0025c4:	10002bd0 	.word	0x10002bd0
1a0025c8:	10002b30 	.word	0x10002b30
1a0025cc:	10002b24 	.word	0x10002b24
1a0025d0:	10002c48 	.word	0x10002c48
1a0025d4:	10002bc4 	.word	0x10002bc4
1a0025d8:	e000ed04 	.word	0xe000ed04

1a0025dc <vTaskDelayUntil>:
	{
1a0025dc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a0025de:	b150      	cbz	r0, 1a0025f6 <vTaskDelayUntil+0x1a>
1a0025e0:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a0025e2:	b989      	cbnz	r1, 1a002608 <vTaskDelayUntil+0x2c>
1a0025e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025e8:	f383 8811 	msr	BASEPRI, r3
1a0025ec:	f3bf 8f6f 	isb	sy
1a0025f0:	f3bf 8f4f 	dsb	sy
1a0025f4:	e7fe      	b.n	1a0025f4 <vTaskDelayUntil+0x18>
1a0025f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025fa:	f383 8811 	msr	BASEPRI, r3
1a0025fe:	f3bf 8f6f 	isb	sy
1a002602:	f3bf 8f4f 	dsb	sy
1a002606:	e7fe      	b.n	1a002606 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a002608:	4b1a      	ldr	r3, [pc, #104]	; (1a002674 <vTaskDelayUntil+0x98>)
1a00260a:	681b      	ldr	r3, [r3, #0]
1a00260c:	b143      	cbz	r3, 1a002620 <vTaskDelayUntil+0x44>
1a00260e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002612:	f383 8811 	msr	BASEPRI, r3
1a002616:	f3bf 8f6f 	isb	sy
1a00261a:	f3bf 8f4f 	dsb	sy
1a00261e:	e7fe      	b.n	1a00261e <vTaskDelayUntil+0x42>
1a002620:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a002622:	f7ff fec7 	bl	1a0023b4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a002626:	4b14      	ldr	r3, [pc, #80]	; (1a002678 <vTaskDelayUntil+0x9c>)
1a002628:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00262a:	682a      	ldr	r2, [r5, #0]
1a00262c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00262e:	4282      	cmp	r2, r0
1a002630:	d918      	bls.n	1a002664 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002632:	42a2      	cmp	r2, r4
1a002634:	d80c      	bhi.n	1a002650 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a002636:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a002638:	f7ff ff56 	bl	1a0024e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00263c:	b938      	cbnz	r0, 1a00264e <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a00263e:	4b0f      	ldr	r3, [pc, #60]	; (1a00267c <vTaskDelayUntil+0xa0>)
1a002640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002644:	601a      	str	r2, [r3, #0]
1a002646:	f3bf 8f4f 	dsb	sy
1a00264a:	f3bf 8f6f 	isb	sy
	}
1a00264e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a002650:	42a0      	cmp	r0, r4
1a002652:	d301      	bcc.n	1a002658 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a002654:	602c      	str	r4, [r5, #0]
1a002656:	e7ef      	b.n	1a002638 <vTaskDelayUntil+0x5c>
1a002658:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00265a:	2100      	movs	r1, #0
1a00265c:	1a20      	subs	r0, r4, r0
1a00265e:	f7ff fda7 	bl	1a0021b0 <prvAddCurrentTaskToDelayedList>
1a002662:	e7e9      	b.n	1a002638 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a002664:	42a2      	cmp	r2, r4
1a002666:	d801      	bhi.n	1a00266c <vTaskDelayUntil+0x90>
1a002668:	42a0      	cmp	r0, r4
1a00266a:	d201      	bcs.n	1a002670 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a00266c:	602c      	str	r4, [r5, #0]
1a00266e:	e7f4      	b.n	1a00265a <vTaskDelayUntil+0x7e>
1a002670:	602c      	str	r4, [r5, #0]
1a002672:	e7e1      	b.n	1a002638 <vTaskDelayUntil+0x5c>
1a002674:	10002bc8 	.word	0x10002bc8
1a002678:	10002c44 	.word	0x10002c44
1a00267c:	e000ed04 	.word	0xe000ed04

1a002680 <vTaskDelay>:
	{
1a002680:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a002682:	b1a8      	cbz	r0, 1a0026b0 <vTaskDelay+0x30>
1a002684:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a002686:	4b0f      	ldr	r3, [pc, #60]	; (1a0026c4 <vTaskDelay+0x44>)
1a002688:	681b      	ldr	r3, [r3, #0]
1a00268a:	b143      	cbz	r3, 1a00269e <vTaskDelay+0x1e>
1a00268c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002690:	f383 8811 	msr	BASEPRI, r3
1a002694:	f3bf 8f6f 	isb	sy
1a002698:	f3bf 8f4f 	dsb	sy
1a00269c:	e7fe      	b.n	1a00269c <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00269e:	f7ff fe89 	bl	1a0023b4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a0026a2:	2100      	movs	r1, #0
1a0026a4:	4620      	mov	r0, r4
1a0026a6:	f7ff fd83 	bl	1a0021b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a0026aa:	f7ff ff1d 	bl	1a0024e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a0026ae:	b938      	cbnz	r0, 1a0026c0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a0026b0:	4b05      	ldr	r3, [pc, #20]	; (1a0026c8 <vTaskDelay+0x48>)
1a0026b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0026b6:	601a      	str	r2, [r3, #0]
1a0026b8:	f3bf 8f4f 	dsb	sy
1a0026bc:	f3bf 8f6f 	isb	sy
	}
1a0026c0:	bd10      	pop	{r4, pc}
1a0026c2:	bf00      	nop
1a0026c4:	10002bc8 	.word	0x10002bc8
1a0026c8:	e000ed04 	.word	0xe000ed04

1a0026cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0026cc:	4b2c      	ldr	r3, [pc, #176]	; (1a002780 <vTaskSwitchContext+0xb4>)
1a0026ce:	681b      	ldr	r3, [r3, #0]
1a0026d0:	b11b      	cbz	r3, 1a0026da <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0026d2:	4b2c      	ldr	r3, [pc, #176]	; (1a002784 <vTaskSwitchContext+0xb8>)
1a0026d4:	2201      	movs	r2, #1
1a0026d6:	601a      	str	r2, [r3, #0]
1a0026d8:	4770      	bx	lr
{
1a0026da:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0026dc:	4b29      	ldr	r3, [pc, #164]	; (1a002784 <vTaskSwitchContext+0xb8>)
1a0026de:	2200      	movs	r2, #0
1a0026e0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0026e2:	4b29      	ldr	r3, [pc, #164]	; (1a002788 <vTaskSwitchContext+0xbc>)
1a0026e4:	681b      	ldr	r3, [r3, #0]
1a0026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0026e8:	681a      	ldr	r2, [r3, #0]
1a0026ea:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0026ee:	d103      	bne.n	1a0026f8 <vTaskSwitchContext+0x2c>
1a0026f0:	685a      	ldr	r2, [r3, #4]
1a0026f2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0026f6:	d01b      	beq.n	1a002730 <vTaskSwitchContext+0x64>
1a0026f8:	4b23      	ldr	r3, [pc, #140]	; (1a002788 <vTaskSwitchContext+0xbc>)
1a0026fa:	6818      	ldr	r0, [r3, #0]
1a0026fc:	6819      	ldr	r1, [r3, #0]
1a0026fe:	3134      	adds	r1, #52	; 0x34
1a002700:	f7ff fc08 	bl	1a001f14 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002704:	4b21      	ldr	r3, [pc, #132]	; (1a00278c <vTaskSwitchContext+0xc0>)
1a002706:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a002708:	fab3 f383 	clz	r3, r3
1a00270c:	b2db      	uxtb	r3, r3
1a00270e:	f1c3 031f 	rsb	r3, r3, #31
1a002712:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002716:	008a      	lsls	r2, r1, #2
1a002718:	491d      	ldr	r1, [pc, #116]	; (1a002790 <vTaskSwitchContext+0xc4>)
1a00271a:	588a      	ldr	r2, [r1, r2]
1a00271c:	b98a      	cbnz	r2, 1a002742 <vTaskSwitchContext+0x76>
	__asm volatile
1a00271e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002722:	f383 8811 	msr	BASEPRI, r3
1a002726:	f3bf 8f6f 	isb	sy
1a00272a:	f3bf 8f4f 	dsb	sy
1a00272e:	e7fe      	b.n	1a00272e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002730:	689a      	ldr	r2, [r3, #8]
1a002732:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002736:	d1df      	bne.n	1a0026f8 <vTaskSwitchContext+0x2c>
1a002738:	68db      	ldr	r3, [r3, #12]
1a00273a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00273e:	d1db      	bne.n	1a0026f8 <vTaskSwitchContext+0x2c>
1a002740:	e7e0      	b.n	1a002704 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002742:	4813      	ldr	r0, [pc, #76]	; (1a002790 <vTaskSwitchContext+0xc4>)
1a002744:	009a      	lsls	r2, r3, #2
1a002746:	18d4      	adds	r4, r2, r3
1a002748:	00a1      	lsls	r1, r4, #2
1a00274a:	4401      	add	r1, r0
1a00274c:	684c      	ldr	r4, [r1, #4]
1a00274e:	6864      	ldr	r4, [r4, #4]
1a002750:	604c      	str	r4, [r1, #4]
1a002752:	441a      	add	r2, r3
1a002754:	0091      	lsls	r1, r2, #2
1a002756:	3108      	adds	r1, #8
1a002758:	4408      	add	r0, r1
1a00275a:	4284      	cmp	r4, r0
1a00275c:	d009      	beq.n	1a002772 <vTaskSwitchContext+0xa6>
1a00275e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002762:	009a      	lsls	r2, r3, #2
1a002764:	4b0a      	ldr	r3, [pc, #40]	; (1a002790 <vTaskSwitchContext+0xc4>)
1a002766:	4413      	add	r3, r2
1a002768:	685b      	ldr	r3, [r3, #4]
1a00276a:	68da      	ldr	r2, [r3, #12]
1a00276c:	4b06      	ldr	r3, [pc, #24]	; (1a002788 <vTaskSwitchContext+0xbc>)
1a00276e:	601a      	str	r2, [r3, #0]
}
1a002770:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002772:	6861      	ldr	r1, [r4, #4]
1a002774:	4806      	ldr	r0, [pc, #24]	; (1a002790 <vTaskSwitchContext+0xc4>)
1a002776:	2214      	movs	r2, #20
1a002778:	fb02 0203 	mla	r2, r2, r3, r0
1a00277c:	6051      	str	r1, [r2, #4]
1a00277e:	e7ee      	b.n	1a00275e <vTaskSwitchContext+0x92>
1a002780:	10002bc8 	.word	0x10002bc8
1a002784:	10002c48 	.word	0x10002c48
1a002788:	10002b24 	.word	0x10002b24
1a00278c:	10002bd0 	.word	0x10002bd0
1a002790:	10002b30 	.word	0x10002b30

1a002794 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a002794:	b940      	cbnz	r0, 1a0027a8 <vTaskPlaceOnEventList+0x14>
1a002796:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00279a:	f383 8811 	msr	BASEPRI, r3
1a00279e:	f3bf 8f6f 	isb	sy
1a0027a2:	f3bf 8f4f 	dsb	sy
1a0027a6:	e7fe      	b.n	1a0027a6 <vTaskPlaceOnEventList+0x12>
{
1a0027a8:	b510      	push	{r4, lr}
1a0027aa:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0027ac:	4b04      	ldr	r3, [pc, #16]	; (1a0027c0 <vTaskPlaceOnEventList+0x2c>)
1a0027ae:	6819      	ldr	r1, [r3, #0]
1a0027b0:	3118      	adds	r1, #24
1a0027b2:	f7ff fb44 	bl	1a001e3e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a0027b6:	2101      	movs	r1, #1
1a0027b8:	4620      	mov	r0, r4
1a0027ba:	f7ff fcf9 	bl	1a0021b0 <prvAddCurrentTaskToDelayedList>
}
1a0027be:	bd10      	pop	{r4, pc}
1a0027c0:	10002b24 	.word	0x10002b24

1a0027c4 <vTaskPlaceOnEventListRestricted>:
	{
1a0027c4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a0027c6:	b940      	cbnz	r0, 1a0027da <vTaskPlaceOnEventListRestricted+0x16>
1a0027c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027cc:	f383 8811 	msr	BASEPRI, r3
1a0027d0:	f3bf 8f6f 	isb	sy
1a0027d4:	f3bf 8f4f 	dsb	sy
1a0027d8:	e7fe      	b.n	1a0027d8 <vTaskPlaceOnEventListRestricted+0x14>
1a0027da:	460c      	mov	r4, r1
1a0027dc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0027de:	4a06      	ldr	r2, [pc, #24]	; (1a0027f8 <vTaskPlaceOnEventListRestricted+0x34>)
1a0027e0:	6811      	ldr	r1, [r2, #0]
1a0027e2:	3118      	adds	r1, #24
1a0027e4:	f7ff fb1f 	bl	1a001e26 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0027e8:	b10d      	cbz	r5, 1a0027ee <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0027ea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0027ee:	4629      	mov	r1, r5
1a0027f0:	4620      	mov	r0, r4
1a0027f2:	f7ff fcdd 	bl	1a0021b0 <prvAddCurrentTaskToDelayedList>
	}
1a0027f6:	bd38      	pop	{r3, r4, r5, pc}
1a0027f8:	10002b24 	.word	0x10002b24

1a0027fc <xTaskRemoveFromEventList>:
{
1a0027fc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0027fe:	68c3      	ldr	r3, [r0, #12]
1a002800:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002802:	b944      	cbnz	r4, 1a002816 <xTaskRemoveFromEventList+0x1a>
1a002804:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002808:	f383 8811 	msr	BASEPRI, r3
1a00280c:	f3bf 8f6f 	isb	sy
1a002810:	f3bf 8f4f 	dsb	sy
1a002814:	e7fe      	b.n	1a002814 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002816:	f104 0518 	add.w	r5, r4, #24
1a00281a:	4628      	mov	r0, r5
1a00281c:	f7ff fb29 	bl	1a001e72 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002820:	4b13      	ldr	r3, [pc, #76]	; (1a002870 <xTaskRemoveFromEventList+0x74>)
1a002822:	681b      	ldr	r3, [r3, #0]
1a002824:	b9e3      	cbnz	r3, 1a002860 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002826:	1d25      	adds	r5, r4, #4
1a002828:	4628      	mov	r0, r5
1a00282a:	f7ff fb22 	bl	1a001e72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00282e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002830:	2201      	movs	r2, #1
1a002832:	409a      	lsls	r2, r3
1a002834:	490f      	ldr	r1, [pc, #60]	; (1a002874 <xTaskRemoveFromEventList+0x78>)
1a002836:	6808      	ldr	r0, [r1, #0]
1a002838:	4302      	orrs	r2, r0
1a00283a:	600a      	str	r2, [r1, #0]
1a00283c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002840:	009a      	lsls	r2, r3, #2
1a002842:	4629      	mov	r1, r5
1a002844:	480c      	ldr	r0, [pc, #48]	; (1a002878 <xTaskRemoveFromEventList+0x7c>)
1a002846:	4410      	add	r0, r2
1a002848:	f7ff faed 	bl	1a001e26 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00284c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00284e:	4b0b      	ldr	r3, [pc, #44]	; (1a00287c <xTaskRemoveFromEventList+0x80>)
1a002850:	681b      	ldr	r3, [r3, #0]
1a002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002854:	429a      	cmp	r2, r3
1a002856:	d908      	bls.n	1a00286a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002858:	2001      	movs	r0, #1
1a00285a:	4b09      	ldr	r3, [pc, #36]	; (1a002880 <xTaskRemoveFromEventList+0x84>)
1a00285c:	6018      	str	r0, [r3, #0]
}
1a00285e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a002860:	4629      	mov	r1, r5
1a002862:	4808      	ldr	r0, [pc, #32]	; (1a002884 <xTaskRemoveFromEventList+0x88>)
1a002864:	f7ff fadf 	bl	1a001e26 <vListInsertEnd>
1a002868:	e7f0      	b.n	1a00284c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a00286a:	2000      	movs	r0, #0
	return xReturn;
1a00286c:	e7f7      	b.n	1a00285e <xTaskRemoveFromEventList+0x62>
1a00286e:	bf00      	nop
1a002870:	10002bc8 	.word	0x10002bc8
1a002874:	10002bd0 	.word	0x10002bd0
1a002878:	10002b30 	.word	0x10002b30
1a00287c:	10002b24 	.word	0x10002b24
1a002880:	10002c48 	.word	0x10002c48
1a002884:	10002c04 	.word	0x10002c04

1a002888 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a002888:	4b03      	ldr	r3, [pc, #12]	; (1a002898 <vTaskInternalSetTimeOutState+0x10>)
1a00288a:	681b      	ldr	r3, [r3, #0]
1a00288c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a00288e:	4b03      	ldr	r3, [pc, #12]	; (1a00289c <vTaskInternalSetTimeOutState+0x14>)
1a002890:	681b      	ldr	r3, [r3, #0]
1a002892:	6043      	str	r3, [r0, #4]
}
1a002894:	4770      	bx	lr
1a002896:	bf00      	nop
1a002898:	10002c00 	.word	0x10002c00
1a00289c:	10002c44 	.word	0x10002c44

1a0028a0 <xTaskCheckForTimeOut>:
{
1a0028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0028a2:	b150      	cbz	r0, 1a0028ba <xTaskCheckForTimeOut+0x1a>
1a0028a4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0028a6:	b989      	cbnz	r1, 1a0028cc <xTaskCheckForTimeOut+0x2c>
1a0028a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028ac:	f383 8811 	msr	BASEPRI, r3
1a0028b0:	f3bf 8f6f 	isb	sy
1a0028b4:	f3bf 8f4f 	dsb	sy
1a0028b8:	e7fe      	b.n	1a0028b8 <xTaskCheckForTimeOut+0x18>
1a0028ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028be:	f383 8811 	msr	BASEPRI, r3
1a0028c2:	f3bf 8f6f 	isb	sy
1a0028c6:	f3bf 8f4f 	dsb	sy
1a0028ca:	e7fe      	b.n	1a0028ca <xTaskCheckForTimeOut+0x2a>
1a0028cc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0028ce:	f000 fb69 	bl	1a002fa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0028d2:	4b11      	ldr	r3, [pc, #68]	; (1a002918 <xTaskCheckForTimeOut+0x78>)
1a0028d4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0028d6:	6868      	ldr	r0, [r5, #4]
1a0028d8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0028da:	6823      	ldr	r3, [r4, #0]
1a0028dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0028e0:	d016      	beq.n	1a002910 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0028e2:	682f      	ldr	r7, [r5, #0]
1a0028e4:	4e0d      	ldr	r6, [pc, #52]	; (1a00291c <xTaskCheckForTimeOut+0x7c>)
1a0028e6:	6836      	ldr	r6, [r6, #0]
1a0028e8:	42b7      	cmp	r7, r6
1a0028ea:	d001      	beq.n	1a0028f0 <xTaskCheckForTimeOut+0x50>
1a0028ec:	4288      	cmp	r0, r1
1a0028ee:	d911      	bls.n	1a002914 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0028f0:	4293      	cmp	r3, r2
1a0028f2:	d803      	bhi.n	1a0028fc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0028f4:	2300      	movs	r3, #0
1a0028f6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0028f8:	2401      	movs	r4, #1
1a0028fa:	e005      	b.n	1a002908 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0028fc:	1a9b      	subs	r3, r3, r2
1a0028fe:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002900:	4628      	mov	r0, r5
1a002902:	f7ff ffc1 	bl	1a002888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002906:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002908:	f000 fb6e 	bl	1a002fe8 <vPortExitCritical>
}
1a00290c:	4620      	mov	r0, r4
1a00290e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002910:	2400      	movs	r4, #0
1a002912:	e7f9      	b.n	1a002908 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002914:	2401      	movs	r4, #1
1a002916:	e7f7      	b.n	1a002908 <xTaskCheckForTimeOut+0x68>
1a002918:	10002c44 	.word	0x10002c44
1a00291c:	10002c00 	.word	0x10002c00

1a002920 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002920:	4b01      	ldr	r3, [pc, #4]	; (1a002928 <vTaskMissedYield+0x8>)
1a002922:	2201      	movs	r2, #1
1a002924:	601a      	str	r2, [r3, #0]
}
1a002926:	4770      	bx	lr
1a002928:	10002c48 	.word	0x10002c48

1a00292c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00292c:	4b05      	ldr	r3, [pc, #20]	; (1a002944 <xTaskGetSchedulerState+0x18>)
1a00292e:	681b      	ldr	r3, [r3, #0]
1a002930:	b133      	cbz	r3, 1a002940 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002932:	4b05      	ldr	r3, [pc, #20]	; (1a002948 <xTaskGetSchedulerState+0x1c>)
1a002934:	681b      	ldr	r3, [r3, #0]
1a002936:	b10b      	cbz	r3, 1a00293c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002938:	2000      	movs	r0, #0
	}
1a00293a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00293c:	2002      	movs	r0, #2
1a00293e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002940:	2001      	movs	r0, #1
1a002942:	4770      	bx	lr
1a002944:	10002c18 	.word	0x10002c18
1a002948:	10002bc8 	.word	0x10002bc8

1a00294c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a00294c:	2800      	cmp	r0, #0
1a00294e:	d049      	beq.n	1a0029e4 <xTaskPriorityDisinherit+0x98>
	{
1a002950:	b538      	push	{r3, r4, r5, lr}
1a002952:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a002954:	4a26      	ldr	r2, [pc, #152]	; (1a0029f0 <xTaskPriorityDisinherit+0xa4>)
1a002956:	6812      	ldr	r2, [r2, #0]
1a002958:	4282      	cmp	r2, r0
1a00295a:	d008      	beq.n	1a00296e <xTaskPriorityDisinherit+0x22>
1a00295c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002960:	f383 8811 	msr	BASEPRI, r3
1a002964:	f3bf 8f6f 	isb	sy
1a002968:	f3bf 8f4f 	dsb	sy
1a00296c:	e7fe      	b.n	1a00296c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a00296e:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002970:	b942      	cbnz	r2, 1a002984 <xTaskPriorityDisinherit+0x38>
1a002972:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002976:	f383 8811 	msr	BASEPRI, r3
1a00297a:	f3bf 8f6f 	isb	sy
1a00297e:	f3bf 8f4f 	dsb	sy
1a002982:	e7fe      	b.n	1a002982 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a002984:	3a01      	subs	r2, #1
1a002986:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002988:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a00298a:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a00298c:	4288      	cmp	r0, r1
1a00298e:	d02b      	beq.n	1a0029e8 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002990:	bb62      	cbnz	r2, 1a0029ec <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a002992:	1d25      	adds	r5, r4, #4
1a002994:	4628      	mov	r0, r5
1a002996:	f7ff fa6c 	bl	1a001e72 <uxListRemove>
1a00299a:	b970      	cbnz	r0, 1a0029ba <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a00299c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00299e:	2314      	movs	r3, #20
1a0029a0:	fb03 f302 	mul.w	r3, r3, r2
1a0029a4:	4913      	ldr	r1, [pc, #76]	; (1a0029f4 <xTaskPriorityDisinherit+0xa8>)
1a0029a6:	58cb      	ldr	r3, [r1, r3]
1a0029a8:	b93b      	cbnz	r3, 1a0029ba <xTaskPriorityDisinherit+0x6e>
1a0029aa:	2301      	movs	r3, #1
1a0029ac:	fa03 f202 	lsl.w	r2, r3, r2
1a0029b0:	4911      	ldr	r1, [pc, #68]	; (1a0029f8 <xTaskPriorityDisinherit+0xac>)
1a0029b2:	680b      	ldr	r3, [r1, #0]
1a0029b4:	ea23 0302 	bic.w	r3, r3, r2
1a0029b8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0029ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0029bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0029be:	f1c3 0207 	rsb	r2, r3, #7
1a0029c2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0029c4:	2401      	movs	r4, #1
1a0029c6:	fa04 f203 	lsl.w	r2, r4, r3
1a0029ca:	490b      	ldr	r1, [pc, #44]	; (1a0029f8 <xTaskPriorityDisinherit+0xac>)
1a0029cc:	6808      	ldr	r0, [r1, #0]
1a0029ce:	4302      	orrs	r2, r0
1a0029d0:	600a      	str	r2, [r1, #0]
1a0029d2:	4629      	mov	r1, r5
1a0029d4:	4a07      	ldr	r2, [pc, #28]	; (1a0029f4 <xTaskPriorityDisinherit+0xa8>)
1a0029d6:	2014      	movs	r0, #20
1a0029d8:	fb00 2003 	mla	r0, r0, r3, r2
1a0029dc:	f7ff fa23 	bl	1a001e26 <vListInsertEnd>
					xReturn = pdTRUE;
1a0029e0:	4620      	mov	r0, r4
	}
1a0029e2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0029e4:	2000      	movs	r0, #0
	}
1a0029e6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0029e8:	2000      	movs	r0, #0
1a0029ea:	e7fa      	b.n	1a0029e2 <xTaskPriorityDisinherit+0x96>
1a0029ec:	2000      	movs	r0, #0
		return xReturn;
1a0029ee:	e7f8      	b.n	1a0029e2 <xTaskPriorityDisinherit+0x96>
1a0029f0:	10002b24 	.word	0x10002b24
1a0029f4:	10002b30 	.word	0x10002b30
1a0029f8:	10002bd0 	.word	0x10002bd0

1a0029fc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0029fc:	4b06      	ldr	r3, [pc, #24]	; (1a002a18 <prvGetNextExpireTime+0x1c>)
1a0029fe:	681a      	ldr	r2, [r3, #0]
1a002a00:	6813      	ldr	r3, [r2, #0]
1a002a02:	fab3 f383 	clz	r3, r3
1a002a06:	095b      	lsrs	r3, r3, #5
1a002a08:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a002a0a:	b913      	cbnz	r3, 1a002a12 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002a0c:	68d3      	ldr	r3, [r2, #12]
1a002a0e:	6818      	ldr	r0, [r3, #0]
1a002a10:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002a12:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002a14:	4770      	bx	lr
1a002a16:	bf00      	nop
1a002a18:	10002c4c 	.word	0x10002c4c

1a002a1c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a002a1c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002a1e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002a20:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002a22:	4291      	cmp	r1, r2
1a002a24:	d80c      	bhi.n	1a002a40 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002a26:	1ad2      	subs	r2, r2, r3
1a002a28:	6983      	ldr	r3, [r0, #24]
1a002a2a:	429a      	cmp	r2, r3
1a002a2c:	d301      	bcc.n	1a002a32 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002a2e:	2001      	movs	r0, #1
1a002a30:	e010      	b.n	1a002a54 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002a32:	1d01      	adds	r1, r0, #4
1a002a34:	4b09      	ldr	r3, [pc, #36]	; (1a002a5c <prvInsertTimerInActiveList+0x40>)
1a002a36:	6818      	ldr	r0, [r3, #0]
1a002a38:	f7ff fa01 	bl	1a001e3e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002a3c:	2000      	movs	r0, #0
1a002a3e:	e009      	b.n	1a002a54 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002a40:	429a      	cmp	r2, r3
1a002a42:	d201      	bcs.n	1a002a48 <prvInsertTimerInActiveList+0x2c>
1a002a44:	4299      	cmp	r1, r3
1a002a46:	d206      	bcs.n	1a002a56 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002a48:	1d01      	adds	r1, r0, #4
1a002a4a:	4b05      	ldr	r3, [pc, #20]	; (1a002a60 <prvInsertTimerInActiveList+0x44>)
1a002a4c:	6818      	ldr	r0, [r3, #0]
1a002a4e:	f7ff f9f6 	bl	1a001e3e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002a52:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002a54:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a002a56:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a002a58:	e7fc      	b.n	1a002a54 <prvInsertTimerInActiveList+0x38>
1a002a5a:	bf00      	nop
1a002a5c:	10002c50 	.word	0x10002c50
1a002a60:	10002c4c 	.word	0x10002c4c

1a002a64 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002a64:	b530      	push	{r4, r5, lr}
1a002a66:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002a68:	f000 fa9c 	bl	1a002fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002a6c:	4b11      	ldr	r3, [pc, #68]	; (1a002ab4 <prvCheckForValidListAndQueue+0x50>)
1a002a6e:	681b      	ldr	r3, [r3, #0]
1a002a70:	b11b      	cbz	r3, 1a002a7a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002a72:	f000 fab9 	bl	1a002fe8 <vPortExitCritical>
}
1a002a76:	b003      	add	sp, #12
1a002a78:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a002a7a:	4d0f      	ldr	r5, [pc, #60]	; (1a002ab8 <prvCheckForValidListAndQueue+0x54>)
1a002a7c:	4628      	mov	r0, r5
1a002a7e:	f7ff f9c4 	bl	1a001e0a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002a82:	4c0e      	ldr	r4, [pc, #56]	; (1a002abc <prvCheckForValidListAndQueue+0x58>)
1a002a84:	4620      	mov	r0, r4
1a002a86:	f7ff f9c0 	bl	1a001e0a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002a8a:	4b0d      	ldr	r3, [pc, #52]	; (1a002ac0 <prvCheckForValidListAndQueue+0x5c>)
1a002a8c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002a8e:	4b0d      	ldr	r3, [pc, #52]	; (1a002ac4 <prvCheckForValidListAndQueue+0x60>)
1a002a90:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002a92:	2300      	movs	r3, #0
1a002a94:	9300      	str	r3, [sp, #0]
1a002a96:	4b0c      	ldr	r3, [pc, #48]	; (1a002ac8 <prvCheckForValidListAndQueue+0x64>)
1a002a98:	4a0c      	ldr	r2, [pc, #48]	; (1a002acc <prvCheckForValidListAndQueue+0x68>)
1a002a9a:	2110      	movs	r1, #16
1a002a9c:	200a      	movs	r0, #10
1a002a9e:	f7fe fee2 	bl	1a001866 <xQueueGenericCreateStatic>
1a002aa2:	4b04      	ldr	r3, [pc, #16]	; (1a002ab4 <prvCheckForValidListAndQueue+0x50>)
1a002aa4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002aa6:	2800      	cmp	r0, #0
1a002aa8:	d0e3      	beq.n	1a002a72 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002aaa:	4909      	ldr	r1, [pc, #36]	; (1a002ad0 <prvCheckForValidListAndQueue+0x6c>)
1a002aac:	f7ff f970 	bl	1a001d90 <vQueueAddToRegistry>
1a002ab0:	e7df      	b.n	1a002a72 <prvCheckForValidListAndQueue+0xe>
1a002ab2:	bf00      	nop
1a002ab4:	10002d70 	.word	0x10002d70
1a002ab8:	10002cf4 	.word	0x10002cf4
1a002abc:	10002d08 	.word	0x10002d08
1a002ac0:	10002c4c 	.word	0x10002c4c
1a002ac4:	10002c50 	.word	0x10002c50
1a002ac8:	10002d20 	.word	0x10002d20
1a002acc:	10002c54 	.word	0x10002c54
1a002ad0:	1a007308 	.word	0x1a007308

1a002ad4 <prvInitialiseNewTimer>:
{
1a002ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002ad8:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a002ada:	b941      	cbnz	r1, 1a002aee <prvInitialiseNewTimer+0x1a>
1a002adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae0:	f383 8811 	msr	BASEPRI, r3
1a002ae4:	f3bf 8f6f 	isb	sy
1a002ae8:	f3bf 8f4f 	dsb	sy
1a002aec:	e7fe      	b.n	1a002aec <prvInitialiseNewTimer+0x18>
1a002aee:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002af0:	b174      	cbz	r4, 1a002b10 <prvInitialiseNewTimer+0x3c>
1a002af2:	461d      	mov	r5, r3
1a002af4:	4616      	mov	r6, r2
1a002af6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a002af8:	f7ff ffb4 	bl	1a002a64 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002afc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002b00:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002b02:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002b04:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a002b06:	9b06      	ldr	r3, [sp, #24]
1a002b08:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a002b0a:	1d20      	adds	r0, r4, #4
1a002b0c:	f7ff f988 	bl	1a001e20 <vListInitialiseItem>
}
1a002b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002b14 <xTimerCreateTimerTask>:
{
1a002b14:	b510      	push	{r4, lr}
1a002b16:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002b18:	f7ff ffa4 	bl	1a002a64 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a002b1c:	4b12      	ldr	r3, [pc, #72]	; (1a002b68 <xTimerCreateTimerTask+0x54>)
1a002b1e:	681b      	ldr	r3, [r3, #0]
1a002b20:	b1cb      	cbz	r3, 1a002b56 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002b22:	2400      	movs	r4, #0
1a002b24:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002b26:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002b28:	aa07      	add	r2, sp, #28
1a002b2a:	a906      	add	r1, sp, #24
1a002b2c:	a805      	add	r0, sp, #20
1a002b2e:	f7ff f9c1 	bl	1a001eb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002b32:	9b05      	ldr	r3, [sp, #20]
1a002b34:	9302      	str	r3, [sp, #8]
1a002b36:	9b06      	ldr	r3, [sp, #24]
1a002b38:	9301      	str	r3, [sp, #4]
1a002b3a:	2304      	movs	r3, #4
1a002b3c:	9300      	str	r3, [sp, #0]
1a002b3e:	4623      	mov	r3, r4
1a002b40:	9a07      	ldr	r2, [sp, #28]
1a002b42:	490a      	ldr	r1, [pc, #40]	; (1a002b6c <xTimerCreateTimerTask+0x58>)
1a002b44:	480a      	ldr	r0, [pc, #40]	; (1a002b70 <xTimerCreateTimerTask+0x5c>)
1a002b46:	f7ff fb7f 	bl	1a002248 <xTaskCreateStatic>
1a002b4a:	4b0a      	ldr	r3, [pc, #40]	; (1a002b74 <xTimerCreateTimerTask+0x60>)
1a002b4c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002b4e:	b110      	cbz	r0, 1a002b56 <xTimerCreateTimerTask+0x42>
}
1a002b50:	2001      	movs	r0, #1
1a002b52:	b008      	add	sp, #32
1a002b54:	bd10      	pop	{r4, pc}
1a002b56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b5a:	f383 8811 	msr	BASEPRI, r3
1a002b5e:	f3bf 8f6f 	isb	sy
1a002b62:	f3bf 8f4f 	dsb	sy
1a002b66:	e7fe      	b.n	1a002b66 <xTimerCreateTimerTask+0x52>
1a002b68:	10002d70 	.word	0x10002d70
1a002b6c:	1a007310 	.word	0x1a007310
1a002b70:	1a002e91 	.word	0x1a002e91
1a002b74:	10002d74 	.word	0x10002d74

1a002b78 <xTimerCreate>:
	{
1a002b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002b7c:	b082      	sub	sp, #8
1a002b7e:	4605      	mov	r5, r0
1a002b80:	460e      	mov	r6, r1
1a002b82:	4617      	mov	r7, r2
1a002b84:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a002b86:	2030      	movs	r0, #48	; 0x30
1a002b88:	f7fe fcb4 	bl	1a0014f4 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a002b8c:	4604      	mov	r4, r0
1a002b8e:	b158      	cbz	r0, 1a002ba8 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002b90:	9001      	str	r0, [sp, #4]
1a002b92:	9b08      	ldr	r3, [sp, #32]
1a002b94:	9300      	str	r3, [sp, #0]
1a002b96:	4643      	mov	r3, r8
1a002b98:	463a      	mov	r2, r7
1a002b9a:	4631      	mov	r1, r6
1a002b9c:	4628      	mov	r0, r5
1a002b9e:	f7ff ff99 	bl	1a002ad4 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a002ba2:	2300      	movs	r3, #0
1a002ba4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002ba8:	4620      	mov	r0, r4
1a002baa:	b002      	add	sp, #8
1a002bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002bb0 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002bb0:	b1c8      	cbz	r0, 1a002be6 <xTimerGenericCommand+0x36>
{
1a002bb2:	b530      	push	{r4, r5, lr}
1a002bb4:	b085      	sub	sp, #20
1a002bb6:	4615      	mov	r5, r2
1a002bb8:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a002bba:	4a17      	ldr	r2, [pc, #92]	; (1a002c18 <xTimerGenericCommand+0x68>)
1a002bbc:	6810      	ldr	r0, [r2, #0]
1a002bbe:	b340      	cbz	r0, 1a002c12 <xTimerGenericCommand+0x62>
1a002bc0:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002bc2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002bc4:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a002bc6:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a002bc8:	2905      	cmp	r1, #5
1a002bca:	dc1d      	bgt.n	1a002c08 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002bcc:	f7ff feae 	bl	1a00292c <xTaskGetSchedulerState>
1a002bd0:	2802      	cmp	r0, #2
1a002bd2:	d011      	beq.n	1a002bf8 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002bd4:	2300      	movs	r3, #0
1a002bd6:	461a      	mov	r2, r3
1a002bd8:	4669      	mov	r1, sp
1a002bda:	480f      	ldr	r0, [pc, #60]	; (1a002c18 <xTimerGenericCommand+0x68>)
1a002bdc:	6800      	ldr	r0, [r0, #0]
1a002bde:	f7fe feb1 	bl	1a001944 <xQueueGenericSend>
}
1a002be2:	b005      	add	sp, #20
1a002be4:	bd30      	pop	{r4, r5, pc}
1a002be6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bea:	f383 8811 	msr	BASEPRI, r3
1a002bee:	f3bf 8f6f 	isb	sy
1a002bf2:	f3bf 8f4f 	dsb	sy
1a002bf6:	e7fe      	b.n	1a002bf6 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002bf8:	2300      	movs	r3, #0
1a002bfa:	9a08      	ldr	r2, [sp, #32]
1a002bfc:	4669      	mov	r1, sp
1a002bfe:	4806      	ldr	r0, [pc, #24]	; (1a002c18 <xTimerGenericCommand+0x68>)
1a002c00:	6800      	ldr	r0, [r0, #0]
1a002c02:	f7fe fe9f 	bl	1a001944 <xQueueGenericSend>
1a002c06:	e7ec      	b.n	1a002be2 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002c08:	2300      	movs	r3, #0
1a002c0a:	4669      	mov	r1, sp
1a002c0c:	f7fe ff58 	bl	1a001ac0 <xQueueGenericSendFromISR>
1a002c10:	e7e7      	b.n	1a002be2 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002c12:	2000      	movs	r0, #0
	return xReturn;
1a002c14:	e7e5      	b.n	1a002be2 <xTimerGenericCommand+0x32>
1a002c16:	bf00      	nop
1a002c18:	10002d70 	.word	0x10002d70

1a002c1c <prvSwitchTimerLists>:
{
1a002c1c:	b570      	push	{r4, r5, r6, lr}
1a002c1e:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002c20:	4b1a      	ldr	r3, [pc, #104]	; (1a002c8c <prvSwitchTimerLists+0x70>)
1a002c22:	681b      	ldr	r3, [r3, #0]
1a002c24:	681a      	ldr	r2, [r3, #0]
1a002c26:	b352      	cbz	r2, 1a002c7e <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002c28:	68db      	ldr	r3, [r3, #12]
1a002c2a:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002c2c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002c2e:	1d25      	adds	r5, r4, #4
1a002c30:	4628      	mov	r0, r5
1a002c32:	f7ff f91e 	bl	1a001e72 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002c38:	4620      	mov	r0, r4
1a002c3a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002c3c:	69e3      	ldr	r3, [r4, #28]
1a002c3e:	2b01      	cmp	r3, #1
1a002c40:	d1ee      	bne.n	1a002c20 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002c42:	69a3      	ldr	r3, [r4, #24]
1a002c44:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002c46:	429e      	cmp	r6, r3
1a002c48:	d207      	bcs.n	1a002c5a <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002c4a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002c4c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002c4e:	4629      	mov	r1, r5
1a002c50:	4b0e      	ldr	r3, [pc, #56]	; (1a002c8c <prvSwitchTimerLists+0x70>)
1a002c52:	6818      	ldr	r0, [r3, #0]
1a002c54:	f7ff f8f3 	bl	1a001e3e <vListInsert>
1a002c58:	e7e2      	b.n	1a002c20 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002c5a:	2100      	movs	r1, #0
1a002c5c:	9100      	str	r1, [sp, #0]
1a002c5e:	460b      	mov	r3, r1
1a002c60:	4632      	mov	r2, r6
1a002c62:	4620      	mov	r0, r4
1a002c64:	f7ff ffa4 	bl	1a002bb0 <xTimerGenericCommand>
				configASSERT( xResult );
1a002c68:	2800      	cmp	r0, #0
1a002c6a:	d1d9      	bne.n	1a002c20 <prvSwitchTimerLists+0x4>
1a002c6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c70:	f383 8811 	msr	BASEPRI, r3
1a002c74:	f3bf 8f6f 	isb	sy
1a002c78:	f3bf 8f4f 	dsb	sy
1a002c7c:	e7fe      	b.n	1a002c7c <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002c7e:	4a04      	ldr	r2, [pc, #16]	; (1a002c90 <prvSwitchTimerLists+0x74>)
1a002c80:	6810      	ldr	r0, [r2, #0]
1a002c82:	4902      	ldr	r1, [pc, #8]	; (1a002c8c <prvSwitchTimerLists+0x70>)
1a002c84:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a002c86:	6013      	str	r3, [r2, #0]
}
1a002c88:	b002      	add	sp, #8
1a002c8a:	bd70      	pop	{r4, r5, r6, pc}
1a002c8c:	10002c4c 	.word	0x10002c4c
1a002c90:	10002c50 	.word	0x10002c50

1a002c94 <prvSampleTimeNow>:
{
1a002c94:	b538      	push	{r3, r4, r5, lr}
1a002c96:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002c98:	f7ff fb94 	bl	1a0023c4 <xTaskGetTickCount>
1a002c9c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002c9e:	4b07      	ldr	r3, [pc, #28]	; (1a002cbc <prvSampleTimeNow+0x28>)
1a002ca0:	681b      	ldr	r3, [r3, #0]
1a002ca2:	4283      	cmp	r3, r0
1a002ca4:	d805      	bhi.n	1a002cb2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a002ca6:	2300      	movs	r3, #0
1a002ca8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002caa:	4b04      	ldr	r3, [pc, #16]	; (1a002cbc <prvSampleTimeNow+0x28>)
1a002cac:	601c      	str	r4, [r3, #0]
}
1a002cae:	4620      	mov	r0, r4
1a002cb0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002cb2:	f7ff ffb3 	bl	1a002c1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a002cb6:	2301      	movs	r3, #1
1a002cb8:	602b      	str	r3, [r5, #0]
1a002cba:	e7f6      	b.n	1a002caa <prvSampleTimeNow+0x16>
1a002cbc:	10002d1c 	.word	0x10002d1c

1a002cc0 <prvProcessExpiredTimer>:
{
1a002cc0:	b570      	push	{r4, r5, r6, lr}
1a002cc2:	b082      	sub	sp, #8
1a002cc4:	4605      	mov	r5, r0
1a002cc6:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002cc8:	4b14      	ldr	r3, [pc, #80]	; (1a002d1c <prvProcessExpiredTimer+0x5c>)
1a002cca:	681b      	ldr	r3, [r3, #0]
1a002ccc:	68db      	ldr	r3, [r3, #12]
1a002cce:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002cd0:	1d20      	adds	r0, r4, #4
1a002cd2:	f7ff f8ce 	bl	1a001e72 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002cd6:	69e3      	ldr	r3, [r4, #28]
1a002cd8:	2b01      	cmp	r3, #1
1a002cda:	d004      	beq.n	1a002ce6 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002cde:	4620      	mov	r0, r4
1a002ce0:	4798      	blx	r3
}
1a002ce2:	b002      	add	sp, #8
1a002ce4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002ce6:	69a1      	ldr	r1, [r4, #24]
1a002ce8:	462b      	mov	r3, r5
1a002cea:	4632      	mov	r2, r6
1a002cec:	4429      	add	r1, r5
1a002cee:	4620      	mov	r0, r4
1a002cf0:	f7ff fe94 	bl	1a002a1c <prvInsertTimerInActiveList>
1a002cf4:	2800      	cmp	r0, #0
1a002cf6:	d0f1      	beq.n	1a002cdc <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002cf8:	2100      	movs	r1, #0
1a002cfa:	9100      	str	r1, [sp, #0]
1a002cfc:	460b      	mov	r3, r1
1a002cfe:	462a      	mov	r2, r5
1a002d00:	4620      	mov	r0, r4
1a002d02:	f7ff ff55 	bl	1a002bb0 <xTimerGenericCommand>
			configASSERT( xResult );
1a002d06:	2800      	cmp	r0, #0
1a002d08:	d1e8      	bne.n	1a002cdc <prvProcessExpiredTimer+0x1c>
1a002d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d0e:	f383 8811 	msr	BASEPRI, r3
1a002d12:	f3bf 8f6f 	isb	sy
1a002d16:	f3bf 8f4f 	dsb	sy
1a002d1a:	e7fe      	b.n	1a002d1a <prvProcessExpiredTimer+0x5a>
1a002d1c:	10002c4c 	.word	0x10002c4c

1a002d20 <prvProcessTimerOrBlockTask>:
{
1a002d20:	b570      	push	{r4, r5, r6, lr}
1a002d22:	b082      	sub	sp, #8
1a002d24:	4606      	mov	r6, r0
1a002d26:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002d28:	f7ff fb44 	bl	1a0023b4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002d2c:	a801      	add	r0, sp, #4
1a002d2e:	f7ff ffb1 	bl	1a002c94 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002d32:	9b01      	ldr	r3, [sp, #4]
1a002d34:	bb1b      	cbnz	r3, 1a002d7e <prvProcessTimerOrBlockTask+0x5e>
1a002d36:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002d38:	b90c      	cbnz	r4, 1a002d3e <prvProcessTimerOrBlockTask+0x1e>
1a002d3a:	42b0      	cmp	r0, r6
1a002d3c:	d218      	bcs.n	1a002d70 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002d3e:	b12c      	cbz	r4, 1a002d4c <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002d40:	4b11      	ldr	r3, [pc, #68]	; (1a002d88 <prvProcessTimerOrBlockTask+0x68>)
1a002d42:	681b      	ldr	r3, [r3, #0]
1a002d44:	681c      	ldr	r4, [r3, #0]
1a002d46:	fab4 f484 	clz	r4, r4
1a002d4a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002d4c:	4622      	mov	r2, r4
1a002d4e:	1b71      	subs	r1, r6, r5
1a002d50:	4b0e      	ldr	r3, [pc, #56]	; (1a002d8c <prvProcessTimerOrBlockTask+0x6c>)
1a002d52:	6818      	ldr	r0, [r3, #0]
1a002d54:	f7ff f830 	bl	1a001db8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002d58:	f7ff fbc6 	bl	1a0024e8 <xTaskResumeAll>
1a002d5c:	b988      	cbnz	r0, 1a002d82 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002d5e:	4b0c      	ldr	r3, [pc, #48]	; (1a002d90 <prvProcessTimerOrBlockTask+0x70>)
1a002d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002d64:	601a      	str	r2, [r3, #0]
1a002d66:	f3bf 8f4f 	dsb	sy
1a002d6a:	f3bf 8f6f 	isb	sy
1a002d6e:	e008      	b.n	1a002d82 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002d70:	f7ff fbba 	bl	1a0024e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002d74:	4629      	mov	r1, r5
1a002d76:	4630      	mov	r0, r6
1a002d78:	f7ff ffa2 	bl	1a002cc0 <prvProcessExpiredTimer>
1a002d7c:	e001      	b.n	1a002d82 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002d7e:	f7ff fbb3 	bl	1a0024e8 <xTaskResumeAll>
}
1a002d82:	b002      	add	sp, #8
1a002d84:	bd70      	pop	{r4, r5, r6, pc}
1a002d86:	bf00      	nop
1a002d88:	10002c50 	.word	0x10002c50
1a002d8c:	10002d70 	.word	0x10002d70
1a002d90:	e000ed04 	.word	0xe000ed04

1a002d94 <prvProcessReceivedCommands>:
{
1a002d94:	b530      	push	{r4, r5, lr}
1a002d96:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002d98:	e002      	b.n	1a002da0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002d9a:	9b04      	ldr	r3, [sp, #16]
1a002d9c:	2b00      	cmp	r3, #0
1a002d9e:	da0f      	bge.n	1a002dc0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002da0:	2200      	movs	r2, #0
1a002da2:	a904      	add	r1, sp, #16
1a002da4:	4b39      	ldr	r3, [pc, #228]	; (1a002e8c <prvProcessReceivedCommands+0xf8>)
1a002da6:	6818      	ldr	r0, [r3, #0]
1a002da8:	f7fe fef0 	bl	1a001b8c <xQueueReceive>
1a002dac:	2800      	cmp	r0, #0
1a002dae:	d06a      	beq.n	1a002e86 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002db0:	9b04      	ldr	r3, [sp, #16]
1a002db2:	2b00      	cmp	r3, #0
1a002db4:	daf1      	bge.n	1a002d9a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002db6:	9907      	ldr	r1, [sp, #28]
1a002db8:	9806      	ldr	r0, [sp, #24]
1a002dba:	9b05      	ldr	r3, [sp, #20]
1a002dbc:	4798      	blx	r3
1a002dbe:	e7ec      	b.n	1a002d9a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002dc0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002dc2:	6963      	ldr	r3, [r4, #20]
1a002dc4:	b113      	cbz	r3, 1a002dcc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002dc6:	1d20      	adds	r0, r4, #4
1a002dc8:	f7ff f853 	bl	1a001e72 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002dcc:	a803      	add	r0, sp, #12
1a002dce:	f7ff ff61 	bl	1a002c94 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002dd2:	9b04      	ldr	r3, [sp, #16]
1a002dd4:	2b09      	cmp	r3, #9
1a002dd6:	d8e3      	bhi.n	1a002da0 <prvProcessReceivedCommands+0xc>
1a002dd8:	a201      	add	r2, pc, #4	; (adr r2, 1a002de0 <prvProcessReceivedCommands+0x4c>)
1a002dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002dde:	bf00      	nop
1a002de0:	1a002e09 	.word	0x1a002e09
1a002de4:	1a002e09 	.word	0x1a002e09
1a002de8:	1a002e09 	.word	0x1a002e09
1a002dec:	1a002da1 	.word	0x1a002da1
1a002df0:	1a002e51 	.word	0x1a002e51
1a002df4:	1a002e77 	.word	0x1a002e77
1a002df8:	1a002e09 	.word	0x1a002e09
1a002dfc:	1a002e09 	.word	0x1a002e09
1a002e00:	1a002da1 	.word	0x1a002da1
1a002e04:	1a002e51 	.word	0x1a002e51
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a002e08:	9905      	ldr	r1, [sp, #20]
1a002e0a:	69a5      	ldr	r5, [r4, #24]
1a002e0c:	460b      	mov	r3, r1
1a002e0e:	4602      	mov	r2, r0
1a002e10:	4429      	add	r1, r5
1a002e12:	4620      	mov	r0, r4
1a002e14:	f7ff fe02 	bl	1a002a1c <prvInsertTimerInActiveList>
1a002e18:	2800      	cmp	r0, #0
1a002e1a:	d0c1      	beq.n	1a002da0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002e1e:	4620      	mov	r0, r4
1a002e20:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002e22:	69e3      	ldr	r3, [r4, #28]
1a002e24:	2b01      	cmp	r3, #1
1a002e26:	d1bb      	bne.n	1a002da0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002e28:	69a2      	ldr	r2, [r4, #24]
1a002e2a:	2100      	movs	r1, #0
1a002e2c:	9100      	str	r1, [sp, #0]
1a002e2e:	460b      	mov	r3, r1
1a002e30:	9805      	ldr	r0, [sp, #20]
1a002e32:	4402      	add	r2, r0
1a002e34:	4620      	mov	r0, r4
1a002e36:	f7ff febb 	bl	1a002bb0 <xTimerGenericCommand>
							configASSERT( xResult );
1a002e3a:	2800      	cmp	r0, #0
1a002e3c:	d1b0      	bne.n	1a002da0 <prvProcessReceivedCommands+0xc>
1a002e3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e42:	f383 8811 	msr	BASEPRI, r3
1a002e46:	f3bf 8f6f 	isb	sy
1a002e4a:	f3bf 8f4f 	dsb	sy
1a002e4e:	e7fe      	b.n	1a002e4e <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002e50:	9905      	ldr	r1, [sp, #20]
1a002e52:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002e54:	b131      	cbz	r1, 1a002e64 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002e56:	4603      	mov	r3, r0
1a002e58:	4602      	mov	r2, r0
1a002e5a:	4401      	add	r1, r0
1a002e5c:	4620      	mov	r0, r4
1a002e5e:	f7ff fddd 	bl	1a002a1c <prvInsertTimerInActiveList>
					break;
1a002e62:	e79d      	b.n	1a002da0 <prvProcessReceivedCommands+0xc>
1a002e64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e68:	f383 8811 	msr	BASEPRI, r3
1a002e6c:	f3bf 8f6f 	isb	sy
1a002e70:	f3bf 8f4f 	dsb	sy
1a002e74:	e7fe      	b.n	1a002e74 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002e76:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002e7a:	2b00      	cmp	r3, #0
1a002e7c:	d190      	bne.n	1a002da0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002e7e:	4620      	mov	r0, r4
1a002e80:	f7fe fbc6 	bl	1a001610 <vPortFree>
1a002e84:	e78c      	b.n	1a002da0 <prvProcessReceivedCommands+0xc>
}
1a002e86:	b009      	add	sp, #36	; 0x24
1a002e88:	bd30      	pop	{r4, r5, pc}
1a002e8a:	bf00      	nop
1a002e8c:	10002d70 	.word	0x10002d70

1a002e90 <prvTimerTask>:
{
1a002e90:	b500      	push	{lr}
1a002e92:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002e94:	a801      	add	r0, sp, #4
1a002e96:	f7ff fdb1 	bl	1a0029fc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002e9a:	9901      	ldr	r1, [sp, #4]
1a002e9c:	f7ff ff40 	bl	1a002d20 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002ea0:	f7ff ff78 	bl	1a002d94 <prvProcessReceivedCommands>
1a002ea4:	e7f6      	b.n	1a002e94 <prvTimerTask+0x4>

1a002ea6 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
1a002ea6:	b940      	cbnz	r0, 1a002eba <pvTimerGetTimerID+0x14>
1a002ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002eac:	f383 8811 	msr	BASEPRI, r3
1a002eb0:	f3bf 8f6f 	isb	sy
1a002eb4:	f3bf 8f4f 	dsb	sy
1a002eb8:	e7fe      	b.n	1a002eb8 <pvTimerGetTimerID+0x12>
{
1a002eba:	b510      	push	{r4, lr}
1a002ebc:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
1a002ebe:	f000 f871 	bl	1a002fa4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
1a002ec2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
1a002ec4:	f000 f890 	bl	1a002fe8 <vPortExitCritical>

	return pvReturn;
}
1a002ec8:	4620      	mov	r0, r4
1a002eca:	bd10      	pop	{r4, pc}

1a002ecc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002ecc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002ece:	2300      	movs	r3, #0
1a002ed0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002ed2:	4b0d      	ldr	r3, [pc, #52]	; (1a002f08 <prvTaskExitError+0x3c>)
1a002ed4:	681b      	ldr	r3, [r3, #0]
1a002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002eda:	d008      	beq.n	1a002eee <prvTaskExitError+0x22>
1a002edc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ee0:	f383 8811 	msr	BASEPRI, r3
1a002ee4:	f3bf 8f6f 	isb	sy
1a002ee8:	f3bf 8f4f 	dsb	sy
1a002eec:	e7fe      	b.n	1a002eec <prvTaskExitError+0x20>
1a002eee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ef2:	f383 8811 	msr	BASEPRI, r3
1a002ef6:	f3bf 8f6f 	isb	sy
1a002efa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002efe:	9b01      	ldr	r3, [sp, #4]
1a002f00:	2b00      	cmp	r3, #0
1a002f02:	d0fc      	beq.n	1a002efe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002f04:	b002      	add	sp, #8
1a002f06:	4770      	bx	lr
1a002f08:	10000000 	.word	0x10000000

1a002f0c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002f0c:	4808      	ldr	r0, [pc, #32]	; (1a002f30 <prvPortStartFirstTask+0x24>)
1a002f0e:	6800      	ldr	r0, [r0, #0]
1a002f10:	6800      	ldr	r0, [r0, #0]
1a002f12:	f380 8808 	msr	MSP, r0
1a002f16:	f04f 0000 	mov.w	r0, #0
1a002f1a:	f380 8814 	msr	CONTROL, r0
1a002f1e:	b662      	cpsie	i
1a002f20:	b661      	cpsie	f
1a002f22:	f3bf 8f4f 	dsb	sy
1a002f26:	f3bf 8f6f 	isb	sy
1a002f2a:	df00      	svc	0
1a002f2c:	bf00      	nop
1a002f2e:	0000      	.short	0x0000
1a002f30:	e000ed08 	.word	0xe000ed08

1a002f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002f44 <vPortEnableVFP+0x10>
1a002f38:	6801      	ldr	r1, [r0, #0]
1a002f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002f3e:	6001      	str	r1, [r0, #0]
1a002f40:	4770      	bx	lr
1a002f42:	0000      	.short	0x0000
1a002f44:	e000ed88 	.word	0xe000ed88

1a002f48 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002f4c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002f50:	f021 0101 	bic.w	r1, r1, #1
1a002f54:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002f58:	4b05      	ldr	r3, [pc, #20]	; (1a002f70 <pxPortInitialiseStack+0x28>)
1a002f5a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002f5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002f62:	f06f 0302 	mvn.w	r3, #2
1a002f66:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002f6a:	3844      	subs	r0, #68	; 0x44
1a002f6c:	4770      	bx	lr
1a002f6e:	bf00      	nop
1a002f70:	1a002ecd 	.word	0x1a002ecd
1a002f74:	ffffffff 	.word	0xffffffff
1a002f78:	ffffffff 	.word	0xffffffff
1a002f7c:	ffffffff 	.word	0xffffffff

1a002f80 <SVC_Handler>:
	__asm volatile (
1a002f80:	4b07      	ldr	r3, [pc, #28]	; (1a002fa0 <pxCurrentTCBConst2>)
1a002f82:	6819      	ldr	r1, [r3, #0]
1a002f84:	6808      	ldr	r0, [r1, #0]
1a002f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002f8a:	f380 8809 	msr	PSP, r0
1a002f8e:	f3bf 8f6f 	isb	sy
1a002f92:	f04f 0000 	mov.w	r0, #0
1a002f96:	f380 8811 	msr	BASEPRI, r0
1a002f9a:	4770      	bx	lr
1a002f9c:	f3af 8000 	nop.w

1a002fa0 <pxCurrentTCBConst2>:
1a002fa0:	10002b24 	.word	0x10002b24

1a002fa4 <vPortEnterCritical>:
1a002fa4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fa8:	f383 8811 	msr	BASEPRI, r3
1a002fac:	f3bf 8f6f 	isb	sy
1a002fb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002fb4:	4a0a      	ldr	r2, [pc, #40]	; (1a002fe0 <vPortEnterCritical+0x3c>)
1a002fb6:	6813      	ldr	r3, [r2, #0]
1a002fb8:	3301      	adds	r3, #1
1a002fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a002fbc:	2b01      	cmp	r3, #1
1a002fbe:	d000      	beq.n	1a002fc2 <vPortEnterCritical+0x1e>
}
1a002fc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002fc2:	4b08      	ldr	r3, [pc, #32]	; (1a002fe4 <vPortEnterCritical+0x40>)
1a002fc4:	681b      	ldr	r3, [r3, #0]
1a002fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002fca:	d0f9      	beq.n	1a002fc0 <vPortEnterCritical+0x1c>
1a002fcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fd0:	f383 8811 	msr	BASEPRI, r3
1a002fd4:	f3bf 8f6f 	isb	sy
1a002fd8:	f3bf 8f4f 	dsb	sy
1a002fdc:	e7fe      	b.n	1a002fdc <vPortEnterCritical+0x38>
1a002fde:	bf00      	nop
1a002fe0:	10000000 	.word	0x10000000
1a002fe4:	e000ed04 	.word	0xe000ed04

1a002fe8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002fe8:	4b09      	ldr	r3, [pc, #36]	; (1a003010 <vPortExitCritical+0x28>)
1a002fea:	681b      	ldr	r3, [r3, #0]
1a002fec:	b943      	cbnz	r3, 1a003000 <vPortExitCritical+0x18>
1a002fee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ff2:	f383 8811 	msr	BASEPRI, r3
1a002ff6:	f3bf 8f6f 	isb	sy
1a002ffa:	f3bf 8f4f 	dsb	sy
1a002ffe:	e7fe      	b.n	1a002ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a003000:	3b01      	subs	r3, #1
1a003002:	4a03      	ldr	r2, [pc, #12]	; (1a003010 <vPortExitCritical+0x28>)
1a003004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a003006:	b90b      	cbnz	r3, 1a00300c <vPortExitCritical+0x24>
	__asm volatile
1a003008:	f383 8811 	msr	BASEPRI, r3
}
1a00300c:	4770      	bx	lr
1a00300e:	bf00      	nop
1a003010:	10000000 	.word	0x10000000
1a003014:	ffffffff 	.word	0xffffffff
1a003018:	ffffffff 	.word	0xffffffff
1a00301c:	ffffffff 	.word	0xffffffff

1a003020 <PendSV_Handler>:
	__asm volatile
1a003020:	f3ef 8009 	mrs	r0, PSP
1a003024:	f3bf 8f6f 	isb	sy
1a003028:	4b15      	ldr	r3, [pc, #84]	; (1a003080 <pxCurrentTCBConst>)
1a00302a:	681a      	ldr	r2, [r3, #0]
1a00302c:	f01e 0f10 	tst.w	lr, #16
1a003030:	bf08      	it	eq
1a003032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a003036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00303a:	6010      	str	r0, [r2, #0]
1a00303c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a003040:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a003044:	f380 8811 	msr	BASEPRI, r0
1a003048:	f3bf 8f4f 	dsb	sy
1a00304c:	f3bf 8f6f 	isb	sy
1a003050:	f7ff fb3c 	bl	1a0026cc <vTaskSwitchContext>
1a003054:	f04f 0000 	mov.w	r0, #0
1a003058:	f380 8811 	msr	BASEPRI, r0
1a00305c:	bc09      	pop	{r0, r3}
1a00305e:	6819      	ldr	r1, [r3, #0]
1a003060:	6808      	ldr	r0, [r1, #0]
1a003062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003066:	f01e 0f10 	tst.w	lr, #16
1a00306a:	bf08      	it	eq
1a00306c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a003070:	f380 8809 	msr	PSP, r0
1a003074:	f3bf 8f6f 	isb	sy
1a003078:	4770      	bx	lr
1a00307a:	bf00      	nop
1a00307c:	f3af 8000 	nop.w

1a003080 <pxCurrentTCBConst>:
1a003080:	10002b24 	.word	0x10002b24

1a003084 <SysTick_Handler>:
{
1a003084:	b508      	push	{r3, lr}
	__asm volatile
1a003086:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00308a:	f383 8811 	msr	BASEPRI, r3
1a00308e:	f3bf 8f6f 	isb	sy
1a003092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a003096:	f7ff f99b 	bl	1a0023d0 <xTaskIncrementTick>
1a00309a:	b118      	cbz	r0, 1a0030a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00309c:	4b03      	ldr	r3, [pc, #12]	; (1a0030ac <SysTick_Handler+0x28>)
1a00309e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0030a2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0030a4:	2300      	movs	r3, #0
1a0030a6:	f383 8811 	msr	BASEPRI, r3
}
1a0030aa:	bd08      	pop	{r3, pc}
1a0030ac:	e000ed04 	.word	0xe000ed04

1a0030b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0030b0:	4a08      	ldr	r2, [pc, #32]	; (1a0030d4 <vPortSetupTimerInterrupt+0x24>)
1a0030b2:	2300      	movs	r3, #0
1a0030b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0030b6:	4908      	ldr	r1, [pc, #32]	; (1a0030d8 <vPortSetupTimerInterrupt+0x28>)
1a0030b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0030ba:	4b08      	ldr	r3, [pc, #32]	; (1a0030dc <vPortSetupTimerInterrupt+0x2c>)
1a0030bc:	681b      	ldr	r3, [r3, #0]
1a0030be:	4908      	ldr	r1, [pc, #32]	; (1a0030e0 <vPortSetupTimerInterrupt+0x30>)
1a0030c0:	fba1 1303 	umull	r1, r3, r1, r3
1a0030c4:	099b      	lsrs	r3, r3, #6
1a0030c6:	3b01      	subs	r3, #1
1a0030c8:	4906      	ldr	r1, [pc, #24]	; (1a0030e4 <vPortSetupTimerInterrupt+0x34>)
1a0030ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0030cc:	2307      	movs	r3, #7
1a0030ce:	6013      	str	r3, [r2, #0]
}
1a0030d0:	4770      	bx	lr
1a0030d2:	bf00      	nop
1a0030d4:	e000e010 	.word	0xe000e010
1a0030d8:	e000e018 	.word	0xe000e018
1a0030dc:	10002e18 	.word	0x10002e18
1a0030e0:	10624dd3 	.word	0x10624dd3
1a0030e4:	e000e014 	.word	0xe000e014

1a0030e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0030e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0031d4 <xPortStartScheduler+0xec>)
1a0030ea:	681a      	ldr	r2, [r3, #0]
1a0030ec:	4b3a      	ldr	r3, [pc, #232]	; (1a0031d8 <xPortStartScheduler+0xf0>)
1a0030ee:	429a      	cmp	r2, r3
1a0030f0:	d00d      	beq.n	1a00310e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0030f2:	4b38      	ldr	r3, [pc, #224]	; (1a0031d4 <xPortStartScheduler+0xec>)
1a0030f4:	681a      	ldr	r2, [r3, #0]
1a0030f6:	4b39      	ldr	r3, [pc, #228]	; (1a0031dc <xPortStartScheduler+0xf4>)
1a0030f8:	429a      	cmp	r2, r3
1a0030fa:	d111      	bne.n	1a003120 <xPortStartScheduler+0x38>
	__asm volatile
1a0030fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003100:	f383 8811 	msr	BASEPRI, r3
1a003104:	f3bf 8f6f 	isb	sy
1a003108:	f3bf 8f4f 	dsb	sy
1a00310c:	e7fe      	b.n	1a00310c <xPortStartScheduler+0x24>
1a00310e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003112:	f383 8811 	msr	BASEPRI, r3
1a003116:	f3bf 8f6f 	isb	sy
1a00311a:	f3bf 8f4f 	dsb	sy
1a00311e:	e7fe      	b.n	1a00311e <xPortStartScheduler+0x36>
{
1a003120:	b510      	push	{r4, lr}
1a003122:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a003124:	4b2e      	ldr	r3, [pc, #184]	; (1a0031e0 <xPortStartScheduler+0xf8>)
1a003126:	781a      	ldrb	r2, [r3, #0]
1a003128:	b2d2      	uxtb	r2, r2
1a00312a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00312c:	22ff      	movs	r2, #255	; 0xff
1a00312e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a003130:	781b      	ldrb	r3, [r3, #0]
1a003132:	b2db      	uxtb	r3, r3
1a003134:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a003138:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00313c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a003140:	4a28      	ldr	r2, [pc, #160]	; (1a0031e4 <xPortStartScheduler+0xfc>)
1a003142:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a003144:	4b28      	ldr	r3, [pc, #160]	; (1a0031e8 <xPortStartScheduler+0x100>)
1a003146:	2207      	movs	r2, #7
1a003148:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00314a:	e009      	b.n	1a003160 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00314c:	4a26      	ldr	r2, [pc, #152]	; (1a0031e8 <xPortStartScheduler+0x100>)
1a00314e:	6813      	ldr	r3, [r2, #0]
1a003150:	3b01      	subs	r3, #1
1a003152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a003154:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003158:	005b      	lsls	r3, r3, #1
1a00315a:	b2db      	uxtb	r3, r3
1a00315c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a003160:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a003164:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003168:	d1f0      	bne.n	1a00314c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00316a:	4b1f      	ldr	r3, [pc, #124]	; (1a0031e8 <xPortStartScheduler+0x100>)
1a00316c:	681b      	ldr	r3, [r3, #0]
1a00316e:	2b04      	cmp	r3, #4
1a003170:	d008      	beq.n	1a003184 <xPortStartScheduler+0x9c>
1a003172:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003176:	f383 8811 	msr	BASEPRI, r3
1a00317a:	f3bf 8f6f 	isb	sy
1a00317e:	f3bf 8f4f 	dsb	sy
1a003182:	e7fe      	b.n	1a003182 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a003184:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a003186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00318a:	4a17      	ldr	r2, [pc, #92]	; (1a0031e8 <xPortStartScheduler+0x100>)
1a00318c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00318e:	9b01      	ldr	r3, [sp, #4]
1a003190:	b2db      	uxtb	r3, r3
1a003192:	4a13      	ldr	r2, [pc, #76]	; (1a0031e0 <xPortStartScheduler+0xf8>)
1a003194:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a003196:	4b15      	ldr	r3, [pc, #84]	; (1a0031ec <xPortStartScheduler+0x104>)
1a003198:	681a      	ldr	r2, [r3, #0]
1a00319a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00319e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0031a0:	681a      	ldr	r2, [r3, #0]
1a0031a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0031a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0031a8:	f7ff ff82 	bl	1a0030b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0031ac:	2400      	movs	r4, #0
1a0031ae:	4b10      	ldr	r3, [pc, #64]	; (1a0031f0 <xPortStartScheduler+0x108>)
1a0031b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0031b2:	f7ff febf 	bl	1a002f34 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0031b6:	4a0f      	ldr	r2, [pc, #60]	; (1a0031f4 <xPortStartScheduler+0x10c>)
1a0031b8:	6813      	ldr	r3, [r2, #0]
1a0031ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0031be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0031c0:	f7ff fea4 	bl	1a002f0c <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0031c4:	f7ff fa82 	bl	1a0026cc <vTaskSwitchContext>
	prvTaskExitError();
1a0031c8:	f7ff fe80 	bl	1a002ecc <prvTaskExitError>
}
1a0031cc:	4620      	mov	r0, r4
1a0031ce:	b002      	add	sp, #8
1a0031d0:	bd10      	pop	{r4, pc}
1a0031d2:	bf00      	nop
1a0031d4:	e000ed00 	.word	0xe000ed00
1a0031d8:	410fc271 	.word	0x410fc271
1a0031dc:	410fc270 	.word	0x410fc270
1a0031e0:	e000e400 	.word	0xe000e400
1a0031e4:	10002d78 	.word	0x10002d78
1a0031e8:	10002d7c 	.word	0x10002d7c
1a0031ec:	e000ed20 	.word	0xe000ed20
1a0031f0:	10000000 	.word	0x10000000
1a0031f4:	e000ef34 	.word	0xe000ef34

1a0031f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0031f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0031fc:	2b0f      	cmp	r3, #15
1a0031fe:	d90f      	bls.n	1a003220 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a003200:	4a10      	ldr	r2, [pc, #64]	; (1a003244 <vPortValidateInterruptPriority+0x4c>)
1a003202:	5c9b      	ldrb	r3, [r3, r2]
1a003204:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a003206:	4a10      	ldr	r2, [pc, #64]	; (1a003248 <vPortValidateInterruptPriority+0x50>)
1a003208:	7812      	ldrb	r2, [r2, #0]
1a00320a:	429a      	cmp	r2, r3
1a00320c:	d908      	bls.n	1a003220 <vPortValidateInterruptPriority+0x28>
1a00320e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003212:	f383 8811 	msr	BASEPRI, r3
1a003216:	f3bf 8f6f 	isb	sy
1a00321a:	f3bf 8f4f 	dsb	sy
1a00321e:	e7fe      	b.n	1a00321e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a003220:	4b0a      	ldr	r3, [pc, #40]	; (1a00324c <vPortValidateInterruptPriority+0x54>)
1a003222:	681b      	ldr	r3, [r3, #0]
1a003224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a003228:	4a09      	ldr	r2, [pc, #36]	; (1a003250 <vPortValidateInterruptPriority+0x58>)
1a00322a:	6812      	ldr	r2, [r2, #0]
1a00322c:	4293      	cmp	r3, r2
1a00322e:	d908      	bls.n	1a003242 <vPortValidateInterruptPriority+0x4a>
1a003230:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003234:	f383 8811 	msr	BASEPRI, r3
1a003238:	f3bf 8f6f 	isb	sy
1a00323c:	f3bf 8f4f 	dsb	sy
1a003240:	e7fe      	b.n	1a003240 <vPortValidateInterruptPriority+0x48>
	}
1a003242:	4770      	bx	lr
1a003244:	e000e3f0 	.word	0xe000e3f0
1a003248:	10002d78 	.word	0x10002d78
1a00324c:	e000ed0c 	.word	0xe000ed0c
1a003250:	10002d7c 	.word	0x10002d7c

1a003254 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a003254:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003256:	4b05      	ldr	r3, [pc, #20]	; (1a00326c <DAC_IRQHandler+0x18>)
1a003258:	2201      	movs	r2, #1
1a00325a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00325e:	4b04      	ldr	r3, [pc, #16]	; (1a003270 <DAC_IRQHandler+0x1c>)
1a003260:	681b      	ldr	r3, [r3, #0]
1a003262:	b113      	cbz	r3, 1a00326a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a003264:	4b02      	ldr	r3, [pc, #8]	; (1a003270 <DAC_IRQHandler+0x1c>)
1a003266:	681b      	ldr	r3, [r3, #0]
1a003268:	4798      	blx	r3
   }
}
1a00326a:	bd08      	pop	{r3, pc}
1a00326c:	e000e100 	.word	0xe000e100
1a003270:	10002d80 	.word	0x10002d80

1a003274 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a003274:	2200      	movs	r2, #0
1a003276:	2a05      	cmp	r2, #5
1a003278:	d819      	bhi.n	1a0032ae <Board_LED_Init+0x3a>
{
1a00327a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00327c:	490c      	ldr	r1, [pc, #48]	; (1a0032b0 <Board_LED_Init+0x3c>)
1a00327e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a003282:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a003286:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a003288:	4b0a      	ldr	r3, [pc, #40]	; (1a0032b4 <Board_LED_Init+0x40>)
1a00328a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00328e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a003292:	2001      	movs	r0, #1
1a003294:	40a0      	lsls	r0, r4
1a003296:	4301      	orrs	r1, r0
1a003298:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00329c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0032a0:	2100      	movs	r1, #0
1a0032a2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0032a4:	3201      	adds	r2, #1
1a0032a6:	2a05      	cmp	r2, #5
1a0032a8:	d9e8      	bls.n	1a00327c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0032aa:	bc70      	pop	{r4, r5, r6}
1a0032ac:	4770      	bx	lr
1a0032ae:	4770      	bx	lr
1a0032b0:	1a007324 	.word	0x1a007324
1a0032b4:	400f4000 	.word	0x400f4000

1a0032b8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0032b8:	2300      	movs	r3, #0
1a0032ba:	2b03      	cmp	r3, #3
1a0032bc:	d816      	bhi.n	1a0032ec <Board_TEC_Init+0x34>
{
1a0032be:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0032c0:	490b      	ldr	r1, [pc, #44]	; (1a0032f0 <Board_TEC_Init+0x38>)
1a0032c2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0032c6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0032ca:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0032cc:	4c09      	ldr	r4, [pc, #36]	; (1a0032f4 <Board_TEC_Init+0x3c>)
1a0032ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0032d2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0032d6:	2001      	movs	r0, #1
1a0032d8:	40a8      	lsls	r0, r5
1a0032da:	ea21 0100 	bic.w	r1, r1, r0
1a0032de:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0032e2:	3301      	adds	r3, #1
1a0032e4:	2b03      	cmp	r3, #3
1a0032e6:	d9eb      	bls.n	1a0032c0 <Board_TEC_Init+0x8>
   }
}
1a0032e8:	bc30      	pop	{r4, r5}
1a0032ea:	4770      	bx	lr
1a0032ec:	4770      	bx	lr
1a0032ee:	bf00      	nop
1a0032f0:	1a00731c 	.word	0x1a00731c
1a0032f4:	400f4000 	.word	0x400f4000

1a0032f8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0032f8:	2300      	movs	r3, #0
1a0032fa:	2b08      	cmp	r3, #8
1a0032fc:	d816      	bhi.n	1a00332c <Board_GPIO_Init+0x34>
{
1a0032fe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a003300:	490b      	ldr	r1, [pc, #44]	; (1a003330 <Board_GPIO_Init+0x38>)
1a003302:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a003306:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00330a:	784d      	ldrb	r5, [r1, #1]
1a00330c:	4c09      	ldr	r4, [pc, #36]	; (1a003334 <Board_GPIO_Init+0x3c>)
1a00330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a003312:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a003316:	2001      	movs	r0, #1
1a003318:	40a8      	lsls	r0, r5
1a00331a:	ea21 0100 	bic.w	r1, r1, r0
1a00331e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a003322:	3301      	adds	r3, #1
1a003324:	2b08      	cmp	r3, #8
1a003326:	d9eb      	bls.n	1a003300 <Board_GPIO_Init+0x8>
   }
}
1a003328:	bc30      	pop	{r4, r5}
1a00332a:	4770      	bx	lr
1a00332c:	4770      	bx	lr
1a00332e:	bf00      	nop
1a003330:	1a007330 	.word	0x1a007330
1a003334:	400f4000 	.word	0x400f4000

1a003338 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a003338:	b510      	push	{r4, lr}
1a00333a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00333c:	4c08      	ldr	r4, [pc, #32]	; (1a003360 <Board_ADC_Init+0x28>)
1a00333e:	4669      	mov	r1, sp
1a003340:	4620      	mov	r0, r4
1a003342:	f000 fa1d 	bl	1a003780 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a003346:	4a07      	ldr	r2, [pc, #28]	; (1a003364 <Board_ADC_Init+0x2c>)
1a003348:	4669      	mov	r1, sp
1a00334a:	4620      	mov	r0, r4
1a00334c:	f000 fa38 	bl	1a0037c0 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a003350:	2200      	movs	r2, #0
1a003352:	4669      	mov	r1, sp
1a003354:	4620      	mov	r0, r4
1a003356:	f000 fa4c 	bl	1a0037f2 <Chip_ADC_SetResolution>
}
1a00335a:	b002      	add	sp, #8
1a00335c:	bd10      	pop	{r4, pc}
1a00335e:	bf00      	nop
1a003360:	400e3000 	.word	0x400e3000
1a003364:	00061a80 	.word	0x00061a80

1a003368 <Board_SPI_Init>:
{
1a003368:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00336a:	4c0b      	ldr	r4, [pc, #44]	; (1a003398 <Board_SPI_Init+0x30>)
1a00336c:	4620      	mov	r0, r4
1a00336e:	f000 fe03 	bl	1a003f78 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003372:	6863      	ldr	r3, [r4, #4]
1a003374:	f023 0304 	bic.w	r3, r3, #4
1a003378:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00337a:	6823      	ldr	r3, [r4, #0]
1a00337c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003380:	f043 0307 	orr.w	r3, r3, #7
1a003384:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a003386:	4905      	ldr	r1, [pc, #20]	; (1a00339c <Board_SPI_Init+0x34>)
1a003388:	4620      	mov	r0, r4
1a00338a:	f000 fdd6 	bl	1a003f3a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00338e:	6863      	ldr	r3, [r4, #4]
1a003390:	f043 0302 	orr.w	r3, r3, #2
1a003394:	6063      	str	r3, [r4, #4]
}
1a003396:	bd10      	pop	{r4, pc}
1a003398:	400c5000 	.word	0x400c5000
1a00339c:	000186a0 	.word	0x000186a0

1a0033a0 <Board_I2C_Init>:
{
1a0033a0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0033a2:	2000      	movs	r0, #0
1a0033a4:	f000 f8c6 	bl	1a003534 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0033a8:	4b04      	ldr	r3, [pc, #16]	; (1a0033bc <Board_I2C_Init+0x1c>)
1a0033aa:	f640 0208 	movw	r2, #2056	; 0x808
1a0033ae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0033b2:	4903      	ldr	r1, [pc, #12]	; (1a0033c0 <Board_I2C_Init+0x20>)
1a0033b4:	2000      	movs	r0, #0
1a0033b6:	f000 f8cf 	bl	1a003558 <Chip_I2C_SetClockRate>
}
1a0033ba:	bd08      	pop	{r3, pc}
1a0033bc:	40086000 	.word	0x40086000
1a0033c0:	000f4240 	.word	0x000f4240

1a0033c4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0033c4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0033c6:	4c07      	ldr	r4, [pc, #28]	; (1a0033e4 <Board_Debug_Init+0x20>)
1a0033c8:	4620      	mov	r0, r4
1a0033ca:	f000 f8f7 	bl	1a0035bc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0033ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0033d2:	4620      	mov	r0, r4
1a0033d4:	f000 f93c 	bl	1a003650 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0033d8:	2303      	movs	r3, #3
1a0033da:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0033dc:	2301      	movs	r3, #1
1a0033de:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0033e0:	bd10      	pop	{r4, pc}
1a0033e2:	bf00      	nop
1a0033e4:	400c1000 	.word	0x400c1000

1a0033e8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0033e8:	4b03      	ldr	r3, [pc, #12]	; (1a0033f8 <Board_UARTPutChar+0x10>)
1a0033ea:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0033ec:	f013 0f20 	tst.w	r3, #32
1a0033f0:	d0fa      	beq.n	1a0033e8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0033f2:	4b01      	ldr	r3, [pc, #4]	; (1a0033f8 <Board_UARTPutChar+0x10>)
1a0033f4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0033f6:	4770      	bx	lr
1a0033f8:	400c1000 	.word	0x400c1000

1a0033fc <Board_UARTGetChar>:
	return pUART->LSR;
1a0033fc:	4b05      	ldr	r3, [pc, #20]	; (1a003414 <Board_UARTGetChar+0x18>)
1a0033fe:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a003400:	f013 0f01 	tst.w	r3, #1
1a003404:	d003      	beq.n	1a00340e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003406:	4b03      	ldr	r3, [pc, #12]	; (1a003414 <Board_UARTGetChar+0x18>)
1a003408:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00340a:	b2c0      	uxtb	r0, r0
1a00340c:	4770      	bx	lr
   }
   return EOF;
1a00340e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a003412:	4770      	bx	lr
1a003414:	400c1000 	.word	0x400c1000

1a003418 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a003418:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00341a:	f7ff ffd3 	bl	1a0033c4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00341e:	4809      	ldr	r0, [pc, #36]	; (1a003444 <Board_Init+0x2c>)
1a003420:	f000 fd6a 	bl	1a003ef8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a003424:	f7ff ff68 	bl	1a0032f8 <Board_GPIO_Init>
   Board_ADC_Init();
1a003428:	f7ff ff86 	bl	1a003338 <Board_ADC_Init>
   Board_SPI_Init();
1a00342c:	f7ff ff9c 	bl	1a003368 <Board_SPI_Init>
   Board_I2C_Init();
1a003430:	f7ff ffb6 	bl	1a0033a0 <Board_I2C_Init>

   Board_LED_Init();
1a003434:	f7ff ff1e 	bl	1a003274 <Board_LED_Init>
   Board_TEC_Init();
1a003438:	f7ff ff3e 	bl	1a0032b8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00343c:	f000 fca8 	bl	1a003d90 <SystemCoreClockUpdate>
}
1a003440:	bd08      	pop	{r3, pc}
1a003442:	bf00      	nop
1a003444:	400f4000 	.word	0x400f4000

1a003448 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a003448:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00344a:	b2c0      	uxtb	r0, r0
1a00344c:	f7ff ffcc 	bl	1a0033e8 <Board_UARTPutChar>
}
1a003450:	bd08      	pop	{r3, pc}

1a003452 <__stdio_getchar>:

int __stdio_getchar()
{
1a003452:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a003454:	f7ff ffd2 	bl	1a0033fc <Board_UARTGetChar>
}
1a003458:	bd08      	pop	{r3, pc}

1a00345a <__stdio_init>:

void __stdio_init()
{
1a00345a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00345c:	f7ff ffb2 	bl	1a0033c4 <Board_Debug_Init>
1a003460:	bd08      	pop	{r3, pc}
1a003462:	Address 0x000000001a003462 is out of bounds.


1a003464 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003464:	2300      	movs	r3, #0
1a003466:	2b1c      	cmp	r3, #28
1a003468:	d812      	bhi.n	1a003490 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00346a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00346c:	4a09      	ldr	r2, [pc, #36]	; (1a003494 <Board_SetupMuxing+0x30>)
1a00346e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a003472:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a003476:	784a      	ldrb	r2, [r1, #1]
1a003478:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00347a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00347e:	4906      	ldr	r1, [pc, #24]	; (1a003498 <Board_SetupMuxing+0x34>)
1a003480:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a003484:	3301      	adds	r3, #1
1a003486:	2b1c      	cmp	r3, #28
1a003488:	d9f0      	bls.n	1a00346c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00348a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00348e:	4770      	bx	lr
1a003490:	4770      	bx	lr
1a003492:	bf00      	nop
1a003494:	1a00734c 	.word	0x1a00734c
1a003498:	40086000 	.word	0x40086000

1a00349c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00349c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00349e:	4a17      	ldr	r2, [pc, #92]	; (1a0034fc <Board_SetupClocking+0x60>)
1a0034a0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0034a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0034a8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0034ac:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0034b0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0034b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0034b8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0034bc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0034c0:	2201      	movs	r2, #1
1a0034c2:	490f      	ldr	r1, [pc, #60]	; (1a003500 <Board_SetupClocking+0x64>)
1a0034c4:	2006      	movs	r0, #6
1a0034c6:	f000 fc6d 	bl	1a003da4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0034ca:	2400      	movs	r4, #0
1a0034cc:	b14c      	cbz	r4, 1a0034e2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0034ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0034fc <Board_SetupClocking+0x60>)
1a0034d0:	685a      	ldr	r2, [r3, #4]
1a0034d2:	f022 020c 	bic.w	r2, r2, #12
1a0034d6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0034d8:	685a      	ldr	r2, [r3, #4]
1a0034da:	f042 0203 	orr.w	r2, r2, #3
1a0034de:	605a      	str	r2, [r3, #4]
}
1a0034e0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0034e2:	4808      	ldr	r0, [pc, #32]	; (1a003504 <Board_SetupClocking+0x68>)
1a0034e4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0034e8:	2301      	movs	r3, #1
1a0034ea:	788a      	ldrb	r2, [r1, #2]
1a0034ec:	7849      	ldrb	r1, [r1, #1]
1a0034ee:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0034f2:	f000 fba9 	bl	1a003c48 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0034f6:	3401      	adds	r4, #1
1a0034f8:	e7e8      	b.n	1a0034cc <Board_SetupClocking+0x30>
1a0034fa:	bf00      	nop
1a0034fc:	40043000 	.word	0x40043000
1a003500:	0c28cb00 	.word	0x0c28cb00
1a003504:	1a007348 	.word	0x1a007348

1a003508 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a003508:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00350a:	f7ff ffab 	bl	1a003464 <Board_SetupMuxing>
    Board_SetupClocking();
1a00350e:	f7ff ffc5 	bl	1a00349c <Board_SetupClocking>
}
1a003512:	bd08      	pop	{r3, pc}

1a003514 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003514:	2901      	cmp	r1, #1
1a003516:	d000      	beq.n	1a00351a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003518:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a00351a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00351e:	0082      	lsls	r2, r0, #2
1a003520:	4b03      	ldr	r3, [pc, #12]	; (1a003530 <Chip_I2C_EventHandler+0x1c>)
1a003522:	4413      	add	r3, r2
1a003524:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003526:	7d13      	ldrb	r3, [r2, #20]
1a003528:	b2db      	uxtb	r3, r3
1a00352a:	2b04      	cmp	r3, #4
1a00352c:	d0fb      	beq.n	1a003526 <Chip_I2C_EventHandler+0x12>
1a00352e:	e7f3      	b.n	1a003518 <Chip_I2C_EventHandler+0x4>
1a003530:	10000004 	.word	0x10000004

1a003534 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003534:	b570      	push	{r4, r5, r6, lr}
1a003536:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003538:	4e06      	ldr	r6, [pc, #24]	; (1a003554 <Chip_I2C_Init+0x20>)
1a00353a:	00c4      	lsls	r4, r0, #3
1a00353c:	1a22      	subs	r2, r4, r0
1a00353e:	0093      	lsls	r3, r2, #2
1a003540:	4433      	add	r3, r6
1a003542:	8898      	ldrh	r0, [r3, #4]
1a003544:	f000 fbe4 	bl	1a003d10 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003548:	1b64      	subs	r4, r4, r5
1a00354a:	00a3      	lsls	r3, r4, #2
1a00354c:	58f3      	ldr	r3, [r6, r3]
1a00354e:	226c      	movs	r2, #108	; 0x6c
1a003550:	619a      	str	r2, [r3, #24]
}
1a003552:	bd70      	pop	{r4, r5, r6, pc}
1a003554:	10000004 	.word	0x10000004

1a003558 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00355c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00355e:	4e0b      	ldr	r6, [pc, #44]	; (1a00358c <Chip_I2C_SetClockRate+0x34>)
1a003560:	00c5      	lsls	r5, r0, #3
1a003562:	1a2b      	subs	r3, r5, r0
1a003564:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003568:	eb06 0308 	add.w	r3, r6, r8
1a00356c:	8898      	ldrh	r0, [r3, #4]
1a00356e:	f000 fbe9 	bl	1a003d44 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003572:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003576:	f856 3008 	ldr.w	r3, [r6, r8]
1a00357a:	0842      	lsrs	r2, r0, #1
1a00357c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00357e:	f856 3008 	ldr.w	r3, [r6, r8]
1a003582:	691a      	ldr	r2, [r3, #16]
1a003584:	1a80      	subs	r0, r0, r2
1a003586:	6158      	str	r0, [r3, #20]
}
1a003588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00358c:	10000004 	.word	0x10000004

1a003590 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a003590:	4b09      	ldr	r3, [pc, #36]	; (1a0035b8 <Chip_UART_GetIndex+0x28>)
1a003592:	4298      	cmp	r0, r3
1a003594:	d009      	beq.n	1a0035aa <Chip_UART_GetIndex+0x1a>
1a003596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00359a:	4298      	cmp	r0, r3
1a00359c:	d007      	beq.n	1a0035ae <Chip_UART_GetIndex+0x1e>
1a00359e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0035a2:	4298      	cmp	r0, r3
1a0035a4:	d005      	beq.n	1a0035b2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0035a6:	2000      	movs	r0, #0
1a0035a8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0035aa:	2002      	movs	r0, #2
1a0035ac:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0035ae:	2003      	movs	r0, #3
1a0035b0:	4770      	bx	lr
			return 1;
1a0035b2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0035b4:	4770      	bx	lr
1a0035b6:	bf00      	nop
1a0035b8:	400c1000 	.word	0x400c1000

1a0035bc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0035bc:	b530      	push	{r4, r5, lr}
1a0035be:	b083      	sub	sp, #12
1a0035c0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0035c2:	f7ff ffe5 	bl	1a003590 <Chip_UART_GetIndex>
1a0035c6:	2301      	movs	r3, #1
1a0035c8:	461a      	mov	r2, r3
1a0035ca:	4619      	mov	r1, r3
1a0035cc:	4d0e      	ldr	r5, [pc, #56]	; (1a003608 <Chip_UART_Init+0x4c>)
1a0035ce:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0035d2:	f000 fb7f 	bl	1a003cd4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0035d6:	2307      	movs	r3, #7
1a0035d8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0035da:	2300      	movs	r3, #0
1a0035dc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0035de:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0035e0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0035e2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0035e4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0035e6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0035e8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0035ea:	4b08      	ldr	r3, [pc, #32]	; (1a00360c <Chip_UART_Init+0x50>)
1a0035ec:	429c      	cmp	r4, r3
1a0035ee:	d006      	beq.n	1a0035fe <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0035f0:	2303      	movs	r3, #3
1a0035f2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0035f4:	2310      	movs	r3, #16
1a0035f6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0035f8:	9b01      	ldr	r3, [sp, #4]
}
1a0035fa:	b003      	add	sp, #12
1a0035fc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0035fe:	2300      	movs	r3, #0
1a003600:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a003602:	69a3      	ldr	r3, [r4, #24]
1a003604:	9301      	str	r3, [sp, #4]
1a003606:	e7f3      	b.n	1a0035f0 <Chip_UART_Init+0x34>
1a003608:	1a0073c8 	.word	0x1a0073c8
1a00360c:	40082000 	.word	0x40082000

1a003610 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a003610:	b538      	push	{r3, r4, r5, lr}
1a003612:	4605      	mov	r5, r0
1a003614:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003616:	f7ff ffbb 	bl	1a003590 <Chip_UART_GetIndex>
1a00361a:	4b0c      	ldr	r3, [pc, #48]	; (1a00364c <Chip_UART_SetBaud+0x3c>)
1a00361c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003620:	f000 fb90 	bl	1a003d44 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a003624:	0123      	lsls	r3, r4, #4
1a003626:	fbb0 f3f3 	udiv	r3, r0, r3
1a00362a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00362c:	68ea      	ldr	r2, [r5, #12]
1a00362e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a003632:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a003634:	6029      	str	r1, [r5, #0]
1a003636:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00363a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00363c:	68ea      	ldr	r2, [r5, #12]
1a00363e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003642:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a003644:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003648:	0900      	lsrs	r0, r0, #4
1a00364a:	bd38      	pop	{r3, r4, r5, pc}
1a00364c:	1a0073c0 	.word	0x1a0073c0

1a003650 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003654:	b083      	sub	sp, #12
1a003656:	4683      	mov	fp, r0
1a003658:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00365a:	f7ff ff99 	bl	1a003590 <Chip_UART_GetIndex>
1a00365e:	4b35      	ldr	r3, [pc, #212]	; (1a003734 <Chip_UART_SetBaudFDR+0xe4>)
1a003660:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a003664:	f000 fb6e 	bl	1a003d44 <Chip_Clock_GetRate>
1a003668:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00366a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00366e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003670:	2300      	movs	r3, #0
1a003672:	9301      	str	r3, [sp, #4]
1a003674:	46a2      	mov	sl, r4
1a003676:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003678:	e02a      	b.n	1a0036d0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00367a:	4242      	negs	r2, r0
				div ++;
1a00367c:	1c4b      	adds	r3, r1, #1
1a00367e:	e017      	b.n	1a0036b0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003680:	b30a      	cbz	r2, 1a0036c6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a003682:	4617      	mov	r7, r2
			sd = d;
1a003684:	9501      	str	r5, [sp, #4]
			sm = m;
1a003686:	46a2      	mov	sl, r4
			sdiv = div;
1a003688:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00368a:	3501      	adds	r5, #1
1a00368c:	42ac      	cmp	r4, r5
1a00368e:	d91e      	bls.n	1a0036ce <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003690:	0933      	lsrs	r3, r6, #4
1a003692:	0730      	lsls	r0, r6, #28
1a003694:	fba4 0100 	umull	r0, r1, r4, r0
1a003698:	fb04 1103 	mla	r1, r4, r3, r1
1a00369c:	1962      	adds	r2, r4, r5
1a00369e:	fb08 f202 	mul.w	r2, r8, r2
1a0036a2:	2300      	movs	r3, #0
1a0036a4:	f001 fa8e 	bl	1a004bc4 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0036a8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0036aa:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0036ac:	2800      	cmp	r0, #0
1a0036ae:	dbe4      	blt.n	1a00367a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0036b0:	4297      	cmp	r7, r2
1a0036b2:	d3ea      	bcc.n	1a00368a <Chip_UART_SetBaudFDR+0x3a>
1a0036b4:	2b00      	cmp	r3, #0
1a0036b6:	d0e8      	beq.n	1a00368a <Chip_UART_SetBaudFDR+0x3a>
1a0036b8:	0c19      	lsrs	r1, r3, #16
1a0036ba:	d1e6      	bne.n	1a00368a <Chip_UART_SetBaudFDR+0x3a>
1a0036bc:	2b02      	cmp	r3, #2
1a0036be:	d8df      	bhi.n	1a003680 <Chip_UART_SetBaudFDR+0x30>
1a0036c0:	2d00      	cmp	r5, #0
1a0036c2:	d0dd      	beq.n	1a003680 <Chip_UART_SetBaudFDR+0x30>
1a0036c4:	e7e1      	b.n	1a00368a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0036c6:	4617      	mov	r7, r2
			sd = d;
1a0036c8:	9501      	str	r5, [sp, #4]
			sm = m;
1a0036ca:	46a2      	mov	sl, r4
			sdiv = div;
1a0036cc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0036ce:	3401      	adds	r4, #1
1a0036d0:	b11f      	cbz	r7, 1a0036da <Chip_UART_SetBaudFDR+0x8a>
1a0036d2:	2c0f      	cmp	r4, #15
1a0036d4:	d801      	bhi.n	1a0036da <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0036d6:	2500      	movs	r5, #0
1a0036d8:	e7d8      	b.n	1a00368c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0036da:	f1b9 0f00 	cmp.w	r9, #0
1a0036de:	d024      	beq.n	1a00372a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0036e0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0036e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0036e8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0036ec:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0036f0:	f8cb 3000 	str.w	r3, [fp]
1a0036f4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0036f8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0036fc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a003700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003704:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a003708:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00370c:	b2db      	uxtb	r3, r3
1a00370e:	9901      	ldr	r1, [sp, #4]
1a003710:	f001 020f 	and.w	r2, r1, #15
1a003714:	4313      	orrs	r3, r2
1a003716:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00371a:	0933      	lsrs	r3, r6, #4
1a00371c:	fb0a f303 	mul.w	r3, sl, r3
1a003720:	448a      	add	sl, r1
1a003722:	fb09 f90a 	mul.w	r9, r9, sl
1a003726:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00372a:	4648      	mov	r0, r9
1a00372c:	b003      	add	sp, #12
1a00372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003732:	bf00      	nop
1a003734:	1a0073c0 	.word	0x1a0073c0

1a003738 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003738:	4b03      	ldr	r3, [pc, #12]	; (1a003748 <Chip_ADC_GetClockIndex+0x10>)
1a00373a:	4298      	cmp	r0, r3
1a00373c:	d001      	beq.n	1a003742 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00373e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003740:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003742:	2004      	movs	r0, #4
1a003744:	4770      	bx	lr
1a003746:	bf00      	nop
1a003748:	400e4000 	.word	0x400e4000

1a00374c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00374c:	b570      	push	{r4, r5, r6, lr}
1a00374e:	460d      	mov	r5, r1
1a003750:	4614      	mov	r4, r2
1a003752:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003754:	f7ff fff0 	bl	1a003738 <Chip_ADC_GetClockIndex>
1a003758:	f000 faf4 	bl	1a003d44 <Chip_Clock_GetRate>
	if (burstMode) {
1a00375c:	b965      	cbnz	r5, 1a003778 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00375e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003762:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003766:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00376a:	0064      	lsls	r4, r4, #1
1a00376c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003770:	b2c0      	uxtb	r0, r0
1a003772:	3801      	subs	r0, #1
	return div;
}
1a003774:	b2c0      	uxtb	r0, r0
1a003776:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003778:	fb04 f406 	mul.w	r4, r4, r6
1a00377c:	e7f3      	b.n	1a003766 <getClkDiv+0x1a>
1a00377e:	Address 0x000000001a00377e is out of bounds.


1a003780 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003780:	b538      	push	{r3, r4, r5, lr}
1a003782:	4605      	mov	r5, r0
1a003784:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003786:	f7ff ffd7 	bl	1a003738 <Chip_ADC_GetClockIndex>
1a00378a:	2301      	movs	r3, #1
1a00378c:	461a      	mov	r2, r3
1a00378e:	4619      	mov	r1, r3
1a003790:	f000 faa0 	bl	1a003cd4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003794:	2100      	movs	r1, #0
1a003796:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003798:	4a08      	ldr	r2, [pc, #32]	; (1a0037bc <Chip_ADC_Init+0x3c>)
1a00379a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00379c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00379e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0037a0:	230b      	movs	r3, #11
1a0037a2:	4628      	mov	r0, r5
1a0037a4:	f7ff ffd2 	bl	1a00374c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0037a8:	0200      	lsls	r0, r0, #8
1a0037aa:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0037ae:	7920      	ldrb	r0, [r4, #4]
1a0037b0:	0440      	lsls	r0, r0, #17
1a0037b2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0037b6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0037b8:	6028      	str	r0, [r5, #0]
}
1a0037ba:	bd38      	pop	{r3, r4, r5, pc}
1a0037bc:	00061a80 	.word	0x00061a80

1a0037c0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0037c0:	b570      	push	{r4, r5, r6, lr}
1a0037c2:	4605      	mov	r5, r0
1a0037c4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0037c6:	6804      	ldr	r4, [r0, #0]
1a0037c8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0037cc:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0037d0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0037d2:	790b      	ldrb	r3, [r1, #4]
1a0037d4:	f1c3 030b 	rsb	r3, r3, #11
1a0037d8:	b2db      	uxtb	r3, r3
1a0037da:	7949      	ldrb	r1, [r1, #5]
1a0037dc:	f7ff ffb6 	bl	1a00374c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0037e0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0037e4:	7930      	ldrb	r0, [r6, #4]
1a0037e6:	0440      	lsls	r0, r0, #17
1a0037e8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0037ec:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0037ee:	6028      	str	r0, [r5, #0]
}
1a0037f0:	bd70      	pop	{r4, r5, r6, pc}

1a0037f2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0037f2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0037f4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0037f6:	680a      	ldr	r2, [r1, #0]
1a0037f8:	f7ff ffe2 	bl	1a0037c0 <Chip_ADC_SetSampleRate>
}
1a0037fc:	bd08      	pop	{r3, pc}
1a0037fe:	Address 0x000000001a0037fe is out of bounds.


1a003800 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003800:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003802:	680b      	ldr	r3, [r1, #0]
1a003804:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003808:	d002      	beq.n	1a003810 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00380a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00380e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003810:	4607      	mov	r7, r0
1a003812:	2501      	movs	r5, #1
1a003814:	e03b      	b.n	1a00388e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003816:	694b      	ldr	r3, [r1, #20]
1a003818:	fb03 f302 	mul.w	r3, r3, r2
1a00381c:	fbb3 f3f5 	udiv	r3, r3, r5
1a003820:	e014      	b.n	1a00384c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003822:	461c      	mov	r4, r3
1a003824:	e020      	b.n	1a003868 <pll_calc_divs+0x68>
		return -val;
1a003826:	f1cc 0c00 	rsb	ip, ip, #0
1a00382a:	e020      	b.n	1a00386e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a00382c:	3201      	adds	r2, #1
1a00382e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003832:	dc26      	bgt.n	1a003882 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003834:	680c      	ldr	r4, [r1, #0]
1a003836:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00383a:	d0ec      	beq.n	1a003816 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00383c:	1c73      	adds	r3, r6, #1
1a00383e:	fa02 fc03 	lsl.w	ip, r2, r3
1a003842:	694b      	ldr	r3, [r1, #20]
1a003844:	fb03 f30c 	mul.w	r3, r3, ip
1a003848:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00384c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00389c <pll_calc_divs+0x9c>
1a003850:	4563      	cmp	r3, ip
1a003852:	d9eb      	bls.n	1a00382c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003854:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a0038a0 <pll_calc_divs+0xa0>
1a003858:	4563      	cmp	r3, ip
1a00385a:	d812      	bhi.n	1a003882 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00385c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003860:	d1df      	bne.n	1a003822 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003862:	1c74      	adds	r4, r6, #1
1a003864:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a003868:	ebb0 0c04 	subs.w	ip, r0, r4
1a00386c:	d4db      	bmi.n	1a003826 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00386e:	4567      	cmp	r7, ip
1a003870:	d9dc      	bls.n	1a00382c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a003872:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003874:	1c77      	adds	r7, r6, #1
1a003876:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a003878:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00387a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00387c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00387e:	4667      	mov	r7, ip
1a003880:	e7d4      	b.n	1a00382c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003882:	3601      	adds	r6, #1
1a003884:	2e03      	cmp	r6, #3
1a003886:	dc01      	bgt.n	1a00388c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003888:	2201      	movs	r2, #1
1a00388a:	e7d0      	b.n	1a00382e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00388c:	3501      	adds	r5, #1
1a00388e:	2d04      	cmp	r5, #4
1a003890:	dc01      	bgt.n	1a003896 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003892:	2600      	movs	r6, #0
1a003894:	e7f6      	b.n	1a003884 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003896:	bcf0      	pop	{r4, r5, r6, r7}
1a003898:	4770      	bx	lr
1a00389a:	bf00      	nop
1a00389c:	094c5eff 	.word	0x094c5eff
1a0038a0:	1312d000 	.word	0x1312d000

1a0038a4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0038a6:	b099      	sub	sp, #100	; 0x64
1a0038a8:	4605      	mov	r5, r0
1a0038aa:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0038ac:	225c      	movs	r2, #92	; 0x5c
1a0038ae:	2100      	movs	r1, #0
1a0038b0:	a801      	add	r0, sp, #4
1a0038b2:	f001 fcb0 	bl	1a005216 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0038b6:	2380      	movs	r3, #128	; 0x80
1a0038b8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0038ba:	6963      	ldr	r3, [r4, #20]
1a0038bc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0038be:	7923      	ldrb	r3, [r4, #4]
1a0038c0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0038c4:	4669      	mov	r1, sp
1a0038c6:	4628      	mov	r0, r5
1a0038c8:	f7ff ff9a 	bl	1a003800 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0038cc:	9b06      	ldr	r3, [sp, #24]
1a0038ce:	42ab      	cmp	r3, r5
1a0038d0:	d027      	beq.n	1a003922 <pll_get_frac+0x7e>
	if (val < 0)
1a0038d2:	1aeb      	subs	r3, r5, r3
1a0038d4:	d42e      	bmi.n	1a003934 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0038d6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0038d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0038da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0038de:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0038e0:	6963      	ldr	r3, [r4, #20]
1a0038e2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0038e4:	7923      	ldrb	r3, [r4, #4]
1a0038e6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0038ea:	a910      	add	r1, sp, #64	; 0x40
1a0038ec:	4628      	mov	r0, r5
1a0038ee:	f7ff ff87 	bl	1a003800 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0038f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0038f4:	42ab      	cmp	r3, r5
1a0038f6:	d01f      	beq.n	1a003938 <pll_get_frac+0x94>
	if (val < 0)
1a0038f8:	1aeb      	subs	r3, r5, r3
1a0038fa:	d425      	bmi.n	1a003948 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0038fc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0038fe:	4b2b      	ldr	r3, [pc, #172]	; (1a0039ac <pll_get_frac+0x108>)
1a003900:	429d      	cmp	r5, r3
1a003902:	d923      	bls.n	1a00394c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003906:	1aed      	subs	r5, r5, r3
1a003908:	d433      	bmi.n	1a003972 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00390a:	42ae      	cmp	r6, r5
1a00390c:	dc3b      	bgt.n	1a003986 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00390e:	42be      	cmp	r6, r7
1a003910:	dc31      	bgt.n	1a003976 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003912:	466d      	mov	r5, sp
1a003914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003918:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00391c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003920:	e006      	b.n	1a003930 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003922:	466d      	mov	r5, sp
1a003924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003928:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00392c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003930:	b019      	add	sp, #100	; 0x64
1a003932:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003934:	425b      	negs	r3, r3
1a003936:	e7ce      	b.n	1a0038d6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a003938:	ad10      	add	r5, sp, #64	; 0x40
1a00393a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00393c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00393e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a003946:	e7f3      	b.n	1a003930 <pll_get_frac+0x8c>
		return -val;
1a003948:	425b      	negs	r3, r3
1a00394a:	e7d7      	b.n	1a0038fc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00394c:	2340      	movs	r3, #64	; 0x40
1a00394e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003950:	6963      	ldr	r3, [r4, #20]
1a003952:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003954:	a908      	add	r1, sp, #32
1a003956:	4628      	mov	r0, r5
1a003958:	f7ff ff52 	bl	1a003800 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00395c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00395e:	42ab      	cmp	r3, r5
1a003960:	d1d0      	bne.n	1a003904 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003962:	ad08      	add	r5, sp, #32
1a003964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003968:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00396c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003970:	e7de      	b.n	1a003930 <pll_get_frac+0x8c>
		return -val;
1a003972:	426d      	negs	r5, r5
1a003974:	e7c9      	b.n	1a00390a <pll_get_frac+0x66>
			*ppll = pll[2];
1a003976:	ad10      	add	r5, sp, #64	; 0x40
1a003978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00397a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00397c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003984:	e7d4      	b.n	1a003930 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003986:	42af      	cmp	r7, r5
1a003988:	db07      	blt.n	1a00399a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00398a:	ad08      	add	r5, sp, #32
1a00398c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00398e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003990:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003998:	e7ca      	b.n	1a003930 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00399a:	ad10      	add	r5, sp, #64	; 0x40
1a00399c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00399e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0039a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0039a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0039a8:	e7c2      	b.n	1a003930 <pll_get_frac+0x8c>
1a0039aa:	bf00      	nop
1a0039ac:	068e7780 	.word	0x068e7780

1a0039b0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0039b0:	b430      	push	{r4, r5}
1a0039b2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0039b4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0039b6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0039b8:	e000      	b.n	1a0039bc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0039ba:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0039bc:	281c      	cmp	r0, #28
1a0039be:	d118      	bne.n	1a0039f2 <Chip_Clock_FindBaseClock+0x42>
1a0039c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0039c4:	0051      	lsls	r1, r2, #1
1a0039c6:	4a0c      	ldr	r2, [pc, #48]	; (1a0039f8 <Chip_Clock_FindBaseClock+0x48>)
1a0039c8:	440a      	add	r2, r1
1a0039ca:	7914      	ldrb	r4, [r2, #4]
1a0039cc:	4284      	cmp	r4, r0
1a0039ce:	d010      	beq.n	1a0039f2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0039d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0039d4:	004a      	lsls	r2, r1, #1
1a0039d6:	4908      	ldr	r1, [pc, #32]	; (1a0039f8 <Chip_Clock_FindBaseClock+0x48>)
1a0039d8:	5a8a      	ldrh	r2, [r1, r2]
1a0039da:	42aa      	cmp	r2, r5
1a0039dc:	d8ed      	bhi.n	1a0039ba <Chip_Clock_FindBaseClock+0xa>
1a0039de:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0039e2:	0051      	lsls	r1, r2, #1
1a0039e4:	4a04      	ldr	r2, [pc, #16]	; (1a0039f8 <Chip_Clock_FindBaseClock+0x48>)
1a0039e6:	440a      	add	r2, r1
1a0039e8:	8852      	ldrh	r2, [r2, #2]
1a0039ea:	42aa      	cmp	r2, r5
1a0039ec:	d3e5      	bcc.n	1a0039ba <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0039ee:	4620      	mov	r0, r4
1a0039f0:	e7e4      	b.n	1a0039bc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0039f2:	bc30      	pop	{r4, r5}
1a0039f4:	4770      	bx	lr
1a0039f6:	bf00      	nop
1a0039f8:	1a0073dc 	.word	0x1a0073dc

1a0039fc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0039fc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0039fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003a02:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003a04:	4a0d      	ldr	r2, [pc, #52]	; (1a003a3c <Chip_Clock_EnableCrystal+0x40>)
1a003a06:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003a08:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003a0c:	6992      	ldr	r2, [r2, #24]
1a003a0e:	428a      	cmp	r2, r1
1a003a10:	d001      	beq.n	1a003a16 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003a12:	4a0a      	ldr	r2, [pc, #40]	; (1a003a3c <Chip_Clock_EnableCrystal+0x40>)
1a003a14:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003a16:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a003a1a:	4a09      	ldr	r2, [pc, #36]	; (1a003a40 <Chip_Clock_EnableCrystal+0x44>)
1a003a1c:	6811      	ldr	r1, [r2, #0]
1a003a1e:	4a09      	ldr	r2, [pc, #36]	; (1a003a44 <Chip_Clock_EnableCrystal+0x48>)
1a003a20:	4291      	cmp	r1, r2
1a003a22:	d901      	bls.n	1a003a28 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003a24:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003a28:	4a04      	ldr	r2, [pc, #16]	; (1a003a3c <Chip_Clock_EnableCrystal+0x40>)
1a003a2a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003a2c:	9b01      	ldr	r3, [sp, #4]
1a003a2e:	1e5a      	subs	r2, r3, #1
1a003a30:	9201      	str	r2, [sp, #4]
1a003a32:	2b00      	cmp	r3, #0
1a003a34:	d1fa      	bne.n	1a003a2c <Chip_Clock_EnableCrystal+0x30>
}
1a003a36:	b002      	add	sp, #8
1a003a38:	4770      	bx	lr
1a003a3a:	bf00      	nop
1a003a3c:	40050000 	.word	0x40050000
1a003a40:	1a007344 	.word	0x1a007344
1a003a44:	01312cff 	.word	0x01312cff

1a003a48 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a003a48:	3012      	adds	r0, #18
1a003a4a:	4b05      	ldr	r3, [pc, #20]	; (1a003a60 <Chip_Clock_GetDividerSource+0x18>)
1a003a4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003a50:	f010 0f01 	tst.w	r0, #1
1a003a54:	d102      	bne.n	1a003a5c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003a56:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003a5a:	4770      	bx	lr
		return CLKINPUT_PD;
1a003a5c:	2011      	movs	r0, #17
}
1a003a5e:	4770      	bx	lr
1a003a60:	40050000 	.word	0x40050000

1a003a64 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003a64:	f100 0212 	add.w	r2, r0, #18
1a003a68:	4b03      	ldr	r3, [pc, #12]	; (1a003a78 <Chip_Clock_GetDividerDivisor+0x14>)
1a003a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003a6e:	4b03      	ldr	r3, [pc, #12]	; (1a003a7c <Chip_Clock_GetDividerDivisor+0x18>)
1a003a70:	5c18      	ldrb	r0, [r3, r0]
}
1a003a72:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a003a76:	4770      	bx	lr
1a003a78:	40050000 	.word	0x40050000
1a003a7c:	1a0073d4 	.word	0x1a0073d4

1a003a80 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003a80:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003a82:	2810      	cmp	r0, #16
1a003a84:	d80a      	bhi.n	1a003a9c <Chip_Clock_GetClockInputHz+0x1c>
1a003a86:	e8df f000 	tbb	[pc, r0]
1a003a8a:	0b42      	.short	0x0b42
1a003a8c:	091f160d 	.word	0x091f160d
1a003a90:	2b282522 	.word	0x2b282522
1a003a94:	322e0909 	.word	0x322e0909
1a003a98:	3a36      	.short	0x3a36
1a003a9a:	3e          	.byte	0x3e
1a003a9b:	00          	.byte	0x00
	uint32_t rate = 0;
1a003a9c:	2000      	movs	r0, #0
1a003a9e:	e038      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003aa0:	481e      	ldr	r0, [pc, #120]	; (1a003b1c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003aa2:	e036      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003aa4:	4b1e      	ldr	r3, [pc, #120]	; (1a003b20 <Chip_Clock_GetClockInputHz+0xa0>)
1a003aa6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003aaa:	f003 0307 	and.w	r3, r3, #7
1a003aae:	2b04      	cmp	r3, #4
1a003ab0:	d130      	bne.n	1a003b14 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003ab2:	2000      	movs	r0, #0
1a003ab4:	e02d      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003ab6:	4b1a      	ldr	r3, [pc, #104]	; (1a003b20 <Chip_Clock_GetClockInputHz+0xa0>)
1a003ab8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003abc:	f003 0307 	and.w	r3, r3, #7
1a003ac0:	2b04      	cmp	r3, #4
1a003ac2:	d029      	beq.n	1a003b18 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003ac4:	4817      	ldr	r0, [pc, #92]	; (1a003b24 <Chip_Clock_GetClockInputHz+0xa4>)
1a003ac6:	e024      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003ac8:	4b17      	ldr	r3, [pc, #92]	; (1a003b28 <Chip_Clock_GetClockInputHz+0xa8>)
1a003aca:	6818      	ldr	r0, [r3, #0]
		break;
1a003acc:	e021      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003ace:	4b17      	ldr	r3, [pc, #92]	; (1a003b2c <Chip_Clock_GetClockInputHz+0xac>)
1a003ad0:	6818      	ldr	r0, [r3, #0]
		break;
1a003ad2:	e01e      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003ad4:	4b16      	ldr	r3, [pc, #88]	; (1a003b30 <Chip_Clock_GetClockInputHz+0xb0>)
1a003ad6:	6818      	ldr	r0, [r3, #0]
		break;
1a003ad8:	e01b      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a003ada:	4b15      	ldr	r3, [pc, #84]	; (1a003b30 <Chip_Clock_GetClockInputHz+0xb0>)
1a003adc:	6858      	ldr	r0, [r3, #4]
		break;
1a003ade:	e018      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003ae0:	f000 f86a 	bl	1a003bb8 <Chip_Clock_GetMainPLLHz>
		break;
1a003ae4:	e015      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003ae6:	2100      	movs	r1, #0
1a003ae8:	f000 f89c 	bl	1a003c24 <Chip_Clock_GetDivRate>
		break;
1a003aec:	e011      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a003aee:	2101      	movs	r1, #1
1a003af0:	f000 f898 	bl	1a003c24 <Chip_Clock_GetDivRate>
		break;
1a003af4:	e00d      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003af6:	2102      	movs	r1, #2
1a003af8:	f000 f894 	bl	1a003c24 <Chip_Clock_GetDivRate>
		break;
1a003afc:	e009      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a003afe:	2103      	movs	r1, #3
1a003b00:	f000 f890 	bl	1a003c24 <Chip_Clock_GetDivRate>
		break;
1a003b04:	e005      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003b06:	2104      	movs	r1, #4
1a003b08:	f000 f88c 	bl	1a003c24 <Chip_Clock_GetDivRate>
		break;
1a003b0c:	e001      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003b0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003b12:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003b14:	4803      	ldr	r0, [pc, #12]	; (1a003b24 <Chip_Clock_GetClockInputHz+0xa4>)
1a003b16:	e7fc      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003b18:	4806      	ldr	r0, [pc, #24]	; (1a003b34 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a003b1a:	e7fa      	b.n	1a003b12 <Chip_Clock_GetClockInputHz+0x92>
1a003b1c:	00b71b00 	.word	0x00b71b00
1a003b20:	40043000 	.word	0x40043000
1a003b24:	017d7840 	.word	0x017d7840
1a003b28:	1a007318 	.word	0x1a007318
1a003b2c:	1a007344 	.word	0x1a007344
1a003b30:	10002d84 	.word	0x10002d84
1a003b34:	02faf080 	.word	0x02faf080

1a003b38 <Chip_Clock_CalcMainPLLValue>:
{
1a003b38:	b538      	push	{r3, r4, r5, lr}
1a003b3a:	4605      	mov	r5, r0
1a003b3c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003b3e:	7908      	ldrb	r0, [r1, #4]
1a003b40:	f7ff ff9e 	bl	1a003a80 <Chip_Clock_GetClockInputHz>
1a003b44:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a003b46:	4b19      	ldr	r3, [pc, #100]	; (1a003bac <Chip_Clock_CalcMainPLLValue+0x74>)
1a003b48:	442b      	add	r3, r5
1a003b4a:	4a19      	ldr	r2, [pc, #100]	; (1a003bb0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003b4c:	4293      	cmp	r3, r2
1a003b4e:	d821      	bhi.n	1a003b94 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003b50:	b318      	cbz	r0, 1a003b9a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003b52:	2380      	movs	r3, #128	; 0x80
1a003b54:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a003b56:	2300      	movs	r3, #0
1a003b58:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a003b5a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003b5c:	fbb5 f3f0 	udiv	r3, r5, r0
1a003b60:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003b62:	4a14      	ldr	r2, [pc, #80]	; (1a003bb4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003b64:	4295      	cmp	r5, r2
1a003b66:	d903      	bls.n	1a003b70 <Chip_Clock_CalcMainPLLValue+0x38>
1a003b68:	fb03 f000 	mul.w	r0, r3, r0
1a003b6c:	42a8      	cmp	r0, r5
1a003b6e:	d007      	beq.n	1a003b80 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003b70:	4621      	mov	r1, r4
1a003b72:	4628      	mov	r0, r5
1a003b74:	f7ff fe96 	bl	1a0038a4 <pll_get_frac>
		if (!ppll->nsel) {
1a003b78:	68a3      	ldr	r3, [r4, #8]
1a003b7a:	b18b      	cbz	r3, 1a003ba0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003b7c:	3b01      	subs	r3, #1
1a003b7e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003b80:	6923      	ldr	r3, [r4, #16]
1a003b82:	b183      	cbz	r3, 1a003ba6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003b84:	68e2      	ldr	r2, [r4, #12]
1a003b86:	b10a      	cbz	r2, 1a003b8c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003b88:	3a01      	subs	r2, #1
1a003b8a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003b8c:	3b01      	subs	r3, #1
1a003b8e:	6123      	str	r3, [r4, #16]
	return 0;
1a003b90:	2000      	movs	r0, #0
}
1a003b92:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003b98:	e7fb      	b.n	1a003b92 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003b9e:	e7f8      	b.n	1a003b92 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ba4:	e7f5      	b.n	1a003b92 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003baa:	e7f2      	b.n	1a003b92 <Chip_Clock_CalcMainPLLValue+0x5a>
1a003bac:	ff6b3a10 	.word	0xff6b3a10
1a003bb0:	0b940510 	.word	0x0b940510
1a003bb4:	094c5eff 	.word	0x094c5eff

1a003bb8 <Chip_Clock_GetMainPLLHz>:
{
1a003bb8:	b530      	push	{r4, r5, lr}
1a003bba:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003bbc:	4d17      	ldr	r5, [pc, #92]	; (1a003c1c <Chip_Clock_GetMainPLLHz+0x64>)
1a003bbe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003bc0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003bc4:	f7ff ff5c 	bl	1a003a80 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003bc8:	4b15      	ldr	r3, [pc, #84]	; (1a003c20 <Chip_Clock_GetMainPLLHz+0x68>)
1a003bca:	681b      	ldr	r3, [r3, #0]
1a003bcc:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003bce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003bd0:	f013 0f01 	tst.w	r3, #1
1a003bd4:	d01f      	beq.n	1a003c16 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003bd6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003bda:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003bde:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003be2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003be6:	3301      	adds	r3, #1
	n = nsel + 1;
1a003be8:	3201      	adds	r2, #1
	p = ptab[psel];
1a003bea:	f10d 0c08 	add.w	ip, sp, #8
1a003bee:	4461      	add	r1, ip
1a003bf0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003bf4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003bf8:	d108      	bne.n	1a003c0c <Chip_Clock_GetMainPLLHz+0x54>
1a003bfa:	b93d      	cbnz	r5, 1a003c0c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003bfc:	0049      	lsls	r1, r1, #1
1a003bfe:	fbb3 f3f1 	udiv	r3, r3, r1
1a003c02:	fbb0 f0f2 	udiv	r0, r0, r2
1a003c06:	fb00 f003 	mul.w	r0, r0, r3
1a003c0a:	e005      	b.n	1a003c18 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003c0c:	fbb0 f0f2 	udiv	r0, r0, r2
1a003c10:	fb03 f000 	mul.w	r0, r3, r0
1a003c14:	e000      	b.n	1a003c18 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003c16:	2000      	movs	r0, #0
}
1a003c18:	b003      	add	sp, #12
1a003c1a:	bd30      	pop	{r4, r5, pc}
1a003c1c:	40050000 	.word	0x40050000
1a003c20:	1a0073d0 	.word	0x1a0073d0

1a003c24 <Chip_Clock_GetDivRate>:
{
1a003c24:	b538      	push	{r3, r4, r5, lr}
1a003c26:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a003c28:	4608      	mov	r0, r1
1a003c2a:	f7ff ff0d 	bl	1a003a48 <Chip_Clock_GetDividerSource>
1a003c2e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003c30:	4620      	mov	r0, r4
1a003c32:	f7ff ff17 	bl	1a003a64 <Chip_Clock_GetDividerDivisor>
1a003c36:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a003c38:	4628      	mov	r0, r5
1a003c3a:	f7ff ff21 	bl	1a003a80 <Chip_Clock_GetClockInputHz>
1a003c3e:	3401      	adds	r4, #1
}
1a003c40:	fbb0 f0f4 	udiv	r0, r0, r4
1a003c44:	bd38      	pop	{r3, r4, r5, pc}
1a003c46:	Address 0x000000001a003c46 is out of bounds.


1a003c48 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003c48:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a003c4a:	f100 0416 	add.w	r4, r0, #22
1a003c4e:	00a4      	lsls	r4, r4, #2
1a003c50:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003c54:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a003c58:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a003c5a:	281b      	cmp	r0, #27
1a003c5c:	d813      	bhi.n	1a003c86 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003c5e:	2911      	cmp	r1, #17
1a003c60:	d01a      	beq.n	1a003c98 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003c62:	4d0e      	ldr	r5, [pc, #56]	; (1a003c9c <Chip_Clock_SetBaseClock+0x54>)
1a003c64:	4025      	ands	r5, r4

			if (autoblocken) {
1a003c66:	b10a      	cbz	r2, 1a003c6c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003c68:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003c6c:	b10b      	cbz	r3, 1a003c72 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003c6e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003c72:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a003c76:	3016      	adds	r0, #22
1a003c78:	0080      	lsls	r0, r0, #2
1a003c7a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003c7e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003c82:	6045      	str	r5, [r0, #4]
1a003c84:	e008      	b.n	1a003c98 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003c86:	f044 0401 	orr.w	r4, r4, #1
1a003c8a:	3016      	adds	r0, #22
1a003c8c:	0080      	lsls	r0, r0, #2
1a003c8e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003c92:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003c96:	6044      	str	r4, [r0, #4]
	}
}
1a003c98:	bc30      	pop	{r4, r5}
1a003c9a:	4770      	bx	lr
1a003c9c:	e0fff7fe 	.word	0xe0fff7fe

1a003ca0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003ca0:	281b      	cmp	r0, #27
1a003ca2:	d80c      	bhi.n	1a003cbe <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003ca4:	3016      	adds	r0, #22
1a003ca6:	0080      	lsls	r0, r0, #2
1a003ca8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003cac:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003cb0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003cb2:	f010 0f01 	tst.w	r0, #1
1a003cb6:	d104      	bne.n	1a003cc2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003cb8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003cbc:	4770      	bx	lr
		return CLKINPUT_PD;
1a003cbe:	2011      	movs	r0, #17
1a003cc0:	4770      	bx	lr
		return CLKINPUT_PD;
1a003cc2:	2011      	movs	r0, #17
}
1a003cc4:	4770      	bx	lr

1a003cc6 <Chip_Clock_GetBaseClocktHz>:
{
1a003cc6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003cc8:	f7ff ffea 	bl	1a003ca0 <Chip_Clock_GetBaseClock>
1a003ccc:	f7ff fed8 	bl	1a003a80 <Chip_Clock_GetClockInputHz>
}
1a003cd0:	bd08      	pop	{r3, pc}
1a003cd2:	Address 0x000000001a003cd2 is out of bounds.


1a003cd4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003cd4:	b969      	cbnz	r1, 1a003cf2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003cd6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003cd8:	b10a      	cbz	r2, 1a003cde <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003cda:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003cde:	2b02      	cmp	r3, #2
1a003ce0:	d009      	beq.n	1a003cf6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003ce2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003ce6:	d209      	bcs.n	1a003cfc <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003ce8:	3020      	adds	r0, #32
1a003cea:	4b07      	ldr	r3, [pc, #28]	; (1a003d08 <Chip_Clock_EnableOpts+0x34>)
1a003cec:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003cf0:	4770      	bx	lr
		reg |= (1 << 1);
1a003cf2:	2103      	movs	r1, #3
1a003cf4:	e7f0      	b.n	1a003cd8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003cf6:	f041 0120 	orr.w	r1, r1, #32
1a003cfa:	e7f2      	b.n	1a003ce2 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003cfc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003d00:	4b02      	ldr	r3, [pc, #8]	; (1a003d0c <Chip_Clock_EnableOpts+0x38>)
1a003d02:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003d06:	4770      	bx	lr
1a003d08:	40051000 	.word	0x40051000
1a003d0c:	40052000 	.word	0x40052000

1a003d10 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003d10:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003d14:	d208      	bcs.n	1a003d28 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003d16:	4a09      	ldr	r2, [pc, #36]	; (1a003d3c <Chip_Clock_Enable+0x2c>)
1a003d18:	3020      	adds	r0, #32
1a003d1a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003d1e:	f043 0301 	orr.w	r3, r3, #1
1a003d22:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a003d26:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a003d28:	4a05      	ldr	r2, [pc, #20]	; (1a003d40 <Chip_Clock_Enable+0x30>)
1a003d2a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003d2e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003d32:	f043 0301 	orr.w	r3, r3, #1
1a003d36:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a003d3a:	4770      	bx	lr
1a003d3c:	40051000 	.word	0x40051000
1a003d40:	40052000 	.word	0x40052000

1a003d44 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003d44:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003d46:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003d4a:	d309      	bcc.n	1a003d60 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003d4c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003d50:	4a0d      	ldr	r2, [pc, #52]	; (1a003d88 <Chip_Clock_GetRate+0x44>)
1a003d52:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003d56:	f014 0f01 	tst.w	r4, #1
1a003d5a:	d107      	bne.n	1a003d6c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003d5c:	2000      	movs	r0, #0
	}

	return rate;
}
1a003d5e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003d60:	f100 0320 	add.w	r3, r0, #32
1a003d64:	4a09      	ldr	r2, [pc, #36]	; (1a003d8c <Chip_Clock_GetRate+0x48>)
1a003d66:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003d6a:	e7f4      	b.n	1a003d56 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003d6c:	f7ff fe20 	bl	1a0039b0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003d70:	f7ff ffa9 	bl	1a003cc6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003d74:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003d78:	d103      	bne.n	1a003d82 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003d7a:	2301      	movs	r3, #1
		rate = rate / div;
1a003d7c:	fbb0 f0f3 	udiv	r0, r0, r3
1a003d80:	e7ed      	b.n	1a003d5e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003d82:	2302      	movs	r3, #2
1a003d84:	e7fa      	b.n	1a003d7c <Chip_Clock_GetRate+0x38>
1a003d86:	bf00      	nop
1a003d88:	40052000 	.word	0x40052000
1a003d8c:	40051000 	.word	0x40051000

1a003d90 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003d90:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003d92:	2069      	movs	r0, #105	; 0x69
1a003d94:	f7ff ffd6 	bl	1a003d44 <Chip_Clock_GetRate>
1a003d98:	4b01      	ldr	r3, [pc, #4]	; (1a003da0 <SystemCoreClockUpdate+0x10>)
1a003d9a:	6018      	str	r0, [r3, #0]
}
1a003d9c:	bd08      	pop	{r3, pc}
1a003d9e:	bf00      	nop
1a003da0:	10002e18 	.word	0x10002e18

1a003da4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003da4:	b570      	push	{r4, r5, r6, lr}
1a003da6:	b08a      	sub	sp, #40	; 0x28
1a003da8:	4605      	mov	r5, r0
1a003daa:	460e      	mov	r6, r1
1a003dac:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003dae:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003db2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003db4:	2806      	cmp	r0, #6
1a003db6:	d018      	beq.n	1a003dea <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003db8:	2300      	movs	r3, #0
1a003dba:	2201      	movs	r2, #1
1a003dbc:	4629      	mov	r1, r5
1a003dbe:	2004      	movs	r0, #4
1a003dc0:	f7ff ff42 	bl	1a003c48 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003dc4:	4a49      	ldr	r2, [pc, #292]	; (1a003eec <Chip_SetupCoreClock+0x148>)
1a003dc6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003dc8:	f043 0301 	orr.w	r3, r3, #1
1a003dcc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003dce:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003dd2:	a901      	add	r1, sp, #4
1a003dd4:	4630      	mov	r0, r6
1a003dd6:	f7ff feaf 	bl	1a003b38 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003dda:	4b45      	ldr	r3, [pc, #276]	; (1a003ef0 <Chip_SetupCoreClock+0x14c>)
1a003ddc:	429e      	cmp	r6, r3
1a003dde:	d916      	bls.n	1a003e0e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003de0:	9b01      	ldr	r3, [sp, #4]
1a003de2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003de6:	d003      	beq.n	1a003df0 <Chip_SetupCoreClock+0x4c>
1a003de8:	e7fe      	b.n	1a003de8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003dea:	f7ff fe07 	bl	1a0039fc <Chip_Clock_EnableCrystal>
1a003dee:	e7e3      	b.n	1a003db8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003df0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003df4:	d005      	beq.n	1a003e02 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003dfa:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003dfc:	2500      	movs	r5, #0
			direct = 1;
1a003dfe:	2601      	movs	r6, #1
1a003e00:	e007      	b.n	1a003e12 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003e02:	9b04      	ldr	r3, [sp, #16]
1a003e04:	3301      	adds	r3, #1
1a003e06:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003e08:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a003e0a:	2600      	movs	r6, #0
1a003e0c:	e001      	b.n	1a003e12 <Chip_SetupCoreClock+0x6e>
1a003e0e:	2500      	movs	r5, #0
1a003e10:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003e12:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003e16:	9b01      	ldr	r3, [sp, #4]
1a003e18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003e1c:	9a05      	ldr	r2, [sp, #20]
1a003e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003e22:	9a03      	ldr	r2, [sp, #12]
1a003e24:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003e28:	9a04      	ldr	r2, [sp, #16]
1a003e2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003e32:	4a2e      	ldr	r2, [pc, #184]	; (1a003eec <Chip_SetupCoreClock+0x148>)
1a003e34:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003e36:	4b2d      	ldr	r3, [pc, #180]	; (1a003eec <Chip_SetupCoreClock+0x148>)
1a003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003e3a:	f013 0f01 	tst.w	r3, #1
1a003e3e:	d0fa      	beq.n	1a003e36 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003e40:	2300      	movs	r3, #0
1a003e42:	2201      	movs	r2, #1
1a003e44:	2109      	movs	r1, #9
1a003e46:	2004      	movs	r0, #4
1a003e48:	f7ff fefe 	bl	1a003c48 <Chip_Clock_SetBaseClock>

	if (direct) {
1a003e4c:	b1fe      	cbz	r6, 1a003e8e <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003e4e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003e52:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e56:	1e5a      	subs	r2, r3, #1
1a003e58:	9209      	str	r2, [sp, #36]	; 0x24
1a003e5a:	2b00      	cmp	r3, #0
1a003e5c:	d1fa      	bne.n	1a003e54 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a003e5e:	9b01      	ldr	r3, [sp, #4]
1a003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003e64:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003e66:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003e6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003e6e:	9a05      	ldr	r2, [sp, #20]
1a003e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003e74:	9a03      	ldr	r2, [sp, #12]
1a003e76:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003e7a:	9a04      	ldr	r2, [sp, #16]
1a003e7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003e84:	4a19      	ldr	r2, [pc, #100]	; (1a003eec <Chip_SetupCoreClock+0x148>)
1a003e86:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003e88:	b36c      	cbz	r4, 1a003ee6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003e8a:	2400      	movs	r4, #0
1a003e8c:	e029      	b.n	1a003ee2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003e8e:	2d00      	cmp	r5, #0
1a003e90:	d0fa      	beq.n	1a003e88 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003e92:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003e96:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003e9a:	1e5a      	subs	r2, r3, #1
1a003e9c:	9209      	str	r2, [sp, #36]	; 0x24
1a003e9e:	2b00      	cmp	r3, #0
1a003ea0:	d1fa      	bne.n	1a003e98 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003ea2:	9b04      	ldr	r3, [sp, #16]
1a003ea4:	1e5a      	subs	r2, r3, #1
1a003ea6:	9204      	str	r2, [sp, #16]
1a003ea8:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003eac:	9b01      	ldr	r3, [sp, #4]
1a003eae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003eb2:	9905      	ldr	r1, [sp, #20]
1a003eb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003eb8:	9903      	ldr	r1, [sp, #12]
1a003eba:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003ebe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003ec2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003ec6:	4a09      	ldr	r2, [pc, #36]	; (1a003eec <Chip_SetupCoreClock+0x148>)
1a003ec8:	6453      	str	r3, [r2, #68]	; 0x44
1a003eca:	e7dd      	b.n	1a003e88 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003ecc:	4809      	ldr	r0, [pc, #36]	; (1a003ef4 <Chip_SetupCoreClock+0x150>)
1a003ece:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003ed2:	78cb      	ldrb	r3, [r1, #3]
1a003ed4:	788a      	ldrb	r2, [r1, #2]
1a003ed6:	7849      	ldrb	r1, [r1, #1]
1a003ed8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003edc:	f7ff feb4 	bl	1a003c48 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003ee0:	3401      	adds	r4, #1
1a003ee2:	2c11      	cmp	r4, #17
1a003ee4:	d9f2      	bls.n	1a003ecc <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003ee6:	b00a      	add	sp, #40	; 0x28
1a003ee8:	bd70      	pop	{r4, r5, r6, pc}
1a003eea:	bf00      	nop
1a003eec:	40050000 	.word	0x40050000
1a003ef0:	068e7780 	.word	0x068e7780
1a003ef4:	1a007448 	.word	0x1a007448

1a003ef8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003ef8:	4770      	bx	lr
1a003efa:	Address 0x000000001a003efa is out of bounds.


1a003efc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003efc:	4b03      	ldr	r3, [pc, #12]	; (1a003f0c <Chip_SSP_GetClockIndex+0x10>)
1a003efe:	4298      	cmp	r0, r3
1a003f00:	d001      	beq.n	1a003f06 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003f02:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003f04:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003f06:	20a5      	movs	r0, #165	; 0xa5
1a003f08:	4770      	bx	lr
1a003f0a:	bf00      	nop
1a003f0c:	400c5000 	.word	0x400c5000

1a003f10 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003f10:	4b04      	ldr	r3, [pc, #16]	; (1a003f24 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003f12:	4298      	cmp	r0, r3
1a003f14:	d002      	beq.n	1a003f1c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003f16:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003f1a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003f1c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003f20:	4770      	bx	lr
1a003f22:	bf00      	nop
1a003f24:	400c5000 	.word	0x400c5000

1a003f28 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003f28:	6803      	ldr	r3, [r0, #0]
1a003f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003f2e:	0209      	lsls	r1, r1, #8
1a003f30:	b289      	uxth	r1, r1
1a003f32:	4319      	orrs	r1, r3
1a003f34:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003f36:	6102      	str	r2, [r0, #16]
}
1a003f38:	4770      	bx	lr

1a003f3a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003f3a:	b570      	push	{r4, r5, r6, lr}
1a003f3c:	4606      	mov	r6, r0
1a003f3e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003f40:	f7ff ffe6 	bl	1a003f10 <Chip_SSP_GetPeriphClockIndex>
1a003f44:	f7ff fefe 	bl	1a003d44 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003f48:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003f4e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003f50:	e000      	b.n	1a003f54 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003f52:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003f54:	42ab      	cmp	r3, r5
1a003f56:	d90b      	bls.n	1a003f70 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003f58:	1c4c      	adds	r4, r1, #1
1a003f5a:	fb02 f304 	mul.w	r3, r2, r4
1a003f5e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003f62:	429d      	cmp	r5, r3
1a003f64:	d2f6      	bcs.n	1a003f54 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003f66:	2cff      	cmp	r4, #255	; 0xff
1a003f68:	d9f3      	bls.n	1a003f52 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003f6a:	3202      	adds	r2, #2
				cr0_div = 0;
1a003f6c:	2100      	movs	r1, #0
1a003f6e:	e7f1      	b.n	1a003f54 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003f70:	4630      	mov	r0, r6
1a003f72:	f7ff ffd9 	bl	1a003f28 <Chip_SSP_SetClockRate>
}
1a003f76:	bd70      	pop	{r4, r5, r6, pc}

1a003f78 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003f78:	b510      	push	{r4, lr}
1a003f7a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003f7c:	f7ff ffbe 	bl	1a003efc <Chip_SSP_GetClockIndex>
1a003f80:	f7ff fec6 	bl	1a003d10 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003f84:	4620      	mov	r0, r4
1a003f86:	f7ff ffc3 	bl	1a003f10 <Chip_SSP_GetPeriphClockIndex>
1a003f8a:	f7ff fec1 	bl	1a003d10 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003f8e:	6863      	ldr	r3, [r4, #4]
1a003f90:	f023 0304 	bic.w	r3, r3, #4
1a003f94:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003f96:	6823      	ldr	r3, [r4, #0]
1a003f98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003f9c:	f043 0307 	orr.w	r3, r3, #7
1a003fa0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003fa2:	4902      	ldr	r1, [pc, #8]	; (1a003fac <Chip_SSP_Init+0x34>)
1a003fa4:	4620      	mov	r0, r4
1a003fa6:	f7ff ffc8 	bl	1a003f3a <Chip_SSP_SetBitRate>
}
1a003faa:	bd10      	pop	{r4, pc}
1a003fac:	000186a0 	.word	0x000186a0

1a003fb0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003fb0:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003fb2:	4a0b      	ldr	r2, [pc, #44]	; (1a003fe0 <SystemInit+0x30>)
1a003fb4:	4b0b      	ldr	r3, [pc, #44]	; (1a003fe4 <SystemInit+0x34>)
1a003fb6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003fb8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003fbc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003fbe:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003fc2:	2b20      	cmp	r3, #32
1a003fc4:	d004      	beq.n	1a003fd0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003fc6:	f7ff fa9f 	bl	1a003508 <Board_SystemInit>
   Board_Init();
1a003fca:	f7ff fa25 	bl	1a003418 <Board_Init>
}
1a003fce:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003fd0:	4a04      	ldr	r2, [pc, #16]	; (1a003fe4 <SystemInit+0x34>)
1a003fd2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003fd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003fda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003fde:	e7f2      	b.n	1a003fc6 <SystemInit+0x16>
1a003fe0:	1a000000 	.word	0x1a000000
1a003fe4:	e000ed00 	.word	0xe000ed00

1a003fe8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003fe8:	4b04      	ldr	r3, [pc, #16]	; (1a003ffc <cyclesCounterInit+0x14>)
1a003fea:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003fec:	4a04      	ldr	r2, [pc, #16]	; (1a004000 <cyclesCounterInit+0x18>)
1a003fee:	6813      	ldr	r3, [r2, #0]
1a003ff0:	f043 0301 	orr.w	r3, r3, #1
1a003ff4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003ff6:	2001      	movs	r0, #1
1a003ff8:	4770      	bx	lr
1a003ffa:	bf00      	nop
1a003ffc:	1000003c 	.word	0x1000003c
1a004000:	e0001000 	.word	0xe0001000

1a004004 <uartProcessIRQ>:
{
1a004004:	b570      	push	{r4, r5, r6, lr}
1a004006:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a004008:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a00400c:	0093      	lsls	r3, r2, #2
1a00400e:	4a22      	ldr	r2, [pc, #136]	; (1a004098 <uartProcessIRQ+0x94>)
1a004010:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a004012:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a004014:	b2ed      	uxtb	r5, r5
1a004016:	f015 0f01 	tst.w	r5, #1
1a00401a:	d00a      	beq.n	1a004032 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00401c:	b928      	cbnz	r0, 1a00402a <uartProcessIRQ+0x26>
1a00401e:	4b1f      	ldr	r3, [pc, #124]	; (1a00409c <uartProcessIRQ+0x98>)
1a004020:	681b      	ldr	r3, [r3, #0]
1a004022:	b113      	cbz	r3, 1a00402a <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a004024:	4a1e      	ldr	r2, [pc, #120]	; (1a0040a0 <uartProcessIRQ+0x9c>)
1a004026:	6810      	ldr	r0, [r2, #0]
1a004028:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00402a:	2c03      	cmp	r4, #3
1a00402c:	d014      	beq.n	1a004058 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00402e:	2c05      	cmp	r4, #5
1a004030:	d01a      	beq.n	1a004068 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a004032:	f015 0f20 	tst.w	r5, #32
1a004036:	d00e      	beq.n	1a004056 <uartProcessIRQ+0x52>
	return pUART->IER;
1a004038:	6873      	ldr	r3, [r6, #4]
1a00403a:	f013 0f02 	tst.w	r3, #2
1a00403e:	d00a      	beq.n	1a004056 <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a004040:	b92c      	cbnz	r4, 1a00404e <uartProcessIRQ+0x4a>
1a004042:	4b18      	ldr	r3, [pc, #96]	; (1a0040a4 <uartProcessIRQ+0xa0>)
1a004044:	681b      	ldr	r3, [r3, #0]
1a004046:	b113      	cbz	r3, 1a00404e <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a004048:	4a17      	ldr	r2, [pc, #92]	; (1a0040a8 <uartProcessIRQ+0xa4>)
1a00404a:	6810      	ldr	r0, [r2, #0]
1a00404c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00404e:	2c03      	cmp	r4, #3
1a004050:	d012      	beq.n	1a004078 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a004052:	2c05      	cmp	r4, #5
1a004054:	d018      	beq.n	1a004088 <uartProcessIRQ+0x84>
}
1a004056:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a004058:	4b14      	ldr	r3, [pc, #80]	; (1a0040ac <uartProcessIRQ+0xa8>)
1a00405a:	681b      	ldr	r3, [r3, #0]
1a00405c:	2b00      	cmp	r3, #0
1a00405e:	d0e6      	beq.n	1a00402e <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a004060:	4a13      	ldr	r2, [pc, #76]	; (1a0040b0 <uartProcessIRQ+0xac>)
1a004062:	6810      	ldr	r0, [r2, #0]
1a004064:	4798      	blx	r3
1a004066:	e7e2      	b.n	1a00402e <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a004068:	4b12      	ldr	r3, [pc, #72]	; (1a0040b4 <uartProcessIRQ+0xb0>)
1a00406a:	681b      	ldr	r3, [r3, #0]
1a00406c:	2b00      	cmp	r3, #0
1a00406e:	d0e0      	beq.n	1a004032 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a004070:	4a11      	ldr	r2, [pc, #68]	; (1a0040b8 <uartProcessIRQ+0xb4>)
1a004072:	6810      	ldr	r0, [r2, #0]
1a004074:	4798      	blx	r3
1a004076:	e7dc      	b.n	1a004032 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a004078:	4b10      	ldr	r3, [pc, #64]	; (1a0040bc <uartProcessIRQ+0xb8>)
1a00407a:	681b      	ldr	r3, [r3, #0]
1a00407c:	2b00      	cmp	r3, #0
1a00407e:	d0e8      	beq.n	1a004052 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a004080:	4a0f      	ldr	r2, [pc, #60]	; (1a0040c0 <uartProcessIRQ+0xbc>)
1a004082:	6810      	ldr	r0, [r2, #0]
1a004084:	4798      	blx	r3
1a004086:	e7e4      	b.n	1a004052 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a004088:	4b0e      	ldr	r3, [pc, #56]	; (1a0040c4 <uartProcessIRQ+0xc0>)
1a00408a:	681b      	ldr	r3, [r3, #0]
1a00408c:	2b00      	cmp	r3, #0
1a00408e:	d0e2      	beq.n	1a004056 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a004090:	4a0d      	ldr	r2, [pc, #52]	; (1a0040c8 <uartProcessIRQ+0xc4>)
1a004092:	6810      	ldr	r0, [r2, #0]
1a004094:	4798      	blx	r3
}
1a004096:	e7de      	b.n	1a004056 <uartProcessIRQ+0x52>
1a004098:	1a007490 	.word	0x1a007490
1a00409c:	10002d8c 	.word	0x10002d8c
1a0040a0:	10002d90 	.word	0x10002d90
1a0040a4:	10002da4 	.word	0x10002da4
1a0040a8:	10002da8 	.word	0x10002da8
1a0040ac:	10002d94 	.word	0x10002d94
1a0040b0:	10002d98 	.word	0x10002d98
1a0040b4:	10002d9c 	.word	0x10002d9c
1a0040b8:	10002da0 	.word	0x10002da0
1a0040bc:	10002dac 	.word	0x10002dac
1a0040c0:	10002db0 	.word	0x10002db0
1a0040c4:	10002db4 	.word	0x10002db4
1a0040c8:	10002db8 	.word	0x10002db8

1a0040cc <uartInterrupt>:
   if( enable ) {
1a0040cc:	b341      	cbz	r1, 1a004120 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a0040ce:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0040d2:	009a      	lsls	r2, r3, #2
1a0040d4:	4b1e      	ldr	r3, [pc, #120]	; (1a004150 <uartInterrupt+0x84>)
1a0040d6:	4413      	add	r3, r2
1a0040d8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0040dc:	2b00      	cmp	r3, #0
1a0040de:	db18      	blt.n	1a004112 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0040e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a0040e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a0040e8:	22a0      	movs	r2, #160	; 0xa0
1a0040ea:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a0040ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0040f2:	0082      	lsls	r2, r0, #2
1a0040f4:	4b16      	ldr	r3, [pc, #88]	; (1a004150 <uartInterrupt+0x84>)
1a0040f6:	4413      	add	r3, r2
1a0040f8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0040fc:	2b00      	cmp	r3, #0
1a0040fe:	db25      	blt.n	1a00414c <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004100:	f003 011f 	and.w	r1, r3, #31
1a004104:	095b      	lsrs	r3, r3, #5
1a004106:	2201      	movs	r2, #1
1a004108:	408a      	lsls	r2, r1
1a00410a:	4912      	ldr	r1, [pc, #72]	; (1a004154 <uartInterrupt+0x88>)
1a00410c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a004110:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a004112:	f003 030f 	and.w	r3, r3, #15
1a004116:	4a10      	ldr	r2, [pc, #64]	; (1a004158 <uartInterrupt+0x8c>)
1a004118:	441a      	add	r2, r3
1a00411a:	23a0      	movs	r3, #160	; 0xa0
1a00411c:	7613      	strb	r3, [r2, #24]
1a00411e:	e7e6      	b.n	1a0040ee <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a004120:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004124:	0082      	lsls	r2, r0, #2
1a004126:	4b0a      	ldr	r3, [pc, #40]	; (1a004150 <uartInterrupt+0x84>)
1a004128:	4413      	add	r3, r2
1a00412a:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00412e:	2b00      	cmp	r3, #0
1a004130:	db0c      	blt.n	1a00414c <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004132:	f003 011f 	and.w	r1, r3, #31
1a004136:	095b      	lsrs	r3, r3, #5
1a004138:	2201      	movs	r2, #1
1a00413a:	408a      	lsls	r2, r1
1a00413c:	3320      	adds	r3, #32
1a00413e:	4905      	ldr	r1, [pc, #20]	; (1a004154 <uartInterrupt+0x88>)
1a004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a004144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a004148:	f3bf 8f6f 	isb	sy
}
1a00414c:	4770      	bx	lr
1a00414e:	bf00      	nop
1a004150:	1a007490 	.word	0x1a007490
1a004154:	e000e100 	.word	0xe000e100
1a004158:	e000ecfc 	.word	0xe000ecfc

1a00415c <uartCallbackSet>:
{   
1a00415c:	b410      	push	{r4}
   switch(event){
1a00415e:	b161      	cbz	r1, 1a00417a <uartCallbackSet+0x1e>
1a004160:	2901      	cmp	r1, #1
1a004162:	d11c      	bne.n	1a00419e <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a004164:	b1da      	cbz	r2, 1a00419e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a004166:	2801      	cmp	r0, #1
1a004168:	d92c      	bls.n	1a0041c4 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00416a:	1ec1      	subs	r1, r0, #3
1a00416c:	b2c9      	uxtb	r1, r1
1a00416e:	2901      	cmp	r1, #1
1a004170:	d92d      	bls.n	1a0041ce <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a004172:	2805      	cmp	r0, #5
1a004174:	d030      	beq.n	1a0041d8 <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a004176:	2302      	movs	r3, #2
1a004178:	e009      	b.n	1a00418e <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a00417a:	b182      	cbz	r2, 1a00419e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00417c:	2801      	cmp	r0, #1
1a00417e:	d911      	bls.n	1a0041a4 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a004180:	1ec1      	subs	r1, r0, #3
1a004182:	b2c9      	uxtb	r1, r1
1a004184:	2901      	cmp	r1, #1
1a004186:	d912      	bls.n	1a0041ae <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a004188:	2805      	cmp	r0, #5
1a00418a:	d015      	beq.n	1a0041b8 <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a00418c:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a00418e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004192:	0082      	lsls	r2, r0, #2
1a004194:	4913      	ldr	r1, [pc, #76]	; (1a0041e4 <uartCallbackSet+0x88>)
1a004196:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a004198:	6851      	ldr	r1, [r2, #4]
1a00419a:	430b      	orrs	r3, r1
1a00419c:	6053      	str	r3, [r2, #4]
}
1a00419e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0041a2:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a0041a4:	4910      	ldr	r1, [pc, #64]	; (1a0041e8 <uartCallbackSet+0x8c>)
1a0041a6:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a0041a8:	4910      	ldr	r1, [pc, #64]	; (1a0041ec <uartCallbackSet+0x90>)
1a0041aa:	600b      	str	r3, [r1, #0]
1a0041ac:	e7e8      	b.n	1a004180 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a0041ae:	4910      	ldr	r1, [pc, #64]	; (1a0041f0 <uartCallbackSet+0x94>)
1a0041b0:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a0041b2:	4910      	ldr	r1, [pc, #64]	; (1a0041f4 <uartCallbackSet+0x98>)
1a0041b4:	600b      	str	r3, [r1, #0]
1a0041b6:	e7e7      	b.n	1a004188 <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a0041b8:	490f      	ldr	r1, [pc, #60]	; (1a0041f8 <uartCallbackSet+0x9c>)
1a0041ba:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a0041bc:	4a0f      	ldr	r2, [pc, #60]	; (1a0041fc <uartCallbackSet+0xa0>)
1a0041be:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0041c0:	2305      	movs	r3, #5
1a0041c2:	e7e4      	b.n	1a00418e <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a0041c4:	490e      	ldr	r1, [pc, #56]	; (1a004200 <uartCallbackSet+0xa4>)
1a0041c6:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a0041c8:	490e      	ldr	r1, [pc, #56]	; (1a004204 <uartCallbackSet+0xa8>)
1a0041ca:	600b      	str	r3, [r1, #0]
1a0041cc:	e7cd      	b.n	1a00416a <uartCallbackSet+0xe>
            	txIsrCallbackUART2 = callbackFunc;
1a0041ce:	490e      	ldr	r1, [pc, #56]	; (1a004208 <uartCallbackSet+0xac>)
1a0041d0:	600a      	str	r2, [r1, #0]
            	txIsrCallbackUART2Params = callbackParam;
1a0041d2:	490e      	ldr	r1, [pc, #56]	; (1a00420c <uartCallbackSet+0xb0>)
1a0041d4:	600b      	str	r3, [r1, #0]
1a0041d6:	e7cc      	b.n	1a004172 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a0041d8:	490d      	ldr	r1, [pc, #52]	; (1a004210 <uartCallbackSet+0xb4>)
1a0041da:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a0041dc:	4a0d      	ldr	r2, [pc, #52]	; (1a004214 <uartCallbackSet+0xb8>)
1a0041de:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a0041e0:	2302      	movs	r3, #2
1a0041e2:	e7d4      	b.n	1a00418e <uartCallbackSet+0x32>
1a0041e4:	1a007490 	.word	0x1a007490
1a0041e8:	10002d8c 	.word	0x10002d8c
1a0041ec:	10002d90 	.word	0x10002d90
1a0041f0:	10002d94 	.word	0x10002d94
1a0041f4:	10002d98 	.word	0x10002d98
1a0041f8:	10002d9c 	.word	0x10002d9c
1a0041fc:	10002da0 	.word	0x10002da0
1a004200:	10002da4 	.word	0x10002da4
1a004204:	10002da8 	.word	0x10002da8
1a004208:	10002dac 	.word	0x10002dac
1a00420c:	10002db0 	.word	0x10002db0
1a004210:	10002db4 	.word	0x10002db4
1a004214:	10002db8 	.word	0x10002db8

1a004218 <uartCallbackClr>:
   switch(event){
1a004218:	b111      	cbz	r1, 1a004220 <uartCallbackClr+0x8>
1a00421a:	2901      	cmp	r1, #1
1a00421c:	d00b      	beq.n	1a004236 <uartCallbackClr+0x1e>
1a00421e:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a004220:	2105      	movs	r1, #5
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a004222:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004226:	0082      	lsls	r2, r0, #2
1a004228:	4b04      	ldr	r3, [pc, #16]	; (1a00423c <uartCallbackClr+0x24>)
1a00422a:	589a      	ldr	r2, [r3, r2]
	pUART->IER &= ~intMask;
1a00422c:	6853      	ldr	r3, [r2, #4]
1a00422e:	ea23 0301 	bic.w	r3, r3, r1
1a004232:	6053      	str	r3, [r2, #4]
}
1a004234:	4770      	bx	lr
         intMask = UART_IER_THREINT;
1a004236:	2102      	movs	r1, #2
1a004238:	e7f3      	b.n	1a004222 <uartCallbackClr+0xa>
1a00423a:	bf00      	nop
1a00423c:	1a007490 	.word	0x1a007490

1a004240 <uartSetPendingInterrupt>:
   NVIC_SetPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a004240:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004244:	0082      	lsls	r2, r0, #2
1a004246:	4b08      	ldr	r3, [pc, #32]	; (1a004268 <uartSetPendingInterrupt+0x28>)
1a004248:	4413      	add	r3, r2
1a00424a:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00424e:	2b00      	cmp	r3, #0
1a004250:	db08      	blt.n	1a004264 <uartSetPendingInterrupt+0x24>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004252:	f003 011f 	and.w	r1, r3, #31
1a004256:	095b      	lsrs	r3, r3, #5
1a004258:	2201      	movs	r2, #1
1a00425a:	408a      	lsls	r2, r1
1a00425c:	3340      	adds	r3, #64	; 0x40
1a00425e:	4903      	ldr	r1, [pc, #12]	; (1a00426c <uartSetPendingInterrupt+0x2c>)
1a004260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a004264:	4770      	bx	lr
1a004266:	bf00      	nop
1a004268:	1a007490 	.word	0x1a007490
1a00426c:	e000e100 	.word	0xe000e100

1a004270 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a004270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a004274:	0083      	lsls	r3, r0, #2
1a004276:	4a03      	ldr	r2, [pc, #12]	; (1a004284 <uartTxReady+0x14>)
1a004278:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00427a:	6958      	ldr	r0, [r3, #20]
}
1a00427c:	f000 0020 	and.w	r0, r0, #32
1a004280:	4770      	bx	lr
1a004282:	bf00      	nop
1a004284:	1a007490 	.word	0x1a007490

1a004288 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a004288:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00428c:	0083      	lsls	r3, r0, #2
1a00428e:	4a02      	ldr	r2, [pc, #8]	; (1a004298 <uartRxRead+0x10>)
1a004290:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004292:	6818      	ldr	r0, [r3, #0]
}
1a004294:	b2c0      	uxtb	r0, r0
1a004296:	4770      	bx	lr
1a004298:	1a007490 	.word	0x1a007490

1a00429c <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00429c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0042a0:	0083      	lsls	r3, r0, #2
1a0042a2:	4a02      	ldr	r2, [pc, #8]	; (1a0042ac <uartTxWrite+0x10>)
1a0042a4:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0042a6:	6019      	str	r1, [r3, #0]
}
1a0042a8:	4770      	bx	lr
1a0042aa:	bf00      	nop
1a0042ac:	1a007490 	.word	0x1a007490

1a0042b0 <uartInit>:
{
1a0042b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0042b4:	4680      	mov	r8, r0
1a0042b6:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0042b8:	4c19      	ldr	r4, [pc, #100]	; (1a004320 <uartInit+0x70>)
1a0042ba:	0045      	lsls	r5, r0, #1
1a0042bc:	182a      	adds	r2, r5, r0
1a0042be:	0093      	lsls	r3, r2, #2
1a0042c0:	18e6      	adds	r6, r4, r3
1a0042c2:	58e7      	ldr	r7, [r4, r3]
1a0042c4:	4638      	mov	r0, r7
1a0042c6:	f7ff f979 	bl	1a0035bc <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0042ca:	4649      	mov	r1, r9
1a0042cc:	4638      	mov	r0, r7
1a0042ce:	f7ff f99f 	bl	1a003610 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0042d2:	2307      	movs	r3, #7
1a0042d4:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0042d6:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0042d8:	2301      	movs	r3, #1
1a0042da:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0042dc:	7930      	ldrb	r0, [r6, #4]
1a0042de:	7973      	ldrb	r3, [r6, #5]
1a0042e0:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0042e2:	f042 0218 	orr.w	r2, r2, #24
1a0042e6:	490f      	ldr	r1, [pc, #60]	; (1a004324 <uartInit+0x74>)
1a0042e8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0042ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0042f0:	79f0      	ldrb	r0, [r6, #7]
1a0042f2:	7a33      	ldrb	r3, [r6, #8]
1a0042f4:	7a72      	ldrb	r2, [r6, #9]
1a0042f6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0042fa:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a004302:	f1b8 0f01 	cmp.w	r8, #1
1a004306:	d001      	beq.n	1a00430c <uartInit+0x5c>
}
1a004308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00430c:	4a06      	ldr	r2, [pc, #24]	; (1a004328 <uartInit+0x78>)
1a00430e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a004310:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a004314:	64d3      	str	r3, [r2, #76]	; 0x4c
1a004316:	221a      	movs	r2, #26
1a004318:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00431c:	e7f4      	b.n	1a004308 <uartInit+0x58>
1a00431e:	bf00      	nop
1a004320:	1a007490 	.word	0x1a007490
1a004324:	40086000 	.word	0x40086000
1a004328:	40081000 	.word	0x40081000

1a00432c <uartWriteByte>:
{
1a00432c:	b538      	push	{r3, r4, r5, lr}
1a00432e:	4604      	mov	r4, r0
1a004330:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a004332:	4620      	mov	r0, r4
1a004334:	f7ff ff9c 	bl	1a004270 <uartTxReady>
1a004338:	2800      	cmp	r0, #0
1a00433a:	d0fa      	beq.n	1a004332 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a00433c:	4629      	mov	r1, r5
1a00433e:	4620      	mov	r0, r4
1a004340:	f7ff ffac 	bl	1a00429c <uartTxWrite>
}
1a004344:	bd38      	pop	{r3, r4, r5, pc}

1a004346 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a004346:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a004348:	2003      	movs	r0, #3
1a00434a:	f7ff fe5b 	bl	1a004004 <uartProcessIRQ>
}
1a00434e:	bd08      	pop	{r3, pc}

1a004350 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a004350:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a004352:	2005      	movs	r0, #5
1a004354:	f7ff fe56 	bl	1a004004 <uartProcessIRQ>
}
1a004358:	bd08      	pop	{r3, pc}

1a00435a <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a00435a:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a00435c:	f7fe f832 	bl	1a0023c4 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a004360:	2100      	movs	r1, #0
1a004362:	bd08      	pop	{r3, pc}

1a004364 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a004364:	e7fe      	b.n	1a004364 <errorOcurred>

1a004366 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a004366:	4770      	bx	lr

1a004368 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a004368:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00436a:	2400      	movs	r4, #0
1a00436c:	e001      	b.n	1a004372 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00436e:	3401      	adds	r4, #1
1a004370:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004372:	2c03      	cmp	r4, #3
1a004374:	d812      	bhi.n	1a00439c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a004376:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a004378:	4b09      	ldr	r3, [pc, #36]	; (1a0043a0 <TIMER0_IRQHandler+0x38>)
1a00437a:	681a      	ldr	r2, [r3, #0]
1a00437c:	f004 010f 	and.w	r1, r4, #15
1a004380:	2301      	movs	r3, #1
1a004382:	408b      	lsls	r3, r1
1a004384:	421a      	tst	r2, r3
1a004386:	d0f2      	beq.n	1a00436e <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004388:	4b06      	ldr	r3, [pc, #24]	; (1a0043a4 <TIMER0_IRQHandler+0x3c>)
1a00438a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00438e:	2000      	movs	r0, #0
1a004390:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004392:	2301      	movs	r3, #1
1a004394:	40ab      	lsls	r3, r5
1a004396:	4a02      	ldr	r2, [pc, #8]	; (1a0043a0 <TIMER0_IRQHandler+0x38>)
1a004398:	6013      	str	r3, [r2, #0]
1a00439a:	e7e8      	b.n	1a00436e <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00439c:	bd38      	pop	{r3, r4, r5, pc}
1a00439e:	bf00      	nop
1a0043a0:	40084000 	.word	0x40084000
1a0043a4:	10000048 	.word	0x10000048

1a0043a8 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0043a8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043aa:	2400      	movs	r4, #0
1a0043ac:	e001      	b.n	1a0043b2 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0043ae:	3401      	adds	r4, #1
1a0043b0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043b2:	2c03      	cmp	r4, #3
1a0043b4:	d813      	bhi.n	1a0043de <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0043b6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043b8:	4b09      	ldr	r3, [pc, #36]	; (1a0043e0 <TIMER1_IRQHandler+0x38>)
1a0043ba:	681a      	ldr	r2, [r3, #0]
1a0043bc:	f004 010f 	and.w	r1, r4, #15
1a0043c0:	2301      	movs	r3, #1
1a0043c2:	408b      	lsls	r3, r1
1a0043c4:	421a      	tst	r2, r3
1a0043c6:	d0f2      	beq.n	1a0043ae <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0043c8:	1d23      	adds	r3, r4, #4
1a0043ca:	4a06      	ldr	r2, [pc, #24]	; (1a0043e4 <TIMER1_IRQHandler+0x3c>)
1a0043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0043d0:	2000      	movs	r0, #0
1a0043d2:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0043d4:	2301      	movs	r3, #1
1a0043d6:	40ab      	lsls	r3, r5
1a0043d8:	4a01      	ldr	r2, [pc, #4]	; (1a0043e0 <TIMER1_IRQHandler+0x38>)
1a0043da:	6013      	str	r3, [r2, #0]
1a0043dc:	e7e7      	b.n	1a0043ae <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0043de:	bd38      	pop	{r3, r4, r5, pc}
1a0043e0:	40085000 	.word	0x40085000
1a0043e4:	10000048 	.word	0x10000048

1a0043e8 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0043e8:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043ea:	2400      	movs	r4, #0
1a0043ec:	e001      	b.n	1a0043f2 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0043ee:	3401      	adds	r4, #1
1a0043f0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0043f2:	2c03      	cmp	r4, #3
1a0043f4:	d814      	bhi.n	1a004420 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0043f6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0043f8:	4b0a      	ldr	r3, [pc, #40]	; (1a004424 <TIMER2_IRQHandler+0x3c>)
1a0043fa:	681a      	ldr	r2, [r3, #0]
1a0043fc:	f004 010f 	and.w	r1, r4, #15
1a004400:	2301      	movs	r3, #1
1a004402:	408b      	lsls	r3, r1
1a004404:	421a      	tst	r2, r3
1a004406:	d0f2      	beq.n	1a0043ee <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a004408:	f104 0308 	add.w	r3, r4, #8
1a00440c:	4a06      	ldr	r2, [pc, #24]	; (1a004428 <TIMER2_IRQHandler+0x40>)
1a00440e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004412:	2000      	movs	r0, #0
1a004414:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a004416:	2301      	movs	r3, #1
1a004418:	40ab      	lsls	r3, r5
1a00441a:	4a02      	ldr	r2, [pc, #8]	; (1a004424 <TIMER2_IRQHandler+0x3c>)
1a00441c:	6013      	str	r3, [r2, #0]
1a00441e:	e7e6      	b.n	1a0043ee <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a004420:	bd38      	pop	{r3, r4, r5, pc}
1a004422:	bf00      	nop
1a004424:	400c3000 	.word	0x400c3000
1a004428:	10000048 	.word	0x10000048

1a00442c <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a00442c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00442e:	2400      	movs	r4, #0
1a004430:	e001      	b.n	1a004436 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a004432:	3401      	adds	r4, #1
1a004434:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a004436:	2c03      	cmp	r4, #3
1a004438:	d814      	bhi.n	1a004464 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00443a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00443c:	4b0a      	ldr	r3, [pc, #40]	; (1a004468 <TIMER3_IRQHandler+0x3c>)
1a00443e:	681a      	ldr	r2, [r3, #0]
1a004440:	f004 010f 	and.w	r1, r4, #15
1a004444:	2301      	movs	r3, #1
1a004446:	408b      	lsls	r3, r1
1a004448:	421a      	tst	r2, r3
1a00444a:	d0f2      	beq.n	1a004432 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00444c:	f104 030c 	add.w	r3, r4, #12
1a004450:	4a06      	ldr	r2, [pc, #24]	; (1a00446c <TIMER3_IRQHandler+0x40>)
1a004452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a004456:	2000      	movs	r0, #0
1a004458:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00445a:	2301      	movs	r3, #1
1a00445c:	40ab      	lsls	r3, r5
1a00445e:	4a02      	ldr	r2, [pc, #8]	; (1a004468 <TIMER3_IRQHandler+0x3c>)
1a004460:	6013      	str	r3, [r2, #0]
1a004462:	e7e6      	b.n	1a004432 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a004464:	bd38      	pop	{r3, r4, r5, pc}
1a004466:	bf00      	nop
1a004468:	400c4000 	.word	0x400c4000
1a00446c:	10000048 	.word	0x10000048

1a004470 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004470:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a004472:	4d0b      	ldr	r5, [pc, #44]	; (1a0044a0 <gpioObtainPinInit+0x30>)
1a004474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004478:	182c      	adds	r4, r5, r0
1a00447a:	5628      	ldrsb	r0, [r5, r0]
1a00447c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00447e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a004482:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a004484:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004488:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00448a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00448e:	9b02      	ldr	r3, [sp, #8]
1a004490:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a004492:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a004496:	9b03      	ldr	r3, [sp, #12]
1a004498:	701a      	strb	r2, [r3, #0]
}
1a00449a:	bc30      	pop	{r4, r5}
1a00449c:	4770      	bx	lr
1a00449e:	bf00      	nop
1a0044a0:	1a0074d8 	.word	0x1a0074d8

1a0044a4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0044a4:	f110 0f02 	cmn.w	r0, #2
1a0044a8:	f000 80c7 	beq.w	1a00463a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0044ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0044b0:	f000 80c5 	beq.w	1a00463e <gpioInit+0x19a>
{
1a0044b4:	b570      	push	{r4, r5, r6, lr}
1a0044b6:	b084      	sub	sp, #16
1a0044b8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0044ba:	2300      	movs	r3, #0
1a0044bc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0044c0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0044c4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0044c8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0044cc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0044d0:	f10d 030b 	add.w	r3, sp, #11
1a0044d4:	9301      	str	r3, [sp, #4]
1a0044d6:	ab03      	add	r3, sp, #12
1a0044d8:	9300      	str	r3, [sp, #0]
1a0044da:	f10d 030d 	add.w	r3, sp, #13
1a0044de:	f10d 020e 	add.w	r2, sp, #14
1a0044e2:	f10d 010f 	add.w	r1, sp, #15
1a0044e6:	f7ff ffc3 	bl	1a004470 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0044ea:	2c05      	cmp	r4, #5
1a0044ec:	f200 80a9 	bhi.w	1a004642 <gpioInit+0x19e>
1a0044f0:	e8df f004 	tbb	[pc, r4]
1a0044f4:	45278109 	.word	0x45278109
1a0044f8:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0044fa:	4853      	ldr	r0, [pc, #332]	; (1a004648 <gpioInit+0x1a4>)
1a0044fc:	f7ff fcfc 	bl	1a003ef8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a004500:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a004502:	b004      	add	sp, #16
1a004504:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a004506:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00450a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00450e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004512:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004516:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00451a:	494c      	ldr	r1, [pc, #304]	; (1a00464c <gpioInit+0x1a8>)
1a00451c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004520:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004524:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004528:	2001      	movs	r0, #1
1a00452a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00452e:	4c46      	ldr	r4, [pc, #280]	; (1a004648 <gpioInit+0x1a4>)
1a004530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004534:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004538:	ea22 0201 	bic.w	r2, r2, r1
1a00453c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004540:	e7df      	b.n	1a004502 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004542:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004546:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00454a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00454e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a004552:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004556:	493d      	ldr	r1, [pc, #244]	; (1a00464c <gpioInit+0x1a8>)
1a004558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00455c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004560:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004564:	2001      	movs	r0, #1
1a004566:	fa00 f102 	lsl.w	r1, r0, r2
1a00456a:	4c37      	ldr	r4, [pc, #220]	; (1a004648 <gpioInit+0x1a4>)
1a00456c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004570:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004574:	ea22 0201 	bic.w	r2, r2, r1
1a004578:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00457c:	e7c1      	b.n	1a004502 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00457e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004582:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004586:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00458a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00458e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004592:	492e      	ldr	r1, [pc, #184]	; (1a00464c <gpioInit+0x1a8>)
1a004594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004598:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00459c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045a0:	2001      	movs	r0, #1
1a0045a2:	fa00 f102 	lsl.w	r1, r0, r2
1a0045a6:	4c28      	ldr	r4, [pc, #160]	; (1a004648 <gpioInit+0x1a4>)
1a0045a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0045ac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0045b0:	ea22 0201 	bic.w	r2, r2, r1
1a0045b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045b8:	e7a3      	b.n	1a004502 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045be:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0045c6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0045ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0045ce:	491f      	ldr	r1, [pc, #124]	; (1a00464c <gpioInit+0x1a8>)
1a0045d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0045d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0045d8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0045dc:	2001      	movs	r0, #1
1a0045de:	fa00 f102 	lsl.w	r1, r0, r2
1a0045e2:	4c19      	ldr	r4, [pc, #100]	; (1a004648 <gpioInit+0x1a4>)
1a0045e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0045e8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0045ec:	ea22 0201 	bic.w	r2, r2, r1
1a0045f0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0045f4:	e785      	b.n	1a004502 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0045f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0045fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0045fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004602:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a004606:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00460a:	4910      	ldr	r1, [pc, #64]	; (1a00464c <gpioInit+0x1a8>)
1a00460c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004610:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a004614:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004618:	2001      	movs	r0, #1
1a00461a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00461e:	4b0a      	ldr	r3, [pc, #40]	; (1a004648 <gpioInit+0x1a4>)
1a004620:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a004624:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004628:	4331      	orrs	r1, r6
1a00462a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00462e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004630:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a004634:	2100      	movs	r1, #0
1a004636:	5499      	strb	r1, [r3, r2]
1a004638:	e763      	b.n	1a004502 <gpioInit+0x5e>
	  return FALSE;
1a00463a:	2000      	movs	r0, #0
1a00463c:	4770      	bx	lr
	  return FALSE;
1a00463e:	2000      	movs	r0, #0
}
1a004640:	4770      	bx	lr
      ret_val = 0;
1a004642:	2000      	movs	r0, #0
1a004644:	e75d      	b.n	1a004502 <gpioInit+0x5e>
1a004646:	bf00      	nop
1a004648:	400f4000 	.word	0x400f4000
1a00464c:	40086000 	.word	0x40086000

1a004650 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a004650:	f110 0f02 	cmn.w	r0, #2
1a004654:	d02d      	beq.n	1a0046b2 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a004656:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00465a:	d02c      	beq.n	1a0046b6 <gpioWrite+0x66>
{
1a00465c:	b510      	push	{r4, lr}
1a00465e:	b084      	sub	sp, #16
1a004660:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a004662:	2300      	movs	r3, #0
1a004664:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004668:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00466c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004670:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a004674:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004678:	f10d 030b 	add.w	r3, sp, #11
1a00467c:	9301      	str	r3, [sp, #4]
1a00467e:	ab03      	add	r3, sp, #12
1a004680:	9300      	str	r3, [sp, #0]
1a004682:	f10d 030d 	add.w	r3, sp, #13
1a004686:	f10d 020e 	add.w	r2, sp, #14
1a00468a:	f10d 010f 	add.w	r1, sp, #15
1a00468e:	f7ff feef 	bl	1a004470 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a004692:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004696:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00469a:	1c21      	adds	r1, r4, #0
1a00469c:	bf18      	it	ne
1a00469e:	2101      	movne	r1, #1
1a0046a0:	015b      	lsls	r3, r3, #5
1a0046a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0046a6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0046aa:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0046ac:	2001      	movs	r0, #1
}
1a0046ae:	b004      	add	sp, #16
1a0046b0:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0046b2:	2000      	movs	r0, #0
1a0046b4:	4770      	bx	lr
	  return FALSE;
1a0046b6:	2000      	movs	r0, #0
}
1a0046b8:	4770      	bx	lr

1a0046ba <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0046ba:	f110 0f02 	cmn.w	r0, #2
1a0046be:	d02c      	beq.n	1a00471a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0046c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0046c4:	d02b      	beq.n	1a00471e <gpioRead+0x64>
{
1a0046c6:	b500      	push	{lr}
1a0046c8:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0046ca:	2300      	movs	r3, #0
1a0046cc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0046d0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0046d4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0046d8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0046dc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0046e0:	f10d 030b 	add.w	r3, sp, #11
1a0046e4:	9301      	str	r3, [sp, #4]
1a0046e6:	ab03      	add	r3, sp, #12
1a0046e8:	9300      	str	r3, [sp, #0]
1a0046ea:	f10d 030d 	add.w	r3, sp, #13
1a0046ee:	f10d 020e 	add.w	r2, sp, #14
1a0046f2:	f10d 010f 	add.w	r1, sp, #15
1a0046f6:	f7ff febb 	bl	1a004470 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0046fa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0046fe:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a004702:	015b      	lsls	r3, r3, #5
1a004704:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004708:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00470c:	5c98      	ldrb	r0, [r3, r2]
1a00470e:	3000      	adds	r0, #0
1a004710:	bf18      	it	ne
1a004712:	2001      	movne	r0, #1

   return ret_val;
}
1a004714:	b005      	add	sp, #20
1a004716:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00471a:	2001      	movs	r0, #1
1a00471c:	4770      	bx	lr
      return FALSE;
1a00471e:	2000      	movs	r0, #0
}
1a004720:	4770      	bx	lr

1a004722 <gpioToggle>:
{
1a004722:	b510      	push	{r4, lr}
1a004724:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a004726:	f7ff ffc8 	bl	1a0046ba <gpioRead>
1a00472a:	fab0 f180 	clz	r1, r0
1a00472e:	0949      	lsrs	r1, r1, #5
1a004730:	4620      	mov	r0, r4
1a004732:	f7ff ff8d 	bl	1a004650 <gpioWrite>
}
1a004736:	bd10      	pop	{r4, pc}

1a004738 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a004738:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00473a:	4b04      	ldr	r3, [pc, #16]	; (1a00474c <USB0_IRQHandler+0x14>)
1a00473c:	681b      	ldr	r3, [r3, #0]
1a00473e:	681b      	ldr	r3, [r3, #0]
1a004740:	68db      	ldr	r3, [r3, #12]
1a004742:	4a03      	ldr	r2, [pc, #12]	; (1a004750 <USB0_IRQHandler+0x18>)
1a004744:	6810      	ldr	r0, [r2, #0]
1a004746:	4798      	blx	r3
}
1a004748:	bd08      	pop	{r3, pc}
1a00474a:	bf00      	nop
1a00474c:	10002e1c 	.word	0x10002e1c
1a004750:	10002dbc 	.word	0x10002dbc

1a004754 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004754:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a004756:	f7ff fb1b 	bl	1a003d90 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00475a:	4b18      	ldr	r3, [pc, #96]	; (1a0047bc <boardInit+0x68>)
1a00475c:	6818      	ldr	r0, [r3, #0]
1a00475e:	f7ff fc43 	bl	1a003fe8 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a004762:	2105      	movs	r1, #5
1a004764:	2000      	movs	r0, #0
1a004766:	f7ff fe9d 	bl	1a0044a4 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00476a:	2100      	movs	r1, #0
1a00476c:	2024      	movs	r0, #36	; 0x24
1a00476e:	f7ff fe99 	bl	1a0044a4 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a004772:	2100      	movs	r1, #0
1a004774:	2025      	movs	r0, #37	; 0x25
1a004776:	f7ff fe95 	bl	1a0044a4 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00477a:	2100      	movs	r1, #0
1a00477c:	2026      	movs	r0, #38	; 0x26
1a00477e:	f7ff fe91 	bl	1a0044a4 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a004782:	2100      	movs	r1, #0
1a004784:	2027      	movs	r0, #39	; 0x27
1a004786:	f7ff fe8d 	bl	1a0044a4 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00478a:	2101      	movs	r1, #1
1a00478c:	2028      	movs	r0, #40	; 0x28
1a00478e:	f7ff fe89 	bl	1a0044a4 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a004792:	2101      	movs	r1, #1
1a004794:	2029      	movs	r0, #41	; 0x29
1a004796:	f7ff fe85 	bl	1a0044a4 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00479a:	2101      	movs	r1, #1
1a00479c:	202a      	movs	r0, #42	; 0x2a
1a00479e:	f7ff fe81 	bl	1a0044a4 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0047a2:	2101      	movs	r1, #1
1a0047a4:	202b      	movs	r0, #43	; 0x2b
1a0047a6:	f7ff fe7d 	bl	1a0044a4 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0047aa:	2101      	movs	r1, #1
1a0047ac:	202c      	movs	r0, #44	; 0x2c
1a0047ae:	f7ff fe79 	bl	1a0044a4 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0047b2:	2101      	movs	r1, #1
1a0047b4:	202d      	movs	r0, #45	; 0x2d
1a0047b6:	f7ff fe75 	bl	1a0044a4 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0047ba:	bd08      	pop	{r3, pc}
1a0047bc:	10002e18 	.word	0x10002e18

1a0047c0 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0047c0:	b510      	push	{r4, lr}
1a0047c2:	4604      	mov	r4, r0
1a0047c4:	4610      	mov	r0, r2
1a0047c6:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0047c8:	4b04      	ldr	r3, [pc, #16]	; (1a0047dc <delayInit+0x1c>)
1a0047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0047ce:	f000 f9f9 	bl	1a004bc4 <__aeabi_uldivmod>
1a0047d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0047d6:	2300      	movs	r3, #0
1a0047d8:	7423      	strb	r3, [r4, #16]
}
1a0047da:	bd10      	pop	{r4, pc}
1a0047dc:	10000040 	.word	0x10000040

1a0047e0 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a0047e0:	b570      	push	{r4, r5, r6, lr}
1a0047e2:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0047e4:	7c05      	ldrb	r5, [r0, #16]
1a0047e6:	b195      	cbz	r5, 1a00480e <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0047e8:	f7ff fdb7 	bl	1a00435a <tickRead>
1a0047ec:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0047f0:	1a82      	subs	r2, r0, r2
1a0047f2:	eb61 0303 	sbc.w	r3, r1, r3
1a0047f6:	4615      	mov	r5, r2
1a0047f8:	461e      	mov	r6, r3
1a0047fa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0047fe:	429e      	cmp	r6, r3
1a004800:	bf08      	it	eq
1a004802:	4295      	cmpeq	r5, r2
1a004804:	d30b      	bcc.n	1a00481e <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a004806:	2300      	movs	r3, #0
1a004808:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a00480a:	2501      	movs	r5, #1
1a00480c:	e005      	b.n	1a00481a <delayRead+0x3a>
      delay->startTime = tickRead();
1a00480e:	f7ff fda4 	bl	1a00435a <tickRead>
1a004812:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a004816:	2301      	movs	r3, #1
1a004818:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a00481a:	4628      	mov	r0, r5
1a00481c:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a00481e:	2500      	movs	r5, #0
1a004820:	e7fb      	b.n	1a00481a <delayRead+0x3a>
1a004822:	Address 0x000000001a004822 is out of bounds.


1a004824 <_outbyte>:
static int print(char **out, int *varg);

/*==================[internal data definition]===============================*/

void _outbyte(int c)
{
1a004824:	b508      	push	{r3, lr}
   uartWriteByte(UartPrintf, (char)c);
1a004826:	b2c1      	uxtb	r1, r0
1a004828:	4b02      	ldr	r3, [pc, #8]	; (1a004834 <_outbyte+0x10>)
1a00482a:	7818      	ldrb	r0, [r3, #0]
1a00482c:	f7ff fd7e 	bl	1a00432c <uartWriteByte>
}
1a004830:	bd08      	pop	{r3, pc}
1a004832:	bf00      	nop
1a004834:	10000088 	.word	0x10000088

1a004838 <outbyte>:

void outbyte(int c)
{
   static char prev = 0;
   if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
1a004838:	281f      	cmp	r0, #31
1a00483a:	dc08      	bgt.n	1a00484e <outbyte+0x16>
1a00483c:	280d      	cmp	r0, #13
1a00483e:	d006      	beq.n	1a00484e <outbyte+0x16>
1a004840:	280a      	cmp	r0, #10
1a004842:	d004      	beq.n	1a00484e <outbyte+0x16>
1a004844:	2809      	cmp	r0, #9
1a004846:	d002      	beq.n	1a00484e <outbyte+0x16>
1a004848:	2808      	cmp	r0, #8
1a00484a:	d000      	beq.n	1a00484e <outbyte+0x16>
1a00484c:	4770      	bx	lr
{
1a00484e:	b510      	push	{r4, lr}
1a004850:	4604      	mov	r4, r0
      return;
   if (c == '\n' && prev != '\r') _outbyte('\r');
1a004852:	280a      	cmp	r0, #10
1a004854:	d005      	beq.n	1a004862 <outbyte+0x2a>
   _outbyte(c);
1a004856:	4620      	mov	r0, r4
1a004858:	f7ff ffe4 	bl	1a004824 <_outbyte>
   prev = c;
1a00485c:	4b05      	ldr	r3, [pc, #20]	; (1a004874 <outbyte+0x3c>)
1a00485e:	701c      	strb	r4, [r3, #0]
}
1a004860:	bd10      	pop	{r4, pc}
   if (c == '\n' && prev != '\r') _outbyte('\r');
1a004862:	4b04      	ldr	r3, [pc, #16]	; (1a004874 <outbyte+0x3c>)
1a004864:	781b      	ldrb	r3, [r3, #0]
1a004866:	2b0d      	cmp	r3, #13
1a004868:	d0f5      	beq.n	1a004856 <outbyte+0x1e>
1a00486a:	200d      	movs	r0, #13
1a00486c:	f7ff ffda 	bl	1a004824 <_outbyte>
1a004870:	e7f1      	b.n	1a004856 <outbyte+0x1e>
1a004872:	bf00      	nop
1a004874:	10002dc0 	.word	0x10002dc0

1a004878 <printchar>:
 * termina sacando un dato por la UART.
 * @param str
 * @param c
 */
static void printchar(char **str, int c)
{
1a004878:	b508      	push	{r3, lr}
   extern void putchar(int c);
   if (str) {
1a00487a:	b128      	cbz	r0, 1a004888 <printchar+0x10>
      **str = c;
1a00487c:	6802      	ldr	r2, [r0, #0]
1a00487e:	7011      	strb	r1, [r2, #0]
      ++(*str);
1a004880:	6802      	ldr	r2, [r0, #0]
1a004882:	3201      	adds	r2, #1
1a004884:	6002      	str	r2, [r0, #0]
   } else {
      (void)putchar(c);
   }
}
1a004886:	bd08      	pop	{r3, pc}
1a004888:	4608      	mov	r0, r1
      (void)putchar(c);
1a00488a:	f7ff ffd5 	bl	1a004838 <outbyte>
}
1a00488e:	e7fa      	b.n	1a004886 <printchar+0xe>

1a004890 <prints>:

static int prints(char **out, const char *string, int width, int pad)
{
1a004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004894:	4607      	mov	r7, r0
1a004896:	460e      	mov	r6, r1
   register int pc = 0, padchar = ' ';

   if (width > 0) {
1a004898:	1e15      	subs	r5, r2, #0
1a00489a:	dd02      	ble.n	1a0048a2 <prints+0x12>
      register int len = 0;
      register const char *ptr;
      for (ptr = string; *ptr; ++ptr) ++len;
1a00489c:	460a      	mov	r2, r1
      register int len = 0;
1a00489e:	2100      	movs	r1, #0
1a0048a0:	e008      	b.n	1a0048b4 <prints+0x24>
   register int pc = 0, padchar = ' ';
1a0048a2:	f04f 0820 	mov.w	r8, #32
      if (len >= width) width = 0;
      else width -= len;
      if (pad & PAD_ZERO) padchar = '0';
   }
   if (!(pad & PAD_RIGHT)) {
1a0048a6:	f013 0401 	ands.w	r4, r3, #1
1a0048aa:	d01a      	beq.n	1a0048e2 <prints+0x52>
   register int pc = 0, padchar = ' ';
1a0048ac:	2400      	movs	r4, #0
1a0048ae:	e020      	b.n	1a0048f2 <prints+0x62>
      for (ptr = string; *ptr; ++ptr) ++len;
1a0048b0:	3101      	adds	r1, #1
1a0048b2:	3201      	adds	r2, #1
1a0048b4:	7810      	ldrb	r0, [r2, #0]
1a0048b6:	2800      	cmp	r0, #0
1a0048b8:	d1fa      	bne.n	1a0048b0 <prints+0x20>
      if (len >= width) width = 0;
1a0048ba:	42a9      	cmp	r1, r5
1a0048bc:	da06      	bge.n	1a0048cc <prints+0x3c>
      else width -= len;
1a0048be:	1a6d      	subs	r5, r5, r1
      if (pad & PAD_ZERO) padchar = '0';
1a0048c0:	f013 0f02 	tst.w	r3, #2
1a0048c4:	d104      	bne.n	1a0048d0 <prints+0x40>
   register int pc = 0, padchar = ' ';
1a0048c6:	f04f 0820 	mov.w	r8, #32
1a0048ca:	e7ec      	b.n	1a0048a6 <prints+0x16>
      if (len >= width) width = 0;
1a0048cc:	2500      	movs	r5, #0
1a0048ce:	e7f7      	b.n	1a0048c0 <prints+0x30>
      if (pad & PAD_ZERO) padchar = '0';
1a0048d0:	f04f 0830 	mov.w	r8, #48	; 0x30
1a0048d4:	e7e7      	b.n	1a0048a6 <prints+0x16>
      for ( ; width > 0; --width) {
         printchar (out, padchar);
1a0048d6:	4641      	mov	r1, r8
1a0048d8:	4638      	mov	r0, r7
1a0048da:	f7ff ffcd 	bl	1a004878 <printchar>
         ++pc;
1a0048de:	3401      	adds	r4, #1
      for ( ; width > 0; --width) {
1a0048e0:	3d01      	subs	r5, #1
1a0048e2:	2d00      	cmp	r5, #0
1a0048e4:	dcf7      	bgt.n	1a0048d6 <prints+0x46>
1a0048e6:	e004      	b.n	1a0048f2 <prints+0x62>
      }
   }
   for ( ; *string ; ++string) {
      printchar (out, *string);
1a0048e8:	4638      	mov	r0, r7
1a0048ea:	f7ff ffc5 	bl	1a004878 <printchar>
      ++pc;
1a0048ee:	3401      	adds	r4, #1
   for ( ; *string ; ++string) {
1a0048f0:	3601      	adds	r6, #1
1a0048f2:	7831      	ldrb	r1, [r6, #0]
1a0048f4:	2900      	cmp	r1, #0
1a0048f6:	d1f7      	bne.n	1a0048e8 <prints+0x58>
1a0048f8:	e005      	b.n	1a004906 <prints+0x76>
   }
   for ( ; width > 0; --width) {
      printchar (out, padchar);
1a0048fa:	4641      	mov	r1, r8
1a0048fc:	4638      	mov	r0, r7
1a0048fe:	f7ff ffbb 	bl	1a004878 <printchar>
      ++pc;
1a004902:	3401      	adds	r4, #1
   for ( ; width > 0; --width) {
1a004904:	3d01      	subs	r5, #1
1a004906:	2d00      	cmp	r5, #0
1a004908:	dcf7      	bgt.n	1a0048fa <prints+0x6a>
   }
   return pc;
}
1a00490a:	4620      	mov	r0, r4
1a00490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a004910 <printi>:

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
1a004910:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004912:	b085      	sub	sp, #20
1a004914:	4607      	mov	r7, r0
1a004916:	980c      	ldr	r0, [sp, #48]	; 0x30
   char print_buf[PRINT_BUF_LEN];
   register char *s;
   register int t, neg = 0, pc = 0;
   register unsigned int u = i;

   if (i == 0) {
1a004918:	b151      	cbz	r1, 1a004930 <printi+0x20>
1a00491a:	461e      	mov	r6, r3
1a00491c:	460c      	mov	r4, r1
      print_buf[0] = '0';
      print_buf[1] = '\0';
      return prints (out, print_buf, width, pad);
   }

   if (sg && b == 10 && i < 0) {
1a00491e:	b113      	cbz	r3, 1a004926 <printi+0x16>
1a004920:	2a0a      	cmp	r2, #10
1a004922:	d012      	beq.n	1a00494a <printi+0x3a>
   register int t, neg = 0, pc = 0;
1a004924:	2600      	movs	r6, #0
      neg = 1;
      u = -i;
   }

   s = print_buf + PRINT_BUF_LEN-1;
   *s = '\0';
1a004926:	ad04      	add	r5, sp, #16
1a004928:	2300      	movs	r3, #0
1a00492a:	f805 3d01 	strb.w	r3, [r5, #-1]!

   while (u) {
1a00492e:	e018      	b.n	1a004962 <printi+0x52>
      print_buf[0] = '0';
1a004930:	2330      	movs	r3, #48	; 0x30
1a004932:	f88d 3004 	strb.w	r3, [sp, #4]
      print_buf[1] = '\0';
1a004936:	2300      	movs	r3, #0
1a004938:	f88d 3005 	strb.w	r3, [sp, #5]
      return prints (out, print_buf, width, pad);
1a00493c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00493e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004940:	a901      	add	r1, sp, #4
1a004942:	4638      	mov	r0, r7
1a004944:	f7ff ffa4 	bl	1a004890 <prints>
1a004948:	e029      	b.n	1a00499e <printi+0x8e>
   if (sg && b == 10 && i < 0) {
1a00494a:	2900      	cmp	r1, #0
1a00494c:	db01      	blt.n	1a004952 <printi+0x42>
   register int t, neg = 0, pc = 0;
1a00494e:	2600      	movs	r6, #0
1a004950:	e7e9      	b.n	1a004926 <printi+0x16>
      u = -i;
1a004952:	424c      	negs	r4, r1
      neg = 1;
1a004954:	2601      	movs	r6, #1
1a004956:	e7e6      	b.n	1a004926 <printi+0x16>
      t = u % b;
      if( t >= 10 )
         t += letbase - '0' - 10;
      *--s = t + '0';
1a004958:	3330      	adds	r3, #48	; 0x30
1a00495a:	f805 3d01 	strb.w	r3, [r5, #-1]!
      u /= b;
1a00495e:	fbb4 f4f2 	udiv	r4, r4, r2
   while (u) {
1a004962:	b14c      	cbz	r4, 1a004978 <printi+0x68>
      t = u % b;
1a004964:	fbb4 f3f2 	udiv	r3, r4, r2
1a004968:	fb02 4313 	mls	r3, r2, r3, r4
      if( t >= 10 )
1a00496c:	2b09      	cmp	r3, #9
1a00496e:	ddf3      	ble.n	1a004958 <printi+0x48>
         t += letbase - '0' - 10;
1a004970:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
1a004974:	440b      	add	r3, r1
1a004976:	e7ef      	b.n	1a004958 <printi+0x48>
   }

   if (neg) {
1a004978:	b156      	cbz	r6, 1a004990 <printi+0x80>
      if( width && (pad & PAD_ZERO) ) {
1a00497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00497c:	b11b      	cbz	r3, 1a004986 <printi+0x76>
1a00497e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004980:	f013 0f02 	tst.w	r3, #2
1a004984:	d10d      	bne.n	1a0049a2 <printi+0x92>
         printchar (out, '-');
         ++pc;
         --width;
      } else {
         *--s = '-';
1a004986:	232d      	movs	r3, #45	; 0x2d
1a004988:	f805 3c01 	strb.w	r3, [r5, #-1]
1a00498c:	3d01      	subs	r5, #1
   register int t, neg = 0, pc = 0;
1a00498e:	2600      	movs	r6, #0
      }
   }

   return pc + prints (out, s, width, pad);
1a004990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004994:	4629      	mov	r1, r5
1a004996:	4638      	mov	r0, r7
1a004998:	f7ff ff7a 	bl	1a004890 <prints>
1a00499c:	4430      	add	r0, r6
}
1a00499e:	b005      	add	sp, #20
1a0049a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
         printchar (out, '-');
1a0049a2:	212d      	movs	r1, #45	; 0x2d
1a0049a4:	4638      	mov	r0, r7
1a0049a6:	f7ff ff67 	bl	1a004878 <printchar>
         --width;
1a0049aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0049ac:	3b01      	subs	r3, #1
1a0049ae:	930a      	str	r3, [sp, #40]	; 0x28
1a0049b0:	e7ee      	b.n	1a004990 <printi+0x80>
1a0049b2:	Address 0x000000001a0049b2 is out of bounds.


1a0049b4 <print>:

static int print(char **out, int *varg)
{
1a0049b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0049b8:	b086      	sub	sp, #24
1a0049ba:	4606      	mov	r6, r0
   register int width, pad;
   register int pc = 0;
   register char *format = (char *)(*varg++);
1a0049bc:	1d0f      	adds	r7, r1, #4
1a0049be:	680c      	ldr	r4, [r1, #0]
   register int pc = 0;
1a0049c0:	2500      	movs	r5, #0
   char scr[2];

   for (; *format != 0; ++format) {
1a0049c2:	e081      	b.n	1a004ac8 <print+0x114>
         ++format;
         width = pad = 0;
         if (*format == '\0') break;
         if (*format == '%') goto out;
         if (*format == '-') {
            ++format;
1a0049c4:	1ca2      	adds	r2, r4, #2
            pad = PAD_RIGHT;
1a0049c6:	2301      	movs	r3, #1
1a0049c8:	e08b      	b.n	1a004ae2 <print+0x12e>
         }
         while (*format == '0') {
            ++format;
1a0049ca:	3401      	adds	r4, #1
            pad |= PAD_ZERO;
1a0049cc:	f043 0302 	orr.w	r3, r3, #2
         while (*format == '0') {
1a0049d0:	7822      	ldrb	r2, [r4, #0]
1a0049d2:	2a30      	cmp	r2, #48	; 0x30
1a0049d4:	d0f9      	beq.n	1a0049ca <print+0x16>
         width = pad = 0;
1a0049d6:	2200      	movs	r2, #0
1a0049d8:	e006      	b.n	1a0049e8 <print+0x34>
         }
         for ( ; *format >= '0' && *format <= '9'; ++format) {
            width *= 10;
1a0049da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0049de:	0050      	lsls	r0, r2, #1
            width += *format - '0';
1a0049e0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a0049e4:	4402      	add	r2, r0
         for ( ; *format >= '0' && *format <= '9'; ++format) {
1a0049e6:	3401      	adds	r4, #1
1a0049e8:	7821      	ldrb	r1, [r4, #0]
1a0049ea:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
1a0049ee:	b2c0      	uxtb	r0, r0
1a0049f0:	2809      	cmp	r0, #9
1a0049f2:	d9f2      	bls.n	1a0049da <print+0x26>
         }
         if( *format == 's' ) {
1a0049f4:	2973      	cmp	r1, #115	; 0x73
1a0049f6:	d018      	beq.n	1a004a2a <print+0x76>
            register char *s = *((char **)varg++);
            pc += prints (out, s?s:"(null)", width, pad);
            continue;
         }
         if( *format == 'd' ) {
1a0049f8:	2964      	cmp	r1, #100	; 0x64
1a0049fa:	d022      	beq.n	1a004a42 <print+0x8e>
            pc += printi (out, *varg++, 10, 1, width, pad, 'a');
            continue;
         }
         if( *format == 'x' ) {
1a0049fc:	2978      	cmp	r1, #120	; 0x78
1a0049fe:	d02f      	beq.n	1a004a60 <print+0xac>
            pc += printi (out, *varg++, 16, 0, width, pad, 'a');
            continue;
         }
         if( *format == 'X' ) {
1a004a00:	2958      	cmp	r1, #88	; 0x58
1a004a02:	d03c      	beq.n	1a004a7e <print+0xca>
            pc += printi (out, *varg++, 16, 0, width, pad, 'A');
            continue;
         }
         if( *format == 'u' ) {
1a004a04:	2975      	cmp	r1, #117	; 0x75
1a004a06:	d049      	beq.n	1a004a9c <print+0xe8>
            pc += printi (out, *varg++, 10, 0, width, pad, 'a');
            continue;
         }
         if( *format == 'c' ) {
1a004a08:	2963      	cmp	r1, #99	; 0x63
1a004a0a:	d15c      	bne.n	1a004ac6 <print+0x112>
            /* char are converted to int then pushed on the stack */
            scr[0] = *varg++;
1a004a0c:	f107 0804 	add.w	r8, r7, #4
1a004a10:	6839      	ldr	r1, [r7, #0]
1a004a12:	f88d 1014 	strb.w	r1, [sp, #20]
            scr[1] = '\0';
1a004a16:	2100      	movs	r1, #0
1a004a18:	f88d 1015 	strb.w	r1, [sp, #21]
            pc += prints (out, scr, width, pad);
1a004a1c:	a905      	add	r1, sp, #20
1a004a1e:	4630      	mov	r0, r6
1a004a20:	f7ff ff36 	bl	1a004890 <prints>
1a004a24:	4405      	add	r5, r0
            scr[0] = *varg++;
1a004a26:	4647      	mov	r7, r8
            continue;
1a004a28:	e04d      	b.n	1a004ac6 <print+0x112>
            register char *s = *((char **)varg++);
1a004a2a:	f107 0804 	add.w	r8, r7, #4
1a004a2e:	6839      	ldr	r1, [r7, #0]
            pc += prints (out, s?s:"(null)", width, pad);
1a004a30:	b129      	cbz	r1, 1a004a3e <print+0x8a>
1a004a32:	4630      	mov	r0, r6
1a004a34:	f7ff ff2c 	bl	1a004890 <prints>
1a004a38:	4405      	add	r5, r0
            register char *s = *((char **)varg++);
1a004a3a:	4647      	mov	r7, r8
            continue;
1a004a3c:	e043      	b.n	1a004ac6 <print+0x112>
            pc += prints (out, s?s:"(null)", width, pad);
1a004a3e:	492e      	ldr	r1, [pc, #184]	; (1a004af8 <print+0x144>)
1a004a40:	e7f7      	b.n	1a004a32 <print+0x7e>
            pc += printi (out, *varg++, 10, 1, width, pad, 'a');
1a004a42:	f107 0804 	add.w	r8, r7, #4
1a004a46:	6839      	ldr	r1, [r7, #0]
1a004a48:	2061      	movs	r0, #97	; 0x61
1a004a4a:	9002      	str	r0, [sp, #8]
1a004a4c:	9301      	str	r3, [sp, #4]
1a004a4e:	9200      	str	r2, [sp, #0]
1a004a50:	2301      	movs	r3, #1
1a004a52:	220a      	movs	r2, #10
1a004a54:	4630      	mov	r0, r6
1a004a56:	f7ff ff5b 	bl	1a004910 <printi>
1a004a5a:	4405      	add	r5, r0
1a004a5c:	4647      	mov	r7, r8
            continue;
1a004a5e:	e032      	b.n	1a004ac6 <print+0x112>
            pc += printi (out, *varg++, 16, 0, width, pad, 'a');
1a004a60:	f107 0804 	add.w	r8, r7, #4
1a004a64:	6839      	ldr	r1, [r7, #0]
1a004a66:	2061      	movs	r0, #97	; 0x61
1a004a68:	9002      	str	r0, [sp, #8]
1a004a6a:	9301      	str	r3, [sp, #4]
1a004a6c:	9200      	str	r2, [sp, #0]
1a004a6e:	2300      	movs	r3, #0
1a004a70:	2210      	movs	r2, #16
1a004a72:	4630      	mov	r0, r6
1a004a74:	f7ff ff4c 	bl	1a004910 <printi>
1a004a78:	4405      	add	r5, r0
1a004a7a:	4647      	mov	r7, r8
            continue;
1a004a7c:	e023      	b.n	1a004ac6 <print+0x112>
            pc += printi (out, *varg++, 16, 0, width, pad, 'A');
1a004a7e:	f107 0804 	add.w	r8, r7, #4
1a004a82:	6839      	ldr	r1, [r7, #0]
1a004a84:	2041      	movs	r0, #65	; 0x41
1a004a86:	9002      	str	r0, [sp, #8]
1a004a88:	9301      	str	r3, [sp, #4]
1a004a8a:	9200      	str	r2, [sp, #0]
1a004a8c:	2300      	movs	r3, #0
1a004a8e:	2210      	movs	r2, #16
1a004a90:	4630      	mov	r0, r6
1a004a92:	f7ff ff3d 	bl	1a004910 <printi>
1a004a96:	4405      	add	r5, r0
1a004a98:	4647      	mov	r7, r8
            continue;
1a004a9a:	e014      	b.n	1a004ac6 <print+0x112>
            pc += printi (out, *varg++, 10, 0, width, pad, 'a');
1a004a9c:	f107 0804 	add.w	r8, r7, #4
1a004aa0:	6839      	ldr	r1, [r7, #0]
1a004aa2:	2061      	movs	r0, #97	; 0x61
1a004aa4:	9002      	str	r0, [sp, #8]
1a004aa6:	9301      	str	r3, [sp, #4]
1a004aa8:	9200      	str	r2, [sp, #0]
1a004aaa:	2300      	movs	r3, #0
1a004aac:	220a      	movs	r2, #10
1a004aae:	4630      	mov	r0, r6
1a004ab0:	f7ff ff2e 	bl	1a004910 <printi>
1a004ab4:	4405      	add	r5, r0
1a004ab6:	4647      	mov	r7, r8
            continue;
1a004ab8:	e005      	b.n	1a004ac6 <print+0x112>
         ++format;
1a004aba:	4614      	mov	r4, r2
         }
      } else {
out:
         printchar (out, *format);
1a004abc:	7821      	ldrb	r1, [r4, #0]
1a004abe:	4630      	mov	r0, r6
1a004ac0:	f7ff feda 	bl	1a004878 <printchar>
         ++pc;
1a004ac4:	3501      	adds	r5, #1
   for (; *format != 0; ++format) {
1a004ac6:	3401      	adds	r4, #1
1a004ac8:	7823      	ldrb	r3, [r4, #0]
1a004aca:	b163      	cbz	r3, 1a004ae6 <print+0x132>
      if (*format == '%') {
1a004acc:	2b25      	cmp	r3, #37	; 0x25
1a004ace:	d1f5      	bne.n	1a004abc <print+0x108>
         ++format;
1a004ad0:	1c62      	adds	r2, r4, #1
         if (*format == '\0') break;
1a004ad2:	7863      	ldrb	r3, [r4, #1]
1a004ad4:	b13b      	cbz	r3, 1a004ae6 <print+0x132>
         if (*format == '%') goto out;
1a004ad6:	2b25      	cmp	r3, #37	; 0x25
1a004ad8:	d0ef      	beq.n	1a004aba <print+0x106>
         if (*format == '-') {
1a004ada:	2b2d      	cmp	r3, #45	; 0x2d
1a004adc:	f43f af72 	beq.w	1a0049c4 <print+0x10>
         width = pad = 0;
1a004ae0:	2300      	movs	r3, #0
            pad = PAD_RIGHT;
1a004ae2:	4614      	mov	r4, r2
1a004ae4:	e774      	b.n	1a0049d0 <print+0x1c>
      }
   }
   if (out) **out = '\0';
1a004ae6:	b116      	cbz	r6, 1a004aee <print+0x13a>
1a004ae8:	6833      	ldr	r3, [r6, #0]
1a004aea:	2200      	movs	r2, #0
1a004aec:	701a      	strb	r2, [r3, #0]
   return pc;
}
1a004aee:	4628      	mov	r0, r5
1a004af0:	b006      	add	sp, #24
1a004af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004af6:	bf00      	nop
1a004af8:	1a0075c0 	.word	0x1a0075c0

1a004afc <stdioPrintf>:
 * @param uartPrintf UART_USB, UART_232 o UART_485
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioPrintf(uartMap_t uartPrintf, const char *format, ...)
{
1a004afc:	b40e      	push	{r1, r2, r3}
1a004afe:	b500      	push	{lr}
   register int *varg = (int *)(&format);
   UartPrintf = uartPrintf;
1a004b00:	4b04      	ldr	r3, [pc, #16]	; (1a004b14 <stdioPrintf+0x18>)
1a004b02:	7018      	strb	r0, [r3, #0]
   return print(0, varg);
1a004b04:	a901      	add	r1, sp, #4
1a004b06:	2000      	movs	r0, #0
1a004b08:	f7ff ff54 	bl	1a0049b4 <print>
}
1a004b0c:	f85d eb04 	ldr.w	lr, [sp], #4
1a004b10:	b003      	add	sp, #12
1a004b12:	4770      	bx	lr
1a004b14:	10000088 	.word	0x10000088

1a004b18 <stdioSprintf>:
 * @param out el array a guardar los datos.
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioSprintf(char *out, const char *format, ...)
{
1a004b18:	b40e      	push	{r1, r2, r3}
1a004b1a:	b500      	push	{lr}
1a004b1c:	b082      	sub	sp, #8
1a004b1e:	ab02      	add	r3, sp, #8
1a004b20:	f843 0d04 	str.w	r0, [r3, #-4]!
   register int *varg = (int *)(&format);
   return print(&out, varg);
1a004b24:	a903      	add	r1, sp, #12
1a004b26:	4618      	mov	r0, r3
1a004b28:	f7ff ff44 	bl	1a0049b4 <print>
}
1a004b2c:	b002      	add	sp, #8
1a004b2e:	f85d eb04 	ldr.w	lr, [sp], #4
1a004b32:	b003      	add	sp, #12
1a004b34:	4770      	bx	lr
1a004b36:	Address 0x000000001a004b36 is out of bounds.


1a004b38 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a004b38:	2301      	movs	r3, #1
1a004b3a:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a004b3e:	4b01      	ldr	r3, [pc, #4]	; (1a004b44 <clearInterrupt+0xc>)
1a004b40:	6258      	str	r0, [r3, #36]	; 0x24
}
1a004b42:	4770      	bx	lr
1a004b44:	40087000 	.word	0x40087000

1a004b48 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a004b4a:	4b12      	ldr	r3, [pc, #72]	; (1a004b94 <serveInterrupt+0x4c>)
1a004b4c:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a004b4e:	4b12      	ldr	r3, [pc, #72]	; (1a004b98 <serveInterrupt+0x50>)
1a004b50:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a004b52:	2301      	movs	r3, #1
1a004b54:	4083      	lsls	r3, r0
1a004b56:	420b      	tst	r3, r1
1a004b58:	d111      	bne.n	1a004b7e <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a004b5a:	4910      	ldr	r1, [pc, #64]	; (1a004b9c <serveInterrupt+0x54>)
1a004b5c:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a004b5e:	4d10      	ldr	r5, [pc, #64]	; (1a004ba0 <serveInterrupt+0x58>)
1a004b60:	0051      	lsls	r1, r2, #1
1a004b62:	188f      	adds	r7, r1, r2
1a004b64:	00fc      	lsls	r4, r7, #3
1a004b66:	4627      	mov	r7, r4
1a004b68:	442c      	add	r4, r5
1a004b6a:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a004b6c:	6864      	ldr	r4, [r4, #4]
1a004b6e:	1b36      	subs	r6, r6, r4
1a004b70:	443d      	add	r5, r7
1a004b72:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a004b74:	4a08      	ldr	r2, [pc, #32]	; (1a004b98 <serveInterrupt+0x50>)
1a004b76:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a004b78:	f7ff ffde 	bl	1a004b38 <clearInterrupt>
}
1a004b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004b7e:	4907      	ldr	r1, [pc, #28]	; (1a004b9c <serveInterrupt+0x54>)
1a004b80:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a004b82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a004b86:	00d1      	lsls	r1, r2, #3
1a004b88:	4a05      	ldr	r2, [pc, #20]	; (1a004ba0 <serveInterrupt+0x58>)
1a004b8a:	440a      	add	r2, r1
1a004b8c:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a004b8e:	4a02      	ldr	r2, [pc, #8]	; (1a004b98 <serveInterrupt+0x50>)
1a004b90:	61d3      	str	r3, [r2, #28]
1a004b92:	e7f1      	b.n	1a004b78 <serveInterrupt+0x30>
1a004b94:	1a0075c8 	.word	0x1a0075c8
1a004b98:	40087000 	.word	0x40087000
1a004b9c:	40084000 	.word	0x40084000
1a004ba0:	1000008c 	.word	0x1000008c

1a004ba4 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a004ba4:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a004ba6:	2000      	movs	r0, #0
1a004ba8:	f7ff ffce 	bl	1a004b48 <serveInterrupt>
}
1a004bac:	bd08      	pop	{r3, pc}

1a004bae <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a004bae:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a004bb0:	2001      	movs	r0, #1
1a004bb2:	f7ff ffc9 	bl	1a004b48 <serveInterrupt>
}
1a004bb6:	bd08      	pop	{r3, pc}

1a004bb8 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a004bb8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a004bba:	2002      	movs	r0, #2
1a004bbc:	f7ff ffc4 	bl	1a004b48 <serveInterrupt>
}
1a004bc0:	bd08      	pop	{r3, pc}
1a004bc2:	Address 0x000000001a004bc2 is out of bounds.


1a004bc4 <__aeabi_uldivmod>:
1a004bc4:	b953      	cbnz	r3, 1a004bdc <__aeabi_uldivmod+0x18>
1a004bc6:	b94a      	cbnz	r2, 1a004bdc <__aeabi_uldivmod+0x18>
1a004bc8:	2900      	cmp	r1, #0
1a004bca:	bf08      	it	eq
1a004bcc:	2800      	cmpeq	r0, #0
1a004bce:	bf1c      	itt	ne
1a004bd0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a004bd4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004bd8:	f000 b972 	b.w	1a004ec0 <__aeabi_idiv0>
1a004bdc:	f1ad 0c08 	sub.w	ip, sp, #8
1a004be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a004be4:	f000 f806 	bl	1a004bf4 <__udivmoddi4>
1a004be8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004bf0:	b004      	add	sp, #16
1a004bf2:	4770      	bx	lr

1a004bf4 <__udivmoddi4>:
1a004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004bf8:	9e08      	ldr	r6, [sp, #32]
1a004bfa:	4604      	mov	r4, r0
1a004bfc:	4688      	mov	r8, r1
1a004bfe:	2b00      	cmp	r3, #0
1a004c00:	d14b      	bne.n	1a004c9a <__udivmoddi4+0xa6>
1a004c02:	428a      	cmp	r2, r1
1a004c04:	4615      	mov	r5, r2
1a004c06:	d967      	bls.n	1a004cd8 <__udivmoddi4+0xe4>
1a004c08:	fab2 f282 	clz	r2, r2
1a004c0c:	b14a      	cbz	r2, 1a004c22 <__udivmoddi4+0x2e>
1a004c0e:	f1c2 0720 	rsb	r7, r2, #32
1a004c12:	fa01 f302 	lsl.w	r3, r1, r2
1a004c16:	fa20 f707 	lsr.w	r7, r0, r7
1a004c1a:	4095      	lsls	r5, r2
1a004c1c:	ea47 0803 	orr.w	r8, r7, r3
1a004c20:	4094      	lsls	r4, r2
1a004c22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004c26:	0c23      	lsrs	r3, r4, #16
1a004c28:	fbb8 f7fe 	udiv	r7, r8, lr
1a004c2c:	fa1f fc85 	uxth.w	ip, r5
1a004c30:	fb0e 8817 	mls	r8, lr, r7, r8
1a004c34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a004c38:	fb07 f10c 	mul.w	r1, r7, ip
1a004c3c:	4299      	cmp	r1, r3
1a004c3e:	d909      	bls.n	1a004c54 <__udivmoddi4+0x60>
1a004c40:	18eb      	adds	r3, r5, r3
1a004c42:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a004c46:	f080 811b 	bcs.w	1a004e80 <__udivmoddi4+0x28c>
1a004c4a:	4299      	cmp	r1, r3
1a004c4c:	f240 8118 	bls.w	1a004e80 <__udivmoddi4+0x28c>
1a004c50:	3f02      	subs	r7, #2
1a004c52:	442b      	add	r3, r5
1a004c54:	1a5b      	subs	r3, r3, r1
1a004c56:	b2a4      	uxth	r4, r4
1a004c58:	fbb3 f0fe 	udiv	r0, r3, lr
1a004c5c:	fb0e 3310 	mls	r3, lr, r0, r3
1a004c60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a004c64:	fb00 fc0c 	mul.w	ip, r0, ip
1a004c68:	45a4      	cmp	ip, r4
1a004c6a:	d909      	bls.n	1a004c80 <__udivmoddi4+0x8c>
1a004c6c:	192c      	adds	r4, r5, r4
1a004c6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004c72:	f080 8107 	bcs.w	1a004e84 <__udivmoddi4+0x290>
1a004c76:	45a4      	cmp	ip, r4
1a004c78:	f240 8104 	bls.w	1a004e84 <__udivmoddi4+0x290>
1a004c7c:	3802      	subs	r0, #2
1a004c7e:	442c      	add	r4, r5
1a004c80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a004c84:	eba4 040c 	sub.w	r4, r4, ip
1a004c88:	2700      	movs	r7, #0
1a004c8a:	b11e      	cbz	r6, 1a004c94 <__udivmoddi4+0xa0>
1a004c8c:	40d4      	lsrs	r4, r2
1a004c8e:	2300      	movs	r3, #0
1a004c90:	e9c6 4300 	strd	r4, r3, [r6]
1a004c94:	4639      	mov	r1, r7
1a004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004c9a:	428b      	cmp	r3, r1
1a004c9c:	d909      	bls.n	1a004cb2 <__udivmoddi4+0xbe>
1a004c9e:	2e00      	cmp	r6, #0
1a004ca0:	f000 80eb 	beq.w	1a004e7a <__udivmoddi4+0x286>
1a004ca4:	2700      	movs	r7, #0
1a004ca6:	e9c6 0100 	strd	r0, r1, [r6]
1a004caa:	4638      	mov	r0, r7
1a004cac:	4639      	mov	r1, r7
1a004cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004cb2:	fab3 f783 	clz	r7, r3
1a004cb6:	2f00      	cmp	r7, #0
1a004cb8:	d147      	bne.n	1a004d4a <__udivmoddi4+0x156>
1a004cba:	428b      	cmp	r3, r1
1a004cbc:	d302      	bcc.n	1a004cc4 <__udivmoddi4+0xd0>
1a004cbe:	4282      	cmp	r2, r0
1a004cc0:	f200 80fa 	bhi.w	1a004eb8 <__udivmoddi4+0x2c4>
1a004cc4:	1a84      	subs	r4, r0, r2
1a004cc6:	eb61 0303 	sbc.w	r3, r1, r3
1a004cca:	2001      	movs	r0, #1
1a004ccc:	4698      	mov	r8, r3
1a004cce:	2e00      	cmp	r6, #0
1a004cd0:	d0e0      	beq.n	1a004c94 <__udivmoddi4+0xa0>
1a004cd2:	e9c6 4800 	strd	r4, r8, [r6]
1a004cd6:	e7dd      	b.n	1a004c94 <__udivmoddi4+0xa0>
1a004cd8:	b902      	cbnz	r2, 1a004cdc <__udivmoddi4+0xe8>
1a004cda:	deff      	udf	#255	; 0xff
1a004cdc:	fab2 f282 	clz	r2, r2
1a004ce0:	2a00      	cmp	r2, #0
1a004ce2:	f040 808f 	bne.w	1a004e04 <__udivmoddi4+0x210>
1a004ce6:	1b49      	subs	r1, r1, r5
1a004ce8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004cec:	fa1f f885 	uxth.w	r8, r5
1a004cf0:	2701      	movs	r7, #1
1a004cf2:	fbb1 fcfe 	udiv	ip, r1, lr
1a004cf6:	0c23      	lsrs	r3, r4, #16
1a004cf8:	fb0e 111c 	mls	r1, lr, ip, r1
1a004cfc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004d00:	fb08 f10c 	mul.w	r1, r8, ip
1a004d04:	4299      	cmp	r1, r3
1a004d06:	d907      	bls.n	1a004d18 <__udivmoddi4+0x124>
1a004d08:	18eb      	adds	r3, r5, r3
1a004d0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004d0e:	d202      	bcs.n	1a004d16 <__udivmoddi4+0x122>
1a004d10:	4299      	cmp	r1, r3
1a004d12:	f200 80cd 	bhi.w	1a004eb0 <__udivmoddi4+0x2bc>
1a004d16:	4684      	mov	ip, r0
1a004d18:	1a59      	subs	r1, r3, r1
1a004d1a:	b2a3      	uxth	r3, r4
1a004d1c:	fbb1 f0fe 	udiv	r0, r1, lr
1a004d20:	fb0e 1410 	mls	r4, lr, r0, r1
1a004d24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004d28:	fb08 f800 	mul.w	r8, r8, r0
1a004d2c:	45a0      	cmp	r8, r4
1a004d2e:	d907      	bls.n	1a004d40 <__udivmoddi4+0x14c>
1a004d30:	192c      	adds	r4, r5, r4
1a004d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004d36:	d202      	bcs.n	1a004d3e <__udivmoddi4+0x14a>
1a004d38:	45a0      	cmp	r8, r4
1a004d3a:	f200 80b6 	bhi.w	1a004eaa <__udivmoddi4+0x2b6>
1a004d3e:	4618      	mov	r0, r3
1a004d40:	eba4 0408 	sub.w	r4, r4, r8
1a004d44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a004d48:	e79f      	b.n	1a004c8a <__udivmoddi4+0x96>
1a004d4a:	f1c7 0c20 	rsb	ip, r7, #32
1a004d4e:	40bb      	lsls	r3, r7
1a004d50:	fa22 fe0c 	lsr.w	lr, r2, ip
1a004d54:	ea4e 0e03 	orr.w	lr, lr, r3
1a004d58:	fa01 f407 	lsl.w	r4, r1, r7
1a004d5c:	fa20 f50c 	lsr.w	r5, r0, ip
1a004d60:	fa21 f30c 	lsr.w	r3, r1, ip
1a004d64:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a004d68:	4325      	orrs	r5, r4
1a004d6a:	fbb3 f9f8 	udiv	r9, r3, r8
1a004d6e:	0c2c      	lsrs	r4, r5, #16
1a004d70:	fb08 3319 	mls	r3, r8, r9, r3
1a004d74:	fa1f fa8e 	uxth.w	sl, lr
1a004d78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a004d7c:	fb09 f40a 	mul.w	r4, r9, sl
1a004d80:	429c      	cmp	r4, r3
1a004d82:	fa02 f207 	lsl.w	r2, r2, r7
1a004d86:	fa00 f107 	lsl.w	r1, r0, r7
1a004d8a:	d90b      	bls.n	1a004da4 <__udivmoddi4+0x1b0>
1a004d8c:	eb1e 0303 	adds.w	r3, lr, r3
1a004d90:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a004d94:	f080 8087 	bcs.w	1a004ea6 <__udivmoddi4+0x2b2>
1a004d98:	429c      	cmp	r4, r3
1a004d9a:	f240 8084 	bls.w	1a004ea6 <__udivmoddi4+0x2b2>
1a004d9e:	f1a9 0902 	sub.w	r9, r9, #2
1a004da2:	4473      	add	r3, lr
1a004da4:	1b1b      	subs	r3, r3, r4
1a004da6:	b2ad      	uxth	r5, r5
1a004da8:	fbb3 f0f8 	udiv	r0, r3, r8
1a004dac:	fb08 3310 	mls	r3, r8, r0, r3
1a004db0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a004db4:	fb00 fa0a 	mul.w	sl, r0, sl
1a004db8:	45a2      	cmp	sl, r4
1a004dba:	d908      	bls.n	1a004dce <__udivmoddi4+0x1da>
1a004dbc:	eb1e 0404 	adds.w	r4, lr, r4
1a004dc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a004dc4:	d26b      	bcs.n	1a004e9e <__udivmoddi4+0x2aa>
1a004dc6:	45a2      	cmp	sl, r4
1a004dc8:	d969      	bls.n	1a004e9e <__udivmoddi4+0x2aa>
1a004dca:	3802      	subs	r0, #2
1a004dcc:	4474      	add	r4, lr
1a004dce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a004dd2:	fba0 8902 	umull	r8, r9, r0, r2
1a004dd6:	eba4 040a 	sub.w	r4, r4, sl
1a004dda:	454c      	cmp	r4, r9
1a004ddc:	46c2      	mov	sl, r8
1a004dde:	464b      	mov	r3, r9
1a004de0:	d354      	bcc.n	1a004e8c <__udivmoddi4+0x298>
1a004de2:	d051      	beq.n	1a004e88 <__udivmoddi4+0x294>
1a004de4:	2e00      	cmp	r6, #0
1a004de6:	d069      	beq.n	1a004ebc <__udivmoddi4+0x2c8>
1a004de8:	ebb1 050a 	subs.w	r5, r1, sl
1a004dec:	eb64 0403 	sbc.w	r4, r4, r3
1a004df0:	fa04 fc0c 	lsl.w	ip, r4, ip
1a004df4:	40fd      	lsrs	r5, r7
1a004df6:	40fc      	lsrs	r4, r7
1a004df8:	ea4c 0505 	orr.w	r5, ip, r5
1a004dfc:	e9c6 5400 	strd	r5, r4, [r6]
1a004e00:	2700      	movs	r7, #0
1a004e02:	e747      	b.n	1a004c94 <__udivmoddi4+0xa0>
1a004e04:	f1c2 0320 	rsb	r3, r2, #32
1a004e08:	fa20 f703 	lsr.w	r7, r0, r3
1a004e0c:	4095      	lsls	r5, r2
1a004e0e:	fa01 f002 	lsl.w	r0, r1, r2
1a004e12:	fa21 f303 	lsr.w	r3, r1, r3
1a004e16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004e1a:	4338      	orrs	r0, r7
1a004e1c:	0c01      	lsrs	r1, r0, #16
1a004e1e:	fbb3 f7fe 	udiv	r7, r3, lr
1a004e22:	fa1f f885 	uxth.w	r8, r5
1a004e26:	fb0e 3317 	mls	r3, lr, r7, r3
1a004e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004e2e:	fb07 f308 	mul.w	r3, r7, r8
1a004e32:	428b      	cmp	r3, r1
1a004e34:	fa04 f402 	lsl.w	r4, r4, r2
1a004e38:	d907      	bls.n	1a004e4a <__udivmoddi4+0x256>
1a004e3a:	1869      	adds	r1, r5, r1
1a004e3c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a004e40:	d22f      	bcs.n	1a004ea2 <__udivmoddi4+0x2ae>
1a004e42:	428b      	cmp	r3, r1
1a004e44:	d92d      	bls.n	1a004ea2 <__udivmoddi4+0x2ae>
1a004e46:	3f02      	subs	r7, #2
1a004e48:	4429      	add	r1, r5
1a004e4a:	1acb      	subs	r3, r1, r3
1a004e4c:	b281      	uxth	r1, r0
1a004e4e:	fbb3 f0fe 	udiv	r0, r3, lr
1a004e52:	fb0e 3310 	mls	r3, lr, r0, r3
1a004e56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004e5a:	fb00 f308 	mul.w	r3, r0, r8
1a004e5e:	428b      	cmp	r3, r1
1a004e60:	d907      	bls.n	1a004e72 <__udivmoddi4+0x27e>
1a004e62:	1869      	adds	r1, r5, r1
1a004e64:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004e68:	d217      	bcs.n	1a004e9a <__udivmoddi4+0x2a6>
1a004e6a:	428b      	cmp	r3, r1
1a004e6c:	d915      	bls.n	1a004e9a <__udivmoddi4+0x2a6>
1a004e6e:	3802      	subs	r0, #2
1a004e70:	4429      	add	r1, r5
1a004e72:	1ac9      	subs	r1, r1, r3
1a004e74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004e78:	e73b      	b.n	1a004cf2 <__udivmoddi4+0xfe>
1a004e7a:	4637      	mov	r7, r6
1a004e7c:	4630      	mov	r0, r6
1a004e7e:	e709      	b.n	1a004c94 <__udivmoddi4+0xa0>
1a004e80:	4607      	mov	r7, r0
1a004e82:	e6e7      	b.n	1a004c54 <__udivmoddi4+0x60>
1a004e84:	4618      	mov	r0, r3
1a004e86:	e6fb      	b.n	1a004c80 <__udivmoddi4+0x8c>
1a004e88:	4541      	cmp	r1, r8
1a004e8a:	d2ab      	bcs.n	1a004de4 <__udivmoddi4+0x1f0>
1a004e8c:	ebb8 0a02 	subs.w	sl, r8, r2
1a004e90:	eb69 020e 	sbc.w	r2, r9, lr
1a004e94:	3801      	subs	r0, #1
1a004e96:	4613      	mov	r3, r2
1a004e98:	e7a4      	b.n	1a004de4 <__udivmoddi4+0x1f0>
1a004e9a:	4660      	mov	r0, ip
1a004e9c:	e7e9      	b.n	1a004e72 <__udivmoddi4+0x27e>
1a004e9e:	4618      	mov	r0, r3
1a004ea0:	e795      	b.n	1a004dce <__udivmoddi4+0x1da>
1a004ea2:	4667      	mov	r7, ip
1a004ea4:	e7d1      	b.n	1a004e4a <__udivmoddi4+0x256>
1a004ea6:	4681      	mov	r9, r0
1a004ea8:	e77c      	b.n	1a004da4 <__udivmoddi4+0x1b0>
1a004eaa:	3802      	subs	r0, #2
1a004eac:	442c      	add	r4, r5
1a004eae:	e747      	b.n	1a004d40 <__udivmoddi4+0x14c>
1a004eb0:	f1ac 0c02 	sub.w	ip, ip, #2
1a004eb4:	442b      	add	r3, r5
1a004eb6:	e72f      	b.n	1a004d18 <__udivmoddi4+0x124>
1a004eb8:	4638      	mov	r0, r7
1a004eba:	e708      	b.n	1a004cce <__udivmoddi4+0xda>
1a004ebc:	4637      	mov	r7, r6
1a004ebe:	e6e9      	b.n	1a004c94 <__udivmoddi4+0xa0>

1a004ec0 <__aeabi_idiv0>:
1a004ec0:	4770      	bx	lr
1a004ec2:	bf00      	nop

1a004ec4 <__sflush_r>:
1a004ec4:	898a      	ldrh	r2, [r1, #12]
1a004ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004eca:	4605      	mov	r5, r0
1a004ecc:	0710      	lsls	r0, r2, #28
1a004ece:	460c      	mov	r4, r1
1a004ed0:	d458      	bmi.n	1a004f84 <__sflush_r+0xc0>
1a004ed2:	684b      	ldr	r3, [r1, #4]
1a004ed4:	2b00      	cmp	r3, #0
1a004ed6:	dc05      	bgt.n	1a004ee4 <__sflush_r+0x20>
1a004ed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004eda:	2b00      	cmp	r3, #0
1a004edc:	dc02      	bgt.n	1a004ee4 <__sflush_r+0x20>
1a004ede:	2000      	movs	r0, #0
1a004ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004ee6:	2e00      	cmp	r6, #0
1a004ee8:	d0f9      	beq.n	1a004ede <__sflush_r+0x1a>
1a004eea:	2300      	movs	r3, #0
1a004eec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004ef0:	682f      	ldr	r7, [r5, #0]
1a004ef2:	6a21      	ldr	r1, [r4, #32]
1a004ef4:	602b      	str	r3, [r5, #0]
1a004ef6:	d032      	beq.n	1a004f5e <__sflush_r+0x9a>
1a004ef8:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004efa:	89a3      	ldrh	r3, [r4, #12]
1a004efc:	075a      	lsls	r2, r3, #29
1a004efe:	d505      	bpl.n	1a004f0c <__sflush_r+0x48>
1a004f00:	6863      	ldr	r3, [r4, #4]
1a004f02:	1ac0      	subs	r0, r0, r3
1a004f04:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a004f06:	b10b      	cbz	r3, 1a004f0c <__sflush_r+0x48>
1a004f08:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a004f0a:	1ac0      	subs	r0, r0, r3
1a004f0c:	2300      	movs	r3, #0
1a004f0e:	4602      	mov	r2, r0
1a004f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a004f12:	6a21      	ldr	r1, [r4, #32]
1a004f14:	4628      	mov	r0, r5
1a004f16:	47b0      	blx	r6
1a004f18:	1c43      	adds	r3, r0, #1
1a004f1a:	89a3      	ldrh	r3, [r4, #12]
1a004f1c:	d106      	bne.n	1a004f2c <__sflush_r+0x68>
1a004f1e:	6829      	ldr	r1, [r5, #0]
1a004f20:	291d      	cmp	r1, #29
1a004f22:	d848      	bhi.n	1a004fb6 <__sflush_r+0xf2>
1a004f24:	4a29      	ldr	r2, [pc, #164]	; (1a004fcc <__sflush_r+0x108>)
1a004f26:	40ca      	lsrs	r2, r1
1a004f28:	07d6      	lsls	r6, r2, #31
1a004f2a:	d544      	bpl.n	1a004fb6 <__sflush_r+0xf2>
1a004f2c:	2200      	movs	r2, #0
1a004f2e:	6062      	str	r2, [r4, #4]
1a004f30:	04d9      	lsls	r1, r3, #19
1a004f32:	6922      	ldr	r2, [r4, #16]
1a004f34:	6022      	str	r2, [r4, #0]
1a004f36:	d504      	bpl.n	1a004f42 <__sflush_r+0x7e>
1a004f38:	1c42      	adds	r2, r0, #1
1a004f3a:	d101      	bne.n	1a004f40 <__sflush_r+0x7c>
1a004f3c:	682b      	ldr	r3, [r5, #0]
1a004f3e:	b903      	cbnz	r3, 1a004f42 <__sflush_r+0x7e>
1a004f40:	6560      	str	r0, [r4, #84]	; 0x54
1a004f42:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004f44:	602f      	str	r7, [r5, #0]
1a004f46:	2900      	cmp	r1, #0
1a004f48:	d0c9      	beq.n	1a004ede <__sflush_r+0x1a>
1a004f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004f4e:	4299      	cmp	r1, r3
1a004f50:	d002      	beq.n	1a004f58 <__sflush_r+0x94>
1a004f52:	4628      	mov	r0, r5
1a004f54:	f000 f968 	bl	1a005228 <_free_r>
1a004f58:	2000      	movs	r0, #0
1a004f5a:	6360      	str	r0, [r4, #52]	; 0x34
1a004f5c:	e7c0      	b.n	1a004ee0 <__sflush_r+0x1c>
1a004f5e:	2301      	movs	r3, #1
1a004f60:	4628      	mov	r0, r5
1a004f62:	47b0      	blx	r6
1a004f64:	1c41      	adds	r1, r0, #1
1a004f66:	d1c8      	bne.n	1a004efa <__sflush_r+0x36>
1a004f68:	682b      	ldr	r3, [r5, #0]
1a004f6a:	2b00      	cmp	r3, #0
1a004f6c:	d0c5      	beq.n	1a004efa <__sflush_r+0x36>
1a004f6e:	2b1d      	cmp	r3, #29
1a004f70:	d001      	beq.n	1a004f76 <__sflush_r+0xb2>
1a004f72:	2b16      	cmp	r3, #22
1a004f74:	d101      	bne.n	1a004f7a <__sflush_r+0xb6>
1a004f76:	602f      	str	r7, [r5, #0]
1a004f78:	e7b1      	b.n	1a004ede <__sflush_r+0x1a>
1a004f7a:	89a3      	ldrh	r3, [r4, #12]
1a004f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004f80:	81a3      	strh	r3, [r4, #12]
1a004f82:	e7ad      	b.n	1a004ee0 <__sflush_r+0x1c>
1a004f84:	690f      	ldr	r7, [r1, #16]
1a004f86:	2f00      	cmp	r7, #0
1a004f88:	d0a9      	beq.n	1a004ede <__sflush_r+0x1a>
1a004f8a:	0793      	lsls	r3, r2, #30
1a004f8c:	680e      	ldr	r6, [r1, #0]
1a004f8e:	bf08      	it	eq
1a004f90:	694b      	ldreq	r3, [r1, #20]
1a004f92:	600f      	str	r7, [r1, #0]
1a004f94:	bf18      	it	ne
1a004f96:	2300      	movne	r3, #0
1a004f98:	eba6 0807 	sub.w	r8, r6, r7
1a004f9c:	608b      	str	r3, [r1, #8]
1a004f9e:	f1b8 0f00 	cmp.w	r8, #0
1a004fa2:	dd9c      	ble.n	1a004ede <__sflush_r+0x1a>
1a004fa4:	4643      	mov	r3, r8
1a004fa6:	463a      	mov	r2, r7
1a004fa8:	6a21      	ldr	r1, [r4, #32]
1a004faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004fac:	4628      	mov	r0, r5
1a004fae:	47b0      	blx	r6
1a004fb0:	2800      	cmp	r0, #0
1a004fb2:	dc06      	bgt.n	1a004fc2 <__sflush_r+0xfe>
1a004fb4:	89a3      	ldrh	r3, [r4, #12]
1a004fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004fba:	81a3      	strh	r3, [r4, #12]
1a004fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004fc0:	e78e      	b.n	1a004ee0 <__sflush_r+0x1c>
1a004fc2:	4407      	add	r7, r0
1a004fc4:	eba8 0800 	sub.w	r8, r8, r0
1a004fc8:	e7e9      	b.n	1a004f9e <__sflush_r+0xda>
1a004fca:	bf00      	nop
1a004fcc:	20400001 	.word	0x20400001

1a004fd0 <_fflush_r>:
1a004fd0:	b538      	push	{r3, r4, r5, lr}
1a004fd2:	690b      	ldr	r3, [r1, #16]
1a004fd4:	4605      	mov	r5, r0
1a004fd6:	460c      	mov	r4, r1
1a004fd8:	b1db      	cbz	r3, 1a005012 <_fflush_r+0x42>
1a004fda:	b118      	cbz	r0, 1a004fe4 <_fflush_r+0x14>
1a004fdc:	6983      	ldr	r3, [r0, #24]
1a004fde:	b90b      	cbnz	r3, 1a004fe4 <_fflush_r+0x14>
1a004fe0:	f000 f860 	bl	1a0050a4 <__sinit>
1a004fe4:	4b0c      	ldr	r3, [pc, #48]	; (1a005018 <_fflush_r+0x48>)
1a004fe6:	429c      	cmp	r4, r3
1a004fe8:	d109      	bne.n	1a004ffe <_fflush_r+0x2e>
1a004fea:	686c      	ldr	r4, [r5, #4]
1a004fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004ff0:	b17b      	cbz	r3, 1a005012 <_fflush_r+0x42>
1a004ff2:	4621      	mov	r1, r4
1a004ff4:	4628      	mov	r0, r5
1a004ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004ffa:	f7ff bf63 	b.w	1a004ec4 <__sflush_r>
1a004ffe:	4b07      	ldr	r3, [pc, #28]	; (1a00501c <_fflush_r+0x4c>)
1a005000:	429c      	cmp	r4, r3
1a005002:	d101      	bne.n	1a005008 <_fflush_r+0x38>
1a005004:	68ac      	ldr	r4, [r5, #8]
1a005006:	e7f1      	b.n	1a004fec <_fflush_r+0x1c>
1a005008:	4b05      	ldr	r3, [pc, #20]	; (1a005020 <_fflush_r+0x50>)
1a00500a:	429c      	cmp	r4, r3
1a00500c:	bf08      	it	eq
1a00500e:	68ec      	ldreq	r4, [r5, #12]
1a005010:	e7ec      	b.n	1a004fec <_fflush_r+0x1c>
1a005012:	2000      	movs	r0, #0
1a005014:	bd38      	pop	{r3, r4, r5, pc}
1a005016:	bf00      	nop
1a005018:	1a0075ec 	.word	0x1a0075ec
1a00501c:	1a00760c 	.word	0x1a00760c
1a005020:	1a0075cc 	.word	0x1a0075cc

1a005024 <std>:
1a005024:	2300      	movs	r3, #0
1a005026:	b510      	push	{r4, lr}
1a005028:	4604      	mov	r4, r0
1a00502a:	e9c0 3300 	strd	r3, r3, [r0]
1a00502e:	6083      	str	r3, [r0, #8]
1a005030:	8181      	strh	r1, [r0, #12]
1a005032:	6643      	str	r3, [r0, #100]	; 0x64
1a005034:	81c2      	strh	r2, [r0, #14]
1a005036:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a00503a:	6183      	str	r3, [r0, #24]
1a00503c:	4619      	mov	r1, r3
1a00503e:	2208      	movs	r2, #8
1a005040:	305c      	adds	r0, #92	; 0x5c
1a005042:	f000 f8e8 	bl	1a005216 <memset>
1a005046:	4b05      	ldr	r3, [pc, #20]	; (1a00505c <std+0x38>)
1a005048:	6263      	str	r3, [r4, #36]	; 0x24
1a00504a:	4b05      	ldr	r3, [pc, #20]	; (1a005060 <std+0x3c>)
1a00504c:	62a3      	str	r3, [r4, #40]	; 0x28
1a00504e:	4b05      	ldr	r3, [pc, #20]	; (1a005064 <std+0x40>)
1a005050:	62e3      	str	r3, [r4, #44]	; 0x2c
1a005052:	4b05      	ldr	r3, [pc, #20]	; (1a005068 <std+0x44>)
1a005054:	6224      	str	r4, [r4, #32]
1a005056:	6323      	str	r3, [r4, #48]	; 0x30
1a005058:	bd10      	pop	{r4, pc}
1a00505a:	bf00      	nop
1a00505c:	1a005471 	.word	0x1a005471
1a005060:	1a005493 	.word	0x1a005493
1a005064:	1a0054cb 	.word	0x1a0054cb
1a005068:	1a0054ef 	.word	0x1a0054ef

1a00506c <_cleanup_r>:
1a00506c:	4901      	ldr	r1, [pc, #4]	; (1a005074 <_cleanup_r+0x8>)
1a00506e:	f000 b885 	b.w	1a00517c <_fwalk_reent>
1a005072:	bf00      	nop
1a005074:	1a004fd1 	.word	0x1a004fd1

1a005078 <__sfmoreglue>:
1a005078:	b570      	push	{r4, r5, r6, lr}
1a00507a:	1e4a      	subs	r2, r1, #1
1a00507c:	2568      	movs	r5, #104	; 0x68
1a00507e:	4355      	muls	r5, r2
1a005080:	460e      	mov	r6, r1
1a005082:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a005086:	f000 f91d 	bl	1a0052c4 <_malloc_r>
1a00508a:	4604      	mov	r4, r0
1a00508c:	b140      	cbz	r0, 1a0050a0 <__sfmoreglue+0x28>
1a00508e:	2100      	movs	r1, #0
1a005090:	e9c0 1600 	strd	r1, r6, [r0]
1a005094:	300c      	adds	r0, #12
1a005096:	60a0      	str	r0, [r4, #8]
1a005098:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a00509c:	f000 f8bb 	bl	1a005216 <memset>
1a0050a0:	4620      	mov	r0, r4
1a0050a2:	bd70      	pop	{r4, r5, r6, pc}

1a0050a4 <__sinit>:
1a0050a4:	6983      	ldr	r3, [r0, #24]
1a0050a6:	b510      	push	{r4, lr}
1a0050a8:	4604      	mov	r4, r0
1a0050aa:	bb33      	cbnz	r3, 1a0050fa <__sinit+0x56>
1a0050ac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a0050b0:	6503      	str	r3, [r0, #80]	; 0x50
1a0050b2:	4b12      	ldr	r3, [pc, #72]	; (1a0050fc <__sinit+0x58>)
1a0050b4:	4a12      	ldr	r2, [pc, #72]	; (1a005100 <__sinit+0x5c>)
1a0050b6:	681b      	ldr	r3, [r3, #0]
1a0050b8:	6282      	str	r2, [r0, #40]	; 0x28
1a0050ba:	4298      	cmp	r0, r3
1a0050bc:	bf04      	itt	eq
1a0050be:	2301      	moveq	r3, #1
1a0050c0:	6183      	streq	r3, [r0, #24]
1a0050c2:	f000 f81f 	bl	1a005104 <__sfp>
1a0050c6:	6060      	str	r0, [r4, #4]
1a0050c8:	4620      	mov	r0, r4
1a0050ca:	f000 f81b 	bl	1a005104 <__sfp>
1a0050ce:	60a0      	str	r0, [r4, #8]
1a0050d0:	4620      	mov	r0, r4
1a0050d2:	f000 f817 	bl	1a005104 <__sfp>
1a0050d6:	2200      	movs	r2, #0
1a0050d8:	60e0      	str	r0, [r4, #12]
1a0050da:	2104      	movs	r1, #4
1a0050dc:	6860      	ldr	r0, [r4, #4]
1a0050de:	f7ff ffa1 	bl	1a005024 <std>
1a0050e2:	2201      	movs	r2, #1
1a0050e4:	2109      	movs	r1, #9
1a0050e6:	68a0      	ldr	r0, [r4, #8]
1a0050e8:	f7ff ff9c 	bl	1a005024 <std>
1a0050ec:	2202      	movs	r2, #2
1a0050ee:	2112      	movs	r1, #18
1a0050f0:	68e0      	ldr	r0, [r4, #12]
1a0050f2:	f7ff ff97 	bl	1a005024 <std>
1a0050f6:	2301      	movs	r3, #1
1a0050f8:	61a3      	str	r3, [r4, #24]
1a0050fa:	bd10      	pop	{r4, pc}
1a0050fc:	1a00762c 	.word	0x1a00762c
1a005100:	1a00506d 	.word	0x1a00506d

1a005104 <__sfp>:
1a005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005106:	4b1b      	ldr	r3, [pc, #108]	; (1a005174 <__sfp+0x70>)
1a005108:	681e      	ldr	r6, [r3, #0]
1a00510a:	69b3      	ldr	r3, [r6, #24]
1a00510c:	4607      	mov	r7, r0
1a00510e:	b913      	cbnz	r3, 1a005116 <__sfp+0x12>
1a005110:	4630      	mov	r0, r6
1a005112:	f7ff ffc7 	bl	1a0050a4 <__sinit>
1a005116:	3648      	adds	r6, #72	; 0x48
1a005118:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a00511c:	3b01      	subs	r3, #1
1a00511e:	d503      	bpl.n	1a005128 <__sfp+0x24>
1a005120:	6833      	ldr	r3, [r6, #0]
1a005122:	b133      	cbz	r3, 1a005132 <__sfp+0x2e>
1a005124:	6836      	ldr	r6, [r6, #0]
1a005126:	e7f7      	b.n	1a005118 <__sfp+0x14>
1a005128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a00512c:	b16d      	cbz	r5, 1a00514a <__sfp+0x46>
1a00512e:	3468      	adds	r4, #104	; 0x68
1a005130:	e7f4      	b.n	1a00511c <__sfp+0x18>
1a005132:	2104      	movs	r1, #4
1a005134:	4638      	mov	r0, r7
1a005136:	f7ff ff9f 	bl	1a005078 <__sfmoreglue>
1a00513a:	6030      	str	r0, [r6, #0]
1a00513c:	2800      	cmp	r0, #0
1a00513e:	d1f1      	bne.n	1a005124 <__sfp+0x20>
1a005140:	230c      	movs	r3, #12
1a005142:	603b      	str	r3, [r7, #0]
1a005144:	4604      	mov	r4, r0
1a005146:	4620      	mov	r0, r4
1a005148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00514a:	4b0b      	ldr	r3, [pc, #44]	; (1a005178 <__sfp+0x74>)
1a00514c:	6665      	str	r5, [r4, #100]	; 0x64
1a00514e:	e9c4 5500 	strd	r5, r5, [r4]
1a005152:	60a5      	str	r5, [r4, #8]
1a005154:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a005158:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a00515c:	2208      	movs	r2, #8
1a00515e:	4629      	mov	r1, r5
1a005160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a005164:	f000 f857 	bl	1a005216 <memset>
1a005168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a00516c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a005170:	e7e9      	b.n	1a005146 <__sfp+0x42>
1a005172:	bf00      	nop
1a005174:	1a00762c 	.word	0x1a00762c
1a005178:	ffff0001 	.word	0xffff0001

1a00517c <_fwalk_reent>:
1a00517c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005180:	4680      	mov	r8, r0
1a005182:	4689      	mov	r9, r1
1a005184:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a005188:	2600      	movs	r6, #0
1a00518a:	b914      	cbnz	r4, 1a005192 <_fwalk_reent+0x16>
1a00518c:	4630      	mov	r0, r6
1a00518e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a005192:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a005196:	3f01      	subs	r7, #1
1a005198:	d501      	bpl.n	1a00519e <_fwalk_reent+0x22>
1a00519a:	6824      	ldr	r4, [r4, #0]
1a00519c:	e7f5      	b.n	1a00518a <_fwalk_reent+0xe>
1a00519e:	89ab      	ldrh	r3, [r5, #12]
1a0051a0:	2b01      	cmp	r3, #1
1a0051a2:	d907      	bls.n	1a0051b4 <_fwalk_reent+0x38>
1a0051a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0051a8:	3301      	adds	r3, #1
1a0051aa:	d003      	beq.n	1a0051b4 <_fwalk_reent+0x38>
1a0051ac:	4629      	mov	r1, r5
1a0051ae:	4640      	mov	r0, r8
1a0051b0:	47c8      	blx	r9
1a0051b2:	4306      	orrs	r6, r0
1a0051b4:	3568      	adds	r5, #104	; 0x68
1a0051b6:	e7ee      	b.n	1a005196 <_fwalk_reent+0x1a>

1a0051b8 <__libc_init_array>:
1a0051b8:	b570      	push	{r4, r5, r6, lr}
1a0051ba:	4e0d      	ldr	r6, [pc, #52]	; (1a0051f0 <__libc_init_array+0x38>)
1a0051bc:	4c0d      	ldr	r4, [pc, #52]	; (1a0051f4 <__libc_init_array+0x3c>)
1a0051be:	1ba4      	subs	r4, r4, r6
1a0051c0:	10a4      	asrs	r4, r4, #2
1a0051c2:	2500      	movs	r5, #0
1a0051c4:	42a5      	cmp	r5, r4
1a0051c6:	d109      	bne.n	1a0051dc <__libc_init_array+0x24>
1a0051c8:	4e0b      	ldr	r6, [pc, #44]	; (1a0051f8 <__libc_init_array+0x40>)
1a0051ca:	4c0c      	ldr	r4, [pc, #48]	; (1a0051fc <__libc_init_array+0x44>)
1a0051cc:	f7fc f8cf 	bl	1a00136e <_init>
1a0051d0:	1ba4      	subs	r4, r4, r6
1a0051d2:	10a4      	asrs	r4, r4, #2
1a0051d4:	2500      	movs	r5, #0
1a0051d6:	42a5      	cmp	r5, r4
1a0051d8:	d105      	bne.n	1a0051e6 <__libc_init_array+0x2e>
1a0051da:	bd70      	pop	{r4, r5, r6, pc}
1a0051dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0051e0:	4798      	blx	r3
1a0051e2:	3501      	adds	r5, #1
1a0051e4:	e7ee      	b.n	1a0051c4 <__libc_init_array+0xc>
1a0051e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0051ea:	4798      	blx	r3
1a0051ec:	3501      	adds	r5, #1
1a0051ee:	e7f2      	b.n	1a0051d6 <__libc_init_array+0x1e>
1a0051f0:	1a007664 	.word	0x1a007664
1a0051f4:	1a007664 	.word	0x1a007664
1a0051f8:	1a007664 	.word	0x1a007664
1a0051fc:	1a007668 	.word	0x1a007668

1a005200 <memcpy>:
1a005200:	b510      	push	{r4, lr}
1a005202:	1e43      	subs	r3, r0, #1
1a005204:	440a      	add	r2, r1
1a005206:	4291      	cmp	r1, r2
1a005208:	d100      	bne.n	1a00520c <memcpy+0xc>
1a00520a:	bd10      	pop	{r4, pc}
1a00520c:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005210:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005214:	e7f7      	b.n	1a005206 <memcpy+0x6>

1a005216 <memset>:
1a005216:	4402      	add	r2, r0
1a005218:	4603      	mov	r3, r0
1a00521a:	4293      	cmp	r3, r2
1a00521c:	d100      	bne.n	1a005220 <memset+0xa>
1a00521e:	4770      	bx	lr
1a005220:	f803 1b01 	strb.w	r1, [r3], #1
1a005224:	e7f9      	b.n	1a00521a <memset+0x4>
1a005226:	Address 0x000000001a005226 is out of bounds.


1a005228 <_free_r>:
1a005228:	b538      	push	{r3, r4, r5, lr}
1a00522a:	4605      	mov	r5, r0
1a00522c:	2900      	cmp	r1, #0
1a00522e:	d045      	beq.n	1a0052bc <_free_r+0x94>
1a005230:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a005234:	1f0c      	subs	r4, r1, #4
1a005236:	2b00      	cmp	r3, #0
1a005238:	bfb8      	it	lt
1a00523a:	18e4      	addlt	r4, r4, r3
1a00523c:	f000 fac0 	bl	1a0057c0 <__malloc_lock>
1a005240:	4a1f      	ldr	r2, [pc, #124]	; (1a0052c0 <_free_r+0x98>)
1a005242:	6813      	ldr	r3, [r2, #0]
1a005244:	4610      	mov	r0, r2
1a005246:	b933      	cbnz	r3, 1a005256 <_free_r+0x2e>
1a005248:	6063      	str	r3, [r4, #4]
1a00524a:	6014      	str	r4, [r2, #0]
1a00524c:	4628      	mov	r0, r5
1a00524e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a005252:	f000 bab6 	b.w	1a0057c2 <__malloc_unlock>
1a005256:	42a3      	cmp	r3, r4
1a005258:	d90c      	bls.n	1a005274 <_free_r+0x4c>
1a00525a:	6821      	ldr	r1, [r4, #0]
1a00525c:	1862      	adds	r2, r4, r1
1a00525e:	4293      	cmp	r3, r2
1a005260:	bf04      	itt	eq
1a005262:	681a      	ldreq	r2, [r3, #0]
1a005264:	685b      	ldreq	r3, [r3, #4]
1a005266:	6063      	str	r3, [r4, #4]
1a005268:	bf04      	itt	eq
1a00526a:	1852      	addeq	r2, r2, r1
1a00526c:	6022      	streq	r2, [r4, #0]
1a00526e:	6004      	str	r4, [r0, #0]
1a005270:	e7ec      	b.n	1a00524c <_free_r+0x24>
1a005272:	4613      	mov	r3, r2
1a005274:	685a      	ldr	r2, [r3, #4]
1a005276:	b10a      	cbz	r2, 1a00527c <_free_r+0x54>
1a005278:	42a2      	cmp	r2, r4
1a00527a:	d9fa      	bls.n	1a005272 <_free_r+0x4a>
1a00527c:	6819      	ldr	r1, [r3, #0]
1a00527e:	1858      	adds	r0, r3, r1
1a005280:	42a0      	cmp	r0, r4
1a005282:	d10b      	bne.n	1a00529c <_free_r+0x74>
1a005284:	6820      	ldr	r0, [r4, #0]
1a005286:	4401      	add	r1, r0
1a005288:	1858      	adds	r0, r3, r1
1a00528a:	4282      	cmp	r2, r0
1a00528c:	6019      	str	r1, [r3, #0]
1a00528e:	d1dd      	bne.n	1a00524c <_free_r+0x24>
1a005290:	6810      	ldr	r0, [r2, #0]
1a005292:	6852      	ldr	r2, [r2, #4]
1a005294:	605a      	str	r2, [r3, #4]
1a005296:	4401      	add	r1, r0
1a005298:	6019      	str	r1, [r3, #0]
1a00529a:	e7d7      	b.n	1a00524c <_free_r+0x24>
1a00529c:	d902      	bls.n	1a0052a4 <_free_r+0x7c>
1a00529e:	230c      	movs	r3, #12
1a0052a0:	602b      	str	r3, [r5, #0]
1a0052a2:	e7d3      	b.n	1a00524c <_free_r+0x24>
1a0052a4:	6820      	ldr	r0, [r4, #0]
1a0052a6:	1821      	adds	r1, r4, r0
1a0052a8:	428a      	cmp	r2, r1
1a0052aa:	bf04      	itt	eq
1a0052ac:	6811      	ldreq	r1, [r2, #0]
1a0052ae:	6852      	ldreq	r2, [r2, #4]
1a0052b0:	6062      	str	r2, [r4, #4]
1a0052b2:	bf04      	itt	eq
1a0052b4:	1809      	addeq	r1, r1, r0
1a0052b6:	6021      	streq	r1, [r4, #0]
1a0052b8:	605c      	str	r4, [r3, #4]
1a0052ba:	e7c7      	b.n	1a00524c <_free_r+0x24>
1a0052bc:	bd38      	pop	{r3, r4, r5, pc}
1a0052be:	bf00      	nop
1a0052c0:	10002dc4 	.word	0x10002dc4

1a0052c4 <_malloc_r>:
1a0052c4:	b570      	push	{r4, r5, r6, lr}
1a0052c6:	1ccd      	adds	r5, r1, #3
1a0052c8:	f025 0503 	bic.w	r5, r5, #3
1a0052cc:	3508      	adds	r5, #8
1a0052ce:	2d0c      	cmp	r5, #12
1a0052d0:	bf38      	it	cc
1a0052d2:	250c      	movcc	r5, #12
1a0052d4:	2d00      	cmp	r5, #0
1a0052d6:	4606      	mov	r6, r0
1a0052d8:	db01      	blt.n	1a0052de <_malloc_r+0x1a>
1a0052da:	42a9      	cmp	r1, r5
1a0052dc:	d903      	bls.n	1a0052e6 <_malloc_r+0x22>
1a0052de:	230c      	movs	r3, #12
1a0052e0:	6033      	str	r3, [r6, #0]
1a0052e2:	2000      	movs	r0, #0
1a0052e4:	bd70      	pop	{r4, r5, r6, pc}
1a0052e6:	f000 fa6b 	bl	1a0057c0 <__malloc_lock>
1a0052ea:	4a21      	ldr	r2, [pc, #132]	; (1a005370 <_malloc_r+0xac>)
1a0052ec:	6814      	ldr	r4, [r2, #0]
1a0052ee:	4621      	mov	r1, r4
1a0052f0:	b991      	cbnz	r1, 1a005318 <_malloc_r+0x54>
1a0052f2:	4c20      	ldr	r4, [pc, #128]	; (1a005374 <_malloc_r+0xb0>)
1a0052f4:	6823      	ldr	r3, [r4, #0]
1a0052f6:	b91b      	cbnz	r3, 1a005300 <_malloc_r+0x3c>
1a0052f8:	4630      	mov	r0, r6
1a0052fa:	f7fc f88d 	bl	1a001418 <_sbrk_r>
1a0052fe:	6020      	str	r0, [r4, #0]
1a005300:	4629      	mov	r1, r5
1a005302:	4630      	mov	r0, r6
1a005304:	f7fc f888 	bl	1a001418 <_sbrk_r>
1a005308:	1c43      	adds	r3, r0, #1
1a00530a:	d124      	bne.n	1a005356 <_malloc_r+0x92>
1a00530c:	230c      	movs	r3, #12
1a00530e:	6033      	str	r3, [r6, #0]
1a005310:	4630      	mov	r0, r6
1a005312:	f000 fa56 	bl	1a0057c2 <__malloc_unlock>
1a005316:	e7e4      	b.n	1a0052e2 <_malloc_r+0x1e>
1a005318:	680b      	ldr	r3, [r1, #0]
1a00531a:	1b5b      	subs	r3, r3, r5
1a00531c:	d418      	bmi.n	1a005350 <_malloc_r+0x8c>
1a00531e:	2b0b      	cmp	r3, #11
1a005320:	d90f      	bls.n	1a005342 <_malloc_r+0x7e>
1a005322:	600b      	str	r3, [r1, #0]
1a005324:	50cd      	str	r5, [r1, r3]
1a005326:	18cc      	adds	r4, r1, r3
1a005328:	4630      	mov	r0, r6
1a00532a:	f000 fa4a 	bl	1a0057c2 <__malloc_unlock>
1a00532e:	f104 000b 	add.w	r0, r4, #11
1a005332:	1d23      	adds	r3, r4, #4
1a005334:	f020 0007 	bic.w	r0, r0, #7
1a005338:	1ac3      	subs	r3, r0, r3
1a00533a:	d0d3      	beq.n	1a0052e4 <_malloc_r+0x20>
1a00533c:	425a      	negs	r2, r3
1a00533e:	50e2      	str	r2, [r4, r3]
1a005340:	e7d0      	b.n	1a0052e4 <_malloc_r+0x20>
1a005342:	428c      	cmp	r4, r1
1a005344:	684b      	ldr	r3, [r1, #4]
1a005346:	bf16      	itet	ne
1a005348:	6063      	strne	r3, [r4, #4]
1a00534a:	6013      	streq	r3, [r2, #0]
1a00534c:	460c      	movne	r4, r1
1a00534e:	e7eb      	b.n	1a005328 <_malloc_r+0x64>
1a005350:	460c      	mov	r4, r1
1a005352:	6849      	ldr	r1, [r1, #4]
1a005354:	e7cc      	b.n	1a0052f0 <_malloc_r+0x2c>
1a005356:	1cc4      	adds	r4, r0, #3
1a005358:	f024 0403 	bic.w	r4, r4, #3
1a00535c:	42a0      	cmp	r0, r4
1a00535e:	d005      	beq.n	1a00536c <_malloc_r+0xa8>
1a005360:	1a21      	subs	r1, r4, r0
1a005362:	4630      	mov	r0, r6
1a005364:	f7fc f858 	bl	1a001418 <_sbrk_r>
1a005368:	3001      	adds	r0, #1
1a00536a:	d0cf      	beq.n	1a00530c <_malloc_r+0x48>
1a00536c:	6025      	str	r5, [r4, #0]
1a00536e:	e7db      	b.n	1a005328 <_malloc_r+0x64>
1a005370:	10002dc4 	.word	0x10002dc4
1a005374:	10002dc8 	.word	0x10002dc8

1a005378 <iprintf>:
1a005378:	b40f      	push	{r0, r1, r2, r3}
1a00537a:	4b0a      	ldr	r3, [pc, #40]	; (1a0053a4 <iprintf+0x2c>)
1a00537c:	b513      	push	{r0, r1, r4, lr}
1a00537e:	681c      	ldr	r4, [r3, #0]
1a005380:	b124      	cbz	r4, 1a00538c <iprintf+0x14>
1a005382:	69a3      	ldr	r3, [r4, #24]
1a005384:	b913      	cbnz	r3, 1a00538c <iprintf+0x14>
1a005386:	4620      	mov	r0, r4
1a005388:	f7ff fe8c 	bl	1a0050a4 <__sinit>
1a00538c:	ab05      	add	r3, sp, #20
1a00538e:	9a04      	ldr	r2, [sp, #16]
1a005390:	68a1      	ldr	r1, [r4, #8]
1a005392:	9301      	str	r3, [sp, #4]
1a005394:	4620      	mov	r0, r4
1a005396:	f000 fa3f 	bl	1a005818 <_vfiprintf_r>
1a00539a:	b002      	add	sp, #8
1a00539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0053a0:	b004      	add	sp, #16
1a0053a2:	4770      	bx	lr
1a0053a4:	100000d4 	.word	0x100000d4

1a0053a8 <_puts_r>:
1a0053a8:	b570      	push	{r4, r5, r6, lr}
1a0053aa:	460e      	mov	r6, r1
1a0053ac:	4605      	mov	r5, r0
1a0053ae:	b118      	cbz	r0, 1a0053b8 <_puts_r+0x10>
1a0053b0:	6983      	ldr	r3, [r0, #24]
1a0053b2:	b90b      	cbnz	r3, 1a0053b8 <_puts_r+0x10>
1a0053b4:	f7ff fe76 	bl	1a0050a4 <__sinit>
1a0053b8:	69ab      	ldr	r3, [r5, #24]
1a0053ba:	68ac      	ldr	r4, [r5, #8]
1a0053bc:	b913      	cbnz	r3, 1a0053c4 <_puts_r+0x1c>
1a0053be:	4628      	mov	r0, r5
1a0053c0:	f7ff fe70 	bl	1a0050a4 <__sinit>
1a0053c4:	4b23      	ldr	r3, [pc, #140]	; (1a005454 <_puts_r+0xac>)
1a0053c6:	429c      	cmp	r4, r3
1a0053c8:	d117      	bne.n	1a0053fa <_puts_r+0x52>
1a0053ca:	686c      	ldr	r4, [r5, #4]
1a0053cc:	89a3      	ldrh	r3, [r4, #12]
1a0053ce:	071b      	lsls	r3, r3, #28
1a0053d0:	d51d      	bpl.n	1a00540e <_puts_r+0x66>
1a0053d2:	6923      	ldr	r3, [r4, #16]
1a0053d4:	b1db      	cbz	r3, 1a00540e <_puts_r+0x66>
1a0053d6:	3e01      	subs	r6, #1
1a0053d8:	68a3      	ldr	r3, [r4, #8]
1a0053da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0053de:	3b01      	subs	r3, #1
1a0053e0:	60a3      	str	r3, [r4, #8]
1a0053e2:	b9e9      	cbnz	r1, 1a005420 <_puts_r+0x78>
1a0053e4:	2b00      	cmp	r3, #0
1a0053e6:	da2e      	bge.n	1a005446 <_puts_r+0x9e>
1a0053e8:	4622      	mov	r2, r4
1a0053ea:	210a      	movs	r1, #10
1a0053ec:	4628      	mov	r0, r5
1a0053ee:	f000 f8c3 	bl	1a005578 <__swbuf_r>
1a0053f2:	3001      	adds	r0, #1
1a0053f4:	d011      	beq.n	1a00541a <_puts_r+0x72>
1a0053f6:	200a      	movs	r0, #10
1a0053f8:	e011      	b.n	1a00541e <_puts_r+0x76>
1a0053fa:	4b17      	ldr	r3, [pc, #92]	; (1a005458 <_puts_r+0xb0>)
1a0053fc:	429c      	cmp	r4, r3
1a0053fe:	d101      	bne.n	1a005404 <_puts_r+0x5c>
1a005400:	68ac      	ldr	r4, [r5, #8]
1a005402:	e7e3      	b.n	1a0053cc <_puts_r+0x24>
1a005404:	4b15      	ldr	r3, [pc, #84]	; (1a00545c <_puts_r+0xb4>)
1a005406:	429c      	cmp	r4, r3
1a005408:	bf08      	it	eq
1a00540a:	68ec      	ldreq	r4, [r5, #12]
1a00540c:	e7de      	b.n	1a0053cc <_puts_r+0x24>
1a00540e:	4621      	mov	r1, r4
1a005410:	4628      	mov	r0, r5
1a005412:	f000 f903 	bl	1a00561c <__swsetup_r>
1a005416:	2800      	cmp	r0, #0
1a005418:	d0dd      	beq.n	1a0053d6 <_puts_r+0x2e>
1a00541a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00541e:	bd70      	pop	{r4, r5, r6, pc}
1a005420:	2b00      	cmp	r3, #0
1a005422:	da04      	bge.n	1a00542e <_puts_r+0x86>
1a005424:	69a2      	ldr	r2, [r4, #24]
1a005426:	429a      	cmp	r2, r3
1a005428:	dc06      	bgt.n	1a005438 <_puts_r+0x90>
1a00542a:	290a      	cmp	r1, #10
1a00542c:	d004      	beq.n	1a005438 <_puts_r+0x90>
1a00542e:	6823      	ldr	r3, [r4, #0]
1a005430:	1c5a      	adds	r2, r3, #1
1a005432:	6022      	str	r2, [r4, #0]
1a005434:	7019      	strb	r1, [r3, #0]
1a005436:	e7cf      	b.n	1a0053d8 <_puts_r+0x30>
1a005438:	4622      	mov	r2, r4
1a00543a:	4628      	mov	r0, r5
1a00543c:	f000 f89c 	bl	1a005578 <__swbuf_r>
1a005440:	3001      	adds	r0, #1
1a005442:	d1c9      	bne.n	1a0053d8 <_puts_r+0x30>
1a005444:	e7e9      	b.n	1a00541a <_puts_r+0x72>
1a005446:	6823      	ldr	r3, [r4, #0]
1a005448:	200a      	movs	r0, #10
1a00544a:	1c5a      	adds	r2, r3, #1
1a00544c:	6022      	str	r2, [r4, #0]
1a00544e:	7018      	strb	r0, [r3, #0]
1a005450:	e7e5      	b.n	1a00541e <_puts_r+0x76>
1a005452:	bf00      	nop
1a005454:	1a0075ec 	.word	0x1a0075ec
1a005458:	1a00760c 	.word	0x1a00760c
1a00545c:	1a0075cc 	.word	0x1a0075cc

1a005460 <puts>:
1a005460:	4b02      	ldr	r3, [pc, #8]	; (1a00546c <puts+0xc>)
1a005462:	4601      	mov	r1, r0
1a005464:	6818      	ldr	r0, [r3, #0]
1a005466:	f7ff bf9f 	b.w	1a0053a8 <_puts_r>
1a00546a:	bf00      	nop
1a00546c:	100000d4 	.word	0x100000d4

1a005470 <__sread>:
1a005470:	b510      	push	{r4, lr}
1a005472:	460c      	mov	r4, r1
1a005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005478:	f7fb ff92 	bl	1a0013a0 <_read_r>
1a00547c:	2800      	cmp	r0, #0
1a00547e:	bfab      	itete	ge
1a005480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a005482:	89a3      	ldrhlt	r3, [r4, #12]
1a005484:	181b      	addge	r3, r3, r0
1a005486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a00548a:	bfac      	ite	ge
1a00548c:	6563      	strge	r3, [r4, #84]	; 0x54
1a00548e:	81a3      	strhlt	r3, [r4, #12]
1a005490:	bd10      	pop	{r4, pc}

1a005492 <__swrite>:
1a005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005496:	461f      	mov	r7, r3
1a005498:	898b      	ldrh	r3, [r1, #12]
1a00549a:	05db      	lsls	r3, r3, #23
1a00549c:	4605      	mov	r5, r0
1a00549e:	460c      	mov	r4, r1
1a0054a0:	4616      	mov	r6, r2
1a0054a2:	d505      	bpl.n	1a0054b0 <__swrite+0x1e>
1a0054a4:	2302      	movs	r3, #2
1a0054a6:	2200      	movs	r2, #0
1a0054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0054ac:	f7fb ff73 	bl	1a001396 <_lseek_r>
1a0054b0:	89a3      	ldrh	r3, [r4, #12]
1a0054b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0054ba:	81a3      	strh	r3, [r4, #12]
1a0054bc:	4632      	mov	r2, r6
1a0054be:	463b      	mov	r3, r7
1a0054c0:	4628      	mov	r0, r5
1a0054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0054c6:	f7fb bf92 	b.w	1a0013ee <_write_r>

1a0054ca <__sseek>:
1a0054ca:	b510      	push	{r4, lr}
1a0054cc:	460c      	mov	r4, r1
1a0054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0054d2:	f7fb ff60 	bl	1a001396 <_lseek_r>
1a0054d6:	1c43      	adds	r3, r0, #1
1a0054d8:	89a3      	ldrh	r3, [r4, #12]
1a0054da:	bf15      	itete	ne
1a0054dc:	6560      	strne	r0, [r4, #84]	; 0x54
1a0054de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0054e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0054e6:	81a3      	strheq	r3, [r4, #12]
1a0054e8:	bf18      	it	ne
1a0054ea:	81a3      	strhne	r3, [r4, #12]
1a0054ec:	bd10      	pop	{r4, pc}

1a0054ee <__sclose>:
1a0054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0054f2:	f7fb bf3d 	b.w	1a001370 <_close_r>

1a0054f6 <strchr>:
1a0054f6:	b2c9      	uxtb	r1, r1
1a0054f8:	4603      	mov	r3, r0
1a0054fa:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0054fe:	b11a      	cbz	r2, 1a005508 <strchr+0x12>
1a005500:	428a      	cmp	r2, r1
1a005502:	d1f9      	bne.n	1a0054f8 <strchr+0x2>
1a005504:	4618      	mov	r0, r3
1a005506:	4770      	bx	lr
1a005508:	2900      	cmp	r1, #0
1a00550a:	bf18      	it	ne
1a00550c:	2300      	movne	r3, #0
1a00550e:	e7f9      	b.n	1a005504 <strchr+0xe>

1a005510 <strcmp>:
1a005510:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005514:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005518:	2a01      	cmp	r2, #1
1a00551a:	bf28      	it	cs
1a00551c:	429a      	cmpcs	r2, r3
1a00551e:	d0f7      	beq.n	1a005510 <strcmp>
1a005520:	1ad0      	subs	r0, r2, r3
1a005522:	4770      	bx	lr

1a005524 <strcpy>:
1a005524:	4603      	mov	r3, r0
1a005526:	f811 2b01 	ldrb.w	r2, [r1], #1
1a00552a:	f803 2b01 	strb.w	r2, [r3], #1
1a00552e:	2a00      	cmp	r2, #0
1a005530:	d1f9      	bne.n	1a005526 <strcpy+0x2>
1a005532:	4770      	bx	lr

1a005534 <strlen>:
1a005534:	4603      	mov	r3, r0
1a005536:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00553a:	2a00      	cmp	r2, #0
1a00553c:	d1fb      	bne.n	1a005536 <strlen+0x2>
1a00553e:	1a18      	subs	r0, r3, r0
1a005540:	3801      	subs	r0, #1
1a005542:	4770      	bx	lr

1a005544 <strstr>:
1a005544:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005546:	7803      	ldrb	r3, [r0, #0]
1a005548:	b17b      	cbz	r3, 1a00556a <strstr+0x26>
1a00554a:	4604      	mov	r4, r0
1a00554c:	7823      	ldrb	r3, [r4, #0]
1a00554e:	4620      	mov	r0, r4
1a005550:	1c66      	adds	r6, r4, #1
1a005552:	b17b      	cbz	r3, 1a005574 <strstr+0x30>
1a005554:	1e4a      	subs	r2, r1, #1
1a005556:	1e63      	subs	r3, r4, #1
1a005558:	f812 5f01 	ldrb.w	r5, [r2, #1]!
1a00555c:	b14d      	cbz	r5, 1a005572 <strstr+0x2e>
1a00555e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a005562:	42af      	cmp	r7, r5
1a005564:	4634      	mov	r4, r6
1a005566:	d0f7      	beq.n	1a005558 <strstr+0x14>
1a005568:	e7f0      	b.n	1a00554c <strstr+0x8>
1a00556a:	780b      	ldrb	r3, [r1, #0]
1a00556c:	2b00      	cmp	r3, #0
1a00556e:	bf18      	it	ne
1a005570:	2000      	movne	r0, #0
1a005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005574:	4618      	mov	r0, r3
1a005576:	e7fc      	b.n	1a005572 <strstr+0x2e>

1a005578 <__swbuf_r>:
1a005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00557a:	460e      	mov	r6, r1
1a00557c:	4614      	mov	r4, r2
1a00557e:	4605      	mov	r5, r0
1a005580:	b118      	cbz	r0, 1a00558a <__swbuf_r+0x12>
1a005582:	6983      	ldr	r3, [r0, #24]
1a005584:	b90b      	cbnz	r3, 1a00558a <__swbuf_r+0x12>
1a005586:	f7ff fd8d 	bl	1a0050a4 <__sinit>
1a00558a:	4b21      	ldr	r3, [pc, #132]	; (1a005610 <__swbuf_r+0x98>)
1a00558c:	429c      	cmp	r4, r3
1a00558e:	d12a      	bne.n	1a0055e6 <__swbuf_r+0x6e>
1a005590:	686c      	ldr	r4, [r5, #4]
1a005592:	69a3      	ldr	r3, [r4, #24]
1a005594:	60a3      	str	r3, [r4, #8]
1a005596:	89a3      	ldrh	r3, [r4, #12]
1a005598:	071a      	lsls	r2, r3, #28
1a00559a:	d52e      	bpl.n	1a0055fa <__swbuf_r+0x82>
1a00559c:	6923      	ldr	r3, [r4, #16]
1a00559e:	b363      	cbz	r3, 1a0055fa <__swbuf_r+0x82>
1a0055a0:	6923      	ldr	r3, [r4, #16]
1a0055a2:	6820      	ldr	r0, [r4, #0]
1a0055a4:	1ac0      	subs	r0, r0, r3
1a0055a6:	6963      	ldr	r3, [r4, #20]
1a0055a8:	b2f6      	uxtb	r6, r6
1a0055aa:	4283      	cmp	r3, r0
1a0055ac:	4637      	mov	r7, r6
1a0055ae:	dc04      	bgt.n	1a0055ba <__swbuf_r+0x42>
1a0055b0:	4621      	mov	r1, r4
1a0055b2:	4628      	mov	r0, r5
1a0055b4:	f7ff fd0c 	bl	1a004fd0 <_fflush_r>
1a0055b8:	bb28      	cbnz	r0, 1a005606 <__swbuf_r+0x8e>
1a0055ba:	68a3      	ldr	r3, [r4, #8]
1a0055bc:	3b01      	subs	r3, #1
1a0055be:	60a3      	str	r3, [r4, #8]
1a0055c0:	6823      	ldr	r3, [r4, #0]
1a0055c2:	1c5a      	adds	r2, r3, #1
1a0055c4:	6022      	str	r2, [r4, #0]
1a0055c6:	701e      	strb	r6, [r3, #0]
1a0055c8:	6963      	ldr	r3, [r4, #20]
1a0055ca:	3001      	adds	r0, #1
1a0055cc:	4283      	cmp	r3, r0
1a0055ce:	d004      	beq.n	1a0055da <__swbuf_r+0x62>
1a0055d0:	89a3      	ldrh	r3, [r4, #12]
1a0055d2:	07db      	lsls	r3, r3, #31
1a0055d4:	d519      	bpl.n	1a00560a <__swbuf_r+0x92>
1a0055d6:	2e0a      	cmp	r6, #10
1a0055d8:	d117      	bne.n	1a00560a <__swbuf_r+0x92>
1a0055da:	4621      	mov	r1, r4
1a0055dc:	4628      	mov	r0, r5
1a0055de:	f7ff fcf7 	bl	1a004fd0 <_fflush_r>
1a0055e2:	b190      	cbz	r0, 1a00560a <__swbuf_r+0x92>
1a0055e4:	e00f      	b.n	1a005606 <__swbuf_r+0x8e>
1a0055e6:	4b0b      	ldr	r3, [pc, #44]	; (1a005614 <__swbuf_r+0x9c>)
1a0055e8:	429c      	cmp	r4, r3
1a0055ea:	d101      	bne.n	1a0055f0 <__swbuf_r+0x78>
1a0055ec:	68ac      	ldr	r4, [r5, #8]
1a0055ee:	e7d0      	b.n	1a005592 <__swbuf_r+0x1a>
1a0055f0:	4b09      	ldr	r3, [pc, #36]	; (1a005618 <__swbuf_r+0xa0>)
1a0055f2:	429c      	cmp	r4, r3
1a0055f4:	bf08      	it	eq
1a0055f6:	68ec      	ldreq	r4, [r5, #12]
1a0055f8:	e7cb      	b.n	1a005592 <__swbuf_r+0x1a>
1a0055fa:	4621      	mov	r1, r4
1a0055fc:	4628      	mov	r0, r5
1a0055fe:	f000 f80d 	bl	1a00561c <__swsetup_r>
1a005602:	2800      	cmp	r0, #0
1a005604:	d0cc      	beq.n	1a0055a0 <__swbuf_r+0x28>
1a005606:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00560a:	4638      	mov	r0, r7
1a00560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00560e:	bf00      	nop
1a005610:	1a0075ec 	.word	0x1a0075ec
1a005614:	1a00760c 	.word	0x1a00760c
1a005618:	1a0075cc 	.word	0x1a0075cc

1a00561c <__swsetup_r>:
1a00561c:	4b32      	ldr	r3, [pc, #200]	; (1a0056e8 <__swsetup_r+0xcc>)
1a00561e:	b570      	push	{r4, r5, r6, lr}
1a005620:	681d      	ldr	r5, [r3, #0]
1a005622:	4606      	mov	r6, r0
1a005624:	460c      	mov	r4, r1
1a005626:	b125      	cbz	r5, 1a005632 <__swsetup_r+0x16>
1a005628:	69ab      	ldr	r3, [r5, #24]
1a00562a:	b913      	cbnz	r3, 1a005632 <__swsetup_r+0x16>
1a00562c:	4628      	mov	r0, r5
1a00562e:	f7ff fd39 	bl	1a0050a4 <__sinit>
1a005632:	4b2e      	ldr	r3, [pc, #184]	; (1a0056ec <__swsetup_r+0xd0>)
1a005634:	429c      	cmp	r4, r3
1a005636:	d10f      	bne.n	1a005658 <__swsetup_r+0x3c>
1a005638:	686c      	ldr	r4, [r5, #4]
1a00563a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00563e:	b29a      	uxth	r2, r3
1a005640:	0715      	lsls	r5, r2, #28
1a005642:	d42c      	bmi.n	1a00569e <__swsetup_r+0x82>
1a005644:	06d0      	lsls	r0, r2, #27
1a005646:	d411      	bmi.n	1a00566c <__swsetup_r+0x50>
1a005648:	2209      	movs	r2, #9
1a00564a:	6032      	str	r2, [r6, #0]
1a00564c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005650:	81a3      	strh	r3, [r4, #12]
1a005652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005656:	e03e      	b.n	1a0056d6 <__swsetup_r+0xba>
1a005658:	4b25      	ldr	r3, [pc, #148]	; (1a0056f0 <__swsetup_r+0xd4>)
1a00565a:	429c      	cmp	r4, r3
1a00565c:	d101      	bne.n	1a005662 <__swsetup_r+0x46>
1a00565e:	68ac      	ldr	r4, [r5, #8]
1a005660:	e7eb      	b.n	1a00563a <__swsetup_r+0x1e>
1a005662:	4b24      	ldr	r3, [pc, #144]	; (1a0056f4 <__swsetup_r+0xd8>)
1a005664:	429c      	cmp	r4, r3
1a005666:	bf08      	it	eq
1a005668:	68ec      	ldreq	r4, [r5, #12]
1a00566a:	e7e6      	b.n	1a00563a <__swsetup_r+0x1e>
1a00566c:	0751      	lsls	r1, r2, #29
1a00566e:	d512      	bpl.n	1a005696 <__swsetup_r+0x7a>
1a005670:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a005672:	b141      	cbz	r1, 1a005686 <__swsetup_r+0x6a>
1a005674:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a005678:	4299      	cmp	r1, r3
1a00567a:	d002      	beq.n	1a005682 <__swsetup_r+0x66>
1a00567c:	4630      	mov	r0, r6
1a00567e:	f7ff fdd3 	bl	1a005228 <_free_r>
1a005682:	2300      	movs	r3, #0
1a005684:	6363      	str	r3, [r4, #52]	; 0x34
1a005686:	89a3      	ldrh	r3, [r4, #12]
1a005688:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a00568c:	81a3      	strh	r3, [r4, #12]
1a00568e:	2300      	movs	r3, #0
1a005690:	6063      	str	r3, [r4, #4]
1a005692:	6923      	ldr	r3, [r4, #16]
1a005694:	6023      	str	r3, [r4, #0]
1a005696:	89a3      	ldrh	r3, [r4, #12]
1a005698:	f043 0308 	orr.w	r3, r3, #8
1a00569c:	81a3      	strh	r3, [r4, #12]
1a00569e:	6923      	ldr	r3, [r4, #16]
1a0056a0:	b94b      	cbnz	r3, 1a0056b6 <__swsetup_r+0x9a>
1a0056a2:	89a3      	ldrh	r3, [r4, #12]
1a0056a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0056a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0056ac:	d003      	beq.n	1a0056b6 <__swsetup_r+0x9a>
1a0056ae:	4621      	mov	r1, r4
1a0056b0:	4630      	mov	r0, r6
1a0056b2:	f000 f845 	bl	1a005740 <__smakebuf_r>
1a0056b6:	89a2      	ldrh	r2, [r4, #12]
1a0056b8:	f012 0301 	ands.w	r3, r2, #1
1a0056bc:	d00c      	beq.n	1a0056d8 <__swsetup_r+0xbc>
1a0056be:	2300      	movs	r3, #0
1a0056c0:	60a3      	str	r3, [r4, #8]
1a0056c2:	6963      	ldr	r3, [r4, #20]
1a0056c4:	425b      	negs	r3, r3
1a0056c6:	61a3      	str	r3, [r4, #24]
1a0056c8:	6923      	ldr	r3, [r4, #16]
1a0056ca:	b953      	cbnz	r3, 1a0056e2 <__swsetup_r+0xc6>
1a0056cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0056d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0056d4:	d1ba      	bne.n	1a00564c <__swsetup_r+0x30>
1a0056d6:	bd70      	pop	{r4, r5, r6, pc}
1a0056d8:	0792      	lsls	r2, r2, #30
1a0056da:	bf58      	it	pl
1a0056dc:	6963      	ldrpl	r3, [r4, #20]
1a0056de:	60a3      	str	r3, [r4, #8]
1a0056e0:	e7f2      	b.n	1a0056c8 <__swsetup_r+0xac>
1a0056e2:	2000      	movs	r0, #0
1a0056e4:	e7f7      	b.n	1a0056d6 <__swsetup_r+0xba>
1a0056e6:	bf00      	nop
1a0056e8:	100000d4 	.word	0x100000d4
1a0056ec:	1a0075ec 	.word	0x1a0075ec
1a0056f0:	1a00760c 	.word	0x1a00760c
1a0056f4:	1a0075cc 	.word	0x1a0075cc

1a0056f8 <__swhatbuf_r>:
1a0056f8:	b570      	push	{r4, r5, r6, lr}
1a0056fa:	460e      	mov	r6, r1
1a0056fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005700:	2900      	cmp	r1, #0
1a005702:	b096      	sub	sp, #88	; 0x58
1a005704:	4614      	mov	r4, r2
1a005706:	461d      	mov	r5, r3
1a005708:	da07      	bge.n	1a00571a <__swhatbuf_r+0x22>
1a00570a:	2300      	movs	r3, #0
1a00570c:	602b      	str	r3, [r5, #0]
1a00570e:	89b3      	ldrh	r3, [r6, #12]
1a005710:	061a      	lsls	r2, r3, #24
1a005712:	d410      	bmi.n	1a005736 <__swhatbuf_r+0x3e>
1a005714:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a005718:	e00e      	b.n	1a005738 <__swhatbuf_r+0x40>
1a00571a:	466a      	mov	r2, sp
1a00571c:	f7fb fe2d 	bl	1a00137a <_fstat_r>
1a005720:	2800      	cmp	r0, #0
1a005722:	dbf2      	blt.n	1a00570a <__swhatbuf_r+0x12>
1a005724:	9a01      	ldr	r2, [sp, #4]
1a005726:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00572a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00572e:	425a      	negs	r2, r3
1a005730:	415a      	adcs	r2, r3
1a005732:	602a      	str	r2, [r5, #0]
1a005734:	e7ee      	b.n	1a005714 <__swhatbuf_r+0x1c>
1a005736:	2340      	movs	r3, #64	; 0x40
1a005738:	2000      	movs	r0, #0
1a00573a:	6023      	str	r3, [r4, #0]
1a00573c:	b016      	add	sp, #88	; 0x58
1a00573e:	bd70      	pop	{r4, r5, r6, pc}

1a005740 <__smakebuf_r>:
1a005740:	898b      	ldrh	r3, [r1, #12]
1a005742:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a005744:	079d      	lsls	r5, r3, #30
1a005746:	4606      	mov	r6, r0
1a005748:	460c      	mov	r4, r1
1a00574a:	d507      	bpl.n	1a00575c <__smakebuf_r+0x1c>
1a00574c:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005750:	6023      	str	r3, [r4, #0]
1a005752:	6123      	str	r3, [r4, #16]
1a005754:	2301      	movs	r3, #1
1a005756:	6163      	str	r3, [r4, #20]
1a005758:	b002      	add	sp, #8
1a00575a:	bd70      	pop	{r4, r5, r6, pc}
1a00575c:	ab01      	add	r3, sp, #4
1a00575e:	466a      	mov	r2, sp
1a005760:	f7ff ffca 	bl	1a0056f8 <__swhatbuf_r>
1a005764:	9900      	ldr	r1, [sp, #0]
1a005766:	4605      	mov	r5, r0
1a005768:	4630      	mov	r0, r6
1a00576a:	f7ff fdab 	bl	1a0052c4 <_malloc_r>
1a00576e:	b948      	cbnz	r0, 1a005784 <__smakebuf_r+0x44>
1a005770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005774:	059a      	lsls	r2, r3, #22
1a005776:	d4ef      	bmi.n	1a005758 <__smakebuf_r+0x18>
1a005778:	f023 0303 	bic.w	r3, r3, #3
1a00577c:	f043 0302 	orr.w	r3, r3, #2
1a005780:	81a3      	strh	r3, [r4, #12]
1a005782:	e7e3      	b.n	1a00574c <__smakebuf_r+0xc>
1a005784:	4b0d      	ldr	r3, [pc, #52]	; (1a0057bc <__smakebuf_r+0x7c>)
1a005786:	62b3      	str	r3, [r6, #40]	; 0x28
1a005788:	89a3      	ldrh	r3, [r4, #12]
1a00578a:	6020      	str	r0, [r4, #0]
1a00578c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005790:	81a3      	strh	r3, [r4, #12]
1a005792:	9b00      	ldr	r3, [sp, #0]
1a005794:	6163      	str	r3, [r4, #20]
1a005796:	9b01      	ldr	r3, [sp, #4]
1a005798:	6120      	str	r0, [r4, #16]
1a00579a:	b15b      	cbz	r3, 1a0057b4 <__smakebuf_r+0x74>
1a00579c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0057a0:	4630      	mov	r0, r6
1a0057a2:	f7fb fdef 	bl	1a001384 <_isatty_r>
1a0057a6:	b128      	cbz	r0, 1a0057b4 <__smakebuf_r+0x74>
1a0057a8:	89a3      	ldrh	r3, [r4, #12]
1a0057aa:	f023 0303 	bic.w	r3, r3, #3
1a0057ae:	f043 0301 	orr.w	r3, r3, #1
1a0057b2:	81a3      	strh	r3, [r4, #12]
1a0057b4:	89a3      	ldrh	r3, [r4, #12]
1a0057b6:	431d      	orrs	r5, r3
1a0057b8:	81a5      	strh	r5, [r4, #12]
1a0057ba:	e7cd      	b.n	1a005758 <__smakebuf_r+0x18>
1a0057bc:	1a00506d 	.word	0x1a00506d

1a0057c0 <__malloc_lock>:
1a0057c0:	4770      	bx	lr

1a0057c2 <__malloc_unlock>:
1a0057c2:	4770      	bx	lr

1a0057c4 <__sfputc_r>:
1a0057c4:	6893      	ldr	r3, [r2, #8]
1a0057c6:	3b01      	subs	r3, #1
1a0057c8:	2b00      	cmp	r3, #0
1a0057ca:	b410      	push	{r4}
1a0057cc:	6093      	str	r3, [r2, #8]
1a0057ce:	da08      	bge.n	1a0057e2 <__sfputc_r+0x1e>
1a0057d0:	6994      	ldr	r4, [r2, #24]
1a0057d2:	42a3      	cmp	r3, r4
1a0057d4:	db01      	blt.n	1a0057da <__sfputc_r+0x16>
1a0057d6:	290a      	cmp	r1, #10
1a0057d8:	d103      	bne.n	1a0057e2 <__sfputc_r+0x1e>
1a0057da:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0057de:	f7ff becb 	b.w	1a005578 <__swbuf_r>
1a0057e2:	6813      	ldr	r3, [r2, #0]
1a0057e4:	1c58      	adds	r0, r3, #1
1a0057e6:	6010      	str	r0, [r2, #0]
1a0057e8:	7019      	strb	r1, [r3, #0]
1a0057ea:	4608      	mov	r0, r1
1a0057ec:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0057f0:	4770      	bx	lr

1a0057f2 <__sfputs_r>:
1a0057f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0057f4:	4606      	mov	r6, r0
1a0057f6:	460f      	mov	r7, r1
1a0057f8:	4614      	mov	r4, r2
1a0057fa:	18d5      	adds	r5, r2, r3
1a0057fc:	42ac      	cmp	r4, r5
1a0057fe:	d101      	bne.n	1a005804 <__sfputs_r+0x12>
1a005800:	2000      	movs	r0, #0
1a005802:	e007      	b.n	1a005814 <__sfputs_r+0x22>
1a005804:	463a      	mov	r2, r7
1a005806:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00580a:	4630      	mov	r0, r6
1a00580c:	f7ff ffda 	bl	1a0057c4 <__sfputc_r>
1a005810:	1c43      	adds	r3, r0, #1
1a005812:	d1f3      	bne.n	1a0057fc <__sfputs_r+0xa>
1a005814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005816:	Address 0x000000001a005816 is out of bounds.


1a005818 <_vfiprintf_r>:
1a005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00581c:	460c      	mov	r4, r1
1a00581e:	b09d      	sub	sp, #116	; 0x74
1a005820:	4617      	mov	r7, r2
1a005822:	461d      	mov	r5, r3
1a005824:	4606      	mov	r6, r0
1a005826:	b118      	cbz	r0, 1a005830 <_vfiprintf_r+0x18>
1a005828:	6983      	ldr	r3, [r0, #24]
1a00582a:	b90b      	cbnz	r3, 1a005830 <_vfiprintf_r+0x18>
1a00582c:	f7ff fc3a 	bl	1a0050a4 <__sinit>
1a005830:	4b7c      	ldr	r3, [pc, #496]	; (1a005a24 <_vfiprintf_r+0x20c>)
1a005832:	429c      	cmp	r4, r3
1a005834:	d158      	bne.n	1a0058e8 <_vfiprintf_r+0xd0>
1a005836:	6874      	ldr	r4, [r6, #4]
1a005838:	89a3      	ldrh	r3, [r4, #12]
1a00583a:	0718      	lsls	r0, r3, #28
1a00583c:	d55e      	bpl.n	1a0058fc <_vfiprintf_r+0xe4>
1a00583e:	6923      	ldr	r3, [r4, #16]
1a005840:	2b00      	cmp	r3, #0
1a005842:	d05b      	beq.n	1a0058fc <_vfiprintf_r+0xe4>
1a005844:	2300      	movs	r3, #0
1a005846:	9309      	str	r3, [sp, #36]	; 0x24
1a005848:	2320      	movs	r3, #32
1a00584a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00584e:	2330      	movs	r3, #48	; 0x30
1a005850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a005854:	9503      	str	r5, [sp, #12]
1a005856:	f04f 0b01 	mov.w	fp, #1
1a00585a:	46b8      	mov	r8, r7
1a00585c:	4645      	mov	r5, r8
1a00585e:	f815 3b01 	ldrb.w	r3, [r5], #1
1a005862:	b10b      	cbz	r3, 1a005868 <_vfiprintf_r+0x50>
1a005864:	2b25      	cmp	r3, #37	; 0x25
1a005866:	d154      	bne.n	1a005912 <_vfiprintf_r+0xfa>
1a005868:	ebb8 0a07 	subs.w	sl, r8, r7
1a00586c:	d00b      	beq.n	1a005886 <_vfiprintf_r+0x6e>
1a00586e:	4653      	mov	r3, sl
1a005870:	463a      	mov	r2, r7
1a005872:	4621      	mov	r1, r4
1a005874:	4630      	mov	r0, r6
1a005876:	f7ff ffbc 	bl	1a0057f2 <__sfputs_r>
1a00587a:	3001      	adds	r0, #1
1a00587c:	f000 80c2 	beq.w	1a005a04 <_vfiprintf_r+0x1ec>
1a005880:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005882:	4453      	add	r3, sl
1a005884:	9309      	str	r3, [sp, #36]	; 0x24
1a005886:	f898 3000 	ldrb.w	r3, [r8]
1a00588a:	2b00      	cmp	r3, #0
1a00588c:	f000 80ba 	beq.w	1a005a04 <_vfiprintf_r+0x1ec>
1a005890:	2300      	movs	r3, #0
1a005892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005896:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00589a:	9304      	str	r3, [sp, #16]
1a00589c:	9307      	str	r3, [sp, #28]
1a00589e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0058a2:	931a      	str	r3, [sp, #104]	; 0x68
1a0058a4:	46a8      	mov	r8, r5
1a0058a6:	2205      	movs	r2, #5
1a0058a8:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0058ac:	485e      	ldr	r0, [pc, #376]	; (1a005a28 <_vfiprintf_r+0x210>)
1a0058ae:	f000 fa57 	bl	1a005d60 <memchr>
1a0058b2:	9b04      	ldr	r3, [sp, #16]
1a0058b4:	bb78      	cbnz	r0, 1a005916 <_vfiprintf_r+0xfe>
1a0058b6:	06d9      	lsls	r1, r3, #27
1a0058b8:	bf44      	itt	mi
1a0058ba:	2220      	movmi	r2, #32
1a0058bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0058c0:	071a      	lsls	r2, r3, #28
1a0058c2:	bf44      	itt	mi
1a0058c4:	222b      	movmi	r2, #43	; 0x2b
1a0058c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0058ca:	782a      	ldrb	r2, [r5, #0]
1a0058cc:	2a2a      	cmp	r2, #42	; 0x2a
1a0058ce:	d02a      	beq.n	1a005926 <_vfiprintf_r+0x10e>
1a0058d0:	9a07      	ldr	r2, [sp, #28]
1a0058d2:	46a8      	mov	r8, r5
1a0058d4:	2000      	movs	r0, #0
1a0058d6:	250a      	movs	r5, #10
1a0058d8:	4641      	mov	r1, r8
1a0058da:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0058de:	3b30      	subs	r3, #48	; 0x30
1a0058e0:	2b09      	cmp	r3, #9
1a0058e2:	d969      	bls.n	1a0059b8 <_vfiprintf_r+0x1a0>
1a0058e4:	b360      	cbz	r0, 1a005940 <_vfiprintf_r+0x128>
1a0058e6:	e024      	b.n	1a005932 <_vfiprintf_r+0x11a>
1a0058e8:	4b50      	ldr	r3, [pc, #320]	; (1a005a2c <_vfiprintf_r+0x214>)
1a0058ea:	429c      	cmp	r4, r3
1a0058ec:	d101      	bne.n	1a0058f2 <_vfiprintf_r+0xda>
1a0058ee:	68b4      	ldr	r4, [r6, #8]
1a0058f0:	e7a2      	b.n	1a005838 <_vfiprintf_r+0x20>
1a0058f2:	4b4f      	ldr	r3, [pc, #316]	; (1a005a30 <_vfiprintf_r+0x218>)
1a0058f4:	429c      	cmp	r4, r3
1a0058f6:	bf08      	it	eq
1a0058f8:	68f4      	ldreq	r4, [r6, #12]
1a0058fa:	e79d      	b.n	1a005838 <_vfiprintf_r+0x20>
1a0058fc:	4621      	mov	r1, r4
1a0058fe:	4630      	mov	r0, r6
1a005900:	f7ff fe8c 	bl	1a00561c <__swsetup_r>
1a005904:	2800      	cmp	r0, #0
1a005906:	d09d      	beq.n	1a005844 <_vfiprintf_r+0x2c>
1a005908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00590c:	b01d      	add	sp, #116	; 0x74
1a00590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005912:	46a8      	mov	r8, r5
1a005914:	e7a2      	b.n	1a00585c <_vfiprintf_r+0x44>
1a005916:	4a44      	ldr	r2, [pc, #272]	; (1a005a28 <_vfiprintf_r+0x210>)
1a005918:	1a80      	subs	r0, r0, r2
1a00591a:	fa0b f000 	lsl.w	r0, fp, r0
1a00591e:	4318      	orrs	r0, r3
1a005920:	9004      	str	r0, [sp, #16]
1a005922:	4645      	mov	r5, r8
1a005924:	e7be      	b.n	1a0058a4 <_vfiprintf_r+0x8c>
1a005926:	9a03      	ldr	r2, [sp, #12]
1a005928:	1d11      	adds	r1, r2, #4
1a00592a:	6812      	ldr	r2, [r2, #0]
1a00592c:	9103      	str	r1, [sp, #12]
1a00592e:	2a00      	cmp	r2, #0
1a005930:	db01      	blt.n	1a005936 <_vfiprintf_r+0x11e>
1a005932:	9207      	str	r2, [sp, #28]
1a005934:	e004      	b.n	1a005940 <_vfiprintf_r+0x128>
1a005936:	4252      	negs	r2, r2
1a005938:	f043 0302 	orr.w	r3, r3, #2
1a00593c:	9207      	str	r2, [sp, #28]
1a00593e:	9304      	str	r3, [sp, #16]
1a005940:	f898 3000 	ldrb.w	r3, [r8]
1a005944:	2b2e      	cmp	r3, #46	; 0x2e
1a005946:	d10e      	bne.n	1a005966 <_vfiprintf_r+0x14e>
1a005948:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00594c:	2b2a      	cmp	r3, #42	; 0x2a
1a00594e:	d138      	bne.n	1a0059c2 <_vfiprintf_r+0x1aa>
1a005950:	9b03      	ldr	r3, [sp, #12]
1a005952:	1d1a      	adds	r2, r3, #4
1a005954:	681b      	ldr	r3, [r3, #0]
1a005956:	9203      	str	r2, [sp, #12]
1a005958:	2b00      	cmp	r3, #0
1a00595a:	bfb8      	it	lt
1a00595c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a005960:	f108 0802 	add.w	r8, r8, #2
1a005964:	9305      	str	r3, [sp, #20]
1a005966:	4d33      	ldr	r5, [pc, #204]	; (1a005a34 <_vfiprintf_r+0x21c>)
1a005968:	f898 1000 	ldrb.w	r1, [r8]
1a00596c:	2203      	movs	r2, #3
1a00596e:	4628      	mov	r0, r5
1a005970:	f000 f9f6 	bl	1a005d60 <memchr>
1a005974:	b140      	cbz	r0, 1a005988 <_vfiprintf_r+0x170>
1a005976:	2340      	movs	r3, #64	; 0x40
1a005978:	1b40      	subs	r0, r0, r5
1a00597a:	fa03 f000 	lsl.w	r0, r3, r0
1a00597e:	9b04      	ldr	r3, [sp, #16]
1a005980:	4303      	orrs	r3, r0
1a005982:	f108 0801 	add.w	r8, r8, #1
1a005986:	9304      	str	r3, [sp, #16]
1a005988:	f898 1000 	ldrb.w	r1, [r8]
1a00598c:	482a      	ldr	r0, [pc, #168]	; (1a005a38 <_vfiprintf_r+0x220>)
1a00598e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a005992:	2206      	movs	r2, #6
1a005994:	f108 0701 	add.w	r7, r8, #1
1a005998:	f000 f9e2 	bl	1a005d60 <memchr>
1a00599c:	2800      	cmp	r0, #0
1a00599e:	d037      	beq.n	1a005a10 <_vfiprintf_r+0x1f8>
1a0059a0:	4b26      	ldr	r3, [pc, #152]	; (1a005a3c <_vfiprintf_r+0x224>)
1a0059a2:	bb1b      	cbnz	r3, 1a0059ec <_vfiprintf_r+0x1d4>
1a0059a4:	9b03      	ldr	r3, [sp, #12]
1a0059a6:	3307      	adds	r3, #7
1a0059a8:	f023 0307 	bic.w	r3, r3, #7
1a0059ac:	3308      	adds	r3, #8
1a0059ae:	9303      	str	r3, [sp, #12]
1a0059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0059b2:	444b      	add	r3, r9
1a0059b4:	9309      	str	r3, [sp, #36]	; 0x24
1a0059b6:	e750      	b.n	1a00585a <_vfiprintf_r+0x42>
1a0059b8:	fb05 3202 	mla	r2, r5, r2, r3
1a0059bc:	2001      	movs	r0, #1
1a0059be:	4688      	mov	r8, r1
1a0059c0:	e78a      	b.n	1a0058d8 <_vfiprintf_r+0xc0>
1a0059c2:	2300      	movs	r3, #0
1a0059c4:	f108 0801 	add.w	r8, r8, #1
1a0059c8:	9305      	str	r3, [sp, #20]
1a0059ca:	4619      	mov	r1, r3
1a0059cc:	250a      	movs	r5, #10
1a0059ce:	4640      	mov	r0, r8
1a0059d0:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0059d4:	3a30      	subs	r2, #48	; 0x30
1a0059d6:	2a09      	cmp	r2, #9
1a0059d8:	d903      	bls.n	1a0059e2 <_vfiprintf_r+0x1ca>
1a0059da:	2b00      	cmp	r3, #0
1a0059dc:	d0c3      	beq.n	1a005966 <_vfiprintf_r+0x14e>
1a0059de:	9105      	str	r1, [sp, #20]
1a0059e0:	e7c1      	b.n	1a005966 <_vfiprintf_r+0x14e>
1a0059e2:	fb05 2101 	mla	r1, r5, r1, r2
1a0059e6:	2301      	movs	r3, #1
1a0059e8:	4680      	mov	r8, r0
1a0059ea:	e7f0      	b.n	1a0059ce <_vfiprintf_r+0x1b6>
1a0059ec:	ab03      	add	r3, sp, #12
1a0059ee:	9300      	str	r3, [sp, #0]
1a0059f0:	4622      	mov	r2, r4
1a0059f2:	4b13      	ldr	r3, [pc, #76]	; (1a005a40 <_vfiprintf_r+0x228>)
1a0059f4:	a904      	add	r1, sp, #16
1a0059f6:	4630      	mov	r0, r6
1a0059f8:	f3af 8000 	nop.w
1a0059fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005a00:	4681      	mov	r9, r0
1a005a02:	d1d5      	bne.n	1a0059b0 <_vfiprintf_r+0x198>
1a005a04:	89a3      	ldrh	r3, [r4, #12]
1a005a06:	065b      	lsls	r3, r3, #25
1a005a08:	f53f af7e 	bmi.w	1a005908 <_vfiprintf_r+0xf0>
1a005a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005a0e:	e77d      	b.n	1a00590c <_vfiprintf_r+0xf4>
1a005a10:	ab03      	add	r3, sp, #12
1a005a12:	9300      	str	r3, [sp, #0]
1a005a14:	4622      	mov	r2, r4
1a005a16:	4b0a      	ldr	r3, [pc, #40]	; (1a005a40 <_vfiprintf_r+0x228>)
1a005a18:	a904      	add	r1, sp, #16
1a005a1a:	4630      	mov	r0, r6
1a005a1c:	f000 f888 	bl	1a005b30 <_printf_i>
1a005a20:	e7ec      	b.n	1a0059fc <_vfiprintf_r+0x1e4>
1a005a22:	bf00      	nop
1a005a24:	1a0075ec 	.word	0x1a0075ec
1a005a28:	1a007630 	.word	0x1a007630
1a005a2c:	1a00760c 	.word	0x1a00760c
1a005a30:	1a0075cc 	.word	0x1a0075cc
1a005a34:	1a007636 	.word	0x1a007636
1a005a38:	1a00763a 	.word	0x1a00763a
1a005a3c:	00000000 	.word	0x00000000
1a005a40:	1a0057f3 	.word	0x1a0057f3

1a005a44 <_printf_common>:
1a005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a005a48:	4691      	mov	r9, r2
1a005a4a:	461f      	mov	r7, r3
1a005a4c:	688a      	ldr	r2, [r1, #8]
1a005a4e:	690b      	ldr	r3, [r1, #16]
1a005a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005a54:	4293      	cmp	r3, r2
1a005a56:	bfb8      	it	lt
1a005a58:	4613      	movlt	r3, r2
1a005a5a:	f8c9 3000 	str.w	r3, [r9]
1a005a5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a005a62:	4606      	mov	r6, r0
1a005a64:	460c      	mov	r4, r1
1a005a66:	b112      	cbz	r2, 1a005a6e <_printf_common+0x2a>
1a005a68:	3301      	adds	r3, #1
1a005a6a:	f8c9 3000 	str.w	r3, [r9]
1a005a6e:	6823      	ldr	r3, [r4, #0]
1a005a70:	0699      	lsls	r1, r3, #26
1a005a72:	bf42      	ittt	mi
1a005a74:	f8d9 3000 	ldrmi.w	r3, [r9]
1a005a78:	3302      	addmi	r3, #2
1a005a7a:	f8c9 3000 	strmi.w	r3, [r9]
1a005a7e:	6825      	ldr	r5, [r4, #0]
1a005a80:	f015 0506 	ands.w	r5, r5, #6
1a005a84:	d107      	bne.n	1a005a96 <_printf_common+0x52>
1a005a86:	f104 0a19 	add.w	sl, r4, #25
1a005a8a:	68e3      	ldr	r3, [r4, #12]
1a005a8c:	f8d9 2000 	ldr.w	r2, [r9]
1a005a90:	1a9b      	subs	r3, r3, r2
1a005a92:	42ab      	cmp	r3, r5
1a005a94:	dc28      	bgt.n	1a005ae8 <_printf_common+0xa4>
1a005a96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a005a9a:	6822      	ldr	r2, [r4, #0]
1a005a9c:	3300      	adds	r3, #0
1a005a9e:	bf18      	it	ne
1a005aa0:	2301      	movne	r3, #1
1a005aa2:	0692      	lsls	r2, r2, #26
1a005aa4:	d42d      	bmi.n	1a005b02 <_printf_common+0xbe>
1a005aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a005aaa:	4639      	mov	r1, r7
1a005aac:	4630      	mov	r0, r6
1a005aae:	47c0      	blx	r8
1a005ab0:	3001      	adds	r0, #1
1a005ab2:	d020      	beq.n	1a005af6 <_printf_common+0xb2>
1a005ab4:	6823      	ldr	r3, [r4, #0]
1a005ab6:	68e5      	ldr	r5, [r4, #12]
1a005ab8:	f8d9 2000 	ldr.w	r2, [r9]
1a005abc:	f003 0306 	and.w	r3, r3, #6
1a005ac0:	2b04      	cmp	r3, #4
1a005ac2:	bf08      	it	eq
1a005ac4:	1aad      	subeq	r5, r5, r2
1a005ac6:	68a3      	ldr	r3, [r4, #8]
1a005ac8:	6922      	ldr	r2, [r4, #16]
1a005aca:	bf0c      	ite	eq
1a005acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a005ad0:	2500      	movne	r5, #0
1a005ad2:	4293      	cmp	r3, r2
1a005ad4:	bfc4      	itt	gt
1a005ad6:	1a9b      	subgt	r3, r3, r2
1a005ad8:	18ed      	addgt	r5, r5, r3
1a005ada:	f04f 0900 	mov.w	r9, #0
1a005ade:	341a      	adds	r4, #26
1a005ae0:	454d      	cmp	r5, r9
1a005ae2:	d11a      	bne.n	1a005b1a <_printf_common+0xd6>
1a005ae4:	2000      	movs	r0, #0
1a005ae6:	e008      	b.n	1a005afa <_printf_common+0xb6>
1a005ae8:	2301      	movs	r3, #1
1a005aea:	4652      	mov	r2, sl
1a005aec:	4639      	mov	r1, r7
1a005aee:	4630      	mov	r0, r6
1a005af0:	47c0      	blx	r8
1a005af2:	3001      	adds	r0, #1
1a005af4:	d103      	bne.n	1a005afe <_printf_common+0xba>
1a005af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005afe:	3501      	adds	r5, #1
1a005b00:	e7c3      	b.n	1a005a8a <_printf_common+0x46>
1a005b02:	18e1      	adds	r1, r4, r3
1a005b04:	1c5a      	adds	r2, r3, #1
1a005b06:	2030      	movs	r0, #48	; 0x30
1a005b08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005b0c:	4422      	add	r2, r4
1a005b0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a005b12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a005b16:	3302      	adds	r3, #2
1a005b18:	e7c5      	b.n	1a005aa6 <_printf_common+0x62>
1a005b1a:	2301      	movs	r3, #1
1a005b1c:	4622      	mov	r2, r4
1a005b1e:	4639      	mov	r1, r7
1a005b20:	4630      	mov	r0, r6
1a005b22:	47c0      	blx	r8
1a005b24:	3001      	adds	r0, #1
1a005b26:	d0e6      	beq.n	1a005af6 <_printf_common+0xb2>
1a005b28:	f109 0901 	add.w	r9, r9, #1
1a005b2c:	e7d8      	b.n	1a005ae0 <_printf_common+0x9c>
1a005b2e:	Address 0x000000001a005b2e is out of bounds.


1a005b30 <_printf_i>:
1a005b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005b34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a005b38:	460c      	mov	r4, r1
1a005b3a:	7e09      	ldrb	r1, [r1, #24]
1a005b3c:	b085      	sub	sp, #20
1a005b3e:	296e      	cmp	r1, #110	; 0x6e
1a005b40:	4617      	mov	r7, r2
1a005b42:	4606      	mov	r6, r0
1a005b44:	4698      	mov	r8, r3
1a005b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005b48:	f000 80b3 	beq.w	1a005cb2 <_printf_i+0x182>
1a005b4c:	d822      	bhi.n	1a005b94 <_printf_i+0x64>
1a005b4e:	2963      	cmp	r1, #99	; 0x63
1a005b50:	d036      	beq.n	1a005bc0 <_printf_i+0x90>
1a005b52:	d80a      	bhi.n	1a005b6a <_printf_i+0x3a>
1a005b54:	2900      	cmp	r1, #0
1a005b56:	f000 80b9 	beq.w	1a005ccc <_printf_i+0x19c>
1a005b5a:	2958      	cmp	r1, #88	; 0x58
1a005b5c:	f000 8083 	beq.w	1a005c66 <_printf_i+0x136>
1a005b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005b64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a005b68:	e032      	b.n	1a005bd0 <_printf_i+0xa0>
1a005b6a:	2964      	cmp	r1, #100	; 0x64
1a005b6c:	d001      	beq.n	1a005b72 <_printf_i+0x42>
1a005b6e:	2969      	cmp	r1, #105	; 0x69
1a005b70:	d1f6      	bne.n	1a005b60 <_printf_i+0x30>
1a005b72:	6820      	ldr	r0, [r4, #0]
1a005b74:	6813      	ldr	r3, [r2, #0]
1a005b76:	0605      	lsls	r5, r0, #24
1a005b78:	f103 0104 	add.w	r1, r3, #4
1a005b7c:	d52a      	bpl.n	1a005bd4 <_printf_i+0xa4>
1a005b7e:	681b      	ldr	r3, [r3, #0]
1a005b80:	6011      	str	r1, [r2, #0]
1a005b82:	2b00      	cmp	r3, #0
1a005b84:	da03      	bge.n	1a005b8e <_printf_i+0x5e>
1a005b86:	222d      	movs	r2, #45	; 0x2d
1a005b88:	425b      	negs	r3, r3
1a005b8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a005b8e:	486f      	ldr	r0, [pc, #444]	; (1a005d4c <_printf_i+0x21c>)
1a005b90:	220a      	movs	r2, #10
1a005b92:	e039      	b.n	1a005c08 <_printf_i+0xd8>
1a005b94:	2973      	cmp	r1, #115	; 0x73
1a005b96:	f000 809d 	beq.w	1a005cd4 <_printf_i+0x1a4>
1a005b9a:	d808      	bhi.n	1a005bae <_printf_i+0x7e>
1a005b9c:	296f      	cmp	r1, #111	; 0x6f
1a005b9e:	d020      	beq.n	1a005be2 <_printf_i+0xb2>
1a005ba0:	2970      	cmp	r1, #112	; 0x70
1a005ba2:	d1dd      	bne.n	1a005b60 <_printf_i+0x30>
1a005ba4:	6823      	ldr	r3, [r4, #0]
1a005ba6:	f043 0320 	orr.w	r3, r3, #32
1a005baa:	6023      	str	r3, [r4, #0]
1a005bac:	e003      	b.n	1a005bb6 <_printf_i+0x86>
1a005bae:	2975      	cmp	r1, #117	; 0x75
1a005bb0:	d017      	beq.n	1a005be2 <_printf_i+0xb2>
1a005bb2:	2978      	cmp	r1, #120	; 0x78
1a005bb4:	d1d4      	bne.n	1a005b60 <_printf_i+0x30>
1a005bb6:	2378      	movs	r3, #120	; 0x78
1a005bb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a005bbc:	4864      	ldr	r0, [pc, #400]	; (1a005d50 <_printf_i+0x220>)
1a005bbe:	e055      	b.n	1a005c6c <_printf_i+0x13c>
1a005bc0:	6813      	ldr	r3, [r2, #0]
1a005bc2:	1d19      	adds	r1, r3, #4
1a005bc4:	681b      	ldr	r3, [r3, #0]
1a005bc6:	6011      	str	r1, [r2, #0]
1a005bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005bd0:	2301      	movs	r3, #1
1a005bd2:	e08c      	b.n	1a005cee <_printf_i+0x1be>
1a005bd4:	681b      	ldr	r3, [r3, #0]
1a005bd6:	6011      	str	r1, [r2, #0]
1a005bd8:	f010 0f40 	tst.w	r0, #64	; 0x40
1a005bdc:	bf18      	it	ne
1a005bde:	b21b      	sxthne	r3, r3
1a005be0:	e7cf      	b.n	1a005b82 <_printf_i+0x52>
1a005be2:	6813      	ldr	r3, [r2, #0]
1a005be4:	6825      	ldr	r5, [r4, #0]
1a005be6:	1d18      	adds	r0, r3, #4
1a005be8:	6010      	str	r0, [r2, #0]
1a005bea:	0628      	lsls	r0, r5, #24
1a005bec:	d501      	bpl.n	1a005bf2 <_printf_i+0xc2>
1a005bee:	681b      	ldr	r3, [r3, #0]
1a005bf0:	e002      	b.n	1a005bf8 <_printf_i+0xc8>
1a005bf2:	0668      	lsls	r0, r5, #25
1a005bf4:	d5fb      	bpl.n	1a005bee <_printf_i+0xbe>
1a005bf6:	881b      	ldrh	r3, [r3, #0]
1a005bf8:	4854      	ldr	r0, [pc, #336]	; (1a005d4c <_printf_i+0x21c>)
1a005bfa:	296f      	cmp	r1, #111	; 0x6f
1a005bfc:	bf14      	ite	ne
1a005bfe:	220a      	movne	r2, #10
1a005c00:	2208      	moveq	r2, #8
1a005c02:	2100      	movs	r1, #0
1a005c04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a005c08:	6865      	ldr	r5, [r4, #4]
1a005c0a:	60a5      	str	r5, [r4, #8]
1a005c0c:	2d00      	cmp	r5, #0
1a005c0e:	f2c0 8095 	blt.w	1a005d3c <_printf_i+0x20c>
1a005c12:	6821      	ldr	r1, [r4, #0]
1a005c14:	f021 0104 	bic.w	r1, r1, #4
1a005c18:	6021      	str	r1, [r4, #0]
1a005c1a:	2b00      	cmp	r3, #0
1a005c1c:	d13d      	bne.n	1a005c9a <_printf_i+0x16a>
1a005c1e:	2d00      	cmp	r5, #0
1a005c20:	f040 808e 	bne.w	1a005d40 <_printf_i+0x210>
1a005c24:	4665      	mov	r5, ip
1a005c26:	2a08      	cmp	r2, #8
1a005c28:	d10b      	bne.n	1a005c42 <_printf_i+0x112>
1a005c2a:	6823      	ldr	r3, [r4, #0]
1a005c2c:	07db      	lsls	r3, r3, #31
1a005c2e:	d508      	bpl.n	1a005c42 <_printf_i+0x112>
1a005c30:	6923      	ldr	r3, [r4, #16]
1a005c32:	6862      	ldr	r2, [r4, #4]
1a005c34:	429a      	cmp	r2, r3
1a005c36:	bfde      	ittt	le
1a005c38:	2330      	movle	r3, #48	; 0x30
1a005c3a:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005c3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a005c42:	ebac 0305 	sub.w	r3, ip, r5
1a005c46:	6123      	str	r3, [r4, #16]
1a005c48:	f8cd 8000 	str.w	r8, [sp]
1a005c4c:	463b      	mov	r3, r7
1a005c4e:	aa03      	add	r2, sp, #12
1a005c50:	4621      	mov	r1, r4
1a005c52:	4630      	mov	r0, r6
1a005c54:	f7ff fef6 	bl	1a005a44 <_printf_common>
1a005c58:	3001      	adds	r0, #1
1a005c5a:	d14d      	bne.n	1a005cf8 <_printf_i+0x1c8>
1a005c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005c60:	b005      	add	sp, #20
1a005c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a005c66:	4839      	ldr	r0, [pc, #228]	; (1a005d4c <_printf_i+0x21c>)
1a005c68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a005c6c:	6813      	ldr	r3, [r2, #0]
1a005c6e:	6821      	ldr	r1, [r4, #0]
1a005c70:	1d1d      	adds	r5, r3, #4
1a005c72:	681b      	ldr	r3, [r3, #0]
1a005c74:	6015      	str	r5, [r2, #0]
1a005c76:	060a      	lsls	r2, r1, #24
1a005c78:	d50b      	bpl.n	1a005c92 <_printf_i+0x162>
1a005c7a:	07ca      	lsls	r2, r1, #31
1a005c7c:	bf44      	itt	mi
1a005c7e:	f041 0120 	orrmi.w	r1, r1, #32
1a005c82:	6021      	strmi	r1, [r4, #0]
1a005c84:	b91b      	cbnz	r3, 1a005c8e <_printf_i+0x15e>
1a005c86:	6822      	ldr	r2, [r4, #0]
1a005c88:	f022 0220 	bic.w	r2, r2, #32
1a005c8c:	6022      	str	r2, [r4, #0]
1a005c8e:	2210      	movs	r2, #16
1a005c90:	e7b7      	b.n	1a005c02 <_printf_i+0xd2>
1a005c92:	064d      	lsls	r5, r1, #25
1a005c94:	bf48      	it	mi
1a005c96:	b29b      	uxthmi	r3, r3
1a005c98:	e7ef      	b.n	1a005c7a <_printf_i+0x14a>
1a005c9a:	4665      	mov	r5, ip
1a005c9c:	fbb3 f1f2 	udiv	r1, r3, r2
1a005ca0:	fb02 3311 	mls	r3, r2, r1, r3
1a005ca4:	5cc3      	ldrb	r3, [r0, r3]
1a005ca6:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a005caa:	460b      	mov	r3, r1
1a005cac:	2900      	cmp	r1, #0
1a005cae:	d1f5      	bne.n	1a005c9c <_printf_i+0x16c>
1a005cb0:	e7b9      	b.n	1a005c26 <_printf_i+0xf6>
1a005cb2:	6813      	ldr	r3, [r2, #0]
1a005cb4:	6825      	ldr	r5, [r4, #0]
1a005cb6:	6961      	ldr	r1, [r4, #20]
1a005cb8:	1d18      	adds	r0, r3, #4
1a005cba:	6010      	str	r0, [r2, #0]
1a005cbc:	0628      	lsls	r0, r5, #24
1a005cbe:	681b      	ldr	r3, [r3, #0]
1a005cc0:	d501      	bpl.n	1a005cc6 <_printf_i+0x196>
1a005cc2:	6019      	str	r1, [r3, #0]
1a005cc4:	e002      	b.n	1a005ccc <_printf_i+0x19c>
1a005cc6:	066a      	lsls	r2, r5, #25
1a005cc8:	d5fb      	bpl.n	1a005cc2 <_printf_i+0x192>
1a005cca:	8019      	strh	r1, [r3, #0]
1a005ccc:	2300      	movs	r3, #0
1a005cce:	6123      	str	r3, [r4, #16]
1a005cd0:	4665      	mov	r5, ip
1a005cd2:	e7b9      	b.n	1a005c48 <_printf_i+0x118>
1a005cd4:	6813      	ldr	r3, [r2, #0]
1a005cd6:	1d19      	adds	r1, r3, #4
1a005cd8:	6011      	str	r1, [r2, #0]
1a005cda:	681d      	ldr	r5, [r3, #0]
1a005cdc:	6862      	ldr	r2, [r4, #4]
1a005cde:	2100      	movs	r1, #0
1a005ce0:	4628      	mov	r0, r5
1a005ce2:	f000 f83d 	bl	1a005d60 <memchr>
1a005ce6:	b108      	cbz	r0, 1a005cec <_printf_i+0x1bc>
1a005ce8:	1b40      	subs	r0, r0, r5
1a005cea:	6060      	str	r0, [r4, #4]
1a005cec:	6863      	ldr	r3, [r4, #4]
1a005cee:	6123      	str	r3, [r4, #16]
1a005cf0:	2300      	movs	r3, #0
1a005cf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a005cf6:	e7a7      	b.n	1a005c48 <_printf_i+0x118>
1a005cf8:	6923      	ldr	r3, [r4, #16]
1a005cfa:	462a      	mov	r2, r5
1a005cfc:	4639      	mov	r1, r7
1a005cfe:	4630      	mov	r0, r6
1a005d00:	47c0      	blx	r8
1a005d02:	3001      	adds	r0, #1
1a005d04:	d0aa      	beq.n	1a005c5c <_printf_i+0x12c>
1a005d06:	6823      	ldr	r3, [r4, #0]
1a005d08:	079b      	lsls	r3, r3, #30
1a005d0a:	d413      	bmi.n	1a005d34 <_printf_i+0x204>
1a005d0c:	68e0      	ldr	r0, [r4, #12]
1a005d0e:	9b03      	ldr	r3, [sp, #12]
1a005d10:	4298      	cmp	r0, r3
1a005d12:	bfb8      	it	lt
1a005d14:	4618      	movlt	r0, r3
1a005d16:	e7a3      	b.n	1a005c60 <_printf_i+0x130>
1a005d18:	2301      	movs	r3, #1
1a005d1a:	464a      	mov	r2, r9
1a005d1c:	4639      	mov	r1, r7
1a005d1e:	4630      	mov	r0, r6
1a005d20:	47c0      	blx	r8
1a005d22:	3001      	adds	r0, #1
1a005d24:	d09a      	beq.n	1a005c5c <_printf_i+0x12c>
1a005d26:	3501      	adds	r5, #1
1a005d28:	68e3      	ldr	r3, [r4, #12]
1a005d2a:	9a03      	ldr	r2, [sp, #12]
1a005d2c:	1a9b      	subs	r3, r3, r2
1a005d2e:	42ab      	cmp	r3, r5
1a005d30:	dcf2      	bgt.n	1a005d18 <_printf_i+0x1e8>
1a005d32:	e7eb      	b.n	1a005d0c <_printf_i+0x1dc>
1a005d34:	2500      	movs	r5, #0
1a005d36:	f104 0919 	add.w	r9, r4, #25
1a005d3a:	e7f5      	b.n	1a005d28 <_printf_i+0x1f8>
1a005d3c:	2b00      	cmp	r3, #0
1a005d3e:	d1ac      	bne.n	1a005c9a <_printf_i+0x16a>
1a005d40:	7803      	ldrb	r3, [r0, #0]
1a005d42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005d46:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005d4a:	e76c      	b.n	1a005c26 <_printf_i+0xf6>
1a005d4c:	1a007641 	.word	0x1a007641
1a005d50:	1a007652 	.word	0x1a007652
1a005d54:	ffffffff 	.word	0xffffffff
1a005d58:	ffffffff 	.word	0xffffffff
1a005d5c:	ffffffff 	.word	0xffffffff

1a005d60 <memchr>:
1a005d60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005d64:	2a10      	cmp	r2, #16
1a005d66:	db2b      	blt.n	1a005dc0 <memchr+0x60>
1a005d68:	f010 0f07 	tst.w	r0, #7
1a005d6c:	d008      	beq.n	1a005d80 <memchr+0x20>
1a005d6e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005d72:	3a01      	subs	r2, #1
1a005d74:	428b      	cmp	r3, r1
1a005d76:	d02d      	beq.n	1a005dd4 <memchr+0x74>
1a005d78:	f010 0f07 	tst.w	r0, #7
1a005d7c:	b342      	cbz	r2, 1a005dd0 <memchr+0x70>
1a005d7e:	d1f6      	bne.n	1a005d6e <memchr+0xe>
1a005d80:	b4f0      	push	{r4, r5, r6, r7}
1a005d82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005d86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a005d8a:	f022 0407 	bic.w	r4, r2, #7
1a005d8e:	f07f 0700 	mvns.w	r7, #0
1a005d92:	2300      	movs	r3, #0
1a005d94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005d98:	3c08      	subs	r4, #8
1a005d9a:	ea85 0501 	eor.w	r5, r5, r1
1a005d9e:	ea86 0601 	eor.w	r6, r6, r1
1a005da2:	fa85 f547 	uadd8	r5, r5, r7
1a005da6:	faa3 f587 	sel	r5, r3, r7
1a005daa:	fa86 f647 	uadd8	r6, r6, r7
1a005dae:	faa5 f687 	sel	r6, r5, r7
1a005db2:	b98e      	cbnz	r6, 1a005dd8 <memchr+0x78>
1a005db4:	d1ee      	bne.n	1a005d94 <memchr+0x34>
1a005db6:	bcf0      	pop	{r4, r5, r6, r7}
1a005db8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005dbc:	f002 0207 	and.w	r2, r2, #7
1a005dc0:	b132      	cbz	r2, 1a005dd0 <memchr+0x70>
1a005dc2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005dc6:	3a01      	subs	r2, #1
1a005dc8:	ea83 0301 	eor.w	r3, r3, r1
1a005dcc:	b113      	cbz	r3, 1a005dd4 <memchr+0x74>
1a005dce:	d1f8      	bne.n	1a005dc2 <memchr+0x62>
1a005dd0:	2000      	movs	r0, #0
1a005dd2:	4770      	bx	lr
1a005dd4:	3801      	subs	r0, #1
1a005dd6:	4770      	bx	lr
1a005dd8:	2d00      	cmp	r5, #0
1a005dda:	bf06      	itte	eq
1a005ddc:	4635      	moveq	r5, r6
1a005dde:	3803      	subeq	r0, #3
1a005de0:	3807      	subne	r0, #7
1a005de2:	f015 0f01 	tst.w	r5, #1
1a005de6:	d107      	bne.n	1a005df8 <memchr+0x98>
1a005de8:	3001      	adds	r0, #1
1a005dea:	f415 7f80 	tst.w	r5, #256	; 0x100
1a005dee:	bf02      	ittt	eq
1a005df0:	3001      	addeq	r0, #1
1a005df2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005df6:	3001      	addeq	r0, #1
1a005df8:	bcf0      	pop	{r4, r5, r6, r7}
1a005dfa:	3801      	subs	r0, #1
1a005dfc:	4770      	bx	lr
1a005dfe:	bf00      	nop
1a005e00:	6f727245 	.word	0x6f727245
1a005e04:	6c612072 	.word	0x6c612072
1a005e08:	636e6920 	.word	0x636e6920
1a005e0c:	696c6169 	.word	0x696c6169
1a005e10:	2072617a 	.word	0x2072617a
1a005e14:	54524155 	.word	0x54524155
1a005e18:	50534520 	.word	0x50534520
1a005e1c:	00000000 	.word	0x00000000
1a005e20:	0a0d5441 	.word	0x0a0d5441
1a005e24:	00000000 	.word	0x00000000
1a005e28:	432b5441 	.word	0x432b5441
1a005e2c:	444f4d57 	.word	0x444f4d57
1a005e30:	0d333d45 	.word	0x0d333d45
1a005e34:	0000000a 	.word	0x0000000a
1a005e38:	432b5441 	.word	0x432b5441
1a005e3c:	50414a57 	.word	0x50414a57
1a005e40:	000a0d3f 	.word	0x000a0d3f
1a005e44:	432b5441 	.word	0x432b5441
1a005e48:	50414a57 	.word	0x50414a57
1a005e4c:	7325223d 	.word	0x7325223d
1a005e50:	25222c22 	.word	0x25222c22
1a005e54:	00002273 	.word	0x00002273
1a005e58:	432b5441 	.word	0x432b5441
1a005e5c:	554d5049 	.word	0x554d5049
1a005e60:	0d313d58 	.word	0x0d313d58
1a005e64:	0000000a 	.word	0x0000000a
1a005e68:	432b5441 	.word	0x432b5441
1a005e6c:	4c435049 	.word	0x4c435049
1a005e70:	3d45534f 	.word	0x3d45534f
1a005e74:	0a0d6425 	.word	0x0a0d6425
1a005e78:	00000000 	.word	0x00000000
1a005e7c:	432b5441 	.word	0x432b5441
1a005e80:	45535049 	.word	0x45535049
1a005e84:	52455652 	.word	0x52455652
1a005e88:	382c313d 	.word	0x382c313d
1a005e8c:	000a0d30 	.word	0x000a0d30
1a005e90:	432b5441 	.word	0x432b5441
1a005e94:	52534649 	.word	0x52534649
1a005e98:	00000a0d 	.word	0x00000a0d
1a005e9c:	4f525245 	.word	0x4f525245
1a005ea0:	4c203a52 	.word	0x4c203a52
1a005ea4:	6f6c2061 	.word	0x6f6c2061
1a005ea8:	7469676e 	.word	0x7469676e
1a005eac:	64206475 	.word	0x64206475
1a005eb0:	61642065 	.word	0x61642065
1a005eb4:	20736f74 	.word	0x20736f74
1a005eb8:	50545448 	.word	0x50545448
1a005ebc:	70757320 	.word	0x70757320
1a005ec0:	20617265 	.word	0x20617265
1a005ec4:	6d206c65 	.word	0x6d206c65
1a005ec8:	6d697861 	.word	0x6d697861
1a005ecc:	6570206f 	.word	0x6570206f
1a005ed0:	74696d72 	.word	0x74696d72
1a005ed4:	206f6469 	.word	0x206f6469
1a005ed8:	25206564 	.word	0x25206564
1a005edc:	79622064 	.word	0x79622064
1a005ee0:	2e736574 	.word	0x2e736574
1a005ee4:	00000000 	.word	0x00000000
1a005ee8:	432b5441 	.word	0x432b5441
1a005eec:	45535049 	.word	0x45535049
1a005ef0:	253d444e 	.word	0x253d444e
1a005ef4:	64252c63 	.word	0x64252c63
1a005ef8:	00000a0d 	.word	0x00000a0d
1a005efc:	00007325 	.word	0x00007325
1a005f00:	432b5441 	.word	0x432b5441
1a005f04:	4c435049 	.word	0x4c435049
1a005f08:	3d45534f 	.word	0x3d45534f
1a005f0c:	0a0d6325 	.word	0x0a0d6325
1a005f10:	ffffff00 	.word	0xffffff00

1a005f14 <HttpBody>:
1a005f14:	7669643c 3d646920 73616222 73202265     <div id="base" s
1a005f24:	656c7974 6977223d 3a687464 25303031     tyle="width:100%
1a005f34:	6965683b 3a746867 22253031 61743c3e     ;height:10%"><ta
1a005f44:	20656c62 64726f62 223d7265 74732230     ble border="0"st
1a005f54:	3d656c79 64697722 203a6874 25303031     yle="width: 100%
1a005f64:	6568203b 74686769 3031203a 3e222530     ; height: 100%">
1a005f74:	6f62743c 3c3e7964 3c3e7274 73206474     <tbody><tr><td s
1a005f84:	656c7974 6977223d 3a687464 683b2535     tyle="width:5%;h
1a005f94:	68676965 30313a74 3e222530 706e693c     eight:100%"><inp
1a005fa4:	74207475 3d657079 74756222 226e6f74     ut type="button"
1a005fb4:	3d646920 22306222 636e6f20 6b63696c      id="b0" onclick
1a005fc4:	6e65273d 746f4276 69687428 64692e73     ='envBot(this.id
1a005fd4:	73202729 656c7974 6977223d 3a687464     )' style="width:
1a005fe4:	25303031 6965683b 3a746867 25303031     100%;height:100%
1a005ff4:	2f3c3e22 74747562 3c3e6e6f 3e64742f     "></button></td>
1a006004:	2064743c 6c797473 77223d65 68746469     <td style="width
1a006014:	2530353a 6965683b 3a746867 25303031     :50%;height:100%
1a006024:	693c3e22 7475706e 70797420 62223d65     "><input type="b
1a006034:	6f747475 6920226e 62223d64 73202231     utton" id="b1" s
1a006044:	656c7974 6977223d 3a687464 25303031     tyle="width:100%
1a006054:	6965683b 3a746867 25303031 2f3c3e22     ;height:100%"></
1a006064:	74747562 3c3e6e6f 3e64742f 2064743c     button></td><td 
1a006074:	6c797473 77223d65 68746469 3b25353a     style="width:5%;
1a006084:	67696568 313a7468 22253030 6e693c3e     height:100%"><in
1a006094:	20747570 65707974 7562223d 6e6f7474     put type="button
1a0060a4:	64692022 3262223d 6e6f2022 63696c63     " id="b2" onclic
1a0060b4:	65273d6b 6f42766e 68742874 692e7369     k='envBot(this.i
1a0060c4:	20272964 6c797473 77223d65 68746469     d)' style="width
1a0060d4:	3030313a 65683b25 74686769 3030313a     :100%;height:100
1a0060e4:	3c3e2225 7475622f 3e6e6f74 64742f3c     %"></button></td
1a0060f4:	64743c3e 79747320 223d656c 74646977     ><td style="widt
1a006104:	30343a68 65683b25 74686769 3030313a     h:40%;height:100
1a006114:	3c3e2225 75706e69 79742074 223d6570     %"><input type="
1a006124:	74747562 20226e6f 223d6469 20223462     button" id="b4" 
1a006134:	6c636e6f 3d6b6369 766e6527 28746f42     onclick='envBot(
1a006144:	73696874 2964692e 74732027 3d656c79     this.id)' style=
1a006154:	64697722 313a6874 3b253030 67696568     "width:100%;heig
1a006164:	313a7468 22253030 622f3c3e 6f747475     ht:100%"></butto
1a006174:	2f3c3e6e 3c3e6474 3e72742f 62742f3c     n></td></tr></tb
1a006184:	3e79646f 61742f3c 3e656c62 69642f3c     ody></table></di
1a006194:	643c3e76 69207669 70223d64 6c656e61     v><div id="panel
1a0061a4:	74732022 3d656c79 64697722 313a6874     " style="width:1
1a0061b4:	3b253030 67696568 393a7468 3e222530     00%;height:90%">
1a0061c4:	6261743c 6220656c 6564726f 30223d72     <table border="0
1a0061d4:	79747322 223d656c 74646977 31203a68     "style="width: 1
1a0061e4:	3b253030 69656820 3a746867 30303120     00%; height: 100
1a0061f4:	3c3e2225 646f6274 743c3e79 743c3e72     %"><tbody><tr><t
1a006204:	64692064 3063223d 74732022 3d656c79     d id="c0" style=
1a006214:	64697722 313a6874 36362e36 65683b25     "width:16.66%;he
1a006224:	74686769 3030313a 3c3e2225 3e64742f     ight:100%"></td>
1a006234:	2064743c 223d6469 20223163 6c797473     <td id="c1" styl
1a006244:	77223d65 68746469 2e36313a 3b253636     e="width:16.66%;
1a006254:	67696568 313a7468 22253030 742f3c3e     height:100%"></t
1a006264:	743c3e64 64692064 3263223d 74732022     d><td id="c2" st
1a006274:	3d656c79 64697722 313a6874 36362e36     yle="width:16.66
1a006284:	65683b25 74686769 3030313a 3c3e2225     %;height:100%"><
1a006294:	3e64742f 2064743c 223d6469 20223363     /td><td id="c3" 
1a0062a4:	6c797473 77223d65 68746469 2e36313a     style="width:16.
1a0062b4:	3b253636 67696568 313a7468 22253030     66%;height:100%"
1a0062c4:	742f3c3e 743c3e64 64692064 3463223d     ></td><td id="c4
1a0062d4:	74732022 3d656c79 64697722 313a6874     " style="width:1
1a0062e4:	36362e36 65683b25 74686769 3030313a     6.66%;height:100
1a0062f4:	3c3e2225 3e64742f 2064743c 223d6469     %"></td><td id="
1a006304:	20223563 6c797473 77223d65 68746469     c5" style="width
1a006314:	2e36313a 3b253636 67696568 313a7468     :16.66%;height:1
1a006324:	22253030 742f3c3e 2f3c3e64 3c3e7274     00%"></td></tr><
1a006334:	6f62742f 3c3e7964 6261742f 3c3e656c     /tbody></table><
1a006344:	6261742f 3c3e656c 7669642f ffff003e     /table></div>...

1a006354 <HttpWebPage>:
1a006354:	6d74683c 623c3e6c 2079646f 223d6469     <html><body id="
1a006364:	79646f62 6e6f2022 64616f6c 6163273d     body" onload='ca
1a006374:	646f4272 27292879 3e703c3e 7263733c     rBody()'><p><scr
1a006384:	3e747069 213c2a2f 4144435b 2a5b4154     ipt>/*<![CDATA[*
1a006394:	7261762f 50636120 663b6e61 74636e75     /var acPan;funct
1a0063a4:	206e6f69 50726163 29286e61 7261767b     ion carPan(){var
1a0063b4:	6e3d6120 58207765 74484c4d 65527074      a=new XMLHttpRe
1a0063c4:	73657571 3b292874 6e6f2e61 64616572     quest();a.onread
1a0063d4:	61747379 68636574 65676e61 6e75663d     ystatechange=fun
1a0063e4:	6f697463 7b29286e 74286669 2e736968     ction(){if(this.
1a0063f4:	64616572 61745379 3d3d6574 74262634     readyState==4&&t
1a006404:	2e736968 74617473 3d3d7375 29303032     his.status==200)
1a006414:	7261767b 743d6720 2e736968 70736572     {var g=this.resp
1a006424:	65736e6f 74786554 7261763b 673d6620     onseText;var f=g
1a006434:	6275732e 69727473 6728676e 646e692e     .substring(g.ind
1a006444:	664f7865 70242228 6c656e61 61746164     exOf("$paneldata
1a006454:	312b2922 613b2930 6e615063 632e673d     ")+10);acPan=g.c
1a006464:	41726168 2e672874 65646e69 28664f78     harAt(g.indexOf(
1a006474:	61702422 6e6c656e 29226d75 3b29392b     "$panelnum")+9);
1a006484:	75636f64 746e656d 7465672e 6d656c45     document.getElem
1a006494:	42746e65 28644979 22316222 61762e29     entById("b1").va
1a0064a4:	3d65756c 5b727473 61506361 763b5d6e     lue=str[acPan];v
1a0064b4:	62207261 663b303d 7628726f 63207261     ar b=0;for(var c
1a0064c4:	633b303d 633b363c 7b292b2b 20726176     =0;c<6;c++){var 
1a0064d4:	6f643d65 656d7563 672e746e 6c457465     e=document.getEl
1a0064e4:	6e656d65 49794274 63222864 29632b22     ementById("c"+c)
1a0064f4:	692e653b 72656e6e 4c4d5448 763b663d     ;e.innerHTML=f;v
1a006504:	64207261 773b303d 656c6968 6c652828     ar d=0;while((el
1a006514:	6e656d65 643d6f74 6d75636f 2e746e65     emento=document.
1a006524:	45746567 656d656c 7942746e 22286449     getElementById("
1a006534:	642b2270 3d212929 6c6c756e 6c657b29     p"+d))!=null){el
1a006544:	6e656d65 692e6f74 70223d64 2b642b22     emento.id="p"+d+
1a006554:	2b623b63 2b643b2b 777d7d2b 6f646e69     c;b++;d++}}windo
1a006564:	65732e77 746e4974 61767265 7566286c     w.setInterval(fu
1a006574:	6974636e 29286e6f 7261637b 28746144     nction(){carDat(
1a006584:	54454722 2f222c22 61746164 2c7d2922     "GET","/data")},
1a006594:	30303031 3b7d7d29 706f2e61 22286e65     1000)}};a.open("
1a0065a4:	22544547 702f222c 6c656e61 72742c22     GET","/panel",tr
1a0065b4:	3b296575 65732e61 2928646e 5d2a2f7d     ue);a.send()}/*]
1a0065c4:	2f2a3e5d 63732f3c 74706972 63733c3e     ]>*/</script><sc
1a0065d4:	74706972 3c2a2f3e 44435b21 5b415441     ript>/*<![CDATA[
1a0065e4:	61762f2a 74732072 225b3d72 74736554     */var str=["Test
1a0065f4:	69724420 73726576 54222c22 20747365      Drivers","Test 
1a006604:	706d6554 7a69726f 726f6461 2c227365     Temporizadores",
1a006614:	61754722 72616472 49222c22 6963696e     "Guardar","Inici
1a006624:	2c227261 72615022 2c227261 696e4922     ar","Parar","Ini
1a006634:	72616963 646f7420 222c226f 61726150     ciar todo","Para
1a006644:	6f742072 5d226f64 6e75663b 6f697463     r todo"];functio
1a006654:	6163206e 74614472 622c6128 61767b29     n carDat(a,b){va
1a006664:	3d632072 2077656e 484c4d58 52707474     r c=new XMLHttpR
1a006674:	65757165 29287473 6f2e633b 6165726e     equest();c.onrea
1a006684:	74737964 63657461 676e6168 75663d65     dystatechange=fu
1a006694:	6974636e 29286e6f 2866697b 73696874     nction(){if(this
1a0066a4:	6165722e 74537964 3d657461 2626343d     .readyState==4&&
1a0066b4:	73696874 6174732e 3d737574 3030323d     this.status==200
1a0066c4:	61767b29 3d652072 4e4f534a 7261702e     ){var e=JSON.par
1a0066d4:	74286573 2e736968 70736572 65736e6f     se(this.response
1a0066e4:	74786554 66693b29 702e6528 6c656e61     Text);if(e.panel
1a0066f4:	63613d3d 296e6150 726f667b 303d6a28     ==acPan){for(j=0
1a006704:	363c6a3b 2b2b6a3b 6f667b29 3d692872     ;j<6;j++){for(i=
1a006714:	3c693b30 2b693b38 767b292b 64207261     0;i<8;i++){var d
1a006724:	636f643d 6e656d75 65672e74 656c4574     =document.getEle
1a006734:	746e656d 64497942 22702228 6a2b692b     mentById("p"+i+j
1a006744:	61763b29 3d662072 61642e65 695b6174     );var f=e.data[i
1a006754:	6a2b362a 66693b5d 742e6428 3d657079     *6+j];if(d.type=
1a006764:	756e223d 7265626d 697b2922 2e642866     ="number"){if(d.
1a006774:	756c6176 223d3d65 647b2922 6c61762e     value==""){d.val
1a006784:	663d6575 6c657d7d 647b6573 6c61762e     ue=f}}else{d.val
1a006794:	733d6575 665b7274 66693b5d 313e6628     ue=str[f];if(f>1
1a0067a4:	697b2930 3e662866 7b293032 74732e64     0){if(f>20){d.st
1a0067b4:	2e656c79 6b636162 756f7267 223d646e     yle.background="
1a0067c4:	36666623 22373433 736c657d 2e647b65     #ff6347"}else{d.
1a0067d4:	6c797473 61622e65 72676b63 646e756f     style.background
1a0067e4:	3723223d 30434643 7d7d2230 7d7d7d7d     ="#7CFC00"}}}}}}
1a0067f4:	65736c65 7261637b 286e6150 7d7d7d29     else{carPan()}}}
1a006804:	6f2e633b 286e6570 2c622c61 65757274     ;c.open(a,b,true
1a006814:	2e633b29 646e6573 2f7d2928 3e5d5d2a     );c.send()}/*]]>
1a006824:	2f3c2f2a 69726373 3c3e7470 69726373     */</script><scri
1a006834:	2f3e7470 5b213c2a 54414443 2f2a5b41     pt>/*<![CDATA[*/
1a006844:	636e7566 6e6f6974 61756720 72616472     function guardar
1a006854:	7b296228 20726176 3d613b61 73726170     (b){var a;a=pars
1a006864:	746e4965 732e6228 6563696c 29293228     eInt(b.slice(2))
1a006874:	7165723b 732f223d 24657661 63612b22     ;req="/save$"+ac
1a006884:	2b6e6150 2b222422 24222b62 61746164     Pan+"$"+b+"$data
1a006894:	2b225b3a 75636f64 746e656d 7465672e     :["+document.get
1a0068a4:	6d656c45 42746e65 28644979 2b227022     ElementById("p"+
1a0068b4:	29612b33 6c61762e 663b6575 6928726f     3+a).value;for(i
1a0068c4:	693b343d 693b373c 7b292b2b 3d716572     =4;i<7;i++){req=
1a0068d4:	2b716572 2b222c22 75636f64 746e656d     req+","+document
1a0068e4:	7465672e 6d656c45 42746e65 28644979     .getElementById(
1a0068f4:	2b227022 29612b69 6c61762e 727d6575     "p"+i+a).value}r
1a006904:	723d7165 222b7165 643b225d 6d75636f     eq=req+"]";docum
1a006914:	2e746e65 45746567 656d656c 7942746e     ent.getElementBy
1a006924:	22286449 29223462 6c61762e 723d6575     Id("b4").value=r
1a006934:	633b7165 61447261 50222874 2254534f     eq;carDat("POST"
1a006944:	7165722c 2a2f7d29 2a3e5d5d 732f3c2f     ,req)}/*]]>*/</s
1a006954:	70697263 733c3e74 70697263 2a2f3e74     cript><script>/*
1a006964:	435b213c 41544144 662f2a5b 74636e75     <![CDATA[*/funct
1a006974:	206e6f69 42726163 2879646f 61767b29     ion carBody(){va
1a006984:	3d612072 2077656e 484c4d58 52707474     r a=new XMLHttpR
1a006994:	65757165 29287473 6f2e613b 6165726e     equest();a.onrea
1a0069a4:	74737964 63657461 676e6168 75663d65     dystatechange=fu
1a0069b4:	6974636e 29286e6f 2866697b 73696874     nction(){if(this
1a0069c4:	6165722e 74537964 3d657461 2626343d     .readyState==4&&
1a0069d4:	73696874 6174732e 3d737574 3030323d     this.status==200
1a0069e4:	61767b29 3d622072 73696874 7365722e     ){var b=this.res
1a0069f4:	736e6f70 78655465 6f643b74 656d7563     ponseText;docume
1a006a04:	672e746e 6c457465 6e656d65 49794274     nt.getElementByI
1a006a14:	62222864 2279646f 6e692e29 4872656e     d("body").innerH
1a006a24:	2b4c4d54 633b623d 61507261 4722286e     TML+=b;carPan("G
1a006a34:	2c225445 61702f22 226c656e 3b7d7d29     ET","/panel")}};
1a006a44:	706f2e61 22286e65 22544547 622f222c     a.open("GET","/b
1a006a54:	2279646f 7572742c 613b2965 6e65732e     ody",true);a.sen
1a006a64:	7d292864 5d5d2a2f 3c2f2a3e 7263732f     d()}/*]]>*/</scr
1a006a74:	3e747069 7263733c 3e747069 636e7566     ipt><script>func
1a006a84:	6e6f6974 766e6520 28746f42 767b2962     tion envBot(b){v
1a006a94:	61207261 77656e3d 4c4d5820 70747448     ar a=new XMLHttp
1a006aa4:	75716552 28747365 2e613b29 6e65706f     Request();a.open
1a006ab4:	45472228 222c2254 7475622f 246e6f74     ("GET","/button$
1a006ac4:	63612b22 2b6e6150 2b222422 72742c62     "+acPan+"$"+b,tr
1a006ad4:	3b296575 65732e61 2928646e 2f3c3b7d     ue);a.send()};</
1a006ae4:	69726373 3c3e7470 3c3e702f 646f622f     script></p></bod
1a006af4:	2f3c3e79 6c6d7468 ffff003e 00006325     y></html>...%c..
1a006b04:	ff000d0a                                ....

1a006b08 <Response_CIFSR>:
1a006b08:	4649432b 533a5253 50494154 ff00222c     +CIFSR:STAIP,"..

1a006b18 <Response_COMMA>:
1a006b18:	ffff002c                                ,...

1a006b1c <Response_CWJAP_1>:
1a006b1c:	49464957 4e4f4320 5443454e ff004445     WIFI CONNECTED..

1a006b2c <Response_CWJAP_2>:
1a006b2c:	49464957 544f4720 00504920              WIFI GOT IP.

1a006b38 <Response_CWJAP_OK>:
1a006b38:	4a57432b 003a5041                       +CWJAP:.

1a006b40 <Response_IPD>:
1a006b40:	4450492b ffff002c                       +IPD,...

1a006b48 <Response_OK>:
1a006b48:	ff004b4f                                OK..

1a006b4c <Response_SEND_OK>:
1a006b4c:	444e4553 004b4f20                       SEND OK.

1a006b54 <ok>:
1a006b54:	ff004b4f                                OK..

1a006b58 <pageData0>:
1a006b58:	6170227b 226c656e 222c313a 61746164     {"panel":1,"data
1a006b68:	315b3a22 312c312c 312c312c 322c312c     ":[1,1,1,1,1,1,2
1a006b78:	322c322c 322c322c 312c322c 312c312c     ,2,2,2,2,2,1,1,1
1a006b88:	312c312c 322c312c 322c322c 322c322c     ,1,1,1,2,2,2,2,2
1a006b98:	312c322c 312c312c 312c312c 322c312c     ,2,1,1,1,1,1,1,2
1a006ba8:	322c322c 322c322c 312c322c 312c312c     ,2,2,2,2,2,1,1,1
1a006bb8:	312c312c 322c312c 322c322c 322c322c     ,1,1,1,2,2,2,2,2
1a006bc8:	7d5d322c ffffff00                       ,2]}....

1a006bd0 <panel0>:
1a006bd0:	6e617024 756e6c65 7024316d 6c656e61     $panelnum1$panel
1a006be0:	61746164 706e693c 74207475 3d657079     data<input type=
1a006bf0:	74756222 226e6f74 3d646920 22307022     "button" id="p0"
1a006c00:	636e6f20 6b63696c 6e65273d 746f4276      onclick='envBot
1a006c10:	69687428 64692e73 73202729 656c7974     (this.id)' style
1a006c20:	6977223d 3a687464 30303120 65683b25     ="width: 100%;he
1a006c30:	74686769 3731203a 20223b25 622f3c3e     ight: 17%;" ></b
1a006c40:	6f747475 623c3e6e 693c3e72 7475706e     utton><br><input
1a006c50:	70797420 62223d65 6f747475 6920226e      type="button" i
1a006c60:	70223d64 6f202231 696c636e 273d6b63     d="p1" onclick='
1a006c70:	42766e65 7428746f 2e736968 27296469     envBot(this.id)'
1a006c80:	79747320 223d656c 74646977 31203a68      style="width: 1
1a006c90:	3b253030 69656820 3a746867 25373120     00%; height: 17%
1a006ca0:	3e20223b 75622f3c 6e6f7474 72623c3e     ;" ></button><br
1a006cb0:	6e693c3e 20747570 65707974 7562223d     ><input type="bu
1a006cc0:	6e6f7474 64692022 3270223d 6e6f2022     tton" id="p2" on
1a006cd0:	63696c63 65273d6b 6f42766e 68742874     click='envBot(th
1a006ce0:	692e7369 20272964 6c797473 77223d65     is.id)' style="w
1a006cf0:	68746469 3031203a 203b2530 67696568     idth: 100%; heig
1a006d00:	203a7468 3b253731 3c3e2022 7475622f     ht: 17%;" ></but
1a006d10:	3e6e6f74 3e72623c 62616c3c 73206c65     ton><br><label s
1a006d20:	656c7974 6f66223d 732d746e 3a657a69     tyle="font-size:
1a006d30:	76382e31 3e223b68 61726150 7274656d     1.8vh;">Parametr
1a006d40:	3a31206f 616c2f3c 3e6c6562 3e72623c     o 1:</label><br>
1a006d50:	706e693c 74207475 3d657079 6d756e22     <input type="num
1a006d60:	22726562 223d6469 20223370 6c636e6f     ber"id="p3" oncl
1a006d70:	3d6b6369 766e6527 28746f42 73696874     ick='envBot(this
1a006d80:	2964692e 74732027 3d656c79 64697722     .id)' style="wid
1a006d90:	203a6874 25303031 6568203b 74686769     th: 100%; height
1a006da0:	2537203a 3e20223b 75622f3c 6e6f7474     : 7%;" ></button
1a006db0:	72623c3e 616c3c3e 206c6562 6c797473     ><br><label styl
1a006dc0:	66223d65 2d746e6f 657a6973 382e313a     e="font-size:1.8
1a006dd0:	223b6876 7261503e 74656d61 32206f72     vh;">Parametro 2
1a006de0:	6c2f3c3a 6c656261 72623c3e 6e693c3e     :</label><br><in
1a006df0:	20747570 65707974 756e223d 7265626d     put type="number
1a006e00:	64692022 3470223d 6e6f2022 63696c63     " id="p4" onclic
1a006e10:	65273d6b 6f42766e 68742874 692e7369     k='envBot(this.i
1a006e20:	20272964 6c797473 77223d65 68746469     d)' style="width
1a006e30:	3031203a 203b2530 67696568 203a7468     : 100%; height: 
1a006e40:	223b2537 2f3c3e20 74747562 3c3e6e6f     7%;" ></button><
1a006e50:	3c3e7262 6562616c 7473206c 3d656c79     br><label style=
1a006e60:	6e6f6622 69732d74 313a657a 6876382e     "font-size:1.8vh
1a006e70:	503e223b 6d617261 6f727465 3c3a3320     ;">Parametro 3:<
1a006e80:	62616c2f 3c3e6c65 3c3e7262 75706e69     /label><br><inpu
1a006e90:	79742074 223d6570 626d756e 20227265     t type="number" 
1a006ea0:	223d6469 20223570 6c636e6f 3d6b6369     id="p5" onclick=
1a006eb0:	766e6527 28746f42 73696874 2964692e     'envBot(this.id)
1a006ec0:	74732027 3d656c79 64697722 203a6874     ' style="width: 
1a006ed0:	25303031 6568203b 74686769 2537203a     100%; height: 7%
1a006ee0:	3e20223b 75622f3c 6e6f7474 72623c3e     ;" ></button><br
1a006ef0:	616c3c3e 206c6562 6c797473 66223d65     ><label style="f
1a006f00:	2d746e6f 657a6973 382e313a 223b6876     ont-size:1.8vh;"
1a006f10:	7261503e 74656d61 34206f72 6c2f3c3a     >Parametro 4:</l
1a006f20:	6c656261 72623c3e 6e693c3e 20747570     abel><br><input 
1a006f30:	65707974 756e223d 7265626d 64692022     type="number" id
1a006f40:	3670223d 6e6f2022 63696c63 65273d6b     ="p6" onclick='e
1a006f50:	6f42766e 68742874 692e7369 20272964     nvBot(this.id)' 
1a006f60:	6c797473 77223d65 68746469 3031203a     style="width: 10
1a006f70:	203b2530 67696568 203a7468 223b2537     0%; height: 7%;"
1a006f80:	622f3c3e 6f747475 623c3e6e 693c3e72     ></button><br><i
1a006f90:	7475706e 70797420 62223d65 6f747475     nput type="butto
1a006fa0:	6920226e 70223d64 76202237 65756c61     n" id="p7" value
1a006fb0:	22203d20 72617547 22726164 636e6f20      = "Guardar" onc
1a006fc0:	6b63696c 7567273d 61647261 68742872     lick='guardar(th
1a006fd0:	692e7369 20272964 6c797473 77223d65     is.id)' style="w
1a006fe0:	68746469 3031203a 203b2530 67696568     idth: 100%; heig
1a006ff0:	203a7468 3b253031 2f3c3e22 74747562     ht: 10%;"></butt
1a007000:	3c3e6e6f 003e7262 614c200a 71657220     on><br>.. La req
1a007010:	74736575 65697420 7520656e 6c20616e     uest tiene una l
1a007020:	69676e6f 20647574 203a6564 0a206425     ongitud de: %d .
1a007030:	00000000 614c200a 71657220 74736575     ..... La request
1a007040:	6d6f6320 74656c70 73652061 7325203a      completa es: %s
1a007050:	00000a20 00544547 7461642f 00000061      ...GET./data...
1a007060:	7475622f 006e6f74 6e61702f 00006c65     /button./panel..
1a007070:	646f622f 00000079 7661732f 00000065     /body.../save...
1a007080:	54534f50 00000000 7475622f 246e6f74     POST..../button$
1a007090:	00000000 7661732f 00002465 614c200a     ..../save$... La
1a0070a0:	71657220 74736575 6d696c20 20616970      request limpia 
1a0070b0:	203a7365 0a207325 00000000 6c45200a     es: %s ...... El
1a0070c0:	74656d20 206f646f 203a7365 0a207325      metodo es: %s .
1a0070d0:	00000000 614c200a 72657620 6e6f6973     ..... La version
1a0070e0:	20656420 50545448 3a736520 20732520      de HTTP es: %s 
1a0070f0:	ffff000a                                ....

1a0070f4 <requestError>:
1a0070f4:	50545448 312e312f 30303420 004b4f20     HTTP/1.1 400 OK.
1a007104:	50545448 ffff002f 6e617254 74696d73     HTTP/...Transmit
1a007114:	ffffff00 69420d0a 65766e65 6f64696e     ......Bienvenido
1a007124:	206c6120 76726573 726f6469 54544820      al servidor HTT
1a007134:	73452050 36323870 6f632036 4445206e     P Esp8266 con ED
1a007144:	49432055 00004141 614c0d0a 6e6f6320     U CIAA....La con
1a007154:	75676966 69636172 70206e6f 65646575     figuracion puede
1a007164:	72617420 20726164 74736168 20312061      tardar hasta 1 
1a007174:	756e696d 002e6f74 6373696d 67656c6f     minuto..miscoleg
1a007184:	00007361 61736143 72614d2d 006c6f6d     as..Casa-Marmol.
1a007194:	65530d0a 64697672 4820726f 20505454     ..Servidor HTTP 
1a0071a4:	666e6f63 72756769 2e6f6461 3a504920     configurado. IP:
1a0071b4:	00732520 72450d0a 20726f72 63206c61      %s...Error al c
1a0071c4:	69666e6f 61727567 65732072 64697672     onfigurar servid
1a0071d4:	4820726f 2e505454 00000000 65500d0a     or HTTP.......Pe
1a0071e4:	69636974 72206e6f 6f707365 6469646e     ticion respondid
1a0071f4:	6c612061 696c6320 65746e65 54544820     a al cliente HTT
1a007204:	64252050 0000002e 65500d0a 69636974     P %d......Petici
1a007214:	6e206e6f 6572206f 6e6f7073 61646964     on no respondida
1a007224:	206c6120 65696c63 2065746e 50545448      al cliente HTTP
1a007234:	2e642520 ffffff00 6154796d 00006b73      %d.....myTask..
1a007244:	6154796d 00336b73 6c707041 74616369     myTask3.Applicat
1a007254:	206e6f69 6c6c614d 4620636f 656c6961     ion Malloc Faile
1a007264:	6f482064 0d216b6f 00000000 7362696c     d Hook!.....libs
1a007274:	6572662f 6f747265 6f732f73 65637275     /freertos/source
1a007284:	6f6f682f 632e736b ffffff00 70410a0d     /hooks.c......Ap
1a007294:	63696c70 6f697461 7453206e 206b6361     plication Stack 
1a0072a4:	7265764f 776f6c66 6f202121 6154206e     Overflow!! on Ta
1a0072b4:	203a6b73 0a0d7325 ffffff00 41760a0d     sk: %s........vA
1a0072c4:	72657373 6c614374 2864656c 200a0d29     ssertCalled().. 
1a0072d4:	4c4c2020 20656e69 626d754e 3d207265       LLine Number =
1a0072e4:	0d642520 2020200a 656c6946 6d614e20      %d..   File Nam
1a0072f4:	203d2065 0a0d7325 ff000a0d 454c4449     e = %s......IDLE
1a007304:	ffffff00 51726d54 ffffff00 20726d54     ....TmrQ....Tmr 
1a007314:	00637653                                Svc.

1a007318 <ExtRateIn>:
1a007318:	00000000                                ....

1a00731c <GpioButtons>:
1a00731c:	08000400 09010900                       ........

1a007324 <GpioLeds>:
1a007324:	01050005 0e000205 0c010b01              ............

1a007330 <GpioPorts>:
1a007330:	03030003 0f050403 05031005 07030603     ................
1a007340:	ffff0802                                ....

1a007344 <OscRateIn>:
1a007344:	00b71b00                                ....

1a007348 <InitClkStates>:
1a007348:	01010f01                                ....

1a00734c <pinmuxing>:
1a00734c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00735c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00736c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00737c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00738c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00739c:	00d50301 00d50401 00160107 00560207     ..............V.
1a0073ac:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0073bc:	00570206                                ..W.

1a0073c0 <UART_BClock>:
1a0073c0:	01a201c2 01620182                       ......b.

1a0073c8 <UART_PClock>:
1a0073c8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0073d8:	ffff00ff                                ....

1a0073dc <periph_to_base>:
1a0073dc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0073ec:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0073fc:	000100e0 01000100 01200003 00060120     .......... . ...
1a00740c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a00741c:	01820013 00120182 01a201a2 01c20011     ................
1a00742c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00743c:	02220222 0223000d 001c0223              "."...#.#...

1a007448 <InitClkStates>:
1a007448:	00010100 00010909 0001090a 01010701     ................
1a007458:	00010902 00010906 0101090c 0001090d     ................
1a007468:	0001090e 0001090f 00010910 00010911     ................
1a007478:	00010912 00010913 00011114 00011119     ................
1a007488:	0001111a 0001111b                       ........

1a007490 <lpcUarts>:
1a007490:	40081000 06020406 00180205 40081000     ...@...........@
1a0074a0:	09070509 00180706 40082000 00000000     ......... .@....
1a0074b0:	00190000 400c1000 07060107 001a0602     .......@........
1a0074c0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0074d0:	02020302 001b0204                       ........

1a0074d8 <gpioPinsInit>:
1a0074d8:	02000104 00050701 05010d03 04080100     ................
1a0074e8:	02020002 02000304 00000403 04070002     ................
1a0074f8:	030c0300 09050402 05040103 04030208     ................
1a007508:	04020305 06040504 0802000c 03000b06     ................
1a007518:	00090607 07060503 060f0504 03030004     ................
1a007528:	02000404 00050404 06040502 04060200     ................
1a007538:	0c050408 05040a04 0003010e 14010a00     ................
1a007548:	010f0000 0d000012 00001101 0010010c     ................
1a007558:	07070300 000f0300 01000001 00000000     ................
1a007568:	000a0600 08060603 06100504 04030005     ................
1a007578:	03000106 04090400 04010d05 010b0000     ................
1a007588:	0200000f 00000001 00010104 02010800     ................
1a007598:	01090000 09010006 05040002 04010200     ................
1a0075a8:	02020105 02020504 0e00000a 01000b02     ................
1a0075b8:	000c020b ffff0c01 6c756e28 0000296c     ........(null)..

1a0075c8 <ultrasonicSensorsIrqMap>:
1a0075c8:	ff020100                                ....

1a0075cc <__sf_fake_stderr>:
	...

1a0075ec <__sf_fake_stdin>:
	...

1a00760c <__sf_fake_stdout>:
	...

1a00762c <_global_impure_ptr>:
1a00762c:	100000d8 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a00763c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00764c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00765c:	64636261 ff006665                       abcdef..
