
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf:     file format elf32-littlearm
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000849

Program Header:
0x70000001 off    0x00015368 vaddr 0x1a005368 paddr 0x1a005368 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c80 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005370 memsz 0x00005370 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005370 align 2**16
         filesz 0x0000012c memsz 0x0000012c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005364  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  10000000  1a005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
  6 .bss          00002b54  1000012c  1000012c  0000012c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 11 .init_array   00000004  1a005364  1a005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005368  1a005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0002012c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 18 .noinit       00000000  10002c80  10002c80  0002012c  2**2
                  CONTENTS
 19 .debug_info   0002fb53  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005f87  00000000  00000000  0004fc7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000bf46  00000000  00000000  00055c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001068  00000000  00000000  00061b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001178  00000000  00000000  00062bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000109f4  00000000  00000000  00063d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001635b  00000000  00000000  00074720  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000301b0  00000000  00000000  0008aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000bac2b  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000bacaa  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003044  00000000  00000000  000bace4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
1000012c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005364 l    d  .init_array	00000000 .init_array
1a005368 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c80 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003584 l     F .text	000000c8 uartProcessIRQ
10002bfc l     O .bss	00000004 rxIsrCallbackUART0
10002c00 l     O .bss	00000004 rxIsrCallbackUART0Params
10002c04 l     O .bss	00000004 rxIsrCallbackUART2
10002c08 l     O .bss	00000004 rxIsrCallbackUART2Params
10002c0c l     O .bss	00000004 rxIsrCallbackUART3
10002c10 l     O .bss	00000004 rxIsrCallbackUART3Params
10002c14 l     O .bss	00000004 txIsrCallbackUART0
10002c18 l     O .bss	00000004 txIsrCallbackUART0Params
10002c1c l     O .bss	00000004 txIsrCallbackUART2
10002c20 l     O .bss	00000004 txIsrCallbackUART2Params
10002c24 l     O .bss	00000004 txIsrCallbackUART3
10002c28 l     O .bss	00000004 txIsrCallbackUART3Params
1a005198 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 UARTEspDriver.c
00000000 l    df *ABS*	00000000 portsDriver.c
1000012c l     O .bss	00000001 byteIndex.14479
1000012d l     O .bss	00000001 byteNumber.14456
10000130 l     O .bss	00000012 dataToSend.14477
10000142 l     O .bss	00000001 portIndex.14478
10000144 l     O .bss	00000004 receivedData.14455
10000148 l     O .bss	00000001 transmitEmpty.14482
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 modPrincipalCIAA.c
1000014c l     O .bss	00000010 UARTData.14470
1000015c l     O .bss	00000054 ports.14469
00000000 l    df *ABS*	00000000 system.c
100001b0 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a00099c l     F .text	00000064 prvHeapInit
100001b8 l     O .bss	00002000 ucHeap
1a000a00 l     F .text	00000058 prvInsertBlockIntoFreeList
100001b4 l     O .bss	00000004 pxEnd
100021b8 l     O .bss	00000004 xBlockAllocatedBit
100021bc l     O .bss	00000004 xFreeBytesRemaining
100021c0 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100021c4 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000be4 l     F .text	0000001e prvIsQueueFull
1a000c02 l     F .text	0000001a prvIsQueueEmpty
1a000c1c l     F .text	00000076 prvCopyDataToQueue
1a000c92 l     F .text	00000024 prvCopyDataFromQueue
1a000cb6 l     F .text	0000006e prvUnlockQueue
1a000da8 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100021cc l     O .bss	00000168 uxIdleTaskStack.10728
10002334 l     O .bss	000005a0 uxTimerTaskStack.10735
100028d4 l     O .bss	00000060 xIdleTaskTCB.10727
10002934 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0014b4 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0014e0 l     F .text	00000092 prvInitialiseNewTask
1a001574 l     F .text	00000068 prvInitialiseTaskLists
1a0015dc l     F .text	000000ac prvAddNewTaskToReadyList
1a001688 l     F .text	00000038 prvDeleteTCB
1a0016c0 l     F .text	0000004c prvCheckTasksWaitingTermination
1a00170c l     F .text	00000028 prvIdleTask
1a001734 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002998 l     O .bss	00000004 pxDelayedTaskList
1000299c l     O .bss	00000004 pxOverflowDelayedTaskList
100029a0 l     O .bss	0000008c pxReadyTasksLists
10002a2c l     O .bss	00000004 uxCurrentNumberOfTasks
10002a30 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a34 l     O .bss	00000004 uxPendedTicks
10002a38 l     O .bss	00000004 uxSchedulerSuspended
10002a3c l     O .bss	00000004 uxTaskNumber
10002a40 l     O .bss	00000004 uxTopReadyPriority
10002a44 l     O .bss	00000014 xDelayedTaskList1
10002a58 l     O .bss	00000014 xDelayedTaskList2
10002a6c l     O .bss	00000004 xNextTaskUnblockTime
10002a70 l     O .bss	00000004 xNumOfOverflows
10002a74 l     O .bss	00000014 xPendingReadyList
10002a88 l     O .bss	00000004 xSchedulerRunning
10002a8c l     O .bss	00000014 xSuspendedTaskList
10002aa0 l     O .bss	00000014 xTasksWaitingTermination
10002ab4 l     O .bss	00000004 xTickCount
10002ab8 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001f80 l     F .text	00000020 prvGetNextExpireTime
1a001fa0 l     F .text	00000048 prvInsertTimerInActiveList
1a001fe8 l     F .text	00000070 prvCheckForValidListAndQueue
1a002058 l     F .text	00000040 prvInitialiseNewTimer
1a002414 l     F .text	00000016 prvTimerTask
1a0021a0 l     F .text	00000078 prvSwitchTimerLists
1a002218 l     F .text	0000002c prvSampleTimeNow
1a002244 l     F .text	00000060 prvProcessExpiredTimer
1a0022a4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002318 l     F .text	000000fc prvProcessReceivedCommands
10002abc l     O .bss	00000004 pxCurrentTimerList
10002ac0 l     O .bss	00000004 pxOverflowTimerList
10002ac4 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002b64 l     O .bss	00000014 xActiveTimerList1
10002b78 l     O .bss	00000014 xActiveTimerList2
10002b8c l     O .bss	00000004 xLastTime.11777
10002b90 l     O .bss	00000050 xStaticTimerQueue.11827
10002be0 l     O .bss	00000004 xTimerQueue
10002be4 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002450 l     F .text	00000040 prvTaskExitError
1a002490 l     F .text	00000022 prvPortStartFirstTask
1a0024b8 l     F .text	0000000e vPortEnableVFP
1a002520 l       .text	00000000 pxCurrentTCBConst2
1a002600 l       .text	00000000 pxCurrentTCBConst
10002be8 l     O .bss	00000001 ucMaxSysCallPriority
10002bec l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0027f4 l     F .text	00000044 Board_LED_Init
1a002838 l     F .text	00000040 Board_TEC_Init
1a002878 l     F .text	00000040 Board_GPIO_Init
1a0028b8 l     F .text	00000030 Board_ADC_Init
1a0028e8 l     F .text	00000038 Board_SPI_Init
1a002920 l     F .text	00000024 Board_I2C_Init
1a005024 l     O .text	00000008 GpioButtons
1a00502c l     O .text	0000000c GpioLeds
1a005038 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005050 l     O .text	00000004 InitClkStates
1a005054 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002b10 l     F .text	0000002c Chip_UART_GetIndex
1a0050c8 l     O .text	00000008 UART_BClock
1a0050d0 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002cb8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002ccc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002d80 l     F .text	000000a4 pll_calc_divs
1a002e24 l     F .text	0000010c pll_get_frac
1a002f30 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0031a4 l     F .text	00000022 Chip_Clock_GetDivRate
10002bf4 l     O .bss	00000008 audio_usb_pll_freq
1a0050e4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005150 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a00347c l     F .text	00000014 Chip_SSP_GetClockIndex
1a003490 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0038a8 l     F .text	00000002 errorOcurred
1a0038aa l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0039b4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002c2c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003d04 l     F .text	00000010 clearInterrupt
1a003d14 l     F .text	0000005c serveInterrupt
10000080 l     O .data	00000048 ultrasonicSensors
1a0052c8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0041f0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a004910 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100000cc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005368 l       .init_array	00000000 __init_array_end
1a005364 l       .bss_RAM5	00000000 __preinit_array_end
1a005364 l       .init_array	00000000 __init_array_start
1a005364 l       .bss_RAM5	00000000 __preinit_array_start
1a002fc8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0008e8 g     F .text	00000012 _isatty_r
1a004574 g     F .text	000000b8 _puts_r
1a00392c g     F .text	00000044 TIMER2_IRQHandler
1a0037f0 g     F .text	00000014 uartRxRead
1a0008fa g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a00064c g     F .text	000000a4 portsdriverInit
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002568 g     F .text	0000002c vPortExitCritical
1a0020fc g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004544 g     F .text	00000030 printf
1a0029da g     F .text	00000008 __stdio_init
1a004696 g     F .text	00000024 __sseek
1a004270 g     F .text	00000060 __sinit
1a0046c4 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a00133c g     F .text	00000052 vQueueWaitForMessageRestricted
1a004244 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002d72 g     F .text	0000000c Chip_ADC_SetResolution
1a00490e g     F .text	00000002 __malloc_unlock
1a000454 g     F .text	0000008c onRxCallback
1a002604 g     F .text	0000002c SysTick_Handler
1a002b90 g     F .text	00000040 Chip_UART_SetBaud
1a000844  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00297c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0025a0 g     F .text	00000064 PendSV_Handler
1a001024 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005370 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a000508 g     F .text	00000104 onTxCallback
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002994 g     O .bss	00000004 pxCurrentTCB
1a0008de g     F .text	0000000a _fstat_r
53ff7046 g       *ABS*	00000000 __valid_user_code_checksum
1a000300 g     F .text	00000054 EspRxCallback
1a005370 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001e0c g     F .text	00000018 vTaskInternalSetTimeOutState
1a003798 g     F .text	00000028 uartCallbackClr
1a003970 g     F .text	00000044 TIMER3_IRQHandler
1a003246 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002668 g     F .text	00000110 xPortStartScheduler
1a0043cc g     F .text	00000016 memcpy
1a001d18 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004238 g     F .text	0000000c _cleanup_r
1a002630  w    F .text	00000038 vPortSetupTimerInterrupt
1a003d90 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c80 g       .noinit	00000000 _noinit
1a00462c g     F .text	00000010 puts
1a000b74 g     F .text	00000070 vPortFree
1a0006f0 g     F .text	00000048 sendDataPort
10002c78 g     O .bss	00000004 SystemCoreClock
1a002b3c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002778 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a0032c4 g     F .text	0000004c Chip_Clock_GetRate
1a0013aa g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002a1c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003dc0 g     F .text	000002cc .hidden __udivmoddi4
1a00097c g     F .text	00000020 _sbrk_r
1a005020 g     O .text	00000004 ExtRateIn
1a0004e0 g     F .text	00000028 onTxTimeOutCallback
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000444 g     F .text	00000010 receiveEspByte
1a000904 g     F .text	0000004e _read_r
1a0013a4 g     F .text	00000006 vListInitialiseItem
1a000738 g     F .text	00000056 myTask
1a003d7a g     F .text	0000000a GPIO1_IRQHandler
1a0010f0 g     F .text	00000158 xQueueReceive
10002c38 g     O .bss	00000040 xQueueRegistry
1a001438 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005368 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00532c g     O .text	00000004 _global_impure_ptr
1a004384 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000a58 g     F .text	0000011c pvPortMalloc
1a002998 g     F .text	00000030 Board_Init
1a0008d2  w    F .text	00000002 _init
1a00138e g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00060c g     F .text	0000003e portsDataInit
1a001948 g     F .text	0000000c xTaskGetTickCount
1a000ea8 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c80 g       .bss	00000000 _ebss
1a0038ac g     F .text	00000040 TIMER0_IRQHandler
1a000848 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002ad8 g     F .text	00000038 Chip_I2C_SetClockRate
1a001ed0 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002f7c g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001d80 g     F .text	0000008c xTaskRemoveFromEventList
1a00147c  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0038ec g     F .text	00000040 TIMER1_IRQHandler
1a0052cc g     O .text	00000020 __sf_fake_stderr
1a002ab4 g     F .text	00000024 Chip_I2C_Init
1a003894 g     F .text	0000000a UART2_IRQHandler
1a003138 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000354 g     F .text	00000054 EspTxCallback
1a0051e0 g     O .text	000000e6 gpioPinsInit
1a00364c g     F .text	00000090 uartInterrupt
1a001450  w    F .text	0000002c vAssertCalled
1a0034a8 g     F .text	00000012 Chip_SSP_SetClockRate
1a003c66 g     F .text	00000016 gpioToggle
1a00493e g     F .text	00000024 __sfputs_r
1a003d84 g     F .text	0000000a GPIO2_IRQHandler
1a004ea0 g     F .text	00000000 memchr
1a001e24 g     F .text	00000080 xTaskCheckForTimeOut
1a0043f4 g     F .text	0000009c _free_r
1a003220 g     F .text	00000026 Chip_Clock_GetBaseClock
1000012c g       .bss	00000000 _bss
1a002d40 g     F .text	00000032 Chip_ADC_SetSampleRate
10002bf0 g     O .bss	00000004 freeRtosInterruptCallback
1a001938 g     F .text	00000010 vTaskSuspendAll
1a0037c0 g     F .text	00000030 uartSetPendingInterrupt
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0034ba g     F .text	0000003e Chip_SSP_SetBitRate
1a0013f6 g     F .text	00000028 uxListRemove
1a003478 g     F .text	00000002 Chip_GPIO_Init
1a00504c g     O .text	00000004 OscRateIn
1a003818 g     F .text	0000007c uartInit
1a0017cc g     F .text	00000072 xTaskCreateStatic
10002c80 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001c50 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000dca g     F .text	00000090 xQueueGenericCreateStatic
1a001d48 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a0008d4 g     F .text	0000000a _close_r
1a0039e8 g     F .text	000001ac gpioInit
1a001420 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002134 g     F .text	0000006c xTimerGenericCommand
1a004768 g     F .text	000000dc __swsetup_r
1a001498  w    F .text	0000001c vApplicationStackOverflowHook
1a00408c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0042d0 g     F .text	00000078 __sfp
1a00463c g     F .text	00000022 __sread
1a003c7c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00490c g     F .text	00000002 __malloc_lock
1a002968 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a00419c g     F .text	00000054 _fflush_r
1a0052ec g     O .text	00000020 __sf_fake_stdin
1a002fe4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0043e2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0007c8 g     F .text	0000007c main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0013c2 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002500 g     F .text	00000024 SVC_Handler
1a0046ba g     F .text	00000008 __sclose
1a002098 g     F .text	00000064 xTimerCreateTimerTask
1a004490 g     F .text	000000b4 _malloc_r
1a001b60 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003254 g     F .text	0000003c Chip_Clock_EnableOpts
1a0029d2 g     F .text	00000008 __stdio_getchar
1a001248 g     F .text	000000aa xQueueReceiveFromISR
1a000e5a g     F .text	0000004e xQueueGenericCreate
1a003000 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0030b8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003530 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003b94 g     F .text	0000006a gpioWrite
1a0008d0  w    F .text	00000002 _fini
1a004544 g     F .text	00000030 iprintf
1a001a6c g     F .text	000000f4 xTaskResumeAll
1a0018a4 g     F .text	00000094 vTaskStartScheduler
1a002d00 g     F .text	00000040 Chip_ADC_Init
10002c7c g     O .bss	00000004 g_pUsbApi
1a0029e4 g     F .text	00000038 Board_SetupMuxing
1a002bd0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000952 g     F .text	00000028 _write_r
1a00242a g     F .text	00000026 pvTimerGetTimerID
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a004b90 g     F .text	000000ea _printf_common
100000c8 g     O .data	00000004 _impure_ptr
1a004090 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003804 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001ea4 g     F .text	0000000c vTaskMissedYield
10002c80 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0034f8 g     F .text	00000038 Chip_SSP_Init
1a001314 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a001954 g     F .text	00000118 xTaskIncrementTick
1a004844 g     F .text	00000048 __swhatbuf_r
1a0027d4 g     F .text	00000020 DAC_IRQHandler
1a002944 g     F .text	00000024 Board_Debug_Init
1a0029c8 g     F .text	0000000a __stdio_putchar
1a000d24 g     F .text	00000084 xQueueGenericReset
1000012c g       .data	00000000 _edata
1a002a94 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000408 g     F .text	0000003c sendEspByte
1a00183e g     F .text	00000066 xTaskCreate
1a003324 g     F .text	00000154 Chip_SetupCoreClock
1a00465e g     F .text	00000038 __swrite
1a003d70 g     F .text	0000000a GPIO0_IRQHandler
1a00078e g     F .text	0000003a myTask2
1a004964 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004348 g     F .text	0000003c _fwalk_reent
1a003310 g     F .text	00000014 SystemCoreClockUpdate
1a0003a8 g     F .text	00000060 UARTEspInit
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001c04 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00530c g     O .text	00000020 __sf_fake_stdout
1a001eb0 g     F .text	00000020 xTaskGetSchedulerState
1a00408c  w    F .text	00000002 .hidden __aeabi_idiv0
1a0036dc g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a00488c g     F .text	00000080 __smakebuf_r
1a0024cc g     F .text	0000002c pxPortInitialiseStack
1a004c7c g     F .text	00000224 _printf_i
1a003290 g     F .text	00000034 Chip_Clock_Enable
1a00389e g     F .text	0000000a UART3_IRQHandler
10002c34 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a003bfe g     F .text	00000068 gpioRead
1a003c98 g     F .text	0000006c boardInit
1a002524 g     F .text	00000044 vPortEnterCritical
10002c30 g     O .bss	00000004 __malloc_free_list
1a0012f2 g     F .text	00000020 xQueueIsQueueEmptyFromISR
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a004964 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0031c8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003568 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002a88 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 49 08 00 1a 79 01 00 1a 7b 01 00 1a     ....I...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 46 70 ff 53     }...........Fp.S
	...
1a00002c:	01 25 00 1a 85 01 00 1a 00 00 00 00 a1 25 00 1a     .%...........%..
1a00003c:	05 26 00 1a                                         .&..

1a000040 <g_pfnVendorVectors>:
1a000040:	d5 27 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .'..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	7d 3c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     }<..............
1a000070:	ad 38 00 1a ed 38 00 1a 2d 39 00 1a 71 39 00 1a     .8...8..-9..q9..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 95 38 00 1a 9f 38 00 1a     .........8...8..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	71 3d 00 1a 7b 3d 00 1a 85 3d 00 1a bb 01 00 1a     q=..{=...=......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005370 	.word	0x1a005370
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000012c 	.word	0x0000012c
1a000120:	1a005370 	.word	0x1a005370
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005370 	.word	0x1a005370
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005370 	.word	0x1a005370
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005370 	.word	0x1a005370
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	1000012c 	.word	0x1000012c
1a000154:	00002b54 	.word	0x00002b54
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 f9e0 	bl	1a003584 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <EspRxCallback>:
}


// Callback para la recepción serie
void EspRxCallback(void *param)
{
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b083      	sub	sp, #12
1a000304:	4604      	mov	r4, r0

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000306:	f3ef 8511 	mrs	r5, BASEPRI
1a00030a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00030e:	f383 8811 	msr	BASEPRI, r3
1a000312:	f3bf 8f6f 	isb	sy
1a000316:	f3bf 8f4f 	dsb	sy
	UARTData_t* UARTData = (UARTData_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	receivedData = uartRxRead(UARTData->uartValue);
1a00031a:	7800      	ldrb	r0, [r0, #0]
1a00031c:	f003 fa68 	bl	1a0037f0 <uartRxRead>
1a000320:	f88d 0003 	strb.w	r0, [sp, #3]

	xQueueSendFromISR( UARTData->onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a000324:	2300      	movs	r3, #0
1a000326:	aa01      	add	r2, sp, #4
1a000328:	f10d 0103 	add.w	r1, sp, #3
1a00032c:	68e0      	ldr	r0, [r4, #12]
1a00032e:	f000 fe79 	bl	1a001024 <xQueueGenericSendFromISR>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000332:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a000336:	9b01      	ldr	r3, [sp, #4]
1a000338:	b13b      	cbz	r3, 1a00034a <EspRxCallback+0x4a>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a00033a:	4b05      	ldr	r3, [pc, #20]	; (1a000350 <EspRxCallback+0x50>)
1a00033c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000340:	601a      	str	r2, [r3, #0]
1a000342:	f3bf 8f4f 	dsb	sy
1a000346:	f3bf 8f6f 	isb	sy
	}

}
1a00034a:	b003      	add	sp, #12
1a00034c:	bd30      	pop	{r4, r5, pc}
1a00034e:	bf00      	nop
1a000350:	e000ed04 	.word	0xe000ed04

1a000354 <EspTxCallback>:



void EspTxCallback(void*param)
{
1a000354:	b510      	push	{r4, lr}
1a000356:	b082      	sub	sp, #8
1a000358:	4604      	mov	r4, r0
	UARTData_t* UARTData = (UARTData_t*) param;

	BaseType_t xTaskWokenByReceive = pdFALSE; //Variable para evaluar el cambio de contexto al finaliza la interrupcion
1a00035a:	aa02      	add	r2, sp, #8
1a00035c:	2300      	movs	r3, #0
1a00035e:	f842 3d04 	str.w	r3, [r2, #-4]!
	UBaseType_t uxSavedInterruptStatus;

	uint8_t dataToSend;

	//Si llegue a la interrupcion es porque alguien la disparo o porque todavia quedan datos en la cola para transmitir
	xQueueReceiveFromISR(UARTData->onTxQueue,(void*)&dataToSend,&xTaskWokenByReceive);
1a000362:	f10d 0103 	add.w	r1, sp, #3
1a000366:	6880      	ldr	r0, [r0, #8]
1a000368:	f000 ff6e 	bl	1a001248 <xQueueReceiveFromISR>

	uartTxWrite(UARTData->uartValue,dataToSend);
1a00036c:	f89d 1003 	ldrb.w	r1, [sp, #3]
1a000370:	7820      	ldrb	r0, [r4, #0]
1a000372:	f003 fa47 	bl	1a003804 <uartTxWrite>

	if(pdTRUE == xQueueIsQueueEmptyFromISR( UARTData->onTxQueue ))	//Si no hay mas datos en cola deshabilito la interrupción
1a000376:	68a0      	ldr	r0, [r4, #8]
1a000378:	f000 ffbb 	bl	1a0012f2 <xQueueIsQueueEmptyFromISR>
1a00037c:	2801      	cmp	r0, #1
1a00037e:	d00b      	beq.n	1a000398 <EspTxCallback+0x44>
		uartCallbackClr(UARTData->uartValue, UART_TRANSMITER_FREE); //Deshabilito la interrupcion de TX
	}


	//Hago la evaluacion de cambio de contexto necesario.
	if (xTaskWokenByReceive != pdFALSE)
1a000380:	9b01      	ldr	r3, [sp, #4]
1a000382:	b13b      	cbz	r3, 1a000394 <EspTxCallback+0x40>
	{
		taskYIELD ();
1a000384:	4b07      	ldr	r3, [pc, #28]	; (1a0003a4 <EspTxCallback+0x50>)
1a000386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00038a:	601a      	str	r2, [r3, #0]
1a00038c:	f3bf 8f4f 	dsb	sy
1a000390:	f3bf 8f6f 	isb	sy
	}
}
1a000394:	b002      	add	sp, #8
1a000396:	bd10      	pop	{r4, pc}
		uartCallbackClr(UARTData->uartValue, UART_TRANSMITER_FREE); //Deshabilito la interrupcion de TX
1a000398:	2101      	movs	r1, #1
1a00039a:	7820      	ldrb	r0, [r4, #0]
1a00039c:	f003 f9fc 	bl	1a003798 <uartCallbackClr>
1a0003a0:	e7ee      	b.n	1a000380 <EspTxCallback+0x2c>
1a0003a2:	bf00      	nop
1a0003a4:	e000ed04 	.word	0xe000ed04

1a0003a8 <UARTEspInit>:
{
1a0003a8:	b510      	push	{r4, lr}
1a0003aa:	4604      	mov	r4, r0
		UARTData->onRxQueue = xQueueCreate(IN_QUEUE_LEN, sizeof(uint8_t));
1a0003ac:	2200      	movs	r2, #0
1a0003ae:	2101      	movs	r1, #1
1a0003b0:	201e      	movs	r0, #30
1a0003b2:	f000 fd52 	bl	1a000e5a <xQueueGenericCreate>
1a0003b6:	60e0      	str	r0, [r4, #12]
		UARTData->onTxQueue = xQueueCreate(OUT_QUEUE_LEN, sizeof(uint8_t));
1a0003b8:	2200      	movs	r2, #0
1a0003ba:	2101      	movs	r1, #1
1a0003bc:	201e      	movs	r0, #30
1a0003be:	f000 fd4c 	bl	1a000e5a <xQueueGenericCreate>
1a0003c2:	60a0      	str	r0, [r4, #8]
		if((UARTData->onRxQueue == NULL)||(UARTData->onTxQueue == NULL))
1a0003c4:	68e3      	ldr	r3, [r4, #12]
1a0003c6:	b1b3      	cbz	r3, 1a0003f6 <UARTEspInit+0x4e>
1a0003c8:	b1b8      	cbz	r0, 1a0003fa <UARTEspInit+0x52>
	uartConfig(UARTData->uartValue, UARTData->baudRate);
1a0003ca:	6861      	ldr	r1, [r4, #4]
1a0003cc:	7820      	ldrb	r0, [r4, #0]
1a0003ce:	f003 fa23 	bl	1a003818 <uartInit>
	uartCallbackSet(UARTData->uartValue, UART_RECEIVE, EspRxCallback,(void*) UARTData);
1a0003d2:	4623      	mov	r3, r4
1a0003d4:	4a0a      	ldr	r2, [pc, #40]	; (1a000400 <UARTEspInit+0x58>)
1a0003d6:	2100      	movs	r1, #0
1a0003d8:	7820      	ldrb	r0, [r4, #0]
1a0003da:	f003 f97f 	bl	1a0036dc <uartCallbackSet>
	uartCallbackSet(UARTData->uartValue, UART_TRANSMITER_FREE,EspTxCallback, (void*) UARTData);
1a0003de:	4623      	mov	r3, r4
1a0003e0:	4a08      	ldr	r2, [pc, #32]	; (1a000404 <UARTEspInit+0x5c>)
1a0003e2:	2101      	movs	r1, #1
1a0003e4:	7820      	ldrb	r0, [r4, #0]
1a0003e6:	f003 f979 	bl	1a0036dc <uartCallbackSet>
	uartInterrupt(UARTData->uartValue, true);
1a0003ea:	2101      	movs	r1, #1
1a0003ec:	7820      	ldrb	r0, [r4, #0]
1a0003ee:	f003 f92d 	bl	1a00364c <uartInterrupt>
	return(true);
1a0003f2:	2001      	movs	r0, #1
}
1a0003f4:	bd10      	pop	{r4, pc}
			return (false);
1a0003f6:	2000      	movs	r0, #0
1a0003f8:	e7fc      	b.n	1a0003f4 <UARTEspInit+0x4c>
1a0003fa:	2000      	movs	r0, #0
1a0003fc:	e7fa      	b.n	1a0003f4 <UARTEspInit+0x4c>
1a0003fe:	bf00      	nop
1a000400:	1a000301 	.word	0x1a000301
1a000404:	1a000355 	.word	0x1a000355

1a000408 <sendEspByte>:


bool_t sendEspByte(UARTData_t* UARTData,uint8_t byteToSend,TickType_t timeout)
{
1a000408:	b510      	push	{r4, lr}
1a00040a:	b082      	sub	sp, #8
1a00040c:	4604      	mov	r4, r0
1a00040e:	a802      	add	r0, sp, #8
1a000410:	f800 1d01 	strb.w	r1, [r0, #-1]!
	uint8_t aux;
	if (pdTRUE==xQueueSend( UARTData->onTxQueue, ( void * ) &byteToSend, timeout )) //Pongo en cola los datos a enviar
1a000414:	2300      	movs	r3, #0
1a000416:	4601      	mov	r1, r0
1a000418:	68a0      	ldr	r0, [r4, #8]
1a00041a:	f000 fd45 	bl	1a000ea8 <xQueueGenericSend>
1a00041e:	2801      	cmp	r0, #1
1a000420:	d002      	beq.n	1a000428 <sendEspByte+0x20>
		uartCallbackSet(UARTData->uartValue, UART_TRANSMITER_FREE,EspTxCallback, (void*) UARTData);
		uartSetPendingInterrupt(UARTData->uartValue);
		return true;
	}
	else
		return false;
1a000422:	2000      	movs	r0, #0

}
1a000424:	b002      	add	sp, #8
1a000426:	bd10      	pop	{r4, pc}
		uartCallbackSet(UARTData->uartValue, UART_TRANSMITER_FREE,EspTxCallback, (void*) UARTData);
1a000428:	4623      	mov	r3, r4
1a00042a:	4a05      	ldr	r2, [pc, #20]	; (1a000440 <sendEspByte+0x38>)
1a00042c:	2101      	movs	r1, #1
1a00042e:	7820      	ldrb	r0, [r4, #0]
1a000430:	f003 f954 	bl	1a0036dc <uartCallbackSet>
		uartSetPendingInterrupt(UARTData->uartValue);
1a000434:	7820      	ldrb	r0, [r4, #0]
1a000436:	f003 f9c3 	bl	1a0037c0 <uartSetPendingInterrupt>
		return true;
1a00043a:	2001      	movs	r0, #1
1a00043c:	e7f2      	b.n	1a000424 <sendEspByte+0x1c>
1a00043e:	bf00      	nop
1a000440:	1a000355 	.word	0x1a000355

1a000444 <receiveEspByte>:


bool_t receiveEspByte(UARTData_t* UARTData,uint8_t *receivedByte,TickType_t timeout)
{
1a000444:	b508      	push	{r3, lr}


	if (pdTRUE==xQueueReceive( UARTData->onRxQueue, ( void * ) receivedByte, timeout )) //Leo de la cola el dato recibido
1a000446:	68c0      	ldr	r0, [r0, #12]
1a000448:	f000 fe52 	bl	1a0010f0 <xQueueReceive>
1a00044c:	2801      	cmp	r0, #1
1a00044e:	d000      	beq.n	1a000452 <receiveEspByte+0xe>
	{
		return true;
	}
	else
		return false;
1a000450:	2000      	movs	r0, #0

}
1a000452:	bd08      	pop	{r3, pc}

1a000454 <onRxCallback>:
}


// Callback para la recepción serie a través de la UART USB.
void onRxCallback(void *param)
{
1a000454:	b530      	push	{r4, r5, lr}
1a000456:	b083      	sub	sp, #12
1a000458:	4604      	mov	r4, r0
	__asm volatile
1a00045a:	f3ef 8511 	mrs	r5, BASEPRI
1a00045e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000462:	f383 8811 	msr	BASEPRI, r3
1a000466:	f3bf 8f6f 	isb	sy
1a00046a:	f3bf 8f4f 	dsb	sy
	portsConfig_t* ports = (portsConfig_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	aux = uartRxRead(ports->uartValue);
1a00046e:	7800      	ldrb	r0, [r0, #0]
1a000470:	f003 f9be 	bl	1a0037f0 <uartRxRead>

	if(aux & 0x80) //Si el primer bit es 1 significa que estoy recibiendo el primer byte
1a000474:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000478:	d109      	bne.n	1a00048e <onRxCallback+0x3a>
		byteNumber=1;
		receivedData.rxData [0]=aux;
		}
	else
	{
		if(byteNumber==1)
1a00047a:	4b16      	ldr	r3, [pc, #88]	; (1a0004d4 <onRxCallback+0x80>)
1a00047c:	781b      	ldrb	r3, [r3, #0]
1a00047e:	2b01      	cmp	r3, #1
1a000480:	d118      	bne.n	1a0004b4 <onRxCallback+0x60>
		{
			byteNumber=2;
1a000482:	4b14      	ldr	r3, [pc, #80]	; (1a0004d4 <onRxCallback+0x80>)
1a000484:	2202      	movs	r2, #2
1a000486:	701a      	strb	r2, [r3, #0]
			receivedData.rxData [1]= aux;
1a000488:	4b13      	ldr	r3, [pc, #76]	; (1a0004d8 <onRxCallback+0x84>)
1a00048a:	7058      	strb	r0, [r3, #1]
1a00048c:	e004      	b.n	1a000498 <onRxCallback+0x44>
		byteNumber=1;
1a00048e:	4b11      	ldr	r3, [pc, #68]	; (1a0004d4 <onRxCallback+0x80>)
1a000490:	2201      	movs	r2, #1
1a000492:	701a      	strb	r2, [r3, #0]
		receivedData.rxData [0]=aux;
1a000494:	4b10      	ldr	r3, [pc, #64]	; (1a0004d8 <onRxCallback+0x84>)
1a000496:	7018      	strb	r0, [r3, #0]
	__asm volatile
1a000498:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a00049c:	9b01      	ldr	r3, [sp, #4]
1a00049e:	b13b      	cbz	r3, 1a0004b0 <onRxCallback+0x5c>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a0004a0:	4b0e      	ldr	r3, [pc, #56]	; (1a0004dc <onRxCallback+0x88>)
1a0004a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0004a6:	601a      	str	r2, [r3, #0]
1a0004a8:	f3bf 8f4f 	dsb	sy
1a0004ac:	f3bf 8f6f 	isb	sy
	}

}
1a0004b0:	b003      	add	sp, #12
1a0004b2:	bd30      	pop	{r4, r5, pc}
			receivedData.rxData [2] = aux;
1a0004b4:	4908      	ldr	r1, [pc, #32]	; (1a0004d8 <onRxCallback+0x84>)
1a0004b6:	7088      	strb	r0, [r1, #2]
			aux=(receivedData.rxData[0]>>4)&0x07; //Obtengo el address del puerto que envio el dato
1a0004b8:	780b      	ldrb	r3, [r1, #0]
1a0004ba:	f3c3 1302 	ubfx	r3, r3, #4, #3
			xQueueSendFromISR( ports->port[aux].onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a0004be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0004c2:	009a      	lsls	r2, r3, #2
1a0004c4:	4414      	add	r4, r2
1a0004c6:	2300      	movs	r3, #0
1a0004c8:	aa01      	add	r2, sp, #4
1a0004ca:	6960      	ldr	r0, [r4, #20]
1a0004cc:	f000 fdaa 	bl	1a001024 <xQueueGenericSendFromISR>
1a0004d0:	e7e2      	b.n	1a000498 <onRxCallback+0x44>
1a0004d2:	bf00      	nop
1a0004d4:	1000012d 	.word	0x1000012d
1a0004d8:	10000144 	.word	0x10000144
1a0004dc:	e000ed04 	.word	0xe000ed04

1a0004e0 <onTxTimeOutCallback>:

//Callback del timer de transmision
void onTxTimeOutCallback(TimerHandle_t xTimer)
{
1a0004e0:	b510      	push	{r4, lr}
	// Obtenemos los datos de la UART seleccionada, aprovechando el campo reservado
	// para el Timer ID.
	portsConfig_t *ports= (portsConfig_t *) pvTimerGetTimerID(xTimer);
1a0004e2:	f001 ffa2 	bl	1a00242a <pvTimerGetTimerID>
1a0004e6:	4604      	mov	r4, r0
	gpioToggle( GPIO0 );
1a0004e8:	2020      	movs	r0, #32
1a0004ea:	f003 fbbc 	bl	1a003c66 <gpioToggle>

	//Configuro el callback de la transmision de UART
	uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a0004ee:	4623      	mov	r3, r4
1a0004f0:	4a04      	ldr	r2, [pc, #16]	; (1a000504 <onTxTimeOutCallback+0x24>)
1a0004f2:	2101      	movs	r1, #1
1a0004f4:	7820      	ldrb	r0, [r4, #0]
1a0004f6:	f003 f8f1 	bl	1a0036dc <uartCallbackSet>
	uartSetPendingInterrupt(ports->uartValue);
1a0004fa:	7820      	ldrb	r0, [r4, #0]
1a0004fc:	f003 f960 	bl	1a0037c0 <uartSetPendingInterrupt>
}
1a000500:	bd10      	pop	{r4, pc}
1a000502:	bf00      	nop
1a000504:	1a000509 	.word	0x1a000509

1a000508 <onTxCallback>:
}



void onTxCallback(void*param)
{
1a000508:	b530      	push	{r4, r5, lr}
1a00050a:	b083      	sub	sp, #12
1a00050c:	4605      	mov	r5, r0
	portsConfig_t *ports = (portsConfig_t *) param;
	BaseType_t xTaskWokenByReceive = pdFALSE; //Variable para evaluar el cambio de contexto al finaliza la interrupcion
1a00050e:	2300      	movs	r3, #0
1a000510:	9301      	str	r3, [sp, #4]
	uint8_t emptyData = 0xff; //Byte que se envia dos veces para darle tiempo al esclavo para responder
	static uint8_t transmitEmpty = 0;



	if (portIndex==0 && byteIndex==0)
1a000512:	4b38      	ldr	r3, [pc, #224]	; (1a0005f4 <onTxCallback+0xec>)
1a000514:	781b      	ldrb	r3, [r3, #0]
1a000516:	b91b      	cbnz	r3, 1a000520 <onTxCallback+0x18>
1a000518:	4b37      	ldr	r3, [pc, #220]	; (1a0005f8 <onTxCallback+0xf0>)
1a00051a:	781c      	ldrb	r4, [r3, #0]
1a00051c:	2c00      	cmp	r4, #0
1a00051e:	d035      	beq.n	1a00058c <onTxCallback+0x84>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);

	}

	//Si llegué a la interrupcion es porque hay que enviar datos
	if(transmitEmpty==0)
1a000520:	4b36      	ldr	r3, [pc, #216]	; (1a0005fc <onTxCallback+0xf4>)
1a000522:	781b      	ldrb	r3, [r3, #0]
1a000524:	2b00      	cmp	r3, #0
1a000526:	d14a      	bne.n	1a0005be <onTxCallback+0xb6>
	{
		uartTxWrite(ports->uartValue,dataToSend[portIndex].txData[byteIndex]);
1a000528:	4b32      	ldr	r3, [pc, #200]	; (1a0005f4 <onTxCallback+0xec>)
1a00052a:	781b      	ldrb	r3, [r3, #0]
1a00052c:	4c32      	ldr	r4, [pc, #200]	; (1a0005f8 <onTxCallback+0xf0>)
1a00052e:	7821      	ldrb	r1, [r4, #0]
1a000530:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000534:	4a32      	ldr	r2, [pc, #200]	; (1a000600 <onTxCallback+0xf8>)
1a000536:	4413      	add	r3, r2
1a000538:	5c59      	ldrb	r1, [r3, r1]
1a00053a:	7828      	ldrb	r0, [r5, #0]
1a00053c:	f003 f962 	bl	1a003804 <uartTxWrite>
		//Luego verifico si termine de enviar el frame completo y deshabilito la interrupcion
		if (byteIndex<2)
1a000540:	7823      	ldrb	r3, [r4, #0]
1a000542:	2b01      	cmp	r3, #1
1a000544:	d925      	bls.n	1a000592 <onTxCallback+0x8a>
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
		}
		else
		{
			transmitEmpty=1;//
1a000546:	4b2d      	ldr	r3, [pc, #180]	; (1a0005fc <onTxCallback+0xf4>)
1a000548:	2201      	movs	r2, #1
1a00054a:	701a      	strb	r2, [r3, #0]
			if (portIndex<(PORTS_NUMBER-1))
1a00054c:	4b29      	ldr	r3, [pc, #164]	; (1a0005f4 <onTxCallback+0xec>)
1a00054e:	781b      	ldrb	r3, [r3, #0]
1a000550:	2b04      	cmp	r3, #4
1a000552:	d82a      	bhi.n	1a0005aa <onTxCallback+0xa2>
			{
				portIndex++;
1a000554:	4413      	add	r3, r2
1a000556:	4a27      	ldr	r2, [pc, #156]	; (1a0005f4 <onTxCallback+0xec>)
1a000558:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a00055a:	4b27      	ldr	r3, [pc, #156]	; (1a0005f8 <onTxCallback+0xf0>)
1a00055c:	2200      	movs	r2, #0
1a00055e:	701a      	strb	r2, [r3, #0]
				uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a000560:	462b      	mov	r3, r5
1a000562:	4a28      	ldr	r2, [pc, #160]	; (1a000604 <onTxCallback+0xfc>)
1a000564:	2101      	movs	r1, #1
1a000566:	7828      	ldrb	r0, [r5, #0]
1a000568:	f003 f8b8 	bl	1a0036dc <uartCallbackSet>
				uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
1a00056c:	7828      	ldrb	r0, [r5, #0]
1a00056e:	f003 f927 	bl	1a0037c0 <uartSetPendingInterrupt>
1a000572:	e02f      	b.n	1a0005d4 <onTxCallback+0xcc>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);
1a000574:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000578:	eb05 0083 	add.w	r0, r5, r3, lsl #2
1a00057c:	aa01      	add	r2, sp, #4
1a00057e:	4920      	ldr	r1, [pc, #128]	; (1a000600 <onTxCallback+0xf8>)
1a000580:	4419      	add	r1, r3
1a000582:	6900      	ldr	r0, [r0, #16]
1a000584:	f000 fe60 	bl	1a001248 <xQueueReceiveFromISR>
		for (i=0;i<PORTS_NUMBER;i++)
1a000588:	3401      	adds	r4, #1
1a00058a:	b2e4      	uxtb	r4, r4
1a00058c:	2c05      	cmp	r4, #5
1a00058e:	d9f1      	bls.n	1a000574 <onTxCallback+0x6c>
1a000590:	e7c6      	b.n	1a000520 <onTxCallback+0x18>
			byteIndex++;
1a000592:	3301      	adds	r3, #1
1a000594:	7023      	strb	r3, [r4, #0]
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a000596:	462b      	mov	r3, r5
1a000598:	4a1a      	ldr	r2, [pc, #104]	; (1a000604 <onTxCallback+0xfc>)
1a00059a:	2101      	movs	r1, #1
1a00059c:	7828      	ldrb	r0, [r5, #0]
1a00059e:	f003 f89d 	bl	1a0036dc <uartCallbackSet>
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
1a0005a2:	7828      	ldrb	r0, [r5, #0]
1a0005a4:	f003 f90c 	bl	1a0037c0 <uartSetPendingInterrupt>
1a0005a8:	e014      	b.n	1a0005d4 <onTxCallback+0xcc>
			}
			else
			{
				portIndex=0;
1a0005aa:	2300      	movs	r3, #0
1a0005ac:	4a11      	ldr	r2, [pc, #68]	; (1a0005f4 <onTxCallback+0xec>)
1a0005ae:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a0005b0:	4a11      	ldr	r2, [pc, #68]	; (1a0005f8 <onTxCallback+0xf0>)
1a0005b2:	7013      	strb	r3, [r2, #0]
				uartCallbackClr(ports->uartValue, UART_TRANSMITER_FREE); //Deshabilito la interrupcion de TX
1a0005b4:	2101      	movs	r1, #1
1a0005b6:	7828      	ldrb	r0, [r5, #0]
1a0005b8:	f003 f8ee 	bl	1a003798 <uartCallbackClr>
1a0005bc:	e00a      	b.n	1a0005d4 <onTxCallback+0xcc>
			}
		}
	}
	else
	{
		uartTxWrite(ports->uartValue,emptyData);
1a0005be:	21ff      	movs	r1, #255	; 0xff
1a0005c0:	7828      	ldrb	r0, [r5, #0]
1a0005c2:	f003 f91f 	bl	1a003804 <uartTxWrite>
		if (transmitEmpty==2)
1a0005c6:	4b0d      	ldr	r3, [pc, #52]	; (1a0005fc <onTxCallback+0xf4>)
1a0005c8:	781b      	ldrb	r3, [r3, #0]
1a0005ca:	2b02      	cmp	r3, #2
1a0005cc:	d00e      	beq.n	1a0005ec <onTxCallback+0xe4>
			transmitEmpty=0;
		else
			transmitEmpty++;
1a0005ce:	3301      	adds	r3, #1
1a0005d0:	4a0a      	ldr	r2, [pc, #40]	; (1a0005fc <onTxCallback+0xf4>)
1a0005d2:	7013      	strb	r3, [r2, #0]

	}


	//Hago la evaluacion de cambio de cambio de contexto necesario.
	if (xTaskWokenByReceive != pdFALSE)
1a0005d4:	9b01      	ldr	r3, [sp, #4]
1a0005d6:	b13b      	cbz	r3, 1a0005e8 <onTxCallback+0xe0>
	{
		taskYIELD ();
1a0005d8:	4b0b      	ldr	r3, [pc, #44]	; (1a000608 <onTxCallback+0x100>)
1a0005da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0005de:	601a      	str	r2, [r3, #0]
1a0005e0:	f3bf 8f4f 	dsb	sy
1a0005e4:	f3bf 8f6f 	isb	sy
	}
}
1a0005e8:	b003      	add	sp, #12
1a0005ea:	bd30      	pop	{r4, r5, pc}
			transmitEmpty=0;
1a0005ec:	4b03      	ldr	r3, [pc, #12]	; (1a0005fc <onTxCallback+0xf4>)
1a0005ee:	2200      	movs	r2, #0
1a0005f0:	701a      	strb	r2, [r3, #0]
1a0005f2:	e7ef      	b.n	1a0005d4 <onTxCallback+0xcc>
1a0005f4:	10000142 	.word	0x10000142
1a0005f8:	1000012c 	.word	0x1000012c
1a0005fc:	10000148 	.word	0x10000148
1a000600:	10000130 	.word	0x10000130
1a000604:	1a000509 	.word	0x1a000509
1a000608:	e000ed04 	.word	0xe000ed04

1a00060c <portsDataInit>:
{
1a00060c:	b530      	push	{r4, r5, lr}
1a00060e:	b083      	sub	sp, #12
1a000610:	4605      	mov	r5, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a000612:	2400      	movs	r4, #0
1a000614:	e015      	b.n	1a000642 <portsDataInit+0x36>
		portData.txData[0]=(i<<4)|0x80; //Armo el primer byte con el primer bit en uno y el address
1a000616:	0123      	lsls	r3, r4, #4
1a000618:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00061c:	f88d 3004 	strb.w	r3, [sp, #4]
		portData.txData[1]=0x00;
1a000620:	2300      	movs	r3, #0
1a000622:	f88d 3005 	strb.w	r3, [sp, #5]
		portData.txData[2]=0x00;
1a000626:	f88d 3006 	strb.w	r3, [sp, #6]
		xQueueSend( port[i].onTxQueue, ( void * ) &portData, ( TickType_t ) portMAX_DELAY ); //Pongo en cola el primer dato a enviar
1a00062a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a00062e:	008a      	lsls	r2, r1, #2
1a000630:	18a8      	adds	r0, r5, r2
1a000632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000636:	a901      	add	r1, sp, #4
1a000638:	6840      	ldr	r0, [r0, #4]
1a00063a:	f000 fc35 	bl	1a000ea8 <xQueueGenericSend>
	for (i=0; i< PORTS_NUMBER; i++)
1a00063e:	3401      	adds	r4, #1
1a000640:	b2e4      	uxtb	r4, r4
1a000642:	2c05      	cmp	r4, #5
1a000644:	d9e7      	bls.n	1a000616 <portsDataInit+0xa>
}
1a000646:	b003      	add	sp, #12
1a000648:	bd30      	pop	{r4, r5, pc}
1a00064a:	Address 0x000000001a00064a is out of bounds.


1a00064c <portsdriverInit>:
{
1a00064c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00064e:	b083      	sub	sp, #12
1a000650:	4607      	mov	r7, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a000652:	2400      	movs	r4, #0
1a000654:	2c05      	cmp	r4, #5
1a000656:	d816      	bhi.n	1a000686 <portsdriverInit+0x3a>
		ports->port[i].portAddr = i;
1a000658:	0066      	lsls	r6, r4, #1
1a00065a:	1933      	adds	r3, r6, r4
1a00065c:	009d      	lsls	r5, r3, #2
1a00065e:	443d      	add	r5, r7
1a000660:	732c      	strb	r4, [r5, #12]
		ports->port[i].onRxQueue  = xQueueCreate(IN_QUEUE_LEN, sizeof(rxData_t));
1a000662:	2200      	movs	r2, #0
1a000664:	2104      	movs	r1, #4
1a000666:	201e      	movs	r0, #30
1a000668:	f000 fbf7 	bl	1a000e5a <xQueueGenericCreate>
1a00066c:	6168      	str	r0, [r5, #20]
		ports->port[i].onTxQueue = xQueueCreate(OUT_QUEUE_LEN, sizeof(txData_t));
1a00066e:	2200      	movs	r2, #0
1a000670:	2103      	movs	r1, #3
1a000672:	201e      	movs	r0, #30
1a000674:	f000 fbf1 	bl	1a000e5a <xQueueGenericCreate>
1a000678:	6128      	str	r0, [r5, #16]
		if((ports->port[i].onRxQueue == NULL)||(ports->port[i].onTxQueue == NULL))
1a00067a:	696b      	ldr	r3, [r5, #20]
1a00067c:	b363      	cbz	r3, 1a0006d8 <portsdriverInit+0x8c>
1a00067e:	b368      	cbz	r0, 1a0006dc <portsdriverInit+0x90>
	for (i=0; i< PORTS_NUMBER; i++)
1a000680:	3401      	adds	r4, #1
1a000682:	b2e4      	uxtb	r4, r4
1a000684:	e7e6      	b.n	1a000654 <portsdriverInit+0x8>
	ports->onTxTimeOut = xTimerCreate("Transmit", pdMS_TO_TICKS(1),pdTRUE, (void*) ports, onTxTimeOutCallback);
1a000686:	4b17      	ldr	r3, [pc, #92]	; (1a0006e4 <portsdriverInit+0x98>)
1a000688:	9300      	str	r3, [sp, #0]
1a00068a:	463b      	mov	r3, r7
1a00068c:	2201      	movs	r2, #1
1a00068e:	4611      	mov	r1, r2
1a000690:	4815      	ldr	r0, [pc, #84]	; (1a0006e8 <portsdriverInit+0x9c>)
1a000692:	f001 fd33 	bl	1a0020fc <xTimerCreate>
1a000696:	60b8      	str	r0, [r7, #8]
	if (ports->onTxTimeOut==NULL)
1a000698:	b310      	cbz	r0, 1a0006e0 <portsdriverInit+0x94>
	uartConfig(ports->uartValue, ports->baudRate);
1a00069a:	6879      	ldr	r1, [r7, #4]
1a00069c:	7838      	ldrb	r0, [r7, #0]
1a00069e:	f003 f8bb 	bl	1a003818 <uartInit>
	uartCallbackSet(ports->uartValue, UART_RECEIVE, onRxCallback,(void*) ports);
1a0006a2:	463b      	mov	r3, r7
1a0006a4:	4a11      	ldr	r2, [pc, #68]	; (1a0006ec <portsdriverInit+0xa0>)
1a0006a6:	2100      	movs	r1, #0
1a0006a8:	7838      	ldrb	r0, [r7, #0]
1a0006aa:	f003 f817 	bl	1a0036dc <uartCallbackSet>
	portsDataInit (ports->port);
1a0006ae:	f107 000c 	add.w	r0, r7, #12
1a0006b2:	f7ff ffab 	bl	1a00060c <portsDataInit>
	uartInterrupt(ports->uartValue, true);
1a0006b6:	2101      	movs	r1, #1
1a0006b8:	7838      	ldrb	r0, [r7, #0]
1a0006ba:	f002 ffc7 	bl	1a00364c <uartInterrupt>
	xTimerStart( ports->onTxTimeOut, 0 );
1a0006be:	68bc      	ldr	r4, [r7, #8]
1a0006c0:	f001 f942 	bl	1a001948 <xTaskGetTickCount>
1a0006c4:	2300      	movs	r3, #0
1a0006c6:	9300      	str	r3, [sp, #0]
1a0006c8:	4602      	mov	r2, r0
1a0006ca:	2101      	movs	r1, #1
1a0006cc:	4620      	mov	r0, r4
1a0006ce:	f001 fd31 	bl	1a002134 <xTimerGenericCommand>
	return(true);
1a0006d2:	2001      	movs	r0, #1
}
1a0006d4:	b003      	add	sp, #12
1a0006d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (false);
1a0006d8:	2000      	movs	r0, #0
1a0006da:	e7fb      	b.n	1a0006d4 <portsdriverInit+0x88>
1a0006dc:	2000      	movs	r0, #0
1a0006de:	e7f9      	b.n	1a0006d4 <portsdriverInit+0x88>
		return (false);
1a0006e0:	2000      	movs	r0, #0
1a0006e2:	e7f7      	b.n	1a0006d4 <portsdriverInit+0x88>
1a0006e4:	1a0004e1 	.word	0x1a0004e1
1a0006e8:	1a004f40 	.word	0x1a004f40
1a0006ec:	1a000455 	.word	0x1a000455

1a0006f0 <sendDataPort>:


bool_t sendDataPort(portsData_t * port,uint16_t DAC, uint8_t digitalOuts,TickType_t timeout)
{
1a0006f0:	b530      	push	{r4, r5, lr}
1a0006f2:	b083      	sub	sp, #12
1a0006f4:	461c      	mov	r4, r3
	txData_t portData;
	uint8_t aux;
	if(DAC>1023)
1a0006f6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1a0006fa:	d301      	bcc.n	1a000700 <sendDataPort+0x10>
		DAC=1023;
1a0006fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
	aux= (uint8_t)(DAC>>7);
1a000700:	f3c1 13c7 	ubfx	r3, r1, #7, #8
	portData.txData[0]=(port->portAddr<<4)|0x80|aux; //Armo el primer byte con el primer bit en uno, el address y la parte alta del dac
1a000704:	7805      	ldrb	r5, [r0, #0]
1a000706:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
1a00070a:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00070e:	f88d 3004 	strb.w	r3, [sp, #4]
	portData.txData[1]=(uint8_t)(DAC & 0x007F); //Armo el segundo byte (parte baja del DAC)
1a000712:	f001 017f 	and.w	r1, r1, #127	; 0x7f
1a000716:	f88d 1005 	strb.w	r1, [sp, #5]
	portData.txData[2]=digitalOuts & 0x0F;
1a00071a:	f002 030f 	and.w	r3, r2, #15
1a00071e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (pdTRUE==xQueueSend( port->onTxQueue, ( void * ) &portData, timeout )) //Pongo en cola los datos a enviar
1a000722:	2300      	movs	r3, #0
1a000724:	4622      	mov	r2, r4
1a000726:	a901      	add	r1, sp, #4
1a000728:	6840      	ldr	r0, [r0, #4]
1a00072a:	f000 fbbd 	bl	1a000ea8 <xQueueGenericSend>
1a00072e:	2801      	cmp	r0, #1
1a000730:	d000      	beq.n	1a000734 <sendDataPort+0x44>
		return true;
	else
		return false;
1a000732:	2000      	movs	r0, #0

}
1a000734:	b003      	add	sp, #12
1a000736:	bd30      	pop	{r4, r5, pc}

1a000738 <myTask>:

/*=====[Implementations of public functions]=================================*/

// Task implementation
void myTask( void* taskParmPtr )
{
1a000738:	b570      	push	{r4, r5, r6, lr}
1a00073a:	b082      	sub	sp, #8
1a00073c:	4606      	mov	r6, r0
	txData_t portData;
	uint16_t DAC=0;
	uint8_t digitalOuts=0;
	// ----- Task setup -----------------------------------

   gpioWrite( LED, ON );
1a00073e:	2101      	movs	r1, #1
1a000740:	202a      	movs	r0, #42	; 0x2a
1a000742:	f003 fa27 	bl	1a003b94 <gpioWrite>

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a000746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00074a:	f001 fa5b 	bl	1a001c04 <vTaskDelay>

   gpioWrite( LED, OFF ); 
1a00074e:	2100      	movs	r1, #0
1a000750:	202a      	movs	r0, #42	; 0x2a
1a000752:	f003 fa1f 	bl	1a003b94 <gpioWrite>

   // Periodic task every 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000756:	f001 f8f7 	bl	1a001948 <xTaskGetTickCount>
1a00075a:	9001      	str	r0, [sp, #4]
	uint8_t digitalOuts=0;
1a00075c:	2500      	movs	r5, #0
	uint16_t DAC=0;
1a00075e:	462c      	mov	r4, r5
1a000760:	e005      	b.n	1a00076e <myTask+0x36>
      sendDataPort(port, DAC, digitalOuts,(TickType_t) portMAX_DELAY);
      DAC++;
      if (digitalOuts==0)
    	  digitalOuts=0x0F;
      else
    	  digitalOuts=0x00;
1a000762:	2500      	movs	r5, #0
      // Send the task to the locked state during xPeriodicity
      // (periodical delay)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000764:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a000768:	a801      	add	r0, sp, #4
1a00076a:	f001 f9f9 	bl	1a001b60 <vTaskDelayUntil>
      gpioToggle( LED );
1a00076e:	202a      	movs	r0, #42	; 0x2a
1a000770:	f003 fa79 	bl	1a003c66 <gpioToggle>
      sendDataPort(port, DAC, digitalOuts,(TickType_t) portMAX_DELAY);
1a000774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000778:	462a      	mov	r2, r5
1a00077a:	4621      	mov	r1, r4
1a00077c:	4630      	mov	r0, r6
1a00077e:	f7ff ffb7 	bl	1a0006f0 <sendDataPort>
      DAC++;
1a000782:	3401      	adds	r4, #1
1a000784:	b2a4      	uxth	r4, r4
      if (digitalOuts==0)
1a000786:	2d00      	cmp	r5, #0
1a000788:	d1eb      	bne.n	1a000762 <myTask+0x2a>
    	  digitalOuts=0x0F;
1a00078a:	250f      	movs	r5, #15
1a00078c:	e7ea      	b.n	1a000764 <myTask+0x2c>

1a00078e <myTask2>:
   }
}


void myTask2( void* taskParmPtr )
{
1a00078e:	b530      	push	{r4, r5, lr}
1a000790:	b083      	sub	sp, #12
1a000792:	4605      	mov	r5, r0
	UARTData_t *UARTData = (UARTData_t *) taskParmPtr;
	uint8_t data='A';
1a000794:	2341      	movs	r3, #65	; 0x41
1a000796:	f88d 3007 	strb.w	r3, [sp, #7]

   gpioWrite( LED, ON );
1a00079a:	2101      	movs	r1, #1
1a00079c:	202a      	movs	r0, #42	; 0x2a
1a00079e:	f003 f9f9 	bl	1a003b94 <gpioWrite>

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a0007a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0007a6:	f001 fa2d 	bl	1a001c04 <vTaskDelay>

    // ----- Task repeat for ever -------------------------
   while(TRUE) {

		sendEspByte(UARTData,data,(TickType_t) portMAX_DELAY);
1a0007aa:	ac02      	add	r4, sp, #8
1a0007ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0007b0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a0007b4:	4628      	mov	r0, r5
1a0007b6:	f7ff fe27 	bl	1a000408 <sendEspByte>
		receiveEspByte(UARTData,&data,(TickType_t) portMAX_DELAY);
1a0007ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0007be:	4621      	mov	r1, r4
1a0007c0:	4628      	mov	r0, r5
1a0007c2:	f7ff fe3f 	bl	1a000444 <receiveEspByte>
1a0007c6:	e7f0      	b.n	1a0007aa <myTask2+0x1c>

1a0007c8 <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a0007c8:	b580      	push	{r7, lr}
1a0007ca:	b082      	sub	sp, #8

	static portsConfig_t ports;
	static UARTData_t UARTData;

	ports.uartValue = UART_GPIO;
1a0007cc:	4d18      	ldr	r5, [pc, #96]	; (1a000830 <main+0x68>)
1a0007ce:	2600      	movs	r6, #0
1a0007d0:	702e      	strb	r6, [r5, #0]
	ports.baudRate = 460800;
1a0007d2:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
1a0007d6:	606b      	str	r3, [r5, #4]



	UARTData.uartValue = UART_USB;
1a0007d8:	4c16      	ldr	r4, [pc, #88]	; (1a000834 <main+0x6c>)
1a0007da:	2303      	movs	r3, #3
1a0007dc:	7023      	strb	r3, [r4, #0]
	UARTData.baudRate = 115200;
1a0007de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
1a0007e2:	6063      	str	r3, [r4, #4]



   boardInit();
1a0007e4:	f003 fa58 	bl	1a003c98 <boardInit>

   gpioInit( GPIO0, GPIO_OUTPUT );
1a0007e8:	2101      	movs	r1, #1
1a0007ea:	2020      	movs	r0, #32
1a0007ec:	f003 f8fc 	bl	1a0039e8 <gpioInit>

   portsdriverInit(&ports);
1a0007f0:	4628      	mov	r0, r5
1a0007f2:	f7ff ff2b 	bl	1a00064c <portsdriverInit>
   UARTEspInit(&UARTData);
1a0007f6:	4620      	mov	r0, r4
1a0007f8:	f7ff fdd6 	bl	1a0003a8 <UARTEspInit>

   // Create a task in freeRTOS with dynamic memory
   xTaskCreate(
1a0007fc:	4f0e      	ldr	r7, [pc, #56]	; (1a000838 <main+0x70>)
1a0007fe:	9601      	str	r6, [sp, #4]
1a000800:	f04f 0801 	mov.w	r8, #1
1a000804:	f8cd 8000 	str.w	r8, [sp]
1a000808:	f105 030c 	add.w	r3, r5, #12
1a00080c:	22b4      	movs	r2, #180	; 0xb4
1a00080e:	4639      	mov	r1, r7
1a000810:	480a      	ldr	r0, [pc, #40]	; (1a00083c <main+0x74>)
1a000812:	f001 f814 	bl	1a00183e <xTaskCreate>
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );

   // Create a task in freeRTOS with dynamic memory
   xTaskCreate(
1a000816:	9601      	str	r6, [sp, #4]
1a000818:	f8cd 8000 	str.w	r8, [sp]
1a00081c:	4623      	mov	r3, r4
1a00081e:	22b4      	movs	r2, #180	; 0xb4
1a000820:	4639      	mov	r1, r7
1a000822:	4807      	ldr	r0, [pc, #28]	; (1a000840 <main+0x78>)
1a000824:	f001 f80b 	bl	1a00183e <xTaskCreate>
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );


   vTaskStartScheduler(); // Initialize scheduler
1a000828:	f001 f83c 	bl	1a0018a4 <vTaskStartScheduler>
1a00082c:	e7fe      	b.n	1a00082c <main+0x64>
1a00082e:	bf00      	nop
1a000830:	1000015c 	.word	0x1000015c
1a000834:	1000014c 	.word	0x1000014c
1a000838:	1a004f4c 	.word	0x1a004f4c
1a00083c:	1a000739 	.word	0x1a000739
1a000840:	1a00078f 	.word	0x1a00078f

1a000844 <initialise_monitor_handles>:
}
1a000844:	4770      	bx	lr
1a000846:	Address 0x000000001a000846 is out of bounds.


1a000848 <Reset_Handler>:
void Reset_Handler(void) {
1a000848:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00084a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00084c:	4b19      	ldr	r3, [pc, #100]	; (1a0008b4 <Reset_Handler+0x6c>)
1a00084e:	4a1a      	ldr	r2, [pc, #104]	; (1a0008b8 <Reset_Handler+0x70>)
1a000850:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000852:	3304      	adds	r3, #4
1a000854:	4a19      	ldr	r2, [pc, #100]	; (1a0008bc <Reset_Handler+0x74>)
1a000856:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000858:	2300      	movs	r3, #0
1a00085a:	e005      	b.n	1a000868 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00085c:	4a18      	ldr	r2, [pc, #96]	; (1a0008c0 <Reset_Handler+0x78>)
1a00085e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000866:	3301      	adds	r3, #1
1a000868:	2b07      	cmp	r3, #7
1a00086a:	d9f7      	bls.n	1a00085c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00086c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00086e:	4b15      	ldr	r3, [pc, #84]	; (1a0008c4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000870:	e007      	b.n	1a000882 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000872:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000876:	689a      	ldr	r2, [r3, #8]
1a000878:	6859      	ldr	r1, [r3, #4]
1a00087a:	6818      	ldr	r0, [r3, #0]
1a00087c:	f7ff fc85 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000880:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000882:	4a11      	ldr	r2, [pc, #68]	; (1a0008c8 <Reset_Handler+0x80>)
1a000884:	4293      	cmp	r3, r2
1a000886:	d3f4      	bcc.n	1a000872 <Reset_Handler+0x2a>
1a000888:	e006      	b.n	1a000898 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00088a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00088c:	6859      	ldr	r1, [r3, #4]
1a00088e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000892:	f7ff fc89 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000896:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000898:	4a0c      	ldr	r2, [pc, #48]	; (1a0008cc <Reset_Handler+0x84>)
1a00089a:	4293      	cmp	r3, r2
1a00089c:	d3f5      	bcc.n	1a00088a <Reset_Handler+0x42>
    SystemInit();
1a00089e:	f002 fe47 	bl	1a003530 <SystemInit>
    __libc_init_array();
1a0008a2:	f003 fd6f 	bl	1a004384 <__libc_init_array>
    initialise_monitor_handles();
1a0008a6:	f7ff ffcd 	bl	1a000844 <initialise_monitor_handles>
    main();
1a0008aa:	f7ff ff8d 	bl	1a0007c8 <main>
        __asm__ volatile("wfi");
1a0008ae:	bf30      	wfi
1a0008b0:	e7fd      	b.n	1a0008ae <Reset_Handler+0x66>
1a0008b2:	bf00      	nop
1a0008b4:	40053100 	.word	0x40053100
1a0008b8:	10df1000 	.word	0x10df1000
1a0008bc:	01dff7ff 	.word	0x01dff7ff
1a0008c0:	e000e280 	.word	0xe000e280
1a0008c4:	1a000114 	.word	0x1a000114
1a0008c8:	1a000150 	.word	0x1a000150
1a0008cc:	1a000178 	.word	0x1a000178

1a0008d0 <_fini>:
void _fini(void) {}
1a0008d0:	4770      	bx	lr

1a0008d2 <_init>:
void _init(void) {}
1a0008d2:	4770      	bx	lr

1a0008d4 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0008d4:	2309      	movs	r3, #9
1a0008d6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0008d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0008dc:	4770      	bx	lr

1a0008de <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0008de:	2358      	movs	r3, #88	; 0x58
1a0008e0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0008e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0008e6:	4770      	bx	lr

1a0008e8 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0008e8:	2902      	cmp	r1, #2
1a0008ea:	d801      	bhi.n	1a0008f0 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0008ec:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0008ee:	4770      	bx	lr
       SET_ERR(EBADF);
1a0008f0:	2309      	movs	r3, #9
1a0008f2:	6003      	str	r3, [r0, #0]
       return -1;
1a0008f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0008f8:	4770      	bx	lr

1a0008fa <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0008fa:	2358      	movs	r3, #88	; 0x58
1a0008fc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0008fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000902:	4770      	bx	lr

1a000904 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000904:	2902      	cmp	r1, #2
1a000906:	d81f      	bhi.n	1a000948 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00090c:	461d      	mov	r5, r3
1a00090e:	4617      	mov	r7, r2
1a000910:	4606      	mov	r6, r0
  size_t i = 0;
1a000912:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000914:	42ac      	cmp	r4, r5
1a000916:	d211      	bcs.n	1a00093c <_read_r+0x38>
         int c = __stdio_getchar();
1a000918:	f002 f85b 	bl	1a0029d2 <__stdio_getchar>
         if( c != -1 ){
1a00091c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000920:	d0f8      	beq.n	1a000914 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000922:	f104 0801 	add.w	r8, r4, #1
1a000926:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000928:	280d      	cmp	r0, #13
1a00092a:	d003      	beq.n	1a000934 <_read_r+0x30>
1a00092c:	280a      	cmp	r0, #10
1a00092e:	d001      	beq.n	1a000934 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000930:	4644      	mov	r4, r8
1a000932:	e7ef      	b.n	1a000914 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000934:	f002 f84d 	bl	1a0029d2 <__stdio_getchar>
               return i;
1a000938:	4640      	mov	r0, r8
1a00093a:	e003      	b.n	1a000944 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00093c:	2313      	movs	r3, #19
1a00093e:	6033      	str	r3, [r6, #0]
      return -1;
1a000940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000948:	2313      	movs	r3, #19
1a00094a:	6003      	str	r3, [r0, #0]
      return -1;
1a00094c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000950:	4770      	bx	lr

1a000952 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000952:	2902      	cmp	r1, #2
1a000954:	d80c      	bhi.n	1a000970 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000956:	b570      	push	{r4, r5, r6, lr}
1a000958:	461d      	mov	r5, r3
1a00095a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00095c:	2400      	movs	r4, #0
1a00095e:	e003      	b.n	1a000968 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000960:	5d30      	ldrb	r0, [r6, r4]
1a000962:	f002 f831 	bl	1a0029c8 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000966:	3401      	adds	r4, #1
1a000968:	42ac      	cmp	r4, r5
1a00096a:	d3f9      	bcc.n	1a000960 <_write_r+0xe>
       return n;
1a00096c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00096e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000970:	2313      	movs	r3, #19
1a000972:	6003      	str	r3, [r0, #0]
       return -1;
1a000974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000978:	4770      	bx	lr
1a00097a:	Address 0x000000001a00097a is out of bounds.


1a00097c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00097c:	4b05      	ldr	r3, [pc, #20]	; (1a000994 <_sbrk_r+0x18>)
1a00097e:	681b      	ldr	r3, [r3, #0]
1a000980:	b123      	cbz	r3, 1a00098c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000982:	4b04      	ldr	r3, [pc, #16]	; (1a000994 <_sbrk_r+0x18>)
1a000984:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000986:	4401      	add	r1, r0
1a000988:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00098a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a00098c:	4b01      	ldr	r3, [pc, #4]	; (1a000994 <_sbrk_r+0x18>)
1a00098e:	4a02      	ldr	r2, [pc, #8]	; (1a000998 <_sbrk_r+0x1c>)
1a000990:	601a      	str	r2, [r3, #0]
1a000992:	e7f6      	b.n	1a000982 <_sbrk_r+0x6>
1a000994:	100001b0 	.word	0x100001b0
1a000998:	10002c80 	.word	0x10002c80

1a00099c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a00099c:	4a12      	ldr	r2, [pc, #72]	; (1a0009e8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a00099e:	f012 0f07 	tst.w	r2, #7
1a0009a2:	d01e      	beq.n	1a0009e2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a0009a4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0009a6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a0009aa:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a0009ae:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0009b0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a0009b2:	480e      	ldr	r0, [pc, #56]	; (1a0009ec <prvHeapInit+0x50>)
1a0009b4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a0009b6:	2100      	movs	r1, #0
1a0009b8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a0009ba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a0009bc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a0009be:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a0009c2:	480b      	ldr	r0, [pc, #44]	; (1a0009f0 <prvHeapInit+0x54>)
1a0009c4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a0009c6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a0009c8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a0009ca:	1a99      	subs	r1, r3, r2
1a0009cc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a0009ce:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0009d0:	4b08      	ldr	r3, [pc, #32]	; (1a0009f4 <prvHeapInit+0x58>)
1a0009d2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a0009d4:	4b08      	ldr	r3, [pc, #32]	; (1a0009f8 <prvHeapInit+0x5c>)
1a0009d6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0009d8:	4b08      	ldr	r3, [pc, #32]	; (1a0009fc <prvHeapInit+0x60>)
1a0009da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0009de:	601a      	str	r2, [r3, #0]
}
1a0009e0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0009e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0009e6:	e7e4      	b.n	1a0009b2 <prvHeapInit+0x16>
1a0009e8:	100001b8 	.word	0x100001b8
1a0009ec:	100021c4 	.word	0x100021c4
1a0009f0:	100001b4 	.word	0x100001b4
1a0009f4:	100021c0 	.word	0x100021c0
1a0009f8:	100021bc 	.word	0x100021bc
1a0009fc:	100021b8 	.word	0x100021b8

1a000a00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000a00:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000a02:	4b13      	ldr	r3, [pc, #76]	; (1a000a50 <prvInsertBlockIntoFreeList+0x50>)
1a000a04:	681a      	ldr	r2, [r3, #0]
1a000a06:	4282      	cmp	r2, r0
1a000a08:	d31b      	bcc.n	1a000a42 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000a0a:	6859      	ldr	r1, [r3, #4]
1a000a0c:	185c      	adds	r4, r3, r1
1a000a0e:	4284      	cmp	r4, r0
1a000a10:	d103      	bne.n	1a000a1a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000a12:	6840      	ldr	r0, [r0, #4]
1a000a14:	4401      	add	r1, r0
1a000a16:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000a18:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000a1a:	6841      	ldr	r1, [r0, #4]
1a000a1c:	1844      	adds	r4, r0, r1
1a000a1e:	42a2      	cmp	r2, r4
1a000a20:	d113      	bne.n	1a000a4a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000a22:	4c0c      	ldr	r4, [pc, #48]	; (1a000a54 <prvInsertBlockIntoFreeList+0x54>)
1a000a24:	6824      	ldr	r4, [r4, #0]
1a000a26:	42a2      	cmp	r2, r4
1a000a28:	d00d      	beq.n	1a000a46 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000a2a:	6852      	ldr	r2, [r2, #4]
1a000a2c:	4411      	add	r1, r2
1a000a2e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000a30:	681a      	ldr	r2, [r3, #0]
1a000a32:	6812      	ldr	r2, [r2, #0]
1a000a34:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000a36:	4298      	cmp	r0, r3
1a000a38:	d000      	beq.n	1a000a3c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000a3a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000a40:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000a42:	4613      	mov	r3, r2
1a000a44:	e7de      	b.n	1a000a04 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000a46:	6004      	str	r4, [r0, #0]
1a000a48:	e7f5      	b.n	1a000a36 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000a4a:	6002      	str	r2, [r0, #0]
1a000a4c:	e7f3      	b.n	1a000a36 <prvInsertBlockIntoFreeList+0x36>
1a000a4e:	bf00      	nop
1a000a50:	100021c4 	.word	0x100021c4
1a000a54:	100001b4 	.word	0x100001b4

1a000a58 <pvPortMalloc>:
{
1a000a58:	b570      	push	{r4, r5, r6, lr}
1a000a5a:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000a5c:	f000 ff6c 	bl	1a001938 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000a60:	4b3f      	ldr	r3, [pc, #252]	; (1a000b60 <pvPortMalloc+0x108>)
1a000a62:	681b      	ldr	r3, [r3, #0]
1a000a64:	b1a3      	cbz	r3, 1a000a90 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000a66:	4b3f      	ldr	r3, [pc, #252]	; (1a000b64 <pvPortMalloc+0x10c>)
1a000a68:	681b      	ldr	r3, [r3, #0]
1a000a6a:	421c      	tst	r4, r3
1a000a6c:	d013      	beq.n	1a000a96 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a000a6e:	f000 fffd 	bl	1a001a6c <xTaskResumeAll>
void *pvReturn = NULL;
1a000a72:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000a74:	f000 fd02 	bl	1a00147c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000a78:	f016 0f07 	tst.w	r6, #7
1a000a7c:	d06e      	beq.n	1a000b5c <pvPortMalloc+0x104>
	__asm volatile
1a000a7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a82:	f383 8811 	msr	BASEPRI, r3
1a000a86:	f3bf 8f6f 	isb	sy
1a000a8a:	f3bf 8f4f 	dsb	sy
1a000a8e:	e7fe      	b.n	1a000a8e <pvPortMalloc+0x36>
			prvHeapInit();
1a000a90:	f7ff ff84 	bl	1a00099c <prvHeapInit>
1a000a94:	e7e7      	b.n	1a000a66 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000a96:	b194      	cbz	r4, 1a000abe <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000a98:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000a9a:	f014 0f07 	tst.w	r4, #7
1a000a9e:	d00e      	beq.n	1a000abe <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000aa0:	f024 0407 	bic.w	r4, r4, #7
1a000aa4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000aa6:	f004 0307 	and.w	r3, r4, #7
1a000aaa:	b143      	cbz	r3, 1a000abe <pvPortMalloc+0x66>
1a000aac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ab0:	f383 8811 	msr	BASEPRI, r3
1a000ab4:	f3bf 8f6f 	isb	sy
1a000ab8:	f3bf 8f4f 	dsb	sy
1a000abc:	e7fe      	b.n	1a000abc <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000abe:	b134      	cbz	r4, 1a000ace <pvPortMalloc+0x76>
1a000ac0:	4b29      	ldr	r3, [pc, #164]	; (1a000b68 <pvPortMalloc+0x110>)
1a000ac2:	681b      	ldr	r3, [r3, #0]
1a000ac4:	42a3      	cmp	r3, r4
1a000ac6:	d306      	bcc.n	1a000ad6 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000ac8:	4b28      	ldr	r3, [pc, #160]	; (1a000b6c <pvPortMalloc+0x114>)
1a000aca:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000acc:	e009      	b.n	1a000ae2 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000ace:	f000 ffcd 	bl	1a001a6c <xTaskResumeAll>
void *pvReturn = NULL;
1a000ad2:	2600      	movs	r6, #0
1a000ad4:	e7ce      	b.n	1a000a74 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a000ad6:	f000 ffc9 	bl	1a001a6c <xTaskResumeAll>
void *pvReturn = NULL;
1a000ada:	2600      	movs	r6, #0
1a000adc:	e7ca      	b.n	1a000a74 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000ade:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000ae0:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000ae2:	686a      	ldr	r2, [r5, #4]
1a000ae4:	42a2      	cmp	r2, r4
1a000ae6:	d202      	bcs.n	1a000aee <pvPortMalloc+0x96>
1a000ae8:	682a      	ldr	r2, [r5, #0]
1a000aea:	2a00      	cmp	r2, #0
1a000aec:	d1f7      	bne.n	1a000ade <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000aee:	4a1c      	ldr	r2, [pc, #112]	; (1a000b60 <pvPortMalloc+0x108>)
1a000af0:	6812      	ldr	r2, [r2, #0]
1a000af2:	42aa      	cmp	r2, r5
1a000af4:	d014      	beq.n	1a000b20 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000af6:	681e      	ldr	r6, [r3, #0]
1a000af8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000afa:	682a      	ldr	r2, [r5, #0]
1a000afc:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000afe:	686b      	ldr	r3, [r5, #4]
1a000b00:	1b1b      	subs	r3, r3, r4
1a000b02:	2b10      	cmp	r3, #16
1a000b04:	d914      	bls.n	1a000b30 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000b06:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000b08:	f010 0f07 	tst.w	r0, #7
1a000b0c:	d00c      	beq.n	1a000b28 <pvPortMalloc+0xd0>
1a000b0e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b12:	f383 8811 	msr	BASEPRI, r3
1a000b16:	f3bf 8f6f 	isb	sy
1a000b1a:	f3bf 8f4f 	dsb	sy
1a000b1e:	e7fe      	b.n	1a000b1e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000b20:	f000 ffa4 	bl	1a001a6c <xTaskResumeAll>
void *pvReturn = NULL;
1a000b24:	2600      	movs	r6, #0
1a000b26:	e7a5      	b.n	1a000a74 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000b28:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000b2a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000b2c:	f7ff ff68 	bl	1a000a00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000b30:	686a      	ldr	r2, [r5, #4]
1a000b32:	490d      	ldr	r1, [pc, #52]	; (1a000b68 <pvPortMalloc+0x110>)
1a000b34:	680b      	ldr	r3, [r1, #0]
1a000b36:	1a9b      	subs	r3, r3, r2
1a000b38:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000b3a:	490d      	ldr	r1, [pc, #52]	; (1a000b70 <pvPortMalloc+0x118>)
1a000b3c:	6809      	ldr	r1, [r1, #0]
1a000b3e:	428b      	cmp	r3, r1
1a000b40:	d201      	bcs.n	1a000b46 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000b42:	490b      	ldr	r1, [pc, #44]	; (1a000b70 <pvPortMalloc+0x118>)
1a000b44:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000b46:	4b07      	ldr	r3, [pc, #28]	; (1a000b64 <pvPortMalloc+0x10c>)
1a000b48:	681b      	ldr	r3, [r3, #0]
1a000b4a:	4313      	orrs	r3, r2
1a000b4c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000b4e:	2300      	movs	r3, #0
1a000b50:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000b52:	f000 ff8b 	bl	1a001a6c <xTaskResumeAll>
		if( pvReturn == NULL )
1a000b56:	2e00      	cmp	r6, #0
1a000b58:	d18e      	bne.n	1a000a78 <pvPortMalloc+0x20>
1a000b5a:	e78b      	b.n	1a000a74 <pvPortMalloc+0x1c>
}
1a000b5c:	4630      	mov	r0, r6
1a000b5e:	bd70      	pop	{r4, r5, r6, pc}
1a000b60:	100001b4 	.word	0x100001b4
1a000b64:	100021b8 	.word	0x100021b8
1a000b68:	100021bc 	.word	0x100021bc
1a000b6c:	100021c4 	.word	0x100021c4
1a000b70:	100021c0 	.word	0x100021c0

1a000b74 <vPortFree>:
	if( pv != NULL )
1a000b74:	b380      	cbz	r0, 1a000bd8 <vPortFree+0x64>
{
1a000b76:	b538      	push	{r3, r4, r5, lr}
1a000b78:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000b7a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000b7e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000b82:	4916      	ldr	r1, [pc, #88]	; (1a000bdc <vPortFree+0x68>)
1a000b84:	6809      	ldr	r1, [r1, #0]
1a000b86:	420a      	tst	r2, r1
1a000b88:	d108      	bne.n	1a000b9c <vPortFree+0x28>
1a000b8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b8e:	f383 8811 	msr	BASEPRI, r3
1a000b92:	f3bf 8f6f 	isb	sy
1a000b96:	f3bf 8f4f 	dsb	sy
1a000b9a:	e7fe      	b.n	1a000b9a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000b9c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000ba0:	b140      	cbz	r0, 1a000bb4 <vPortFree+0x40>
1a000ba2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ba6:	f383 8811 	msr	BASEPRI, r3
1a000baa:	f3bf 8f6f 	isb	sy
1a000bae:	f3bf 8f4f 	dsb	sy
1a000bb2:	e7fe      	b.n	1a000bb2 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000bb4:	ea22 0201 	bic.w	r2, r2, r1
1a000bb8:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000bbc:	f000 febc 	bl	1a001938 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000bc0:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000bc4:	4a06      	ldr	r2, [pc, #24]	; (1a000be0 <vPortFree+0x6c>)
1a000bc6:	6813      	ldr	r3, [r2, #0]
1a000bc8:	440b      	add	r3, r1
1a000bca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000bcc:	4628      	mov	r0, r5
1a000bce:	f7ff ff17 	bl	1a000a00 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000bd2:	f000 ff4b 	bl	1a001a6c <xTaskResumeAll>
}
1a000bd6:	bd38      	pop	{r3, r4, r5, pc}
1a000bd8:	4770      	bx	lr
1a000bda:	bf00      	nop
1a000bdc:	100021b8 	.word	0x100021b8
1a000be0:	100021bc 	.word	0x100021bc

1a000be4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000be4:	b510      	push	{r4, lr}
1a000be6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000be8:	f001 fc9c 	bl	1a002524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000bec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000bee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000bf0:	429a      	cmp	r2, r3
1a000bf2:	d004      	beq.n	1a000bfe <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000bf4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000bf6:	f001 fcb7 	bl	1a002568 <vPortExitCritical>

	return xReturn;
}
1a000bfa:	4620      	mov	r0, r4
1a000bfc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000bfe:	2401      	movs	r4, #1
1a000c00:	e7f9      	b.n	1a000bf6 <prvIsQueueFull+0x12>

1a000c02 <prvIsQueueEmpty>:
{
1a000c02:	b510      	push	{r4, lr}
1a000c04:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000c06:	f001 fc8d 	bl	1a002524 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000c0c:	b123      	cbz	r3, 1a000c18 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000c0e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000c10:	f001 fcaa 	bl	1a002568 <vPortExitCritical>
}
1a000c14:	4620      	mov	r0, r4
1a000c16:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000c18:	2401      	movs	r4, #1
1a000c1a:	e7f9      	b.n	1a000c10 <prvIsQueueEmpty+0xe>

1a000c1c <prvCopyDataToQueue>:
{
1a000c1c:	b570      	push	{r4, r5, r6, lr}
1a000c1e:	4604      	mov	r4, r0
1a000c20:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000c22:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000c24:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000c26:	b95a      	cbnz	r2, 1a000c40 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000c28:	6803      	ldr	r3, [r0, #0]
1a000c2a:	b11b      	cbz	r3, 1a000c34 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000c2c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000c2e:	3501      	adds	r5, #1
1a000c30:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000c32:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000c34:	6840      	ldr	r0, [r0, #4]
1a000c36:	f001 f94b 	bl	1a001ed0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000c3a:	2300      	movs	r3, #0
1a000c3c:	6063      	str	r3, [r4, #4]
1a000c3e:	e7f6      	b.n	1a000c2e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000c40:	b96e      	cbnz	r6, 1a000c5e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000c42:	6880      	ldr	r0, [r0, #8]
1a000c44:	f003 fbc2 	bl	1a0043cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000c48:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000c4a:	68a3      	ldr	r3, [r4, #8]
1a000c4c:	4413      	add	r3, r2
1a000c4e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000c50:	6862      	ldr	r2, [r4, #4]
1a000c52:	4293      	cmp	r3, r2
1a000c54:	d319      	bcc.n	1a000c8a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000c56:	6823      	ldr	r3, [r4, #0]
1a000c58:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000c5a:	2000      	movs	r0, #0
1a000c5c:	e7e7      	b.n	1a000c2e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000c5e:	68c0      	ldr	r0, [r0, #12]
1a000c60:	f003 fbb4 	bl	1a0043cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000c64:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000c66:	4252      	negs	r2, r2
1a000c68:	68e3      	ldr	r3, [r4, #12]
1a000c6a:	4413      	add	r3, r2
1a000c6c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000c6e:	6821      	ldr	r1, [r4, #0]
1a000c70:	428b      	cmp	r3, r1
1a000c72:	d202      	bcs.n	1a000c7a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000c74:	6863      	ldr	r3, [r4, #4]
1a000c76:	441a      	add	r2, r3
1a000c78:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000c7a:	2e02      	cmp	r6, #2
1a000c7c:	d001      	beq.n	1a000c82 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000c7e:	2000      	movs	r0, #0
1a000c80:	e7d5      	b.n	1a000c2e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000c82:	b125      	cbz	r5, 1a000c8e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000c84:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000c86:	2000      	movs	r0, #0
1a000c88:	e7d1      	b.n	1a000c2e <prvCopyDataToQueue+0x12>
1a000c8a:	2000      	movs	r0, #0
1a000c8c:	e7cf      	b.n	1a000c2e <prvCopyDataToQueue+0x12>
1a000c8e:	2000      	movs	r0, #0
1a000c90:	e7cd      	b.n	1a000c2e <prvCopyDataToQueue+0x12>

1a000c92 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000c92:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000c94:	b172      	cbz	r2, 1a000cb4 <prvCopyDataFromQueue+0x22>
{
1a000c96:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000c98:	68c3      	ldr	r3, [r0, #12]
1a000c9a:	4413      	add	r3, r2
1a000c9c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000c9e:	6844      	ldr	r4, [r0, #4]
1a000ca0:	42a3      	cmp	r3, r4
1a000ca2:	d301      	bcc.n	1a000ca8 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000ca4:	6803      	ldr	r3, [r0, #0]
1a000ca6:	60c3      	str	r3, [r0, #12]
1a000ca8:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000caa:	68c1      	ldr	r1, [r0, #12]
1a000cac:	4620      	mov	r0, r4
1a000cae:	f003 fb8d 	bl	1a0043cc <memcpy>
}
1a000cb2:	bd10      	pop	{r4, pc}
1a000cb4:	4770      	bx	lr

1a000cb6 <prvUnlockQueue>:
{
1a000cb6:	b538      	push	{r3, r4, r5, lr}
1a000cb8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000cba:	f001 fc33 	bl	1a002524 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000cbe:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000cc2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000cc4:	e003      	b.n	1a000cce <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000cc6:	f001 f8ed 	bl	1a001ea4 <vTaskMissedYield>
			--cTxLock;
1a000cca:	3c01      	subs	r4, #1
1a000ccc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000cce:	2c00      	cmp	r4, #0
1a000cd0:	dd08      	ble.n	1a000ce4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000cd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000cd4:	b133      	cbz	r3, 1a000ce4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000cd6:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000cda:	f001 f851 	bl	1a001d80 <xTaskRemoveFromEventList>
1a000cde:	2800      	cmp	r0, #0
1a000ce0:	d0f3      	beq.n	1a000cca <prvUnlockQueue+0x14>
1a000ce2:	e7f0      	b.n	1a000cc6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000ce4:	23ff      	movs	r3, #255	; 0xff
1a000ce6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000cea:	f001 fc3d 	bl	1a002568 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000cee:	f001 fc19 	bl	1a002524 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000cf2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000cf6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000cf8:	e003      	b.n	1a000d02 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000cfa:	f001 f8d3 	bl	1a001ea4 <vTaskMissedYield>
				--cRxLock;
1a000cfe:	3c01      	subs	r4, #1
1a000d00:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000d02:	2c00      	cmp	r4, #0
1a000d04:	dd08      	ble.n	1a000d18 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d06:	692b      	ldr	r3, [r5, #16]
1a000d08:	b133      	cbz	r3, 1a000d18 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d0a:	f105 0010 	add.w	r0, r5, #16
1a000d0e:	f001 f837 	bl	1a001d80 <xTaskRemoveFromEventList>
1a000d12:	2800      	cmp	r0, #0
1a000d14:	d0f3      	beq.n	1a000cfe <prvUnlockQueue+0x48>
1a000d16:	e7f0      	b.n	1a000cfa <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000d18:	23ff      	movs	r3, #255	; 0xff
1a000d1a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000d1e:	f001 fc23 	bl	1a002568 <vPortExitCritical>
}
1a000d22:	bd38      	pop	{r3, r4, r5, pc}

1a000d24 <xQueueGenericReset>:
{
1a000d24:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000d26:	b940      	cbnz	r0, 1a000d3a <xQueueGenericReset+0x16>
1a000d28:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d2c:	f383 8811 	msr	BASEPRI, r3
1a000d30:	f3bf 8f6f 	isb	sy
1a000d34:	f3bf 8f4f 	dsb	sy
1a000d38:	e7fe      	b.n	1a000d38 <xQueueGenericReset+0x14>
1a000d3a:	4604      	mov	r4, r0
1a000d3c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000d3e:	f001 fbf1 	bl	1a002524 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000d42:	6821      	ldr	r1, [r4, #0]
1a000d44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000d46:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000d48:	fb03 1002 	mla	r0, r3, r2, r1
1a000d4c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000d4e:	2000      	movs	r0, #0
1a000d50:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000d52:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000d54:	3a01      	subs	r2, #1
1a000d56:	fb02 1303 	mla	r3, r2, r3, r1
1a000d5a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000d5c:	23ff      	movs	r3, #255	; 0xff
1a000d5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000d66:	b9a5      	cbnz	r5, 1a000d92 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d68:	6923      	ldr	r3, [r4, #16]
1a000d6a:	b91b      	cbnz	r3, 1a000d74 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000d6c:	f001 fbfc 	bl	1a002568 <vPortExitCritical>
}
1a000d70:	2001      	movs	r0, #1
1a000d72:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d74:	f104 0010 	add.w	r0, r4, #16
1a000d78:	f001 f802 	bl	1a001d80 <xTaskRemoveFromEventList>
1a000d7c:	2800      	cmp	r0, #0
1a000d7e:	d0f5      	beq.n	1a000d6c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000d80:	4b08      	ldr	r3, [pc, #32]	; (1a000da4 <xQueueGenericReset+0x80>)
1a000d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d86:	601a      	str	r2, [r3, #0]
1a000d88:	f3bf 8f4f 	dsb	sy
1a000d8c:	f3bf 8f6f 	isb	sy
1a000d90:	e7ec      	b.n	1a000d6c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000d92:	f104 0010 	add.w	r0, r4, #16
1a000d96:	f000 fafa 	bl	1a00138e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000d9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000d9e:	f000 faf6 	bl	1a00138e <vListInitialise>
1a000da2:	e7e3      	b.n	1a000d6c <xQueueGenericReset+0x48>
1a000da4:	e000ed04 	.word	0xe000ed04

1a000da8 <prvInitialiseNewQueue>:
{
1a000da8:	b538      	push	{r3, r4, r5, lr}
1a000daa:	461d      	mov	r5, r3
1a000dac:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000dae:	460b      	mov	r3, r1
1a000db0:	b149      	cbz	r1, 1a000dc6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000db2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000db4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000db6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000db8:	2101      	movs	r1, #1
1a000dba:	4620      	mov	r0, r4
1a000dbc:	f7ff ffb2 	bl	1a000d24 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000dc0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000dc4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000dc6:	6024      	str	r4, [r4, #0]
1a000dc8:	e7f4      	b.n	1a000db4 <prvInitialiseNewQueue+0xc>

1a000dca <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000dca:	b940      	cbnz	r0, 1a000dde <xQueueGenericCreateStatic+0x14>
1a000dcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dd0:	f383 8811 	msr	BASEPRI, r3
1a000dd4:	f3bf 8f6f 	isb	sy
1a000dd8:	f3bf 8f4f 	dsb	sy
1a000ddc:	e7fe      	b.n	1a000ddc <xQueueGenericCreateStatic+0x12>
	{
1a000dde:	b510      	push	{r4, lr}
1a000de0:	b084      	sub	sp, #16
1a000de2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000de4:	b153      	cbz	r3, 1a000dfc <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000de6:	b192      	cbz	r2, 1a000e0e <xQueueGenericCreateStatic+0x44>
1a000de8:	b989      	cbnz	r1, 1a000e0e <xQueueGenericCreateStatic+0x44>
1a000dea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dee:	f383 8811 	msr	BASEPRI, r3
1a000df2:	f3bf 8f6f 	isb	sy
1a000df6:	f3bf 8f4f 	dsb	sy
1a000dfa:	e7fe      	b.n	1a000dfa <xQueueGenericCreateStatic+0x30>
1a000dfc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e00:	f383 8811 	msr	BASEPRI, r3
1a000e04:	f3bf 8f6f 	isb	sy
1a000e08:	f3bf 8f4f 	dsb	sy
1a000e0c:	e7fe      	b.n	1a000e0c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000e0e:	b94a      	cbnz	r2, 1a000e24 <xQueueGenericCreateStatic+0x5a>
1a000e10:	b141      	cbz	r1, 1a000e24 <xQueueGenericCreateStatic+0x5a>
1a000e12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e16:	f383 8811 	msr	BASEPRI, r3
1a000e1a:	f3bf 8f6f 	isb	sy
1a000e1e:	f3bf 8f4f 	dsb	sy
1a000e22:	e7fe      	b.n	1a000e22 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000e24:	2050      	movs	r0, #80	; 0x50
1a000e26:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000e28:	9803      	ldr	r0, [sp, #12]
1a000e2a:	2850      	cmp	r0, #80	; 0x50
1a000e2c:	d008      	beq.n	1a000e40 <xQueueGenericCreateStatic+0x76>
1a000e2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e32:	f383 8811 	msr	BASEPRI, r3
1a000e36:	f3bf 8f6f 	isb	sy
1a000e3a:	f3bf 8f4f 	dsb	sy
1a000e3e:	e7fe      	b.n	1a000e3e <xQueueGenericCreateStatic+0x74>
1a000e40:	4620      	mov	r0, r4
1a000e42:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000e44:	2301      	movs	r3, #1
1a000e46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000e4a:	9400      	str	r4, [sp, #0]
1a000e4c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000e50:	f7ff ffaa 	bl	1a000da8 <prvInitialiseNewQueue>
	}
1a000e54:	4620      	mov	r0, r4
1a000e56:	b004      	add	sp, #16
1a000e58:	bd10      	pop	{r4, pc}

1a000e5a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000e5a:	b940      	cbnz	r0, 1a000e6e <xQueueGenericCreate+0x14>
1a000e5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e60:	f383 8811 	msr	BASEPRI, r3
1a000e64:	f3bf 8f6f 	isb	sy
1a000e68:	f3bf 8f4f 	dsb	sy
1a000e6c:	e7fe      	b.n	1a000e6c <xQueueGenericCreate+0x12>
	{
1a000e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e70:	b083      	sub	sp, #12
1a000e72:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000e74:	b111      	cbz	r1, 1a000e7c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000e76:	fb01 f000 	mul.w	r0, r1, r0
1a000e7a:	e000      	b.n	1a000e7e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000e7c:	2000      	movs	r0, #0
1a000e7e:	4617      	mov	r7, r2
1a000e80:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000e82:	3050      	adds	r0, #80	; 0x50
1a000e84:	f7ff fde8 	bl	1a000a58 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000e88:	4605      	mov	r5, r0
1a000e8a:	b150      	cbz	r0, 1a000ea2 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000e8c:	2300      	movs	r3, #0
1a000e8e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000e92:	9000      	str	r0, [sp, #0]
1a000e94:	463b      	mov	r3, r7
1a000e96:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000e9a:	4621      	mov	r1, r4
1a000e9c:	4630      	mov	r0, r6
1a000e9e:	f7ff ff83 	bl	1a000da8 <prvInitialiseNewQueue>
	}
1a000ea2:	4628      	mov	r0, r5
1a000ea4:	b003      	add	sp, #12
1a000ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000ea8 <xQueueGenericSend>:
{
1a000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000eaa:	b085      	sub	sp, #20
1a000eac:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000eae:	b160      	cbz	r0, 1a000eca <xQueueGenericSend+0x22>
1a000eb0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000eb2:	b999      	cbnz	r1, 1a000edc <xQueueGenericSend+0x34>
1a000eb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000eb6:	b18a      	cbz	r2, 1a000edc <xQueueGenericSend+0x34>
1a000eb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ebc:	f383 8811 	msr	BASEPRI, r3
1a000ec0:	f3bf 8f6f 	isb	sy
1a000ec4:	f3bf 8f4f 	dsb	sy
1a000ec8:	e7fe      	b.n	1a000ec8 <xQueueGenericSend+0x20>
1a000eca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ece:	f383 8811 	msr	BASEPRI, r3
1a000ed2:	f3bf 8f6f 	isb	sy
1a000ed6:	f3bf 8f4f 	dsb	sy
1a000eda:	e7fe      	b.n	1a000eda <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000edc:	2b02      	cmp	r3, #2
1a000ede:	d10b      	bne.n	1a000ef8 <xQueueGenericSend+0x50>
1a000ee0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000ee2:	2a01      	cmp	r2, #1
1a000ee4:	d008      	beq.n	1a000ef8 <xQueueGenericSend+0x50>
1a000ee6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eea:	f383 8811 	msr	BASEPRI, r3
1a000eee:	f3bf 8f6f 	isb	sy
1a000ef2:	f3bf 8f4f 	dsb	sy
1a000ef6:	e7fe      	b.n	1a000ef6 <xQueueGenericSend+0x4e>
1a000ef8:	461e      	mov	r6, r3
1a000efa:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000efc:	f000 ffd8 	bl	1a001eb0 <xTaskGetSchedulerState>
1a000f00:	b950      	cbnz	r0, 1a000f18 <xQueueGenericSend+0x70>
1a000f02:	9b01      	ldr	r3, [sp, #4]
1a000f04:	b153      	cbz	r3, 1a000f1c <xQueueGenericSend+0x74>
1a000f06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f0a:	f383 8811 	msr	BASEPRI, r3
1a000f0e:	f3bf 8f6f 	isb	sy
1a000f12:	f3bf 8f4f 	dsb	sy
1a000f16:	e7fe      	b.n	1a000f16 <xQueueGenericSend+0x6e>
1a000f18:	2500      	movs	r5, #0
1a000f1a:	e03a      	b.n	1a000f92 <xQueueGenericSend+0xea>
1a000f1c:	2500      	movs	r5, #0
1a000f1e:	e038      	b.n	1a000f92 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000f20:	4632      	mov	r2, r6
1a000f22:	4639      	mov	r1, r7
1a000f24:	4620      	mov	r0, r4
1a000f26:	f7ff fe79 	bl	1a000c1c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000f2c:	b94b      	cbnz	r3, 1a000f42 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000f2e:	b1a8      	cbz	r0, 1a000f5c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000f30:	4b3b      	ldr	r3, [pc, #236]	; (1a001020 <xQueueGenericSend+0x178>)
1a000f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f36:	601a      	str	r2, [r3, #0]
1a000f38:	f3bf 8f4f 	dsb	sy
1a000f3c:	f3bf 8f6f 	isb	sy
1a000f40:	e00c      	b.n	1a000f5c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000f42:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f46:	f000 ff1b 	bl	1a001d80 <xTaskRemoveFromEventList>
1a000f4a:	b138      	cbz	r0, 1a000f5c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000f4c:	4b34      	ldr	r3, [pc, #208]	; (1a001020 <xQueueGenericSend+0x178>)
1a000f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f52:	601a      	str	r2, [r3, #0]
1a000f54:	f3bf 8f4f 	dsb	sy
1a000f58:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000f5c:	f001 fb04 	bl	1a002568 <vPortExitCritical>
				return pdPASS;
1a000f60:	2001      	movs	r0, #1
}
1a000f62:	b005      	add	sp, #20
1a000f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000f66:	f001 faff 	bl	1a002568 <vPortExitCritical>
					return errQUEUE_FULL;
1a000f6a:	2000      	movs	r0, #0
1a000f6c:	e7f9      	b.n	1a000f62 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000f6e:	a802      	add	r0, sp, #8
1a000f70:	f000 ff4c 	bl	1a001e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000f74:	2501      	movs	r5, #1
1a000f76:	e019      	b.n	1a000fac <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000f78:	2300      	movs	r3, #0
1a000f7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000f7e:	e021      	b.n	1a000fc4 <xQueueGenericSend+0x11c>
1a000f80:	2300      	movs	r3, #0
1a000f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000f86:	e023      	b.n	1a000fd0 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000f88:	4620      	mov	r0, r4
1a000f8a:	f7ff fe94 	bl	1a000cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000f8e:	f000 fd6d 	bl	1a001a6c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000f92:	f001 fac7 	bl	1a002524 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000f96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000f98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000f9a:	429a      	cmp	r2, r3
1a000f9c:	d3c0      	bcc.n	1a000f20 <xQueueGenericSend+0x78>
1a000f9e:	2e02      	cmp	r6, #2
1a000fa0:	d0be      	beq.n	1a000f20 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000fa2:	9b01      	ldr	r3, [sp, #4]
1a000fa4:	2b00      	cmp	r3, #0
1a000fa6:	d0de      	beq.n	1a000f66 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000fa8:	2d00      	cmp	r5, #0
1a000faa:	d0e0      	beq.n	1a000f6e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000fac:	f001 fadc 	bl	1a002568 <vPortExitCritical>
		vTaskSuspendAll();
1a000fb0:	f000 fcc2 	bl	1a001938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000fb4:	f001 fab6 	bl	1a002524 <vPortEnterCritical>
1a000fb8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000fbc:	b25b      	sxtb	r3, r3
1a000fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000fc2:	d0d9      	beq.n	1a000f78 <xQueueGenericSend+0xd0>
1a000fc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000fc8:	b25b      	sxtb	r3, r3
1a000fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000fce:	d0d7      	beq.n	1a000f80 <xQueueGenericSend+0xd8>
1a000fd0:	f001 faca 	bl	1a002568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000fd4:	a901      	add	r1, sp, #4
1a000fd6:	a802      	add	r0, sp, #8
1a000fd8:	f000 ff24 	bl	1a001e24 <xTaskCheckForTimeOut>
1a000fdc:	b9c8      	cbnz	r0, 1a001012 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000fde:	4620      	mov	r0, r4
1a000fe0:	f7ff fe00 	bl	1a000be4 <prvIsQueueFull>
1a000fe4:	2800      	cmp	r0, #0
1a000fe6:	d0cf      	beq.n	1a000f88 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000fe8:	9901      	ldr	r1, [sp, #4]
1a000fea:	f104 0010 	add.w	r0, r4, #16
1a000fee:	f000 fe93 	bl	1a001d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000ff2:	4620      	mov	r0, r4
1a000ff4:	f7ff fe5f 	bl	1a000cb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000ff8:	f000 fd38 	bl	1a001a6c <xTaskResumeAll>
1a000ffc:	2800      	cmp	r0, #0
1a000ffe:	d1c8      	bne.n	1a000f92 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001000:	4b07      	ldr	r3, [pc, #28]	; (1a001020 <xQueueGenericSend+0x178>)
1a001002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001006:	601a      	str	r2, [r3, #0]
1a001008:	f3bf 8f4f 	dsb	sy
1a00100c:	f3bf 8f6f 	isb	sy
1a001010:	e7bf      	b.n	1a000f92 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001012:	4620      	mov	r0, r4
1a001014:	f7ff fe4f 	bl	1a000cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001018:	f000 fd28 	bl	1a001a6c <xTaskResumeAll>
			return errQUEUE_FULL;
1a00101c:	2000      	movs	r0, #0
1a00101e:	e7a0      	b.n	1a000f62 <xQueueGenericSend+0xba>
1a001020:	e000ed04 	.word	0xe000ed04

1a001024 <xQueueGenericSendFromISR>:
{
1a001024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001028:	b160      	cbz	r0, 1a001044 <xQueueGenericSendFromISR+0x20>
1a00102a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00102c:	b999      	cbnz	r1, 1a001056 <xQueueGenericSendFromISR+0x32>
1a00102e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001030:	b188      	cbz	r0, 1a001056 <xQueueGenericSendFromISR+0x32>
1a001032:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001036:	f383 8811 	msr	BASEPRI, r3
1a00103a:	f3bf 8f6f 	isb	sy
1a00103e:	f3bf 8f4f 	dsb	sy
1a001042:	e7fe      	b.n	1a001042 <xQueueGenericSendFromISR+0x1e>
1a001044:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001048:	f383 8811 	msr	BASEPRI, r3
1a00104c:	f3bf 8f6f 	isb	sy
1a001050:	f3bf 8f4f 	dsb	sy
1a001054:	e7fe      	b.n	1a001054 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001056:	2b02      	cmp	r3, #2
1a001058:	d10b      	bne.n	1a001072 <xQueueGenericSendFromISR+0x4e>
1a00105a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a00105c:	2801      	cmp	r0, #1
1a00105e:	d008      	beq.n	1a001072 <xQueueGenericSendFromISR+0x4e>
1a001060:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001064:	f383 8811 	msr	BASEPRI, r3
1a001068:	f3bf 8f6f 	isb	sy
1a00106c:	f3bf 8f4f 	dsb	sy
1a001070:	e7fe      	b.n	1a001070 <xQueueGenericSendFromISR+0x4c>
1a001072:	461f      	mov	r7, r3
1a001074:	4690      	mov	r8, r2
1a001076:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001078:	f001 fb7e 	bl	1a002778 <vPortValidateInterruptPriority>
	__asm volatile
1a00107c:	f3ef 8611 	mrs	r6, BASEPRI
1a001080:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001084:	f383 8811 	msr	BASEPRI, r3
1a001088:	f3bf 8f6f 	isb	sy
1a00108c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001090:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001092:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001094:	429a      	cmp	r2, r3
1a001096:	d303      	bcc.n	1a0010a0 <xQueueGenericSendFromISR+0x7c>
1a001098:	2f02      	cmp	r7, #2
1a00109a:	d001      	beq.n	1a0010a0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a00109c:	2000      	movs	r0, #0
1a00109e:	e00f      	b.n	1a0010c0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0010a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0010a4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0010a6:	463a      	mov	r2, r7
1a0010a8:	4649      	mov	r1, r9
1a0010aa:	4620      	mov	r0, r4
1a0010ac:	f7ff fdb6 	bl	1a000c1c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0010b0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0010b4:	d008      	beq.n	1a0010c8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0010b6:	1c6b      	adds	r3, r5, #1
1a0010b8:	b25b      	sxtb	r3, r3
1a0010ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0010be:	2001      	movs	r0, #1
	__asm volatile
1a0010c0:	f386 8811 	msr	BASEPRI, r6
}
1a0010c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0010c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0010ca:	b15b      	cbz	r3, 1a0010e4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0010cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010d0:	f000 fe56 	bl	1a001d80 <xTaskRemoveFromEventList>
1a0010d4:	b140      	cbz	r0, 1a0010e8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0010d6:	f1b8 0f00 	cmp.w	r8, #0
1a0010da:	d007      	beq.n	1a0010ec <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0010dc:	2001      	movs	r0, #1
1a0010de:	f8c8 0000 	str.w	r0, [r8]
1a0010e2:	e7ed      	b.n	1a0010c0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0010e4:	2001      	movs	r0, #1
1a0010e6:	e7eb      	b.n	1a0010c0 <xQueueGenericSendFromISR+0x9c>
1a0010e8:	2001      	movs	r0, #1
1a0010ea:	e7e9      	b.n	1a0010c0 <xQueueGenericSendFromISR+0x9c>
1a0010ec:	2001      	movs	r0, #1
1a0010ee:	e7e7      	b.n	1a0010c0 <xQueueGenericSendFromISR+0x9c>

1a0010f0 <xQueueReceive>:
{
1a0010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0010f2:	b085      	sub	sp, #20
1a0010f4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0010f6:	b160      	cbz	r0, 1a001112 <xQueueReceive+0x22>
1a0010f8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0010fa:	b999      	cbnz	r1, 1a001124 <xQueueReceive+0x34>
1a0010fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0010fe:	b18b      	cbz	r3, 1a001124 <xQueueReceive+0x34>
	__asm volatile
1a001100:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001104:	f383 8811 	msr	BASEPRI, r3
1a001108:	f3bf 8f6f 	isb	sy
1a00110c:	f3bf 8f4f 	dsb	sy
1a001110:	e7fe      	b.n	1a001110 <xQueueReceive+0x20>
1a001112:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001116:	f383 8811 	msr	BASEPRI, r3
1a00111a:	f3bf 8f6f 	isb	sy
1a00111e:	f3bf 8f4f 	dsb	sy
1a001122:	e7fe      	b.n	1a001122 <xQueueReceive+0x32>
1a001124:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001126:	f000 fec3 	bl	1a001eb0 <xTaskGetSchedulerState>
1a00112a:	b950      	cbnz	r0, 1a001142 <xQueueReceive+0x52>
1a00112c:	9b01      	ldr	r3, [sp, #4]
1a00112e:	b153      	cbz	r3, 1a001146 <xQueueReceive+0x56>
1a001130:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001134:	f383 8811 	msr	BASEPRI, r3
1a001138:	f3bf 8f6f 	isb	sy
1a00113c:	f3bf 8f4f 	dsb	sy
1a001140:	e7fe      	b.n	1a001140 <xQueueReceive+0x50>
1a001142:	2600      	movs	r6, #0
1a001144:	e03e      	b.n	1a0011c4 <xQueueReceive+0xd4>
1a001146:	2600      	movs	r6, #0
1a001148:	e03c      	b.n	1a0011c4 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00114a:	4639      	mov	r1, r7
1a00114c:	4620      	mov	r0, r4
1a00114e:	f7ff fda0 	bl	1a000c92 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001152:	3d01      	subs	r5, #1
1a001154:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001156:	6923      	ldr	r3, [r4, #16]
1a001158:	b923      	cbnz	r3, 1a001164 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00115a:	f001 fa05 	bl	1a002568 <vPortExitCritical>
				return pdPASS;
1a00115e:	2001      	movs	r0, #1
}
1a001160:	b005      	add	sp, #20
1a001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001164:	f104 0010 	add.w	r0, r4, #16
1a001168:	f000 fe0a 	bl	1a001d80 <xTaskRemoveFromEventList>
1a00116c:	2800      	cmp	r0, #0
1a00116e:	d0f4      	beq.n	1a00115a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001170:	4b34      	ldr	r3, [pc, #208]	; (1a001244 <xQueueReceive+0x154>)
1a001172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001176:	601a      	str	r2, [r3, #0]
1a001178:	f3bf 8f4f 	dsb	sy
1a00117c:	f3bf 8f6f 	isb	sy
1a001180:	e7eb      	b.n	1a00115a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001182:	f001 f9f1 	bl	1a002568 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001186:	2000      	movs	r0, #0
1a001188:	e7ea      	b.n	1a001160 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00118a:	a802      	add	r0, sp, #8
1a00118c:	f000 fe3e 	bl	1a001e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001190:	2601      	movs	r6, #1
1a001192:	e021      	b.n	1a0011d8 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001194:	2300      	movs	r3, #0
1a001196:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00119a:	e029      	b.n	1a0011f0 <xQueueReceive+0x100>
1a00119c:	2300      	movs	r3, #0
1a00119e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0011a2:	e02b      	b.n	1a0011fc <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0011a4:	4620      	mov	r0, r4
1a0011a6:	f7ff fd86 	bl	1a000cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0011aa:	f000 fc5f 	bl	1a001a6c <xTaskResumeAll>
1a0011ae:	e009      	b.n	1a0011c4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0011b0:	4620      	mov	r0, r4
1a0011b2:	f7ff fd80 	bl	1a000cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0011b6:	f000 fc59 	bl	1a001a6c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0011ba:	4620      	mov	r0, r4
1a0011bc:	f7ff fd21 	bl	1a000c02 <prvIsQueueEmpty>
1a0011c0:	2800      	cmp	r0, #0
1a0011c2:	d13d      	bne.n	1a001240 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0011c4:	f001 f9ae 	bl	1a002524 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0011c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0011ca:	2d00      	cmp	r5, #0
1a0011cc:	d1bd      	bne.n	1a00114a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0011ce:	9b01      	ldr	r3, [sp, #4]
1a0011d0:	2b00      	cmp	r3, #0
1a0011d2:	d0d6      	beq.n	1a001182 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0011d4:	2e00      	cmp	r6, #0
1a0011d6:	d0d8      	beq.n	1a00118a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0011d8:	f001 f9c6 	bl	1a002568 <vPortExitCritical>
		vTaskSuspendAll();
1a0011dc:	f000 fbac 	bl	1a001938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0011e0:	f001 f9a0 	bl	1a002524 <vPortEnterCritical>
1a0011e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0011e8:	b25b      	sxtb	r3, r3
1a0011ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011ee:	d0d1      	beq.n	1a001194 <xQueueReceive+0xa4>
1a0011f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0011f4:	b25b      	sxtb	r3, r3
1a0011f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011fa:	d0cf      	beq.n	1a00119c <xQueueReceive+0xac>
1a0011fc:	f001 f9b4 	bl	1a002568 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001200:	a901      	add	r1, sp, #4
1a001202:	a802      	add	r0, sp, #8
1a001204:	f000 fe0e 	bl	1a001e24 <xTaskCheckForTimeOut>
1a001208:	2800      	cmp	r0, #0
1a00120a:	d1d1      	bne.n	1a0011b0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00120c:	4620      	mov	r0, r4
1a00120e:	f7ff fcf8 	bl	1a000c02 <prvIsQueueEmpty>
1a001212:	2800      	cmp	r0, #0
1a001214:	d0c6      	beq.n	1a0011a4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001216:	9901      	ldr	r1, [sp, #4]
1a001218:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00121c:	f000 fd7c 	bl	1a001d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001220:	4620      	mov	r0, r4
1a001222:	f7ff fd48 	bl	1a000cb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001226:	f000 fc21 	bl	1a001a6c <xTaskResumeAll>
1a00122a:	2800      	cmp	r0, #0
1a00122c:	d1ca      	bne.n	1a0011c4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a00122e:	4b05      	ldr	r3, [pc, #20]	; (1a001244 <xQueueReceive+0x154>)
1a001230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001234:	601a      	str	r2, [r3, #0]
1a001236:	f3bf 8f4f 	dsb	sy
1a00123a:	f3bf 8f6f 	isb	sy
1a00123e:	e7c1      	b.n	1a0011c4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001240:	2000      	movs	r0, #0
1a001242:	e78d      	b.n	1a001160 <xQueueReceive+0x70>
1a001244:	e000ed04 	.word	0xe000ed04

1a001248 <xQueueReceiveFromISR>:
{
1a001248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00124c:	b160      	cbz	r0, 1a001268 <xQueueReceiveFromISR+0x20>
1a00124e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001250:	b999      	cbnz	r1, 1a00127a <xQueueReceiveFromISR+0x32>
1a001252:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a001254:	b18b      	cbz	r3, 1a00127a <xQueueReceiveFromISR+0x32>
1a001256:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00125a:	f383 8811 	msr	BASEPRI, r3
1a00125e:	f3bf 8f6f 	isb	sy
1a001262:	f3bf 8f4f 	dsb	sy
1a001266:	e7fe      	b.n	1a001266 <xQueueReceiveFromISR+0x1e>
1a001268:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00126c:	f383 8811 	msr	BASEPRI, r3
1a001270:	f3bf 8f6f 	isb	sy
1a001274:	f3bf 8f4f 	dsb	sy
1a001278:	e7fe      	b.n	1a001278 <xQueueReceiveFromISR+0x30>
1a00127a:	4617      	mov	r7, r2
1a00127c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00127e:	f001 fa7b 	bl	1a002778 <vPortValidateInterruptPriority>
	__asm volatile
1a001282:	f3ef 8611 	mrs	r6, BASEPRI
1a001286:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00128a:	f383 8811 	msr	BASEPRI, r3
1a00128e:	f3bf 8f6f 	isb	sy
1a001292:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001296:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00129a:	f1b8 0f00 	cmp.w	r8, #0
1a00129e:	d01d      	beq.n	1a0012dc <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
1a0012a0:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a0012a4:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a0012a6:	4649      	mov	r1, r9
1a0012a8:	4620      	mov	r0, r4
1a0012aa:	f7ff fcf2 	bl	1a000c92 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a0012ae:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0012b2:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a0012b4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0012b8:	d005      	beq.n	1a0012c6 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a0012ba:	1c6b      	adds	r3, r5, #1
1a0012bc:	b25b      	sxtb	r3, r3
1a0012be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a0012c2:	2001      	movs	r0, #1
1a0012c4:	e00b      	b.n	1a0012de <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0012c6:	6923      	ldr	r3, [r4, #16]
1a0012c8:	b16b      	cbz	r3, 1a0012e6 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0012ca:	f104 0010 	add.w	r0, r4, #16
1a0012ce:	f000 fd57 	bl	1a001d80 <xTaskRemoveFromEventList>
1a0012d2:	b150      	cbz	r0, 1a0012ea <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
1a0012d4:	b15f      	cbz	r7, 1a0012ee <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a0012d6:	2001      	movs	r0, #1
1a0012d8:	6038      	str	r0, [r7, #0]
1a0012da:	e000      	b.n	1a0012de <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
1a0012dc:	2000      	movs	r0, #0
	__asm volatile
1a0012de:	f386 8811 	msr	BASEPRI, r6
}
1a0012e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
1a0012e6:	2001      	movs	r0, #1
1a0012e8:	e7f9      	b.n	1a0012de <xQueueReceiveFromISR+0x96>
1a0012ea:	2001      	movs	r0, #1
1a0012ec:	e7f7      	b.n	1a0012de <xQueueReceiveFromISR+0x96>
1a0012ee:	2001      	movs	r0, #1
1a0012f0:	e7f5      	b.n	1a0012de <xQueueReceiveFromISR+0x96>

1a0012f2 <xQueueIsQueueEmptyFromISR>:
	configASSERT( xQueue );
1a0012f2:	b118      	cbz	r0, 1a0012fc <xQueueIsQueueEmptyFromISR+0xa>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1a0012f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0012f6:	b953      	cbnz	r3, 1a00130e <xQueueIsQueueEmptyFromISR+0x1c>
		xReturn = pdTRUE;
1a0012f8:	2001      	movs	r0, #1
1a0012fa:	4770      	bx	lr
	__asm volatile
1a0012fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001300:	f383 8811 	msr	BASEPRI, r3
1a001304:	f3bf 8f6f 	isb	sy
1a001308:	f3bf 8f4f 	dsb	sy
1a00130c:	e7fe      	b.n	1a00130c <xQueueIsQueueEmptyFromISR+0x1a>
		xReturn = pdFALSE;
1a00130e:	2000      	movs	r0, #0
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1a001310:	4770      	bx	lr
1a001312:	Address 0x000000001a001312 is out of bounds.


1a001314 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001314:	2300      	movs	r3, #0
1a001316:	2b07      	cmp	r3, #7
1a001318:	d80c      	bhi.n	1a001334 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a00131a:	4a07      	ldr	r2, [pc, #28]	; (1a001338 <vQueueAddToRegistry+0x24>)
1a00131c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001320:	b10a      	cbz	r2, 1a001326 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001322:	3301      	adds	r3, #1
1a001324:	e7f7      	b.n	1a001316 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001326:	4a04      	ldr	r2, [pc, #16]	; (1a001338 <vQueueAddToRegistry+0x24>)
1a001328:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a00132c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001330:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001332:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001334:	4770      	bx	lr
1a001336:	bf00      	nop
1a001338:	10002c38 	.word	0x10002c38

1a00133c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a00133c:	b570      	push	{r4, r5, r6, lr}
1a00133e:	4604      	mov	r4, r0
1a001340:	460d      	mov	r5, r1
1a001342:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001344:	f001 f8ee 	bl	1a002524 <vPortEnterCritical>
1a001348:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00134c:	b25b      	sxtb	r3, r3
1a00134e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001352:	d00d      	beq.n	1a001370 <vQueueWaitForMessageRestricted+0x34>
1a001354:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001358:	b25b      	sxtb	r3, r3
1a00135a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00135e:	d00b      	beq.n	1a001378 <vQueueWaitForMessageRestricted+0x3c>
1a001360:	f001 f902 	bl	1a002568 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001366:	b15b      	cbz	r3, 1a001380 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001368:	4620      	mov	r0, r4
1a00136a:	f7ff fca4 	bl	1a000cb6 <prvUnlockQueue>
	}
1a00136e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001370:	2300      	movs	r3, #0
1a001372:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001376:	e7ed      	b.n	1a001354 <vQueueWaitForMessageRestricted+0x18>
1a001378:	2300      	movs	r3, #0
1a00137a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00137e:	e7ef      	b.n	1a001360 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001380:	4632      	mov	r2, r6
1a001382:	4629      	mov	r1, r5
1a001384:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001388:	f000 fcde 	bl	1a001d48 <vTaskPlaceOnEventListRestricted>
1a00138c:	e7ec      	b.n	1a001368 <vQueueWaitForMessageRestricted+0x2c>

1a00138e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00138e:	f100 0308 	add.w	r3, r0, #8
1a001392:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a001394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001398:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00139a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00139c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00139e:	2300      	movs	r3, #0
1a0013a0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0013a2:	4770      	bx	lr

1a0013a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0013a4:	2300      	movs	r3, #0
1a0013a6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0013a8:	4770      	bx	lr

1a0013aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0013aa:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0013ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0013ae:	689a      	ldr	r2, [r3, #8]
1a0013b0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0013b2:	689a      	ldr	r2, [r3, #8]
1a0013b4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0013b6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0013b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0013ba:	6803      	ldr	r3, [r0, #0]
1a0013bc:	3301      	adds	r3, #1
1a0013be:	6003      	str	r3, [r0, #0]
}
1a0013c0:	4770      	bx	lr

1a0013c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0013c2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0013c4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0013c6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0013ca:	d002      	beq.n	1a0013d2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013cc:	f100 0208 	add.w	r2, r0, #8
1a0013d0:	e002      	b.n	1a0013d8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0013d2:	6902      	ldr	r2, [r0, #16]
1a0013d4:	e004      	b.n	1a0013e0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0013d6:	461a      	mov	r2, r3
1a0013d8:	6853      	ldr	r3, [r2, #4]
1a0013da:	681c      	ldr	r4, [r3, #0]
1a0013dc:	42ac      	cmp	r4, r5
1a0013de:	d9fa      	bls.n	1a0013d6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0013e0:	6853      	ldr	r3, [r2, #4]
1a0013e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0013e4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0013e6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0013e8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0013ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0013ec:	6803      	ldr	r3, [r0, #0]
1a0013ee:	3301      	adds	r3, #1
1a0013f0:	6003      	str	r3, [r0, #0]
}
1a0013f2:	bc30      	pop	{r4, r5}
1a0013f4:	4770      	bx	lr

1a0013f6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0013f6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0013f8:	6842      	ldr	r2, [r0, #4]
1a0013fa:	6881      	ldr	r1, [r0, #8]
1a0013fc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0013fe:	6882      	ldr	r2, [r0, #8]
1a001400:	6841      	ldr	r1, [r0, #4]
1a001402:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001404:	685a      	ldr	r2, [r3, #4]
1a001406:	4282      	cmp	r2, r0
1a001408:	d006      	beq.n	1a001418 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a00140a:	2200      	movs	r2, #0
1a00140c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00140e:	681a      	ldr	r2, [r3, #0]
1a001410:	3a01      	subs	r2, #1
1a001412:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001414:	6818      	ldr	r0, [r3, #0]
}
1a001416:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001418:	6882      	ldr	r2, [r0, #8]
1a00141a:	605a      	str	r2, [r3, #4]
1a00141c:	e7f5      	b.n	1a00140a <uxListRemove+0x14>
1a00141e:	Address 0x000000001a00141e is out of bounds.


1a001420 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001420:	4b03      	ldr	r3, [pc, #12]	; (1a001430 <vApplicationGetIdleTaskMemory+0x10>)
1a001422:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001424:	4b03      	ldr	r3, [pc, #12]	; (1a001434 <vApplicationGetIdleTaskMemory+0x14>)
1a001426:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001428:	235a      	movs	r3, #90	; 0x5a
1a00142a:	6013      	str	r3, [r2, #0]
}
1a00142c:	4770      	bx	lr
1a00142e:	bf00      	nop
1a001430:	100028d4 	.word	0x100028d4
1a001434:	100021cc 	.word	0x100021cc

1a001438 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001438:	4b03      	ldr	r3, [pc, #12]	; (1a001448 <vApplicationGetTimerTaskMemory+0x10>)
1a00143a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a00143c:	4b03      	ldr	r3, [pc, #12]	; (1a00144c <vApplicationGetTimerTaskMemory+0x14>)
1a00143e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001440:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001444:	6013      	str	r3, [r2, #0]
1a001446:	4770      	bx	lr
1a001448:	10002934 	.word	0x10002934
1a00144c:	10002334 	.word	0x10002334

1a001450 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a001450:	b510      	push	{r4, lr}
1a001452:	b082      	sub	sp, #8
1a001454:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001456:	9001      	str	r0, [sp, #4]
1a001458:	2300      	movs	r3, #0
1a00145a:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a00145c:	f001 f862 	bl	1a002524 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001460:	9901      	ldr	r1, [sp, #4]
1a001462:	4622      	mov	r2, r4
1a001464:	4804      	ldr	r0, [pc, #16]	; (1a001478 <vAssertCalled+0x28>)
1a001466:	f003 f86d 	bl	1a004544 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00146a:	9b00      	ldr	r3, [sp, #0]
1a00146c:	2b00      	cmp	r3, #0
1a00146e:	d0fc      	beq.n	1a00146a <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001470:	f001 f87a 	bl	1a002568 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001474:	b002      	add	sp, #8
1a001476:	bd10      	pop	{r4, pc}
1a001478:	1a004fc8 	.word	0x1a004fc8

1a00147c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a00147c:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a00147e:	4804      	ldr	r0, [pc, #16]	; (1a001490 <vApplicationMallocFailedHook+0x14>)
1a001480:	f003 f8d4 	bl	1a00462c <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001484:	4903      	ldr	r1, [pc, #12]	; (1a001494 <vApplicationMallocFailedHook+0x18>)
1a001486:	202c      	movs	r0, #44	; 0x2c
1a001488:	f7ff ffe2 	bl	1a001450 <vAssertCalled>
}
1a00148c:	bd08      	pop	{r3, pc}
1a00148e:	bf00      	nop
1a001490:	1a004f54 	.word	0x1a004f54
1a001494:	1a004f78 	.word	0x1a004f78

1a001498 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001498:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00149a:	4804      	ldr	r0, [pc, #16]	; (1a0014ac <vApplicationStackOverflowHook+0x14>)
1a00149c:	f003 f852 	bl	1a004544 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0014a0:	4903      	ldr	r1, [pc, #12]	; (1a0014b0 <vApplicationStackOverflowHook+0x18>)
1a0014a2:	2050      	movs	r0, #80	; 0x50
1a0014a4:	f7ff ffd4 	bl	1a001450 <vAssertCalled>
}
1a0014a8:	bd08      	pop	{r3, pc}
1a0014aa:	bf00      	nop
1a0014ac:	1a004f98 	.word	0x1a004f98
1a0014b0:	1a004f78 	.word	0x1a004f78

1a0014b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0014b4:	4b08      	ldr	r3, [pc, #32]	; (1a0014d8 <prvResetNextTaskUnblockTime+0x24>)
1a0014b6:	681b      	ldr	r3, [r3, #0]
1a0014b8:	681b      	ldr	r3, [r3, #0]
1a0014ba:	b13b      	cbz	r3, 1a0014cc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0014bc:	4b06      	ldr	r3, [pc, #24]	; (1a0014d8 <prvResetNextTaskUnblockTime+0x24>)
1a0014be:	681b      	ldr	r3, [r3, #0]
1a0014c0:	68db      	ldr	r3, [r3, #12]
1a0014c2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0014c4:	685a      	ldr	r2, [r3, #4]
1a0014c6:	4b05      	ldr	r3, [pc, #20]	; (1a0014dc <prvResetNextTaskUnblockTime+0x28>)
1a0014c8:	601a      	str	r2, [r3, #0]
	}
}
1a0014ca:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0014cc:	4b03      	ldr	r3, [pc, #12]	; (1a0014dc <prvResetNextTaskUnblockTime+0x28>)
1a0014ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014d2:	601a      	str	r2, [r3, #0]
1a0014d4:	4770      	bx	lr
1a0014d6:	bf00      	nop
1a0014d8:	10002998 	.word	0x10002998
1a0014dc:	10002a6c 	.word	0x10002a6c

1a0014e0 <prvInitialiseNewTask>:
{
1a0014e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0014e4:	4681      	mov	r9, r0
1a0014e6:	460d      	mov	r5, r1
1a0014e8:	4617      	mov	r7, r2
1a0014ea:	469a      	mov	sl, r3
1a0014ec:	9e08      	ldr	r6, [sp, #32]
1a0014ee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0014f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0014f4:	0092      	lsls	r2, r2, #2
1a0014f6:	21a5      	movs	r1, #165	; 0xa5
1a0014f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0014fa:	f002 ff72 	bl	1a0043e2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0014fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001500:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001504:	3a01      	subs	r2, #1
1a001506:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a00150a:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00150e:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001510:	2300      	movs	r3, #0
1a001512:	2b0f      	cmp	r3, #15
1a001514:	d807      	bhi.n	1a001526 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001516:	5ce9      	ldrb	r1, [r5, r3]
1a001518:	18e2      	adds	r2, r4, r3
1a00151a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00151e:	5cea      	ldrb	r2, [r5, r3]
1a001520:	b10a      	cbz	r2, 1a001526 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001522:	3301      	adds	r3, #1
1a001524:	e7f5      	b.n	1a001512 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001526:	2300      	movs	r3, #0
1a001528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00152c:	2e06      	cmp	r6, #6
1a00152e:	d900      	bls.n	1a001532 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001530:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001532:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001534:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001536:	2500      	movs	r5, #0
1a001538:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00153a:	1d20      	adds	r0, r4, #4
1a00153c:	f7ff ff32 	bl	1a0013a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001540:	f104 0018 	add.w	r0, r4, #24
1a001544:	f7ff ff2e 	bl	1a0013a4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001548:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00154a:	f1c6 0607 	rsb	r6, r6, #7
1a00154e:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001550:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001552:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001554:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001558:	4652      	mov	r2, sl
1a00155a:	4649      	mov	r1, r9
1a00155c:	4638      	mov	r0, r7
1a00155e:	f000 ffb5 	bl	1a0024cc <pxPortInitialiseStack>
1a001562:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001564:	f1b8 0f00 	cmp.w	r8, #0
1a001568:	d001      	beq.n	1a00156e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00156a:	f8c8 4000 	str.w	r4, [r8]
}
1a00156e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001572:	Address 0x000000001a001572 is out of bounds.


1a001574 <prvInitialiseTaskLists>:
{
1a001574:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001576:	2400      	movs	r4, #0
1a001578:	e007      	b.n	1a00158a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00157a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00157e:	0093      	lsls	r3, r2, #2
1a001580:	480e      	ldr	r0, [pc, #56]	; (1a0015bc <prvInitialiseTaskLists+0x48>)
1a001582:	4418      	add	r0, r3
1a001584:	f7ff ff03 	bl	1a00138e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001588:	3401      	adds	r4, #1
1a00158a:	2c06      	cmp	r4, #6
1a00158c:	d9f5      	bls.n	1a00157a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00158e:	4d0c      	ldr	r5, [pc, #48]	; (1a0015c0 <prvInitialiseTaskLists+0x4c>)
1a001590:	4628      	mov	r0, r5
1a001592:	f7ff fefc 	bl	1a00138e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001596:	4c0b      	ldr	r4, [pc, #44]	; (1a0015c4 <prvInitialiseTaskLists+0x50>)
1a001598:	4620      	mov	r0, r4
1a00159a:	f7ff fef8 	bl	1a00138e <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00159e:	480a      	ldr	r0, [pc, #40]	; (1a0015c8 <prvInitialiseTaskLists+0x54>)
1a0015a0:	f7ff fef5 	bl	1a00138e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0015a4:	4809      	ldr	r0, [pc, #36]	; (1a0015cc <prvInitialiseTaskLists+0x58>)
1a0015a6:	f7ff fef2 	bl	1a00138e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0015aa:	4809      	ldr	r0, [pc, #36]	; (1a0015d0 <prvInitialiseTaskLists+0x5c>)
1a0015ac:	f7ff feef 	bl	1a00138e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0015b0:	4b08      	ldr	r3, [pc, #32]	; (1a0015d4 <prvInitialiseTaskLists+0x60>)
1a0015b2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0015b4:	4b08      	ldr	r3, [pc, #32]	; (1a0015d8 <prvInitialiseTaskLists+0x64>)
1a0015b6:	601c      	str	r4, [r3, #0]
}
1a0015b8:	bd38      	pop	{r3, r4, r5, pc}
1a0015ba:	bf00      	nop
1a0015bc:	100029a0 	.word	0x100029a0
1a0015c0:	10002a44 	.word	0x10002a44
1a0015c4:	10002a58 	.word	0x10002a58
1a0015c8:	10002a74 	.word	0x10002a74
1a0015cc:	10002aa0 	.word	0x10002aa0
1a0015d0:	10002a8c 	.word	0x10002a8c
1a0015d4:	10002998 	.word	0x10002998
1a0015d8:	1000299c 	.word	0x1000299c

1a0015dc <prvAddNewTaskToReadyList>:
{
1a0015dc:	b510      	push	{r4, lr}
1a0015de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0015e0:	f000 ffa0 	bl	1a002524 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0015e4:	4a21      	ldr	r2, [pc, #132]	; (1a00166c <prvAddNewTaskToReadyList+0x90>)
1a0015e6:	6813      	ldr	r3, [r2, #0]
1a0015e8:	3301      	adds	r3, #1
1a0015ea:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0015ec:	4b20      	ldr	r3, [pc, #128]	; (1a001670 <prvAddNewTaskToReadyList+0x94>)
1a0015ee:	681b      	ldr	r3, [r3, #0]
1a0015f0:	b15b      	cbz	r3, 1a00160a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0015f2:	4b20      	ldr	r3, [pc, #128]	; (1a001674 <prvAddNewTaskToReadyList+0x98>)
1a0015f4:	681b      	ldr	r3, [r3, #0]
1a0015f6:	b96b      	cbnz	r3, 1a001614 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0015f8:	4b1d      	ldr	r3, [pc, #116]	; (1a001670 <prvAddNewTaskToReadyList+0x94>)
1a0015fa:	681b      	ldr	r3, [r3, #0]
1a0015fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0015fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001600:	429a      	cmp	r2, r3
1a001602:	d807      	bhi.n	1a001614 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001604:	4b1a      	ldr	r3, [pc, #104]	; (1a001670 <prvAddNewTaskToReadyList+0x94>)
1a001606:	601c      	str	r4, [r3, #0]
1a001608:	e004      	b.n	1a001614 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a00160a:	4b19      	ldr	r3, [pc, #100]	; (1a001670 <prvAddNewTaskToReadyList+0x94>)
1a00160c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00160e:	6813      	ldr	r3, [r2, #0]
1a001610:	2b01      	cmp	r3, #1
1a001612:	d027      	beq.n	1a001664 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001614:	4a18      	ldr	r2, [pc, #96]	; (1a001678 <prvAddNewTaskToReadyList+0x9c>)
1a001616:	6813      	ldr	r3, [r2, #0]
1a001618:	3301      	adds	r3, #1
1a00161a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a00161c:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00161e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001620:	2201      	movs	r2, #1
1a001622:	409a      	lsls	r2, r3
1a001624:	4915      	ldr	r1, [pc, #84]	; (1a00167c <prvAddNewTaskToReadyList+0xa0>)
1a001626:	6808      	ldr	r0, [r1, #0]
1a001628:	4302      	orrs	r2, r0
1a00162a:	600a      	str	r2, [r1, #0]
1a00162c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001630:	009a      	lsls	r2, r3, #2
1a001632:	1d21      	adds	r1, r4, #4
1a001634:	4812      	ldr	r0, [pc, #72]	; (1a001680 <prvAddNewTaskToReadyList+0xa4>)
1a001636:	4410      	add	r0, r2
1a001638:	f7ff feb7 	bl	1a0013aa <vListInsertEnd>
	taskEXIT_CRITICAL();
1a00163c:	f000 ff94 	bl	1a002568 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001640:	4b0c      	ldr	r3, [pc, #48]	; (1a001674 <prvAddNewTaskToReadyList+0x98>)
1a001642:	681b      	ldr	r3, [r3, #0]
1a001644:	b16b      	cbz	r3, 1a001662 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001646:	4b0a      	ldr	r3, [pc, #40]	; (1a001670 <prvAddNewTaskToReadyList+0x94>)
1a001648:	681b      	ldr	r3, [r3, #0]
1a00164a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00164c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00164e:	429a      	cmp	r2, r3
1a001650:	d207      	bcs.n	1a001662 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001652:	4b0c      	ldr	r3, [pc, #48]	; (1a001684 <prvAddNewTaskToReadyList+0xa8>)
1a001654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001658:	601a      	str	r2, [r3, #0]
1a00165a:	f3bf 8f4f 	dsb	sy
1a00165e:	f3bf 8f6f 	isb	sy
}
1a001662:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001664:	f7ff ff86 	bl	1a001574 <prvInitialiseTaskLists>
1a001668:	e7d4      	b.n	1a001614 <prvAddNewTaskToReadyList+0x38>
1a00166a:	bf00      	nop
1a00166c:	10002a2c 	.word	0x10002a2c
1a001670:	10002994 	.word	0x10002994
1a001674:	10002a88 	.word	0x10002a88
1a001678:	10002a3c 	.word	0x10002a3c
1a00167c:	10002a40 	.word	0x10002a40
1a001680:	100029a0 	.word	0x100029a0
1a001684:	e000ed04 	.word	0xe000ed04

1a001688 <prvDeleteTCB>:
	{
1a001688:	b510      	push	{r4, lr}
1a00168a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00168c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001690:	b933      	cbnz	r3, 1a0016a0 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001692:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001694:	f7ff fa6e 	bl	1a000b74 <vPortFree>
				vPortFree( pxTCB );
1a001698:	4620      	mov	r0, r4
1a00169a:	f7ff fa6b 	bl	1a000b74 <vPortFree>
	}
1a00169e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0016a0:	2b01      	cmp	r3, #1
1a0016a2:	d00a      	beq.n	1a0016ba <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0016a4:	2b02      	cmp	r3, #2
1a0016a6:	d0fa      	beq.n	1a00169e <prvDeleteTCB+0x16>
1a0016a8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016ac:	f383 8811 	msr	BASEPRI, r3
1a0016b0:	f3bf 8f6f 	isb	sy
1a0016b4:	f3bf 8f4f 	dsb	sy
1a0016b8:	e7fe      	b.n	1a0016b8 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a0016ba:	f7ff fa5b 	bl	1a000b74 <vPortFree>
1a0016be:	e7ee      	b.n	1a00169e <prvDeleteTCB+0x16>

1a0016c0 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0016c0:	4b0f      	ldr	r3, [pc, #60]	; (1a001700 <prvCheckTasksWaitingTermination+0x40>)
1a0016c2:	681b      	ldr	r3, [r3, #0]
1a0016c4:	b1d3      	cbz	r3, 1a0016fc <prvCheckTasksWaitingTermination+0x3c>
{
1a0016c6:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a0016c8:	f000 ff2c 	bl	1a002524 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0016cc:	4b0d      	ldr	r3, [pc, #52]	; (1a001704 <prvCheckTasksWaitingTermination+0x44>)
1a0016ce:	68db      	ldr	r3, [r3, #12]
1a0016d0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0016d2:	1d20      	adds	r0, r4, #4
1a0016d4:	f7ff fe8f 	bl	1a0013f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0016d8:	4a0b      	ldr	r2, [pc, #44]	; (1a001708 <prvCheckTasksWaitingTermination+0x48>)
1a0016da:	6813      	ldr	r3, [r2, #0]
1a0016dc:	3b01      	subs	r3, #1
1a0016de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0016e0:	4a07      	ldr	r2, [pc, #28]	; (1a001700 <prvCheckTasksWaitingTermination+0x40>)
1a0016e2:	6813      	ldr	r3, [r2, #0]
1a0016e4:	3b01      	subs	r3, #1
1a0016e6:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0016e8:	f000 ff3e 	bl	1a002568 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0016ec:	4620      	mov	r0, r4
1a0016ee:	f7ff ffcb 	bl	1a001688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0016f2:	4b03      	ldr	r3, [pc, #12]	; (1a001700 <prvCheckTasksWaitingTermination+0x40>)
1a0016f4:	681b      	ldr	r3, [r3, #0]
1a0016f6:	2b00      	cmp	r3, #0
1a0016f8:	d1e6      	bne.n	1a0016c8 <prvCheckTasksWaitingTermination+0x8>
}
1a0016fa:	bd10      	pop	{r4, pc}
1a0016fc:	4770      	bx	lr
1a0016fe:	bf00      	nop
1a001700:	10002a30 	.word	0x10002a30
1a001704:	10002aa0 	.word	0x10002aa0
1a001708:	10002a2c 	.word	0x10002a2c

1a00170c <prvIdleTask>:
{
1a00170c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a00170e:	f7ff ffd7 	bl	1a0016c0 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001712:	4b06      	ldr	r3, [pc, #24]	; (1a00172c <prvIdleTask+0x20>)
1a001714:	681b      	ldr	r3, [r3, #0]
1a001716:	2b01      	cmp	r3, #1
1a001718:	d9f9      	bls.n	1a00170e <prvIdleTask+0x2>
				taskYIELD();
1a00171a:	4b05      	ldr	r3, [pc, #20]	; (1a001730 <prvIdleTask+0x24>)
1a00171c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001720:	601a      	str	r2, [r3, #0]
1a001722:	f3bf 8f4f 	dsb	sy
1a001726:	f3bf 8f6f 	isb	sy
1a00172a:	e7f0      	b.n	1a00170e <prvIdleTask+0x2>
1a00172c:	100029a0 	.word	0x100029a0
1a001730:	e000ed04 	.word	0xe000ed04

1a001734 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001734:	b570      	push	{r4, r5, r6, lr}
1a001736:	4604      	mov	r4, r0
1a001738:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00173a:	4b1d      	ldr	r3, [pc, #116]	; (1a0017b0 <prvAddCurrentTaskToDelayedList+0x7c>)
1a00173c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00173e:	4b1d      	ldr	r3, [pc, #116]	; (1a0017b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001740:	6818      	ldr	r0, [r3, #0]
1a001742:	3004      	adds	r0, #4
1a001744:	f7ff fe57 	bl	1a0013f6 <uxListRemove>
1a001748:	b950      	cbnz	r0, 1a001760 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00174a:	4b1a      	ldr	r3, [pc, #104]	; (1a0017b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00174c:	681b      	ldr	r3, [r3, #0]
1a00174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001750:	2301      	movs	r3, #1
1a001752:	fa03 f202 	lsl.w	r2, r3, r2
1a001756:	4918      	ldr	r1, [pc, #96]	; (1a0017b8 <prvAddCurrentTaskToDelayedList+0x84>)
1a001758:	680b      	ldr	r3, [r1, #0]
1a00175a:	ea23 0302 	bic.w	r3, r3, r2
1a00175e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001760:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001764:	d013      	beq.n	1a00178e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001766:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001768:	4b12      	ldr	r3, [pc, #72]	; (1a0017b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a00176a:	681b      	ldr	r3, [r3, #0]
1a00176c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00176e:	42a5      	cmp	r5, r4
1a001770:	d816      	bhi.n	1a0017a0 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001772:	4b12      	ldr	r3, [pc, #72]	; (1a0017bc <prvAddCurrentTaskToDelayedList+0x88>)
1a001774:	6818      	ldr	r0, [r3, #0]
1a001776:	4b0f      	ldr	r3, [pc, #60]	; (1a0017b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001778:	6819      	ldr	r1, [r3, #0]
1a00177a:	3104      	adds	r1, #4
1a00177c:	f7ff fe21 	bl	1a0013c2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001780:	4b0f      	ldr	r3, [pc, #60]	; (1a0017c0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001782:	681b      	ldr	r3, [r3, #0]
1a001784:	42a3      	cmp	r3, r4
1a001786:	d912      	bls.n	1a0017ae <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001788:	4b0d      	ldr	r3, [pc, #52]	; (1a0017c0 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00178a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a00178c:	e00f      	b.n	1a0017ae <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a00178e:	2e00      	cmp	r6, #0
1a001790:	d0e9      	beq.n	1a001766 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001792:	4b08      	ldr	r3, [pc, #32]	; (1a0017b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a001794:	6819      	ldr	r1, [r3, #0]
1a001796:	3104      	adds	r1, #4
1a001798:	480a      	ldr	r0, [pc, #40]	; (1a0017c4 <prvAddCurrentTaskToDelayedList+0x90>)
1a00179a:	f7ff fe06 	bl	1a0013aa <vListInsertEnd>
1a00179e:	e006      	b.n	1a0017ae <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0017a0:	4b09      	ldr	r3, [pc, #36]	; (1a0017c8 <prvAddCurrentTaskToDelayedList+0x94>)
1a0017a2:	6818      	ldr	r0, [r3, #0]
1a0017a4:	4b03      	ldr	r3, [pc, #12]	; (1a0017b4 <prvAddCurrentTaskToDelayedList+0x80>)
1a0017a6:	6819      	ldr	r1, [r3, #0]
1a0017a8:	3104      	adds	r1, #4
1a0017aa:	f7ff fe0a 	bl	1a0013c2 <vListInsert>
}
1a0017ae:	bd70      	pop	{r4, r5, r6, pc}
1a0017b0:	10002ab4 	.word	0x10002ab4
1a0017b4:	10002994 	.word	0x10002994
1a0017b8:	10002a40 	.word	0x10002a40
1a0017bc:	10002998 	.word	0x10002998
1a0017c0:	10002a6c 	.word	0x10002a6c
1a0017c4:	10002a8c 	.word	0x10002a8c
1a0017c8:	1000299c 	.word	0x1000299c

1a0017cc <xTaskCreateStatic>:
	{
1a0017cc:	b570      	push	{r4, r5, r6, lr}
1a0017ce:	b086      	sub	sp, #24
1a0017d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0017d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0017d4:	b945      	cbnz	r5, 1a0017e8 <xTaskCreateStatic+0x1c>
1a0017d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017da:	f383 8811 	msr	BASEPRI, r3
1a0017de:	f3bf 8f6f 	isb	sy
1a0017e2:	f3bf 8f4f 	dsb	sy
1a0017e6:	e7fe      	b.n	1a0017e6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0017e8:	b944      	cbnz	r4, 1a0017fc <xTaskCreateStatic+0x30>
1a0017ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017ee:	f383 8811 	msr	BASEPRI, r3
1a0017f2:	f3bf 8f6f 	isb	sy
1a0017f6:	f3bf 8f4f 	dsb	sy
1a0017fa:	e7fe      	b.n	1a0017fa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0017fc:	2660      	movs	r6, #96	; 0x60
1a0017fe:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001800:	9e04      	ldr	r6, [sp, #16]
1a001802:	2e60      	cmp	r6, #96	; 0x60
1a001804:	d008      	beq.n	1a001818 <xTaskCreateStatic+0x4c>
1a001806:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00180a:	f383 8811 	msr	BASEPRI, r3
1a00180e:	f3bf 8f6f 	isb	sy
1a001812:	f3bf 8f4f 	dsb	sy
1a001816:	e7fe      	b.n	1a001816 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001818:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a00181a:	2502      	movs	r5, #2
1a00181c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001820:	2500      	movs	r5, #0
1a001822:	9503      	str	r5, [sp, #12]
1a001824:	9402      	str	r4, [sp, #8]
1a001826:	ad05      	add	r5, sp, #20
1a001828:	9501      	str	r5, [sp, #4]
1a00182a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00182c:	9500      	str	r5, [sp, #0]
1a00182e:	f7ff fe57 	bl	1a0014e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001832:	4620      	mov	r0, r4
1a001834:	f7ff fed2 	bl	1a0015dc <prvAddNewTaskToReadyList>
	}
1a001838:	9805      	ldr	r0, [sp, #20]
1a00183a:	b006      	add	sp, #24
1a00183c:	bd70      	pop	{r4, r5, r6, pc}

1a00183e <xTaskCreate>:
	{
1a00183e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001842:	b085      	sub	sp, #20
1a001844:	4607      	mov	r7, r0
1a001846:	4688      	mov	r8, r1
1a001848:	4615      	mov	r5, r2
1a00184a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00184c:	0090      	lsls	r0, r2, #2
1a00184e:	f7ff f903 	bl	1a000a58 <pvPortMalloc>
			if( pxStack != NULL )
1a001852:	b308      	cbz	r0, 1a001898 <xTaskCreate+0x5a>
1a001854:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001856:	2060      	movs	r0, #96	; 0x60
1a001858:	f7ff f8fe 	bl	1a000a58 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a00185c:	4604      	mov	r4, r0
1a00185e:	b1b8      	cbz	r0, 1a001890 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001860:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001862:	b1e4      	cbz	r4, 1a00189e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001864:	2300      	movs	r3, #0
1a001866:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00186a:	9303      	str	r3, [sp, #12]
1a00186c:	9402      	str	r4, [sp, #8]
1a00186e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001870:	9301      	str	r3, [sp, #4]
1a001872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001874:	9300      	str	r3, [sp, #0]
1a001876:	464b      	mov	r3, r9
1a001878:	462a      	mov	r2, r5
1a00187a:	4641      	mov	r1, r8
1a00187c:	4638      	mov	r0, r7
1a00187e:	f7ff fe2f 	bl	1a0014e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001882:	4620      	mov	r0, r4
1a001884:	f7ff feaa 	bl	1a0015dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001888:	2001      	movs	r0, #1
	}
1a00188a:	b005      	add	sp, #20
1a00188c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001890:	4630      	mov	r0, r6
1a001892:	f7ff f96f 	bl	1a000b74 <vPortFree>
1a001896:	e7e4      	b.n	1a001862 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00189c:	e7f5      	b.n	1a00188a <xTaskCreate+0x4c>
1a00189e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0018a2:	e7f2      	b.n	1a00188a <xTaskCreate+0x4c>

1a0018a4 <vTaskStartScheduler>:
{
1a0018a4:	b510      	push	{r4, lr}
1a0018a6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a0018a8:	2400      	movs	r4, #0
1a0018aa:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a0018ac:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a0018ae:	aa07      	add	r2, sp, #28
1a0018b0:	a906      	add	r1, sp, #24
1a0018b2:	a805      	add	r0, sp, #20
1a0018b4:	f7ff fdb4 	bl	1a001420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a0018b8:	9b05      	ldr	r3, [sp, #20]
1a0018ba:	9302      	str	r3, [sp, #8]
1a0018bc:	9b06      	ldr	r3, [sp, #24]
1a0018be:	9301      	str	r3, [sp, #4]
1a0018c0:	9400      	str	r4, [sp, #0]
1a0018c2:	4623      	mov	r3, r4
1a0018c4:	9a07      	ldr	r2, [sp, #28]
1a0018c6:	4917      	ldr	r1, [pc, #92]	; (1a001924 <vTaskStartScheduler+0x80>)
1a0018c8:	4817      	ldr	r0, [pc, #92]	; (1a001928 <vTaskStartScheduler+0x84>)
1a0018ca:	f7ff ff7f 	bl	1a0017cc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0018ce:	b140      	cbz	r0, 1a0018e2 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0018d0:	f000 fbe2 	bl	1a002098 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0018d4:	2801      	cmp	r0, #1
1a0018d6:	d006      	beq.n	1a0018e6 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0018d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0018dc:	d018      	beq.n	1a001910 <vTaskStartScheduler+0x6c>
}
1a0018de:	b008      	add	sp, #32
1a0018e0:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0018e2:	2000      	movs	r0, #0
1a0018e4:	e7f6      	b.n	1a0018d4 <vTaskStartScheduler+0x30>
1a0018e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ea:	f383 8811 	msr	BASEPRI, r3
1a0018ee:	f3bf 8f6f 	isb	sy
1a0018f2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0018f6:	4b0d      	ldr	r3, [pc, #52]	; (1a00192c <vTaskStartScheduler+0x88>)
1a0018f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0018fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0018fe:	4b0c      	ldr	r3, [pc, #48]	; (1a001930 <vTaskStartScheduler+0x8c>)
1a001900:	2201      	movs	r2, #1
1a001902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001904:	4b0b      	ldr	r3, [pc, #44]	; (1a001934 <vTaskStartScheduler+0x90>)
1a001906:	2200      	movs	r2, #0
1a001908:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a00190a:	f000 fead 	bl	1a002668 <xPortStartScheduler>
1a00190e:	e7e6      	b.n	1a0018de <vTaskStartScheduler+0x3a>
1a001910:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001914:	f383 8811 	msr	BASEPRI, r3
1a001918:	f3bf 8f6f 	isb	sy
1a00191c:	f3bf 8f4f 	dsb	sy
1a001920:	e7fe      	b.n	1a001920 <vTaskStartScheduler+0x7c>
1a001922:	bf00      	nop
1a001924:	1a005008 	.word	0x1a005008
1a001928:	1a00170d 	.word	0x1a00170d
1a00192c:	10002a6c 	.word	0x10002a6c
1a001930:	10002a88 	.word	0x10002a88
1a001934:	10002ab4 	.word	0x10002ab4

1a001938 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001938:	4a02      	ldr	r2, [pc, #8]	; (1a001944 <vTaskSuspendAll+0xc>)
1a00193a:	6813      	ldr	r3, [r2, #0]
1a00193c:	3301      	adds	r3, #1
1a00193e:	6013      	str	r3, [r2, #0]
}
1a001940:	4770      	bx	lr
1a001942:	bf00      	nop
1a001944:	10002a38 	.word	0x10002a38

1a001948 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001948:	4b01      	ldr	r3, [pc, #4]	; (1a001950 <xTaskGetTickCount+0x8>)
1a00194a:	6818      	ldr	r0, [r3, #0]
}
1a00194c:	4770      	bx	lr
1a00194e:	bf00      	nop
1a001950:	10002ab4 	.word	0x10002ab4

1a001954 <xTaskIncrementTick>:
{
1a001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001956:	4b3a      	ldr	r3, [pc, #232]	; (1a001a40 <xTaskIncrementTick+0xec>)
1a001958:	681b      	ldr	r3, [r3, #0]
1a00195a:	2b00      	cmp	r3, #0
1a00195c:	d164      	bne.n	1a001a28 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a00195e:	4b39      	ldr	r3, [pc, #228]	; (1a001a44 <xTaskIncrementTick+0xf0>)
1a001960:	681d      	ldr	r5, [r3, #0]
1a001962:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001964:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001966:	b9c5      	cbnz	r5, 1a00199a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001968:	4b37      	ldr	r3, [pc, #220]	; (1a001a48 <xTaskIncrementTick+0xf4>)
1a00196a:	681b      	ldr	r3, [r3, #0]
1a00196c:	681b      	ldr	r3, [r3, #0]
1a00196e:	b143      	cbz	r3, 1a001982 <xTaskIncrementTick+0x2e>
1a001970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001974:	f383 8811 	msr	BASEPRI, r3
1a001978:	f3bf 8f6f 	isb	sy
1a00197c:	f3bf 8f4f 	dsb	sy
1a001980:	e7fe      	b.n	1a001980 <xTaskIncrementTick+0x2c>
1a001982:	4a31      	ldr	r2, [pc, #196]	; (1a001a48 <xTaskIncrementTick+0xf4>)
1a001984:	6811      	ldr	r1, [r2, #0]
1a001986:	4b31      	ldr	r3, [pc, #196]	; (1a001a4c <xTaskIncrementTick+0xf8>)
1a001988:	6818      	ldr	r0, [r3, #0]
1a00198a:	6010      	str	r0, [r2, #0]
1a00198c:	6019      	str	r1, [r3, #0]
1a00198e:	4a30      	ldr	r2, [pc, #192]	; (1a001a50 <xTaskIncrementTick+0xfc>)
1a001990:	6813      	ldr	r3, [r2, #0]
1a001992:	3301      	adds	r3, #1
1a001994:	6013      	str	r3, [r2, #0]
1a001996:	f7ff fd8d 	bl	1a0014b4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00199a:	4b2e      	ldr	r3, [pc, #184]	; (1a001a54 <xTaskIncrementTick+0x100>)
1a00199c:	681b      	ldr	r3, [r3, #0]
1a00199e:	42ab      	cmp	r3, r5
1a0019a0:	d938      	bls.n	1a001a14 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0019a2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0019a4:	4b2c      	ldr	r3, [pc, #176]	; (1a001a58 <xTaskIncrementTick+0x104>)
1a0019a6:	681b      	ldr	r3, [r3, #0]
1a0019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0019aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019ae:	009a      	lsls	r2, r3, #2
1a0019b0:	4b2a      	ldr	r3, [pc, #168]	; (1a001a5c <xTaskIncrementTick+0x108>)
1a0019b2:	589b      	ldr	r3, [r3, r2]
1a0019b4:	2b01      	cmp	r3, #1
1a0019b6:	d93c      	bls.n	1a001a32 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a0019b8:	2401      	movs	r4, #1
1a0019ba:	e03a      	b.n	1a001a32 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a0019bc:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0019be:	4b22      	ldr	r3, [pc, #136]	; (1a001a48 <xTaskIncrementTick+0xf4>)
1a0019c0:	681b      	ldr	r3, [r3, #0]
1a0019c2:	681b      	ldr	r3, [r3, #0]
1a0019c4:	b343      	cbz	r3, 1a001a18 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0019c6:	4b20      	ldr	r3, [pc, #128]	; (1a001a48 <xTaskIncrementTick+0xf4>)
1a0019c8:	681b      	ldr	r3, [r3, #0]
1a0019ca:	68db      	ldr	r3, [r3, #12]
1a0019cc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a0019ce:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a0019d0:	429d      	cmp	r5, r3
1a0019d2:	d326      	bcc.n	1a001a22 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0019d4:	1d37      	adds	r7, r6, #4
1a0019d6:	4638      	mov	r0, r7
1a0019d8:	f7ff fd0d 	bl	1a0013f6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a0019dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a0019de:	b11b      	cbz	r3, 1a0019e8 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a0019e0:	f106 0018 	add.w	r0, r6, #24
1a0019e4:	f7ff fd07 	bl	1a0013f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a0019e8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0019ea:	2201      	movs	r2, #1
1a0019ec:	409a      	lsls	r2, r3
1a0019ee:	491c      	ldr	r1, [pc, #112]	; (1a001a60 <xTaskIncrementTick+0x10c>)
1a0019f0:	6808      	ldr	r0, [r1, #0]
1a0019f2:	4302      	orrs	r2, r0
1a0019f4:	600a      	str	r2, [r1, #0]
1a0019f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019fa:	009a      	lsls	r2, r3, #2
1a0019fc:	4639      	mov	r1, r7
1a0019fe:	4817      	ldr	r0, [pc, #92]	; (1a001a5c <xTaskIncrementTick+0x108>)
1a001a00:	4410      	add	r0, r2
1a001a02:	f7ff fcd2 	bl	1a0013aa <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001a06:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001a08:	4b13      	ldr	r3, [pc, #76]	; (1a001a58 <xTaskIncrementTick+0x104>)
1a001a0a:	681b      	ldr	r3, [r3, #0]
1a001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a0e:	429a      	cmp	r2, r3
1a001a10:	d2d4      	bcs.n	1a0019bc <xTaskIncrementTick+0x68>
1a001a12:	e7d4      	b.n	1a0019be <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001a14:	2400      	movs	r4, #0
1a001a16:	e7d2      	b.n	1a0019be <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a18:	4b0e      	ldr	r3, [pc, #56]	; (1a001a54 <xTaskIncrementTick+0x100>)
1a001a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a1e:	601a      	str	r2, [r3, #0]
					break;
1a001a20:	e7c0      	b.n	1a0019a4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001a22:	4a0c      	ldr	r2, [pc, #48]	; (1a001a54 <xTaskIncrementTick+0x100>)
1a001a24:	6013      	str	r3, [r2, #0]
						break;
1a001a26:	e7bd      	b.n	1a0019a4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001a28:	4a0e      	ldr	r2, [pc, #56]	; (1a001a64 <xTaskIncrementTick+0x110>)
1a001a2a:	6813      	ldr	r3, [r2, #0]
1a001a2c:	3301      	adds	r3, #1
1a001a2e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001a30:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001a32:	4b0d      	ldr	r3, [pc, #52]	; (1a001a68 <xTaskIncrementTick+0x114>)
1a001a34:	681b      	ldr	r3, [r3, #0]
1a001a36:	b103      	cbz	r3, 1a001a3a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001a38:	2401      	movs	r4, #1
}
1a001a3a:	4620      	mov	r0, r4
1a001a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001a3e:	bf00      	nop
1a001a40:	10002a38 	.word	0x10002a38
1a001a44:	10002ab4 	.word	0x10002ab4
1a001a48:	10002998 	.word	0x10002998
1a001a4c:	1000299c 	.word	0x1000299c
1a001a50:	10002a70 	.word	0x10002a70
1a001a54:	10002a6c 	.word	0x10002a6c
1a001a58:	10002994 	.word	0x10002994
1a001a5c:	100029a0 	.word	0x100029a0
1a001a60:	10002a40 	.word	0x10002a40
1a001a64:	10002a34 	.word	0x10002a34
1a001a68:	10002ab8 	.word	0x10002ab8

1a001a6c <xTaskResumeAll>:
{
1a001a6c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001a6e:	4b33      	ldr	r3, [pc, #204]	; (1a001b3c <xTaskResumeAll+0xd0>)
1a001a70:	681b      	ldr	r3, [r3, #0]
1a001a72:	b943      	cbnz	r3, 1a001a86 <xTaskResumeAll+0x1a>
1a001a74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a78:	f383 8811 	msr	BASEPRI, r3
1a001a7c:	f3bf 8f6f 	isb	sy
1a001a80:	f3bf 8f4f 	dsb	sy
1a001a84:	e7fe      	b.n	1a001a84 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001a86:	f000 fd4d 	bl	1a002524 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001a8a:	4b2c      	ldr	r3, [pc, #176]	; (1a001b3c <xTaskResumeAll+0xd0>)
1a001a8c:	681a      	ldr	r2, [r3, #0]
1a001a8e:	3a01      	subs	r2, #1
1a001a90:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001a92:	681b      	ldr	r3, [r3, #0]
1a001a94:	2b00      	cmp	r3, #0
1a001a96:	d14d      	bne.n	1a001b34 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001a98:	4b29      	ldr	r3, [pc, #164]	; (1a001b40 <xTaskResumeAll+0xd4>)
1a001a9a:	681b      	ldr	r3, [r3, #0]
1a001a9c:	b923      	cbnz	r3, 1a001aa8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001a9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001aa0:	f000 fd62 	bl	1a002568 <vPortExitCritical>
}
1a001aa4:	4620      	mov	r0, r4
1a001aa6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001aa8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001aaa:	4b26      	ldr	r3, [pc, #152]	; (1a001b44 <xTaskResumeAll+0xd8>)
1a001aac:	681b      	ldr	r3, [r3, #0]
1a001aae:	b31b      	cbz	r3, 1a001af8 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001ab0:	4b24      	ldr	r3, [pc, #144]	; (1a001b44 <xTaskResumeAll+0xd8>)
1a001ab2:	68db      	ldr	r3, [r3, #12]
1a001ab4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001ab6:	f104 0018 	add.w	r0, r4, #24
1a001aba:	f7ff fc9c 	bl	1a0013f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001abe:	1d25      	adds	r5, r4, #4
1a001ac0:	4628      	mov	r0, r5
1a001ac2:	f7ff fc98 	bl	1a0013f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001ac8:	2201      	movs	r2, #1
1a001aca:	409a      	lsls	r2, r3
1a001acc:	491e      	ldr	r1, [pc, #120]	; (1a001b48 <xTaskResumeAll+0xdc>)
1a001ace:	6808      	ldr	r0, [r1, #0]
1a001ad0:	4302      	orrs	r2, r0
1a001ad2:	600a      	str	r2, [r1, #0]
1a001ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ad8:	009a      	lsls	r2, r3, #2
1a001ada:	4629      	mov	r1, r5
1a001adc:	481b      	ldr	r0, [pc, #108]	; (1a001b4c <xTaskResumeAll+0xe0>)
1a001ade:	4410      	add	r0, r2
1a001ae0:	f7ff fc63 	bl	1a0013aa <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001ae4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001ae6:	4b1a      	ldr	r3, [pc, #104]	; (1a001b50 <xTaskResumeAll+0xe4>)
1a001ae8:	681b      	ldr	r3, [r3, #0]
1a001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001aec:	429a      	cmp	r2, r3
1a001aee:	d3dc      	bcc.n	1a001aaa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001af0:	4b18      	ldr	r3, [pc, #96]	; (1a001b54 <xTaskResumeAll+0xe8>)
1a001af2:	2201      	movs	r2, #1
1a001af4:	601a      	str	r2, [r3, #0]
1a001af6:	e7d8      	b.n	1a001aaa <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001af8:	b10c      	cbz	r4, 1a001afe <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001afa:	f7ff fcdb 	bl	1a0014b4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001afe:	4b16      	ldr	r3, [pc, #88]	; (1a001b58 <xTaskResumeAll+0xec>)
1a001b00:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001b02:	b154      	cbz	r4, 1a001b1a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001b04:	f7ff ff26 	bl	1a001954 <xTaskIncrementTick>
1a001b08:	b110      	cbz	r0, 1a001b10 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001b0a:	4b12      	ldr	r3, [pc, #72]	; (1a001b54 <xTaskResumeAll+0xe8>)
1a001b0c:	2201      	movs	r2, #1
1a001b0e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001b10:	3c01      	subs	r4, #1
1a001b12:	d1f7      	bne.n	1a001b04 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001b14:	4b10      	ldr	r3, [pc, #64]	; (1a001b58 <xTaskResumeAll+0xec>)
1a001b16:	2200      	movs	r2, #0
1a001b18:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001b1a:	4b0e      	ldr	r3, [pc, #56]	; (1a001b54 <xTaskResumeAll+0xe8>)
1a001b1c:	681b      	ldr	r3, [r3, #0]
1a001b1e:	b15b      	cbz	r3, 1a001b38 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001b20:	4b0e      	ldr	r3, [pc, #56]	; (1a001b5c <xTaskResumeAll+0xf0>)
1a001b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b26:	601a      	str	r2, [r3, #0]
1a001b28:	f3bf 8f4f 	dsb	sy
1a001b2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001b30:	2401      	movs	r4, #1
1a001b32:	e7b5      	b.n	1a001aa0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001b34:	2400      	movs	r4, #0
1a001b36:	e7b3      	b.n	1a001aa0 <xTaskResumeAll+0x34>
1a001b38:	2400      	movs	r4, #0
1a001b3a:	e7b1      	b.n	1a001aa0 <xTaskResumeAll+0x34>
1a001b3c:	10002a38 	.word	0x10002a38
1a001b40:	10002a2c 	.word	0x10002a2c
1a001b44:	10002a74 	.word	0x10002a74
1a001b48:	10002a40 	.word	0x10002a40
1a001b4c:	100029a0 	.word	0x100029a0
1a001b50:	10002994 	.word	0x10002994
1a001b54:	10002ab8 	.word	0x10002ab8
1a001b58:	10002a34 	.word	0x10002a34
1a001b5c:	e000ed04 	.word	0xe000ed04

1a001b60 <vTaskDelayUntil>:
	{
1a001b60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001b62:	b150      	cbz	r0, 1a001b7a <vTaskDelayUntil+0x1a>
1a001b64:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001b66:	b989      	cbnz	r1, 1a001b8c <vTaskDelayUntil+0x2c>
1a001b68:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b6c:	f383 8811 	msr	BASEPRI, r3
1a001b70:	f3bf 8f6f 	isb	sy
1a001b74:	f3bf 8f4f 	dsb	sy
1a001b78:	e7fe      	b.n	1a001b78 <vTaskDelayUntil+0x18>
1a001b7a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b7e:	f383 8811 	msr	BASEPRI, r3
1a001b82:	f3bf 8f6f 	isb	sy
1a001b86:	f3bf 8f4f 	dsb	sy
1a001b8a:	e7fe      	b.n	1a001b8a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001b8c:	4b1a      	ldr	r3, [pc, #104]	; (1a001bf8 <vTaskDelayUntil+0x98>)
1a001b8e:	681b      	ldr	r3, [r3, #0]
1a001b90:	b143      	cbz	r3, 1a001ba4 <vTaskDelayUntil+0x44>
1a001b92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b96:	f383 8811 	msr	BASEPRI, r3
1a001b9a:	f3bf 8f6f 	isb	sy
1a001b9e:	f3bf 8f4f 	dsb	sy
1a001ba2:	e7fe      	b.n	1a001ba2 <vTaskDelayUntil+0x42>
1a001ba4:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001ba6:	f7ff fec7 	bl	1a001938 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001baa:	4b14      	ldr	r3, [pc, #80]	; (1a001bfc <vTaskDelayUntil+0x9c>)
1a001bac:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001bae:	682a      	ldr	r2, [r5, #0]
1a001bb0:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001bb2:	4282      	cmp	r2, r0
1a001bb4:	d918      	bls.n	1a001be8 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001bb6:	42a2      	cmp	r2, r4
1a001bb8:	d80c      	bhi.n	1a001bd4 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001bba:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001bbc:	f7ff ff56 	bl	1a001a6c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001bc0:	b938      	cbnz	r0, 1a001bd2 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a001bc2:	4b0f      	ldr	r3, [pc, #60]	; (1a001c00 <vTaskDelayUntil+0xa0>)
1a001bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001bc8:	601a      	str	r2, [r3, #0]
1a001bca:	f3bf 8f4f 	dsb	sy
1a001bce:	f3bf 8f6f 	isb	sy
	}
1a001bd2:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001bd4:	42a0      	cmp	r0, r4
1a001bd6:	d301      	bcc.n	1a001bdc <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001bd8:	602c      	str	r4, [r5, #0]
1a001bda:	e7ef      	b.n	1a001bbc <vTaskDelayUntil+0x5c>
1a001bdc:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001bde:	2100      	movs	r1, #0
1a001be0:	1a20      	subs	r0, r4, r0
1a001be2:	f7ff fda7 	bl	1a001734 <prvAddCurrentTaskToDelayedList>
1a001be6:	e7e9      	b.n	1a001bbc <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001be8:	42a2      	cmp	r2, r4
1a001bea:	d801      	bhi.n	1a001bf0 <vTaskDelayUntil+0x90>
1a001bec:	42a0      	cmp	r0, r4
1a001bee:	d201      	bcs.n	1a001bf4 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001bf0:	602c      	str	r4, [r5, #0]
1a001bf2:	e7f4      	b.n	1a001bde <vTaskDelayUntil+0x7e>
1a001bf4:	602c      	str	r4, [r5, #0]
1a001bf6:	e7e1      	b.n	1a001bbc <vTaskDelayUntil+0x5c>
1a001bf8:	10002a38 	.word	0x10002a38
1a001bfc:	10002ab4 	.word	0x10002ab4
1a001c00:	e000ed04 	.word	0xe000ed04

1a001c04 <vTaskDelay>:
	{
1a001c04:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001c06:	b1a8      	cbz	r0, 1a001c34 <vTaskDelay+0x30>
1a001c08:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001c0a:	4b0f      	ldr	r3, [pc, #60]	; (1a001c48 <vTaskDelay+0x44>)
1a001c0c:	681b      	ldr	r3, [r3, #0]
1a001c0e:	b143      	cbz	r3, 1a001c22 <vTaskDelay+0x1e>
1a001c10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c14:	f383 8811 	msr	BASEPRI, r3
1a001c18:	f3bf 8f6f 	isb	sy
1a001c1c:	f3bf 8f4f 	dsb	sy
1a001c20:	e7fe      	b.n	1a001c20 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001c22:	f7ff fe89 	bl	1a001938 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001c26:	2100      	movs	r1, #0
1a001c28:	4620      	mov	r0, r4
1a001c2a:	f7ff fd83 	bl	1a001734 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001c2e:	f7ff ff1d 	bl	1a001a6c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001c32:	b938      	cbnz	r0, 1a001c44 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001c34:	4b05      	ldr	r3, [pc, #20]	; (1a001c4c <vTaskDelay+0x48>)
1a001c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c3a:	601a      	str	r2, [r3, #0]
1a001c3c:	f3bf 8f4f 	dsb	sy
1a001c40:	f3bf 8f6f 	isb	sy
	}
1a001c44:	bd10      	pop	{r4, pc}
1a001c46:	bf00      	nop
1a001c48:	10002a38 	.word	0x10002a38
1a001c4c:	e000ed04 	.word	0xe000ed04

1a001c50 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001c50:	4b2c      	ldr	r3, [pc, #176]	; (1a001d04 <vTaskSwitchContext+0xb4>)
1a001c52:	681b      	ldr	r3, [r3, #0]
1a001c54:	b11b      	cbz	r3, 1a001c5e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001c56:	4b2c      	ldr	r3, [pc, #176]	; (1a001d08 <vTaskSwitchContext+0xb8>)
1a001c58:	2201      	movs	r2, #1
1a001c5a:	601a      	str	r2, [r3, #0]
1a001c5c:	4770      	bx	lr
{
1a001c5e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001c60:	4b29      	ldr	r3, [pc, #164]	; (1a001d08 <vTaskSwitchContext+0xb8>)
1a001c62:	2200      	movs	r2, #0
1a001c64:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001c66:	4b29      	ldr	r3, [pc, #164]	; (1a001d0c <vTaskSwitchContext+0xbc>)
1a001c68:	681b      	ldr	r3, [r3, #0]
1a001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001c6c:	681a      	ldr	r2, [r3, #0]
1a001c6e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001c72:	d103      	bne.n	1a001c7c <vTaskSwitchContext+0x2c>
1a001c74:	685a      	ldr	r2, [r3, #4]
1a001c76:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001c7a:	d01b      	beq.n	1a001cb4 <vTaskSwitchContext+0x64>
1a001c7c:	4b23      	ldr	r3, [pc, #140]	; (1a001d0c <vTaskSwitchContext+0xbc>)
1a001c7e:	6818      	ldr	r0, [r3, #0]
1a001c80:	6819      	ldr	r1, [r3, #0]
1a001c82:	3134      	adds	r1, #52	; 0x34
1a001c84:	f7ff fc08 	bl	1a001498 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001c88:	4b21      	ldr	r3, [pc, #132]	; (1a001d10 <vTaskSwitchContext+0xc0>)
1a001c8a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001c8c:	fab3 f383 	clz	r3, r3
1a001c90:	b2db      	uxtb	r3, r3
1a001c92:	f1c3 031f 	rsb	r3, r3, #31
1a001c96:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001c9a:	008a      	lsls	r2, r1, #2
1a001c9c:	491d      	ldr	r1, [pc, #116]	; (1a001d14 <vTaskSwitchContext+0xc4>)
1a001c9e:	588a      	ldr	r2, [r1, r2]
1a001ca0:	b98a      	cbnz	r2, 1a001cc6 <vTaskSwitchContext+0x76>
	__asm volatile
1a001ca2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ca6:	f383 8811 	msr	BASEPRI, r3
1a001caa:	f3bf 8f6f 	isb	sy
1a001cae:	f3bf 8f4f 	dsb	sy
1a001cb2:	e7fe      	b.n	1a001cb2 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001cb4:	689a      	ldr	r2, [r3, #8]
1a001cb6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cba:	d1df      	bne.n	1a001c7c <vTaskSwitchContext+0x2c>
1a001cbc:	68db      	ldr	r3, [r3, #12]
1a001cbe:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001cc2:	d1db      	bne.n	1a001c7c <vTaskSwitchContext+0x2c>
1a001cc4:	e7e0      	b.n	1a001c88 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001cc6:	4813      	ldr	r0, [pc, #76]	; (1a001d14 <vTaskSwitchContext+0xc4>)
1a001cc8:	009a      	lsls	r2, r3, #2
1a001cca:	18d4      	adds	r4, r2, r3
1a001ccc:	00a1      	lsls	r1, r4, #2
1a001cce:	4401      	add	r1, r0
1a001cd0:	684c      	ldr	r4, [r1, #4]
1a001cd2:	6864      	ldr	r4, [r4, #4]
1a001cd4:	604c      	str	r4, [r1, #4]
1a001cd6:	441a      	add	r2, r3
1a001cd8:	0091      	lsls	r1, r2, #2
1a001cda:	3108      	adds	r1, #8
1a001cdc:	4408      	add	r0, r1
1a001cde:	4284      	cmp	r4, r0
1a001ce0:	d009      	beq.n	1a001cf6 <vTaskSwitchContext+0xa6>
1a001ce2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ce6:	009a      	lsls	r2, r3, #2
1a001ce8:	4b0a      	ldr	r3, [pc, #40]	; (1a001d14 <vTaskSwitchContext+0xc4>)
1a001cea:	4413      	add	r3, r2
1a001cec:	685b      	ldr	r3, [r3, #4]
1a001cee:	68da      	ldr	r2, [r3, #12]
1a001cf0:	4b06      	ldr	r3, [pc, #24]	; (1a001d0c <vTaskSwitchContext+0xbc>)
1a001cf2:	601a      	str	r2, [r3, #0]
}
1a001cf4:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001cf6:	6861      	ldr	r1, [r4, #4]
1a001cf8:	4806      	ldr	r0, [pc, #24]	; (1a001d14 <vTaskSwitchContext+0xc4>)
1a001cfa:	2214      	movs	r2, #20
1a001cfc:	fb02 0203 	mla	r2, r2, r3, r0
1a001d00:	6051      	str	r1, [r2, #4]
1a001d02:	e7ee      	b.n	1a001ce2 <vTaskSwitchContext+0x92>
1a001d04:	10002a38 	.word	0x10002a38
1a001d08:	10002ab8 	.word	0x10002ab8
1a001d0c:	10002994 	.word	0x10002994
1a001d10:	10002a40 	.word	0x10002a40
1a001d14:	100029a0 	.word	0x100029a0

1a001d18 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001d18:	b940      	cbnz	r0, 1a001d2c <vTaskPlaceOnEventList+0x14>
1a001d1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d1e:	f383 8811 	msr	BASEPRI, r3
1a001d22:	f3bf 8f6f 	isb	sy
1a001d26:	f3bf 8f4f 	dsb	sy
1a001d2a:	e7fe      	b.n	1a001d2a <vTaskPlaceOnEventList+0x12>
{
1a001d2c:	b510      	push	{r4, lr}
1a001d2e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001d30:	4b04      	ldr	r3, [pc, #16]	; (1a001d44 <vTaskPlaceOnEventList+0x2c>)
1a001d32:	6819      	ldr	r1, [r3, #0]
1a001d34:	3118      	adds	r1, #24
1a001d36:	f7ff fb44 	bl	1a0013c2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001d3a:	2101      	movs	r1, #1
1a001d3c:	4620      	mov	r0, r4
1a001d3e:	f7ff fcf9 	bl	1a001734 <prvAddCurrentTaskToDelayedList>
}
1a001d42:	bd10      	pop	{r4, pc}
1a001d44:	10002994 	.word	0x10002994

1a001d48 <vTaskPlaceOnEventListRestricted>:
	{
1a001d48:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001d4a:	b940      	cbnz	r0, 1a001d5e <vTaskPlaceOnEventListRestricted+0x16>
1a001d4c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d50:	f383 8811 	msr	BASEPRI, r3
1a001d54:	f3bf 8f6f 	isb	sy
1a001d58:	f3bf 8f4f 	dsb	sy
1a001d5c:	e7fe      	b.n	1a001d5c <vTaskPlaceOnEventListRestricted+0x14>
1a001d5e:	460c      	mov	r4, r1
1a001d60:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001d62:	4a06      	ldr	r2, [pc, #24]	; (1a001d7c <vTaskPlaceOnEventListRestricted+0x34>)
1a001d64:	6811      	ldr	r1, [r2, #0]
1a001d66:	3118      	adds	r1, #24
1a001d68:	f7ff fb1f 	bl	1a0013aa <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001d6c:	b10d      	cbz	r5, 1a001d72 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001d6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001d72:	4629      	mov	r1, r5
1a001d74:	4620      	mov	r0, r4
1a001d76:	f7ff fcdd 	bl	1a001734 <prvAddCurrentTaskToDelayedList>
	}
1a001d7a:	bd38      	pop	{r3, r4, r5, pc}
1a001d7c:	10002994 	.word	0x10002994

1a001d80 <xTaskRemoveFromEventList>:
{
1a001d80:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001d82:	68c3      	ldr	r3, [r0, #12]
1a001d84:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001d86:	b944      	cbnz	r4, 1a001d9a <xTaskRemoveFromEventList+0x1a>
1a001d88:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d8c:	f383 8811 	msr	BASEPRI, r3
1a001d90:	f3bf 8f6f 	isb	sy
1a001d94:	f3bf 8f4f 	dsb	sy
1a001d98:	e7fe      	b.n	1a001d98 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001d9a:	f104 0518 	add.w	r5, r4, #24
1a001d9e:	4628      	mov	r0, r5
1a001da0:	f7ff fb29 	bl	1a0013f6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001da4:	4b13      	ldr	r3, [pc, #76]	; (1a001df4 <xTaskRemoveFromEventList+0x74>)
1a001da6:	681b      	ldr	r3, [r3, #0]
1a001da8:	b9e3      	cbnz	r3, 1a001de4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001daa:	1d25      	adds	r5, r4, #4
1a001dac:	4628      	mov	r0, r5
1a001dae:	f7ff fb22 	bl	1a0013f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001db4:	2201      	movs	r2, #1
1a001db6:	409a      	lsls	r2, r3
1a001db8:	490f      	ldr	r1, [pc, #60]	; (1a001df8 <xTaskRemoveFromEventList+0x78>)
1a001dba:	6808      	ldr	r0, [r1, #0]
1a001dbc:	4302      	orrs	r2, r0
1a001dbe:	600a      	str	r2, [r1, #0]
1a001dc0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001dc4:	009a      	lsls	r2, r3, #2
1a001dc6:	4629      	mov	r1, r5
1a001dc8:	480c      	ldr	r0, [pc, #48]	; (1a001dfc <xTaskRemoveFromEventList+0x7c>)
1a001dca:	4410      	add	r0, r2
1a001dcc:	f7ff faed 	bl	1a0013aa <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001dd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001dd2:	4b0b      	ldr	r3, [pc, #44]	; (1a001e00 <xTaskRemoveFromEventList+0x80>)
1a001dd4:	681b      	ldr	r3, [r3, #0]
1a001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001dd8:	429a      	cmp	r2, r3
1a001dda:	d908      	bls.n	1a001dee <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001ddc:	2001      	movs	r0, #1
1a001dde:	4b09      	ldr	r3, [pc, #36]	; (1a001e04 <xTaskRemoveFromEventList+0x84>)
1a001de0:	6018      	str	r0, [r3, #0]
}
1a001de2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001de4:	4629      	mov	r1, r5
1a001de6:	4808      	ldr	r0, [pc, #32]	; (1a001e08 <xTaskRemoveFromEventList+0x88>)
1a001de8:	f7ff fadf 	bl	1a0013aa <vListInsertEnd>
1a001dec:	e7f0      	b.n	1a001dd0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001dee:	2000      	movs	r0, #0
	return xReturn;
1a001df0:	e7f7      	b.n	1a001de2 <xTaskRemoveFromEventList+0x62>
1a001df2:	bf00      	nop
1a001df4:	10002a38 	.word	0x10002a38
1a001df8:	10002a40 	.word	0x10002a40
1a001dfc:	100029a0 	.word	0x100029a0
1a001e00:	10002994 	.word	0x10002994
1a001e04:	10002ab8 	.word	0x10002ab8
1a001e08:	10002a74 	.word	0x10002a74

1a001e0c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001e0c:	4b03      	ldr	r3, [pc, #12]	; (1a001e1c <vTaskInternalSetTimeOutState+0x10>)
1a001e0e:	681b      	ldr	r3, [r3, #0]
1a001e10:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001e12:	4b03      	ldr	r3, [pc, #12]	; (1a001e20 <vTaskInternalSetTimeOutState+0x14>)
1a001e14:	681b      	ldr	r3, [r3, #0]
1a001e16:	6043      	str	r3, [r0, #4]
}
1a001e18:	4770      	bx	lr
1a001e1a:	bf00      	nop
1a001e1c:	10002a70 	.word	0x10002a70
1a001e20:	10002ab4 	.word	0x10002ab4

1a001e24 <xTaskCheckForTimeOut>:
{
1a001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001e26:	b150      	cbz	r0, 1a001e3e <xTaskCheckForTimeOut+0x1a>
1a001e28:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001e2a:	b989      	cbnz	r1, 1a001e50 <xTaskCheckForTimeOut+0x2c>
1a001e2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e30:	f383 8811 	msr	BASEPRI, r3
1a001e34:	f3bf 8f6f 	isb	sy
1a001e38:	f3bf 8f4f 	dsb	sy
1a001e3c:	e7fe      	b.n	1a001e3c <xTaskCheckForTimeOut+0x18>
1a001e3e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e42:	f383 8811 	msr	BASEPRI, r3
1a001e46:	f3bf 8f6f 	isb	sy
1a001e4a:	f3bf 8f4f 	dsb	sy
1a001e4e:	e7fe      	b.n	1a001e4e <xTaskCheckForTimeOut+0x2a>
1a001e50:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001e52:	f000 fb67 	bl	1a002524 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001e56:	4b11      	ldr	r3, [pc, #68]	; (1a001e9c <xTaskCheckForTimeOut+0x78>)
1a001e58:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001e5a:	6868      	ldr	r0, [r5, #4]
1a001e5c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001e5e:	6823      	ldr	r3, [r4, #0]
1a001e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001e64:	d016      	beq.n	1a001e94 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001e66:	682f      	ldr	r7, [r5, #0]
1a001e68:	4e0d      	ldr	r6, [pc, #52]	; (1a001ea0 <xTaskCheckForTimeOut+0x7c>)
1a001e6a:	6836      	ldr	r6, [r6, #0]
1a001e6c:	42b7      	cmp	r7, r6
1a001e6e:	d001      	beq.n	1a001e74 <xTaskCheckForTimeOut+0x50>
1a001e70:	4288      	cmp	r0, r1
1a001e72:	d911      	bls.n	1a001e98 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001e74:	4293      	cmp	r3, r2
1a001e76:	d803      	bhi.n	1a001e80 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001e78:	2300      	movs	r3, #0
1a001e7a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001e7c:	2401      	movs	r4, #1
1a001e7e:	e005      	b.n	1a001e8c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001e80:	1a9b      	subs	r3, r3, r2
1a001e82:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001e84:	4628      	mov	r0, r5
1a001e86:	f7ff ffc1 	bl	1a001e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001e8a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001e8c:	f000 fb6c 	bl	1a002568 <vPortExitCritical>
}
1a001e90:	4620      	mov	r0, r4
1a001e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001e94:	2400      	movs	r4, #0
1a001e96:	e7f9      	b.n	1a001e8c <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001e98:	2401      	movs	r4, #1
1a001e9a:	e7f7      	b.n	1a001e8c <xTaskCheckForTimeOut+0x68>
1a001e9c:	10002ab4 	.word	0x10002ab4
1a001ea0:	10002a70 	.word	0x10002a70

1a001ea4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001ea4:	4b01      	ldr	r3, [pc, #4]	; (1a001eac <vTaskMissedYield+0x8>)
1a001ea6:	2201      	movs	r2, #1
1a001ea8:	601a      	str	r2, [r3, #0]
}
1a001eaa:	4770      	bx	lr
1a001eac:	10002ab8 	.word	0x10002ab8

1a001eb0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001eb0:	4b05      	ldr	r3, [pc, #20]	; (1a001ec8 <xTaskGetSchedulerState+0x18>)
1a001eb2:	681b      	ldr	r3, [r3, #0]
1a001eb4:	b133      	cbz	r3, 1a001ec4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001eb6:	4b05      	ldr	r3, [pc, #20]	; (1a001ecc <xTaskGetSchedulerState+0x1c>)
1a001eb8:	681b      	ldr	r3, [r3, #0]
1a001eba:	b10b      	cbz	r3, 1a001ec0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001ebc:	2000      	movs	r0, #0
	}
1a001ebe:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001ec0:	2002      	movs	r0, #2
1a001ec2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001ec4:	2001      	movs	r0, #1
1a001ec6:	4770      	bx	lr
1a001ec8:	10002a88 	.word	0x10002a88
1a001ecc:	10002a38 	.word	0x10002a38

1a001ed0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001ed0:	2800      	cmp	r0, #0
1a001ed2:	d049      	beq.n	1a001f68 <xTaskPriorityDisinherit+0x98>
	{
1a001ed4:	b538      	push	{r3, r4, r5, lr}
1a001ed6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001ed8:	4a26      	ldr	r2, [pc, #152]	; (1a001f74 <xTaskPriorityDisinherit+0xa4>)
1a001eda:	6812      	ldr	r2, [r2, #0]
1a001edc:	4282      	cmp	r2, r0
1a001ede:	d008      	beq.n	1a001ef2 <xTaskPriorityDisinherit+0x22>
1a001ee0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ee4:	f383 8811 	msr	BASEPRI, r3
1a001ee8:	f3bf 8f6f 	isb	sy
1a001eec:	f3bf 8f4f 	dsb	sy
1a001ef0:	e7fe      	b.n	1a001ef0 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001ef2:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001ef4:	b942      	cbnz	r2, 1a001f08 <xTaskPriorityDisinherit+0x38>
1a001ef6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001efa:	f383 8811 	msr	BASEPRI, r3
1a001efe:	f3bf 8f6f 	isb	sy
1a001f02:	f3bf 8f4f 	dsb	sy
1a001f06:	e7fe      	b.n	1a001f06 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001f08:	3a01      	subs	r2, #1
1a001f0a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001f0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001f0e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001f10:	4288      	cmp	r0, r1
1a001f12:	d02b      	beq.n	1a001f6c <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001f14:	bb62      	cbnz	r2, 1a001f70 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f16:	1d25      	adds	r5, r4, #4
1a001f18:	4628      	mov	r0, r5
1a001f1a:	f7ff fa6c 	bl	1a0013f6 <uxListRemove>
1a001f1e:	b970      	cbnz	r0, 1a001f3e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001f20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f22:	2314      	movs	r3, #20
1a001f24:	fb03 f302 	mul.w	r3, r3, r2
1a001f28:	4913      	ldr	r1, [pc, #76]	; (1a001f78 <xTaskPriorityDisinherit+0xa8>)
1a001f2a:	58cb      	ldr	r3, [r1, r3]
1a001f2c:	b93b      	cbnz	r3, 1a001f3e <xTaskPriorityDisinherit+0x6e>
1a001f2e:	2301      	movs	r3, #1
1a001f30:	fa03 f202 	lsl.w	r2, r3, r2
1a001f34:	4911      	ldr	r1, [pc, #68]	; (1a001f7c <xTaskPriorityDisinherit+0xac>)
1a001f36:	680b      	ldr	r3, [r1, #0]
1a001f38:	ea23 0302 	bic.w	r3, r3, r2
1a001f3c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001f3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001f40:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f42:	f1c3 0207 	rsb	r2, r3, #7
1a001f46:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001f48:	2401      	movs	r4, #1
1a001f4a:	fa04 f203 	lsl.w	r2, r4, r3
1a001f4e:	490b      	ldr	r1, [pc, #44]	; (1a001f7c <xTaskPriorityDisinherit+0xac>)
1a001f50:	6808      	ldr	r0, [r1, #0]
1a001f52:	4302      	orrs	r2, r0
1a001f54:	600a      	str	r2, [r1, #0]
1a001f56:	4629      	mov	r1, r5
1a001f58:	4a07      	ldr	r2, [pc, #28]	; (1a001f78 <xTaskPriorityDisinherit+0xa8>)
1a001f5a:	2014      	movs	r0, #20
1a001f5c:	fb00 2003 	mla	r0, r0, r3, r2
1a001f60:	f7ff fa23 	bl	1a0013aa <vListInsertEnd>
					xReturn = pdTRUE;
1a001f64:	4620      	mov	r0, r4
	}
1a001f66:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001f68:	2000      	movs	r0, #0
	}
1a001f6a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001f6c:	2000      	movs	r0, #0
1a001f6e:	e7fa      	b.n	1a001f66 <xTaskPriorityDisinherit+0x96>
1a001f70:	2000      	movs	r0, #0
		return xReturn;
1a001f72:	e7f8      	b.n	1a001f66 <xTaskPriorityDisinherit+0x96>
1a001f74:	10002994 	.word	0x10002994
1a001f78:	100029a0 	.word	0x100029a0
1a001f7c:	10002a40 	.word	0x10002a40

1a001f80 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001f80:	4b06      	ldr	r3, [pc, #24]	; (1a001f9c <prvGetNextExpireTime+0x1c>)
1a001f82:	681a      	ldr	r2, [r3, #0]
1a001f84:	6813      	ldr	r3, [r2, #0]
1a001f86:	fab3 f383 	clz	r3, r3
1a001f8a:	095b      	lsrs	r3, r3, #5
1a001f8c:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001f8e:	b913      	cbnz	r3, 1a001f96 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f90:	68d3      	ldr	r3, [r2, #12]
1a001f92:	6818      	ldr	r0, [r3, #0]
1a001f94:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001f96:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001f98:	4770      	bx	lr
1a001f9a:	bf00      	nop
1a001f9c:	10002abc 	.word	0x10002abc

1a001fa0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001fa0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001fa2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001fa4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001fa6:	4291      	cmp	r1, r2
1a001fa8:	d80c      	bhi.n	1a001fc4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001faa:	1ad2      	subs	r2, r2, r3
1a001fac:	6983      	ldr	r3, [r0, #24]
1a001fae:	429a      	cmp	r2, r3
1a001fb0:	d301      	bcc.n	1a001fb6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001fb2:	2001      	movs	r0, #1
1a001fb4:	e010      	b.n	1a001fd8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001fb6:	1d01      	adds	r1, r0, #4
1a001fb8:	4b09      	ldr	r3, [pc, #36]	; (1a001fe0 <prvInsertTimerInActiveList+0x40>)
1a001fba:	6818      	ldr	r0, [r3, #0]
1a001fbc:	f7ff fa01 	bl	1a0013c2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001fc0:	2000      	movs	r0, #0
1a001fc2:	e009      	b.n	1a001fd8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001fc4:	429a      	cmp	r2, r3
1a001fc6:	d201      	bcs.n	1a001fcc <prvInsertTimerInActiveList+0x2c>
1a001fc8:	4299      	cmp	r1, r3
1a001fca:	d206      	bcs.n	1a001fda <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001fcc:	1d01      	adds	r1, r0, #4
1a001fce:	4b05      	ldr	r3, [pc, #20]	; (1a001fe4 <prvInsertTimerInActiveList+0x44>)
1a001fd0:	6818      	ldr	r0, [r3, #0]
1a001fd2:	f7ff f9f6 	bl	1a0013c2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001fd6:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001fd8:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001fda:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001fdc:	e7fc      	b.n	1a001fd8 <prvInsertTimerInActiveList+0x38>
1a001fde:	bf00      	nop
1a001fe0:	10002ac0 	.word	0x10002ac0
1a001fe4:	10002abc 	.word	0x10002abc

1a001fe8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001fe8:	b530      	push	{r4, r5, lr}
1a001fea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001fec:	f000 fa9a 	bl	1a002524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001ff0:	4b11      	ldr	r3, [pc, #68]	; (1a002038 <prvCheckForValidListAndQueue+0x50>)
1a001ff2:	681b      	ldr	r3, [r3, #0]
1a001ff4:	b11b      	cbz	r3, 1a001ffe <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001ff6:	f000 fab7 	bl	1a002568 <vPortExitCritical>
}
1a001ffa:	b003      	add	sp, #12
1a001ffc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001ffe:	4d0f      	ldr	r5, [pc, #60]	; (1a00203c <prvCheckForValidListAndQueue+0x54>)
1a002000:	4628      	mov	r0, r5
1a002002:	f7ff f9c4 	bl	1a00138e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002006:	4c0e      	ldr	r4, [pc, #56]	; (1a002040 <prvCheckForValidListAndQueue+0x58>)
1a002008:	4620      	mov	r0, r4
1a00200a:	f7ff f9c0 	bl	1a00138e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00200e:	4b0d      	ldr	r3, [pc, #52]	; (1a002044 <prvCheckForValidListAndQueue+0x5c>)
1a002010:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002012:	4b0d      	ldr	r3, [pc, #52]	; (1a002048 <prvCheckForValidListAndQueue+0x60>)
1a002014:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002016:	2300      	movs	r3, #0
1a002018:	9300      	str	r3, [sp, #0]
1a00201a:	4b0c      	ldr	r3, [pc, #48]	; (1a00204c <prvCheckForValidListAndQueue+0x64>)
1a00201c:	4a0c      	ldr	r2, [pc, #48]	; (1a002050 <prvCheckForValidListAndQueue+0x68>)
1a00201e:	2110      	movs	r1, #16
1a002020:	200a      	movs	r0, #10
1a002022:	f7fe fed2 	bl	1a000dca <xQueueGenericCreateStatic>
1a002026:	4b04      	ldr	r3, [pc, #16]	; (1a002038 <prvCheckForValidListAndQueue+0x50>)
1a002028:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00202a:	2800      	cmp	r0, #0
1a00202c:	d0e3      	beq.n	1a001ff6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00202e:	4909      	ldr	r1, [pc, #36]	; (1a002054 <prvCheckForValidListAndQueue+0x6c>)
1a002030:	f7ff f970 	bl	1a001314 <vQueueAddToRegistry>
1a002034:	e7df      	b.n	1a001ff6 <prvCheckForValidListAndQueue+0xe>
1a002036:	bf00      	nop
1a002038:	10002be0 	.word	0x10002be0
1a00203c:	10002b64 	.word	0x10002b64
1a002040:	10002b78 	.word	0x10002b78
1a002044:	10002abc 	.word	0x10002abc
1a002048:	10002ac0 	.word	0x10002ac0
1a00204c:	10002b90 	.word	0x10002b90
1a002050:	10002ac4 	.word	0x10002ac4
1a002054:	1a005010 	.word	0x1a005010

1a002058 <prvInitialiseNewTimer>:
{
1a002058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00205c:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a00205e:	b941      	cbnz	r1, 1a002072 <prvInitialiseNewTimer+0x1a>
1a002060:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002064:	f383 8811 	msr	BASEPRI, r3
1a002068:	f3bf 8f6f 	isb	sy
1a00206c:	f3bf 8f4f 	dsb	sy
1a002070:	e7fe      	b.n	1a002070 <prvInitialiseNewTimer+0x18>
1a002072:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a002074:	b174      	cbz	r4, 1a002094 <prvInitialiseNewTimer+0x3c>
1a002076:	461d      	mov	r5, r3
1a002078:	4616      	mov	r6, r2
1a00207a:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a00207c:	f7ff ffb4 	bl	1a001fe8 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a002080:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a002084:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a002086:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002088:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a00208a:	9b06      	ldr	r3, [sp, #24]
1a00208c:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a00208e:	1d20      	adds	r0, r4, #4
1a002090:	f7ff f988 	bl	1a0013a4 <vListInitialiseItem>
}
1a002094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002098 <xTimerCreateTimerTask>:
{
1a002098:	b510      	push	{r4, lr}
1a00209a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a00209c:	f7ff ffa4 	bl	1a001fe8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0020a0:	4b12      	ldr	r3, [pc, #72]	; (1a0020ec <xTimerCreateTimerTask+0x54>)
1a0020a2:	681b      	ldr	r3, [r3, #0]
1a0020a4:	b1cb      	cbz	r3, 1a0020da <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0020a6:	2400      	movs	r4, #0
1a0020a8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0020aa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0020ac:	aa07      	add	r2, sp, #28
1a0020ae:	a906      	add	r1, sp, #24
1a0020b0:	a805      	add	r0, sp, #20
1a0020b2:	f7ff f9c1 	bl	1a001438 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a0020b6:	9b05      	ldr	r3, [sp, #20]
1a0020b8:	9302      	str	r3, [sp, #8]
1a0020ba:	9b06      	ldr	r3, [sp, #24]
1a0020bc:	9301      	str	r3, [sp, #4]
1a0020be:	2304      	movs	r3, #4
1a0020c0:	9300      	str	r3, [sp, #0]
1a0020c2:	4623      	mov	r3, r4
1a0020c4:	9a07      	ldr	r2, [sp, #28]
1a0020c6:	490a      	ldr	r1, [pc, #40]	; (1a0020f0 <xTimerCreateTimerTask+0x58>)
1a0020c8:	480a      	ldr	r0, [pc, #40]	; (1a0020f4 <xTimerCreateTimerTask+0x5c>)
1a0020ca:	f7ff fb7f 	bl	1a0017cc <xTaskCreateStatic>
1a0020ce:	4b0a      	ldr	r3, [pc, #40]	; (1a0020f8 <xTimerCreateTimerTask+0x60>)
1a0020d0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a0020d2:	b110      	cbz	r0, 1a0020da <xTimerCreateTimerTask+0x42>
}
1a0020d4:	2001      	movs	r0, #1
1a0020d6:	b008      	add	sp, #32
1a0020d8:	bd10      	pop	{r4, pc}
1a0020da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020de:	f383 8811 	msr	BASEPRI, r3
1a0020e2:	f3bf 8f6f 	isb	sy
1a0020e6:	f3bf 8f4f 	dsb	sy
1a0020ea:	e7fe      	b.n	1a0020ea <xTimerCreateTimerTask+0x52>
1a0020ec:	10002be0 	.word	0x10002be0
1a0020f0:	1a005018 	.word	0x1a005018
1a0020f4:	1a002415 	.word	0x1a002415
1a0020f8:	10002be4 	.word	0x10002be4

1a0020fc <xTimerCreate>:
	{
1a0020fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002100:	b082      	sub	sp, #8
1a002102:	4605      	mov	r5, r0
1a002104:	460e      	mov	r6, r1
1a002106:	4617      	mov	r7, r2
1a002108:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a00210a:	2030      	movs	r0, #48	; 0x30
1a00210c:	f7fe fca4 	bl	1a000a58 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a002110:	4604      	mov	r4, r0
1a002112:	b158      	cbz	r0, 1a00212c <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002114:	9001      	str	r0, [sp, #4]
1a002116:	9b08      	ldr	r3, [sp, #32]
1a002118:	9300      	str	r3, [sp, #0]
1a00211a:	4643      	mov	r3, r8
1a00211c:	463a      	mov	r2, r7
1a00211e:	4631      	mov	r1, r6
1a002120:	4628      	mov	r0, r5
1a002122:	f7ff ff99 	bl	1a002058 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a002126:	2300      	movs	r3, #0
1a002128:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a00212c:	4620      	mov	r0, r4
1a00212e:	b002      	add	sp, #8
1a002130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002134 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002134:	b1c8      	cbz	r0, 1a00216a <xTimerGenericCommand+0x36>
{
1a002136:	b530      	push	{r4, r5, lr}
1a002138:	b085      	sub	sp, #20
1a00213a:	4615      	mov	r5, r2
1a00213c:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a00213e:	4a17      	ldr	r2, [pc, #92]	; (1a00219c <xTimerGenericCommand+0x68>)
1a002140:	6810      	ldr	r0, [r2, #0]
1a002142:	b340      	cbz	r0, 1a002196 <xTimerGenericCommand+0x62>
1a002144:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a002146:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a002148:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00214a:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a00214c:	2905      	cmp	r1, #5
1a00214e:	dc1d      	bgt.n	1a00218c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002150:	f7ff feae 	bl	1a001eb0 <xTaskGetSchedulerState>
1a002154:	2802      	cmp	r0, #2
1a002156:	d011      	beq.n	1a00217c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002158:	2300      	movs	r3, #0
1a00215a:	461a      	mov	r2, r3
1a00215c:	4669      	mov	r1, sp
1a00215e:	480f      	ldr	r0, [pc, #60]	; (1a00219c <xTimerGenericCommand+0x68>)
1a002160:	6800      	ldr	r0, [r0, #0]
1a002162:	f7fe fea1 	bl	1a000ea8 <xQueueGenericSend>
}
1a002166:	b005      	add	sp, #20
1a002168:	bd30      	pop	{r4, r5, pc}
1a00216a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00216e:	f383 8811 	msr	BASEPRI, r3
1a002172:	f3bf 8f6f 	isb	sy
1a002176:	f3bf 8f4f 	dsb	sy
1a00217a:	e7fe      	b.n	1a00217a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a00217c:	2300      	movs	r3, #0
1a00217e:	9a08      	ldr	r2, [sp, #32]
1a002180:	4669      	mov	r1, sp
1a002182:	4806      	ldr	r0, [pc, #24]	; (1a00219c <xTimerGenericCommand+0x68>)
1a002184:	6800      	ldr	r0, [r0, #0]
1a002186:	f7fe fe8f 	bl	1a000ea8 <xQueueGenericSend>
1a00218a:	e7ec      	b.n	1a002166 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00218c:	2300      	movs	r3, #0
1a00218e:	4669      	mov	r1, sp
1a002190:	f7fe ff48 	bl	1a001024 <xQueueGenericSendFromISR>
1a002194:	e7e7      	b.n	1a002166 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002196:	2000      	movs	r0, #0
	return xReturn;
1a002198:	e7e5      	b.n	1a002166 <xTimerGenericCommand+0x32>
1a00219a:	bf00      	nop
1a00219c:	10002be0 	.word	0x10002be0

1a0021a0 <prvSwitchTimerLists>:
{
1a0021a0:	b570      	push	{r4, r5, r6, lr}
1a0021a2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a0021a4:	4b1a      	ldr	r3, [pc, #104]	; (1a002210 <prvSwitchTimerLists+0x70>)
1a0021a6:	681b      	ldr	r3, [r3, #0]
1a0021a8:	681a      	ldr	r2, [r3, #0]
1a0021aa:	b352      	cbz	r2, 1a002202 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0021ac:	68db      	ldr	r3, [r3, #12]
1a0021ae:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0021b0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0021b2:	1d25      	adds	r5, r4, #4
1a0021b4:	4628      	mov	r0, r5
1a0021b6:	f7ff f91e 	bl	1a0013f6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0021ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0021bc:	4620      	mov	r0, r4
1a0021be:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0021c0:	69e3      	ldr	r3, [r4, #28]
1a0021c2:	2b01      	cmp	r3, #1
1a0021c4:	d1ee      	bne.n	1a0021a4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a0021c6:	69a3      	ldr	r3, [r4, #24]
1a0021c8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a0021ca:	429e      	cmp	r6, r3
1a0021cc:	d207      	bcs.n	1a0021de <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a0021ce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0021d0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0021d2:	4629      	mov	r1, r5
1a0021d4:	4b0e      	ldr	r3, [pc, #56]	; (1a002210 <prvSwitchTimerLists+0x70>)
1a0021d6:	6818      	ldr	r0, [r3, #0]
1a0021d8:	f7ff f8f3 	bl	1a0013c2 <vListInsert>
1a0021dc:	e7e2      	b.n	1a0021a4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0021de:	2100      	movs	r1, #0
1a0021e0:	9100      	str	r1, [sp, #0]
1a0021e2:	460b      	mov	r3, r1
1a0021e4:	4632      	mov	r2, r6
1a0021e6:	4620      	mov	r0, r4
1a0021e8:	f7ff ffa4 	bl	1a002134 <xTimerGenericCommand>
				configASSERT( xResult );
1a0021ec:	2800      	cmp	r0, #0
1a0021ee:	d1d9      	bne.n	1a0021a4 <prvSwitchTimerLists+0x4>
1a0021f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021f4:	f383 8811 	msr	BASEPRI, r3
1a0021f8:	f3bf 8f6f 	isb	sy
1a0021fc:	f3bf 8f4f 	dsb	sy
1a002200:	e7fe      	b.n	1a002200 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002202:	4a04      	ldr	r2, [pc, #16]	; (1a002214 <prvSwitchTimerLists+0x74>)
1a002204:	6810      	ldr	r0, [r2, #0]
1a002206:	4902      	ldr	r1, [pc, #8]	; (1a002210 <prvSwitchTimerLists+0x70>)
1a002208:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00220a:	6013      	str	r3, [r2, #0]
}
1a00220c:	b002      	add	sp, #8
1a00220e:	bd70      	pop	{r4, r5, r6, pc}
1a002210:	10002abc 	.word	0x10002abc
1a002214:	10002ac0 	.word	0x10002ac0

1a002218 <prvSampleTimeNow>:
{
1a002218:	b538      	push	{r3, r4, r5, lr}
1a00221a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a00221c:	f7ff fb94 	bl	1a001948 <xTaskGetTickCount>
1a002220:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002222:	4b07      	ldr	r3, [pc, #28]	; (1a002240 <prvSampleTimeNow+0x28>)
1a002224:	681b      	ldr	r3, [r3, #0]
1a002226:	4283      	cmp	r3, r0
1a002228:	d805      	bhi.n	1a002236 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00222a:	2300      	movs	r3, #0
1a00222c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a00222e:	4b04      	ldr	r3, [pc, #16]	; (1a002240 <prvSampleTimeNow+0x28>)
1a002230:	601c      	str	r4, [r3, #0]
}
1a002232:	4620      	mov	r0, r4
1a002234:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a002236:	f7ff ffb3 	bl	1a0021a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00223a:	2301      	movs	r3, #1
1a00223c:	602b      	str	r3, [r5, #0]
1a00223e:	e7f6      	b.n	1a00222e <prvSampleTimeNow+0x16>
1a002240:	10002b8c 	.word	0x10002b8c

1a002244 <prvProcessExpiredTimer>:
{
1a002244:	b570      	push	{r4, r5, r6, lr}
1a002246:	b082      	sub	sp, #8
1a002248:	4605      	mov	r5, r0
1a00224a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00224c:	4b14      	ldr	r3, [pc, #80]	; (1a0022a0 <prvProcessExpiredTimer+0x5c>)
1a00224e:	681b      	ldr	r3, [r3, #0]
1a002250:	68db      	ldr	r3, [r3, #12]
1a002252:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002254:	1d20      	adds	r0, r4, #4
1a002256:	f7ff f8ce 	bl	1a0013f6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00225a:	69e3      	ldr	r3, [r4, #28]
1a00225c:	2b01      	cmp	r3, #1
1a00225e:	d004      	beq.n	1a00226a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002260:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002262:	4620      	mov	r0, r4
1a002264:	4798      	blx	r3
}
1a002266:	b002      	add	sp, #8
1a002268:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00226a:	69a1      	ldr	r1, [r4, #24]
1a00226c:	462b      	mov	r3, r5
1a00226e:	4632      	mov	r2, r6
1a002270:	4429      	add	r1, r5
1a002272:	4620      	mov	r0, r4
1a002274:	f7ff fe94 	bl	1a001fa0 <prvInsertTimerInActiveList>
1a002278:	2800      	cmp	r0, #0
1a00227a:	d0f1      	beq.n	1a002260 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00227c:	2100      	movs	r1, #0
1a00227e:	9100      	str	r1, [sp, #0]
1a002280:	460b      	mov	r3, r1
1a002282:	462a      	mov	r2, r5
1a002284:	4620      	mov	r0, r4
1a002286:	f7ff ff55 	bl	1a002134 <xTimerGenericCommand>
			configASSERT( xResult );
1a00228a:	2800      	cmp	r0, #0
1a00228c:	d1e8      	bne.n	1a002260 <prvProcessExpiredTimer+0x1c>
1a00228e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002292:	f383 8811 	msr	BASEPRI, r3
1a002296:	f3bf 8f6f 	isb	sy
1a00229a:	f3bf 8f4f 	dsb	sy
1a00229e:	e7fe      	b.n	1a00229e <prvProcessExpiredTimer+0x5a>
1a0022a0:	10002abc 	.word	0x10002abc

1a0022a4 <prvProcessTimerOrBlockTask>:
{
1a0022a4:	b570      	push	{r4, r5, r6, lr}
1a0022a6:	b082      	sub	sp, #8
1a0022a8:	4606      	mov	r6, r0
1a0022aa:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a0022ac:	f7ff fb44 	bl	1a001938 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0022b0:	a801      	add	r0, sp, #4
1a0022b2:	f7ff ffb1 	bl	1a002218 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a0022b6:	9b01      	ldr	r3, [sp, #4]
1a0022b8:	bb1b      	cbnz	r3, 1a002302 <prvProcessTimerOrBlockTask+0x5e>
1a0022ba:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a0022bc:	b90c      	cbnz	r4, 1a0022c2 <prvProcessTimerOrBlockTask+0x1e>
1a0022be:	42b0      	cmp	r0, r6
1a0022c0:	d218      	bcs.n	1a0022f4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a0022c2:	b12c      	cbz	r4, 1a0022d0 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a0022c4:	4b11      	ldr	r3, [pc, #68]	; (1a00230c <prvProcessTimerOrBlockTask+0x68>)
1a0022c6:	681b      	ldr	r3, [r3, #0]
1a0022c8:	681c      	ldr	r4, [r3, #0]
1a0022ca:	fab4 f484 	clz	r4, r4
1a0022ce:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a0022d0:	4622      	mov	r2, r4
1a0022d2:	1b71      	subs	r1, r6, r5
1a0022d4:	4b0e      	ldr	r3, [pc, #56]	; (1a002310 <prvProcessTimerOrBlockTask+0x6c>)
1a0022d6:	6818      	ldr	r0, [r3, #0]
1a0022d8:	f7ff f830 	bl	1a00133c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a0022dc:	f7ff fbc6 	bl	1a001a6c <xTaskResumeAll>
1a0022e0:	b988      	cbnz	r0, 1a002306 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a0022e2:	4b0c      	ldr	r3, [pc, #48]	; (1a002314 <prvProcessTimerOrBlockTask+0x70>)
1a0022e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0022e8:	601a      	str	r2, [r3, #0]
1a0022ea:	f3bf 8f4f 	dsb	sy
1a0022ee:	f3bf 8f6f 	isb	sy
1a0022f2:	e008      	b.n	1a002306 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0022f4:	f7ff fbba 	bl	1a001a6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0022f8:	4629      	mov	r1, r5
1a0022fa:	4630      	mov	r0, r6
1a0022fc:	f7ff ffa2 	bl	1a002244 <prvProcessExpiredTimer>
1a002300:	e001      	b.n	1a002306 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002302:	f7ff fbb3 	bl	1a001a6c <xTaskResumeAll>
}
1a002306:	b002      	add	sp, #8
1a002308:	bd70      	pop	{r4, r5, r6, pc}
1a00230a:	bf00      	nop
1a00230c:	10002ac0 	.word	0x10002ac0
1a002310:	10002be0 	.word	0x10002be0
1a002314:	e000ed04 	.word	0xe000ed04

1a002318 <prvProcessReceivedCommands>:
{
1a002318:	b530      	push	{r4, r5, lr}
1a00231a:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00231c:	e002      	b.n	1a002324 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a00231e:	9b04      	ldr	r3, [sp, #16]
1a002320:	2b00      	cmp	r3, #0
1a002322:	da0f      	bge.n	1a002344 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002324:	2200      	movs	r2, #0
1a002326:	a904      	add	r1, sp, #16
1a002328:	4b39      	ldr	r3, [pc, #228]	; (1a002410 <prvProcessReceivedCommands+0xf8>)
1a00232a:	6818      	ldr	r0, [r3, #0]
1a00232c:	f7fe fee0 	bl	1a0010f0 <xQueueReceive>
1a002330:	2800      	cmp	r0, #0
1a002332:	d06a      	beq.n	1a00240a <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002334:	9b04      	ldr	r3, [sp, #16]
1a002336:	2b00      	cmp	r3, #0
1a002338:	daf1      	bge.n	1a00231e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00233a:	9907      	ldr	r1, [sp, #28]
1a00233c:	9806      	ldr	r0, [sp, #24]
1a00233e:	9b05      	ldr	r3, [sp, #20]
1a002340:	4798      	blx	r3
1a002342:	e7ec      	b.n	1a00231e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002344:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002346:	6963      	ldr	r3, [r4, #20]
1a002348:	b113      	cbz	r3, 1a002350 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00234a:	1d20      	adds	r0, r4, #4
1a00234c:	f7ff f853 	bl	1a0013f6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002350:	a803      	add	r0, sp, #12
1a002352:	f7ff ff61 	bl	1a002218 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002356:	9b04      	ldr	r3, [sp, #16]
1a002358:	2b09      	cmp	r3, #9
1a00235a:	d8e3      	bhi.n	1a002324 <prvProcessReceivedCommands+0xc>
1a00235c:	a201      	add	r2, pc, #4	; (adr r2, 1a002364 <prvProcessReceivedCommands+0x4c>)
1a00235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002362:	bf00      	nop
1a002364:	1a00238d 	.word	0x1a00238d
1a002368:	1a00238d 	.word	0x1a00238d
1a00236c:	1a00238d 	.word	0x1a00238d
1a002370:	1a002325 	.word	0x1a002325
1a002374:	1a0023d5 	.word	0x1a0023d5
1a002378:	1a0023fb 	.word	0x1a0023fb
1a00237c:	1a00238d 	.word	0x1a00238d
1a002380:	1a00238d 	.word	0x1a00238d
1a002384:	1a002325 	.word	0x1a002325
1a002388:	1a0023d5 	.word	0x1a0023d5
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a00238c:	9905      	ldr	r1, [sp, #20]
1a00238e:	69a5      	ldr	r5, [r4, #24]
1a002390:	460b      	mov	r3, r1
1a002392:	4602      	mov	r2, r0
1a002394:	4429      	add	r1, r5
1a002396:	4620      	mov	r0, r4
1a002398:	f7ff fe02 	bl	1a001fa0 <prvInsertTimerInActiveList>
1a00239c:	2800      	cmp	r0, #0
1a00239e:	d0c1      	beq.n	1a002324 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0023a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0023a2:	4620      	mov	r0, r4
1a0023a4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0023a6:	69e3      	ldr	r3, [r4, #28]
1a0023a8:	2b01      	cmp	r3, #1
1a0023aa:	d1bb      	bne.n	1a002324 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0023ac:	69a2      	ldr	r2, [r4, #24]
1a0023ae:	2100      	movs	r1, #0
1a0023b0:	9100      	str	r1, [sp, #0]
1a0023b2:	460b      	mov	r3, r1
1a0023b4:	9805      	ldr	r0, [sp, #20]
1a0023b6:	4402      	add	r2, r0
1a0023b8:	4620      	mov	r0, r4
1a0023ba:	f7ff febb 	bl	1a002134 <xTimerGenericCommand>
							configASSERT( xResult );
1a0023be:	2800      	cmp	r0, #0
1a0023c0:	d1b0      	bne.n	1a002324 <prvProcessReceivedCommands+0xc>
1a0023c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023c6:	f383 8811 	msr	BASEPRI, r3
1a0023ca:	f3bf 8f6f 	isb	sy
1a0023ce:	f3bf 8f4f 	dsb	sy
1a0023d2:	e7fe      	b.n	1a0023d2 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a0023d4:	9905      	ldr	r1, [sp, #20]
1a0023d6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a0023d8:	b131      	cbz	r1, 1a0023e8 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a0023da:	4603      	mov	r3, r0
1a0023dc:	4602      	mov	r2, r0
1a0023de:	4401      	add	r1, r0
1a0023e0:	4620      	mov	r0, r4
1a0023e2:	f7ff fddd 	bl	1a001fa0 <prvInsertTimerInActiveList>
					break;
1a0023e6:	e79d      	b.n	1a002324 <prvProcessReceivedCommands+0xc>
1a0023e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023ec:	f383 8811 	msr	BASEPRI, r3
1a0023f0:	f3bf 8f6f 	isb	sy
1a0023f4:	f3bf 8f4f 	dsb	sy
1a0023f8:	e7fe      	b.n	1a0023f8 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0023fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0023fe:	2b00      	cmp	r3, #0
1a002400:	d190      	bne.n	1a002324 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002402:	4620      	mov	r0, r4
1a002404:	f7fe fbb6 	bl	1a000b74 <vPortFree>
1a002408:	e78c      	b.n	1a002324 <prvProcessReceivedCommands+0xc>
}
1a00240a:	b009      	add	sp, #36	; 0x24
1a00240c:	bd30      	pop	{r4, r5, pc}
1a00240e:	bf00      	nop
1a002410:	10002be0 	.word	0x10002be0

1a002414 <prvTimerTask>:
{
1a002414:	b500      	push	{lr}
1a002416:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002418:	a801      	add	r0, sp, #4
1a00241a:	f7ff fdb1 	bl	1a001f80 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00241e:	9901      	ldr	r1, [sp, #4]
1a002420:	f7ff ff40 	bl	1a0022a4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002424:	f7ff ff78 	bl	1a002318 <prvProcessReceivedCommands>
1a002428:	e7f6      	b.n	1a002418 <prvTimerTask+0x4>

1a00242a <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
1a00242a:	b940      	cbnz	r0, 1a00243e <pvTimerGetTimerID+0x14>
1a00242c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002430:	f383 8811 	msr	BASEPRI, r3
1a002434:	f3bf 8f6f 	isb	sy
1a002438:	f3bf 8f4f 	dsb	sy
1a00243c:	e7fe      	b.n	1a00243c <pvTimerGetTimerID+0x12>
{
1a00243e:	b510      	push	{r4, lr}
1a002440:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
1a002442:	f000 f86f 	bl	1a002524 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
1a002446:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
1a002448:	f000 f88e 	bl	1a002568 <vPortExitCritical>

	return pvReturn;
}
1a00244c:	4620      	mov	r0, r4
1a00244e:	bd10      	pop	{r4, pc}

1a002450 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002450:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002452:	2300      	movs	r3, #0
1a002454:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002456:	4b0d      	ldr	r3, [pc, #52]	; (1a00248c <prvTaskExitError+0x3c>)
1a002458:	681b      	ldr	r3, [r3, #0]
1a00245a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00245e:	d008      	beq.n	1a002472 <prvTaskExitError+0x22>
1a002460:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002464:	f383 8811 	msr	BASEPRI, r3
1a002468:	f3bf 8f6f 	isb	sy
1a00246c:	f3bf 8f4f 	dsb	sy
1a002470:	e7fe      	b.n	1a002470 <prvTaskExitError+0x20>
1a002472:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002476:	f383 8811 	msr	BASEPRI, r3
1a00247a:	f3bf 8f6f 	isb	sy
1a00247e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002482:	9b01      	ldr	r3, [sp, #4]
1a002484:	2b00      	cmp	r3, #0
1a002486:	d0fc      	beq.n	1a002482 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002488:	b002      	add	sp, #8
1a00248a:	4770      	bx	lr
1a00248c:	10000000 	.word	0x10000000

1a002490 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002490:	4808      	ldr	r0, [pc, #32]	; (1a0024b4 <prvPortStartFirstTask+0x24>)
1a002492:	6800      	ldr	r0, [r0, #0]
1a002494:	6800      	ldr	r0, [r0, #0]
1a002496:	f380 8808 	msr	MSP, r0
1a00249a:	f04f 0000 	mov.w	r0, #0
1a00249e:	f380 8814 	msr	CONTROL, r0
1a0024a2:	b662      	cpsie	i
1a0024a4:	b661      	cpsie	f
1a0024a6:	f3bf 8f4f 	dsb	sy
1a0024aa:	f3bf 8f6f 	isb	sy
1a0024ae:	df00      	svc	0
1a0024b0:	bf00      	nop
1a0024b2:	0000      	.short	0x0000
1a0024b4:	e000ed08 	.word	0xe000ed08

1a0024b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0024b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0024c8 <vPortEnableVFP+0x10>
1a0024bc:	6801      	ldr	r1, [r0, #0]
1a0024be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0024c2:	6001      	str	r1, [r0, #0]
1a0024c4:	4770      	bx	lr
1a0024c6:	0000      	.short	0x0000
1a0024c8:	e000ed88 	.word	0xe000ed88

1a0024cc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0024cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0024d0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0024d4:	f021 0101 	bic.w	r1, r1, #1
1a0024d8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0024dc:	4b05      	ldr	r3, [pc, #20]	; (1a0024f4 <pxPortInitialiseStack+0x28>)
1a0024de:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0024e2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0024e6:	f06f 0302 	mvn.w	r3, #2
1a0024ea:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0024ee:	3844      	subs	r0, #68	; 0x44
1a0024f0:	4770      	bx	lr
1a0024f2:	bf00      	nop
1a0024f4:	1a002451 	.word	0x1a002451
1a0024f8:	ffffffff 	.word	0xffffffff
1a0024fc:	ffffffff 	.word	0xffffffff

1a002500 <SVC_Handler>:
	__asm volatile (
1a002500:	4b07      	ldr	r3, [pc, #28]	; (1a002520 <pxCurrentTCBConst2>)
1a002502:	6819      	ldr	r1, [r3, #0]
1a002504:	6808      	ldr	r0, [r1, #0]
1a002506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00250a:	f380 8809 	msr	PSP, r0
1a00250e:	f3bf 8f6f 	isb	sy
1a002512:	f04f 0000 	mov.w	r0, #0
1a002516:	f380 8811 	msr	BASEPRI, r0
1a00251a:	4770      	bx	lr
1a00251c:	f3af 8000 	nop.w

1a002520 <pxCurrentTCBConst2>:
1a002520:	10002994 	.word	0x10002994

1a002524 <vPortEnterCritical>:
1a002524:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002528:	f383 8811 	msr	BASEPRI, r3
1a00252c:	f3bf 8f6f 	isb	sy
1a002530:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002534:	4a0a      	ldr	r2, [pc, #40]	; (1a002560 <vPortEnterCritical+0x3c>)
1a002536:	6813      	ldr	r3, [r2, #0]
1a002538:	3301      	adds	r3, #1
1a00253a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00253c:	2b01      	cmp	r3, #1
1a00253e:	d000      	beq.n	1a002542 <vPortEnterCritical+0x1e>
}
1a002540:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002542:	4b08      	ldr	r3, [pc, #32]	; (1a002564 <vPortEnterCritical+0x40>)
1a002544:	681b      	ldr	r3, [r3, #0]
1a002546:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00254a:	d0f9      	beq.n	1a002540 <vPortEnterCritical+0x1c>
1a00254c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002550:	f383 8811 	msr	BASEPRI, r3
1a002554:	f3bf 8f6f 	isb	sy
1a002558:	f3bf 8f4f 	dsb	sy
1a00255c:	e7fe      	b.n	1a00255c <vPortEnterCritical+0x38>
1a00255e:	bf00      	nop
1a002560:	10000000 	.word	0x10000000
1a002564:	e000ed04 	.word	0xe000ed04

1a002568 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002568:	4b09      	ldr	r3, [pc, #36]	; (1a002590 <vPortExitCritical+0x28>)
1a00256a:	681b      	ldr	r3, [r3, #0]
1a00256c:	b943      	cbnz	r3, 1a002580 <vPortExitCritical+0x18>
1a00256e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002572:	f383 8811 	msr	BASEPRI, r3
1a002576:	f3bf 8f6f 	isb	sy
1a00257a:	f3bf 8f4f 	dsb	sy
1a00257e:	e7fe      	b.n	1a00257e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002580:	3b01      	subs	r3, #1
1a002582:	4a03      	ldr	r2, [pc, #12]	; (1a002590 <vPortExitCritical+0x28>)
1a002584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002586:	b90b      	cbnz	r3, 1a00258c <vPortExitCritical+0x24>
	__asm volatile
1a002588:	f383 8811 	msr	BASEPRI, r3
}
1a00258c:	4770      	bx	lr
1a00258e:	bf00      	nop
1a002590:	10000000 	.word	0x10000000
1a002594:	ffffffff 	.word	0xffffffff
1a002598:	ffffffff 	.word	0xffffffff
1a00259c:	ffffffff 	.word	0xffffffff

1a0025a0 <PendSV_Handler>:
	__asm volatile
1a0025a0:	f3ef 8009 	mrs	r0, PSP
1a0025a4:	f3bf 8f6f 	isb	sy
1a0025a8:	4b15      	ldr	r3, [pc, #84]	; (1a002600 <pxCurrentTCBConst>)
1a0025aa:	681a      	ldr	r2, [r3, #0]
1a0025ac:	f01e 0f10 	tst.w	lr, #16
1a0025b0:	bf08      	it	eq
1a0025b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0025b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0025ba:	6010      	str	r0, [r2, #0]
1a0025bc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0025c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0025c4:	f380 8811 	msr	BASEPRI, r0
1a0025c8:	f3bf 8f4f 	dsb	sy
1a0025cc:	f3bf 8f6f 	isb	sy
1a0025d0:	f7ff fb3e 	bl	1a001c50 <vTaskSwitchContext>
1a0025d4:	f04f 0000 	mov.w	r0, #0
1a0025d8:	f380 8811 	msr	BASEPRI, r0
1a0025dc:	bc09      	pop	{r0, r3}
1a0025de:	6819      	ldr	r1, [r3, #0]
1a0025e0:	6808      	ldr	r0, [r1, #0]
1a0025e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0025e6:	f01e 0f10 	tst.w	lr, #16
1a0025ea:	bf08      	it	eq
1a0025ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0025f0:	f380 8809 	msr	PSP, r0
1a0025f4:	f3bf 8f6f 	isb	sy
1a0025f8:	4770      	bx	lr
1a0025fa:	bf00      	nop
1a0025fc:	f3af 8000 	nop.w

1a002600 <pxCurrentTCBConst>:
1a002600:	10002994 	.word	0x10002994

1a002604 <SysTick_Handler>:
{
1a002604:	b508      	push	{r3, lr}
	__asm volatile
1a002606:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00260a:	f383 8811 	msr	BASEPRI, r3
1a00260e:	f3bf 8f6f 	isb	sy
1a002612:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002616:	f7ff f99d 	bl	1a001954 <xTaskIncrementTick>
1a00261a:	b118      	cbz	r0, 1a002624 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00261c:	4b03      	ldr	r3, [pc, #12]	; (1a00262c <SysTick_Handler+0x28>)
1a00261e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002622:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002624:	2300      	movs	r3, #0
1a002626:	f383 8811 	msr	BASEPRI, r3
}
1a00262a:	bd08      	pop	{r3, pc}
1a00262c:	e000ed04 	.word	0xe000ed04

1a002630 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002630:	4a08      	ldr	r2, [pc, #32]	; (1a002654 <vPortSetupTimerInterrupt+0x24>)
1a002632:	2300      	movs	r3, #0
1a002634:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002636:	4908      	ldr	r1, [pc, #32]	; (1a002658 <vPortSetupTimerInterrupt+0x28>)
1a002638:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00263a:	4b08      	ldr	r3, [pc, #32]	; (1a00265c <vPortSetupTimerInterrupt+0x2c>)
1a00263c:	681b      	ldr	r3, [r3, #0]
1a00263e:	4908      	ldr	r1, [pc, #32]	; (1a002660 <vPortSetupTimerInterrupt+0x30>)
1a002640:	fba1 1303 	umull	r1, r3, r1, r3
1a002644:	099b      	lsrs	r3, r3, #6
1a002646:	3b01      	subs	r3, #1
1a002648:	4906      	ldr	r1, [pc, #24]	; (1a002664 <vPortSetupTimerInterrupt+0x34>)
1a00264a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00264c:	2307      	movs	r3, #7
1a00264e:	6013      	str	r3, [r2, #0]
}
1a002650:	4770      	bx	lr
1a002652:	bf00      	nop
1a002654:	e000e010 	.word	0xe000e010
1a002658:	e000e018 	.word	0xe000e018
1a00265c:	10002c78 	.word	0x10002c78
1a002660:	10624dd3 	.word	0x10624dd3
1a002664:	e000e014 	.word	0xe000e014

1a002668 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002668:	4b3a      	ldr	r3, [pc, #232]	; (1a002754 <xPortStartScheduler+0xec>)
1a00266a:	681a      	ldr	r2, [r3, #0]
1a00266c:	4b3a      	ldr	r3, [pc, #232]	; (1a002758 <xPortStartScheduler+0xf0>)
1a00266e:	429a      	cmp	r2, r3
1a002670:	d00d      	beq.n	1a00268e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002672:	4b38      	ldr	r3, [pc, #224]	; (1a002754 <xPortStartScheduler+0xec>)
1a002674:	681a      	ldr	r2, [r3, #0]
1a002676:	4b39      	ldr	r3, [pc, #228]	; (1a00275c <xPortStartScheduler+0xf4>)
1a002678:	429a      	cmp	r2, r3
1a00267a:	d111      	bne.n	1a0026a0 <xPortStartScheduler+0x38>
	__asm volatile
1a00267c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002680:	f383 8811 	msr	BASEPRI, r3
1a002684:	f3bf 8f6f 	isb	sy
1a002688:	f3bf 8f4f 	dsb	sy
1a00268c:	e7fe      	b.n	1a00268c <xPortStartScheduler+0x24>
1a00268e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002692:	f383 8811 	msr	BASEPRI, r3
1a002696:	f3bf 8f6f 	isb	sy
1a00269a:	f3bf 8f4f 	dsb	sy
1a00269e:	e7fe      	b.n	1a00269e <xPortStartScheduler+0x36>
{
1a0026a0:	b510      	push	{r4, lr}
1a0026a2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0026a4:	4b2e      	ldr	r3, [pc, #184]	; (1a002760 <xPortStartScheduler+0xf8>)
1a0026a6:	781a      	ldrb	r2, [r3, #0]
1a0026a8:	b2d2      	uxtb	r2, r2
1a0026aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0026ac:	22ff      	movs	r2, #255	; 0xff
1a0026ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a0026b0:	781b      	ldrb	r3, [r3, #0]
1a0026b2:	b2db      	uxtb	r3, r3
1a0026b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a0026b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0026bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a0026c0:	4a28      	ldr	r2, [pc, #160]	; (1a002764 <xPortStartScheduler+0xfc>)
1a0026c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0026c4:	4b28      	ldr	r3, [pc, #160]	; (1a002768 <xPortStartScheduler+0x100>)
1a0026c6:	2207      	movs	r2, #7
1a0026c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0026ca:	e009      	b.n	1a0026e0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a0026cc:	4a26      	ldr	r2, [pc, #152]	; (1a002768 <xPortStartScheduler+0x100>)
1a0026ce:	6813      	ldr	r3, [r2, #0]
1a0026d0:	3b01      	subs	r3, #1
1a0026d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0026d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0026d8:	005b      	lsls	r3, r3, #1
1a0026da:	b2db      	uxtb	r3, r3
1a0026dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0026e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0026e4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0026e8:	d1f0      	bne.n	1a0026cc <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0026ea:	4b1f      	ldr	r3, [pc, #124]	; (1a002768 <xPortStartScheduler+0x100>)
1a0026ec:	681b      	ldr	r3, [r3, #0]
1a0026ee:	2b04      	cmp	r3, #4
1a0026f0:	d008      	beq.n	1a002704 <xPortStartScheduler+0x9c>
1a0026f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026f6:	f383 8811 	msr	BASEPRI, r3
1a0026fa:	f3bf 8f6f 	isb	sy
1a0026fe:	f3bf 8f4f 	dsb	sy
1a002702:	e7fe      	b.n	1a002702 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002704:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00270a:	4a17      	ldr	r2, [pc, #92]	; (1a002768 <xPortStartScheduler+0x100>)
1a00270c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00270e:	9b01      	ldr	r3, [sp, #4]
1a002710:	b2db      	uxtb	r3, r3
1a002712:	4a13      	ldr	r2, [pc, #76]	; (1a002760 <xPortStartScheduler+0xf8>)
1a002714:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002716:	4b15      	ldr	r3, [pc, #84]	; (1a00276c <xPortStartScheduler+0x104>)
1a002718:	681a      	ldr	r2, [r3, #0]
1a00271a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00271e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002720:	681a      	ldr	r2, [r3, #0]
1a002722:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002726:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002728:	f7ff ff82 	bl	1a002630 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00272c:	2400      	movs	r4, #0
1a00272e:	4b10      	ldr	r3, [pc, #64]	; (1a002770 <xPortStartScheduler+0x108>)
1a002730:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002732:	f7ff fec1 	bl	1a0024b8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002736:	4a0f      	ldr	r2, [pc, #60]	; (1a002774 <xPortStartScheduler+0x10c>)
1a002738:	6813      	ldr	r3, [r2, #0]
1a00273a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00273e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002740:	f7ff fea6 	bl	1a002490 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002744:	f7ff fa84 	bl	1a001c50 <vTaskSwitchContext>
	prvTaskExitError();
1a002748:	f7ff fe82 	bl	1a002450 <prvTaskExitError>
}
1a00274c:	4620      	mov	r0, r4
1a00274e:	b002      	add	sp, #8
1a002750:	bd10      	pop	{r4, pc}
1a002752:	bf00      	nop
1a002754:	e000ed00 	.word	0xe000ed00
1a002758:	410fc271 	.word	0x410fc271
1a00275c:	410fc270 	.word	0x410fc270
1a002760:	e000e400 	.word	0xe000e400
1a002764:	10002be8 	.word	0x10002be8
1a002768:	10002bec 	.word	0x10002bec
1a00276c:	e000ed20 	.word	0xe000ed20
1a002770:	10000000 	.word	0x10000000
1a002774:	e000ef34 	.word	0xe000ef34

1a002778 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002778:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00277c:	2b0f      	cmp	r3, #15
1a00277e:	d90f      	bls.n	1a0027a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002780:	4a10      	ldr	r2, [pc, #64]	; (1a0027c4 <vPortValidateInterruptPriority+0x4c>)
1a002782:	5c9b      	ldrb	r3, [r3, r2]
1a002784:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002786:	4a10      	ldr	r2, [pc, #64]	; (1a0027c8 <vPortValidateInterruptPriority+0x50>)
1a002788:	7812      	ldrb	r2, [r2, #0]
1a00278a:	429a      	cmp	r2, r3
1a00278c:	d908      	bls.n	1a0027a0 <vPortValidateInterruptPriority+0x28>
1a00278e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002792:	f383 8811 	msr	BASEPRI, r3
1a002796:	f3bf 8f6f 	isb	sy
1a00279a:	f3bf 8f4f 	dsb	sy
1a00279e:	e7fe      	b.n	1a00279e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0027a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0027cc <vPortValidateInterruptPriority+0x54>)
1a0027a2:	681b      	ldr	r3, [r3, #0]
1a0027a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0027a8:	4a09      	ldr	r2, [pc, #36]	; (1a0027d0 <vPortValidateInterruptPriority+0x58>)
1a0027aa:	6812      	ldr	r2, [r2, #0]
1a0027ac:	4293      	cmp	r3, r2
1a0027ae:	d908      	bls.n	1a0027c2 <vPortValidateInterruptPriority+0x4a>
1a0027b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0027b4:	f383 8811 	msr	BASEPRI, r3
1a0027b8:	f3bf 8f6f 	isb	sy
1a0027bc:	f3bf 8f4f 	dsb	sy
1a0027c0:	e7fe      	b.n	1a0027c0 <vPortValidateInterruptPriority+0x48>
	}
1a0027c2:	4770      	bx	lr
1a0027c4:	e000e3f0 	.word	0xe000e3f0
1a0027c8:	10002be8 	.word	0x10002be8
1a0027cc:	e000ed0c 	.word	0xe000ed0c
1a0027d0:	10002bec 	.word	0x10002bec

1a0027d4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0027d4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0027d6:	4b05      	ldr	r3, [pc, #20]	; (1a0027ec <DAC_IRQHandler+0x18>)
1a0027d8:	2201      	movs	r2, #1
1a0027da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0027de:	4b04      	ldr	r3, [pc, #16]	; (1a0027f0 <DAC_IRQHandler+0x1c>)
1a0027e0:	681b      	ldr	r3, [r3, #0]
1a0027e2:	b113      	cbz	r3, 1a0027ea <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0027e4:	4b02      	ldr	r3, [pc, #8]	; (1a0027f0 <DAC_IRQHandler+0x1c>)
1a0027e6:	681b      	ldr	r3, [r3, #0]
1a0027e8:	4798      	blx	r3
   }
}
1a0027ea:	bd08      	pop	{r3, pc}
1a0027ec:	e000e100 	.word	0xe000e100
1a0027f0:	10002bf0 	.word	0x10002bf0

1a0027f4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0027f4:	2200      	movs	r2, #0
1a0027f6:	2a05      	cmp	r2, #5
1a0027f8:	d819      	bhi.n	1a00282e <Board_LED_Init+0x3a>
{
1a0027fa:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0027fc:	490c      	ldr	r1, [pc, #48]	; (1a002830 <Board_LED_Init+0x3c>)
1a0027fe:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002802:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002806:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002808:	4b0a      	ldr	r3, [pc, #40]	; (1a002834 <Board_LED_Init+0x40>)
1a00280a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00280e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002812:	2001      	movs	r0, #1
1a002814:	40a0      	lsls	r0, r4
1a002816:	4301      	orrs	r1, r0
1a002818:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00281c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002820:	2100      	movs	r1, #0
1a002822:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002824:	3201      	adds	r2, #1
1a002826:	2a05      	cmp	r2, #5
1a002828:	d9e8      	bls.n	1a0027fc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00282a:	bc70      	pop	{r4, r5, r6}
1a00282c:	4770      	bx	lr
1a00282e:	4770      	bx	lr
1a002830:	1a00502c 	.word	0x1a00502c
1a002834:	400f4000 	.word	0x400f4000

1a002838 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002838:	2300      	movs	r3, #0
1a00283a:	2b03      	cmp	r3, #3
1a00283c:	d816      	bhi.n	1a00286c <Board_TEC_Init+0x34>
{
1a00283e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002840:	490b      	ldr	r1, [pc, #44]	; (1a002870 <Board_TEC_Init+0x38>)
1a002842:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002846:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00284a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00284c:	4c09      	ldr	r4, [pc, #36]	; (1a002874 <Board_TEC_Init+0x3c>)
1a00284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002852:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002856:	2001      	movs	r0, #1
1a002858:	40a8      	lsls	r0, r5
1a00285a:	ea21 0100 	bic.w	r1, r1, r0
1a00285e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002862:	3301      	adds	r3, #1
1a002864:	2b03      	cmp	r3, #3
1a002866:	d9eb      	bls.n	1a002840 <Board_TEC_Init+0x8>
   }
}
1a002868:	bc30      	pop	{r4, r5}
1a00286a:	4770      	bx	lr
1a00286c:	4770      	bx	lr
1a00286e:	bf00      	nop
1a002870:	1a005024 	.word	0x1a005024
1a002874:	400f4000 	.word	0x400f4000

1a002878 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002878:	2300      	movs	r3, #0
1a00287a:	2b08      	cmp	r3, #8
1a00287c:	d816      	bhi.n	1a0028ac <Board_GPIO_Init+0x34>
{
1a00287e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002880:	490b      	ldr	r1, [pc, #44]	; (1a0028b0 <Board_GPIO_Init+0x38>)
1a002882:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002886:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00288a:	784d      	ldrb	r5, [r1, #1]
1a00288c:	4c09      	ldr	r4, [pc, #36]	; (1a0028b4 <Board_GPIO_Init+0x3c>)
1a00288e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002892:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002896:	2001      	movs	r0, #1
1a002898:	40a8      	lsls	r0, r5
1a00289a:	ea21 0100 	bic.w	r1, r1, r0
1a00289e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0028a2:	3301      	adds	r3, #1
1a0028a4:	2b08      	cmp	r3, #8
1a0028a6:	d9eb      	bls.n	1a002880 <Board_GPIO_Init+0x8>
   }
}
1a0028a8:	bc30      	pop	{r4, r5}
1a0028aa:	4770      	bx	lr
1a0028ac:	4770      	bx	lr
1a0028ae:	bf00      	nop
1a0028b0:	1a005038 	.word	0x1a005038
1a0028b4:	400f4000 	.word	0x400f4000

1a0028b8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0028b8:	b510      	push	{r4, lr}
1a0028ba:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0028bc:	4c08      	ldr	r4, [pc, #32]	; (1a0028e0 <Board_ADC_Init+0x28>)
1a0028be:	4669      	mov	r1, sp
1a0028c0:	4620      	mov	r0, r4
1a0028c2:	f000 fa1d 	bl	1a002d00 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0028c6:	4a07      	ldr	r2, [pc, #28]	; (1a0028e4 <Board_ADC_Init+0x2c>)
1a0028c8:	4669      	mov	r1, sp
1a0028ca:	4620      	mov	r0, r4
1a0028cc:	f000 fa38 	bl	1a002d40 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0028d0:	2200      	movs	r2, #0
1a0028d2:	4669      	mov	r1, sp
1a0028d4:	4620      	mov	r0, r4
1a0028d6:	f000 fa4c 	bl	1a002d72 <Chip_ADC_SetResolution>
}
1a0028da:	b002      	add	sp, #8
1a0028dc:	bd10      	pop	{r4, pc}
1a0028de:	bf00      	nop
1a0028e0:	400e3000 	.word	0x400e3000
1a0028e4:	00061a80 	.word	0x00061a80

1a0028e8 <Board_SPI_Init>:
{
1a0028e8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0028ea:	4c0b      	ldr	r4, [pc, #44]	; (1a002918 <Board_SPI_Init+0x30>)
1a0028ec:	4620      	mov	r0, r4
1a0028ee:	f000 fe03 	bl	1a0034f8 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0028f2:	6863      	ldr	r3, [r4, #4]
1a0028f4:	f023 0304 	bic.w	r3, r3, #4
1a0028f8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0028fa:	6823      	ldr	r3, [r4, #0]
1a0028fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002900:	f043 0307 	orr.w	r3, r3, #7
1a002904:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002906:	4905      	ldr	r1, [pc, #20]	; (1a00291c <Board_SPI_Init+0x34>)
1a002908:	4620      	mov	r0, r4
1a00290a:	f000 fdd6 	bl	1a0034ba <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00290e:	6863      	ldr	r3, [r4, #4]
1a002910:	f043 0302 	orr.w	r3, r3, #2
1a002914:	6063      	str	r3, [r4, #4]
}
1a002916:	bd10      	pop	{r4, pc}
1a002918:	400c5000 	.word	0x400c5000
1a00291c:	000186a0 	.word	0x000186a0

1a002920 <Board_I2C_Init>:
{
1a002920:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002922:	2000      	movs	r0, #0
1a002924:	f000 f8c6 	bl	1a002ab4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002928:	4b04      	ldr	r3, [pc, #16]	; (1a00293c <Board_I2C_Init+0x1c>)
1a00292a:	f640 0208 	movw	r2, #2056	; 0x808
1a00292e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002932:	4903      	ldr	r1, [pc, #12]	; (1a002940 <Board_I2C_Init+0x20>)
1a002934:	2000      	movs	r0, #0
1a002936:	f000 f8cf 	bl	1a002ad8 <Chip_I2C_SetClockRate>
}
1a00293a:	bd08      	pop	{r3, pc}
1a00293c:	40086000 	.word	0x40086000
1a002940:	000f4240 	.word	0x000f4240

1a002944 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002944:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002946:	4c07      	ldr	r4, [pc, #28]	; (1a002964 <Board_Debug_Init+0x20>)
1a002948:	4620      	mov	r0, r4
1a00294a:	f000 f8f7 	bl	1a002b3c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00294e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002952:	4620      	mov	r0, r4
1a002954:	f000 f93c 	bl	1a002bd0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002958:	2303      	movs	r3, #3
1a00295a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00295c:	2301      	movs	r3, #1
1a00295e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002960:	bd10      	pop	{r4, pc}
1a002962:	bf00      	nop
1a002964:	400c1000 	.word	0x400c1000

1a002968 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002968:	4b03      	ldr	r3, [pc, #12]	; (1a002978 <Board_UARTPutChar+0x10>)
1a00296a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00296c:	f013 0f20 	tst.w	r3, #32
1a002970:	d0fa      	beq.n	1a002968 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002972:	4b01      	ldr	r3, [pc, #4]	; (1a002978 <Board_UARTPutChar+0x10>)
1a002974:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002976:	4770      	bx	lr
1a002978:	400c1000 	.word	0x400c1000

1a00297c <Board_UARTGetChar>:
	return pUART->LSR;
1a00297c:	4b05      	ldr	r3, [pc, #20]	; (1a002994 <Board_UARTGetChar+0x18>)
1a00297e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002980:	f013 0f01 	tst.w	r3, #1
1a002984:	d003      	beq.n	1a00298e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002986:	4b03      	ldr	r3, [pc, #12]	; (1a002994 <Board_UARTGetChar+0x18>)
1a002988:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00298a:	b2c0      	uxtb	r0, r0
1a00298c:	4770      	bx	lr
   }
   return EOF;
1a00298e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002992:	4770      	bx	lr
1a002994:	400c1000 	.word	0x400c1000

1a002998 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002998:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00299a:	f7ff ffd3 	bl	1a002944 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00299e:	4809      	ldr	r0, [pc, #36]	; (1a0029c4 <Board_Init+0x2c>)
1a0029a0:	f000 fd6a 	bl	1a003478 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0029a4:	f7ff ff68 	bl	1a002878 <Board_GPIO_Init>
   Board_ADC_Init();
1a0029a8:	f7ff ff86 	bl	1a0028b8 <Board_ADC_Init>
   Board_SPI_Init();
1a0029ac:	f7ff ff9c 	bl	1a0028e8 <Board_SPI_Init>
   Board_I2C_Init();
1a0029b0:	f7ff ffb6 	bl	1a002920 <Board_I2C_Init>

   Board_LED_Init();
1a0029b4:	f7ff ff1e 	bl	1a0027f4 <Board_LED_Init>
   Board_TEC_Init();
1a0029b8:	f7ff ff3e 	bl	1a002838 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0029bc:	f000 fca8 	bl	1a003310 <SystemCoreClockUpdate>
}
1a0029c0:	bd08      	pop	{r3, pc}
1a0029c2:	bf00      	nop
1a0029c4:	400f4000 	.word	0x400f4000

1a0029c8 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a0029c8:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a0029ca:	b2c0      	uxtb	r0, r0
1a0029cc:	f7ff ffcc 	bl	1a002968 <Board_UARTPutChar>
}
1a0029d0:	bd08      	pop	{r3, pc}

1a0029d2 <__stdio_getchar>:

int __stdio_getchar()
{
1a0029d2:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0029d4:	f7ff ffd2 	bl	1a00297c <Board_UARTGetChar>
}
1a0029d8:	bd08      	pop	{r3, pc}

1a0029da <__stdio_init>:

void __stdio_init()
{
1a0029da:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0029dc:	f7ff ffb2 	bl	1a002944 <Board_Debug_Init>
1a0029e0:	bd08      	pop	{r3, pc}
1a0029e2:	Address 0x000000001a0029e2 is out of bounds.


1a0029e4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0029e4:	2300      	movs	r3, #0
1a0029e6:	2b1c      	cmp	r3, #28
1a0029e8:	d812      	bhi.n	1a002a10 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0029ea:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0029ec:	4a09      	ldr	r2, [pc, #36]	; (1a002a14 <Board_SetupMuxing+0x30>)
1a0029ee:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0029f2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0029f6:	784a      	ldrb	r2, [r1, #1]
1a0029f8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0029fa:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0029fe:	4906      	ldr	r1, [pc, #24]	; (1a002a18 <Board_SetupMuxing+0x34>)
1a002a00:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002a04:	3301      	adds	r3, #1
1a002a06:	2b1c      	cmp	r3, #28
1a002a08:	d9f0      	bls.n	1a0029ec <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002a0e:	4770      	bx	lr
1a002a10:	4770      	bx	lr
1a002a12:	bf00      	nop
1a002a14:	1a005054 	.word	0x1a005054
1a002a18:	40086000 	.word	0x40086000

1a002a1c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002a1c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002a1e:	4a17      	ldr	r2, [pc, #92]	; (1a002a7c <Board_SetupClocking+0x60>)
1a002a20:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002a28:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002a2c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002a30:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002a38:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002a3c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002a40:	2201      	movs	r2, #1
1a002a42:	490f      	ldr	r1, [pc, #60]	; (1a002a80 <Board_SetupClocking+0x64>)
1a002a44:	2006      	movs	r0, #6
1a002a46:	f000 fc6d 	bl	1a003324 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002a4a:	2400      	movs	r4, #0
1a002a4c:	b14c      	cbz	r4, 1a002a62 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002a4e:	4b0b      	ldr	r3, [pc, #44]	; (1a002a7c <Board_SetupClocking+0x60>)
1a002a50:	685a      	ldr	r2, [r3, #4]
1a002a52:	f022 020c 	bic.w	r2, r2, #12
1a002a56:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002a58:	685a      	ldr	r2, [r3, #4]
1a002a5a:	f042 0203 	orr.w	r2, r2, #3
1a002a5e:	605a      	str	r2, [r3, #4]
}
1a002a60:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002a62:	4808      	ldr	r0, [pc, #32]	; (1a002a84 <Board_SetupClocking+0x68>)
1a002a64:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002a68:	2301      	movs	r3, #1
1a002a6a:	788a      	ldrb	r2, [r1, #2]
1a002a6c:	7849      	ldrb	r1, [r1, #1]
1a002a6e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002a72:	f000 fba9 	bl	1a0031c8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002a76:	3401      	adds	r4, #1
1a002a78:	e7e8      	b.n	1a002a4c <Board_SetupClocking+0x30>
1a002a7a:	bf00      	nop
1a002a7c:	40043000 	.word	0x40043000
1a002a80:	0c28cb00 	.word	0x0c28cb00
1a002a84:	1a005050 	.word	0x1a005050

1a002a88 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002a88:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002a8a:	f7ff ffab 	bl	1a0029e4 <Board_SetupMuxing>
    Board_SetupClocking();
1a002a8e:	f7ff ffc5 	bl	1a002a1c <Board_SetupClocking>
}
1a002a92:	bd08      	pop	{r3, pc}

1a002a94 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002a94:	2901      	cmp	r1, #1
1a002a96:	d000      	beq.n	1a002a9a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002a98:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002a9a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002a9e:	0082      	lsls	r2, r0, #2
1a002aa0:	4b03      	ldr	r3, [pc, #12]	; (1a002ab0 <Chip_I2C_EventHandler+0x1c>)
1a002aa2:	4413      	add	r3, r2
1a002aa4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a002aa6:	7d13      	ldrb	r3, [r2, #20]
1a002aa8:	b2db      	uxtb	r3, r3
1a002aaa:	2b04      	cmp	r3, #4
1a002aac:	d0fb      	beq.n	1a002aa6 <Chip_I2C_EventHandler+0x12>
1a002aae:	e7f3      	b.n	1a002a98 <Chip_I2C_EventHandler+0x4>
1a002ab0:	10000004 	.word	0x10000004

1a002ab4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002ab4:	b570      	push	{r4, r5, r6, lr}
1a002ab6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002ab8:	4e06      	ldr	r6, [pc, #24]	; (1a002ad4 <Chip_I2C_Init+0x20>)
1a002aba:	00c4      	lsls	r4, r0, #3
1a002abc:	1a22      	subs	r2, r4, r0
1a002abe:	0093      	lsls	r3, r2, #2
1a002ac0:	4433      	add	r3, r6
1a002ac2:	8898      	ldrh	r0, [r3, #4]
1a002ac4:	f000 fbe4 	bl	1a003290 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002ac8:	1b64      	subs	r4, r4, r5
1a002aca:	00a3      	lsls	r3, r4, #2
1a002acc:	58f3      	ldr	r3, [r6, r3]
1a002ace:	226c      	movs	r2, #108	; 0x6c
1a002ad0:	619a      	str	r2, [r3, #24]
}
1a002ad2:	bd70      	pop	{r4, r5, r6, pc}
1a002ad4:	10000004 	.word	0x10000004

1a002ad8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002adc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002ade:	4e0b      	ldr	r6, [pc, #44]	; (1a002b0c <Chip_I2C_SetClockRate+0x34>)
1a002ae0:	00c5      	lsls	r5, r0, #3
1a002ae2:	1a2b      	subs	r3, r5, r0
1a002ae4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002ae8:	eb06 0308 	add.w	r3, r6, r8
1a002aec:	8898      	ldrh	r0, [r3, #4]
1a002aee:	f000 fbe9 	bl	1a0032c4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002af2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002af6:	f856 3008 	ldr.w	r3, [r6, r8]
1a002afa:	0842      	lsrs	r2, r0, #1
1a002afc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002afe:	f856 3008 	ldr.w	r3, [r6, r8]
1a002b02:	691a      	ldr	r2, [r3, #16]
1a002b04:	1a80      	subs	r0, r0, r2
1a002b06:	6158      	str	r0, [r3, #20]
}
1a002b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002b0c:	10000004 	.word	0x10000004

1a002b10 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002b10:	4b09      	ldr	r3, [pc, #36]	; (1a002b38 <Chip_UART_GetIndex+0x28>)
1a002b12:	4298      	cmp	r0, r3
1a002b14:	d009      	beq.n	1a002b2a <Chip_UART_GetIndex+0x1a>
1a002b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002b1a:	4298      	cmp	r0, r3
1a002b1c:	d007      	beq.n	1a002b2e <Chip_UART_GetIndex+0x1e>
1a002b1e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002b22:	4298      	cmp	r0, r3
1a002b24:	d005      	beq.n	1a002b32 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002b26:	2000      	movs	r0, #0
1a002b28:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002b2a:	2002      	movs	r0, #2
1a002b2c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002b2e:	2003      	movs	r0, #3
1a002b30:	4770      	bx	lr
			return 1;
1a002b32:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002b34:	4770      	bx	lr
1a002b36:	bf00      	nop
1a002b38:	400c1000 	.word	0x400c1000

1a002b3c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002b3c:	b530      	push	{r4, r5, lr}
1a002b3e:	b083      	sub	sp, #12
1a002b40:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002b42:	f7ff ffe5 	bl	1a002b10 <Chip_UART_GetIndex>
1a002b46:	2301      	movs	r3, #1
1a002b48:	461a      	mov	r2, r3
1a002b4a:	4619      	mov	r1, r3
1a002b4c:	4d0e      	ldr	r5, [pc, #56]	; (1a002b88 <Chip_UART_Init+0x4c>)
1a002b4e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002b52:	f000 fb7f 	bl	1a003254 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002b56:	2307      	movs	r3, #7
1a002b58:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002b5a:	2300      	movs	r3, #0
1a002b5c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002b5e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002b60:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002b62:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002b64:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002b66:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002b68:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002b6a:	4b08      	ldr	r3, [pc, #32]	; (1a002b8c <Chip_UART_Init+0x50>)
1a002b6c:	429c      	cmp	r4, r3
1a002b6e:	d006      	beq.n	1a002b7e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002b70:	2303      	movs	r3, #3
1a002b72:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002b74:	2310      	movs	r3, #16
1a002b76:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002b78:	9b01      	ldr	r3, [sp, #4]
}
1a002b7a:	b003      	add	sp, #12
1a002b7c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002b7e:	2300      	movs	r3, #0
1a002b80:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002b82:	69a3      	ldr	r3, [r4, #24]
1a002b84:	9301      	str	r3, [sp, #4]
1a002b86:	e7f3      	b.n	1a002b70 <Chip_UART_Init+0x34>
1a002b88:	1a0050d0 	.word	0x1a0050d0
1a002b8c:	40082000 	.word	0x40082000

1a002b90 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002b90:	b538      	push	{r3, r4, r5, lr}
1a002b92:	4605      	mov	r5, r0
1a002b94:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002b96:	f7ff ffbb 	bl	1a002b10 <Chip_UART_GetIndex>
1a002b9a:	4b0c      	ldr	r3, [pc, #48]	; (1a002bcc <Chip_UART_SetBaud+0x3c>)
1a002b9c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002ba0:	f000 fb90 	bl	1a0032c4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002ba4:	0123      	lsls	r3, r4, #4
1a002ba6:	fbb0 f3f3 	udiv	r3, r0, r3
1a002baa:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002bac:	68ea      	ldr	r2, [r5, #12]
1a002bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002bb2:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002bb4:	6029      	str	r1, [r5, #0]
1a002bb6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002bba:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002bbc:	68ea      	ldr	r2, [r5, #12]
1a002bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002bc2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002bc4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002bc8:	0900      	lsrs	r0, r0, #4
1a002bca:	bd38      	pop	{r3, r4, r5, pc}
1a002bcc:	1a0050c8 	.word	0x1a0050c8

1a002bd0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002bd4:	b083      	sub	sp, #12
1a002bd6:	4683      	mov	fp, r0
1a002bd8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002bda:	f7ff ff99 	bl	1a002b10 <Chip_UART_GetIndex>
1a002bde:	4b35      	ldr	r3, [pc, #212]	; (1a002cb4 <Chip_UART_SetBaudFDR+0xe4>)
1a002be0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002be4:	f000 fb6e 	bl	1a0032c4 <Chip_Clock_GetRate>
1a002be8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002bea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002bee:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002bf0:	2300      	movs	r3, #0
1a002bf2:	9301      	str	r3, [sp, #4]
1a002bf4:	46a2      	mov	sl, r4
1a002bf6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002bf8:	e02a      	b.n	1a002c50 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002bfa:	4242      	negs	r2, r0
				div ++;
1a002bfc:	1c4b      	adds	r3, r1, #1
1a002bfe:	e017      	b.n	1a002c30 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002c00:	b30a      	cbz	r2, 1a002c46 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002c02:	4617      	mov	r7, r2
			sd = d;
1a002c04:	9501      	str	r5, [sp, #4]
			sm = m;
1a002c06:	46a2      	mov	sl, r4
			sdiv = div;
1a002c08:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002c0a:	3501      	adds	r5, #1
1a002c0c:	42ac      	cmp	r4, r5
1a002c0e:	d91e      	bls.n	1a002c4e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002c10:	0933      	lsrs	r3, r6, #4
1a002c12:	0730      	lsls	r0, r6, #28
1a002c14:	fba4 0100 	umull	r0, r1, r4, r0
1a002c18:	fb04 1103 	mla	r1, r4, r3, r1
1a002c1c:	1962      	adds	r2, r4, r5
1a002c1e:	fb08 f202 	mul.w	r2, r8, r2
1a002c22:	2300      	movs	r3, #0
1a002c24:	f001 f8b4 	bl	1a003d90 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002c28:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002c2a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002c2c:	2800      	cmp	r0, #0
1a002c2e:	dbe4      	blt.n	1a002bfa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002c30:	4297      	cmp	r7, r2
1a002c32:	d3ea      	bcc.n	1a002c0a <Chip_UART_SetBaudFDR+0x3a>
1a002c34:	2b00      	cmp	r3, #0
1a002c36:	d0e8      	beq.n	1a002c0a <Chip_UART_SetBaudFDR+0x3a>
1a002c38:	0c19      	lsrs	r1, r3, #16
1a002c3a:	d1e6      	bne.n	1a002c0a <Chip_UART_SetBaudFDR+0x3a>
1a002c3c:	2b02      	cmp	r3, #2
1a002c3e:	d8df      	bhi.n	1a002c00 <Chip_UART_SetBaudFDR+0x30>
1a002c40:	2d00      	cmp	r5, #0
1a002c42:	d0dd      	beq.n	1a002c00 <Chip_UART_SetBaudFDR+0x30>
1a002c44:	e7e1      	b.n	1a002c0a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002c46:	4617      	mov	r7, r2
			sd = d;
1a002c48:	9501      	str	r5, [sp, #4]
			sm = m;
1a002c4a:	46a2      	mov	sl, r4
			sdiv = div;
1a002c4c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002c4e:	3401      	adds	r4, #1
1a002c50:	b11f      	cbz	r7, 1a002c5a <Chip_UART_SetBaudFDR+0x8a>
1a002c52:	2c0f      	cmp	r4, #15
1a002c54:	d801      	bhi.n	1a002c5a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002c56:	2500      	movs	r5, #0
1a002c58:	e7d8      	b.n	1a002c0c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002c5a:	f1b9 0f00 	cmp.w	r9, #0
1a002c5e:	d024      	beq.n	1a002caa <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002c60:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002c68:	f8cb 300c 	str.w	r3, [fp, #12]
1a002c6c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002c70:	f8cb 3000 	str.w	r3, [fp]
1a002c74:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002c78:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002c7c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002c84:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002c88:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002c8c:	b2db      	uxtb	r3, r3
1a002c8e:	9901      	ldr	r1, [sp, #4]
1a002c90:	f001 020f 	and.w	r2, r1, #15
1a002c94:	4313      	orrs	r3, r2
1a002c96:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002c9a:	0933      	lsrs	r3, r6, #4
1a002c9c:	fb0a f303 	mul.w	r3, sl, r3
1a002ca0:	448a      	add	sl, r1
1a002ca2:	fb09 f90a 	mul.w	r9, r9, sl
1a002ca6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002caa:	4648      	mov	r0, r9
1a002cac:	b003      	add	sp, #12
1a002cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002cb2:	bf00      	nop
1a002cb4:	1a0050c8 	.word	0x1a0050c8

1a002cb8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002cb8:	4b03      	ldr	r3, [pc, #12]	; (1a002cc8 <Chip_ADC_GetClockIndex+0x10>)
1a002cba:	4298      	cmp	r0, r3
1a002cbc:	d001      	beq.n	1a002cc2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002cbe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002cc0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002cc2:	2004      	movs	r0, #4
1a002cc4:	4770      	bx	lr
1a002cc6:	bf00      	nop
1a002cc8:	400e4000 	.word	0x400e4000

1a002ccc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002ccc:	b570      	push	{r4, r5, r6, lr}
1a002cce:	460d      	mov	r5, r1
1a002cd0:	4614      	mov	r4, r2
1a002cd2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002cd4:	f7ff fff0 	bl	1a002cb8 <Chip_ADC_GetClockIndex>
1a002cd8:	f000 faf4 	bl	1a0032c4 <Chip_Clock_GetRate>
	if (burstMode) {
1a002cdc:	b965      	cbnz	r5, 1a002cf8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002cde:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002ce2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002ce6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002cea:	0064      	lsls	r4, r4, #1
1a002cec:	fbb0 f0f4 	udiv	r0, r0, r4
1a002cf0:	b2c0      	uxtb	r0, r0
1a002cf2:	3801      	subs	r0, #1
	return div;
}
1a002cf4:	b2c0      	uxtb	r0, r0
1a002cf6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002cf8:	fb04 f406 	mul.w	r4, r4, r6
1a002cfc:	e7f3      	b.n	1a002ce6 <getClkDiv+0x1a>
1a002cfe:	Address 0x000000001a002cfe is out of bounds.


1a002d00 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002d00:	b538      	push	{r3, r4, r5, lr}
1a002d02:	4605      	mov	r5, r0
1a002d04:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002d06:	f7ff ffd7 	bl	1a002cb8 <Chip_ADC_GetClockIndex>
1a002d0a:	2301      	movs	r3, #1
1a002d0c:	461a      	mov	r2, r3
1a002d0e:	4619      	mov	r1, r3
1a002d10:	f000 faa0 	bl	1a003254 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002d14:	2100      	movs	r1, #0
1a002d16:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002d18:	4a08      	ldr	r2, [pc, #32]	; (1a002d3c <Chip_ADC_Init+0x3c>)
1a002d1a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002d1c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002d1e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002d20:	230b      	movs	r3, #11
1a002d22:	4628      	mov	r0, r5
1a002d24:	f7ff ffd2 	bl	1a002ccc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002d28:	0200      	lsls	r0, r0, #8
1a002d2a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002d2e:	7920      	ldrb	r0, [r4, #4]
1a002d30:	0440      	lsls	r0, r0, #17
1a002d32:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002d36:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002d38:	6028      	str	r0, [r5, #0]
}
1a002d3a:	bd38      	pop	{r3, r4, r5, pc}
1a002d3c:	00061a80 	.word	0x00061a80

1a002d40 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002d40:	b570      	push	{r4, r5, r6, lr}
1a002d42:	4605      	mov	r5, r0
1a002d44:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002d46:	6804      	ldr	r4, [r0, #0]
1a002d48:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002d4c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002d50:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002d52:	790b      	ldrb	r3, [r1, #4]
1a002d54:	f1c3 030b 	rsb	r3, r3, #11
1a002d58:	b2db      	uxtb	r3, r3
1a002d5a:	7949      	ldrb	r1, [r1, #5]
1a002d5c:	f7ff ffb6 	bl	1a002ccc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002d60:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002d64:	7930      	ldrb	r0, [r6, #4]
1a002d66:	0440      	lsls	r0, r0, #17
1a002d68:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002d6c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002d6e:	6028      	str	r0, [r5, #0]
}
1a002d70:	bd70      	pop	{r4, r5, r6, pc}

1a002d72 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002d72:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002d74:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002d76:	680a      	ldr	r2, [r1, #0]
1a002d78:	f7ff ffe2 	bl	1a002d40 <Chip_ADC_SetSampleRate>
}
1a002d7c:	bd08      	pop	{r3, pc}
1a002d7e:	Address 0x000000001a002d7e is out of bounds.


1a002d80 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002d80:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002d82:	680b      	ldr	r3, [r1, #0]
1a002d84:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002d88:	d002      	beq.n	1a002d90 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002d8e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002d90:	4607      	mov	r7, r0
1a002d92:	2501      	movs	r5, #1
1a002d94:	e03b      	b.n	1a002e0e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002d96:	694b      	ldr	r3, [r1, #20]
1a002d98:	fb03 f302 	mul.w	r3, r3, r2
1a002d9c:	fbb3 f3f5 	udiv	r3, r3, r5
1a002da0:	e014      	b.n	1a002dcc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002da2:	461c      	mov	r4, r3
1a002da4:	e020      	b.n	1a002de8 <pll_calc_divs+0x68>
		return -val;
1a002da6:	f1cc 0c00 	rsb	ip, ip, #0
1a002daa:	e020      	b.n	1a002dee <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002dac:	3201      	adds	r2, #1
1a002dae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002db2:	dc26      	bgt.n	1a002e02 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002db4:	680c      	ldr	r4, [r1, #0]
1a002db6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002dba:	d0ec      	beq.n	1a002d96 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002dbc:	1c73      	adds	r3, r6, #1
1a002dbe:	fa02 fc03 	lsl.w	ip, r2, r3
1a002dc2:	694b      	ldr	r3, [r1, #20]
1a002dc4:	fb03 f30c 	mul.w	r3, r3, ip
1a002dc8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002dcc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002e1c <pll_calc_divs+0x9c>
1a002dd0:	4563      	cmp	r3, ip
1a002dd2:	d9eb      	bls.n	1a002dac <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002dd4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002e20 <pll_calc_divs+0xa0>
1a002dd8:	4563      	cmp	r3, ip
1a002dda:	d812      	bhi.n	1a002e02 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002ddc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002de0:	d1df      	bne.n	1a002da2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002de2:	1c74      	adds	r4, r6, #1
1a002de4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002de8:	ebb0 0c04 	subs.w	ip, r0, r4
1a002dec:	d4db      	bmi.n	1a002da6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002dee:	4567      	cmp	r7, ip
1a002df0:	d9dc      	bls.n	1a002dac <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002df2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002df4:	1c77      	adds	r7, r6, #1
1a002df6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002df8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002dfa:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002dfc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002dfe:	4667      	mov	r7, ip
1a002e00:	e7d4      	b.n	1a002dac <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002e02:	3601      	adds	r6, #1
1a002e04:	2e03      	cmp	r6, #3
1a002e06:	dc01      	bgt.n	1a002e0c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002e08:	2201      	movs	r2, #1
1a002e0a:	e7d0      	b.n	1a002dae <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002e0c:	3501      	adds	r5, #1
1a002e0e:	2d04      	cmp	r5, #4
1a002e10:	dc01      	bgt.n	1a002e16 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002e12:	2600      	movs	r6, #0
1a002e14:	e7f6      	b.n	1a002e04 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002e16:	bcf0      	pop	{r4, r5, r6, r7}
1a002e18:	4770      	bx	lr
1a002e1a:	bf00      	nop
1a002e1c:	094c5eff 	.word	0x094c5eff
1a002e20:	1312d000 	.word	0x1312d000

1a002e24 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002e24:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002e26:	b099      	sub	sp, #100	; 0x64
1a002e28:	4605      	mov	r5, r0
1a002e2a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002e2c:	225c      	movs	r2, #92	; 0x5c
1a002e2e:	2100      	movs	r1, #0
1a002e30:	a801      	add	r0, sp, #4
1a002e32:	f001 fad6 	bl	1a0043e2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002e36:	2380      	movs	r3, #128	; 0x80
1a002e38:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002e3a:	6963      	ldr	r3, [r4, #20]
1a002e3c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002e3e:	7923      	ldrb	r3, [r4, #4]
1a002e40:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002e44:	4669      	mov	r1, sp
1a002e46:	4628      	mov	r0, r5
1a002e48:	f7ff ff9a 	bl	1a002d80 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002e4c:	9b06      	ldr	r3, [sp, #24]
1a002e4e:	42ab      	cmp	r3, r5
1a002e50:	d027      	beq.n	1a002ea2 <pll_get_frac+0x7e>
	if (val < 0)
1a002e52:	1aeb      	subs	r3, r5, r3
1a002e54:	d42e      	bmi.n	1a002eb4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002e56:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002e5e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002e60:	6963      	ldr	r3, [r4, #20]
1a002e62:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002e64:	7923      	ldrb	r3, [r4, #4]
1a002e66:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002e6a:	a910      	add	r1, sp, #64	; 0x40
1a002e6c:	4628      	mov	r0, r5
1a002e6e:	f7ff ff87 	bl	1a002d80 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002e72:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002e74:	42ab      	cmp	r3, r5
1a002e76:	d01f      	beq.n	1a002eb8 <pll_get_frac+0x94>
	if (val < 0)
1a002e78:	1aeb      	subs	r3, r5, r3
1a002e7a:	d425      	bmi.n	1a002ec8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002e7c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002e7e:	4b2b      	ldr	r3, [pc, #172]	; (1a002f2c <pll_get_frac+0x108>)
1a002e80:	429d      	cmp	r5, r3
1a002e82:	d923      	bls.n	1a002ecc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002e86:	1aed      	subs	r5, r5, r3
1a002e88:	d433      	bmi.n	1a002ef2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002e8a:	42ae      	cmp	r6, r5
1a002e8c:	dc3b      	bgt.n	1a002f06 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002e8e:	42be      	cmp	r6, r7
1a002e90:	dc31      	bgt.n	1a002ef6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002e92:	466d      	mov	r5, sp
1a002e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002ea0:	e006      	b.n	1a002eb0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002ea2:	466d      	mov	r5, sp
1a002ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ea8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002eac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002eb0:	b019      	add	sp, #100	; 0x64
1a002eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002eb4:	425b      	negs	r3, r3
1a002eb6:	e7ce      	b.n	1a002e56 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002eb8:	ad10      	add	r5, sp, #64	; 0x40
1a002eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ebe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002ec6:	e7f3      	b.n	1a002eb0 <pll_get_frac+0x8c>
		return -val;
1a002ec8:	425b      	negs	r3, r3
1a002eca:	e7d7      	b.n	1a002e7c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002ecc:	2340      	movs	r3, #64	; 0x40
1a002ece:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002ed0:	6963      	ldr	r3, [r4, #20]
1a002ed2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002ed4:	a908      	add	r1, sp, #32
1a002ed6:	4628      	mov	r0, r5
1a002ed8:	f7ff ff52 	bl	1a002d80 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002ede:	42ab      	cmp	r3, r5
1a002ee0:	d1d0      	bne.n	1a002e84 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002ee2:	ad08      	add	r5, sp, #32
1a002ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ee8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002eec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002ef0:	e7de      	b.n	1a002eb0 <pll_get_frac+0x8c>
		return -val;
1a002ef2:	426d      	negs	r5, r5
1a002ef4:	e7c9      	b.n	1a002e8a <pll_get_frac+0x66>
			*ppll = pll[2];
1a002ef6:	ad10      	add	r5, sp, #64	; 0x40
1a002ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002efc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002f04:	e7d4      	b.n	1a002eb0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002f06:	42af      	cmp	r7, r5
1a002f08:	db07      	blt.n	1a002f1a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002f0a:	ad08      	add	r5, sp, #32
1a002f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002f10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002f14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002f18:	e7ca      	b.n	1a002eb0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002f1a:	ad10      	add	r5, sp, #64	; 0x40
1a002f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002f20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002f28:	e7c2      	b.n	1a002eb0 <pll_get_frac+0x8c>
1a002f2a:	bf00      	nop
1a002f2c:	068e7780 	.word	0x068e7780

1a002f30 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002f30:	b430      	push	{r4, r5}
1a002f32:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002f34:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002f36:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002f38:	e000      	b.n	1a002f3c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002f3a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002f3c:	281c      	cmp	r0, #28
1a002f3e:	d118      	bne.n	1a002f72 <Chip_Clock_FindBaseClock+0x42>
1a002f40:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002f44:	0051      	lsls	r1, r2, #1
1a002f46:	4a0c      	ldr	r2, [pc, #48]	; (1a002f78 <Chip_Clock_FindBaseClock+0x48>)
1a002f48:	440a      	add	r2, r1
1a002f4a:	7914      	ldrb	r4, [r2, #4]
1a002f4c:	4284      	cmp	r4, r0
1a002f4e:	d010      	beq.n	1a002f72 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002f50:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002f54:	004a      	lsls	r2, r1, #1
1a002f56:	4908      	ldr	r1, [pc, #32]	; (1a002f78 <Chip_Clock_FindBaseClock+0x48>)
1a002f58:	5a8a      	ldrh	r2, [r1, r2]
1a002f5a:	42aa      	cmp	r2, r5
1a002f5c:	d8ed      	bhi.n	1a002f3a <Chip_Clock_FindBaseClock+0xa>
1a002f5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002f62:	0051      	lsls	r1, r2, #1
1a002f64:	4a04      	ldr	r2, [pc, #16]	; (1a002f78 <Chip_Clock_FindBaseClock+0x48>)
1a002f66:	440a      	add	r2, r1
1a002f68:	8852      	ldrh	r2, [r2, #2]
1a002f6a:	42aa      	cmp	r2, r5
1a002f6c:	d3e5      	bcc.n	1a002f3a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002f6e:	4620      	mov	r0, r4
1a002f70:	e7e4      	b.n	1a002f3c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002f72:	bc30      	pop	{r4, r5}
1a002f74:	4770      	bx	lr
1a002f76:	bf00      	nop
1a002f78:	1a0050e4 	.word	0x1a0050e4

1a002f7c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002f7c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002f82:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002f84:	4a0d      	ldr	r2, [pc, #52]	; (1a002fbc <Chip_Clock_EnableCrystal+0x40>)
1a002f86:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002f88:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002f8c:	6992      	ldr	r2, [r2, #24]
1a002f8e:	428a      	cmp	r2, r1
1a002f90:	d001      	beq.n	1a002f96 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002f92:	4a0a      	ldr	r2, [pc, #40]	; (1a002fbc <Chip_Clock_EnableCrystal+0x40>)
1a002f94:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002f96:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002f9a:	4a09      	ldr	r2, [pc, #36]	; (1a002fc0 <Chip_Clock_EnableCrystal+0x44>)
1a002f9c:	6811      	ldr	r1, [r2, #0]
1a002f9e:	4a09      	ldr	r2, [pc, #36]	; (1a002fc4 <Chip_Clock_EnableCrystal+0x48>)
1a002fa0:	4291      	cmp	r1, r2
1a002fa2:	d901      	bls.n	1a002fa8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002fa4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002fa8:	4a04      	ldr	r2, [pc, #16]	; (1a002fbc <Chip_Clock_EnableCrystal+0x40>)
1a002faa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002fac:	9b01      	ldr	r3, [sp, #4]
1a002fae:	1e5a      	subs	r2, r3, #1
1a002fb0:	9201      	str	r2, [sp, #4]
1a002fb2:	2b00      	cmp	r3, #0
1a002fb4:	d1fa      	bne.n	1a002fac <Chip_Clock_EnableCrystal+0x30>
}
1a002fb6:	b002      	add	sp, #8
1a002fb8:	4770      	bx	lr
1a002fba:	bf00      	nop
1a002fbc:	40050000 	.word	0x40050000
1a002fc0:	1a00504c 	.word	0x1a00504c
1a002fc4:	01312cff 	.word	0x01312cff

1a002fc8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002fc8:	3012      	adds	r0, #18
1a002fca:	4b05      	ldr	r3, [pc, #20]	; (1a002fe0 <Chip_Clock_GetDividerSource+0x18>)
1a002fcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002fd0:	f010 0f01 	tst.w	r0, #1
1a002fd4:	d102      	bne.n	1a002fdc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002fd6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002fda:	4770      	bx	lr
		return CLKINPUT_PD;
1a002fdc:	2011      	movs	r0, #17
}
1a002fde:	4770      	bx	lr
1a002fe0:	40050000 	.word	0x40050000

1a002fe4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002fe4:	f100 0212 	add.w	r2, r0, #18
1a002fe8:	4b03      	ldr	r3, [pc, #12]	; (1a002ff8 <Chip_Clock_GetDividerDivisor+0x14>)
1a002fea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002fee:	4b03      	ldr	r3, [pc, #12]	; (1a002ffc <Chip_Clock_GetDividerDivisor+0x18>)
1a002ff0:	5c18      	ldrb	r0, [r3, r0]
}
1a002ff2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002ff6:	4770      	bx	lr
1a002ff8:	40050000 	.word	0x40050000
1a002ffc:	1a0050dc 	.word	0x1a0050dc

1a003000 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003000:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003002:	2810      	cmp	r0, #16
1a003004:	d80a      	bhi.n	1a00301c <Chip_Clock_GetClockInputHz+0x1c>
1a003006:	e8df f000 	tbb	[pc, r0]
1a00300a:	0b42      	.short	0x0b42
1a00300c:	091f160d 	.word	0x091f160d
1a003010:	2b282522 	.word	0x2b282522
1a003014:	322e0909 	.word	0x322e0909
1a003018:	3a36      	.short	0x3a36
1a00301a:	3e          	.byte	0x3e
1a00301b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00301c:	2000      	movs	r0, #0
1a00301e:	e038      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003020:	481e      	ldr	r0, [pc, #120]	; (1a00309c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003022:	e036      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003024:	4b1e      	ldr	r3, [pc, #120]	; (1a0030a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003026:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00302a:	f003 0307 	and.w	r3, r3, #7
1a00302e:	2b04      	cmp	r3, #4
1a003030:	d130      	bne.n	1a003094 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003032:	2000      	movs	r0, #0
1a003034:	e02d      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003036:	4b1a      	ldr	r3, [pc, #104]	; (1a0030a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003038:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00303c:	f003 0307 	and.w	r3, r3, #7
1a003040:	2b04      	cmp	r3, #4
1a003042:	d029      	beq.n	1a003098 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003044:	4817      	ldr	r0, [pc, #92]	; (1a0030a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003046:	e024      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003048:	4b17      	ldr	r3, [pc, #92]	; (1a0030a8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00304a:	6818      	ldr	r0, [r3, #0]
		break;
1a00304c:	e021      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00304e:	4b17      	ldr	r3, [pc, #92]	; (1a0030ac <Chip_Clock_GetClockInputHz+0xac>)
1a003050:	6818      	ldr	r0, [r3, #0]
		break;
1a003052:	e01e      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003054:	4b16      	ldr	r3, [pc, #88]	; (1a0030b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003056:	6818      	ldr	r0, [r3, #0]
		break;
1a003058:	e01b      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00305a:	4b15      	ldr	r3, [pc, #84]	; (1a0030b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00305c:	6858      	ldr	r0, [r3, #4]
		break;
1a00305e:	e018      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003060:	f000 f86a 	bl	1a003138 <Chip_Clock_GetMainPLLHz>
		break;
1a003064:	e015      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003066:	2100      	movs	r1, #0
1a003068:	f000 f89c 	bl	1a0031a4 <Chip_Clock_GetDivRate>
		break;
1a00306c:	e011      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00306e:	2101      	movs	r1, #1
1a003070:	f000 f898 	bl	1a0031a4 <Chip_Clock_GetDivRate>
		break;
1a003074:	e00d      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003076:	2102      	movs	r1, #2
1a003078:	f000 f894 	bl	1a0031a4 <Chip_Clock_GetDivRate>
		break;
1a00307c:	e009      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00307e:	2103      	movs	r1, #3
1a003080:	f000 f890 	bl	1a0031a4 <Chip_Clock_GetDivRate>
		break;
1a003084:	e005      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003086:	2104      	movs	r1, #4
1a003088:	f000 f88c 	bl	1a0031a4 <Chip_Clock_GetDivRate>
		break;
1a00308c:	e001      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00308e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003092:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003094:	4803      	ldr	r0, [pc, #12]	; (1a0030a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003096:	e7fc      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003098:	4806      	ldr	r0, [pc, #24]	; (1a0030b4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00309a:	e7fa      	b.n	1a003092 <Chip_Clock_GetClockInputHz+0x92>
1a00309c:	00b71b00 	.word	0x00b71b00
1a0030a0:	40043000 	.word	0x40043000
1a0030a4:	017d7840 	.word	0x017d7840
1a0030a8:	1a005020 	.word	0x1a005020
1a0030ac:	1a00504c 	.word	0x1a00504c
1a0030b0:	10002bf4 	.word	0x10002bf4
1a0030b4:	02faf080 	.word	0x02faf080

1a0030b8 <Chip_Clock_CalcMainPLLValue>:
{
1a0030b8:	b538      	push	{r3, r4, r5, lr}
1a0030ba:	4605      	mov	r5, r0
1a0030bc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0030be:	7908      	ldrb	r0, [r1, #4]
1a0030c0:	f7ff ff9e 	bl	1a003000 <Chip_Clock_GetClockInputHz>
1a0030c4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0030c6:	4b19      	ldr	r3, [pc, #100]	; (1a00312c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0030c8:	442b      	add	r3, r5
1a0030ca:	4a19      	ldr	r2, [pc, #100]	; (1a003130 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0030cc:	4293      	cmp	r3, r2
1a0030ce:	d821      	bhi.n	1a003114 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0030d0:	b318      	cbz	r0, 1a00311a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0030d2:	2380      	movs	r3, #128	; 0x80
1a0030d4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0030d6:	2300      	movs	r3, #0
1a0030d8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0030da:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0030dc:	fbb5 f3f0 	udiv	r3, r5, r0
1a0030e0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0030e2:	4a14      	ldr	r2, [pc, #80]	; (1a003134 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0030e4:	4295      	cmp	r5, r2
1a0030e6:	d903      	bls.n	1a0030f0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0030e8:	fb03 f000 	mul.w	r0, r3, r0
1a0030ec:	42a8      	cmp	r0, r5
1a0030ee:	d007      	beq.n	1a003100 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0030f0:	4621      	mov	r1, r4
1a0030f2:	4628      	mov	r0, r5
1a0030f4:	f7ff fe96 	bl	1a002e24 <pll_get_frac>
		if (!ppll->nsel) {
1a0030f8:	68a3      	ldr	r3, [r4, #8]
1a0030fa:	b18b      	cbz	r3, 1a003120 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0030fc:	3b01      	subs	r3, #1
1a0030fe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003100:	6923      	ldr	r3, [r4, #16]
1a003102:	b183      	cbz	r3, 1a003126 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003104:	68e2      	ldr	r2, [r4, #12]
1a003106:	b10a      	cbz	r2, 1a00310c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003108:	3a01      	subs	r2, #1
1a00310a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00310c:	3b01      	subs	r3, #1
1a00310e:	6123      	str	r3, [r4, #16]
	return 0;
1a003110:	2000      	movs	r0, #0
}
1a003112:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003118:	e7fb      	b.n	1a003112 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00311a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00311e:	e7f8      	b.n	1a003112 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003124:	e7f5      	b.n	1a003112 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00312a:	e7f2      	b.n	1a003112 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00312c:	ff6b3a10 	.word	0xff6b3a10
1a003130:	0b940510 	.word	0x0b940510
1a003134:	094c5eff 	.word	0x094c5eff

1a003138 <Chip_Clock_GetMainPLLHz>:
{
1a003138:	b530      	push	{r4, r5, lr}
1a00313a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00313c:	4d17      	ldr	r5, [pc, #92]	; (1a00319c <Chip_Clock_GetMainPLLHz+0x64>)
1a00313e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003140:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003144:	f7ff ff5c 	bl	1a003000 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003148:	4b15      	ldr	r3, [pc, #84]	; (1a0031a0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00314a:	681b      	ldr	r3, [r3, #0]
1a00314c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00314e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003150:	f013 0f01 	tst.w	r3, #1
1a003154:	d01f      	beq.n	1a003196 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003156:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00315a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00315e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003162:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003166:	3301      	adds	r3, #1
	n = nsel + 1;
1a003168:	3201      	adds	r2, #1
	p = ptab[psel];
1a00316a:	f10d 0c08 	add.w	ip, sp, #8
1a00316e:	4461      	add	r1, ip
1a003170:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003174:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003178:	d108      	bne.n	1a00318c <Chip_Clock_GetMainPLLHz+0x54>
1a00317a:	b93d      	cbnz	r5, 1a00318c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00317c:	0049      	lsls	r1, r1, #1
1a00317e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003182:	fbb0 f0f2 	udiv	r0, r0, r2
1a003186:	fb00 f003 	mul.w	r0, r0, r3
1a00318a:	e005      	b.n	1a003198 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a00318c:	fbb0 f0f2 	udiv	r0, r0, r2
1a003190:	fb03 f000 	mul.w	r0, r3, r0
1a003194:	e000      	b.n	1a003198 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003196:	2000      	movs	r0, #0
}
1a003198:	b003      	add	sp, #12
1a00319a:	bd30      	pop	{r4, r5, pc}
1a00319c:	40050000 	.word	0x40050000
1a0031a0:	1a0050d8 	.word	0x1a0050d8

1a0031a4 <Chip_Clock_GetDivRate>:
{
1a0031a4:	b538      	push	{r3, r4, r5, lr}
1a0031a6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0031a8:	4608      	mov	r0, r1
1a0031aa:	f7ff ff0d 	bl	1a002fc8 <Chip_Clock_GetDividerSource>
1a0031ae:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0031b0:	4620      	mov	r0, r4
1a0031b2:	f7ff ff17 	bl	1a002fe4 <Chip_Clock_GetDividerDivisor>
1a0031b6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0031b8:	4628      	mov	r0, r5
1a0031ba:	f7ff ff21 	bl	1a003000 <Chip_Clock_GetClockInputHz>
1a0031be:	3401      	adds	r4, #1
}
1a0031c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0031c4:	bd38      	pop	{r3, r4, r5, pc}
1a0031c6:	Address 0x000000001a0031c6 is out of bounds.


1a0031c8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0031c8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0031ca:	f100 0416 	add.w	r4, r0, #22
1a0031ce:	00a4      	lsls	r4, r4, #2
1a0031d0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0031d4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0031d8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0031da:	281b      	cmp	r0, #27
1a0031dc:	d813      	bhi.n	1a003206 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0031de:	2911      	cmp	r1, #17
1a0031e0:	d01a      	beq.n	1a003218 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0031e2:	4d0e      	ldr	r5, [pc, #56]	; (1a00321c <Chip_Clock_SetBaseClock+0x54>)
1a0031e4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0031e6:	b10a      	cbz	r2, 1a0031ec <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0031e8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0031ec:	b10b      	cbz	r3, 1a0031f2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0031ee:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0031f2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0031f6:	3016      	adds	r0, #22
1a0031f8:	0080      	lsls	r0, r0, #2
1a0031fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0031fe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003202:	6045      	str	r5, [r0, #4]
1a003204:	e008      	b.n	1a003218 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003206:	f044 0401 	orr.w	r4, r4, #1
1a00320a:	3016      	adds	r0, #22
1a00320c:	0080      	lsls	r0, r0, #2
1a00320e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003212:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003216:	6044      	str	r4, [r0, #4]
	}
}
1a003218:	bc30      	pop	{r4, r5}
1a00321a:	4770      	bx	lr
1a00321c:	e0fff7fe 	.word	0xe0fff7fe

1a003220 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003220:	281b      	cmp	r0, #27
1a003222:	d80c      	bhi.n	1a00323e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003224:	3016      	adds	r0, #22
1a003226:	0080      	lsls	r0, r0, #2
1a003228:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00322c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003230:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003232:	f010 0f01 	tst.w	r0, #1
1a003236:	d104      	bne.n	1a003242 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003238:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00323c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00323e:	2011      	movs	r0, #17
1a003240:	4770      	bx	lr
		return CLKINPUT_PD;
1a003242:	2011      	movs	r0, #17
}
1a003244:	4770      	bx	lr

1a003246 <Chip_Clock_GetBaseClocktHz>:
{
1a003246:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003248:	f7ff ffea 	bl	1a003220 <Chip_Clock_GetBaseClock>
1a00324c:	f7ff fed8 	bl	1a003000 <Chip_Clock_GetClockInputHz>
}
1a003250:	bd08      	pop	{r3, pc}
1a003252:	Address 0x000000001a003252 is out of bounds.


1a003254 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003254:	b969      	cbnz	r1, 1a003272 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003256:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003258:	b10a      	cbz	r2, 1a00325e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00325a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00325e:	2b02      	cmp	r3, #2
1a003260:	d009      	beq.n	1a003276 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003262:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003266:	d209      	bcs.n	1a00327c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003268:	3020      	adds	r0, #32
1a00326a:	4b07      	ldr	r3, [pc, #28]	; (1a003288 <Chip_Clock_EnableOpts+0x34>)
1a00326c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003270:	4770      	bx	lr
		reg |= (1 << 1);
1a003272:	2103      	movs	r1, #3
1a003274:	e7f0      	b.n	1a003258 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003276:	f041 0120 	orr.w	r1, r1, #32
1a00327a:	e7f2      	b.n	1a003262 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00327c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003280:	4b02      	ldr	r3, [pc, #8]	; (1a00328c <Chip_Clock_EnableOpts+0x38>)
1a003282:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003286:	4770      	bx	lr
1a003288:	40051000 	.word	0x40051000
1a00328c:	40052000 	.word	0x40052000

1a003290 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003290:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003294:	d208      	bcs.n	1a0032a8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003296:	4a09      	ldr	r2, [pc, #36]	; (1a0032bc <Chip_Clock_Enable+0x2c>)
1a003298:	3020      	adds	r0, #32
1a00329a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00329e:	f043 0301 	orr.w	r3, r3, #1
1a0032a2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0032a6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0032a8:	4a05      	ldr	r2, [pc, #20]	; (1a0032c0 <Chip_Clock_Enable+0x30>)
1a0032aa:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0032ae:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0032b2:	f043 0301 	orr.w	r3, r3, #1
1a0032b6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0032ba:	4770      	bx	lr
1a0032bc:	40051000 	.word	0x40051000
1a0032c0:	40052000 	.word	0x40052000

1a0032c4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0032c4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0032c6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0032ca:	d309      	bcc.n	1a0032e0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0032cc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0032d0:	4a0d      	ldr	r2, [pc, #52]	; (1a003308 <Chip_Clock_GetRate+0x44>)
1a0032d2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0032d6:	f014 0f01 	tst.w	r4, #1
1a0032da:	d107      	bne.n	1a0032ec <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0032dc:	2000      	movs	r0, #0
	}

	return rate;
}
1a0032de:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0032e0:	f100 0320 	add.w	r3, r0, #32
1a0032e4:	4a09      	ldr	r2, [pc, #36]	; (1a00330c <Chip_Clock_GetRate+0x48>)
1a0032e6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0032ea:	e7f4      	b.n	1a0032d6 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0032ec:	f7ff fe20 	bl	1a002f30 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0032f0:	f7ff ffa9 	bl	1a003246 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0032f4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0032f8:	d103      	bne.n	1a003302 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0032fa:	2301      	movs	r3, #1
		rate = rate / div;
1a0032fc:	fbb0 f0f3 	udiv	r0, r0, r3
1a003300:	e7ed      	b.n	1a0032de <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003302:	2302      	movs	r3, #2
1a003304:	e7fa      	b.n	1a0032fc <Chip_Clock_GetRate+0x38>
1a003306:	bf00      	nop
1a003308:	40052000 	.word	0x40052000
1a00330c:	40051000 	.word	0x40051000

1a003310 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003310:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003312:	2069      	movs	r0, #105	; 0x69
1a003314:	f7ff ffd6 	bl	1a0032c4 <Chip_Clock_GetRate>
1a003318:	4b01      	ldr	r3, [pc, #4]	; (1a003320 <SystemCoreClockUpdate+0x10>)
1a00331a:	6018      	str	r0, [r3, #0]
}
1a00331c:	bd08      	pop	{r3, pc}
1a00331e:	bf00      	nop
1a003320:	10002c78 	.word	0x10002c78

1a003324 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003324:	b570      	push	{r4, r5, r6, lr}
1a003326:	b08a      	sub	sp, #40	; 0x28
1a003328:	4605      	mov	r5, r0
1a00332a:	460e      	mov	r6, r1
1a00332c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00332e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003332:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003334:	2806      	cmp	r0, #6
1a003336:	d018      	beq.n	1a00336a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003338:	2300      	movs	r3, #0
1a00333a:	2201      	movs	r2, #1
1a00333c:	4629      	mov	r1, r5
1a00333e:	2004      	movs	r0, #4
1a003340:	f7ff ff42 	bl	1a0031c8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003344:	4a49      	ldr	r2, [pc, #292]	; (1a00346c <Chip_SetupCoreClock+0x148>)
1a003346:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003348:	f043 0301 	orr.w	r3, r3, #1
1a00334c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00334e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003352:	a901      	add	r1, sp, #4
1a003354:	4630      	mov	r0, r6
1a003356:	f7ff feaf 	bl	1a0030b8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00335a:	4b45      	ldr	r3, [pc, #276]	; (1a003470 <Chip_SetupCoreClock+0x14c>)
1a00335c:	429e      	cmp	r6, r3
1a00335e:	d916      	bls.n	1a00338e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003360:	9b01      	ldr	r3, [sp, #4]
1a003362:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003366:	d003      	beq.n	1a003370 <Chip_SetupCoreClock+0x4c>
1a003368:	e7fe      	b.n	1a003368 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00336a:	f7ff fe07 	bl	1a002f7c <Chip_Clock_EnableCrystal>
1a00336e:	e7e3      	b.n	1a003338 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003370:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003374:	d005      	beq.n	1a003382 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00337a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00337c:	2500      	movs	r5, #0
			direct = 1;
1a00337e:	2601      	movs	r6, #1
1a003380:	e007      	b.n	1a003392 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003382:	9b04      	ldr	r3, [sp, #16]
1a003384:	3301      	adds	r3, #1
1a003386:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a003388:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00338a:	2600      	movs	r6, #0
1a00338c:	e001      	b.n	1a003392 <Chip_SetupCoreClock+0x6e>
1a00338e:	2500      	movs	r5, #0
1a003390:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003392:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003396:	9b01      	ldr	r3, [sp, #4]
1a003398:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00339c:	9a05      	ldr	r2, [sp, #20]
1a00339e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0033a2:	9a03      	ldr	r2, [sp, #12]
1a0033a4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0033a8:	9a04      	ldr	r2, [sp, #16]
1a0033aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0033ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0033b2:	4a2e      	ldr	r2, [pc, #184]	; (1a00346c <Chip_SetupCoreClock+0x148>)
1a0033b4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0033b6:	4b2d      	ldr	r3, [pc, #180]	; (1a00346c <Chip_SetupCoreClock+0x148>)
1a0033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0033ba:	f013 0f01 	tst.w	r3, #1
1a0033be:	d0fa      	beq.n	1a0033b6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0033c0:	2300      	movs	r3, #0
1a0033c2:	2201      	movs	r2, #1
1a0033c4:	2109      	movs	r1, #9
1a0033c6:	2004      	movs	r0, #4
1a0033c8:	f7ff fefe 	bl	1a0031c8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0033cc:	b1fe      	cbz	r6, 1a00340e <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0033ce:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0033d2:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0033d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0033d6:	1e5a      	subs	r2, r3, #1
1a0033d8:	9209      	str	r2, [sp, #36]	; 0x24
1a0033da:	2b00      	cmp	r3, #0
1a0033dc:	d1fa      	bne.n	1a0033d4 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0033de:	9b01      	ldr	r3, [sp, #4]
1a0033e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0033e4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0033e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0033ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0033ee:	9a05      	ldr	r2, [sp, #20]
1a0033f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0033f4:	9a03      	ldr	r2, [sp, #12]
1a0033f6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0033fa:	9a04      	ldr	r2, [sp, #16]
1a0033fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003404:	4a19      	ldr	r2, [pc, #100]	; (1a00346c <Chip_SetupCoreClock+0x148>)
1a003406:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003408:	b36c      	cbz	r4, 1a003466 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00340a:	2400      	movs	r4, #0
1a00340c:	e029      	b.n	1a003462 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00340e:	2d00      	cmp	r5, #0
1a003410:	d0fa      	beq.n	1a003408 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003412:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003416:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003418:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00341a:	1e5a      	subs	r2, r3, #1
1a00341c:	9209      	str	r2, [sp, #36]	; 0x24
1a00341e:	2b00      	cmp	r3, #0
1a003420:	d1fa      	bne.n	1a003418 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003422:	9b04      	ldr	r3, [sp, #16]
1a003424:	1e5a      	subs	r2, r3, #1
1a003426:	9204      	str	r2, [sp, #16]
1a003428:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00342c:	9b01      	ldr	r3, [sp, #4]
1a00342e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003432:	9905      	ldr	r1, [sp, #20]
1a003434:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003438:	9903      	ldr	r1, [sp, #12]
1a00343a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00343e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003446:	4a09      	ldr	r2, [pc, #36]	; (1a00346c <Chip_SetupCoreClock+0x148>)
1a003448:	6453      	str	r3, [r2, #68]	; 0x44
1a00344a:	e7dd      	b.n	1a003408 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00344c:	4809      	ldr	r0, [pc, #36]	; (1a003474 <Chip_SetupCoreClock+0x150>)
1a00344e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003452:	78cb      	ldrb	r3, [r1, #3]
1a003454:	788a      	ldrb	r2, [r1, #2]
1a003456:	7849      	ldrb	r1, [r1, #1]
1a003458:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00345c:	f7ff feb4 	bl	1a0031c8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003460:	3401      	adds	r4, #1
1a003462:	2c11      	cmp	r4, #17
1a003464:	d9f2      	bls.n	1a00344c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003466:	b00a      	add	sp, #40	; 0x28
1a003468:	bd70      	pop	{r4, r5, r6, pc}
1a00346a:	bf00      	nop
1a00346c:	40050000 	.word	0x40050000
1a003470:	068e7780 	.word	0x068e7780
1a003474:	1a005150 	.word	0x1a005150

1a003478 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003478:	4770      	bx	lr
1a00347a:	Address 0x000000001a00347a is out of bounds.


1a00347c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00347c:	4b03      	ldr	r3, [pc, #12]	; (1a00348c <Chip_SSP_GetClockIndex+0x10>)
1a00347e:	4298      	cmp	r0, r3
1a003480:	d001      	beq.n	1a003486 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003482:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003484:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003486:	20a5      	movs	r0, #165	; 0xa5
1a003488:	4770      	bx	lr
1a00348a:	bf00      	nop
1a00348c:	400c5000 	.word	0x400c5000

1a003490 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003490:	4b04      	ldr	r3, [pc, #16]	; (1a0034a4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003492:	4298      	cmp	r0, r3
1a003494:	d002      	beq.n	1a00349c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003496:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00349a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00349c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0034a0:	4770      	bx	lr
1a0034a2:	bf00      	nop
1a0034a4:	400c5000 	.word	0x400c5000

1a0034a8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0034a8:	6803      	ldr	r3, [r0, #0]
1a0034aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0034ae:	0209      	lsls	r1, r1, #8
1a0034b0:	b289      	uxth	r1, r1
1a0034b2:	4319      	orrs	r1, r3
1a0034b4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0034b6:	6102      	str	r2, [r0, #16]
}
1a0034b8:	4770      	bx	lr

1a0034ba <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0034ba:	b570      	push	{r4, r5, r6, lr}
1a0034bc:	4606      	mov	r6, r0
1a0034be:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0034c0:	f7ff ffe6 	bl	1a003490 <Chip_SSP_GetPeriphClockIndex>
1a0034c4:	f7ff fefe 	bl	1a0032c4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0034c8:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0034ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0034ce:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0034d0:	e000      	b.n	1a0034d4 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0034d2:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0034d4:	42ab      	cmp	r3, r5
1a0034d6:	d90b      	bls.n	1a0034f0 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0034d8:	1c4c      	adds	r4, r1, #1
1a0034da:	fb02 f304 	mul.w	r3, r2, r4
1a0034de:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0034e2:	429d      	cmp	r5, r3
1a0034e4:	d2f6      	bcs.n	1a0034d4 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0034e6:	2cff      	cmp	r4, #255	; 0xff
1a0034e8:	d9f3      	bls.n	1a0034d2 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0034ea:	3202      	adds	r2, #2
				cr0_div = 0;
1a0034ec:	2100      	movs	r1, #0
1a0034ee:	e7f1      	b.n	1a0034d4 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0034f0:	4630      	mov	r0, r6
1a0034f2:	f7ff ffd9 	bl	1a0034a8 <Chip_SSP_SetClockRate>
}
1a0034f6:	bd70      	pop	{r4, r5, r6, pc}

1a0034f8 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0034f8:	b510      	push	{r4, lr}
1a0034fa:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0034fc:	f7ff ffbe 	bl	1a00347c <Chip_SSP_GetClockIndex>
1a003500:	f7ff fec6 	bl	1a003290 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003504:	4620      	mov	r0, r4
1a003506:	f7ff ffc3 	bl	1a003490 <Chip_SSP_GetPeriphClockIndex>
1a00350a:	f7ff fec1 	bl	1a003290 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00350e:	6863      	ldr	r3, [r4, #4]
1a003510:	f023 0304 	bic.w	r3, r3, #4
1a003514:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003516:	6823      	ldr	r3, [r4, #0]
1a003518:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00351c:	f043 0307 	orr.w	r3, r3, #7
1a003520:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003522:	4902      	ldr	r1, [pc, #8]	; (1a00352c <Chip_SSP_Init+0x34>)
1a003524:	4620      	mov	r0, r4
1a003526:	f7ff ffc8 	bl	1a0034ba <Chip_SSP_SetBitRate>
}
1a00352a:	bd10      	pop	{r4, pc}
1a00352c:	000186a0 	.word	0x000186a0

1a003530 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003530:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003532:	4a0b      	ldr	r2, [pc, #44]	; (1a003560 <SystemInit+0x30>)
1a003534:	4b0b      	ldr	r3, [pc, #44]	; (1a003564 <SystemInit+0x34>)
1a003536:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003538:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00353c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00353e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003542:	2b20      	cmp	r3, #32
1a003544:	d004      	beq.n	1a003550 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003546:	f7ff fa9f 	bl	1a002a88 <Board_SystemInit>
   Board_Init();
1a00354a:	f7ff fa25 	bl	1a002998 <Board_Init>
}
1a00354e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003550:	4a04      	ldr	r2, [pc, #16]	; (1a003564 <SystemInit+0x34>)
1a003552:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003556:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00355a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00355e:	e7f2      	b.n	1a003546 <SystemInit+0x16>
1a003560:	1a000000 	.word	0x1a000000
1a003564:	e000ed00 	.word	0xe000ed00

1a003568 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003568:	4b04      	ldr	r3, [pc, #16]	; (1a00357c <cyclesCounterInit+0x14>)
1a00356a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00356c:	4a04      	ldr	r2, [pc, #16]	; (1a003580 <cyclesCounterInit+0x18>)
1a00356e:	6813      	ldr	r3, [r2, #0]
1a003570:	f043 0301 	orr.w	r3, r3, #1
1a003574:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003576:	2001      	movs	r0, #1
1a003578:	4770      	bx	lr
1a00357a:	bf00      	nop
1a00357c:	1000003c 	.word	0x1000003c
1a003580:	e0001000 	.word	0xe0001000

1a003584 <uartProcessIRQ>:
{
1a003584:	b570      	push	{r4, r5, r6, lr}
1a003586:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003588:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a00358c:	0093      	lsls	r3, r2, #2
1a00358e:	4a22      	ldr	r2, [pc, #136]	; (1a003618 <uartProcessIRQ+0x94>)
1a003590:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003592:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003594:	b2ed      	uxtb	r5, r5
1a003596:	f015 0f01 	tst.w	r5, #1
1a00359a:	d00a      	beq.n	1a0035b2 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00359c:	b928      	cbnz	r0, 1a0035aa <uartProcessIRQ+0x26>
1a00359e:	4b1f      	ldr	r3, [pc, #124]	; (1a00361c <uartProcessIRQ+0x98>)
1a0035a0:	681b      	ldr	r3, [r3, #0]
1a0035a2:	b113      	cbz	r3, 1a0035aa <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a0035a4:	4a1e      	ldr	r2, [pc, #120]	; (1a003620 <uartProcessIRQ+0x9c>)
1a0035a6:	6810      	ldr	r0, [r2, #0]
1a0035a8:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0035aa:	2c03      	cmp	r4, #3
1a0035ac:	d014      	beq.n	1a0035d8 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0035ae:	2c05      	cmp	r4, #5
1a0035b0:	d01a      	beq.n	1a0035e8 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0035b2:	f015 0f20 	tst.w	r5, #32
1a0035b6:	d00e      	beq.n	1a0035d6 <uartProcessIRQ+0x52>
	return pUART->IER;
1a0035b8:	6873      	ldr	r3, [r6, #4]
1a0035ba:	f013 0f02 	tst.w	r3, #2
1a0035be:	d00a      	beq.n	1a0035d6 <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0035c0:	b92c      	cbnz	r4, 1a0035ce <uartProcessIRQ+0x4a>
1a0035c2:	4b18      	ldr	r3, [pc, #96]	; (1a003624 <uartProcessIRQ+0xa0>)
1a0035c4:	681b      	ldr	r3, [r3, #0]
1a0035c6:	b113      	cbz	r3, 1a0035ce <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a0035c8:	4a17      	ldr	r2, [pc, #92]	; (1a003628 <uartProcessIRQ+0xa4>)
1a0035ca:	6810      	ldr	r0, [r2, #0]
1a0035cc:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0035ce:	2c03      	cmp	r4, #3
1a0035d0:	d012      	beq.n	1a0035f8 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0035d2:	2c05      	cmp	r4, #5
1a0035d4:	d018      	beq.n	1a003608 <uartProcessIRQ+0x84>
}
1a0035d6:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0035d8:	4b14      	ldr	r3, [pc, #80]	; (1a00362c <uartProcessIRQ+0xa8>)
1a0035da:	681b      	ldr	r3, [r3, #0]
1a0035dc:	2b00      	cmp	r3, #0
1a0035de:	d0e6      	beq.n	1a0035ae <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a0035e0:	4a13      	ldr	r2, [pc, #76]	; (1a003630 <uartProcessIRQ+0xac>)
1a0035e2:	6810      	ldr	r0, [r2, #0]
1a0035e4:	4798      	blx	r3
1a0035e6:	e7e2      	b.n	1a0035ae <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0035e8:	4b12      	ldr	r3, [pc, #72]	; (1a003634 <uartProcessIRQ+0xb0>)
1a0035ea:	681b      	ldr	r3, [r3, #0]
1a0035ec:	2b00      	cmp	r3, #0
1a0035ee:	d0e0      	beq.n	1a0035b2 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a0035f0:	4a11      	ldr	r2, [pc, #68]	; (1a003638 <uartProcessIRQ+0xb4>)
1a0035f2:	6810      	ldr	r0, [r2, #0]
1a0035f4:	4798      	blx	r3
1a0035f6:	e7dc      	b.n	1a0035b2 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0035f8:	4b10      	ldr	r3, [pc, #64]	; (1a00363c <uartProcessIRQ+0xb8>)
1a0035fa:	681b      	ldr	r3, [r3, #0]
1a0035fc:	2b00      	cmp	r3, #0
1a0035fe:	d0e8      	beq.n	1a0035d2 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a003600:	4a0f      	ldr	r2, [pc, #60]	; (1a003640 <uartProcessIRQ+0xbc>)
1a003602:	6810      	ldr	r0, [r2, #0]
1a003604:	4798      	blx	r3
1a003606:	e7e4      	b.n	1a0035d2 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003608:	4b0e      	ldr	r3, [pc, #56]	; (1a003644 <uartProcessIRQ+0xc0>)
1a00360a:	681b      	ldr	r3, [r3, #0]
1a00360c:	2b00      	cmp	r3, #0
1a00360e:	d0e2      	beq.n	1a0035d6 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a003610:	4a0d      	ldr	r2, [pc, #52]	; (1a003648 <uartProcessIRQ+0xc4>)
1a003612:	6810      	ldr	r0, [r2, #0]
1a003614:	4798      	blx	r3
}
1a003616:	e7de      	b.n	1a0035d6 <uartProcessIRQ+0x52>
1a003618:	1a005198 	.word	0x1a005198
1a00361c:	10002bfc 	.word	0x10002bfc
1a003620:	10002c00 	.word	0x10002c00
1a003624:	10002c14 	.word	0x10002c14
1a003628:	10002c18 	.word	0x10002c18
1a00362c:	10002c04 	.word	0x10002c04
1a003630:	10002c08 	.word	0x10002c08
1a003634:	10002c0c 	.word	0x10002c0c
1a003638:	10002c10 	.word	0x10002c10
1a00363c:	10002c1c 	.word	0x10002c1c
1a003640:	10002c20 	.word	0x10002c20
1a003644:	10002c24 	.word	0x10002c24
1a003648:	10002c28 	.word	0x10002c28

1a00364c <uartInterrupt>:
   if( enable ) {
1a00364c:	b341      	cbz	r1, 1a0036a0 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a00364e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a003652:	009a      	lsls	r2, r3, #2
1a003654:	4b1e      	ldr	r3, [pc, #120]	; (1a0036d0 <uartInterrupt+0x84>)
1a003656:	4413      	add	r3, r2
1a003658:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00365c:	2b00      	cmp	r3, #0
1a00365e:	db18      	blt.n	1a003692 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003660:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a003664:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a003668:	22a0      	movs	r2, #160	; 0xa0
1a00366a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a00366e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003672:	0082      	lsls	r2, r0, #2
1a003674:	4b16      	ldr	r3, [pc, #88]	; (1a0036d0 <uartInterrupt+0x84>)
1a003676:	4413      	add	r3, r2
1a003678:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00367c:	2b00      	cmp	r3, #0
1a00367e:	db25      	blt.n	1a0036cc <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003680:	f003 011f 	and.w	r1, r3, #31
1a003684:	095b      	lsrs	r3, r3, #5
1a003686:	2201      	movs	r2, #1
1a003688:	408a      	lsls	r2, r1
1a00368a:	4912      	ldr	r1, [pc, #72]	; (1a0036d4 <uartInterrupt+0x88>)
1a00368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003690:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003692:	f003 030f 	and.w	r3, r3, #15
1a003696:	4a10      	ldr	r2, [pc, #64]	; (1a0036d8 <uartInterrupt+0x8c>)
1a003698:	441a      	add	r2, r3
1a00369a:	23a0      	movs	r3, #160	; 0xa0
1a00369c:	7613      	strb	r3, [r2, #24]
1a00369e:	e7e6      	b.n	1a00366e <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a0036a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0036a4:	0082      	lsls	r2, r0, #2
1a0036a6:	4b0a      	ldr	r3, [pc, #40]	; (1a0036d0 <uartInterrupt+0x84>)
1a0036a8:	4413      	add	r3, r2
1a0036aa:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0036ae:	2b00      	cmp	r3, #0
1a0036b0:	db0c      	blt.n	1a0036cc <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0036b2:	f003 011f 	and.w	r1, r3, #31
1a0036b6:	095b      	lsrs	r3, r3, #5
1a0036b8:	2201      	movs	r2, #1
1a0036ba:	408a      	lsls	r2, r1
1a0036bc:	3320      	adds	r3, #32
1a0036be:	4905      	ldr	r1, [pc, #20]	; (1a0036d4 <uartInterrupt+0x88>)
1a0036c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0036c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0036c8:	f3bf 8f6f 	isb	sy
}
1a0036cc:	4770      	bx	lr
1a0036ce:	bf00      	nop
1a0036d0:	1a005198 	.word	0x1a005198
1a0036d4:	e000e100 	.word	0xe000e100
1a0036d8:	e000ecfc 	.word	0xe000ecfc

1a0036dc <uartCallbackSet>:
{   
1a0036dc:	b410      	push	{r4}
   switch(event){
1a0036de:	b161      	cbz	r1, 1a0036fa <uartCallbackSet+0x1e>
1a0036e0:	2901      	cmp	r1, #1
1a0036e2:	d11c      	bne.n	1a00371e <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a0036e4:	b1da      	cbz	r2, 1a00371e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0036e6:	2801      	cmp	r0, #1
1a0036e8:	d92c      	bls.n	1a003744 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0036ea:	1ec1      	subs	r1, r0, #3
1a0036ec:	b2c9      	uxtb	r1, r1
1a0036ee:	2901      	cmp	r1, #1
1a0036f0:	d92d      	bls.n	1a00374e <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a0036f2:	2805      	cmp	r0, #5
1a0036f4:	d030      	beq.n	1a003758 <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a0036f6:	2302      	movs	r3, #2
1a0036f8:	e009      	b.n	1a00370e <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a0036fa:	b182      	cbz	r2, 1a00371e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0036fc:	2801      	cmp	r0, #1
1a0036fe:	d911      	bls.n	1a003724 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003700:	1ec1      	subs	r1, r0, #3
1a003702:	b2c9      	uxtb	r1, r1
1a003704:	2901      	cmp	r1, #1
1a003706:	d912      	bls.n	1a00372e <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a003708:	2805      	cmp	r0, #5
1a00370a:	d015      	beq.n	1a003738 <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a00370c:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a00370e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003712:	0082      	lsls	r2, r0, #2
1a003714:	4913      	ldr	r1, [pc, #76]	; (1a003764 <uartCallbackSet+0x88>)
1a003716:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a003718:	6851      	ldr	r1, [r2, #4]
1a00371a:	430b      	orrs	r3, r1
1a00371c:	6053      	str	r3, [r2, #4]
}
1a00371e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003722:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a003724:	4910      	ldr	r1, [pc, #64]	; (1a003768 <uartCallbackSet+0x8c>)
1a003726:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a003728:	4910      	ldr	r1, [pc, #64]	; (1a00376c <uartCallbackSet+0x90>)
1a00372a:	600b      	str	r3, [r1, #0]
1a00372c:	e7e8      	b.n	1a003700 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a00372e:	4910      	ldr	r1, [pc, #64]	; (1a003770 <uartCallbackSet+0x94>)
1a003730:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a003732:	4910      	ldr	r1, [pc, #64]	; (1a003774 <uartCallbackSet+0x98>)
1a003734:	600b      	str	r3, [r1, #0]
1a003736:	e7e7      	b.n	1a003708 <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a003738:	490f      	ldr	r1, [pc, #60]	; (1a003778 <uartCallbackSet+0x9c>)
1a00373a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a00373c:	4a0f      	ldr	r2, [pc, #60]	; (1a00377c <uartCallbackSet+0xa0>)
1a00373e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003740:	2305      	movs	r3, #5
1a003742:	e7e4      	b.n	1a00370e <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a003744:	490e      	ldr	r1, [pc, #56]	; (1a003780 <uartCallbackSet+0xa4>)
1a003746:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a003748:	490e      	ldr	r1, [pc, #56]	; (1a003784 <uartCallbackSet+0xa8>)
1a00374a:	600b      	str	r3, [r1, #0]
1a00374c:	e7cd      	b.n	1a0036ea <uartCallbackSet+0xe>
            	txIsrCallbackUART2 = callbackFunc;
1a00374e:	490e      	ldr	r1, [pc, #56]	; (1a003788 <uartCallbackSet+0xac>)
1a003750:	600a      	str	r2, [r1, #0]
            	txIsrCallbackUART2Params = callbackParam;
1a003752:	490e      	ldr	r1, [pc, #56]	; (1a00378c <uartCallbackSet+0xb0>)
1a003754:	600b      	str	r3, [r1, #0]
1a003756:	e7cc      	b.n	1a0036f2 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a003758:	490d      	ldr	r1, [pc, #52]	; (1a003790 <uartCallbackSet+0xb4>)
1a00375a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a00375c:	4a0d      	ldr	r2, [pc, #52]	; (1a003794 <uartCallbackSet+0xb8>)
1a00375e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a003760:	2302      	movs	r3, #2
1a003762:	e7d4      	b.n	1a00370e <uartCallbackSet+0x32>
1a003764:	1a005198 	.word	0x1a005198
1a003768:	10002bfc 	.word	0x10002bfc
1a00376c:	10002c00 	.word	0x10002c00
1a003770:	10002c04 	.word	0x10002c04
1a003774:	10002c08 	.word	0x10002c08
1a003778:	10002c0c 	.word	0x10002c0c
1a00377c:	10002c10 	.word	0x10002c10
1a003780:	10002c14 	.word	0x10002c14
1a003784:	10002c18 	.word	0x10002c18
1a003788:	10002c1c 	.word	0x10002c1c
1a00378c:	10002c20 	.word	0x10002c20
1a003790:	10002c24 	.word	0x10002c24
1a003794:	10002c28 	.word	0x10002c28

1a003798 <uartCallbackClr>:
   switch(event){
1a003798:	b111      	cbz	r1, 1a0037a0 <uartCallbackClr+0x8>
1a00379a:	2901      	cmp	r1, #1
1a00379c:	d00b      	beq.n	1a0037b6 <uartCallbackClr+0x1e>
1a00379e:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0037a0:	2105      	movs	r1, #5
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a0037a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0037a6:	0082      	lsls	r2, r0, #2
1a0037a8:	4b04      	ldr	r3, [pc, #16]	; (1a0037bc <uartCallbackClr+0x24>)
1a0037aa:	589a      	ldr	r2, [r3, r2]
	pUART->IER &= ~intMask;
1a0037ac:	6853      	ldr	r3, [r2, #4]
1a0037ae:	ea23 0301 	bic.w	r3, r3, r1
1a0037b2:	6053      	str	r3, [r2, #4]
}
1a0037b4:	4770      	bx	lr
         intMask = UART_IER_THREINT;
1a0037b6:	2102      	movs	r1, #2
1a0037b8:	e7f3      	b.n	1a0037a2 <uartCallbackClr+0xa>
1a0037ba:	bf00      	nop
1a0037bc:	1a005198 	.word	0x1a005198

1a0037c0 <uartSetPendingInterrupt>:
   NVIC_SetPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a0037c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0037c4:	0082      	lsls	r2, r0, #2
1a0037c6:	4b08      	ldr	r3, [pc, #32]	; (1a0037e8 <uartSetPendingInterrupt+0x28>)
1a0037c8:	4413      	add	r3, r2
1a0037ca:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0037ce:	2b00      	cmp	r3, #0
1a0037d0:	db08      	blt.n	1a0037e4 <uartSetPendingInterrupt+0x24>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0037d2:	f003 011f 	and.w	r1, r3, #31
1a0037d6:	095b      	lsrs	r3, r3, #5
1a0037d8:	2201      	movs	r2, #1
1a0037da:	408a      	lsls	r2, r1
1a0037dc:	3340      	adds	r3, #64	; 0x40
1a0037de:	4903      	ldr	r1, [pc, #12]	; (1a0037ec <uartSetPendingInterrupt+0x2c>)
1a0037e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0037e4:	4770      	bx	lr
1a0037e6:	bf00      	nop
1a0037e8:	1a005198 	.word	0x1a005198
1a0037ec:	e000e100 	.word	0xe000e100

1a0037f0 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0037f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0037f4:	0083      	lsls	r3, r0, #2
1a0037f6:	4a02      	ldr	r2, [pc, #8]	; (1a003800 <uartRxRead+0x10>)
1a0037f8:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0037fa:	6818      	ldr	r0, [r3, #0]
}
1a0037fc:	b2c0      	uxtb	r0, r0
1a0037fe:	4770      	bx	lr
1a003800:	1a005198 	.word	0x1a005198

1a003804 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003804:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003808:	0083      	lsls	r3, r0, #2
1a00380a:	4a02      	ldr	r2, [pc, #8]	; (1a003814 <uartTxWrite+0x10>)
1a00380c:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00380e:	6019      	str	r1, [r3, #0]
}
1a003810:	4770      	bx	lr
1a003812:	bf00      	nop
1a003814:	1a005198 	.word	0x1a005198

1a003818 <uartInit>:
{
1a003818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00381c:	4680      	mov	r8, r0
1a00381e:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003820:	4c19      	ldr	r4, [pc, #100]	; (1a003888 <uartInit+0x70>)
1a003822:	0045      	lsls	r5, r0, #1
1a003824:	182a      	adds	r2, r5, r0
1a003826:	0093      	lsls	r3, r2, #2
1a003828:	18e6      	adds	r6, r4, r3
1a00382a:	58e7      	ldr	r7, [r4, r3]
1a00382c:	4638      	mov	r0, r7
1a00382e:	f7ff f985 	bl	1a002b3c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003832:	4649      	mov	r1, r9
1a003834:	4638      	mov	r0, r7
1a003836:	f7ff f9ab 	bl	1a002b90 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a00383a:	2307      	movs	r3, #7
1a00383c:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00383e:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003840:	2301      	movs	r3, #1
1a003842:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003844:	7930      	ldrb	r0, [r6, #4]
1a003846:	7973      	ldrb	r3, [r6, #5]
1a003848:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00384a:	f042 0218 	orr.w	r2, r2, #24
1a00384e:	490f      	ldr	r1, [pc, #60]	; (1a00388c <uartInit+0x74>)
1a003850:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003858:	79f0      	ldrb	r0, [r6, #7]
1a00385a:	7a33      	ldrb	r3, [r6, #8]
1a00385c:	7a72      	ldrb	r2, [r6, #9]
1a00385e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003862:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a00386a:	f1b8 0f01 	cmp.w	r8, #1
1a00386e:	d001      	beq.n	1a003874 <uartInit+0x5c>
}
1a003870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003874:	4a06      	ldr	r2, [pc, #24]	; (1a003890 <uartInit+0x78>)
1a003876:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003878:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a00387c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00387e:	221a      	movs	r2, #26
1a003880:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003884:	e7f4      	b.n	1a003870 <uartInit+0x58>
1a003886:	bf00      	nop
1a003888:	1a005198 	.word	0x1a005198
1a00388c:	40086000 	.word	0x40086000
1a003890:	40081000 	.word	0x40081000

1a003894 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003894:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003896:	2003      	movs	r0, #3
1a003898:	f7ff fe74 	bl	1a003584 <uartProcessIRQ>
}
1a00389c:	bd08      	pop	{r3, pc}

1a00389e <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a00389e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0038a0:	2005      	movs	r0, #5
1a0038a2:	f7ff fe6f 	bl	1a003584 <uartProcessIRQ>
}
1a0038a6:	bd08      	pop	{r3, pc}

1a0038a8 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0038a8:	e7fe      	b.n	1a0038a8 <errorOcurred>

1a0038aa <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0038aa:	4770      	bx	lr

1a0038ac <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0038ac:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0038ae:	2400      	movs	r4, #0
1a0038b0:	e001      	b.n	1a0038b6 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0038b2:	3401      	adds	r4, #1
1a0038b4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0038b6:	2c03      	cmp	r4, #3
1a0038b8:	d812      	bhi.n	1a0038e0 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0038ba:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0038bc:	4b09      	ldr	r3, [pc, #36]	; (1a0038e4 <TIMER0_IRQHandler+0x38>)
1a0038be:	681a      	ldr	r2, [r3, #0]
1a0038c0:	f004 010f 	and.w	r1, r4, #15
1a0038c4:	2301      	movs	r3, #1
1a0038c6:	408b      	lsls	r3, r1
1a0038c8:	421a      	tst	r2, r3
1a0038ca:	d0f2      	beq.n	1a0038b2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0038cc:	4b06      	ldr	r3, [pc, #24]	; (1a0038e8 <TIMER0_IRQHandler+0x3c>)
1a0038ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0038d2:	2000      	movs	r0, #0
1a0038d4:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0038d6:	2301      	movs	r3, #1
1a0038d8:	40ab      	lsls	r3, r5
1a0038da:	4a02      	ldr	r2, [pc, #8]	; (1a0038e4 <TIMER0_IRQHandler+0x38>)
1a0038dc:	6013      	str	r3, [r2, #0]
1a0038de:	e7e8      	b.n	1a0038b2 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0038e0:	bd38      	pop	{r3, r4, r5, pc}
1a0038e2:	bf00      	nop
1a0038e4:	40084000 	.word	0x40084000
1a0038e8:	10000040 	.word	0x10000040

1a0038ec <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0038ec:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0038ee:	2400      	movs	r4, #0
1a0038f0:	e001      	b.n	1a0038f6 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0038f2:	3401      	adds	r4, #1
1a0038f4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0038f6:	2c03      	cmp	r4, #3
1a0038f8:	d813      	bhi.n	1a003922 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0038fa:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0038fc:	4b09      	ldr	r3, [pc, #36]	; (1a003924 <TIMER1_IRQHandler+0x38>)
1a0038fe:	681a      	ldr	r2, [r3, #0]
1a003900:	f004 010f 	and.w	r1, r4, #15
1a003904:	2301      	movs	r3, #1
1a003906:	408b      	lsls	r3, r1
1a003908:	421a      	tst	r2, r3
1a00390a:	d0f2      	beq.n	1a0038f2 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00390c:	1d23      	adds	r3, r4, #4
1a00390e:	4a06      	ldr	r2, [pc, #24]	; (1a003928 <TIMER1_IRQHandler+0x3c>)
1a003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003914:	2000      	movs	r0, #0
1a003916:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003918:	2301      	movs	r3, #1
1a00391a:	40ab      	lsls	r3, r5
1a00391c:	4a01      	ldr	r2, [pc, #4]	; (1a003924 <TIMER1_IRQHandler+0x38>)
1a00391e:	6013      	str	r3, [r2, #0]
1a003920:	e7e7      	b.n	1a0038f2 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003922:	bd38      	pop	{r3, r4, r5, pc}
1a003924:	40085000 	.word	0x40085000
1a003928:	10000040 	.word	0x10000040

1a00392c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a00392c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00392e:	2400      	movs	r4, #0
1a003930:	e001      	b.n	1a003936 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003932:	3401      	adds	r4, #1
1a003934:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003936:	2c03      	cmp	r4, #3
1a003938:	d814      	bhi.n	1a003964 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00393a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00393c:	4b0a      	ldr	r3, [pc, #40]	; (1a003968 <TIMER2_IRQHandler+0x3c>)
1a00393e:	681a      	ldr	r2, [r3, #0]
1a003940:	f004 010f 	and.w	r1, r4, #15
1a003944:	2301      	movs	r3, #1
1a003946:	408b      	lsls	r3, r1
1a003948:	421a      	tst	r2, r3
1a00394a:	d0f2      	beq.n	1a003932 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00394c:	f104 0308 	add.w	r3, r4, #8
1a003950:	4a06      	ldr	r2, [pc, #24]	; (1a00396c <TIMER2_IRQHandler+0x40>)
1a003952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003956:	2000      	movs	r0, #0
1a003958:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00395a:	2301      	movs	r3, #1
1a00395c:	40ab      	lsls	r3, r5
1a00395e:	4a02      	ldr	r2, [pc, #8]	; (1a003968 <TIMER2_IRQHandler+0x3c>)
1a003960:	6013      	str	r3, [r2, #0]
1a003962:	e7e6      	b.n	1a003932 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a003964:	bd38      	pop	{r3, r4, r5, pc}
1a003966:	bf00      	nop
1a003968:	400c3000 	.word	0x400c3000
1a00396c:	10000040 	.word	0x10000040

1a003970 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a003970:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003972:	2400      	movs	r4, #0
1a003974:	e001      	b.n	1a00397a <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a003976:	3401      	adds	r4, #1
1a003978:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00397a:	2c03      	cmp	r4, #3
1a00397c:	d814      	bhi.n	1a0039a8 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00397e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003980:	4b0a      	ldr	r3, [pc, #40]	; (1a0039ac <TIMER3_IRQHandler+0x3c>)
1a003982:	681a      	ldr	r2, [r3, #0]
1a003984:	f004 010f 	and.w	r1, r4, #15
1a003988:	2301      	movs	r3, #1
1a00398a:	408b      	lsls	r3, r1
1a00398c:	421a      	tst	r2, r3
1a00398e:	d0f2      	beq.n	1a003976 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003990:	f104 030c 	add.w	r3, r4, #12
1a003994:	4a06      	ldr	r2, [pc, #24]	; (1a0039b0 <TIMER3_IRQHandler+0x40>)
1a003996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00399a:	2000      	movs	r0, #0
1a00399c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00399e:	2301      	movs	r3, #1
1a0039a0:	40ab      	lsls	r3, r5
1a0039a2:	4a02      	ldr	r2, [pc, #8]	; (1a0039ac <TIMER3_IRQHandler+0x3c>)
1a0039a4:	6013      	str	r3, [r2, #0]
1a0039a6:	e7e6      	b.n	1a003976 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0039a8:	bd38      	pop	{r3, r4, r5, pc}
1a0039aa:	bf00      	nop
1a0039ac:	400c4000 	.word	0x400c4000
1a0039b0:	10000040 	.word	0x10000040

1a0039b4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0039b4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0039b6:	4d0b      	ldr	r5, [pc, #44]	; (1a0039e4 <gpioObtainPinInit+0x30>)
1a0039b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0039bc:	182c      	adds	r4, r5, r0
1a0039be:	5628      	ldrsb	r0, [r5, r0]
1a0039c0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0039c2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0039c6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0039c8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0039cc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0039ce:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0039d2:	9b02      	ldr	r3, [sp, #8]
1a0039d4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0039d6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0039da:	9b03      	ldr	r3, [sp, #12]
1a0039dc:	701a      	strb	r2, [r3, #0]
}
1a0039de:	bc30      	pop	{r4, r5}
1a0039e0:	4770      	bx	lr
1a0039e2:	bf00      	nop
1a0039e4:	1a0051e0 	.word	0x1a0051e0

1a0039e8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0039e8:	f110 0f02 	cmn.w	r0, #2
1a0039ec:	f000 80c7 	beq.w	1a003b7e <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0039f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0039f4:	f000 80c5 	beq.w	1a003b82 <gpioInit+0x19a>
{
1a0039f8:	b570      	push	{r4, r5, r6, lr}
1a0039fa:	b084      	sub	sp, #16
1a0039fc:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0039fe:	2300      	movs	r3, #0
1a003a00:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003a04:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003a08:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003a0c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003a10:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003a14:	f10d 030b 	add.w	r3, sp, #11
1a003a18:	9301      	str	r3, [sp, #4]
1a003a1a:	ab03      	add	r3, sp, #12
1a003a1c:	9300      	str	r3, [sp, #0]
1a003a1e:	f10d 030d 	add.w	r3, sp, #13
1a003a22:	f10d 020e 	add.w	r2, sp, #14
1a003a26:	f10d 010f 	add.w	r1, sp, #15
1a003a2a:	f7ff ffc3 	bl	1a0039b4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003a2e:	2c05      	cmp	r4, #5
1a003a30:	f200 80a9 	bhi.w	1a003b86 <gpioInit+0x19e>
1a003a34:	e8df f004 	tbb	[pc, r4]
1a003a38:	45278109 	.word	0x45278109
1a003a3c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003a3e:	4853      	ldr	r0, [pc, #332]	; (1a003b8c <gpioInit+0x1a4>)
1a003a40:	f7ff fd1a 	bl	1a003478 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003a44:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003a46:	b004      	add	sp, #16
1a003a48:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003a4a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003a4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003a52:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003a56:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003a5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003a5e:	494c      	ldr	r1, [pc, #304]	; (1a003b90 <gpioInit+0x1a8>)
1a003a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003a64:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003a68:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003a6c:	2001      	movs	r0, #1
1a003a6e:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003a72:	4c46      	ldr	r4, [pc, #280]	; (1a003b8c <gpioInit+0x1a4>)
1a003a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003a78:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003a7c:	ea22 0201 	bic.w	r2, r2, r1
1a003a80:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003a84:	e7df      	b.n	1a003a46 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003a86:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003a8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003a8e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003a92:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003a96:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003a9a:	493d      	ldr	r1, [pc, #244]	; (1a003b90 <gpioInit+0x1a8>)
1a003a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003aa0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003aa4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003aa8:	2001      	movs	r0, #1
1a003aaa:	fa00 f102 	lsl.w	r1, r0, r2
1a003aae:	4c37      	ldr	r4, [pc, #220]	; (1a003b8c <gpioInit+0x1a4>)
1a003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003ab4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003ab8:	ea22 0201 	bic.w	r2, r2, r1
1a003abc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003ac0:	e7c1      	b.n	1a003a46 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003ac2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003ac6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003aca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003ace:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003ad2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003ad6:	492e      	ldr	r1, [pc, #184]	; (1a003b90 <gpioInit+0x1a8>)
1a003ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003adc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ae0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003ae4:	2001      	movs	r0, #1
1a003ae6:	fa00 f102 	lsl.w	r1, r0, r2
1a003aea:	4c28      	ldr	r4, [pc, #160]	; (1a003b8c <gpioInit+0x1a4>)
1a003aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003af0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003af4:	ea22 0201 	bic.w	r2, r2, r1
1a003af8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003afc:	e7a3      	b.n	1a003a46 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003afe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003b02:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003b06:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003b0a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003b0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003b12:	491f      	ldr	r1, [pc, #124]	; (1a003b90 <gpioInit+0x1a8>)
1a003b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003b18:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003b1c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b20:	2001      	movs	r0, #1
1a003b22:	fa00 f102 	lsl.w	r1, r0, r2
1a003b26:	4c19      	ldr	r4, [pc, #100]	; (1a003b8c <gpioInit+0x1a4>)
1a003b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003b2c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003b30:	ea22 0201 	bic.w	r2, r2, r1
1a003b34:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003b38:	e785      	b.n	1a003a46 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003b3a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003b3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003b42:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003b46:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003b4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003b4e:	4910      	ldr	r1, [pc, #64]	; (1a003b90 <gpioInit+0x1a8>)
1a003b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003b54:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003b58:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b5c:	2001      	movs	r0, #1
1a003b5e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003b62:	4b0a      	ldr	r3, [pc, #40]	; (1a003b8c <gpioInit+0x1a4>)
1a003b64:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003b68:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003b6c:	4331      	orrs	r1, r6
1a003b6e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003b72:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003b74:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003b78:	2100      	movs	r1, #0
1a003b7a:	5499      	strb	r1, [r3, r2]
1a003b7c:	e763      	b.n	1a003a46 <gpioInit+0x5e>
	  return FALSE;
1a003b7e:	2000      	movs	r0, #0
1a003b80:	4770      	bx	lr
	  return FALSE;
1a003b82:	2000      	movs	r0, #0
}
1a003b84:	4770      	bx	lr
      ret_val = 0;
1a003b86:	2000      	movs	r0, #0
1a003b88:	e75d      	b.n	1a003a46 <gpioInit+0x5e>
1a003b8a:	bf00      	nop
1a003b8c:	400f4000 	.word	0x400f4000
1a003b90:	40086000 	.word	0x40086000

1a003b94 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003b94:	f110 0f02 	cmn.w	r0, #2
1a003b98:	d02d      	beq.n	1a003bf6 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a003b9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003b9e:	d02c      	beq.n	1a003bfa <gpioWrite+0x66>
{
1a003ba0:	b510      	push	{r4, lr}
1a003ba2:	b084      	sub	sp, #16
1a003ba4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003ba6:	2300      	movs	r3, #0
1a003ba8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003bac:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003bb0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003bb4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003bb8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003bbc:	f10d 030b 	add.w	r3, sp, #11
1a003bc0:	9301      	str	r3, [sp, #4]
1a003bc2:	ab03      	add	r3, sp, #12
1a003bc4:	9300      	str	r3, [sp, #0]
1a003bc6:	f10d 030d 	add.w	r3, sp, #13
1a003bca:	f10d 020e 	add.w	r2, sp, #14
1a003bce:	f10d 010f 	add.w	r1, sp, #15
1a003bd2:	f7ff feef 	bl	1a0039b4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003bd6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003bda:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003bde:	1c21      	adds	r1, r4, #0
1a003be0:	bf18      	it	ne
1a003be2:	2101      	movne	r1, #1
1a003be4:	015b      	lsls	r3, r3, #5
1a003be6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003bea:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003bee:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a003bf0:	2001      	movs	r0, #1
}
1a003bf2:	b004      	add	sp, #16
1a003bf4:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003bf6:	2000      	movs	r0, #0
1a003bf8:	4770      	bx	lr
	  return FALSE;
1a003bfa:	2000      	movs	r0, #0
}
1a003bfc:	4770      	bx	lr

1a003bfe <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a003bfe:	f110 0f02 	cmn.w	r0, #2
1a003c02:	d02c      	beq.n	1a003c5e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003c04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003c08:	d02b      	beq.n	1a003c62 <gpioRead+0x64>
{
1a003c0a:	b500      	push	{lr}
1a003c0c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003c0e:	2300      	movs	r3, #0
1a003c10:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003c14:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003c18:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003c1c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003c20:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003c24:	f10d 030b 	add.w	r3, sp, #11
1a003c28:	9301      	str	r3, [sp, #4]
1a003c2a:	ab03      	add	r3, sp, #12
1a003c2c:	9300      	str	r3, [sp, #0]
1a003c2e:	f10d 030d 	add.w	r3, sp, #13
1a003c32:	f10d 020e 	add.w	r2, sp, #14
1a003c36:	f10d 010f 	add.w	r1, sp, #15
1a003c3a:	f7ff febb 	bl	1a0039b4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003c3e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003c42:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003c46:	015b      	lsls	r3, r3, #5
1a003c48:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003c4c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003c50:	5c98      	ldrb	r0, [r3, r2]
1a003c52:	3000      	adds	r0, #0
1a003c54:	bf18      	it	ne
1a003c56:	2001      	movne	r0, #1

   return ret_val;
}
1a003c58:	b005      	add	sp, #20
1a003c5a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a003c5e:	2001      	movs	r0, #1
1a003c60:	4770      	bx	lr
      return FALSE;
1a003c62:	2000      	movs	r0, #0
}
1a003c64:	4770      	bx	lr

1a003c66 <gpioToggle>:
{
1a003c66:	b510      	push	{r4, lr}
1a003c68:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a003c6a:	f7ff ffc8 	bl	1a003bfe <gpioRead>
1a003c6e:	fab0 f180 	clz	r1, r0
1a003c72:	0949      	lsrs	r1, r1, #5
1a003c74:	4620      	mov	r0, r4
1a003c76:	f7ff ff8d 	bl	1a003b94 <gpioWrite>
}
1a003c7a:	bd10      	pop	{r4, pc}

1a003c7c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003c7c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003c7e:	4b04      	ldr	r3, [pc, #16]	; (1a003c90 <USB0_IRQHandler+0x14>)
1a003c80:	681b      	ldr	r3, [r3, #0]
1a003c82:	681b      	ldr	r3, [r3, #0]
1a003c84:	68db      	ldr	r3, [r3, #12]
1a003c86:	4a03      	ldr	r2, [pc, #12]	; (1a003c94 <USB0_IRQHandler+0x18>)
1a003c88:	6810      	ldr	r0, [r2, #0]
1a003c8a:	4798      	blx	r3
}
1a003c8c:	bd08      	pop	{r3, pc}
1a003c8e:	bf00      	nop
1a003c90:	10002c7c 	.word	0x10002c7c
1a003c94:	10002c2c 	.word	0x10002c2c

1a003c98 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003c98:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003c9a:	f7ff fb39 	bl	1a003310 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003c9e:	4b18      	ldr	r3, [pc, #96]	; (1a003d00 <boardInit+0x68>)
1a003ca0:	6818      	ldr	r0, [r3, #0]
1a003ca2:	f7ff fc61 	bl	1a003568 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003ca6:	2105      	movs	r1, #5
1a003ca8:	2000      	movs	r0, #0
1a003caa:	f7ff fe9d 	bl	1a0039e8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a003cae:	2100      	movs	r1, #0
1a003cb0:	2024      	movs	r0, #36	; 0x24
1a003cb2:	f7ff fe99 	bl	1a0039e8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003cb6:	2100      	movs	r1, #0
1a003cb8:	2025      	movs	r0, #37	; 0x25
1a003cba:	f7ff fe95 	bl	1a0039e8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a003cbe:	2100      	movs	r1, #0
1a003cc0:	2026      	movs	r0, #38	; 0x26
1a003cc2:	f7ff fe91 	bl	1a0039e8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003cc6:	2100      	movs	r1, #0
1a003cc8:	2027      	movs	r0, #39	; 0x27
1a003cca:	f7ff fe8d 	bl	1a0039e8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003cce:	2101      	movs	r1, #1
1a003cd0:	2028      	movs	r0, #40	; 0x28
1a003cd2:	f7ff fe89 	bl	1a0039e8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003cd6:	2101      	movs	r1, #1
1a003cd8:	2029      	movs	r0, #41	; 0x29
1a003cda:	f7ff fe85 	bl	1a0039e8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003cde:	2101      	movs	r1, #1
1a003ce0:	202a      	movs	r0, #42	; 0x2a
1a003ce2:	f7ff fe81 	bl	1a0039e8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003ce6:	2101      	movs	r1, #1
1a003ce8:	202b      	movs	r0, #43	; 0x2b
1a003cea:	f7ff fe7d 	bl	1a0039e8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003cee:	2101      	movs	r1, #1
1a003cf0:	202c      	movs	r0, #44	; 0x2c
1a003cf2:	f7ff fe79 	bl	1a0039e8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003cf6:	2101      	movs	r1, #1
1a003cf8:	202d      	movs	r0, #45	; 0x2d
1a003cfa:	f7ff fe75 	bl	1a0039e8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003cfe:	bd08      	pop	{r3, pc}
1a003d00:	10002c78 	.word	0x10002c78

1a003d04 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003d04:	2301      	movs	r3, #1
1a003d06:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a003d0a:	4b01      	ldr	r3, [pc, #4]	; (1a003d10 <clearInterrupt+0xc>)
1a003d0c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a003d0e:	4770      	bx	lr
1a003d10:	40087000 	.word	0x40087000

1a003d14 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a003d16:	4b12      	ldr	r3, [pc, #72]	; (1a003d60 <serveInterrupt+0x4c>)
1a003d18:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a003d1a:	4b12      	ldr	r3, [pc, #72]	; (1a003d64 <serveInterrupt+0x50>)
1a003d1c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a003d1e:	2301      	movs	r3, #1
1a003d20:	4083      	lsls	r3, r0
1a003d22:	420b      	tst	r3, r1
1a003d24:	d111      	bne.n	1a003d4a <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a003d26:	4910      	ldr	r1, [pc, #64]	; (1a003d68 <serveInterrupt+0x54>)
1a003d28:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003d2a:	4d10      	ldr	r5, [pc, #64]	; (1a003d6c <serveInterrupt+0x58>)
1a003d2c:	0051      	lsls	r1, r2, #1
1a003d2e:	188f      	adds	r7, r1, r2
1a003d30:	00fc      	lsls	r4, r7, #3
1a003d32:	4627      	mov	r7, r4
1a003d34:	442c      	add	r4, r5
1a003d36:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a003d38:	6864      	ldr	r4, [r4, #4]
1a003d3a:	1b36      	subs	r6, r6, r4
1a003d3c:	443d      	add	r5, r7
1a003d3e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a003d40:	4a08      	ldr	r2, [pc, #32]	; (1a003d64 <serveInterrupt+0x50>)
1a003d42:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003d44:	f7ff ffde 	bl	1a003d04 <clearInterrupt>
}
1a003d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d4a:	4907      	ldr	r1, [pc, #28]	; (1a003d68 <serveInterrupt+0x54>)
1a003d4c:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003d4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a003d52:	00d1      	lsls	r1, r2, #3
1a003d54:	4a05      	ldr	r2, [pc, #20]	; (1a003d6c <serveInterrupt+0x58>)
1a003d56:	440a      	add	r2, r1
1a003d58:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a003d5a:	4a02      	ldr	r2, [pc, #8]	; (1a003d64 <serveInterrupt+0x50>)
1a003d5c:	61d3      	str	r3, [r2, #28]
1a003d5e:	e7f1      	b.n	1a003d44 <serveInterrupt+0x30>
1a003d60:	1a0052c8 	.word	0x1a0052c8
1a003d64:	40087000 	.word	0x40087000
1a003d68:	40084000 	.word	0x40084000
1a003d6c:	10000080 	.word	0x10000080

1a003d70 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a003d70:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a003d72:	2000      	movs	r0, #0
1a003d74:	f7ff ffce 	bl	1a003d14 <serveInterrupt>
}
1a003d78:	bd08      	pop	{r3, pc}

1a003d7a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a003d7a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a003d7c:	2001      	movs	r0, #1
1a003d7e:	f7ff ffc9 	bl	1a003d14 <serveInterrupt>
}
1a003d82:	bd08      	pop	{r3, pc}

1a003d84 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a003d84:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a003d86:	2002      	movs	r0, #2
1a003d88:	f7ff ffc4 	bl	1a003d14 <serveInterrupt>
}
1a003d8c:	bd08      	pop	{r3, pc}
1a003d8e:	Address 0x000000001a003d8e is out of bounds.


1a003d90 <__aeabi_uldivmod>:
1a003d90:	b953      	cbnz	r3, 1a003da8 <__aeabi_uldivmod+0x18>
1a003d92:	b94a      	cbnz	r2, 1a003da8 <__aeabi_uldivmod+0x18>
1a003d94:	2900      	cmp	r1, #0
1a003d96:	bf08      	it	eq
1a003d98:	2800      	cmpeq	r0, #0
1a003d9a:	bf1c      	itt	ne
1a003d9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003da0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003da4:	f000 b972 	b.w	1a00408c <__aeabi_idiv0>
1a003da8:	f1ad 0c08 	sub.w	ip, sp, #8
1a003dac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003db0:	f000 f806 	bl	1a003dc0 <__udivmoddi4>
1a003db4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003dbc:	b004      	add	sp, #16
1a003dbe:	4770      	bx	lr

1a003dc0 <__udivmoddi4>:
1a003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003dc4:	9e08      	ldr	r6, [sp, #32]
1a003dc6:	4604      	mov	r4, r0
1a003dc8:	4688      	mov	r8, r1
1a003dca:	2b00      	cmp	r3, #0
1a003dcc:	d14b      	bne.n	1a003e66 <__udivmoddi4+0xa6>
1a003dce:	428a      	cmp	r2, r1
1a003dd0:	4615      	mov	r5, r2
1a003dd2:	d967      	bls.n	1a003ea4 <__udivmoddi4+0xe4>
1a003dd4:	fab2 f282 	clz	r2, r2
1a003dd8:	b14a      	cbz	r2, 1a003dee <__udivmoddi4+0x2e>
1a003dda:	f1c2 0720 	rsb	r7, r2, #32
1a003dde:	fa01 f302 	lsl.w	r3, r1, r2
1a003de2:	fa20 f707 	lsr.w	r7, r0, r7
1a003de6:	4095      	lsls	r5, r2
1a003de8:	ea47 0803 	orr.w	r8, r7, r3
1a003dec:	4094      	lsls	r4, r2
1a003dee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003df2:	0c23      	lsrs	r3, r4, #16
1a003df4:	fbb8 f7fe 	udiv	r7, r8, lr
1a003df8:	fa1f fc85 	uxth.w	ip, r5
1a003dfc:	fb0e 8817 	mls	r8, lr, r7, r8
1a003e00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003e04:	fb07 f10c 	mul.w	r1, r7, ip
1a003e08:	4299      	cmp	r1, r3
1a003e0a:	d909      	bls.n	1a003e20 <__udivmoddi4+0x60>
1a003e0c:	18eb      	adds	r3, r5, r3
1a003e0e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003e12:	f080 811b 	bcs.w	1a00404c <__udivmoddi4+0x28c>
1a003e16:	4299      	cmp	r1, r3
1a003e18:	f240 8118 	bls.w	1a00404c <__udivmoddi4+0x28c>
1a003e1c:	3f02      	subs	r7, #2
1a003e1e:	442b      	add	r3, r5
1a003e20:	1a5b      	subs	r3, r3, r1
1a003e22:	b2a4      	uxth	r4, r4
1a003e24:	fbb3 f0fe 	udiv	r0, r3, lr
1a003e28:	fb0e 3310 	mls	r3, lr, r0, r3
1a003e2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003e30:	fb00 fc0c 	mul.w	ip, r0, ip
1a003e34:	45a4      	cmp	ip, r4
1a003e36:	d909      	bls.n	1a003e4c <__udivmoddi4+0x8c>
1a003e38:	192c      	adds	r4, r5, r4
1a003e3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003e3e:	f080 8107 	bcs.w	1a004050 <__udivmoddi4+0x290>
1a003e42:	45a4      	cmp	ip, r4
1a003e44:	f240 8104 	bls.w	1a004050 <__udivmoddi4+0x290>
1a003e48:	3802      	subs	r0, #2
1a003e4a:	442c      	add	r4, r5
1a003e4c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003e50:	eba4 040c 	sub.w	r4, r4, ip
1a003e54:	2700      	movs	r7, #0
1a003e56:	b11e      	cbz	r6, 1a003e60 <__udivmoddi4+0xa0>
1a003e58:	40d4      	lsrs	r4, r2
1a003e5a:	2300      	movs	r3, #0
1a003e5c:	e9c6 4300 	strd	r4, r3, [r6]
1a003e60:	4639      	mov	r1, r7
1a003e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003e66:	428b      	cmp	r3, r1
1a003e68:	d909      	bls.n	1a003e7e <__udivmoddi4+0xbe>
1a003e6a:	2e00      	cmp	r6, #0
1a003e6c:	f000 80eb 	beq.w	1a004046 <__udivmoddi4+0x286>
1a003e70:	2700      	movs	r7, #0
1a003e72:	e9c6 0100 	strd	r0, r1, [r6]
1a003e76:	4638      	mov	r0, r7
1a003e78:	4639      	mov	r1, r7
1a003e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003e7e:	fab3 f783 	clz	r7, r3
1a003e82:	2f00      	cmp	r7, #0
1a003e84:	d147      	bne.n	1a003f16 <__udivmoddi4+0x156>
1a003e86:	428b      	cmp	r3, r1
1a003e88:	d302      	bcc.n	1a003e90 <__udivmoddi4+0xd0>
1a003e8a:	4282      	cmp	r2, r0
1a003e8c:	f200 80fa 	bhi.w	1a004084 <__udivmoddi4+0x2c4>
1a003e90:	1a84      	subs	r4, r0, r2
1a003e92:	eb61 0303 	sbc.w	r3, r1, r3
1a003e96:	2001      	movs	r0, #1
1a003e98:	4698      	mov	r8, r3
1a003e9a:	2e00      	cmp	r6, #0
1a003e9c:	d0e0      	beq.n	1a003e60 <__udivmoddi4+0xa0>
1a003e9e:	e9c6 4800 	strd	r4, r8, [r6]
1a003ea2:	e7dd      	b.n	1a003e60 <__udivmoddi4+0xa0>
1a003ea4:	b902      	cbnz	r2, 1a003ea8 <__udivmoddi4+0xe8>
1a003ea6:	deff      	udf	#255	; 0xff
1a003ea8:	fab2 f282 	clz	r2, r2
1a003eac:	2a00      	cmp	r2, #0
1a003eae:	f040 808f 	bne.w	1a003fd0 <__udivmoddi4+0x210>
1a003eb2:	1b49      	subs	r1, r1, r5
1a003eb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003eb8:	fa1f f885 	uxth.w	r8, r5
1a003ebc:	2701      	movs	r7, #1
1a003ebe:	fbb1 fcfe 	udiv	ip, r1, lr
1a003ec2:	0c23      	lsrs	r3, r4, #16
1a003ec4:	fb0e 111c 	mls	r1, lr, ip, r1
1a003ec8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003ecc:	fb08 f10c 	mul.w	r1, r8, ip
1a003ed0:	4299      	cmp	r1, r3
1a003ed2:	d907      	bls.n	1a003ee4 <__udivmoddi4+0x124>
1a003ed4:	18eb      	adds	r3, r5, r3
1a003ed6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003eda:	d202      	bcs.n	1a003ee2 <__udivmoddi4+0x122>
1a003edc:	4299      	cmp	r1, r3
1a003ede:	f200 80cd 	bhi.w	1a00407c <__udivmoddi4+0x2bc>
1a003ee2:	4684      	mov	ip, r0
1a003ee4:	1a59      	subs	r1, r3, r1
1a003ee6:	b2a3      	uxth	r3, r4
1a003ee8:	fbb1 f0fe 	udiv	r0, r1, lr
1a003eec:	fb0e 1410 	mls	r4, lr, r0, r1
1a003ef0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003ef4:	fb08 f800 	mul.w	r8, r8, r0
1a003ef8:	45a0      	cmp	r8, r4
1a003efa:	d907      	bls.n	1a003f0c <__udivmoddi4+0x14c>
1a003efc:	192c      	adds	r4, r5, r4
1a003efe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003f02:	d202      	bcs.n	1a003f0a <__udivmoddi4+0x14a>
1a003f04:	45a0      	cmp	r8, r4
1a003f06:	f200 80b6 	bhi.w	1a004076 <__udivmoddi4+0x2b6>
1a003f0a:	4618      	mov	r0, r3
1a003f0c:	eba4 0408 	sub.w	r4, r4, r8
1a003f10:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003f14:	e79f      	b.n	1a003e56 <__udivmoddi4+0x96>
1a003f16:	f1c7 0c20 	rsb	ip, r7, #32
1a003f1a:	40bb      	lsls	r3, r7
1a003f1c:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003f20:	ea4e 0e03 	orr.w	lr, lr, r3
1a003f24:	fa01 f407 	lsl.w	r4, r1, r7
1a003f28:	fa20 f50c 	lsr.w	r5, r0, ip
1a003f2c:	fa21 f30c 	lsr.w	r3, r1, ip
1a003f30:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003f34:	4325      	orrs	r5, r4
1a003f36:	fbb3 f9f8 	udiv	r9, r3, r8
1a003f3a:	0c2c      	lsrs	r4, r5, #16
1a003f3c:	fb08 3319 	mls	r3, r8, r9, r3
1a003f40:	fa1f fa8e 	uxth.w	sl, lr
1a003f44:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003f48:	fb09 f40a 	mul.w	r4, r9, sl
1a003f4c:	429c      	cmp	r4, r3
1a003f4e:	fa02 f207 	lsl.w	r2, r2, r7
1a003f52:	fa00 f107 	lsl.w	r1, r0, r7
1a003f56:	d90b      	bls.n	1a003f70 <__udivmoddi4+0x1b0>
1a003f58:	eb1e 0303 	adds.w	r3, lr, r3
1a003f5c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003f60:	f080 8087 	bcs.w	1a004072 <__udivmoddi4+0x2b2>
1a003f64:	429c      	cmp	r4, r3
1a003f66:	f240 8084 	bls.w	1a004072 <__udivmoddi4+0x2b2>
1a003f6a:	f1a9 0902 	sub.w	r9, r9, #2
1a003f6e:	4473      	add	r3, lr
1a003f70:	1b1b      	subs	r3, r3, r4
1a003f72:	b2ad      	uxth	r5, r5
1a003f74:	fbb3 f0f8 	udiv	r0, r3, r8
1a003f78:	fb08 3310 	mls	r3, r8, r0, r3
1a003f7c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003f80:	fb00 fa0a 	mul.w	sl, r0, sl
1a003f84:	45a2      	cmp	sl, r4
1a003f86:	d908      	bls.n	1a003f9a <__udivmoddi4+0x1da>
1a003f88:	eb1e 0404 	adds.w	r4, lr, r4
1a003f8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003f90:	d26b      	bcs.n	1a00406a <__udivmoddi4+0x2aa>
1a003f92:	45a2      	cmp	sl, r4
1a003f94:	d969      	bls.n	1a00406a <__udivmoddi4+0x2aa>
1a003f96:	3802      	subs	r0, #2
1a003f98:	4474      	add	r4, lr
1a003f9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003f9e:	fba0 8902 	umull	r8, r9, r0, r2
1a003fa2:	eba4 040a 	sub.w	r4, r4, sl
1a003fa6:	454c      	cmp	r4, r9
1a003fa8:	46c2      	mov	sl, r8
1a003faa:	464b      	mov	r3, r9
1a003fac:	d354      	bcc.n	1a004058 <__udivmoddi4+0x298>
1a003fae:	d051      	beq.n	1a004054 <__udivmoddi4+0x294>
1a003fb0:	2e00      	cmp	r6, #0
1a003fb2:	d069      	beq.n	1a004088 <__udivmoddi4+0x2c8>
1a003fb4:	ebb1 050a 	subs.w	r5, r1, sl
1a003fb8:	eb64 0403 	sbc.w	r4, r4, r3
1a003fbc:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003fc0:	40fd      	lsrs	r5, r7
1a003fc2:	40fc      	lsrs	r4, r7
1a003fc4:	ea4c 0505 	orr.w	r5, ip, r5
1a003fc8:	e9c6 5400 	strd	r5, r4, [r6]
1a003fcc:	2700      	movs	r7, #0
1a003fce:	e747      	b.n	1a003e60 <__udivmoddi4+0xa0>
1a003fd0:	f1c2 0320 	rsb	r3, r2, #32
1a003fd4:	fa20 f703 	lsr.w	r7, r0, r3
1a003fd8:	4095      	lsls	r5, r2
1a003fda:	fa01 f002 	lsl.w	r0, r1, r2
1a003fde:	fa21 f303 	lsr.w	r3, r1, r3
1a003fe2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003fe6:	4338      	orrs	r0, r7
1a003fe8:	0c01      	lsrs	r1, r0, #16
1a003fea:	fbb3 f7fe 	udiv	r7, r3, lr
1a003fee:	fa1f f885 	uxth.w	r8, r5
1a003ff2:	fb0e 3317 	mls	r3, lr, r7, r3
1a003ff6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003ffa:	fb07 f308 	mul.w	r3, r7, r8
1a003ffe:	428b      	cmp	r3, r1
1a004000:	fa04 f402 	lsl.w	r4, r4, r2
1a004004:	d907      	bls.n	1a004016 <__udivmoddi4+0x256>
1a004006:	1869      	adds	r1, r5, r1
1a004008:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00400c:	d22f      	bcs.n	1a00406e <__udivmoddi4+0x2ae>
1a00400e:	428b      	cmp	r3, r1
1a004010:	d92d      	bls.n	1a00406e <__udivmoddi4+0x2ae>
1a004012:	3f02      	subs	r7, #2
1a004014:	4429      	add	r1, r5
1a004016:	1acb      	subs	r3, r1, r3
1a004018:	b281      	uxth	r1, r0
1a00401a:	fbb3 f0fe 	udiv	r0, r3, lr
1a00401e:	fb0e 3310 	mls	r3, lr, r0, r3
1a004022:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004026:	fb00 f308 	mul.w	r3, r0, r8
1a00402a:	428b      	cmp	r3, r1
1a00402c:	d907      	bls.n	1a00403e <__udivmoddi4+0x27e>
1a00402e:	1869      	adds	r1, r5, r1
1a004030:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a004034:	d217      	bcs.n	1a004066 <__udivmoddi4+0x2a6>
1a004036:	428b      	cmp	r3, r1
1a004038:	d915      	bls.n	1a004066 <__udivmoddi4+0x2a6>
1a00403a:	3802      	subs	r0, #2
1a00403c:	4429      	add	r1, r5
1a00403e:	1ac9      	subs	r1, r1, r3
1a004040:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a004044:	e73b      	b.n	1a003ebe <__udivmoddi4+0xfe>
1a004046:	4637      	mov	r7, r6
1a004048:	4630      	mov	r0, r6
1a00404a:	e709      	b.n	1a003e60 <__udivmoddi4+0xa0>
1a00404c:	4607      	mov	r7, r0
1a00404e:	e6e7      	b.n	1a003e20 <__udivmoddi4+0x60>
1a004050:	4618      	mov	r0, r3
1a004052:	e6fb      	b.n	1a003e4c <__udivmoddi4+0x8c>
1a004054:	4541      	cmp	r1, r8
1a004056:	d2ab      	bcs.n	1a003fb0 <__udivmoddi4+0x1f0>
1a004058:	ebb8 0a02 	subs.w	sl, r8, r2
1a00405c:	eb69 020e 	sbc.w	r2, r9, lr
1a004060:	3801      	subs	r0, #1
1a004062:	4613      	mov	r3, r2
1a004064:	e7a4      	b.n	1a003fb0 <__udivmoddi4+0x1f0>
1a004066:	4660      	mov	r0, ip
1a004068:	e7e9      	b.n	1a00403e <__udivmoddi4+0x27e>
1a00406a:	4618      	mov	r0, r3
1a00406c:	e795      	b.n	1a003f9a <__udivmoddi4+0x1da>
1a00406e:	4667      	mov	r7, ip
1a004070:	e7d1      	b.n	1a004016 <__udivmoddi4+0x256>
1a004072:	4681      	mov	r9, r0
1a004074:	e77c      	b.n	1a003f70 <__udivmoddi4+0x1b0>
1a004076:	3802      	subs	r0, #2
1a004078:	442c      	add	r4, r5
1a00407a:	e747      	b.n	1a003f0c <__udivmoddi4+0x14c>
1a00407c:	f1ac 0c02 	sub.w	ip, ip, #2
1a004080:	442b      	add	r3, r5
1a004082:	e72f      	b.n	1a003ee4 <__udivmoddi4+0x124>
1a004084:	4638      	mov	r0, r7
1a004086:	e708      	b.n	1a003e9a <__udivmoddi4+0xda>
1a004088:	4637      	mov	r7, r6
1a00408a:	e6e9      	b.n	1a003e60 <__udivmoddi4+0xa0>

1a00408c <__aeabi_idiv0>:
1a00408c:	4770      	bx	lr
1a00408e:	bf00      	nop

1a004090 <__sflush_r>:
1a004090:	898a      	ldrh	r2, [r1, #12]
1a004092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004096:	4605      	mov	r5, r0
1a004098:	0710      	lsls	r0, r2, #28
1a00409a:	460c      	mov	r4, r1
1a00409c:	d458      	bmi.n	1a004150 <__sflush_r+0xc0>
1a00409e:	684b      	ldr	r3, [r1, #4]
1a0040a0:	2b00      	cmp	r3, #0
1a0040a2:	dc05      	bgt.n	1a0040b0 <__sflush_r+0x20>
1a0040a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0040a6:	2b00      	cmp	r3, #0
1a0040a8:	dc02      	bgt.n	1a0040b0 <__sflush_r+0x20>
1a0040aa:	2000      	movs	r0, #0
1a0040ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0040b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0040b2:	2e00      	cmp	r6, #0
1a0040b4:	d0f9      	beq.n	1a0040aa <__sflush_r+0x1a>
1a0040b6:	2300      	movs	r3, #0
1a0040b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0040bc:	682f      	ldr	r7, [r5, #0]
1a0040be:	6a21      	ldr	r1, [r4, #32]
1a0040c0:	602b      	str	r3, [r5, #0]
1a0040c2:	d032      	beq.n	1a00412a <__sflush_r+0x9a>
1a0040c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0040c6:	89a3      	ldrh	r3, [r4, #12]
1a0040c8:	075a      	lsls	r2, r3, #29
1a0040ca:	d505      	bpl.n	1a0040d8 <__sflush_r+0x48>
1a0040cc:	6863      	ldr	r3, [r4, #4]
1a0040ce:	1ac0      	subs	r0, r0, r3
1a0040d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0040d2:	b10b      	cbz	r3, 1a0040d8 <__sflush_r+0x48>
1a0040d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0040d6:	1ac0      	subs	r0, r0, r3
1a0040d8:	2300      	movs	r3, #0
1a0040da:	4602      	mov	r2, r0
1a0040dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0040de:	6a21      	ldr	r1, [r4, #32]
1a0040e0:	4628      	mov	r0, r5
1a0040e2:	47b0      	blx	r6
1a0040e4:	1c43      	adds	r3, r0, #1
1a0040e6:	89a3      	ldrh	r3, [r4, #12]
1a0040e8:	d106      	bne.n	1a0040f8 <__sflush_r+0x68>
1a0040ea:	6829      	ldr	r1, [r5, #0]
1a0040ec:	291d      	cmp	r1, #29
1a0040ee:	d848      	bhi.n	1a004182 <__sflush_r+0xf2>
1a0040f0:	4a29      	ldr	r2, [pc, #164]	; (1a004198 <__sflush_r+0x108>)
1a0040f2:	40ca      	lsrs	r2, r1
1a0040f4:	07d6      	lsls	r6, r2, #31
1a0040f6:	d544      	bpl.n	1a004182 <__sflush_r+0xf2>
1a0040f8:	2200      	movs	r2, #0
1a0040fa:	6062      	str	r2, [r4, #4]
1a0040fc:	04d9      	lsls	r1, r3, #19
1a0040fe:	6922      	ldr	r2, [r4, #16]
1a004100:	6022      	str	r2, [r4, #0]
1a004102:	d504      	bpl.n	1a00410e <__sflush_r+0x7e>
1a004104:	1c42      	adds	r2, r0, #1
1a004106:	d101      	bne.n	1a00410c <__sflush_r+0x7c>
1a004108:	682b      	ldr	r3, [r5, #0]
1a00410a:	b903      	cbnz	r3, 1a00410e <__sflush_r+0x7e>
1a00410c:	6560      	str	r0, [r4, #84]	; 0x54
1a00410e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004110:	602f      	str	r7, [r5, #0]
1a004112:	2900      	cmp	r1, #0
1a004114:	d0c9      	beq.n	1a0040aa <__sflush_r+0x1a>
1a004116:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00411a:	4299      	cmp	r1, r3
1a00411c:	d002      	beq.n	1a004124 <__sflush_r+0x94>
1a00411e:	4628      	mov	r0, r5
1a004120:	f000 f968 	bl	1a0043f4 <_free_r>
1a004124:	2000      	movs	r0, #0
1a004126:	6360      	str	r0, [r4, #52]	; 0x34
1a004128:	e7c0      	b.n	1a0040ac <__sflush_r+0x1c>
1a00412a:	2301      	movs	r3, #1
1a00412c:	4628      	mov	r0, r5
1a00412e:	47b0      	blx	r6
1a004130:	1c41      	adds	r1, r0, #1
1a004132:	d1c8      	bne.n	1a0040c6 <__sflush_r+0x36>
1a004134:	682b      	ldr	r3, [r5, #0]
1a004136:	2b00      	cmp	r3, #0
1a004138:	d0c5      	beq.n	1a0040c6 <__sflush_r+0x36>
1a00413a:	2b1d      	cmp	r3, #29
1a00413c:	d001      	beq.n	1a004142 <__sflush_r+0xb2>
1a00413e:	2b16      	cmp	r3, #22
1a004140:	d101      	bne.n	1a004146 <__sflush_r+0xb6>
1a004142:	602f      	str	r7, [r5, #0]
1a004144:	e7b1      	b.n	1a0040aa <__sflush_r+0x1a>
1a004146:	89a3      	ldrh	r3, [r4, #12]
1a004148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00414c:	81a3      	strh	r3, [r4, #12]
1a00414e:	e7ad      	b.n	1a0040ac <__sflush_r+0x1c>
1a004150:	690f      	ldr	r7, [r1, #16]
1a004152:	2f00      	cmp	r7, #0
1a004154:	d0a9      	beq.n	1a0040aa <__sflush_r+0x1a>
1a004156:	0793      	lsls	r3, r2, #30
1a004158:	680e      	ldr	r6, [r1, #0]
1a00415a:	bf08      	it	eq
1a00415c:	694b      	ldreq	r3, [r1, #20]
1a00415e:	600f      	str	r7, [r1, #0]
1a004160:	bf18      	it	ne
1a004162:	2300      	movne	r3, #0
1a004164:	eba6 0807 	sub.w	r8, r6, r7
1a004168:	608b      	str	r3, [r1, #8]
1a00416a:	f1b8 0f00 	cmp.w	r8, #0
1a00416e:	dd9c      	ble.n	1a0040aa <__sflush_r+0x1a>
1a004170:	4643      	mov	r3, r8
1a004172:	463a      	mov	r2, r7
1a004174:	6a21      	ldr	r1, [r4, #32]
1a004176:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004178:	4628      	mov	r0, r5
1a00417a:	47b0      	blx	r6
1a00417c:	2800      	cmp	r0, #0
1a00417e:	dc06      	bgt.n	1a00418e <__sflush_r+0xfe>
1a004180:	89a3      	ldrh	r3, [r4, #12]
1a004182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004186:	81a3      	strh	r3, [r4, #12]
1a004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00418c:	e78e      	b.n	1a0040ac <__sflush_r+0x1c>
1a00418e:	4407      	add	r7, r0
1a004190:	eba8 0800 	sub.w	r8, r8, r0
1a004194:	e7e9      	b.n	1a00416a <__sflush_r+0xda>
1a004196:	bf00      	nop
1a004198:	20400001 	.word	0x20400001

1a00419c <_fflush_r>:
1a00419c:	b538      	push	{r3, r4, r5, lr}
1a00419e:	690b      	ldr	r3, [r1, #16]
1a0041a0:	4605      	mov	r5, r0
1a0041a2:	460c      	mov	r4, r1
1a0041a4:	b1db      	cbz	r3, 1a0041de <_fflush_r+0x42>
1a0041a6:	b118      	cbz	r0, 1a0041b0 <_fflush_r+0x14>
1a0041a8:	6983      	ldr	r3, [r0, #24]
1a0041aa:	b90b      	cbnz	r3, 1a0041b0 <_fflush_r+0x14>
1a0041ac:	f000 f860 	bl	1a004270 <__sinit>
1a0041b0:	4b0c      	ldr	r3, [pc, #48]	; (1a0041e4 <_fflush_r+0x48>)
1a0041b2:	429c      	cmp	r4, r3
1a0041b4:	d109      	bne.n	1a0041ca <_fflush_r+0x2e>
1a0041b6:	686c      	ldr	r4, [r5, #4]
1a0041b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0041bc:	b17b      	cbz	r3, 1a0041de <_fflush_r+0x42>
1a0041be:	4621      	mov	r1, r4
1a0041c0:	4628      	mov	r0, r5
1a0041c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0041c6:	f7ff bf63 	b.w	1a004090 <__sflush_r>
1a0041ca:	4b07      	ldr	r3, [pc, #28]	; (1a0041e8 <_fflush_r+0x4c>)
1a0041cc:	429c      	cmp	r4, r3
1a0041ce:	d101      	bne.n	1a0041d4 <_fflush_r+0x38>
1a0041d0:	68ac      	ldr	r4, [r5, #8]
1a0041d2:	e7f1      	b.n	1a0041b8 <_fflush_r+0x1c>
1a0041d4:	4b05      	ldr	r3, [pc, #20]	; (1a0041ec <_fflush_r+0x50>)
1a0041d6:	429c      	cmp	r4, r3
1a0041d8:	bf08      	it	eq
1a0041da:	68ec      	ldreq	r4, [r5, #12]
1a0041dc:	e7ec      	b.n	1a0041b8 <_fflush_r+0x1c>
1a0041de:	2000      	movs	r0, #0
1a0041e0:	bd38      	pop	{r3, r4, r5, pc}
1a0041e2:	bf00      	nop
1a0041e4:	1a0052ec 	.word	0x1a0052ec
1a0041e8:	1a00530c 	.word	0x1a00530c
1a0041ec:	1a0052cc 	.word	0x1a0052cc

1a0041f0 <std>:
1a0041f0:	2300      	movs	r3, #0
1a0041f2:	b510      	push	{r4, lr}
1a0041f4:	4604      	mov	r4, r0
1a0041f6:	e9c0 3300 	strd	r3, r3, [r0]
1a0041fa:	6083      	str	r3, [r0, #8]
1a0041fc:	8181      	strh	r1, [r0, #12]
1a0041fe:	6643      	str	r3, [r0, #100]	; 0x64
1a004200:	81c2      	strh	r2, [r0, #14]
1a004202:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004206:	6183      	str	r3, [r0, #24]
1a004208:	4619      	mov	r1, r3
1a00420a:	2208      	movs	r2, #8
1a00420c:	305c      	adds	r0, #92	; 0x5c
1a00420e:	f000 f8e8 	bl	1a0043e2 <memset>
1a004212:	4b05      	ldr	r3, [pc, #20]	; (1a004228 <std+0x38>)
1a004214:	6263      	str	r3, [r4, #36]	; 0x24
1a004216:	4b05      	ldr	r3, [pc, #20]	; (1a00422c <std+0x3c>)
1a004218:	62a3      	str	r3, [r4, #40]	; 0x28
1a00421a:	4b05      	ldr	r3, [pc, #20]	; (1a004230 <std+0x40>)
1a00421c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00421e:	4b05      	ldr	r3, [pc, #20]	; (1a004234 <std+0x44>)
1a004220:	6224      	str	r4, [r4, #32]
1a004222:	6323      	str	r3, [r4, #48]	; 0x30
1a004224:	bd10      	pop	{r4, pc}
1a004226:	bf00      	nop
1a004228:	1a00463d 	.word	0x1a00463d
1a00422c:	1a00465f 	.word	0x1a00465f
1a004230:	1a004697 	.word	0x1a004697
1a004234:	1a0046bb 	.word	0x1a0046bb

1a004238 <_cleanup_r>:
1a004238:	4901      	ldr	r1, [pc, #4]	; (1a004240 <_cleanup_r+0x8>)
1a00423a:	f000 b885 	b.w	1a004348 <_fwalk_reent>
1a00423e:	bf00      	nop
1a004240:	1a00419d 	.word	0x1a00419d

1a004244 <__sfmoreglue>:
1a004244:	b570      	push	{r4, r5, r6, lr}
1a004246:	1e4a      	subs	r2, r1, #1
1a004248:	2568      	movs	r5, #104	; 0x68
1a00424a:	4355      	muls	r5, r2
1a00424c:	460e      	mov	r6, r1
1a00424e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004252:	f000 f91d 	bl	1a004490 <_malloc_r>
1a004256:	4604      	mov	r4, r0
1a004258:	b140      	cbz	r0, 1a00426c <__sfmoreglue+0x28>
1a00425a:	2100      	movs	r1, #0
1a00425c:	e9c0 1600 	strd	r1, r6, [r0]
1a004260:	300c      	adds	r0, #12
1a004262:	60a0      	str	r0, [r4, #8]
1a004264:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004268:	f000 f8bb 	bl	1a0043e2 <memset>
1a00426c:	4620      	mov	r0, r4
1a00426e:	bd70      	pop	{r4, r5, r6, pc}

1a004270 <__sinit>:
1a004270:	6983      	ldr	r3, [r0, #24]
1a004272:	b510      	push	{r4, lr}
1a004274:	4604      	mov	r4, r0
1a004276:	bb33      	cbnz	r3, 1a0042c6 <__sinit+0x56>
1a004278:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a00427c:	6503      	str	r3, [r0, #80]	; 0x50
1a00427e:	4b12      	ldr	r3, [pc, #72]	; (1a0042c8 <__sinit+0x58>)
1a004280:	4a12      	ldr	r2, [pc, #72]	; (1a0042cc <__sinit+0x5c>)
1a004282:	681b      	ldr	r3, [r3, #0]
1a004284:	6282      	str	r2, [r0, #40]	; 0x28
1a004286:	4298      	cmp	r0, r3
1a004288:	bf04      	itt	eq
1a00428a:	2301      	moveq	r3, #1
1a00428c:	6183      	streq	r3, [r0, #24]
1a00428e:	f000 f81f 	bl	1a0042d0 <__sfp>
1a004292:	6060      	str	r0, [r4, #4]
1a004294:	4620      	mov	r0, r4
1a004296:	f000 f81b 	bl	1a0042d0 <__sfp>
1a00429a:	60a0      	str	r0, [r4, #8]
1a00429c:	4620      	mov	r0, r4
1a00429e:	f000 f817 	bl	1a0042d0 <__sfp>
1a0042a2:	2200      	movs	r2, #0
1a0042a4:	60e0      	str	r0, [r4, #12]
1a0042a6:	2104      	movs	r1, #4
1a0042a8:	6860      	ldr	r0, [r4, #4]
1a0042aa:	f7ff ffa1 	bl	1a0041f0 <std>
1a0042ae:	2201      	movs	r2, #1
1a0042b0:	2109      	movs	r1, #9
1a0042b2:	68a0      	ldr	r0, [r4, #8]
1a0042b4:	f7ff ff9c 	bl	1a0041f0 <std>
1a0042b8:	2202      	movs	r2, #2
1a0042ba:	2112      	movs	r1, #18
1a0042bc:	68e0      	ldr	r0, [r4, #12]
1a0042be:	f7ff ff97 	bl	1a0041f0 <std>
1a0042c2:	2301      	movs	r3, #1
1a0042c4:	61a3      	str	r3, [r4, #24]
1a0042c6:	bd10      	pop	{r4, pc}
1a0042c8:	1a00532c 	.word	0x1a00532c
1a0042cc:	1a004239 	.word	0x1a004239

1a0042d0 <__sfp>:
1a0042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0042d2:	4b1b      	ldr	r3, [pc, #108]	; (1a004340 <__sfp+0x70>)
1a0042d4:	681e      	ldr	r6, [r3, #0]
1a0042d6:	69b3      	ldr	r3, [r6, #24]
1a0042d8:	4607      	mov	r7, r0
1a0042da:	b913      	cbnz	r3, 1a0042e2 <__sfp+0x12>
1a0042dc:	4630      	mov	r0, r6
1a0042de:	f7ff ffc7 	bl	1a004270 <__sinit>
1a0042e2:	3648      	adds	r6, #72	; 0x48
1a0042e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0042e8:	3b01      	subs	r3, #1
1a0042ea:	d503      	bpl.n	1a0042f4 <__sfp+0x24>
1a0042ec:	6833      	ldr	r3, [r6, #0]
1a0042ee:	b133      	cbz	r3, 1a0042fe <__sfp+0x2e>
1a0042f0:	6836      	ldr	r6, [r6, #0]
1a0042f2:	e7f7      	b.n	1a0042e4 <__sfp+0x14>
1a0042f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0042f8:	b16d      	cbz	r5, 1a004316 <__sfp+0x46>
1a0042fa:	3468      	adds	r4, #104	; 0x68
1a0042fc:	e7f4      	b.n	1a0042e8 <__sfp+0x18>
1a0042fe:	2104      	movs	r1, #4
1a004300:	4638      	mov	r0, r7
1a004302:	f7ff ff9f 	bl	1a004244 <__sfmoreglue>
1a004306:	6030      	str	r0, [r6, #0]
1a004308:	2800      	cmp	r0, #0
1a00430a:	d1f1      	bne.n	1a0042f0 <__sfp+0x20>
1a00430c:	230c      	movs	r3, #12
1a00430e:	603b      	str	r3, [r7, #0]
1a004310:	4604      	mov	r4, r0
1a004312:	4620      	mov	r0, r4
1a004314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004316:	4b0b      	ldr	r3, [pc, #44]	; (1a004344 <__sfp+0x74>)
1a004318:	6665      	str	r5, [r4, #100]	; 0x64
1a00431a:	e9c4 5500 	strd	r5, r5, [r4]
1a00431e:	60a5      	str	r5, [r4, #8]
1a004320:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004324:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004328:	2208      	movs	r2, #8
1a00432a:	4629      	mov	r1, r5
1a00432c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004330:	f000 f857 	bl	1a0043e2 <memset>
1a004334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a00433c:	e7e9      	b.n	1a004312 <__sfp+0x42>
1a00433e:	bf00      	nop
1a004340:	1a00532c 	.word	0x1a00532c
1a004344:	ffff0001 	.word	0xffff0001

1a004348 <_fwalk_reent>:
1a004348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00434c:	4680      	mov	r8, r0
1a00434e:	4689      	mov	r9, r1
1a004350:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004354:	2600      	movs	r6, #0
1a004356:	b914      	cbnz	r4, 1a00435e <_fwalk_reent+0x16>
1a004358:	4630      	mov	r0, r6
1a00435a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00435e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004362:	3f01      	subs	r7, #1
1a004364:	d501      	bpl.n	1a00436a <_fwalk_reent+0x22>
1a004366:	6824      	ldr	r4, [r4, #0]
1a004368:	e7f5      	b.n	1a004356 <_fwalk_reent+0xe>
1a00436a:	89ab      	ldrh	r3, [r5, #12]
1a00436c:	2b01      	cmp	r3, #1
1a00436e:	d907      	bls.n	1a004380 <_fwalk_reent+0x38>
1a004370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004374:	3301      	adds	r3, #1
1a004376:	d003      	beq.n	1a004380 <_fwalk_reent+0x38>
1a004378:	4629      	mov	r1, r5
1a00437a:	4640      	mov	r0, r8
1a00437c:	47c8      	blx	r9
1a00437e:	4306      	orrs	r6, r0
1a004380:	3568      	adds	r5, #104	; 0x68
1a004382:	e7ee      	b.n	1a004362 <_fwalk_reent+0x1a>

1a004384 <__libc_init_array>:
1a004384:	b570      	push	{r4, r5, r6, lr}
1a004386:	4e0d      	ldr	r6, [pc, #52]	; (1a0043bc <__libc_init_array+0x38>)
1a004388:	4c0d      	ldr	r4, [pc, #52]	; (1a0043c0 <__libc_init_array+0x3c>)
1a00438a:	1ba4      	subs	r4, r4, r6
1a00438c:	10a4      	asrs	r4, r4, #2
1a00438e:	2500      	movs	r5, #0
1a004390:	42a5      	cmp	r5, r4
1a004392:	d109      	bne.n	1a0043a8 <__libc_init_array+0x24>
1a004394:	4e0b      	ldr	r6, [pc, #44]	; (1a0043c4 <__libc_init_array+0x40>)
1a004396:	4c0c      	ldr	r4, [pc, #48]	; (1a0043c8 <__libc_init_array+0x44>)
1a004398:	f7fc fa9b 	bl	1a0008d2 <_init>
1a00439c:	1ba4      	subs	r4, r4, r6
1a00439e:	10a4      	asrs	r4, r4, #2
1a0043a0:	2500      	movs	r5, #0
1a0043a2:	42a5      	cmp	r5, r4
1a0043a4:	d105      	bne.n	1a0043b2 <__libc_init_array+0x2e>
1a0043a6:	bd70      	pop	{r4, r5, r6, pc}
1a0043a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0043ac:	4798      	blx	r3
1a0043ae:	3501      	adds	r5, #1
1a0043b0:	e7ee      	b.n	1a004390 <__libc_init_array+0xc>
1a0043b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0043b6:	4798      	blx	r3
1a0043b8:	3501      	adds	r5, #1
1a0043ba:	e7f2      	b.n	1a0043a2 <__libc_init_array+0x1e>
1a0043bc:	1a005364 	.word	0x1a005364
1a0043c0:	1a005364 	.word	0x1a005364
1a0043c4:	1a005364 	.word	0x1a005364
1a0043c8:	1a005368 	.word	0x1a005368

1a0043cc <memcpy>:
1a0043cc:	b510      	push	{r4, lr}
1a0043ce:	1e43      	subs	r3, r0, #1
1a0043d0:	440a      	add	r2, r1
1a0043d2:	4291      	cmp	r1, r2
1a0043d4:	d100      	bne.n	1a0043d8 <memcpy+0xc>
1a0043d6:	bd10      	pop	{r4, pc}
1a0043d8:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0043dc:	f803 4f01 	strb.w	r4, [r3, #1]!
1a0043e0:	e7f7      	b.n	1a0043d2 <memcpy+0x6>

1a0043e2 <memset>:
1a0043e2:	4402      	add	r2, r0
1a0043e4:	4603      	mov	r3, r0
1a0043e6:	4293      	cmp	r3, r2
1a0043e8:	d100      	bne.n	1a0043ec <memset+0xa>
1a0043ea:	4770      	bx	lr
1a0043ec:	f803 1b01 	strb.w	r1, [r3], #1
1a0043f0:	e7f9      	b.n	1a0043e6 <memset+0x4>
1a0043f2:	Address 0x000000001a0043f2 is out of bounds.


1a0043f4 <_free_r>:
1a0043f4:	b538      	push	{r3, r4, r5, lr}
1a0043f6:	4605      	mov	r5, r0
1a0043f8:	2900      	cmp	r1, #0
1a0043fa:	d045      	beq.n	1a004488 <_free_r+0x94>
1a0043fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004400:	1f0c      	subs	r4, r1, #4
1a004402:	2b00      	cmp	r3, #0
1a004404:	bfb8      	it	lt
1a004406:	18e4      	addlt	r4, r4, r3
1a004408:	f000 fa80 	bl	1a00490c <__malloc_lock>
1a00440c:	4a1f      	ldr	r2, [pc, #124]	; (1a00448c <_free_r+0x98>)
1a00440e:	6813      	ldr	r3, [r2, #0]
1a004410:	4610      	mov	r0, r2
1a004412:	b933      	cbnz	r3, 1a004422 <_free_r+0x2e>
1a004414:	6063      	str	r3, [r4, #4]
1a004416:	6014      	str	r4, [r2, #0]
1a004418:	4628      	mov	r0, r5
1a00441a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00441e:	f000 ba76 	b.w	1a00490e <__malloc_unlock>
1a004422:	42a3      	cmp	r3, r4
1a004424:	d90c      	bls.n	1a004440 <_free_r+0x4c>
1a004426:	6821      	ldr	r1, [r4, #0]
1a004428:	1862      	adds	r2, r4, r1
1a00442a:	4293      	cmp	r3, r2
1a00442c:	bf04      	itt	eq
1a00442e:	681a      	ldreq	r2, [r3, #0]
1a004430:	685b      	ldreq	r3, [r3, #4]
1a004432:	6063      	str	r3, [r4, #4]
1a004434:	bf04      	itt	eq
1a004436:	1852      	addeq	r2, r2, r1
1a004438:	6022      	streq	r2, [r4, #0]
1a00443a:	6004      	str	r4, [r0, #0]
1a00443c:	e7ec      	b.n	1a004418 <_free_r+0x24>
1a00443e:	4613      	mov	r3, r2
1a004440:	685a      	ldr	r2, [r3, #4]
1a004442:	b10a      	cbz	r2, 1a004448 <_free_r+0x54>
1a004444:	42a2      	cmp	r2, r4
1a004446:	d9fa      	bls.n	1a00443e <_free_r+0x4a>
1a004448:	6819      	ldr	r1, [r3, #0]
1a00444a:	1858      	adds	r0, r3, r1
1a00444c:	42a0      	cmp	r0, r4
1a00444e:	d10b      	bne.n	1a004468 <_free_r+0x74>
1a004450:	6820      	ldr	r0, [r4, #0]
1a004452:	4401      	add	r1, r0
1a004454:	1858      	adds	r0, r3, r1
1a004456:	4282      	cmp	r2, r0
1a004458:	6019      	str	r1, [r3, #0]
1a00445a:	d1dd      	bne.n	1a004418 <_free_r+0x24>
1a00445c:	6810      	ldr	r0, [r2, #0]
1a00445e:	6852      	ldr	r2, [r2, #4]
1a004460:	605a      	str	r2, [r3, #4]
1a004462:	4401      	add	r1, r0
1a004464:	6019      	str	r1, [r3, #0]
1a004466:	e7d7      	b.n	1a004418 <_free_r+0x24>
1a004468:	d902      	bls.n	1a004470 <_free_r+0x7c>
1a00446a:	230c      	movs	r3, #12
1a00446c:	602b      	str	r3, [r5, #0]
1a00446e:	e7d3      	b.n	1a004418 <_free_r+0x24>
1a004470:	6820      	ldr	r0, [r4, #0]
1a004472:	1821      	adds	r1, r4, r0
1a004474:	428a      	cmp	r2, r1
1a004476:	bf04      	itt	eq
1a004478:	6811      	ldreq	r1, [r2, #0]
1a00447a:	6852      	ldreq	r2, [r2, #4]
1a00447c:	6062      	str	r2, [r4, #4]
1a00447e:	bf04      	itt	eq
1a004480:	1809      	addeq	r1, r1, r0
1a004482:	6021      	streq	r1, [r4, #0]
1a004484:	605c      	str	r4, [r3, #4]
1a004486:	e7c7      	b.n	1a004418 <_free_r+0x24>
1a004488:	bd38      	pop	{r3, r4, r5, pc}
1a00448a:	bf00      	nop
1a00448c:	10002c30 	.word	0x10002c30

1a004490 <_malloc_r>:
1a004490:	b570      	push	{r4, r5, r6, lr}
1a004492:	1ccd      	adds	r5, r1, #3
1a004494:	f025 0503 	bic.w	r5, r5, #3
1a004498:	3508      	adds	r5, #8
1a00449a:	2d0c      	cmp	r5, #12
1a00449c:	bf38      	it	cc
1a00449e:	250c      	movcc	r5, #12
1a0044a0:	2d00      	cmp	r5, #0
1a0044a2:	4606      	mov	r6, r0
1a0044a4:	db01      	blt.n	1a0044aa <_malloc_r+0x1a>
1a0044a6:	42a9      	cmp	r1, r5
1a0044a8:	d903      	bls.n	1a0044b2 <_malloc_r+0x22>
1a0044aa:	230c      	movs	r3, #12
1a0044ac:	6033      	str	r3, [r6, #0]
1a0044ae:	2000      	movs	r0, #0
1a0044b0:	bd70      	pop	{r4, r5, r6, pc}
1a0044b2:	f000 fa2b 	bl	1a00490c <__malloc_lock>
1a0044b6:	4a21      	ldr	r2, [pc, #132]	; (1a00453c <_malloc_r+0xac>)
1a0044b8:	6814      	ldr	r4, [r2, #0]
1a0044ba:	4621      	mov	r1, r4
1a0044bc:	b991      	cbnz	r1, 1a0044e4 <_malloc_r+0x54>
1a0044be:	4c20      	ldr	r4, [pc, #128]	; (1a004540 <_malloc_r+0xb0>)
1a0044c0:	6823      	ldr	r3, [r4, #0]
1a0044c2:	b91b      	cbnz	r3, 1a0044cc <_malloc_r+0x3c>
1a0044c4:	4630      	mov	r0, r6
1a0044c6:	f7fc fa59 	bl	1a00097c <_sbrk_r>
1a0044ca:	6020      	str	r0, [r4, #0]
1a0044cc:	4629      	mov	r1, r5
1a0044ce:	4630      	mov	r0, r6
1a0044d0:	f7fc fa54 	bl	1a00097c <_sbrk_r>
1a0044d4:	1c43      	adds	r3, r0, #1
1a0044d6:	d124      	bne.n	1a004522 <_malloc_r+0x92>
1a0044d8:	230c      	movs	r3, #12
1a0044da:	6033      	str	r3, [r6, #0]
1a0044dc:	4630      	mov	r0, r6
1a0044de:	f000 fa16 	bl	1a00490e <__malloc_unlock>
1a0044e2:	e7e4      	b.n	1a0044ae <_malloc_r+0x1e>
1a0044e4:	680b      	ldr	r3, [r1, #0]
1a0044e6:	1b5b      	subs	r3, r3, r5
1a0044e8:	d418      	bmi.n	1a00451c <_malloc_r+0x8c>
1a0044ea:	2b0b      	cmp	r3, #11
1a0044ec:	d90f      	bls.n	1a00450e <_malloc_r+0x7e>
1a0044ee:	600b      	str	r3, [r1, #0]
1a0044f0:	50cd      	str	r5, [r1, r3]
1a0044f2:	18cc      	adds	r4, r1, r3
1a0044f4:	4630      	mov	r0, r6
1a0044f6:	f000 fa0a 	bl	1a00490e <__malloc_unlock>
1a0044fa:	f104 000b 	add.w	r0, r4, #11
1a0044fe:	1d23      	adds	r3, r4, #4
1a004500:	f020 0007 	bic.w	r0, r0, #7
1a004504:	1ac3      	subs	r3, r0, r3
1a004506:	d0d3      	beq.n	1a0044b0 <_malloc_r+0x20>
1a004508:	425a      	negs	r2, r3
1a00450a:	50e2      	str	r2, [r4, r3]
1a00450c:	e7d0      	b.n	1a0044b0 <_malloc_r+0x20>
1a00450e:	428c      	cmp	r4, r1
1a004510:	684b      	ldr	r3, [r1, #4]
1a004512:	bf16      	itet	ne
1a004514:	6063      	strne	r3, [r4, #4]
1a004516:	6013      	streq	r3, [r2, #0]
1a004518:	460c      	movne	r4, r1
1a00451a:	e7eb      	b.n	1a0044f4 <_malloc_r+0x64>
1a00451c:	460c      	mov	r4, r1
1a00451e:	6849      	ldr	r1, [r1, #4]
1a004520:	e7cc      	b.n	1a0044bc <_malloc_r+0x2c>
1a004522:	1cc4      	adds	r4, r0, #3
1a004524:	f024 0403 	bic.w	r4, r4, #3
1a004528:	42a0      	cmp	r0, r4
1a00452a:	d005      	beq.n	1a004538 <_malloc_r+0xa8>
1a00452c:	1a21      	subs	r1, r4, r0
1a00452e:	4630      	mov	r0, r6
1a004530:	f7fc fa24 	bl	1a00097c <_sbrk_r>
1a004534:	3001      	adds	r0, #1
1a004536:	d0cf      	beq.n	1a0044d8 <_malloc_r+0x48>
1a004538:	6025      	str	r5, [r4, #0]
1a00453a:	e7db      	b.n	1a0044f4 <_malloc_r+0x64>
1a00453c:	10002c30 	.word	0x10002c30
1a004540:	10002c34 	.word	0x10002c34

1a004544 <iprintf>:
1a004544:	b40f      	push	{r0, r1, r2, r3}
1a004546:	4b0a      	ldr	r3, [pc, #40]	; (1a004570 <iprintf+0x2c>)
1a004548:	b513      	push	{r0, r1, r4, lr}
1a00454a:	681c      	ldr	r4, [r3, #0]
1a00454c:	b124      	cbz	r4, 1a004558 <iprintf+0x14>
1a00454e:	69a3      	ldr	r3, [r4, #24]
1a004550:	b913      	cbnz	r3, 1a004558 <iprintf+0x14>
1a004552:	4620      	mov	r0, r4
1a004554:	f7ff fe8c 	bl	1a004270 <__sinit>
1a004558:	ab05      	add	r3, sp, #20
1a00455a:	9a04      	ldr	r2, [sp, #16]
1a00455c:	68a1      	ldr	r1, [r4, #8]
1a00455e:	9301      	str	r3, [sp, #4]
1a004560:	4620      	mov	r0, r4
1a004562:	f000 f9ff 	bl	1a004964 <_vfiprintf_r>
1a004566:	b002      	add	sp, #8
1a004568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00456c:	b004      	add	sp, #16
1a00456e:	4770      	bx	lr
1a004570:	100000c8 	.word	0x100000c8

1a004574 <_puts_r>:
1a004574:	b570      	push	{r4, r5, r6, lr}
1a004576:	460e      	mov	r6, r1
1a004578:	4605      	mov	r5, r0
1a00457a:	b118      	cbz	r0, 1a004584 <_puts_r+0x10>
1a00457c:	6983      	ldr	r3, [r0, #24]
1a00457e:	b90b      	cbnz	r3, 1a004584 <_puts_r+0x10>
1a004580:	f7ff fe76 	bl	1a004270 <__sinit>
1a004584:	69ab      	ldr	r3, [r5, #24]
1a004586:	68ac      	ldr	r4, [r5, #8]
1a004588:	b913      	cbnz	r3, 1a004590 <_puts_r+0x1c>
1a00458a:	4628      	mov	r0, r5
1a00458c:	f7ff fe70 	bl	1a004270 <__sinit>
1a004590:	4b23      	ldr	r3, [pc, #140]	; (1a004620 <_puts_r+0xac>)
1a004592:	429c      	cmp	r4, r3
1a004594:	d117      	bne.n	1a0045c6 <_puts_r+0x52>
1a004596:	686c      	ldr	r4, [r5, #4]
1a004598:	89a3      	ldrh	r3, [r4, #12]
1a00459a:	071b      	lsls	r3, r3, #28
1a00459c:	d51d      	bpl.n	1a0045da <_puts_r+0x66>
1a00459e:	6923      	ldr	r3, [r4, #16]
1a0045a0:	b1db      	cbz	r3, 1a0045da <_puts_r+0x66>
1a0045a2:	3e01      	subs	r6, #1
1a0045a4:	68a3      	ldr	r3, [r4, #8]
1a0045a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0045aa:	3b01      	subs	r3, #1
1a0045ac:	60a3      	str	r3, [r4, #8]
1a0045ae:	b9e9      	cbnz	r1, 1a0045ec <_puts_r+0x78>
1a0045b0:	2b00      	cmp	r3, #0
1a0045b2:	da2e      	bge.n	1a004612 <_puts_r+0x9e>
1a0045b4:	4622      	mov	r2, r4
1a0045b6:	210a      	movs	r1, #10
1a0045b8:	4628      	mov	r0, r5
1a0045ba:	f000 f883 	bl	1a0046c4 <__swbuf_r>
1a0045be:	3001      	adds	r0, #1
1a0045c0:	d011      	beq.n	1a0045e6 <_puts_r+0x72>
1a0045c2:	200a      	movs	r0, #10
1a0045c4:	e011      	b.n	1a0045ea <_puts_r+0x76>
1a0045c6:	4b17      	ldr	r3, [pc, #92]	; (1a004624 <_puts_r+0xb0>)
1a0045c8:	429c      	cmp	r4, r3
1a0045ca:	d101      	bne.n	1a0045d0 <_puts_r+0x5c>
1a0045cc:	68ac      	ldr	r4, [r5, #8]
1a0045ce:	e7e3      	b.n	1a004598 <_puts_r+0x24>
1a0045d0:	4b15      	ldr	r3, [pc, #84]	; (1a004628 <_puts_r+0xb4>)
1a0045d2:	429c      	cmp	r4, r3
1a0045d4:	bf08      	it	eq
1a0045d6:	68ec      	ldreq	r4, [r5, #12]
1a0045d8:	e7de      	b.n	1a004598 <_puts_r+0x24>
1a0045da:	4621      	mov	r1, r4
1a0045dc:	4628      	mov	r0, r5
1a0045de:	f000 f8c3 	bl	1a004768 <__swsetup_r>
1a0045e2:	2800      	cmp	r0, #0
1a0045e4:	d0dd      	beq.n	1a0045a2 <_puts_r+0x2e>
1a0045e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0045ea:	bd70      	pop	{r4, r5, r6, pc}
1a0045ec:	2b00      	cmp	r3, #0
1a0045ee:	da04      	bge.n	1a0045fa <_puts_r+0x86>
1a0045f0:	69a2      	ldr	r2, [r4, #24]
1a0045f2:	429a      	cmp	r2, r3
1a0045f4:	dc06      	bgt.n	1a004604 <_puts_r+0x90>
1a0045f6:	290a      	cmp	r1, #10
1a0045f8:	d004      	beq.n	1a004604 <_puts_r+0x90>
1a0045fa:	6823      	ldr	r3, [r4, #0]
1a0045fc:	1c5a      	adds	r2, r3, #1
1a0045fe:	6022      	str	r2, [r4, #0]
1a004600:	7019      	strb	r1, [r3, #0]
1a004602:	e7cf      	b.n	1a0045a4 <_puts_r+0x30>
1a004604:	4622      	mov	r2, r4
1a004606:	4628      	mov	r0, r5
1a004608:	f000 f85c 	bl	1a0046c4 <__swbuf_r>
1a00460c:	3001      	adds	r0, #1
1a00460e:	d1c9      	bne.n	1a0045a4 <_puts_r+0x30>
1a004610:	e7e9      	b.n	1a0045e6 <_puts_r+0x72>
1a004612:	6823      	ldr	r3, [r4, #0]
1a004614:	200a      	movs	r0, #10
1a004616:	1c5a      	adds	r2, r3, #1
1a004618:	6022      	str	r2, [r4, #0]
1a00461a:	7018      	strb	r0, [r3, #0]
1a00461c:	e7e5      	b.n	1a0045ea <_puts_r+0x76>
1a00461e:	bf00      	nop
1a004620:	1a0052ec 	.word	0x1a0052ec
1a004624:	1a00530c 	.word	0x1a00530c
1a004628:	1a0052cc 	.word	0x1a0052cc

1a00462c <puts>:
1a00462c:	4b02      	ldr	r3, [pc, #8]	; (1a004638 <puts+0xc>)
1a00462e:	4601      	mov	r1, r0
1a004630:	6818      	ldr	r0, [r3, #0]
1a004632:	f7ff bf9f 	b.w	1a004574 <_puts_r>
1a004636:	bf00      	nop
1a004638:	100000c8 	.word	0x100000c8

1a00463c <__sread>:
1a00463c:	b510      	push	{r4, lr}
1a00463e:	460c      	mov	r4, r1
1a004640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004644:	f7fc f95e 	bl	1a000904 <_read_r>
1a004648:	2800      	cmp	r0, #0
1a00464a:	bfab      	itete	ge
1a00464c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00464e:	89a3      	ldrhlt	r3, [r4, #12]
1a004650:	181b      	addge	r3, r3, r0
1a004652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004656:	bfac      	ite	ge
1a004658:	6563      	strge	r3, [r4, #84]	; 0x54
1a00465a:	81a3      	strhlt	r3, [r4, #12]
1a00465c:	bd10      	pop	{r4, pc}

1a00465e <__swrite>:
1a00465e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004662:	461f      	mov	r7, r3
1a004664:	898b      	ldrh	r3, [r1, #12]
1a004666:	05db      	lsls	r3, r3, #23
1a004668:	4605      	mov	r5, r0
1a00466a:	460c      	mov	r4, r1
1a00466c:	4616      	mov	r6, r2
1a00466e:	d505      	bpl.n	1a00467c <__swrite+0x1e>
1a004670:	2302      	movs	r3, #2
1a004672:	2200      	movs	r2, #0
1a004674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004678:	f7fc f93f 	bl	1a0008fa <_lseek_r>
1a00467c:	89a3      	ldrh	r3, [r4, #12]
1a00467e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004686:	81a3      	strh	r3, [r4, #12]
1a004688:	4632      	mov	r2, r6
1a00468a:	463b      	mov	r3, r7
1a00468c:	4628      	mov	r0, r5
1a00468e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004692:	f7fc b95e 	b.w	1a000952 <_write_r>

1a004696 <__sseek>:
1a004696:	b510      	push	{r4, lr}
1a004698:	460c      	mov	r4, r1
1a00469a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00469e:	f7fc f92c 	bl	1a0008fa <_lseek_r>
1a0046a2:	1c43      	adds	r3, r0, #1
1a0046a4:	89a3      	ldrh	r3, [r4, #12]
1a0046a6:	bf15      	itete	ne
1a0046a8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0046aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0046ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0046b2:	81a3      	strheq	r3, [r4, #12]
1a0046b4:	bf18      	it	ne
1a0046b6:	81a3      	strhne	r3, [r4, #12]
1a0046b8:	bd10      	pop	{r4, pc}

1a0046ba <__sclose>:
1a0046ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0046be:	f7fc b909 	b.w	1a0008d4 <_close_r>
1a0046c2:	Address 0x000000001a0046c2 is out of bounds.


1a0046c4 <__swbuf_r>:
1a0046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0046c6:	460e      	mov	r6, r1
1a0046c8:	4614      	mov	r4, r2
1a0046ca:	4605      	mov	r5, r0
1a0046cc:	b118      	cbz	r0, 1a0046d6 <__swbuf_r+0x12>
1a0046ce:	6983      	ldr	r3, [r0, #24]
1a0046d0:	b90b      	cbnz	r3, 1a0046d6 <__swbuf_r+0x12>
1a0046d2:	f7ff fdcd 	bl	1a004270 <__sinit>
1a0046d6:	4b21      	ldr	r3, [pc, #132]	; (1a00475c <__swbuf_r+0x98>)
1a0046d8:	429c      	cmp	r4, r3
1a0046da:	d12a      	bne.n	1a004732 <__swbuf_r+0x6e>
1a0046dc:	686c      	ldr	r4, [r5, #4]
1a0046de:	69a3      	ldr	r3, [r4, #24]
1a0046e0:	60a3      	str	r3, [r4, #8]
1a0046e2:	89a3      	ldrh	r3, [r4, #12]
1a0046e4:	071a      	lsls	r2, r3, #28
1a0046e6:	d52e      	bpl.n	1a004746 <__swbuf_r+0x82>
1a0046e8:	6923      	ldr	r3, [r4, #16]
1a0046ea:	b363      	cbz	r3, 1a004746 <__swbuf_r+0x82>
1a0046ec:	6923      	ldr	r3, [r4, #16]
1a0046ee:	6820      	ldr	r0, [r4, #0]
1a0046f0:	1ac0      	subs	r0, r0, r3
1a0046f2:	6963      	ldr	r3, [r4, #20]
1a0046f4:	b2f6      	uxtb	r6, r6
1a0046f6:	4283      	cmp	r3, r0
1a0046f8:	4637      	mov	r7, r6
1a0046fa:	dc04      	bgt.n	1a004706 <__swbuf_r+0x42>
1a0046fc:	4621      	mov	r1, r4
1a0046fe:	4628      	mov	r0, r5
1a004700:	f7ff fd4c 	bl	1a00419c <_fflush_r>
1a004704:	bb28      	cbnz	r0, 1a004752 <__swbuf_r+0x8e>
1a004706:	68a3      	ldr	r3, [r4, #8]
1a004708:	3b01      	subs	r3, #1
1a00470a:	60a3      	str	r3, [r4, #8]
1a00470c:	6823      	ldr	r3, [r4, #0]
1a00470e:	1c5a      	adds	r2, r3, #1
1a004710:	6022      	str	r2, [r4, #0]
1a004712:	701e      	strb	r6, [r3, #0]
1a004714:	6963      	ldr	r3, [r4, #20]
1a004716:	3001      	adds	r0, #1
1a004718:	4283      	cmp	r3, r0
1a00471a:	d004      	beq.n	1a004726 <__swbuf_r+0x62>
1a00471c:	89a3      	ldrh	r3, [r4, #12]
1a00471e:	07db      	lsls	r3, r3, #31
1a004720:	d519      	bpl.n	1a004756 <__swbuf_r+0x92>
1a004722:	2e0a      	cmp	r6, #10
1a004724:	d117      	bne.n	1a004756 <__swbuf_r+0x92>
1a004726:	4621      	mov	r1, r4
1a004728:	4628      	mov	r0, r5
1a00472a:	f7ff fd37 	bl	1a00419c <_fflush_r>
1a00472e:	b190      	cbz	r0, 1a004756 <__swbuf_r+0x92>
1a004730:	e00f      	b.n	1a004752 <__swbuf_r+0x8e>
1a004732:	4b0b      	ldr	r3, [pc, #44]	; (1a004760 <__swbuf_r+0x9c>)
1a004734:	429c      	cmp	r4, r3
1a004736:	d101      	bne.n	1a00473c <__swbuf_r+0x78>
1a004738:	68ac      	ldr	r4, [r5, #8]
1a00473a:	e7d0      	b.n	1a0046de <__swbuf_r+0x1a>
1a00473c:	4b09      	ldr	r3, [pc, #36]	; (1a004764 <__swbuf_r+0xa0>)
1a00473e:	429c      	cmp	r4, r3
1a004740:	bf08      	it	eq
1a004742:	68ec      	ldreq	r4, [r5, #12]
1a004744:	e7cb      	b.n	1a0046de <__swbuf_r+0x1a>
1a004746:	4621      	mov	r1, r4
1a004748:	4628      	mov	r0, r5
1a00474a:	f000 f80d 	bl	1a004768 <__swsetup_r>
1a00474e:	2800      	cmp	r0, #0
1a004750:	d0cc      	beq.n	1a0046ec <__swbuf_r+0x28>
1a004752:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004756:	4638      	mov	r0, r7
1a004758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00475a:	bf00      	nop
1a00475c:	1a0052ec 	.word	0x1a0052ec
1a004760:	1a00530c 	.word	0x1a00530c
1a004764:	1a0052cc 	.word	0x1a0052cc

1a004768 <__swsetup_r>:
1a004768:	4b32      	ldr	r3, [pc, #200]	; (1a004834 <__swsetup_r+0xcc>)
1a00476a:	b570      	push	{r4, r5, r6, lr}
1a00476c:	681d      	ldr	r5, [r3, #0]
1a00476e:	4606      	mov	r6, r0
1a004770:	460c      	mov	r4, r1
1a004772:	b125      	cbz	r5, 1a00477e <__swsetup_r+0x16>
1a004774:	69ab      	ldr	r3, [r5, #24]
1a004776:	b913      	cbnz	r3, 1a00477e <__swsetup_r+0x16>
1a004778:	4628      	mov	r0, r5
1a00477a:	f7ff fd79 	bl	1a004270 <__sinit>
1a00477e:	4b2e      	ldr	r3, [pc, #184]	; (1a004838 <__swsetup_r+0xd0>)
1a004780:	429c      	cmp	r4, r3
1a004782:	d10f      	bne.n	1a0047a4 <__swsetup_r+0x3c>
1a004784:	686c      	ldr	r4, [r5, #4]
1a004786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00478a:	b29a      	uxth	r2, r3
1a00478c:	0715      	lsls	r5, r2, #28
1a00478e:	d42c      	bmi.n	1a0047ea <__swsetup_r+0x82>
1a004790:	06d0      	lsls	r0, r2, #27
1a004792:	d411      	bmi.n	1a0047b8 <__swsetup_r+0x50>
1a004794:	2209      	movs	r2, #9
1a004796:	6032      	str	r2, [r6, #0]
1a004798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00479c:	81a3      	strh	r3, [r4, #12]
1a00479e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0047a2:	e03e      	b.n	1a004822 <__swsetup_r+0xba>
1a0047a4:	4b25      	ldr	r3, [pc, #148]	; (1a00483c <__swsetup_r+0xd4>)
1a0047a6:	429c      	cmp	r4, r3
1a0047a8:	d101      	bne.n	1a0047ae <__swsetup_r+0x46>
1a0047aa:	68ac      	ldr	r4, [r5, #8]
1a0047ac:	e7eb      	b.n	1a004786 <__swsetup_r+0x1e>
1a0047ae:	4b24      	ldr	r3, [pc, #144]	; (1a004840 <__swsetup_r+0xd8>)
1a0047b0:	429c      	cmp	r4, r3
1a0047b2:	bf08      	it	eq
1a0047b4:	68ec      	ldreq	r4, [r5, #12]
1a0047b6:	e7e6      	b.n	1a004786 <__swsetup_r+0x1e>
1a0047b8:	0751      	lsls	r1, r2, #29
1a0047ba:	d512      	bpl.n	1a0047e2 <__swsetup_r+0x7a>
1a0047bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0047be:	b141      	cbz	r1, 1a0047d2 <__swsetup_r+0x6a>
1a0047c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0047c4:	4299      	cmp	r1, r3
1a0047c6:	d002      	beq.n	1a0047ce <__swsetup_r+0x66>
1a0047c8:	4630      	mov	r0, r6
1a0047ca:	f7ff fe13 	bl	1a0043f4 <_free_r>
1a0047ce:	2300      	movs	r3, #0
1a0047d0:	6363      	str	r3, [r4, #52]	; 0x34
1a0047d2:	89a3      	ldrh	r3, [r4, #12]
1a0047d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0047d8:	81a3      	strh	r3, [r4, #12]
1a0047da:	2300      	movs	r3, #0
1a0047dc:	6063      	str	r3, [r4, #4]
1a0047de:	6923      	ldr	r3, [r4, #16]
1a0047e0:	6023      	str	r3, [r4, #0]
1a0047e2:	89a3      	ldrh	r3, [r4, #12]
1a0047e4:	f043 0308 	orr.w	r3, r3, #8
1a0047e8:	81a3      	strh	r3, [r4, #12]
1a0047ea:	6923      	ldr	r3, [r4, #16]
1a0047ec:	b94b      	cbnz	r3, 1a004802 <__swsetup_r+0x9a>
1a0047ee:	89a3      	ldrh	r3, [r4, #12]
1a0047f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0047f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0047f8:	d003      	beq.n	1a004802 <__swsetup_r+0x9a>
1a0047fa:	4621      	mov	r1, r4
1a0047fc:	4630      	mov	r0, r6
1a0047fe:	f000 f845 	bl	1a00488c <__smakebuf_r>
1a004802:	89a2      	ldrh	r2, [r4, #12]
1a004804:	f012 0301 	ands.w	r3, r2, #1
1a004808:	d00c      	beq.n	1a004824 <__swsetup_r+0xbc>
1a00480a:	2300      	movs	r3, #0
1a00480c:	60a3      	str	r3, [r4, #8]
1a00480e:	6963      	ldr	r3, [r4, #20]
1a004810:	425b      	negs	r3, r3
1a004812:	61a3      	str	r3, [r4, #24]
1a004814:	6923      	ldr	r3, [r4, #16]
1a004816:	b953      	cbnz	r3, 1a00482e <__swsetup_r+0xc6>
1a004818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00481c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a004820:	d1ba      	bne.n	1a004798 <__swsetup_r+0x30>
1a004822:	bd70      	pop	{r4, r5, r6, pc}
1a004824:	0792      	lsls	r2, r2, #30
1a004826:	bf58      	it	pl
1a004828:	6963      	ldrpl	r3, [r4, #20]
1a00482a:	60a3      	str	r3, [r4, #8]
1a00482c:	e7f2      	b.n	1a004814 <__swsetup_r+0xac>
1a00482e:	2000      	movs	r0, #0
1a004830:	e7f7      	b.n	1a004822 <__swsetup_r+0xba>
1a004832:	bf00      	nop
1a004834:	100000c8 	.word	0x100000c8
1a004838:	1a0052ec 	.word	0x1a0052ec
1a00483c:	1a00530c 	.word	0x1a00530c
1a004840:	1a0052cc 	.word	0x1a0052cc

1a004844 <__swhatbuf_r>:
1a004844:	b570      	push	{r4, r5, r6, lr}
1a004846:	460e      	mov	r6, r1
1a004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00484c:	2900      	cmp	r1, #0
1a00484e:	b096      	sub	sp, #88	; 0x58
1a004850:	4614      	mov	r4, r2
1a004852:	461d      	mov	r5, r3
1a004854:	da07      	bge.n	1a004866 <__swhatbuf_r+0x22>
1a004856:	2300      	movs	r3, #0
1a004858:	602b      	str	r3, [r5, #0]
1a00485a:	89b3      	ldrh	r3, [r6, #12]
1a00485c:	061a      	lsls	r2, r3, #24
1a00485e:	d410      	bmi.n	1a004882 <__swhatbuf_r+0x3e>
1a004860:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004864:	e00e      	b.n	1a004884 <__swhatbuf_r+0x40>
1a004866:	466a      	mov	r2, sp
1a004868:	f7fc f839 	bl	1a0008de <_fstat_r>
1a00486c:	2800      	cmp	r0, #0
1a00486e:	dbf2      	blt.n	1a004856 <__swhatbuf_r+0x12>
1a004870:	9a01      	ldr	r2, [sp, #4]
1a004872:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004876:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00487a:	425a      	negs	r2, r3
1a00487c:	415a      	adcs	r2, r3
1a00487e:	602a      	str	r2, [r5, #0]
1a004880:	e7ee      	b.n	1a004860 <__swhatbuf_r+0x1c>
1a004882:	2340      	movs	r3, #64	; 0x40
1a004884:	2000      	movs	r0, #0
1a004886:	6023      	str	r3, [r4, #0]
1a004888:	b016      	add	sp, #88	; 0x58
1a00488a:	bd70      	pop	{r4, r5, r6, pc}

1a00488c <__smakebuf_r>:
1a00488c:	898b      	ldrh	r3, [r1, #12]
1a00488e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a004890:	079d      	lsls	r5, r3, #30
1a004892:	4606      	mov	r6, r0
1a004894:	460c      	mov	r4, r1
1a004896:	d507      	bpl.n	1a0048a8 <__smakebuf_r+0x1c>
1a004898:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00489c:	6023      	str	r3, [r4, #0]
1a00489e:	6123      	str	r3, [r4, #16]
1a0048a0:	2301      	movs	r3, #1
1a0048a2:	6163      	str	r3, [r4, #20]
1a0048a4:	b002      	add	sp, #8
1a0048a6:	bd70      	pop	{r4, r5, r6, pc}
1a0048a8:	ab01      	add	r3, sp, #4
1a0048aa:	466a      	mov	r2, sp
1a0048ac:	f7ff ffca 	bl	1a004844 <__swhatbuf_r>
1a0048b0:	9900      	ldr	r1, [sp, #0]
1a0048b2:	4605      	mov	r5, r0
1a0048b4:	4630      	mov	r0, r6
1a0048b6:	f7ff fdeb 	bl	1a004490 <_malloc_r>
1a0048ba:	b948      	cbnz	r0, 1a0048d0 <__smakebuf_r+0x44>
1a0048bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0048c0:	059a      	lsls	r2, r3, #22
1a0048c2:	d4ef      	bmi.n	1a0048a4 <__smakebuf_r+0x18>
1a0048c4:	f023 0303 	bic.w	r3, r3, #3
1a0048c8:	f043 0302 	orr.w	r3, r3, #2
1a0048cc:	81a3      	strh	r3, [r4, #12]
1a0048ce:	e7e3      	b.n	1a004898 <__smakebuf_r+0xc>
1a0048d0:	4b0d      	ldr	r3, [pc, #52]	; (1a004908 <__smakebuf_r+0x7c>)
1a0048d2:	62b3      	str	r3, [r6, #40]	; 0x28
1a0048d4:	89a3      	ldrh	r3, [r4, #12]
1a0048d6:	6020      	str	r0, [r4, #0]
1a0048d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0048dc:	81a3      	strh	r3, [r4, #12]
1a0048de:	9b00      	ldr	r3, [sp, #0]
1a0048e0:	6163      	str	r3, [r4, #20]
1a0048e2:	9b01      	ldr	r3, [sp, #4]
1a0048e4:	6120      	str	r0, [r4, #16]
1a0048e6:	b15b      	cbz	r3, 1a004900 <__smakebuf_r+0x74>
1a0048e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0048ec:	4630      	mov	r0, r6
1a0048ee:	f7fb fffb 	bl	1a0008e8 <_isatty_r>
1a0048f2:	b128      	cbz	r0, 1a004900 <__smakebuf_r+0x74>
1a0048f4:	89a3      	ldrh	r3, [r4, #12]
1a0048f6:	f023 0303 	bic.w	r3, r3, #3
1a0048fa:	f043 0301 	orr.w	r3, r3, #1
1a0048fe:	81a3      	strh	r3, [r4, #12]
1a004900:	89a3      	ldrh	r3, [r4, #12]
1a004902:	431d      	orrs	r5, r3
1a004904:	81a5      	strh	r5, [r4, #12]
1a004906:	e7cd      	b.n	1a0048a4 <__smakebuf_r+0x18>
1a004908:	1a004239 	.word	0x1a004239

1a00490c <__malloc_lock>:
1a00490c:	4770      	bx	lr

1a00490e <__malloc_unlock>:
1a00490e:	4770      	bx	lr

1a004910 <__sfputc_r>:
1a004910:	6893      	ldr	r3, [r2, #8]
1a004912:	3b01      	subs	r3, #1
1a004914:	2b00      	cmp	r3, #0
1a004916:	b410      	push	{r4}
1a004918:	6093      	str	r3, [r2, #8]
1a00491a:	da08      	bge.n	1a00492e <__sfputc_r+0x1e>
1a00491c:	6994      	ldr	r4, [r2, #24]
1a00491e:	42a3      	cmp	r3, r4
1a004920:	db01      	blt.n	1a004926 <__sfputc_r+0x16>
1a004922:	290a      	cmp	r1, #10
1a004924:	d103      	bne.n	1a00492e <__sfputc_r+0x1e>
1a004926:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00492a:	f7ff becb 	b.w	1a0046c4 <__swbuf_r>
1a00492e:	6813      	ldr	r3, [r2, #0]
1a004930:	1c58      	adds	r0, r3, #1
1a004932:	6010      	str	r0, [r2, #0]
1a004934:	7019      	strb	r1, [r3, #0]
1a004936:	4608      	mov	r0, r1
1a004938:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00493c:	4770      	bx	lr

1a00493e <__sfputs_r>:
1a00493e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004940:	4606      	mov	r6, r0
1a004942:	460f      	mov	r7, r1
1a004944:	4614      	mov	r4, r2
1a004946:	18d5      	adds	r5, r2, r3
1a004948:	42ac      	cmp	r4, r5
1a00494a:	d101      	bne.n	1a004950 <__sfputs_r+0x12>
1a00494c:	2000      	movs	r0, #0
1a00494e:	e007      	b.n	1a004960 <__sfputs_r+0x22>
1a004950:	463a      	mov	r2, r7
1a004952:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004956:	4630      	mov	r0, r6
1a004958:	f7ff ffda 	bl	1a004910 <__sfputc_r>
1a00495c:	1c43      	adds	r3, r0, #1
1a00495e:	d1f3      	bne.n	1a004948 <__sfputs_r+0xa>
1a004960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004962:	Address 0x000000001a004962 is out of bounds.


1a004964 <_vfiprintf_r>:
1a004964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004968:	460c      	mov	r4, r1
1a00496a:	b09d      	sub	sp, #116	; 0x74
1a00496c:	4617      	mov	r7, r2
1a00496e:	461d      	mov	r5, r3
1a004970:	4606      	mov	r6, r0
1a004972:	b118      	cbz	r0, 1a00497c <_vfiprintf_r+0x18>
1a004974:	6983      	ldr	r3, [r0, #24]
1a004976:	b90b      	cbnz	r3, 1a00497c <_vfiprintf_r+0x18>
1a004978:	f7ff fc7a 	bl	1a004270 <__sinit>
1a00497c:	4b7c      	ldr	r3, [pc, #496]	; (1a004b70 <_vfiprintf_r+0x20c>)
1a00497e:	429c      	cmp	r4, r3
1a004980:	d158      	bne.n	1a004a34 <_vfiprintf_r+0xd0>
1a004982:	6874      	ldr	r4, [r6, #4]
1a004984:	89a3      	ldrh	r3, [r4, #12]
1a004986:	0718      	lsls	r0, r3, #28
1a004988:	d55e      	bpl.n	1a004a48 <_vfiprintf_r+0xe4>
1a00498a:	6923      	ldr	r3, [r4, #16]
1a00498c:	2b00      	cmp	r3, #0
1a00498e:	d05b      	beq.n	1a004a48 <_vfiprintf_r+0xe4>
1a004990:	2300      	movs	r3, #0
1a004992:	9309      	str	r3, [sp, #36]	; 0x24
1a004994:	2320      	movs	r3, #32
1a004996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00499a:	2330      	movs	r3, #48	; 0x30
1a00499c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0049a0:	9503      	str	r5, [sp, #12]
1a0049a2:	f04f 0b01 	mov.w	fp, #1
1a0049a6:	46b8      	mov	r8, r7
1a0049a8:	4645      	mov	r5, r8
1a0049aa:	f815 3b01 	ldrb.w	r3, [r5], #1
1a0049ae:	b10b      	cbz	r3, 1a0049b4 <_vfiprintf_r+0x50>
1a0049b0:	2b25      	cmp	r3, #37	; 0x25
1a0049b2:	d154      	bne.n	1a004a5e <_vfiprintf_r+0xfa>
1a0049b4:	ebb8 0a07 	subs.w	sl, r8, r7
1a0049b8:	d00b      	beq.n	1a0049d2 <_vfiprintf_r+0x6e>
1a0049ba:	4653      	mov	r3, sl
1a0049bc:	463a      	mov	r2, r7
1a0049be:	4621      	mov	r1, r4
1a0049c0:	4630      	mov	r0, r6
1a0049c2:	f7ff ffbc 	bl	1a00493e <__sfputs_r>
1a0049c6:	3001      	adds	r0, #1
1a0049c8:	f000 80c2 	beq.w	1a004b50 <_vfiprintf_r+0x1ec>
1a0049cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0049ce:	4453      	add	r3, sl
1a0049d0:	9309      	str	r3, [sp, #36]	; 0x24
1a0049d2:	f898 3000 	ldrb.w	r3, [r8]
1a0049d6:	2b00      	cmp	r3, #0
1a0049d8:	f000 80ba 	beq.w	1a004b50 <_vfiprintf_r+0x1ec>
1a0049dc:	2300      	movs	r3, #0
1a0049de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0049e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0049e6:	9304      	str	r3, [sp, #16]
1a0049e8:	9307      	str	r3, [sp, #28]
1a0049ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0049ee:	931a      	str	r3, [sp, #104]	; 0x68
1a0049f0:	46a8      	mov	r8, r5
1a0049f2:	2205      	movs	r2, #5
1a0049f4:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0049f8:	485e      	ldr	r0, [pc, #376]	; (1a004b74 <_vfiprintf_r+0x210>)
1a0049fa:	f000 fa51 	bl	1a004ea0 <memchr>
1a0049fe:	9b04      	ldr	r3, [sp, #16]
1a004a00:	bb78      	cbnz	r0, 1a004a62 <_vfiprintf_r+0xfe>
1a004a02:	06d9      	lsls	r1, r3, #27
1a004a04:	bf44      	itt	mi
1a004a06:	2220      	movmi	r2, #32
1a004a08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004a0c:	071a      	lsls	r2, r3, #28
1a004a0e:	bf44      	itt	mi
1a004a10:	222b      	movmi	r2, #43	; 0x2b
1a004a12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004a16:	782a      	ldrb	r2, [r5, #0]
1a004a18:	2a2a      	cmp	r2, #42	; 0x2a
1a004a1a:	d02a      	beq.n	1a004a72 <_vfiprintf_r+0x10e>
1a004a1c:	9a07      	ldr	r2, [sp, #28]
1a004a1e:	46a8      	mov	r8, r5
1a004a20:	2000      	movs	r0, #0
1a004a22:	250a      	movs	r5, #10
1a004a24:	4641      	mov	r1, r8
1a004a26:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004a2a:	3b30      	subs	r3, #48	; 0x30
1a004a2c:	2b09      	cmp	r3, #9
1a004a2e:	d969      	bls.n	1a004b04 <_vfiprintf_r+0x1a0>
1a004a30:	b360      	cbz	r0, 1a004a8c <_vfiprintf_r+0x128>
1a004a32:	e024      	b.n	1a004a7e <_vfiprintf_r+0x11a>
1a004a34:	4b50      	ldr	r3, [pc, #320]	; (1a004b78 <_vfiprintf_r+0x214>)
1a004a36:	429c      	cmp	r4, r3
1a004a38:	d101      	bne.n	1a004a3e <_vfiprintf_r+0xda>
1a004a3a:	68b4      	ldr	r4, [r6, #8]
1a004a3c:	e7a2      	b.n	1a004984 <_vfiprintf_r+0x20>
1a004a3e:	4b4f      	ldr	r3, [pc, #316]	; (1a004b7c <_vfiprintf_r+0x218>)
1a004a40:	429c      	cmp	r4, r3
1a004a42:	bf08      	it	eq
1a004a44:	68f4      	ldreq	r4, [r6, #12]
1a004a46:	e79d      	b.n	1a004984 <_vfiprintf_r+0x20>
1a004a48:	4621      	mov	r1, r4
1a004a4a:	4630      	mov	r0, r6
1a004a4c:	f7ff fe8c 	bl	1a004768 <__swsetup_r>
1a004a50:	2800      	cmp	r0, #0
1a004a52:	d09d      	beq.n	1a004990 <_vfiprintf_r+0x2c>
1a004a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a58:	b01d      	add	sp, #116	; 0x74
1a004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a5e:	46a8      	mov	r8, r5
1a004a60:	e7a2      	b.n	1a0049a8 <_vfiprintf_r+0x44>
1a004a62:	4a44      	ldr	r2, [pc, #272]	; (1a004b74 <_vfiprintf_r+0x210>)
1a004a64:	1a80      	subs	r0, r0, r2
1a004a66:	fa0b f000 	lsl.w	r0, fp, r0
1a004a6a:	4318      	orrs	r0, r3
1a004a6c:	9004      	str	r0, [sp, #16]
1a004a6e:	4645      	mov	r5, r8
1a004a70:	e7be      	b.n	1a0049f0 <_vfiprintf_r+0x8c>
1a004a72:	9a03      	ldr	r2, [sp, #12]
1a004a74:	1d11      	adds	r1, r2, #4
1a004a76:	6812      	ldr	r2, [r2, #0]
1a004a78:	9103      	str	r1, [sp, #12]
1a004a7a:	2a00      	cmp	r2, #0
1a004a7c:	db01      	blt.n	1a004a82 <_vfiprintf_r+0x11e>
1a004a7e:	9207      	str	r2, [sp, #28]
1a004a80:	e004      	b.n	1a004a8c <_vfiprintf_r+0x128>
1a004a82:	4252      	negs	r2, r2
1a004a84:	f043 0302 	orr.w	r3, r3, #2
1a004a88:	9207      	str	r2, [sp, #28]
1a004a8a:	9304      	str	r3, [sp, #16]
1a004a8c:	f898 3000 	ldrb.w	r3, [r8]
1a004a90:	2b2e      	cmp	r3, #46	; 0x2e
1a004a92:	d10e      	bne.n	1a004ab2 <_vfiprintf_r+0x14e>
1a004a94:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004a98:	2b2a      	cmp	r3, #42	; 0x2a
1a004a9a:	d138      	bne.n	1a004b0e <_vfiprintf_r+0x1aa>
1a004a9c:	9b03      	ldr	r3, [sp, #12]
1a004a9e:	1d1a      	adds	r2, r3, #4
1a004aa0:	681b      	ldr	r3, [r3, #0]
1a004aa2:	9203      	str	r2, [sp, #12]
1a004aa4:	2b00      	cmp	r3, #0
1a004aa6:	bfb8      	it	lt
1a004aa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004aac:	f108 0802 	add.w	r8, r8, #2
1a004ab0:	9305      	str	r3, [sp, #20]
1a004ab2:	4d33      	ldr	r5, [pc, #204]	; (1a004b80 <_vfiprintf_r+0x21c>)
1a004ab4:	f898 1000 	ldrb.w	r1, [r8]
1a004ab8:	2203      	movs	r2, #3
1a004aba:	4628      	mov	r0, r5
1a004abc:	f000 f9f0 	bl	1a004ea0 <memchr>
1a004ac0:	b140      	cbz	r0, 1a004ad4 <_vfiprintf_r+0x170>
1a004ac2:	2340      	movs	r3, #64	; 0x40
1a004ac4:	1b40      	subs	r0, r0, r5
1a004ac6:	fa03 f000 	lsl.w	r0, r3, r0
1a004aca:	9b04      	ldr	r3, [sp, #16]
1a004acc:	4303      	orrs	r3, r0
1a004ace:	f108 0801 	add.w	r8, r8, #1
1a004ad2:	9304      	str	r3, [sp, #16]
1a004ad4:	f898 1000 	ldrb.w	r1, [r8]
1a004ad8:	482a      	ldr	r0, [pc, #168]	; (1a004b84 <_vfiprintf_r+0x220>)
1a004ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a004ade:	2206      	movs	r2, #6
1a004ae0:	f108 0701 	add.w	r7, r8, #1
1a004ae4:	f000 f9dc 	bl	1a004ea0 <memchr>
1a004ae8:	2800      	cmp	r0, #0
1a004aea:	d037      	beq.n	1a004b5c <_vfiprintf_r+0x1f8>
1a004aec:	4b26      	ldr	r3, [pc, #152]	; (1a004b88 <_vfiprintf_r+0x224>)
1a004aee:	bb1b      	cbnz	r3, 1a004b38 <_vfiprintf_r+0x1d4>
1a004af0:	9b03      	ldr	r3, [sp, #12]
1a004af2:	3307      	adds	r3, #7
1a004af4:	f023 0307 	bic.w	r3, r3, #7
1a004af8:	3308      	adds	r3, #8
1a004afa:	9303      	str	r3, [sp, #12]
1a004afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004afe:	444b      	add	r3, r9
1a004b00:	9309      	str	r3, [sp, #36]	; 0x24
1a004b02:	e750      	b.n	1a0049a6 <_vfiprintf_r+0x42>
1a004b04:	fb05 3202 	mla	r2, r5, r2, r3
1a004b08:	2001      	movs	r0, #1
1a004b0a:	4688      	mov	r8, r1
1a004b0c:	e78a      	b.n	1a004a24 <_vfiprintf_r+0xc0>
1a004b0e:	2300      	movs	r3, #0
1a004b10:	f108 0801 	add.w	r8, r8, #1
1a004b14:	9305      	str	r3, [sp, #20]
1a004b16:	4619      	mov	r1, r3
1a004b18:	250a      	movs	r5, #10
1a004b1a:	4640      	mov	r0, r8
1a004b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
1a004b20:	3a30      	subs	r2, #48	; 0x30
1a004b22:	2a09      	cmp	r2, #9
1a004b24:	d903      	bls.n	1a004b2e <_vfiprintf_r+0x1ca>
1a004b26:	2b00      	cmp	r3, #0
1a004b28:	d0c3      	beq.n	1a004ab2 <_vfiprintf_r+0x14e>
1a004b2a:	9105      	str	r1, [sp, #20]
1a004b2c:	e7c1      	b.n	1a004ab2 <_vfiprintf_r+0x14e>
1a004b2e:	fb05 2101 	mla	r1, r5, r1, r2
1a004b32:	2301      	movs	r3, #1
1a004b34:	4680      	mov	r8, r0
1a004b36:	e7f0      	b.n	1a004b1a <_vfiprintf_r+0x1b6>
1a004b38:	ab03      	add	r3, sp, #12
1a004b3a:	9300      	str	r3, [sp, #0]
1a004b3c:	4622      	mov	r2, r4
1a004b3e:	4b13      	ldr	r3, [pc, #76]	; (1a004b8c <_vfiprintf_r+0x228>)
1a004b40:	a904      	add	r1, sp, #16
1a004b42:	4630      	mov	r0, r6
1a004b44:	f3af 8000 	nop.w
1a004b48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004b4c:	4681      	mov	r9, r0
1a004b4e:	d1d5      	bne.n	1a004afc <_vfiprintf_r+0x198>
1a004b50:	89a3      	ldrh	r3, [r4, #12]
1a004b52:	065b      	lsls	r3, r3, #25
1a004b54:	f53f af7e 	bmi.w	1a004a54 <_vfiprintf_r+0xf0>
1a004b58:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004b5a:	e77d      	b.n	1a004a58 <_vfiprintf_r+0xf4>
1a004b5c:	ab03      	add	r3, sp, #12
1a004b5e:	9300      	str	r3, [sp, #0]
1a004b60:	4622      	mov	r2, r4
1a004b62:	4b0a      	ldr	r3, [pc, #40]	; (1a004b8c <_vfiprintf_r+0x228>)
1a004b64:	a904      	add	r1, sp, #16
1a004b66:	4630      	mov	r0, r6
1a004b68:	f000 f888 	bl	1a004c7c <_printf_i>
1a004b6c:	e7ec      	b.n	1a004b48 <_vfiprintf_r+0x1e4>
1a004b6e:	bf00      	nop
1a004b70:	1a0052ec 	.word	0x1a0052ec
1a004b74:	1a005330 	.word	0x1a005330
1a004b78:	1a00530c 	.word	0x1a00530c
1a004b7c:	1a0052cc 	.word	0x1a0052cc
1a004b80:	1a005336 	.word	0x1a005336
1a004b84:	1a00533a 	.word	0x1a00533a
1a004b88:	00000000 	.word	0x00000000
1a004b8c:	1a00493f 	.word	0x1a00493f

1a004b90 <_printf_common>:
1a004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004b94:	4691      	mov	r9, r2
1a004b96:	461f      	mov	r7, r3
1a004b98:	688a      	ldr	r2, [r1, #8]
1a004b9a:	690b      	ldr	r3, [r1, #16]
1a004b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a004ba0:	4293      	cmp	r3, r2
1a004ba2:	bfb8      	it	lt
1a004ba4:	4613      	movlt	r3, r2
1a004ba6:	f8c9 3000 	str.w	r3, [r9]
1a004baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a004bae:	4606      	mov	r6, r0
1a004bb0:	460c      	mov	r4, r1
1a004bb2:	b112      	cbz	r2, 1a004bba <_printf_common+0x2a>
1a004bb4:	3301      	adds	r3, #1
1a004bb6:	f8c9 3000 	str.w	r3, [r9]
1a004bba:	6823      	ldr	r3, [r4, #0]
1a004bbc:	0699      	lsls	r1, r3, #26
1a004bbe:	bf42      	ittt	mi
1a004bc0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004bc4:	3302      	addmi	r3, #2
1a004bc6:	f8c9 3000 	strmi.w	r3, [r9]
1a004bca:	6825      	ldr	r5, [r4, #0]
1a004bcc:	f015 0506 	ands.w	r5, r5, #6
1a004bd0:	d107      	bne.n	1a004be2 <_printf_common+0x52>
1a004bd2:	f104 0a19 	add.w	sl, r4, #25
1a004bd6:	68e3      	ldr	r3, [r4, #12]
1a004bd8:	f8d9 2000 	ldr.w	r2, [r9]
1a004bdc:	1a9b      	subs	r3, r3, r2
1a004bde:	42ab      	cmp	r3, r5
1a004be0:	dc28      	bgt.n	1a004c34 <_printf_common+0xa4>
1a004be2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004be6:	6822      	ldr	r2, [r4, #0]
1a004be8:	3300      	adds	r3, #0
1a004bea:	bf18      	it	ne
1a004bec:	2301      	movne	r3, #1
1a004bee:	0692      	lsls	r2, r2, #26
1a004bf0:	d42d      	bmi.n	1a004c4e <_printf_common+0xbe>
1a004bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004bf6:	4639      	mov	r1, r7
1a004bf8:	4630      	mov	r0, r6
1a004bfa:	47c0      	blx	r8
1a004bfc:	3001      	adds	r0, #1
1a004bfe:	d020      	beq.n	1a004c42 <_printf_common+0xb2>
1a004c00:	6823      	ldr	r3, [r4, #0]
1a004c02:	68e5      	ldr	r5, [r4, #12]
1a004c04:	f8d9 2000 	ldr.w	r2, [r9]
1a004c08:	f003 0306 	and.w	r3, r3, #6
1a004c0c:	2b04      	cmp	r3, #4
1a004c0e:	bf08      	it	eq
1a004c10:	1aad      	subeq	r5, r5, r2
1a004c12:	68a3      	ldr	r3, [r4, #8]
1a004c14:	6922      	ldr	r2, [r4, #16]
1a004c16:	bf0c      	ite	eq
1a004c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004c1c:	2500      	movne	r5, #0
1a004c1e:	4293      	cmp	r3, r2
1a004c20:	bfc4      	itt	gt
1a004c22:	1a9b      	subgt	r3, r3, r2
1a004c24:	18ed      	addgt	r5, r5, r3
1a004c26:	f04f 0900 	mov.w	r9, #0
1a004c2a:	341a      	adds	r4, #26
1a004c2c:	454d      	cmp	r5, r9
1a004c2e:	d11a      	bne.n	1a004c66 <_printf_common+0xd6>
1a004c30:	2000      	movs	r0, #0
1a004c32:	e008      	b.n	1a004c46 <_printf_common+0xb6>
1a004c34:	2301      	movs	r3, #1
1a004c36:	4652      	mov	r2, sl
1a004c38:	4639      	mov	r1, r7
1a004c3a:	4630      	mov	r0, r6
1a004c3c:	47c0      	blx	r8
1a004c3e:	3001      	adds	r0, #1
1a004c40:	d103      	bne.n	1a004c4a <_printf_common+0xba>
1a004c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004c4a:	3501      	adds	r5, #1
1a004c4c:	e7c3      	b.n	1a004bd6 <_printf_common+0x46>
1a004c4e:	18e1      	adds	r1, r4, r3
1a004c50:	1c5a      	adds	r2, r3, #1
1a004c52:	2030      	movs	r0, #48	; 0x30
1a004c54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004c58:	4422      	add	r2, r4
1a004c5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a004c5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a004c62:	3302      	adds	r3, #2
1a004c64:	e7c5      	b.n	1a004bf2 <_printf_common+0x62>
1a004c66:	2301      	movs	r3, #1
1a004c68:	4622      	mov	r2, r4
1a004c6a:	4639      	mov	r1, r7
1a004c6c:	4630      	mov	r0, r6
1a004c6e:	47c0      	blx	r8
1a004c70:	3001      	adds	r0, #1
1a004c72:	d0e6      	beq.n	1a004c42 <_printf_common+0xb2>
1a004c74:	f109 0901 	add.w	r9, r9, #1
1a004c78:	e7d8      	b.n	1a004c2c <_printf_common+0x9c>
1a004c7a:	Address 0x000000001a004c7a is out of bounds.


1a004c7c <_printf_i>:
1a004c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a004c80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a004c84:	460c      	mov	r4, r1
1a004c86:	7e09      	ldrb	r1, [r1, #24]
1a004c88:	b085      	sub	sp, #20
1a004c8a:	296e      	cmp	r1, #110	; 0x6e
1a004c8c:	4617      	mov	r7, r2
1a004c8e:	4606      	mov	r6, r0
1a004c90:	4698      	mov	r8, r3
1a004c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004c94:	f000 80b3 	beq.w	1a004dfe <_printf_i+0x182>
1a004c98:	d822      	bhi.n	1a004ce0 <_printf_i+0x64>
1a004c9a:	2963      	cmp	r1, #99	; 0x63
1a004c9c:	d036      	beq.n	1a004d0c <_printf_i+0x90>
1a004c9e:	d80a      	bhi.n	1a004cb6 <_printf_i+0x3a>
1a004ca0:	2900      	cmp	r1, #0
1a004ca2:	f000 80b9 	beq.w	1a004e18 <_printf_i+0x19c>
1a004ca6:	2958      	cmp	r1, #88	; 0x58
1a004ca8:	f000 8083 	beq.w	1a004db2 <_printf_i+0x136>
1a004cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004cb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004cb4:	e032      	b.n	1a004d1c <_printf_i+0xa0>
1a004cb6:	2964      	cmp	r1, #100	; 0x64
1a004cb8:	d001      	beq.n	1a004cbe <_printf_i+0x42>
1a004cba:	2969      	cmp	r1, #105	; 0x69
1a004cbc:	d1f6      	bne.n	1a004cac <_printf_i+0x30>
1a004cbe:	6820      	ldr	r0, [r4, #0]
1a004cc0:	6813      	ldr	r3, [r2, #0]
1a004cc2:	0605      	lsls	r5, r0, #24
1a004cc4:	f103 0104 	add.w	r1, r3, #4
1a004cc8:	d52a      	bpl.n	1a004d20 <_printf_i+0xa4>
1a004cca:	681b      	ldr	r3, [r3, #0]
1a004ccc:	6011      	str	r1, [r2, #0]
1a004cce:	2b00      	cmp	r3, #0
1a004cd0:	da03      	bge.n	1a004cda <_printf_i+0x5e>
1a004cd2:	222d      	movs	r2, #45	; 0x2d
1a004cd4:	425b      	negs	r3, r3
1a004cd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004cda:	486f      	ldr	r0, [pc, #444]	; (1a004e98 <_printf_i+0x21c>)
1a004cdc:	220a      	movs	r2, #10
1a004cde:	e039      	b.n	1a004d54 <_printf_i+0xd8>
1a004ce0:	2973      	cmp	r1, #115	; 0x73
1a004ce2:	f000 809d 	beq.w	1a004e20 <_printf_i+0x1a4>
1a004ce6:	d808      	bhi.n	1a004cfa <_printf_i+0x7e>
1a004ce8:	296f      	cmp	r1, #111	; 0x6f
1a004cea:	d020      	beq.n	1a004d2e <_printf_i+0xb2>
1a004cec:	2970      	cmp	r1, #112	; 0x70
1a004cee:	d1dd      	bne.n	1a004cac <_printf_i+0x30>
1a004cf0:	6823      	ldr	r3, [r4, #0]
1a004cf2:	f043 0320 	orr.w	r3, r3, #32
1a004cf6:	6023      	str	r3, [r4, #0]
1a004cf8:	e003      	b.n	1a004d02 <_printf_i+0x86>
1a004cfa:	2975      	cmp	r1, #117	; 0x75
1a004cfc:	d017      	beq.n	1a004d2e <_printf_i+0xb2>
1a004cfe:	2978      	cmp	r1, #120	; 0x78
1a004d00:	d1d4      	bne.n	1a004cac <_printf_i+0x30>
1a004d02:	2378      	movs	r3, #120	; 0x78
1a004d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004d08:	4864      	ldr	r0, [pc, #400]	; (1a004e9c <_printf_i+0x220>)
1a004d0a:	e055      	b.n	1a004db8 <_printf_i+0x13c>
1a004d0c:	6813      	ldr	r3, [r2, #0]
1a004d0e:	1d19      	adds	r1, r3, #4
1a004d10:	681b      	ldr	r3, [r3, #0]
1a004d12:	6011      	str	r1, [r2, #0]
1a004d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004d1c:	2301      	movs	r3, #1
1a004d1e:	e08c      	b.n	1a004e3a <_printf_i+0x1be>
1a004d20:	681b      	ldr	r3, [r3, #0]
1a004d22:	6011      	str	r1, [r2, #0]
1a004d24:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004d28:	bf18      	it	ne
1a004d2a:	b21b      	sxthne	r3, r3
1a004d2c:	e7cf      	b.n	1a004cce <_printf_i+0x52>
1a004d2e:	6813      	ldr	r3, [r2, #0]
1a004d30:	6825      	ldr	r5, [r4, #0]
1a004d32:	1d18      	adds	r0, r3, #4
1a004d34:	6010      	str	r0, [r2, #0]
1a004d36:	0628      	lsls	r0, r5, #24
1a004d38:	d501      	bpl.n	1a004d3e <_printf_i+0xc2>
1a004d3a:	681b      	ldr	r3, [r3, #0]
1a004d3c:	e002      	b.n	1a004d44 <_printf_i+0xc8>
1a004d3e:	0668      	lsls	r0, r5, #25
1a004d40:	d5fb      	bpl.n	1a004d3a <_printf_i+0xbe>
1a004d42:	881b      	ldrh	r3, [r3, #0]
1a004d44:	4854      	ldr	r0, [pc, #336]	; (1a004e98 <_printf_i+0x21c>)
1a004d46:	296f      	cmp	r1, #111	; 0x6f
1a004d48:	bf14      	ite	ne
1a004d4a:	220a      	movne	r2, #10
1a004d4c:	2208      	moveq	r2, #8
1a004d4e:	2100      	movs	r1, #0
1a004d50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004d54:	6865      	ldr	r5, [r4, #4]
1a004d56:	60a5      	str	r5, [r4, #8]
1a004d58:	2d00      	cmp	r5, #0
1a004d5a:	f2c0 8095 	blt.w	1a004e88 <_printf_i+0x20c>
1a004d5e:	6821      	ldr	r1, [r4, #0]
1a004d60:	f021 0104 	bic.w	r1, r1, #4
1a004d64:	6021      	str	r1, [r4, #0]
1a004d66:	2b00      	cmp	r3, #0
1a004d68:	d13d      	bne.n	1a004de6 <_printf_i+0x16a>
1a004d6a:	2d00      	cmp	r5, #0
1a004d6c:	f040 808e 	bne.w	1a004e8c <_printf_i+0x210>
1a004d70:	4665      	mov	r5, ip
1a004d72:	2a08      	cmp	r2, #8
1a004d74:	d10b      	bne.n	1a004d8e <_printf_i+0x112>
1a004d76:	6823      	ldr	r3, [r4, #0]
1a004d78:	07db      	lsls	r3, r3, #31
1a004d7a:	d508      	bpl.n	1a004d8e <_printf_i+0x112>
1a004d7c:	6923      	ldr	r3, [r4, #16]
1a004d7e:	6862      	ldr	r2, [r4, #4]
1a004d80:	429a      	cmp	r2, r3
1a004d82:	bfde      	ittt	le
1a004d84:	2330      	movle	r3, #48	; 0x30
1a004d86:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004d8a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a004d8e:	ebac 0305 	sub.w	r3, ip, r5
1a004d92:	6123      	str	r3, [r4, #16]
1a004d94:	f8cd 8000 	str.w	r8, [sp]
1a004d98:	463b      	mov	r3, r7
1a004d9a:	aa03      	add	r2, sp, #12
1a004d9c:	4621      	mov	r1, r4
1a004d9e:	4630      	mov	r0, r6
1a004da0:	f7ff fef6 	bl	1a004b90 <_printf_common>
1a004da4:	3001      	adds	r0, #1
1a004da6:	d14d      	bne.n	1a004e44 <_printf_i+0x1c8>
1a004da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004dac:	b005      	add	sp, #20
1a004dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004db2:	4839      	ldr	r0, [pc, #228]	; (1a004e98 <_printf_i+0x21c>)
1a004db4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004db8:	6813      	ldr	r3, [r2, #0]
1a004dba:	6821      	ldr	r1, [r4, #0]
1a004dbc:	1d1d      	adds	r5, r3, #4
1a004dbe:	681b      	ldr	r3, [r3, #0]
1a004dc0:	6015      	str	r5, [r2, #0]
1a004dc2:	060a      	lsls	r2, r1, #24
1a004dc4:	d50b      	bpl.n	1a004dde <_printf_i+0x162>
1a004dc6:	07ca      	lsls	r2, r1, #31
1a004dc8:	bf44      	itt	mi
1a004dca:	f041 0120 	orrmi.w	r1, r1, #32
1a004dce:	6021      	strmi	r1, [r4, #0]
1a004dd0:	b91b      	cbnz	r3, 1a004dda <_printf_i+0x15e>
1a004dd2:	6822      	ldr	r2, [r4, #0]
1a004dd4:	f022 0220 	bic.w	r2, r2, #32
1a004dd8:	6022      	str	r2, [r4, #0]
1a004dda:	2210      	movs	r2, #16
1a004ddc:	e7b7      	b.n	1a004d4e <_printf_i+0xd2>
1a004dde:	064d      	lsls	r5, r1, #25
1a004de0:	bf48      	it	mi
1a004de2:	b29b      	uxthmi	r3, r3
1a004de4:	e7ef      	b.n	1a004dc6 <_printf_i+0x14a>
1a004de6:	4665      	mov	r5, ip
1a004de8:	fbb3 f1f2 	udiv	r1, r3, r2
1a004dec:	fb02 3311 	mls	r3, r2, r1, r3
1a004df0:	5cc3      	ldrb	r3, [r0, r3]
1a004df2:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004df6:	460b      	mov	r3, r1
1a004df8:	2900      	cmp	r1, #0
1a004dfa:	d1f5      	bne.n	1a004de8 <_printf_i+0x16c>
1a004dfc:	e7b9      	b.n	1a004d72 <_printf_i+0xf6>
1a004dfe:	6813      	ldr	r3, [r2, #0]
1a004e00:	6825      	ldr	r5, [r4, #0]
1a004e02:	6961      	ldr	r1, [r4, #20]
1a004e04:	1d18      	adds	r0, r3, #4
1a004e06:	6010      	str	r0, [r2, #0]
1a004e08:	0628      	lsls	r0, r5, #24
1a004e0a:	681b      	ldr	r3, [r3, #0]
1a004e0c:	d501      	bpl.n	1a004e12 <_printf_i+0x196>
1a004e0e:	6019      	str	r1, [r3, #0]
1a004e10:	e002      	b.n	1a004e18 <_printf_i+0x19c>
1a004e12:	066a      	lsls	r2, r5, #25
1a004e14:	d5fb      	bpl.n	1a004e0e <_printf_i+0x192>
1a004e16:	8019      	strh	r1, [r3, #0]
1a004e18:	2300      	movs	r3, #0
1a004e1a:	6123      	str	r3, [r4, #16]
1a004e1c:	4665      	mov	r5, ip
1a004e1e:	e7b9      	b.n	1a004d94 <_printf_i+0x118>
1a004e20:	6813      	ldr	r3, [r2, #0]
1a004e22:	1d19      	adds	r1, r3, #4
1a004e24:	6011      	str	r1, [r2, #0]
1a004e26:	681d      	ldr	r5, [r3, #0]
1a004e28:	6862      	ldr	r2, [r4, #4]
1a004e2a:	2100      	movs	r1, #0
1a004e2c:	4628      	mov	r0, r5
1a004e2e:	f000 f837 	bl	1a004ea0 <memchr>
1a004e32:	b108      	cbz	r0, 1a004e38 <_printf_i+0x1bc>
1a004e34:	1b40      	subs	r0, r0, r5
1a004e36:	6060      	str	r0, [r4, #4]
1a004e38:	6863      	ldr	r3, [r4, #4]
1a004e3a:	6123      	str	r3, [r4, #16]
1a004e3c:	2300      	movs	r3, #0
1a004e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004e42:	e7a7      	b.n	1a004d94 <_printf_i+0x118>
1a004e44:	6923      	ldr	r3, [r4, #16]
1a004e46:	462a      	mov	r2, r5
1a004e48:	4639      	mov	r1, r7
1a004e4a:	4630      	mov	r0, r6
1a004e4c:	47c0      	blx	r8
1a004e4e:	3001      	adds	r0, #1
1a004e50:	d0aa      	beq.n	1a004da8 <_printf_i+0x12c>
1a004e52:	6823      	ldr	r3, [r4, #0]
1a004e54:	079b      	lsls	r3, r3, #30
1a004e56:	d413      	bmi.n	1a004e80 <_printf_i+0x204>
1a004e58:	68e0      	ldr	r0, [r4, #12]
1a004e5a:	9b03      	ldr	r3, [sp, #12]
1a004e5c:	4298      	cmp	r0, r3
1a004e5e:	bfb8      	it	lt
1a004e60:	4618      	movlt	r0, r3
1a004e62:	e7a3      	b.n	1a004dac <_printf_i+0x130>
1a004e64:	2301      	movs	r3, #1
1a004e66:	464a      	mov	r2, r9
1a004e68:	4639      	mov	r1, r7
1a004e6a:	4630      	mov	r0, r6
1a004e6c:	47c0      	blx	r8
1a004e6e:	3001      	adds	r0, #1
1a004e70:	d09a      	beq.n	1a004da8 <_printf_i+0x12c>
1a004e72:	3501      	adds	r5, #1
1a004e74:	68e3      	ldr	r3, [r4, #12]
1a004e76:	9a03      	ldr	r2, [sp, #12]
1a004e78:	1a9b      	subs	r3, r3, r2
1a004e7a:	42ab      	cmp	r3, r5
1a004e7c:	dcf2      	bgt.n	1a004e64 <_printf_i+0x1e8>
1a004e7e:	e7eb      	b.n	1a004e58 <_printf_i+0x1dc>
1a004e80:	2500      	movs	r5, #0
1a004e82:	f104 0919 	add.w	r9, r4, #25
1a004e86:	e7f5      	b.n	1a004e74 <_printf_i+0x1f8>
1a004e88:	2b00      	cmp	r3, #0
1a004e8a:	d1ac      	bne.n	1a004de6 <_printf_i+0x16a>
1a004e8c:	7803      	ldrb	r3, [r0, #0]
1a004e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004e92:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004e96:	e76c      	b.n	1a004d72 <_printf_i+0xf6>
1a004e98:	1a005341 	.word	0x1a005341
1a004e9c:	1a005352 	.word	0x1a005352

1a004ea0 <memchr>:
1a004ea0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004ea4:	2a10      	cmp	r2, #16
1a004ea6:	db2b      	blt.n	1a004f00 <memchr+0x60>
1a004ea8:	f010 0f07 	tst.w	r0, #7
1a004eac:	d008      	beq.n	1a004ec0 <memchr+0x20>
1a004eae:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004eb2:	3a01      	subs	r2, #1
1a004eb4:	428b      	cmp	r3, r1
1a004eb6:	d02d      	beq.n	1a004f14 <memchr+0x74>
1a004eb8:	f010 0f07 	tst.w	r0, #7
1a004ebc:	b342      	cbz	r2, 1a004f10 <memchr+0x70>
1a004ebe:	d1f6      	bne.n	1a004eae <memchr+0xe>
1a004ec0:	b4f0      	push	{r4, r5, r6, r7}
1a004ec2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004ec6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004eca:	f022 0407 	bic.w	r4, r2, #7
1a004ece:	f07f 0700 	mvns.w	r7, #0
1a004ed2:	2300      	movs	r3, #0
1a004ed4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004ed8:	3c08      	subs	r4, #8
1a004eda:	ea85 0501 	eor.w	r5, r5, r1
1a004ede:	ea86 0601 	eor.w	r6, r6, r1
1a004ee2:	fa85 f547 	uadd8	r5, r5, r7
1a004ee6:	faa3 f587 	sel	r5, r3, r7
1a004eea:	fa86 f647 	uadd8	r6, r6, r7
1a004eee:	faa5 f687 	sel	r6, r5, r7
1a004ef2:	b98e      	cbnz	r6, 1a004f18 <memchr+0x78>
1a004ef4:	d1ee      	bne.n	1a004ed4 <memchr+0x34>
1a004ef6:	bcf0      	pop	{r4, r5, r6, r7}
1a004ef8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004efc:	f002 0207 	and.w	r2, r2, #7
1a004f00:	b132      	cbz	r2, 1a004f10 <memchr+0x70>
1a004f02:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004f06:	3a01      	subs	r2, #1
1a004f08:	ea83 0301 	eor.w	r3, r3, r1
1a004f0c:	b113      	cbz	r3, 1a004f14 <memchr+0x74>
1a004f0e:	d1f8      	bne.n	1a004f02 <memchr+0x62>
1a004f10:	2000      	movs	r0, #0
1a004f12:	4770      	bx	lr
1a004f14:	3801      	subs	r0, #1
1a004f16:	4770      	bx	lr
1a004f18:	2d00      	cmp	r5, #0
1a004f1a:	bf06      	itte	eq
1a004f1c:	4635      	moveq	r5, r6
1a004f1e:	3803      	subeq	r0, #3
1a004f20:	3807      	subne	r0, #7
1a004f22:	f015 0f01 	tst.w	r5, #1
1a004f26:	d107      	bne.n	1a004f38 <memchr+0x98>
1a004f28:	3001      	adds	r0, #1
1a004f2a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004f2e:	bf02      	ittt	eq
1a004f30:	3001      	addeq	r0, #1
1a004f32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004f36:	3001      	addeq	r0, #1
1a004f38:	bcf0      	pop	{r4, r5, r6, r7}
1a004f3a:	3801      	subs	r0, #1
1a004f3c:	4770      	bx	lr
1a004f3e:	bf00      	nop
1a004f40:	6e617254 	.word	0x6e617254
1a004f44:	74696d73 	.word	0x74696d73
1a004f48:	ffffff00 	.word	0xffffff00
1a004f4c:	6154796d 	.word	0x6154796d
1a004f50:	ff006b73 	.word	0xff006b73
1a004f54:	6c707041 	.word	0x6c707041
1a004f58:	74616369 	.word	0x74616369
1a004f5c:	206e6f69 	.word	0x206e6f69
1a004f60:	6c6c614d 	.word	0x6c6c614d
1a004f64:	4620636f 	.word	0x4620636f
1a004f68:	656c6961 	.word	0x656c6961
1a004f6c:	6f482064 	.word	0x6f482064
1a004f70:	0d216b6f 	.word	0x0d216b6f
1a004f74:	00000000 	.word	0x00000000
1a004f78:	7362696c 	.word	0x7362696c
1a004f7c:	6572662f 	.word	0x6572662f
1a004f80:	6f747265 	.word	0x6f747265
1a004f84:	6f732f73 	.word	0x6f732f73
1a004f88:	65637275 	.word	0x65637275
1a004f8c:	6f6f682f 	.word	0x6f6f682f
1a004f90:	632e736b 	.word	0x632e736b
1a004f94:	ffffff00 	.word	0xffffff00
1a004f98:	70410a0d 	.word	0x70410a0d
1a004f9c:	63696c70 	.word	0x63696c70
1a004fa0:	6f697461 	.word	0x6f697461
1a004fa4:	7453206e 	.word	0x7453206e
1a004fa8:	206b6361 	.word	0x206b6361
1a004fac:	7265764f 	.word	0x7265764f
1a004fb0:	776f6c66 	.word	0x776f6c66
1a004fb4:	6f202121 	.word	0x6f202121
1a004fb8:	6154206e 	.word	0x6154206e
1a004fbc:	203a6b73 	.word	0x203a6b73
1a004fc0:	0a0d7325 	.word	0x0a0d7325
1a004fc4:	ffffff00 	.word	0xffffff00
1a004fc8:	41760a0d 	.word	0x41760a0d
1a004fcc:	72657373 	.word	0x72657373
1a004fd0:	6c614374 	.word	0x6c614374
1a004fd4:	2864656c 	.word	0x2864656c
1a004fd8:	200a0d29 	.word	0x200a0d29
1a004fdc:	4c4c2020 	.word	0x4c4c2020
1a004fe0:	20656e69 	.word	0x20656e69
1a004fe4:	626d754e 	.word	0x626d754e
1a004fe8:	3d207265 	.word	0x3d207265
1a004fec:	0d642520 	.word	0x0d642520
1a004ff0:	2020200a 	.word	0x2020200a
1a004ff4:	656c6946 	.word	0x656c6946
1a004ff8:	6d614e20 	.word	0x6d614e20
1a004ffc:	203d2065 	.word	0x203d2065
1a005000:	0a0d7325 	.word	0x0a0d7325
1a005004:	ff000a0d 	.word	0xff000a0d
1a005008:	454c4449 	.word	0x454c4449
1a00500c:	ffffff00 	.word	0xffffff00
1a005010:	51726d54 	.word	0x51726d54
1a005014:	ffffff00 	.word	0xffffff00
1a005018:	20726d54 	.word	0x20726d54
1a00501c:	00637653 	.word	0x00637653

1a005020 <ExtRateIn>:
1a005020:	00000000                                ....

1a005024 <GpioButtons>:
1a005024:	08000400 09010900                       ........

1a00502c <GpioLeds>:
1a00502c:	01050005 0e000205 0c010b01              ............

1a005038 <GpioPorts>:
1a005038:	03030003 0f050403 05031005 07030603     ................
1a005048:	ffff0802                                ....

1a00504c <OscRateIn>:
1a00504c:	00b71b00                                ....

1a005050 <InitClkStates>:
1a005050:	01010f01                                ....

1a005054 <pinmuxing>:
1a005054:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005064:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005074:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005084:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005094:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0050a4:	00d50301 00d50401 00160107 00560207     ..............V.
1a0050b4:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0050c4:	00570206                                ..W.

1a0050c8 <UART_BClock>:
1a0050c8:	01a201c2 01620182                       ......b.

1a0050d0 <UART_PClock>:
1a0050d0:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0050e0:	000000ff                                ....

1a0050e4 <periph_to_base>:
1a0050e4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0050f4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005104:	000100e0 01000100 01200003 00060120     .......... . ...
1a005114:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005124:	01820013 00120182 01a201a2 01c20011     ................
1a005134:	001001c2 01e201e2 0202000f 000e0202     ................
1a005144:	02220222 0223000d 001c0223              "."...#.#...

1a005150 <InitClkStates>:
1a005150:	00010100 00010909 0001090a 01010701     ................
1a005160:	00010902 00010906 0101090c 0001090d     ................
1a005170:	0001090e 0001090f 00010910 00010911     ................
1a005180:	00010912 00010913 00011114 00011119     ................
1a005190:	0001111a 0001111b                       ........

1a005198 <lpcUarts>:
1a005198:	40081000 06020406 00180205 40081000     ...@...........@
1a0051a8:	09070509 00180706 40082000 00000000     ......... .@....
1a0051b8:	00190000 400c1000 07060107 001a0602     .......@........
1a0051c8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0051d8:	02020302 001b0204                       ........

1a0051e0 <gpioPinsInit>:
1a0051e0:	02000104 00050701 05010d03 04080100     ................
1a0051f0:	02020002 02000304 00000403 04070002     ................
1a005200:	030c0300 09050402 05040103 04030208     ................
1a005210:	04020305 06040504 0802000c 03000b06     ................
1a005220:	00090607 07060503 060f0504 03030004     ................
1a005230:	02000404 00050404 06040502 04060200     ................
1a005240:	0c050408 05040a04 0003010e 14010a00     ................
1a005250:	010f0000 0d000012 00001101 0010010c     ................
1a005260:	07070300 000f0300 01000001 00000000     ................
1a005270:	000a0600 08060603 06100504 04030005     ................
1a005280:	03000106 04090400 04010d05 010b0000     ................
1a005290:	0200000f 00000001 00010104 02010800     ................
1a0052a0:	01090000 09010006 05040002 04010200     ................
1a0052b0:	02020105 02020504 0e00000a 01000b02     ................
1a0052c0:	000c020b ffff0c01                       ........

1a0052c8 <ultrasonicSensorsIrqMap>:
1a0052c8:	ff020100                                ....

1a0052cc <__sf_fake_stderr>:
	...

1a0052ec <__sf_fake_stdin>:
	...

1a00530c <__sf_fake_stdout>:
	...

1a00532c <_global_impure_ptr>:
1a00532c:	100000cc 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a00533c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00534c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00535c:	64636261 ff006665                       abcdef..
