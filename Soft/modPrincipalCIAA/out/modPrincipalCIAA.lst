
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf:     file format elf32-littlearm
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0028fd

Program Header:
0x70000001 off    0x00017d58 vaddr 0x1a007d58 paddr 0x1a007d58 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000065c8 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00007d60 memsz 0x00007d60 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a007d60 align 2**16
         filesz 0x00001d60 memsz 0x00001d60 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007d54  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001d60  10000000  1a007d60  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00021d60  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00021d60  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00021d60  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00021d60  2**2
                  CONTENTS
  6 .bss          00004868  10001d60  10001d60  00001d60  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00021d60  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00021d60  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00021d60  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00021d60  2**2
                  CONTENTS
 11 .init_array   00000004  1a007d54  1a007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a007d58  1a007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00021d60  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00021d60  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00021d60  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00021d60  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00021d60  2**2
                  CONTENTS
 18 .noinit       00000000  100065c8  100065c8  00021d60  2**2
                  CONTENTS
 19 .debug_info   000448e1  00000000  00000000  00021d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00007b46  00000000  00000000  00066641  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000d7d8  00000000  00000000  0006e187  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001348  00000000  00000000  0007b95f  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000013e0  00000000  00000000  0007cca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000149b2  00000000  00000000  0007e087  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001f1e0  00000000  00000000  00092a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0003243e  00000000  00000000  000b1c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000e4057  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000e40d6  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000388c  00000000  00000000  000e4110  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10001d60 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007d54 l    d  .init_array	00000000 .init_array
1a007d58 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100065c8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a005788 l     F .text	000000c8 uartProcessIRQ
100061c0 l     O .bss	00000004 rxIsrCallbackUART0
100061c4 l     O .bss	00000004 rxIsrCallbackUART0Params
100061c8 l     O .bss	00000004 rxIsrCallbackUART2
100061cc l     O .bss	00000004 rxIsrCallbackUART2Params
100061d0 l     O .bss	00000004 rxIsrCallbackUART3
100061d4 l     O .bss	00000004 rxIsrCallbackUART3Params
100061d8 l     O .bss	00000004 txIsrCallbackUART0
100061dc l     O .bss	00000004 txIsrCallbackUART0Params
100061e0 l     O .bss	00000004 txIsrCallbackUART2
100061e4 l     O .bss	00000004 txIsrCallbackUART2Params
100061e8 l     O .bss	00000004 txIsrCallbackUART3
100061ec l     O .bss	00000004 txIsrCallbackUART3Params
1a007b80 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Esp8266FreeRTOS.c
1a000300 l     F .text	0000000c SetEsp8622Status
1a00030c l     F .text	00000058 IsWaitedResponse
1a0006b0 l     F .text	00000a10 ExcecuteHttpServerFsm
10001d60 l     O .bss	00000001 CurrentConnectionId
10001d61 l     O .bss	00000001 CurrentReqLength
10001d68 l     O .bss	00000018 Esp8266Delay
10001d80 l     O .bss	00000004 Esp8266ResponseToWait
10001d84 l     O .bss	00000001 Esp8266Status
10001d88 l     O .bss	00000004 HTTPVersion.14798
10001d8c l     O .bss	00000004 PointerOfHttpWebPage
10001d90 l     O .bss	00000010 UARTEsp
10001da0 l     O .bss	00000014 WifiIp
10001db4 l     O .bss	0000001e WifiName
10001dd4 l     O .bss	0000001e WifiPass
10001df2 l     O .bss	00000001 auxIndex.14729
10001df4 l     O .bss	00000004 auxpointer1.14799
10001df8 l     O .bss	00000004 auxpointer2.14800
10001dfc l     O .bss	00000001 byteReceived.14728
10001dfe l     O .bss	00000002 i.14727
10001e00 l     O .bss	00000001 index.14774
10001e04 l     O .bss	00000004 methode.14796
10001e08 l     O .bss	00000001 parametersReceived.14717
10001e0c l     O .bss	00000100 rawRequest
10001f0c l     O .bss	00000004 request.14797
1a0076d8 l     O .text	0000000f Response_CIFSR
1a0076e8 l     O .text	00000007 Response_CIPCLOSE
1a0076f0 l     O .text	00000002 Response_COMMA
1a0076f4 l     O .text	0000000f Response_CWJAP_1
1a007704 l     O .text	0000000c Response_CWJAP_2
1a007710 l     O .text	00000008 Response_CWJAP_OK
1a007718 l     O .text	00000006 Response_IPD
1a007720 l     O .text	00000003 Response_OK
1a007724 l     O .text	00000008 Response_SEND_OK
00000000 l    df *ABS*	00000000 UARTEspDriver.c
00000000 l    df *ABS*	00000000 pruebas.c
10001f10 l     O .bss	00000054 ports.14539
00000000 l    df *ABS*	00000000 terminal.c
00000000 l    df *ABS*	00000000 DataMemory.c
00000000 l    df *ABS*	00000000 portsDriver.c
10001f64 l     O .bss	00000001 byteIndex.14479
10001f65 l     O .bss	00000001 byteNumber.14456
10001f68 l     O .bss	00000012 dataToSend.14477
10001f7a l     O .bss	00000001 portIndex.14478
10001f7c l     O .bss	00000004 receivedData.14455
10001f80 l     O .bss	00000001 transmitEmpty.14482
00000000 l    df *ABS*	00000000 interpreter.c
00000000 l    df *ABS*	00000000 modPrincipalCIAA.c
00000000 l    df *ABS*	00000000 system.c
10001f84 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_1.c
10001f8c l     O .bss	00003800 ucHeap
10001f88 l     O .bss	00000004 pucAlignedHeap.11438
1000578c l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a002ad6 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a002ae8 l     F .text	0000001e prvIsQueueFull
1a002b06 l     F .text	0000001a prvIsQueueEmpty
1a002b20 l     F .text	00000076 prvCopyDataToQueue
1a002b96 l     F .text	00000024 prvCopyDataFromQueue
1a002bba l     F .text	0000006e prvUnlockQueue
1a002cac l     F .text	00000022 prvInitialiseNewQueue
1a002f28 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10005790 l     O .bss	00000168 uxIdleTaskStack.10728
100058f8 l     O .bss	000005a0 uxTimerTaskStack.10735
10005e98 l     O .bss	00000060 xIdleTaskTCB.10727
10005ef8 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a003588 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0035b4 l     F .text	00000092 prvInitialiseNewTask
1a003648 l     F .text	00000068 prvInitialiseTaskLists
1a0036b0 l     F .text	000000ac prvAddNewTaskToReadyList
1a00375c l     F .text	00000038 prvDeleteTCB
1a003794 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0037e0 l     F .text	00000028 prvIdleTask
1a003808 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10005f5c l     O .bss	00000004 pxDelayedTaskList
10005f60 l     O .bss	00000004 pxOverflowDelayedTaskList
10005f64 l     O .bss	0000008c pxReadyTasksLists
10005ff0 l     O .bss	00000004 uxCurrentNumberOfTasks
10005ff4 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10005ff8 l     O .bss	00000004 uxPendedTicks
10005ffc l     O .bss	00000004 uxSchedulerSuspended
10006000 l     O .bss	00000004 uxTaskNumber
10006004 l     O .bss	00000004 uxTopReadyPriority
10006008 l     O .bss	00000014 xDelayedTaskList1
1000601c l     O .bss	00000014 xDelayedTaskList2
10006030 l     O .bss	00000004 xNextTaskUnblockTime
10006034 l     O .bss	00000004 xNumOfOverflows
10006038 l     O .bss	00000014 xPendingReadyList
1000604c l     O .bss	00000004 xSchedulerRunning
10006050 l     O .bss	00000014 xSuspendedTaskList
10006064 l     O .bss	00000014 xTasksWaitingTermination
10006078 l     O .bss	00000004 xTickCount
1000607c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a004144 l     F .text	00000020 prvGetNextExpireTime
1a004164 l     F .text	00000048 prvInsertTimerInActiveList
1a0041ac l     F .text	00000070 prvCheckForValidListAndQueue
1a00421c l     F .text	00000040 prvInitialiseNewTimer
1a0045d8 l     F .text	00000016 prvTimerTask
1a004364 l     F .text	00000078 prvSwitchTimerLists
1a0043dc l     F .text	0000002c prvSampleTimeNow
1a004408 l     F .text	00000060 prvProcessExpiredTimer
1a004468 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0044dc l     F .text	000000fc prvProcessReceivedCommands
10006080 l     O .bss	00000004 pxCurrentTimerList
10006084 l     O .bss	00000004 pxOverflowTimerList
10006088 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10006128 l     O .bss	00000014 xActiveTimerList1
1000613c l     O .bss	00000014 xActiveTimerList2
10006150 l     O .bss	00000004 xLastTime.11777
10006154 l     O .bss	00000050 xStaticTimerQueue.11827
100061a4 l     O .bss	00000004 xTimerQueue
100061a8 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a004614 l     F .text	00000040 prvTaskExitError
1a004654 l     F .text	00000022 prvPortStartFirstTask
1a00467c l     F .text	0000000e vPortEnableVFP
1a0046e0 l       .text	00000000 pxCurrentTCBConst2
1a0047c0 l       .text	00000000 pxCurrentTCBConst
100061ac l     O .bss	00000001 ucMaxSysCallPriority
100061b0 l     O .bss	00000004 ulMaxPRIGROUPValue
10001c28 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0049b4 l     F .text	00000044 Board_LED_Init
1a0049f8 l     F .text	00000040 Board_TEC_Init
1a004a38 l     F .text	00000040 Board_GPIO_Init
1a004a78 l     F .text	00000030 Board_ADC_Init
1a004aa8 l     F .text	00000038 Board_SPI_Init
1a004ae0 l     F .text	00000024 Board_I2C_Init
1a007a0c l     O .text	00000008 GpioButtons
1a007a14 l     O .text	0000000c GpioLeds
1a007a20 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007a38 l     O .text	00000004 InitClkStates
1a007a3c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10001c2c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a004cd0 l     F .text	0000002c Chip_UART_GetIndex
1a007ab0 l     O .text	00000008 UART_BClock
1a007ab8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a004e78 l     F .text	00000014 Chip_ADC_GetClockIndex
1a004e8c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a004f40 l     F .text	000000a4 pll_calc_divs
1a004fe4 l     F .text	0000010c pll_get_frac
1a0050f0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a005364 l     F .text	00000022 Chip_Clock_GetDivRate
100061b8 l     O .bss	00000008 audio_usb_pll_freq
1a007acc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007b38 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 eeprom_18xx_43xx.c
1a005638 l     F .text	0000001c setClkDiv
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a005680 l     F .text	00000014 Chip_SSP_GetClockIndex
1a005694 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10001c64 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a005ae8 l     F .text	00000002 errorOcurred
1a005aea l     F .text	00000002 doNothing
10001c70 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a005bf4 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100061f0 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_stdio.c
1a005ffc l     F .text	00000018 printchar
1a006014 l     F .text	00000080 prints
1a006094 l     F .text	000000a2 printi
1a006138 l     F .text	00000148 print
100061f4 l     O .bss	00000001 prev.13796
10001cb0 l     O .data	00000001 UartPrintf
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0062bc l     F .text	00000010 clearInterrupt
1a0062cc l     F .text	0000005c serveInterrupt
10001cb4 l     O .data	00000048 ultrasonicSensors
1a007cb8 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0067a8 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a006f68 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10001d00 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 webPage.c
00000000 l    df *ABS*	00000000 
1a007d58 l       .init_array	00000000 __init_array_end
1a007d54 l       .bss_RAM5	00000000 __preinit_array_end
1a007d54 l       .init_array	00000000 __init_array_start
1a007d54 l       .bss_RAM5	00000000 __preinit_array_start
100063c0 g     O .bss	00000010 UARTTerminal
1a005188 g     F .text	0000001c Chip_Clock_GetDividerSource
1a00299c g     F .text	00000012 _isatty_r
1a006cc6 g     F .text	00000010 strcpy
1a006b2c g     F .text	000000b8 _puts_r
1a005b6c g     F .text	00000044 TIMER2_IRQHandler
1a005a0c g     F .text	00000014 uartRxRead
1a0029ae g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a002438 g     F .text	000000a4 portsdriverInit
1a001490 g     F .text	00000014 getTestsState
1a000114 g       .text	00000000 __section_table_start
1a00113c g     F .text	0000002c gesp8266WriteHttpServer
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a004728 g     F .text	0000002c vPortExitCritical
1a0042c0 g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006afc g     F .text	00000030 printf
1a004b9a g     F .text	00000008 __stdio_init
1a002064 g     F .text	00000018 getParameters
1a005f64 g     F .text	00000042 delayRead
1a006c4e g     F .text	00000024 __sseek
1a006828 g     F .text	00000060 __sinit
1a006d1c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a003410 g     F .text	00000052 vQueueWaitForMessageRestricted
1a0067fc g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a004f32 g     F .text	0000000c Chip_ADC_SetResolution
1a006f66 g     F .text	00000002 __malloc_unlock
1a002218 g     F .text	000000a0 onRxCallback
1a000420 g     F .text	00000032 stringToInt
1a0047c4 g     F .text	0000002c SysTick_Handler
1a004d50 g     F .text	00000040 Chip_UART_SetBaud
1a0028f8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a004b3c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
10006570 g     O .bss	00000004 params
1a004760 g     F .text	00000064 PendSV_Handler
1a002f56 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a007d60 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0025f4 g     F .text	00000170 refreshPageData
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
10006200 g     O .bss	00000004 requestAnswer
1a0022e0 g     F .text	00000118 onTxCallback
1a001c8e g     F .text	00000080 testsTask
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10001084 g     O .data	000003e2 panel0
10005f58 g     O .bss	00000004 pxCurrentTCB
1a0017f8 g     F .text	000002c0 FSMPruebaTemporizadores
1a002992 g     F .text	0000000a _fstat_r
53ff4f92 g       *ABS*	00000000 __valid_user_code_checksum
1a00134c g     F .text	0000009c pruebasInit
1a001288 g     F .text	00000064 EspRxCallback
1a007d60 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a003e3c g     F .text	00000018 vTaskInternalSetTimeOutState
1a002570 g     F .text	0000005c interpreterInit
1a00599c g     F .text	00000028 uartCallbackClr
1a005bb0 g     F .text	00000044 TIMER3_IRQHandler
1a005406 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00629c g     F .text	0000001e stdioSprintf
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a004828 g     F .text	00000110 xPortStartScheduler
1a006984 g     F .text	00000016 memcpy
1a003d48 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0067f0 g     F .text	0000000c _cleanup_r
1a0047f0  w    F .text	00000038 vPortSetupTimerInterrupt
1a002764 g     F .text	00000178 interpreter
1a006348 g     F .text	00000000 .hidden __aeabi_uldivmod
100065c8 g       .noinit	00000000 _noinit
1a006be4 g     F .text	00000010 puts
1a002ac0 g     F .text	00000016 vPortFree
1a001fe0 g     F .text	00000050 loadParameters
1a0024dc g     F .text	00000048 sendDataPort
100005f4 g     O .data	000007cc HttpWebPage
100065c0 g     O .bss	00000004 SystemCoreClock
1a004cfc g     F .text	00000054 Chip_UART_Init
1a00317c g     F .text	0000019c xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a004938 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a005484 g     F .text	0000004c Chip_Clock_GetRate
1a00347e g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a001d4c g     F .text	0000004c terminalInit
1a00141c g     F .text	00000074 sendToAllTests
1a004bdc g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
10006204 g     O .bss	000001b0 FSMRegisters
1a006378 g     F .text	000002cc .hidden __udivmoddi4
1a002a30 g     F .text	00000020 _sbrk_r
1a007a08 g     O .text	00000004 ExtRateIn
1a0022b8 g     F .text	00000028 onTxTimeOutCallback
1a0001ba  w    F .text	00000002 IntDefaultHandler
10000f24 g     O .data	0000015e pageDataB
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00133c g     F .text	00000010 receiveEspByte
100063b4 g     O .bss	00000004 commandsQueue
1a0029b8 g     F .text	0000004e _read_r
1a003478 g     F .text	00000006 vListInitialiseItem
1a006332 g     F .text	0000000a GPIO1_IRQHandler
1a003024 g     F .text	00000158 xQueueReceive
10006580 g     O .bss	00000040 xQueueRegistry
10006444 g     O .bss	00000004 EEPROMSemaphore
1a001d98 g     F .text	000000b4 scanParameter
1a00350c g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a007d58 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a007d1c g     O .text	00000004 _global_impure_ptr
1a00693c g     F .text	00000048 __libc_init_array
10006568 g     O .bss	00000004 actualPanel
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a002a50 g     F .text	00000070 pvPortMalloc
1a0025cc g     F .text	00000028 sendCommand
1a004b58 g     F .text	00000030 Board_Init
1a002986  w    F .text	00000002 _init
1a001124 g     F .text	00000018 gesp8266ReadHttpServer
1a003462 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00566c g     F .text	00000010 Chip_EEPROM_WaitForIntStatus
1a0023f8 g     F .text	0000003e portsDataInit
1a005654 g     F .text	00000018 Chip_EEPROM_Init
1a003a1c g     F .text	0000000c xTaskGetTickCount
1a002dac g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100065c8 g       .bss	00000000 _ebss
1a005fa8 g     F .text	00000014 _outbyte
1a005aec g     F .text	00000040 TIMER0_IRQHandler
1a0028fc g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a004c98 g     F .text	00000038 Chip_I2C_SetClockRate
1a003fb8 g     F .text	000000b0 xTaskPriorityDisinherit
1a001168 g     F .text	00000120 server
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00513c g     F .text	0000004c Chip_Clock_EnableCrystal
1a000454 g     F .text	0000025c requestCallback
10008000 g       *ABS*	00000000 __top_RamLoc32
1a003db0 g     F .text	0000008c xTaskRemoveFromEventList
1a003550  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0017c8 g     F .text	00000030 checkTimeout
1a001f40 g     F .text	00000078 terminal
1a006c7a g     F .text	0000001e strcat
1a005b2c g     F .text	00000040 TIMER1_IRQHandler
1a007cbc g     O .text	00000020 __sf_fake_stderr
1a004c74 g     F .text	00000024 Chip_I2C_Init
1a0003e8 g     F .text	00000038 espServerInit
1a005aca g     F .text	0000000a UART2_IRQHandler
1a0052f8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0020d8 g     F .text	0000007c loadWIFIData
1a007bc8 g     O .text	000000e6 gpioPinsInit
1a005850 g     F .text	00000090 uartInterrupt
1000183c g     O .data	000003d9 panel2
1a003524  w    F .text	0000002c vAssertCalled
1a005ab0 g     F .text	0000001a uartWriteByte
1a004128 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a0056ac g     F .text	00000012 Chip_SSP_SetClockRate
1a001d10 g     F .text	0000003c updateAllParameters
1a002030 g     F .text	00000034 loadParametersUnprotected
1a005ea6 g     F .text	00000016 gpioToggle
1a006f96 g     F .text	00000024 __sfputs_r
1a00633c g     F .text	0000000a GPIO2_IRQHandler
1a0014a4 g     F .text	00000324 FSMPruebaDrivers
1a007500 g     F .text	00000000 memchr
1a003e54 g     F .text	00000080 xTaskCheckForTimeOut
1a0069ac g     F .text	0000009c _free_r
1a0053e0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a003f00 g     F .text	000000b8 xTaskPriorityInherit
1a00207c g     F .text	0000005c saveParameters
100063d0 g     O .bss	00000040 PASS
10001d60 g       .bss	00000000 _bss
1a004f00 g     F .text	00000032 Chip_ADC_SetSampleRate
100061b4 g     O .bss	00000004 freeRtosInterruptCallback
1a003a0c g     F .text	00000010 vTaskSuspendAll
1a006ce6 g     F .text	00000034 strstr
1a005f44 g     F .text	00000020 delayInit
1a0059c4 g     F .text	00000030 uartSetPendingInterrupt
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0056be g     F .text	0000003e Chip_SSP_SetBitRate
1a0034ca g     F .text	00000028 uxListRemove
1a00567c g     F .text	00000002 Chip_GPIO_Init
1a007a34 g     O .text	00000004 OscRateIn
1a0010c0 g     F .text	00000064 gesp8266InitHttpServer
1a005a34 g     F .text	0000007c uartInit
1a0038a0 g     F .text	00000072 xTaskCreateStatic
10006574 g     O .bss	0000000c panels
100065c8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a003c80 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a002cce g     F .text	00000090 xQueueGenericCreateStatic
1a003d78 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a002988 g     F .text	0000000a _close_r
1a005c28 g     F .text	000001ac gpioInit
1a0034f4 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0003d4 g     F .text	00000014 checkWifiChange
1a0042f8 g     F .text	0000006c xTimerGenericCommand
1a006dc0 g     F .text	000000dc __swsetup_r
1a00356c  w    F .text	0000001c vApplicationStackOverflowHook
1a006644  w    F .text	00000002 .hidden __aeabi_ldiv0
1a006888 g     F .text	00000078 __sfp
1a006bf4 g     F .text	00000022 __sread
1a005ebc g     F .text	0000001c USB0_IRQHandler
1a002154 g     F .text	000000c4 saveWIFIData
1a005fbc g     F .text	00000040 outbyte
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a006f64 g     F .text	00000002 __malloc_lock
1a004b28 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a006754 g     F .text	00000054 _fflush_r
1a007cdc g     O .text	00000020 __sf_fake_stdin
1a0051a4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00699a g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0028dc g     F .text	0000001c main
100063b8 g     O .bss	00000004 wifiConnectSem
10006410 g     O .bss	00000010 IP
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a003496 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a0046c0 g     F .text	00000024 SVC_Handler
1a006c72 g     F .text	00000008 __sclose
1a00425c g     F .text	00000064 xTimerCreateTimerTask
1a001e4c g     F .text	000000f4 commandsFSM
1a006a48 g     F .text	000000b4 _malloc_r
1a0059f4 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a005414 g     F .text	0000003c Chip_Clock_EnableOpts
1a0003c0 g     F .text	00000014 resetWifiFlag
1a004b92 g     F .text	00000008 __stdio_getchar
1a003318 g     F .text	000000aa xQueueReceiveFromISR
1a002d5e g     F .text	0000004e xQueueGenericCreate
1a0051c0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000364 g     F .text	00000008 gesp8266GetIpAddress
1a006cb2 g     F .text	00000014 strcmp
1a005278 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a005734 g     F .text	00000038 SystemInit
1a002524 g     F .text	0000004a receiveDataPort
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a005dd4 g     F .text	0000006a gpioWrite
1a002984  w    F .text	00000002 _fini
1a006afc g     F .text	00000030 iprintf
1a003b40 g     F .text	000000f4 xTaskResumeAll
10000dc4 g     O .data	0000015e pageDataA
1a001ab8 g     F .text	000001d6 FSMCalibracion
1a003978 g     F .text	00000094 vTaskStartScheduler
1a004ec0 g     F .text	00000040 Chip_ADC_Init
100065c4 g     O .bss	00000004 g_pUsbApi
1a004ba4 g     F .text	00000038 Board_SetupMuxing
1a004d90 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a005ade g     F .text	0000000a tickRead
1a002a06 g     F .text	00000028 _write_r
10001c68 g     O .data	00000008 tickRateMS
1a0045ee g     F .text	00000026 pvTimerGetTimerID
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0071e8 g     F .text	000000ea _printf_common
10001cfc g     O .data	00000004 _impure_ptr
10001468 g     O .data	000003d1 panel1
1a006648 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000dc0 g     O .data	00000003 ok
1a005a20 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a003ed4 g     F .text	0000000c vTaskMissedYield
100065c8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0056fc g     F .text	00000038 Chip_SSP_Init
1a0033c2 g     F .text	00000026 uxQueueMessagesWaiting
1a0033e8 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a003a28 g     F .text	00000118 xTaskIncrementTick
1a006e9c g     F .text	00000048 __swhatbuf_r
1a004994 g     F .text	00000020 DAC_IRQHandler
1a004b04 g     F .text	00000024 Board_Debug_Init
10001c18 g     O .data	00000010 requestError
1a004b88 g     F .text	0000000a __stdio_putchar
1a002c28 g     F .text	00000084 xQueueGenericReset
1a0003a8 g     F .text	00000018 setWifiFlag
10001d60 g       .data	00000000 _edata
1000656c g     O .bss	00000004 actualPageData
1a004c54 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0013e8 g     F .text	00000034 setTestOrder
10006448 g     O .bss	00000120 parametersROM
1a003912 g     F .text	00000066 xTaskCreate
1a0054e4 g     F .text	00000154 Chip_SetupCoreClock
1a006c16 g     F .text	00000038 __swrite
1a006328 g     F .text	0000000a GPIO0_IRQHandler
1a006fbc g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a006900 g     F .text	0000003c _fwalk_reent
1a0054d0 g     F .text	00000014 SystemCoreClockUpdate
1a0012ec g     F .text	00000050 UARTEspInit
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a003c34 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001fb8 g     F .text	00000028 initEeprom
1a007cfc g     O .text	00000020 __sf_fake_stdout
1a003ee0 g     F .text	00000020 xTaskGetSchedulerState
1a004068 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a006644  w    F .text	00000002 .hidden __aeabi_idiv0
100063bc g     O .bss	00000001 actualPanelNumber
10000000 g     O .data	000005f1 HttpBody
1a0058e0 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a006ee4 g     F .text	00000080 __smakebuf_r
1a006cd6 g     F .text	00000010 strlen
1a004690 g     F .text	0000002c pxPortInitialiseStack
1a0072d4 g     F .text	00000224 _printf_i
1a005450 g     F .text	00000034 Chip_Clock_Enable
1a005ad4 g     F .text	0000000a UART3_IRQHandler
100061fc g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a006c98 g     F .text	0000001a strchr
1a005e3e g     F .text	00000068 gpioRead
1a006280 g     F .text	0000001c stdioPrintf
1a005ed8 g     F .text	0000006c boardInit
1a0046e4 g     F .text	00000044 vPortEnterCritical
100061f8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a006fbc g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
10006420 g     O .bss	00000021 SSID
1a00036c g     F .text	0000003c requestSeparate
1a002f40 g     F .text	00000016 xQueueCreateMutex
1a005388 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00576c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a004c48 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 fd 28 00 1a 79 01 00 1a 7b 01 00 1a     .....(..y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 92 4f ff 53     }............O.S
	...
1a00002c:	c1 46 00 1a 85 01 00 1a 00 00 00 00 61 47 00 1a     .F..........aG..
1a00003c:	c5 47 00 1a                                         .G..

1a000040 <g_pfnVendorVectors>:
1a000040:	95 49 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .I..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	bd 5e 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .^..............
1a000070:	ed 5a 00 1a 2d 5b 00 1a 6d 5b 00 1a b1 5b 00 1a     .Z..-[..m[...[..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a cb 5a 00 1a d5 5a 00 1a     .........Z...Z..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	29 63 00 1a 33 63 00 1a 3d 63 00 1a bb 01 00 1a     )c..3c..=c......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a007d60 	.word	0x1a007d60
1a000118:	10000000 	.word	0x10000000
1a00011c:	00001d60 	.word	0x00001d60
1a000120:	1a007d60 	.word	0x1a007d60
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007d60 	.word	0x1a007d60
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007d60 	.word	0x1a007d60
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007d60 	.word	0x1a007d60
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10001d60 	.word	0x10001d60
1a000154:	00004868 	.word	0x00004868
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f005 fae2 	bl	1a005788 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <SetEsp8622Status>:
 * Setea el estado global del modulo Esp8266.
 * @param status Estado a setear.
 */
static void SetEsp8622Status(Esp8266Status_t status)
{
	Esp8266Status = status;
1a000300:	4b01      	ldr	r3, [pc, #4]	; (1a000308 <SetEsp8622Status+0x8>)
1a000302:	7018      	strb	r0, [r3, #0]
}
1a000304:	4770      	bx	lr
1a000306:	bf00      	nop
1a000308:	10001d84 	.word	0x10001d84

1a00030c <IsWaitedResponse>:
{
1a00030c:	b500      	push	{lr}
1a00030e:	b083      	sub	sp, #12
	if (receiveEspByte(&UARTEsp, &byteReceived, 10))
1a000310:	220a      	movs	r2, #10
1a000312:	f10d 0107 	add.w	r1, sp, #7
1a000316:	4810      	ldr	r0, [pc, #64]	; (1a000358 <IsWaitedResponse+0x4c>)
1a000318:	f001 f810 	bl	1a00133c <receiveEspByte>
1a00031c:	4603      	mov	r3, r0
1a00031e:	b158      	cbz	r0, 1a000338 <IsWaitedResponse+0x2c>
		if (byteReceived == Esp8266ResponseToWait[index])
1a000320:	4b0e      	ldr	r3, [pc, #56]	; (1a00035c <IsWaitedResponse+0x50>)
1a000322:	681a      	ldr	r2, [r3, #0]
1a000324:	4b0e      	ldr	r3, [pc, #56]	; (1a000360 <IsWaitedResponse+0x54>)
1a000326:	781b      	ldrb	r3, [r3, #0]
1a000328:	5cd0      	ldrb	r0, [r2, r3]
1a00032a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00032e:	4288      	cmp	r0, r1
1a000330:	d006      	beq.n	1a000340 <IsWaitedResponse+0x34>
			index = 0;
1a000332:	2300      	movs	r3, #0
1a000334:	4a0a      	ldr	r2, [pc, #40]	; (1a000360 <IsWaitedResponse+0x54>)
1a000336:	7013      	strb	r3, [r2, #0]
}
1a000338:	4618      	mov	r0, r3
1a00033a:	b003      	add	sp, #12
1a00033c:	f85d fb04 	ldr.w	pc, [sp], #4
			index++;
1a000340:	3301      	adds	r3, #1
1a000342:	b2db      	uxtb	r3, r3
1a000344:	4906      	ldr	r1, [pc, #24]	; (1a000360 <IsWaitedResponse+0x54>)
1a000346:	700b      	strb	r3, [r1, #0]
			if (Esp8266ResponseToWait[index] == '\0')
1a000348:	5cd3      	ldrb	r3, [r2, r3]
1a00034a:	b91b      	cbnz	r3, 1a000354 <IsWaitedResponse+0x48>
				index = 0;
1a00034c:	2200      	movs	r2, #0
1a00034e:	700a      	strb	r2, [r1, #0]
				moduleResponse = TRUE;
1a000350:	2301      	movs	r3, #1
1a000352:	e7f1      	b.n	1a000338 <IsWaitedResponse+0x2c>
	bool_t moduleResponse = FALSE;
1a000354:	2300      	movs	r3, #0
1a000356:	e7ef      	b.n	1a000338 <IsWaitedResponse+0x2c>
1a000358:	10001d90 	.word	0x10001d90
1a00035c:	10001d80 	.word	0x10001d80
1a000360:	10001e00 	.word	0x10001e00

1a000364 <gesp8266GetIpAddress>:
}
1a000364:	4800      	ldr	r0, [pc, #0]	; (1a000368 <gesp8266GetIpAddress+0x4>)
1a000366:	4770      	bx	lr
1a000368:	10001da0 	.word	0x10001da0

1a00036c <requestSeparate>:
//**version: apunta a la parte de rawReq que la version del HTTP de la HTTP Request
//

void requestSeparate(char *rawReq, char **methode, char **request,
		char **HTTPVersion)
{
1a00036c:	b570      	push	{r4, r5, r6, lr}
1a00036e:	4604      	mov	r4, r0
1a000370:	4616      	mov	r6, r2
1a000372:	461d      	mov	r5, r3
	uint16_t i = 0;
	char *aux;
	*methode = rawReq;
1a000374:	6008      	str	r0, [r1, #0]
	*HTTPVersion = strstr(rawReq, "HTTP/");	//busco el inicio del string de la version HTTP
1a000376:	490b      	ldr	r1, [pc, #44]	; (1a0003a4 <requestSeparate+0x38>)
1a000378:	f006 fcb5 	bl	1a006ce6 <strstr>
1a00037c:	6028      	str	r0, [r5, #0]
	uint16_t i = 0;
1a00037e:	2300      	movs	r3, #0
	while (rawReq[i] != ' ')
1a000380:	e001      	b.n	1a000386 <requestSeparate+0x1a>
		i++;
1a000382:	3301      	adds	r3, #1
1a000384:	b29b      	uxth	r3, r3
	while (rawReq[i] != ' ')
1a000386:	4619      	mov	r1, r3
1a000388:	18e0      	adds	r0, r4, r3
1a00038a:	5ce2      	ldrb	r2, [r4, r3]
1a00038c:	2a20      	cmp	r2, #32
1a00038e:	d1f8      	bne.n	1a000382 <requestSeparate+0x16>
	rawReq[i] = 0; //pongo fin de cadena entre GET y la request propiamente dicha para separar el
1a000390:	2300      	movs	r3, #0
1a000392:	7003      	strb	r3, [r0, #0]
				   //string en 3 strings (methode, request y HTTPVersion)
	*request = &rawReq[i + 1]; //la request empieza un caracter despues del espacio que viene despues del GE
1a000394:	3101      	adds	r1, #1
1a000396:	440c      	add	r4, r1
1a000398:	6034      	str	r4, [r6, #0]

	aux = *HTTPVersion - sizeof(char); //poner el /0 antes de la posicion apuntada por HTTPVersion
1a00039a:	682a      	ldr	r2, [r5, #0]
	*aux = 0;
1a00039c:	f802 3c01 	strb.w	r3, [r2, #-1]

}
1a0003a0:	bd70      	pop	{r4, r5, r6, pc}
1a0003a2:	bf00      	nop
1a0003a4:	1a00777c 	.word	0x1a00777c

1a0003a8 <setWifiFlag>:
	return;
}

//Funcion para activar el flag para reconectar wifi
bool_t setWifiFlag()
{
1a0003a8:	b508      	push	{r3, lr}
	bool_t ret = false;
	if (xSemaphoreGive(wifiConnectSem))
1a0003aa:	2300      	movs	r3, #0
1a0003ac:	461a      	mov	r2, r3
1a0003ae:	4619      	mov	r1, r3
1a0003b0:	4802      	ldr	r0, [pc, #8]	; (1a0003bc <setWifiFlag+0x14>)
1a0003b2:	6800      	ldr	r0, [r0, #0]
1a0003b4:	f002 fcfa 	bl	1a002dac <xQueueGenericSend>
	{
		bool_t ret = true;
	}
	return ret;
}
1a0003b8:	2000      	movs	r0, #0
1a0003ba:	bd08      	pop	{r3, pc}
1a0003bc:	100063b8 	.word	0x100063b8

1a0003c0 <resetWifiFlag>:

//Funcion para desactivar el flag para reconectar wifi
bool_t resetWifiFlag()
{
1a0003c0:	b508      	push	{r3, lr}
	bool_t ret = false;
	if (xSemaphoreTake(wifiConnectSem, 0))
1a0003c2:	2100      	movs	r1, #0
1a0003c4:	4b02      	ldr	r3, [pc, #8]	; (1a0003d0 <resetWifiFlag+0x10>)
1a0003c6:	6818      	ldr	r0, [r3, #0]
1a0003c8:	f002 fed8 	bl	1a00317c <xQueueSemaphoreTake>
	{
		bool_t ret = true;
	}
	return ret;
}
1a0003cc:	2000      	movs	r0, #0
1a0003ce:	bd08      	pop	{r3, pc}
1a0003d0:	100063b8 	.word	0x100063b8

1a0003d4 <checkWifiChange>:

//Funcion para ver si hay que reconectar la red con nueva configuracion
bool_t checkWifiChange()
{
1a0003d4:	b508      	push	{r3, lr}
	bool_t ret = false;
	if (uxSemaphoreGetCount(wifiConnectSem))
1a0003d6:	4b03      	ldr	r3, [pc, #12]	; (1a0003e4 <checkWifiChange+0x10>)
1a0003d8:	6818      	ldr	r0, [r3, #0]
1a0003da:	f002 fff2 	bl	1a0033c2 <uxQueueMessagesWaiting>
1a0003de:	b100      	cbz	r0, 1a0003e2 <checkWifiChange+0xe>
	{
		ret = true;
1a0003e0:	2001      	movs	r0, #1
	}
	return ret;
}
1a0003e2:	bd08      	pop	{r3, pc}
1a0003e4:	100063b8 	.word	0x100063b8

1a0003e8 <espServerInit>:

void espServerInit()
{
1a0003e8:	b500      	push	{lr}
1a0003ea:	b083      	sub	sp, #12
	wifiConnectSem = xSemaphoreCreateBinary(); //Creo el semaforo que actua de flag para reconnectar la red WIFI
1a0003ec:	2203      	movs	r2, #3
1a0003ee:	2100      	movs	r1, #0
1a0003f0:	2001      	movs	r0, #1
1a0003f2:	f002 fcb4 	bl	1a002d5e <xQueueGenericCreate>
1a0003f6:	4b07      	ldr	r3, [pc, #28]	; (1a000414 <espServerInit+0x2c>)
1a0003f8:	6018      	str	r0, [r3, #0]
	//Creo la tarea del servidor
	xTaskCreate(server,                    // Function that implements the task.
1a0003fa:	2300      	movs	r3, #0
1a0003fc:	9301      	str	r3, [sp, #4]
1a0003fe:	2202      	movs	r2, #2
1a000400:	9200      	str	r2, [sp, #0]
1a000402:	22b4      	movs	r2, #180	; 0xb4
1a000404:	4904      	ldr	r1, [pc, #16]	; (1a000418 <espServerInit+0x30>)
1a000406:	4805      	ldr	r0, [pc, #20]	; (1a00041c <espServerInit+0x34>)
1a000408:	f003 fa83 	bl	1a003912 <xTaskCreate>
			configMINIMAL_STACK_SIZE * 2, // Stack size in words, not bytes.
			(void*) NULL,                     // Parameter passed into the task.
			tskIDLE_PRIORITY + 2,      // Priority at which the task is created.
			0                       // Pointer to the task created in the system
			);
}
1a00040c:	b003      	add	sp, #12
1a00040e:	f85d fb04 	ldr.w	pc, [sp], #4
1a000412:	bf00      	nop
1a000414:	100063b8 	.word	0x100063b8
1a000418:	1a00772c 	.word	0x1a00772c
1a00041c:	1a001169 	.word	0x1a001169

1a000420 <stringToInt>:

uint32_t stringToInt(char *str)
{
1a000420:	b570      	push	{r4, r5, r6, lr}
1a000422:	4606      	mov	r6, r0
	uint32_t i;
	uint32_t result;
	result = 0;
1a000424:	2500      	movs	r5, #0
	for (i = 0; i < (strlen(str)); i++)
1a000426:	462c      	mov	r4, r5
1a000428:	e000      	b.n	1a00042c <stringToInt+0xc>
1a00042a:	3401      	adds	r4, #1
1a00042c:	4630      	mov	r0, r6
1a00042e:	f006 fc52 	bl	1a006cd6 <strlen>
1a000432:	42a0      	cmp	r0, r4
1a000434:	d90b      	bls.n	1a00044e <stringToInt+0x2e>
	{
		if ((str[i] <= '9') && (str[i] >= '0'))
1a000436:	5d32      	ldrb	r2, [r6, r4]
1a000438:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
1a00043c:	b2db      	uxtb	r3, r3
1a00043e:	2b09      	cmp	r3, #9
1a000440:	d8f3      	bhi.n	1a00042a <stringToInt+0xa>
		{
			result = result * 10;
1a000442:	eb05 0585 	add.w	r5, r5, r5, lsl #2
1a000446:	006b      	lsls	r3, r5, #1
			result = result + (str[i] - '0');
1a000448:	18d5      	adds	r5, r2, r3
1a00044a:	3d30      	subs	r5, #48	; 0x30
1a00044c:	e7ed      	b.n	1a00042a <stringToInt+0xa>
		}
	}
	return result;
}
1a00044e:	4628      	mov	r0, r5
1a000450:	bd70      	pop	{r4, r5, r6, pc}
1a000452:	Address 0x000000001a000452 is out of bounds.


1a000454 <requestCallback>:
{
1a000454:	b570      	push	{r4, r5, r6, lr}
1a000456:	b088      	sub	sp, #32
	requestSeparate(rawReq, &methode, &request, &HTTPVersion);
1a000458:	4c7f      	ldr	r4, [pc, #508]	; (1a000658 <requestCallback+0x204>)
1a00045a:	4b80      	ldr	r3, [pc, #512]	; (1a00065c <requestCallback+0x208>)
1a00045c:	4a80      	ldr	r2, [pc, #512]	; (1a000660 <requestCallback+0x20c>)
1a00045e:	4621      	mov	r1, r4
1a000460:	f7ff ff84 	bl	1a00036c <requestSeparate>
	if (!strcmp(methode, "GET"))
1a000464:	6824      	ldr	r4, [r4, #0]
1a000466:	497f      	ldr	r1, [pc, #508]	; (1a000664 <requestCallback+0x210>)
1a000468:	4620      	mov	r0, r4
1a00046a:	f006 fc22 	bl	1a006cb2 <strcmp>
1a00046e:	2800      	cmp	r0, #0
1a000470:	d13e      	bne.n	1a0004f0 <requestCallback+0x9c>
		if (!strcmp(request, "/"))
1a000472:	4b7b      	ldr	r3, [pc, #492]	; (1a000660 <requestCallback+0x20c>)
1a000474:	681c      	ldr	r4, [r3, #0]
1a000476:	497c      	ldr	r1, [pc, #496]	; (1a000668 <requestCallback+0x214>)
1a000478:	4620      	mov	r0, r4
1a00047a:	f006 fc1a 	bl	1a006cb2 <strcmp>
1a00047e:	b148      	cbz	r0, 1a000494 <requestCallback+0x40>
			if (strstr(request, "/data"))
1a000480:	497a      	ldr	r1, [pc, #488]	; (1a00066c <requestCallback+0x218>)
1a000482:	4620      	mov	r0, r4
1a000484:	f006 fc2f 	bl	1a006ce6 <strstr>
1a000488:	b140      	cbz	r0, 1a00049c <requestCallback+0x48>
				requestAnswer = actualPageData;
1a00048a:	4b79      	ldr	r3, [pc, #484]	; (1a000670 <requestCallback+0x21c>)
1a00048c:	681a      	ldr	r2, [r3, #0]
1a00048e:	4b79      	ldr	r3, [pc, #484]	; (1a000674 <requestCallback+0x220>)
1a000490:	601a      	str	r2, [r3, #0]
1a000492:	e0df      	b.n	1a000654 <requestCallback+0x200>
			requestAnswer = HttpWebPage;
1a000494:	4b77      	ldr	r3, [pc, #476]	; (1a000674 <requestCallback+0x220>)
1a000496:	4a78      	ldr	r2, [pc, #480]	; (1a000678 <requestCallback+0x224>)
1a000498:	601a      	str	r2, [r3, #0]
1a00049a:	e0db      	b.n	1a000654 <requestCallback+0x200>
			else if (strstr(request, "/button"))
1a00049c:	4977      	ldr	r1, [pc, #476]	; (1a00067c <requestCallback+0x228>)
1a00049e:	4620      	mov	r0, r4
1a0004a0:	f006 fc21 	bl	1a006ce6 <strstr>
1a0004a4:	b118      	cbz	r0, 1a0004ae <requestCallback+0x5a>
				requestAnswer = ok;
1a0004a6:	4b73      	ldr	r3, [pc, #460]	; (1a000674 <requestCallback+0x220>)
1a0004a8:	4a75      	ldr	r2, [pc, #468]	; (1a000680 <requestCallback+0x22c>)
1a0004aa:	601a      	str	r2, [r3, #0]
1a0004ac:	e0d2      	b.n	1a000654 <requestCallback+0x200>
			else if (strstr(request, "/panel"))
1a0004ae:	4975      	ldr	r1, [pc, #468]	; (1a000684 <requestCallback+0x230>)
1a0004b0:	4620      	mov	r0, r4
1a0004b2:	f006 fc18 	bl	1a006ce6 <strstr>
1a0004b6:	b120      	cbz	r0, 1a0004c2 <requestCallback+0x6e>
				requestAnswer = actualPanel;
1a0004b8:	4b73      	ldr	r3, [pc, #460]	; (1a000688 <requestCallback+0x234>)
1a0004ba:	681a      	ldr	r2, [r3, #0]
1a0004bc:	4b6d      	ldr	r3, [pc, #436]	; (1a000674 <requestCallback+0x220>)
1a0004be:	601a      	str	r2, [r3, #0]
1a0004c0:	e0c8      	b.n	1a000654 <requestCallback+0x200>
			else if (strstr(request, "/body"))
1a0004c2:	4972      	ldr	r1, [pc, #456]	; (1a00068c <requestCallback+0x238>)
1a0004c4:	4620      	mov	r0, r4
1a0004c6:	f006 fc0e 	bl	1a006ce6 <strstr>
1a0004ca:	b118      	cbz	r0, 1a0004d4 <requestCallback+0x80>
				requestAnswer = HttpBody;
1a0004cc:	4b69      	ldr	r3, [pc, #420]	; (1a000674 <requestCallback+0x220>)
1a0004ce:	4a70      	ldr	r2, [pc, #448]	; (1a000690 <requestCallback+0x23c>)
1a0004d0:	601a      	str	r2, [r3, #0]
1a0004d2:	e0bf      	b.n	1a000654 <requestCallback+0x200>
			else if (strstr(request, "/save"))
1a0004d4:	496f      	ldr	r1, [pc, #444]	; (1a000694 <requestCallback+0x240>)
1a0004d6:	4620      	mov	r0, r4
1a0004d8:	f006 fc05 	bl	1a006ce6 <strstr>
1a0004dc:	b120      	cbz	r0, 1a0004e8 <requestCallback+0x94>
				requestAnswer = actualPageData;
1a0004de:	4b64      	ldr	r3, [pc, #400]	; (1a000670 <requestCallback+0x21c>)
1a0004e0:	681a      	ldr	r2, [r3, #0]
1a0004e2:	4b64      	ldr	r3, [pc, #400]	; (1a000674 <requestCallback+0x220>)
1a0004e4:	601a      	str	r2, [r3, #0]
1a0004e6:	e0b5      	b.n	1a000654 <requestCallback+0x200>
				requestAnswer = requestError;
1a0004e8:	4b62      	ldr	r3, [pc, #392]	; (1a000674 <requestCallback+0x220>)
1a0004ea:	4a6b      	ldr	r2, [pc, #428]	; (1a000698 <requestCallback+0x244>)
1a0004ec:	601a      	str	r2, [r3, #0]
1a0004ee:	e0b1      	b.n	1a000654 <requestCallback+0x200>
	else if (!strcmp(methode, "POST"))
1a0004f0:	496a      	ldr	r1, [pc, #424]	; (1a00069c <requestCallback+0x248>)
1a0004f2:	4620      	mov	r0, r4
1a0004f4:	f006 fbdd 	bl	1a006cb2 <strcmp>
1a0004f8:	2800      	cmp	r0, #0
1a0004fa:	f040 80a8 	bne.w	1a00064e <requestCallback+0x1fa>
		if (strstr(request, "/button$"))
1a0004fe:	4b58      	ldr	r3, [pc, #352]	; (1a000660 <requestCallback+0x20c>)
1a000500:	681c      	ldr	r4, [r3, #0]
1a000502:	4967      	ldr	r1, [pc, #412]	; (1a0006a0 <requestCallback+0x24c>)
1a000504:	4620      	mov	r0, r4
1a000506:	f006 fbee 	bl	1a006ce6 <strstr>
1a00050a:	2800      	cmp	r0, #0
1a00050c:	d035      	beq.n	1a00057a <requestCallback+0x126>
			auxpointer1 = strstr(request, "$"); //llego al primer signo $
1a00050e:	2124      	movs	r1, #36	; 0x24
1a000510:	4620      	mov	r0, r4
1a000512:	f006 fbc1 	bl	1a006c98 <strchr>
1a000516:	4604      	mov	r4, r0
1a000518:	4b62      	ldr	r3, [pc, #392]	; (1a0006a4 <requestCallback+0x250>)
1a00051a:	6018      	str	r0, [r3, #0]
			auxpointer1[0] = ' ';
1a00051c:	2320      	movs	r3, #32
1a00051e:	7003      	strb	r3, [r0, #0]
			auxpointer2 = strstr(request, "$");
1a000520:	2124      	movs	r1, #36	; 0x24
1a000522:	4b4f      	ldr	r3, [pc, #316]	; (1a000660 <requestCallback+0x20c>)
1a000524:	6818      	ldr	r0, [r3, #0]
1a000526:	f006 fbb7 	bl	1a006c98 <strchr>
1a00052a:	4b5f      	ldr	r3, [pc, #380]	; (1a0006a8 <requestCallback+0x254>)
1a00052c:	6018      	str	r0, [r3, #0]
			auxCommand.panelNum = (uint8_t) (auxpointer1[1] - '0'); //capturo el numero de panel
1a00052e:	7863      	ldrb	r3, [r4, #1]
1a000530:	3b30      	subs	r3, #48	; 0x30
1a000532:	f88d 3008 	strb.w	r3, [sp, #8]
			i = 1;
1a000536:	2401      	movs	r4, #1
			while ((i < 4) && (auxpointer2[i] != 0)) //
1a000538:	2c03      	cmp	r4, #3
1a00053a:	d811      	bhi.n	1a000560 <requestCallback+0x10c>
1a00053c:	4b5a      	ldr	r3, [pc, #360]	; (1a0006a8 <requestCallback+0x254>)
1a00053e:	681b      	ldr	r3, [r3, #0]
1a000540:	5d1b      	ldrb	r3, [r3, r4]
1a000542:	b16b      	cbz	r3, 1a000560 <requestCallback+0x10c>
				gpioToggle(LED1);
1a000544:	202b      	movs	r0, #43	; 0x2b
1a000546:	f005 fcae 	bl	1a005ea6 <gpioToggle>
				auxCommand.buttonId[i - 1] = auxpointer2[i];
1a00054a:	1e63      	subs	r3, r4, #1
1a00054c:	4a56      	ldr	r2, [pc, #344]	; (1a0006a8 <requestCallback+0x254>)
1a00054e:	6812      	ldr	r2, [r2, #0]
1a000550:	5d12      	ldrb	r2, [r2, r4]
1a000552:	a908      	add	r1, sp, #32
1a000554:	440b      	add	r3, r1
1a000556:	f803 2c17 	strb.w	r2, [r3, #-23]
				i++;
1a00055a:	3401      	adds	r4, #1
1a00055c:	b2a4      	uxth	r4, r4
1a00055e:	e7eb      	b.n	1a000538 <requestCallback+0xe4>
			sendCommand(auxCommand);
1a000560:	ab08      	add	r3, sp, #32
1a000562:	e913 0003 	ldmdb	r3, {r0, r1}
1a000566:	e88d 0003 	stmia.w	sp, {r0, r1}
1a00056a:	ab02      	add	r3, sp, #8
1a00056c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a00056e:	f002 f82d 	bl	1a0025cc <sendCommand>
			requestAnswer = ok;
1a000572:	4b40      	ldr	r3, [pc, #256]	; (1a000674 <requestCallback+0x220>)
1a000574:	4a42      	ldr	r2, [pc, #264]	; (1a000680 <requestCallback+0x22c>)
1a000576:	601a      	str	r2, [r3, #0]
1a000578:	e06c      	b.n	1a000654 <requestCallback+0x200>
			if (strstr(request, "/save$"))
1a00057a:	494c      	ldr	r1, [pc, #304]	; (1a0006ac <requestCallback+0x258>)
1a00057c:	4620      	mov	r0, r4
1a00057e:	f006 fbb2 	bl	1a006ce6 <strstr>
1a000582:	2800      	cmp	r0, #0
1a000584:	d05f      	beq.n	1a000646 <requestCallback+0x1f2>
				auxpointer1 = strstr(request, "$"); //llego al primer signo $
1a000586:	2124      	movs	r1, #36	; 0x24
1a000588:	4620      	mov	r0, r4
1a00058a:	f006 fb85 	bl	1a006c98 <strchr>
1a00058e:	4605      	mov	r5, r0
1a000590:	4b44      	ldr	r3, [pc, #272]	; (1a0006a4 <requestCallback+0x250>)
1a000592:	6018      	str	r0, [r3, #0]
				auxpointer1[0] = ' ';
1a000594:	2320      	movs	r3, #32
1a000596:	7003      	strb	r3, [r0, #0]
				auxpointer2 = strstr(request, "$");
1a000598:	4b31      	ldr	r3, [pc, #196]	; (1a000660 <requestCallback+0x20c>)
1a00059a:	681c      	ldr	r4, [r3, #0]
1a00059c:	2124      	movs	r1, #36	; 0x24
1a00059e:	4620      	mov	r0, r4
1a0005a0:	f006 fb7a 	bl	1a006c98 <strchr>
1a0005a4:	4b40      	ldr	r3, [pc, #256]	; (1a0006a8 <requestCallback+0x254>)
1a0005a6:	6018      	str	r0, [r3, #0]
				auxCommand.panelNum = (uint8_t) (auxpointer1[1] - '0'); //capturo el numero de panel
1a0005a8:	786b      	ldrb	r3, [r5, #1]
1a0005aa:	3b30      	subs	r3, #48	; 0x30
1a0005ac:	f88d 3008 	strb.w	r3, [sp, #8]
				i = 1;
1a0005b0:	2301      	movs	r3, #1
				while ((i < 4) && (auxpointer2[i] != 0)) //el modulo envia un espacio entre la uri y la version HTML
1a0005b2:	e006      	b.n	1a0005c2 <requestCallback+0x16e>
					auxCommand.buttonId[i - 1] = auxpointer2[i];
1a0005b4:	1e5a      	subs	r2, r3, #1
1a0005b6:	ad08      	add	r5, sp, #32
1a0005b8:	442a      	add	r2, r5
1a0005ba:	f802 1c17 	strb.w	r1, [r2, #-23]
					i++;
1a0005be:	3301      	adds	r3, #1
1a0005c0:	b29b      	uxth	r3, r3
				while ((i < 4) && (auxpointer2[i] != 0)) //el modulo envia un espacio entre la uri y la version HTML
1a0005c2:	2b03      	cmp	r3, #3
1a0005c4:	d802      	bhi.n	1a0005cc <requestCallback+0x178>
1a0005c6:	5cc1      	ldrb	r1, [r0, r3]
1a0005c8:	2900      	cmp	r1, #0
1a0005ca:	d1f3      	bne.n	1a0005b4 <requestCallback+0x160>
				auxpointer1 = strstr(request, "["); //busco el primer parametro
1a0005cc:	215b      	movs	r1, #91	; 0x5b
1a0005ce:	4620      	mov	r0, r4
1a0005d0:	f006 fb62 	bl	1a006c98 <strchr>
1a0005d4:	4b33      	ldr	r3, [pc, #204]	; (1a0006a4 <requestCallback+0x250>)
1a0005d6:	6018      	str	r0, [r3, #0]
				for (i = 0; i < 4; i++)
1a0005d8:	2400      	movs	r4, #0
1a0005da:	e01a      	b.n	1a000612 <requestCallback+0x1be>
						auxpointer2 = strstr(auxpointer1, "]"); //para el cuarto parametro busco un ]
1a0005dc:	215d      	movs	r1, #93	; 0x5d
1a0005de:	4b31      	ldr	r3, [pc, #196]	; (1a0006a4 <requestCallback+0x250>)
1a0005e0:	6818      	ldr	r0, [r3, #0]
1a0005e2:	f006 fb59 	bl	1a006c98 <strchr>
1a0005e6:	4b30      	ldr	r3, [pc, #192]	; (1a0006a8 <requestCallback+0x254>)
1a0005e8:	6018      	str	r0, [r3, #0]
					auxpointer2[0] = 0;
1a0005ea:	4b2f      	ldr	r3, [pc, #188]	; (1a0006a8 <requestCallback+0x254>)
1a0005ec:	681d      	ldr	r5, [r3, #0]
1a0005ee:	2300      	movs	r3, #0
1a0005f0:	702b      	strb	r3, [r5, #0]
					auxCommand.parameters[i] = stringToInt(&auxpointer1[1]);
1a0005f2:	4e2c      	ldr	r6, [pc, #176]	; (1a0006a4 <requestCallback+0x250>)
1a0005f4:	6830      	ldr	r0, [r6, #0]
1a0005f6:	3001      	adds	r0, #1
1a0005f8:	f7ff ff12 	bl	1a000420 <stringToInt>
1a0005fc:	1ca3      	adds	r3, r4, #2
1a0005fe:	aa08      	add	r2, sp, #32
1a000600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a000604:	f843 0c18 	str.w	r0, [r3, #-24]
					auxpointer2[0] = ' ';
1a000608:	2320      	movs	r3, #32
1a00060a:	702b      	strb	r3, [r5, #0]
					auxpointer1 = auxpointer2;
1a00060c:	6035      	str	r5, [r6, #0]
				for (i = 0; i < 4; i++)
1a00060e:	3401      	adds	r4, #1
1a000610:	b2a4      	uxth	r4, r4
1a000612:	2c03      	cmp	r4, #3
1a000614:	d809      	bhi.n	1a00062a <requestCallback+0x1d6>
					if (i == 3)
1a000616:	2c03      	cmp	r4, #3
1a000618:	d0e0      	beq.n	1a0005dc <requestCallback+0x188>
						auxpointer2 = strstr(auxpointer1, ","); //busco una coma y la reemplazo por 0
1a00061a:	212c      	movs	r1, #44	; 0x2c
1a00061c:	4b21      	ldr	r3, [pc, #132]	; (1a0006a4 <requestCallback+0x250>)
1a00061e:	6818      	ldr	r0, [r3, #0]
1a000620:	f006 fb3a 	bl	1a006c98 <strchr>
1a000624:	4b20      	ldr	r3, [pc, #128]	; (1a0006a8 <requestCallback+0x254>)
1a000626:	6018      	str	r0, [r3, #0]
1a000628:	e7df      	b.n	1a0005ea <requestCallback+0x196>
				sendCommand(auxCommand);
1a00062a:	ab08      	add	r3, sp, #32
1a00062c:	e913 0003 	ldmdb	r3, {r0, r1}
1a000630:	e88d 0003 	stmia.w	sp, {r0, r1}
1a000634:	ab02      	add	r3, sp, #8
1a000636:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a000638:	f001 ffc8 	bl	1a0025cc <sendCommand>
				requestAnswer = actualPageData;
1a00063c:	4b0c      	ldr	r3, [pc, #48]	; (1a000670 <requestCallback+0x21c>)
1a00063e:	681a      	ldr	r2, [r3, #0]
1a000640:	4b0c      	ldr	r3, [pc, #48]	; (1a000674 <requestCallback+0x220>)
1a000642:	601a      	str	r2, [r3, #0]
1a000644:	e006      	b.n	1a000654 <requestCallback+0x200>
				requestAnswer = requestError;
1a000646:	4b0b      	ldr	r3, [pc, #44]	; (1a000674 <requestCallback+0x220>)
1a000648:	4a13      	ldr	r2, [pc, #76]	; (1a000698 <requestCallback+0x244>)
1a00064a:	601a      	str	r2, [r3, #0]
1a00064c:	e002      	b.n	1a000654 <requestCallback+0x200>
		requestAnswer = requestError;
1a00064e:	4b09      	ldr	r3, [pc, #36]	; (1a000674 <requestCallback+0x220>)
1a000650:	4a11      	ldr	r2, [pc, #68]	; (1a000698 <requestCallback+0x244>)
1a000652:	601a      	str	r2, [r3, #0]
}
1a000654:	b008      	add	sp, #32
1a000656:	bd70      	pop	{r4, r5, r6, pc}
1a000658:	10001e04 	.word	0x10001e04
1a00065c:	10001d88 	.word	0x10001d88
1a000660:	10001f0c 	.word	0x10001f0c
1a000664:	1a007734 	.word	0x1a007734
1a000668:	1a007780 	.word	0x1a007780
1a00066c:	1a007738 	.word	0x1a007738
1a000670:	1000656c 	.word	0x1000656c
1a000674:	10006200 	.word	0x10006200
1a000678:	100005f4 	.word	0x100005f4
1a00067c:	1a007740 	.word	0x1a007740
1a000680:	10000dc0 	.word	0x10000dc0
1a000684:	1a007748 	.word	0x1a007748
1a000688:	10006568 	.word	0x10006568
1a00068c:	1a007750 	.word	0x1a007750
1a000690:	10000000 	.word	0x10000000
1a000694:	1a007758 	.word	0x1a007758
1a000698:	10001c18 	.word	0x10001c18
1a00069c:	1a007760 	.word	0x1a007760
1a0006a0:	1a007768 	.word	0x1a007768
1a0006a4:	10001df4 	.word	0x10001df4
1a0006a8:	10001df8 	.word	0x10001df8
1a0006ac:	1a007774 	.word	0x1a007774

1a0006b0 <ExcecuteHttpServerFsm>:
{
1a0006b0:	b510      	push	{r4, lr}
	UARTEsp.uartValue = ESP8266_UART;
1a0006b2:	4bad      	ldr	r3, [pc, #692]	; (1a000968 <ExcecuteHttpServerFsm+0x2b8>)
1a0006b4:	2205      	movs	r2, #5
1a0006b6:	701a      	strb	r2, [r3, #0]
	UARTEsp.baudRate = ESP8266_BAUD_RATE;
1a0006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a0006bc:	605a      	str	r2, [r3, #4]
	switch (Esp8266Status)
1a0006be:	4bab      	ldr	r3, [pc, #684]	; (1a00096c <ExcecuteHttpServerFsm+0x2bc>)
1a0006c0:	781b      	ldrb	r3, [r3, #0]
1a0006c2:	2b35      	cmp	r3, #53	; 0x35
1a0006c4:	d843      	bhi.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
1a0006c6:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0006ca:	0036      	.short	0x0036
1a0006cc:	005c0043 	.word	0x005c0043
1a0006d0:	00910078 	.word	0x00910078
1a0006d4:	00fd00e3 	.word	0x00fd00e3
1a0006d8:	01340117 	.word	0x01340117
1a0006dc:	01800163 	.word	0x01800163
1a0006e0:	01b6019c 	.word	0x01b6019c
1a0006e4:	01e701d0 	.word	0x01e701d0
1a0006e8:	00420202 	.word	0x00420202
1a0006ec:	00420042 	.word	0x00420042
1a0006f0:	00420042 	.word	0x00420042
1a0006f4:	00420042 	.word	0x00420042
1a0006f8:	00420042 	.word	0x00420042
1a0006fc:	02360219 	.word	0x02360219
1a000700:	02bc02a2 	.word	0x02bc02a2
1a000704:	00420042 	.word	0x00420042
1a000708:	00420042 	.word	0x00420042
1a00070c:	040203d9 	.word	0x040203d9
1a000710:	042f0422 	.word	0x042f0422
1a000714:	04c90042 	.word	0x04c90042
1a000718:	04910451 	.word	0x04910451
1a00071c:	031102f7 	.word	0x031102f7
1a000720:	00ad032b 	.word	0x00ad032b
1a000724:	034a00c6 	.word	0x034a00c6
1a000728:	03780361 	.word	0x03780361
1a00072c:	03b50392 	.word	0x03b50392
1a000730:	027d0260 	.word	0x027d0260
1a000734:	04b4      	.short	0x04b4
		if (UARTEspInit(&UARTEsp) == false)
1a000736:	488c      	ldr	r0, [pc, #560]	; (1a000968 <ExcecuteHttpServerFsm+0x2b8>)
1a000738:	f000 fdd8 	bl	1a0012ec <UARTEspInit>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00073c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000740:	2300      	movs	r3, #0
1a000742:	488b      	ldr	r0, [pc, #556]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000744:	f005 fbfe 	bl	1a005f44 <delayInit>
		SetEsp8622Status(ESP_SEND_RESET);
1a000748:	2001      	movs	r0, #1
1a00074a:	f7ff fdd9 	bl	1a000300 <SetEsp8622Status>
}
1a00074e:	bd10      	pop	{r4, pc}
		vTaskDelay(10);
1a000750:	200a      	movs	r0, #10
1a000752:	f003 fa6f 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000756:	4886      	ldr	r0, [pc, #536]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000758:	f005 fc04 	bl	1a005f64 <delayRead>
1a00075c:	2800      	cmp	r0, #0
1a00075e:	d0f6      	beq.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+RST\r\n");
1a000760:	4984      	ldr	r1, [pc, #528]	; (1a000974 <ExcecuteHttpServerFsm+0x2c4>)
1a000762:	2005      	movs	r0, #5
1a000764:	f005 fd8c 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000768:	4b83      	ldr	r3, [pc, #524]	; (1a000978 <ExcecuteHttpServerFsm+0x2c8>)
1a00076a:	4a84      	ldr	r2, [pc, #528]	; (1a00097c <ExcecuteHttpServerFsm+0x2cc>)
1a00076c:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a00076e:	f242 7210 	movw	r2, #10000	; 0x2710
1a000772:	2300      	movs	r3, #0
1a000774:	487e      	ldr	r0, [pc, #504]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000776:	f005 fbe5 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_RESET);
1a00077a:	2002      	movs	r0, #2
1a00077c:	f7ff fdc0 	bl	1a000300 <SetEsp8622Status>
1a000780:	e7e5      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000782:	f7ff fdc3 	bl	1a00030c <IsWaitedResponse>
1a000786:	b970      	cbnz	r0, 1a0007a6 <ExcecuteHttpServerFsm+0xf6>
		if (delayRead(&Esp8266Delay))
1a000788:	4879      	ldr	r0, [pc, #484]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00078a:	f005 fbeb 	bl	1a005f64 <delayRead>
1a00078e:	2800      	cmp	r0, #0
1a000790:	d0dd      	beq.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000792:	f241 3288 	movw	r2, #5000	; 0x1388
1a000796:	2300      	movs	r3, #0
1a000798:	4875      	ldr	r0, [pc, #468]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00079a:	f005 fbd3 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_RESET);
1a00079e:	2001      	movs	r0, #1
1a0007a0:	f7ff fdae 	bl	1a000300 <SetEsp8622Status>
1a0007a4:	e7d3      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007a6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0007aa:	2300      	movs	r3, #0
1a0007ac:	4870      	ldr	r0, [pc, #448]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0007ae:	f005 fbc9 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0007b2:	2003      	movs	r0, #3
1a0007b4:	f7ff fda4 	bl	1a000300 <SetEsp8622Status>
1a0007b8:	e7e6      	b.n	1a000788 <ExcecuteHttpServerFsm+0xd8>
		vTaskDelay(10);
1a0007ba:	200a      	movs	r0, #10
1a0007bc:	f003 fa3a 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a0007c0:	486b      	ldr	r0, [pc, #428]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0007c2:	f005 fbcf 	bl	1a005f64 <delayRead>
1a0007c6:	2800      	cmp	r0, #0
1a0007c8:	d0c1      	beq.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT\r\n");	//AT para ver si esta vivo
1a0007ca:	496d      	ldr	r1, [pc, #436]	; (1a000980 <ExcecuteHttpServerFsm+0x2d0>)
1a0007cc:	2005      	movs	r0, #5
1a0007ce:	f005 fd57 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a0007d2:	4b69      	ldr	r3, [pc, #420]	; (1a000978 <ExcecuteHttpServerFsm+0x2c8>)
1a0007d4:	4a69      	ldr	r2, [pc, #420]	; (1a00097c <ExcecuteHttpServerFsm+0x2cc>)
1a0007d6:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0007d8:	f242 7210 	movw	r2, #10000	; 0x2710
1a0007dc:	2300      	movs	r3, #0
1a0007de:	4864      	ldr	r0, [pc, #400]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0007e0:	f005 fbb0 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_AT);
1a0007e4:	2004      	movs	r0, #4
1a0007e6:	f7ff fd8b 	bl	1a000300 <SetEsp8622Status>
1a0007ea:	e7b0      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a0007ec:	f7ff fd8e 	bl	1a00030c <IsWaitedResponse>
1a0007f0:	b970      	cbnz	r0, 1a000810 <ExcecuteHttpServerFsm+0x160>
		if (delayRead(&Esp8266Delay))
1a0007f2:	485f      	ldr	r0, [pc, #380]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0007f4:	f005 fbb6 	bl	1a005f64 <delayRead>
1a0007f8:	2800      	cmp	r0, #0
1a0007fa:	d0a8      	beq.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0007fc:	f241 3288 	movw	r2, #5000	; 0x1388
1a000800:	2300      	movs	r3, #0
1a000802:	485b      	ldr	r0, [pc, #364]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000804:	f005 fb9e 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000808:	2003      	movs	r0, #3
1a00080a:	f7ff fd79 	bl	1a000300 <SetEsp8622Status>
1a00080e:	e79e      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000810:	f241 3288 	movw	r2, #5000	; 0x1388
1a000814:	2300      	movs	r3, #0
1a000816:	4856      	ldr	r0, [pc, #344]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000818:	f005 fb94 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE_SET);
1a00081c:	2008      	movs	r0, #8
1a00081e:	f7ff fd6f 	bl	1a000300 <SetEsp8622Status>
1a000822:	e7e6      	b.n	1a0007f2 <ExcecuteHttpServerFsm+0x142>
		vTaskDelay(10);
1a000824:	200a      	movs	r0, #10
1a000826:	f003 fa05 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a00082a:	4851      	ldr	r0, [pc, #324]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00082c:	f005 fb9a 	bl	1a005f64 <delayRead>
1a000830:	2800      	cmp	r0, #0
1a000832:	d08c      	beq.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");	//
1a000834:	4953      	ldr	r1, [pc, #332]	; (1a000984 <ExcecuteHttpServerFsm+0x2d4>)
1a000836:	2005      	movs	r0, #5
1a000838:	f005 fd22 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00083c:	4b4e      	ldr	r3, [pc, #312]	; (1a000978 <ExcecuteHttpServerFsm+0x2c8>)
1a00083e:	4a4f      	ldr	r2, [pc, #316]	; (1a00097c <ExcecuteHttpServerFsm+0x2cc>)
1a000840:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000842:	f242 7210 	movw	r2, #10000	; 0x2710
1a000846:	2300      	movs	r3, #0
1a000848:	4849      	ldr	r0, [pc, #292]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00084a:	f005 fb7b 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWMODE);
1a00084e:	202d      	movs	r0, #45	; 0x2d
1a000850:	f7ff fd56 	bl	1a000300 <SetEsp8622Status>
1a000854:	e77b      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000856:	f7ff fd59 	bl	1a00030c <IsWaitedResponse>
1a00085a:	b978      	cbnz	r0, 1a00087c <ExcecuteHttpServerFsm+0x1cc>
		if (delayRead(&Esp8266Delay))
1a00085c:	4844      	ldr	r0, [pc, #272]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00085e:	f005 fb81 	bl	1a005f64 <delayRead>
1a000862:	2800      	cmp	r0, #0
1a000864:	f43f af73 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000868:	f241 3288 	movw	r2, #5000	; 0x1388
1a00086c:	2300      	movs	r3, #0
1a00086e:	4840      	ldr	r0, [pc, #256]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000870:	f005 fb68 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE);
1a000874:	202c      	movs	r0, #44	; 0x2c
1a000876:	f7ff fd43 	bl	1a000300 <SetEsp8622Status>
1a00087a:	e768      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00087c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000880:	2300      	movs	r3, #0
1a000882:	483b      	ldr	r0, [pc, #236]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000884:	f005 fb5e 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CWJAP_CONS);
1a000888:	2005      	movs	r0, #5
1a00088a:	f7ff fd39 	bl	1a000300 <SetEsp8622Status>
1a00088e:	e7e5      	b.n	1a00085c <ExcecuteHttpServerFsm+0x1ac>
		vTaskDelay(10);
1a000890:	200a      	movs	r0, #10
1a000892:	f003 f9cf 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000896:	4836      	ldr	r0, [pc, #216]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000898:	f005 fb64 	bl	1a005f64 <delayRead>
1a00089c:	2800      	cmp	r0, #0
1a00089e:	f43f af56 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CWJAP?\r\n");
1a0008a2:	4939      	ldr	r1, [pc, #228]	; (1a000988 <ExcecuteHttpServerFsm+0x2d8>)
1a0008a4:	2005      	movs	r0, #5
1a0008a6:	f005 fceb 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_OK;
1a0008aa:	4b33      	ldr	r3, [pc, #204]	; (1a000978 <ExcecuteHttpServerFsm+0x2c8>)
1a0008ac:	4a37      	ldr	r2, [pc, #220]	; (1a00098c <ExcecuteHttpServerFsm+0x2dc>)
1a0008ae:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0008b0:	f242 7210 	movw	r2, #10000	; 0x2710
1a0008b4:	2300      	movs	r3, #0
1a0008b6:	482e      	ldr	r0, [pc, #184]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0008b8:	f005 fb44 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_1);
1a0008bc:	2006      	movs	r0, #6
1a0008be:	f7ff fd1f 	bl	1a000300 <SetEsp8622Status>
1a0008c2:	e744      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a0008c4:	f7ff fd22 	bl	1a00030c <IsWaitedResponse>
1a0008c8:	b978      	cbnz	r0, 1a0008ea <ExcecuteHttpServerFsm+0x23a>
		if (delayRead(&Esp8266Delay))
1a0008ca:	4829      	ldr	r0, [pc, #164]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0008cc:	f005 fb4a 	bl	1a005f64 <delayRead>
1a0008d0:	2800      	cmp	r0, #0
1a0008d2:	f43f af3c 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0008d6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0008da:	2300      	movs	r3, #0
1a0008dc:	4824      	ldr	r0, [pc, #144]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a0008de:	f005 fb31 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE_SET);
1a0008e2:	2008      	movs	r0, #8
1a0008e4:	f7ff fd0c 	bl	1a000300 <SetEsp8622Status>
1a0008e8:	e731      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			Esp8266ResponseToWait = Response_OK;
1a0008ea:	4b23      	ldr	r3, [pc, #140]	; (1a000978 <ExcecuteHttpServerFsm+0x2c8>)
1a0008ec:	4a23      	ldr	r2, [pc, #140]	; (1a00097c <ExcecuteHttpServerFsm+0x2cc>)
1a0008ee:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_CONS_2);
1a0008f0:	2007      	movs	r0, #7
1a0008f2:	f7ff fd05 	bl	1a000300 <SetEsp8622Status>
1a0008f6:	e7e8      	b.n	1a0008ca <ExcecuteHttpServerFsm+0x21a>
		if (IsWaitedResponse())
1a0008f8:	f7ff fd08 	bl	1a00030c <IsWaitedResponse>
1a0008fc:	b978      	cbnz	r0, 1a00091e <ExcecuteHttpServerFsm+0x26e>
		if (delayRead(&Esp8266Delay))
1a0008fe:	481c      	ldr	r0, [pc, #112]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000900:	f005 fb30 	bl	1a005f64 <delayRead>
1a000904:	2800      	cmp	r0, #0
1a000906:	f43f af22 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00090a:	f241 3288 	movw	r2, #5000	; 0x1388
1a00090e:	2300      	movs	r3, #0
1a000910:	4817      	ldr	r0, [pc, #92]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000912:	f005 fb17 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000916:	2003      	movs	r0, #3
1a000918:	f7ff fcf2 	bl	1a000300 <SetEsp8622Status>
1a00091c:	e717      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00091e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000922:	2300      	movs	r3, #0
1a000924:	4812      	ldr	r0, [pc, #72]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a000926:	f005 fb0d 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CWMODE_SET);
1a00092a:	2008      	movs	r0, #8
1a00092c:	f7ff fce8 	bl	1a000300 <SetEsp8622Status>
1a000930:	e7e5      	b.n	1a0008fe <ExcecuteHttpServerFsm+0x24e>
		vTaskDelay(10);
1a000932:	200a      	movs	r0, #10
1a000934:	f003 f97e 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000938:	480d      	ldr	r0, [pc, #52]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00093a:	f005 fb13 	bl	1a005f64 <delayRead>
1a00093e:	2800      	cmp	r0, #0
1a000940:	f43f af05 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CWMODE=3\r\n");
1a000944:	490f      	ldr	r1, [pc, #60]	; (1a000984 <ExcecuteHttpServerFsm+0x2d4>)
1a000946:	2005      	movs	r0, #5
1a000948:	f005 fc9a 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a00094c:	4b0a      	ldr	r3, [pc, #40]	; (1a000978 <ExcecuteHttpServerFsm+0x2c8>)
1a00094e:	4a0b      	ldr	r2, [pc, #44]	; (1a00097c <ExcecuteHttpServerFsm+0x2cc>)
1a000950:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000952:	f242 7210 	movw	r2, #10000	; 0x2710
1a000956:	2300      	movs	r3, #0
1a000958:	4805      	ldr	r0, [pc, #20]	; (1a000970 <ExcecuteHttpServerFsm+0x2c0>)
1a00095a:	f005 faf3 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWMODE_SET);
1a00095e:	2009      	movs	r0, #9
1a000960:	f7ff fcce 	bl	1a000300 <SetEsp8622Status>
1a000964:	e6f3      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
1a000966:	bf00      	nop
1a000968:	10001d90 	.word	0x10001d90
1a00096c:	10001d84 	.word	0x10001d84
1a000970:	10001d68 	.word	0x10001d68
1a000974:	1a0075a0 	.word	0x1a0075a0
1a000978:	10001d80 	.word	0x10001d80
1a00097c:	1a007720 	.word	0x1a007720
1a000980:	1a0075ac 	.word	0x1a0075ac
1a000984:	1a0075b4 	.word	0x1a0075b4
1a000988:	1a0075c4 	.word	0x1a0075c4
1a00098c:	1a007710 	.word	0x1a007710
		if (IsWaitedResponse())
1a000990:	f7ff fcbc 	bl	1a00030c <IsWaitedResponse>
1a000994:	b978      	cbnz	r0, 1a0009b6 <ExcecuteHttpServerFsm+0x306>
		if (delayRead(&Esp8266Delay))
1a000996:	48b9      	ldr	r0, [pc, #740]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000998:	f005 fae4 	bl	1a005f64 <delayRead>
1a00099c:	2800      	cmp	r0, #0
1a00099e:	f43f aed6 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009a2:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009a6:	2300      	movs	r3, #0
1a0009a8:	48b4      	ldr	r0, [pc, #720]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a0009aa:	f005 facb 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a0009ae:	2003      	movs	r0, #3
1a0009b0:	f7ff fca6 	bl	1a000300 <SetEsp8622Status>
1a0009b4:	e6cb      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a0009b6:	f241 3288 	movw	r2, #5000	; 0x1388
1a0009ba:	2300      	movs	r3, #0
1a0009bc:	48af      	ldr	r0, [pc, #700]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a0009be:	f005 fac1 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CWJAP_SET);
1a0009c2:	200a      	movs	r0, #10
1a0009c4:	f7ff fc9c 	bl	1a000300 <SetEsp8622Status>
1a0009c8:	e7e5      	b.n	1a000996 <ExcecuteHttpServerFsm+0x2e6>
		vTaskDelay(10);
1a0009ca:	200a      	movs	r0, #10
1a0009cc:	f003 f932 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a0009d0:	48aa      	ldr	r0, [pc, #680]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a0009d2:	f005 fac7 	bl	1a005f64 <delayRead>
1a0009d6:	2800      	cmp	r0, #0
1a0009d8:	f43f aeb9 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CWJAP=\"%s\",\"%s\"\r\n", WifiName,
1a0009dc:	4ba8      	ldr	r3, [pc, #672]	; (1a000c80 <ExcecuteHttpServerFsm+0x5d0>)
1a0009de:	4aa9      	ldr	r2, [pc, #676]	; (1a000c84 <ExcecuteHttpServerFsm+0x5d4>)
1a0009e0:	49a9      	ldr	r1, [pc, #676]	; (1a000c88 <ExcecuteHttpServerFsm+0x5d8>)
1a0009e2:	2005      	movs	r0, #5
1a0009e4:	f005 fc4c 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_CWJAP_1;
1a0009e8:	4ba8      	ldr	r3, [pc, #672]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a0009ea:	4aa9      	ldr	r2, [pc, #676]	; (1a000c90 <ExcecuteHttpServerFsm+0x5e0>)
1a0009ec:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a0009ee:	f242 7210 	movw	r2, #10000	; 0x2710
1a0009f2:	2300      	movs	r3, #0
1a0009f4:	48a1      	ldr	r0, [pc, #644]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a0009f6:	f005 faa5 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_1);
1a0009fa:	200b      	movs	r0, #11
1a0009fc:	f7ff fc80 	bl	1a000300 <SetEsp8622Status>
1a000a00:	e6a5      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000a02:	f7ff fc83 	bl	1a00030c <IsWaitedResponse>
1a000a06:	b978      	cbnz	r0, 1a000a28 <ExcecuteHttpServerFsm+0x378>
		if (delayRead(&Esp8266Delay))
1a000a08:	489c      	ldr	r0, [pc, #624]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000a0a:	f005 faab 	bl	1a005f64 <delayRead>
1a000a0e:	2800      	cmp	r0, #0
1a000a10:	f43f ae9d 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a14:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a18:	2300      	movs	r3, #0
1a000a1a:	4898      	ldr	r0, [pc, #608]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000a1c:	f005 fa92 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000a20:	2003      	movs	r0, #3
1a000a22:	f7ff fc6d 	bl	1a000300 <SetEsp8622Status>
1a000a26:	e692      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			Esp8266ResponseToWait = Response_CWJAP_2;
1a000a28:	4b98      	ldr	r3, [pc, #608]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a000a2a:	4a9a      	ldr	r2, [pc, #616]	; (1a000c94 <ExcecuteHttpServerFsm+0x5e4>)
1a000a2c:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_2);
1a000a2e:	200c      	movs	r0, #12
1a000a30:	f7ff fc66 	bl	1a000300 <SetEsp8622Status>
1a000a34:	e7e8      	b.n	1a000a08 <ExcecuteHttpServerFsm+0x358>
		if (IsWaitedResponse())
1a000a36:	f7ff fc69 	bl	1a00030c <IsWaitedResponse>
1a000a3a:	b978      	cbnz	r0, 1a000a5c <ExcecuteHttpServerFsm+0x3ac>
		if (delayRead(&Esp8266Delay))
1a000a3c:	488f      	ldr	r0, [pc, #572]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000a3e:	f005 fa91 	bl	1a005f64 <delayRead>
1a000a42:	2800      	cmp	r0, #0
1a000a44:	f43f ae83 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a48:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a4c:	2300      	movs	r3, #0
1a000a4e:	488b      	ldr	r0, [pc, #556]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000a50:	f005 fa78 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000a54:	2003      	movs	r0, #3
1a000a56:	f7ff fc53 	bl	1a000300 <SetEsp8622Status>
1a000a5a:	e678      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			Esp8266ResponseToWait = Response_OK;
1a000a5c:	4b8b      	ldr	r3, [pc, #556]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a000a5e:	4a8e      	ldr	r2, [pc, #568]	; (1a000c98 <ExcecuteHttpServerFsm+0x5e8>)
1a000a60:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_CWJAP_SET_3);
1a000a62:	200d      	movs	r0, #13
1a000a64:	f7ff fc4c 	bl	1a000300 <SetEsp8622Status>
1a000a68:	e7e8      	b.n	1a000a3c <ExcecuteHttpServerFsm+0x38c>
		if (IsWaitedResponse())
1a000a6a:	f7ff fc4f 	bl	1a00030c <IsWaitedResponse>
1a000a6e:	b978      	cbnz	r0, 1a000a90 <ExcecuteHttpServerFsm+0x3e0>
		if (delayRead(&Esp8266Delay))
1a000a70:	4882      	ldr	r0, [pc, #520]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000a72:	f005 fa77 	bl	1a005f64 <delayRead>
1a000a76:	2800      	cmp	r0, #0
1a000a78:	f43f ae69 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000a7c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000a80:	2300      	movs	r3, #0
1a000a82:	487e      	ldr	r0, [pc, #504]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000a84:	f005 fa5e 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000a88:	2003      	movs	r0, #3
1a000a8a:	f7ff fc39 	bl	1a000300 <SetEsp8622Status>
1a000a8e:	e65e      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			SetEsp8622Status(ESP_SEND_STA_SET);
1a000a90:	200e      	movs	r0, #14
1a000a92:	f7ff fc35 	bl	1a000300 <SetEsp8622Status>
1a000a96:	e7eb      	b.n	1a000a70 <ExcecuteHttpServerFsm+0x3c0>
		vTaskDelay(10);
1a000a98:	200a      	movs	r0, #10
1a000a9a:	f003 f8cb 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000a9e:	4877      	ldr	r0, [pc, #476]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000aa0:	f005 fa60 	bl	1a005f64 <delayRead>
1a000aa4:	2800      	cmp	r0, #0
1a000aa6:	f43f ae52 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CIPSTA=\"%s\"\r\n", WifiIp);
1a000aaa:	4a7c      	ldr	r2, [pc, #496]	; (1a000c9c <ExcecuteHttpServerFsm+0x5ec>)
1a000aac:	497c      	ldr	r1, [pc, #496]	; (1a000ca0 <ExcecuteHttpServerFsm+0x5f0>)
1a000aae:	2005      	movs	r0, #5
1a000ab0:	f005 fbe6 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000ab4:	4b75      	ldr	r3, [pc, #468]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a000ab6:	4a78      	ldr	r2, [pc, #480]	; (1a000c98 <ExcecuteHttpServerFsm+0x5e8>)
1a000ab8:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000aba:	f242 7210 	movw	r2, #10000	; 0x2710
1a000abe:	2300      	movs	r3, #0
1a000ac0:	486e      	ldr	r0, [pc, #440]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000ac2:	f005 fa3f 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_STA_SET);
1a000ac6:	200f      	movs	r0, #15
1a000ac8:	f7ff fc1a 	bl	1a000300 <SetEsp8622Status>
1a000acc:	e63f      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000ace:	f7ff fc1d 	bl	1a00030c <IsWaitedResponse>
1a000ad2:	b978      	cbnz	r0, 1a000af4 <ExcecuteHttpServerFsm+0x444>
		if (delayRead(&Esp8266Delay))
1a000ad4:	4869      	ldr	r0, [pc, #420]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000ad6:	f005 fa45 	bl	1a005f64 <delayRead>
1a000ada:	2800      	cmp	r0, #0
1a000adc:	f43f ae37 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
1a000ae4:	2300      	movs	r3, #0
1a000ae6:	4865      	ldr	r0, [pc, #404]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000ae8:	f005 fa2c 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000aec:	2003      	movs	r0, #3
1a000aee:	f7ff fc07 	bl	1a000300 <SetEsp8622Status>
1a000af2:	e62c      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			SetEsp8622Status(ESP_CIPMUX_SEND);
1a000af4:	2019      	movs	r0, #25
1a000af6:	f7ff fc03 	bl	1a000300 <SetEsp8622Status>
1a000afa:	e7eb      	b.n	1a000ad4 <ExcecuteHttpServerFsm+0x424>
		vTaskDelay(10);
1a000afc:	200a      	movs	r0, #10
1a000afe:	f003 f899 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000b02:	485e      	ldr	r0, [pc, #376]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000b04:	f005 fa2e 	bl	1a005f64 <delayRead>
1a000b08:	2800      	cmp	r0, #0
1a000b0a:	f43f ae20 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CIPMUX=1\r\n");
1a000b0e:	4965      	ldr	r1, [pc, #404]	; (1a000ca4 <ExcecuteHttpServerFsm+0x5f4>)
1a000b10:	2005      	movs	r0, #5
1a000b12:	f005 fbb5 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000b16:	4b5d      	ldr	r3, [pc, #372]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a000b18:	4a5f      	ldr	r2, [pc, #380]	; (1a000c98 <ExcecuteHttpServerFsm+0x5e8>)
1a000b1a:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000b1c:	f242 7210 	movw	r2, #10000	; 0x2710
1a000b20:	2300      	movs	r3, #0
1a000b22:	4856      	ldr	r0, [pc, #344]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000b24:	f005 fa0e 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPMUX);
1a000b28:	201a      	movs	r0, #26
1a000b2a:	f7ff fbe9 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a000b2e:	4b5e      	ldr	r3, [pc, #376]	; (1a000ca8 <ExcecuteHttpServerFsm+0x5f8>)
1a000b30:	2200      	movs	r2, #0
1a000b32:	701a      	strb	r2, [r3, #0]
1a000b34:	e60b      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000b36:	f7ff fbe9 	bl	1a00030c <IsWaitedResponse>
1a000b3a:	b9e0      	cbnz	r0, 1a000b76 <ExcecuteHttpServerFsm+0x4c6>
		if (delayRead(&Esp8266Delay))
1a000b3c:	484f      	ldr	r0, [pc, #316]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000b3e:	f005 fa11 	bl	1a005f64 <delayRead>
1a000b42:	2800      	cmp	r0, #0
1a000b44:	f43f ae03 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b48:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b4c:	2300      	movs	r3, #0
1a000b4e:	484b      	ldr	r0, [pc, #300]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000b50:	f005 f9f8 	bl	1a005f44 <delayInit>
			stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%d\r\n", auxIndex);
1a000b54:	4c54      	ldr	r4, [pc, #336]	; (1a000ca8 <ExcecuteHttpServerFsm+0x5f8>)
1a000b56:	7822      	ldrb	r2, [r4, #0]
1a000b58:	4954      	ldr	r1, [pc, #336]	; (1a000cac <ExcecuteHttpServerFsm+0x5fc>)
1a000b5a:	2005      	movs	r0, #5
1a000b5c:	f005 fb90 	bl	1a006280 <stdioPrintf>
			if (++auxIndex >= 4)
1a000b60:	7823      	ldrb	r3, [r4, #0]
1a000b62:	3301      	adds	r3, #1
1a000b64:	b2db      	uxtb	r3, r3
1a000b66:	7023      	strb	r3, [r4, #0]
1a000b68:	2b03      	cmp	r3, #3
1a000b6a:	f67f adf0 	bls.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
				SetEsp8622Status(ESP_CIPMUX_SEND);
1a000b6e:	2019      	movs	r0, #25
1a000b70:	f7ff fbc6 	bl	1a000300 <SetEsp8622Status>
1a000b74:	e5eb      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000b76:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b7a:	2300      	movs	r3, #0
1a000b7c:	483f      	ldr	r0, [pc, #252]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000b7e:	f005 f9e1 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_CIPSTO_SEND);
1a000b82:	2033      	movs	r0, #51	; 0x33
1a000b84:	f7ff fbbc 	bl	1a000300 <SetEsp8622Status>
1a000b88:	e7d8      	b.n	1a000b3c <ExcecuteHttpServerFsm+0x48c>
		vTaskDelay(10);
1a000b8a:	200a      	movs	r0, #10
1a000b8c:	f003 f852 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000b90:	483a      	ldr	r0, [pc, #232]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000b92:	f005 f9e7 	bl	1a005f64 <delayRead>
1a000b96:	2800      	cmp	r0, #0
1a000b98:	f43f add9 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CIPSTO?\r\n");
1a000b9c:	4944      	ldr	r1, [pc, #272]	; (1a000cb0 <ExcecuteHttpServerFsm+0x600>)
1a000b9e:	2005      	movs	r0, #5
1a000ba0:	f005 fb6e 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000ba4:	4b39      	ldr	r3, [pc, #228]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a000ba6:	4a3c      	ldr	r2, [pc, #240]	; (1a000c98 <ExcecuteHttpServerFsm+0x5e8>)
1a000ba8:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000baa:	f242 7210 	movw	r2, #10000	; 0x2710
1a000bae:	2300      	movs	r3, #0
1a000bb0:	4832      	ldr	r0, [pc, #200]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000bb2:	f005 f9c7 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPSTO);
1a000bb6:	2034      	movs	r0, #52	; 0x34
1a000bb8:	f7ff fba2 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a000bbc:	4b3a      	ldr	r3, [pc, #232]	; (1a000ca8 <ExcecuteHttpServerFsm+0x5f8>)
1a000bbe:	2200      	movs	r2, #0
1a000bc0:	701a      	strb	r2, [r3, #0]
1a000bc2:	e5c4      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000bc4:	f7ff fba2 	bl	1a00030c <IsWaitedResponse>
1a000bc8:	b9b8      	cbnz	r0, 1a000bfa <ExcecuteHttpServerFsm+0x54a>
		if (delayRead(&Esp8266Delay))
1a000bca:	482c      	ldr	r0, [pc, #176]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000bcc:	f005 f9ca 	bl	1a005f64 <delayRead>
1a000bd0:	2800      	cmp	r0, #0
1a000bd2:	f43f adbc 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000bd6:	f241 3288 	movw	r2, #5000	; 0x1388
1a000bda:	2300      	movs	r3, #0
1a000bdc:	4827      	ldr	r0, [pc, #156]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000bde:	f005 f9b1 	bl	1a005f44 <delayInit>
			if (++auxIndex >= 4)
1a000be2:	4a31      	ldr	r2, [pc, #196]	; (1a000ca8 <ExcecuteHttpServerFsm+0x5f8>)
1a000be4:	7813      	ldrb	r3, [r2, #0]
1a000be6:	3301      	adds	r3, #1
1a000be8:	b2db      	uxtb	r3, r3
1a000bea:	7013      	strb	r3, [r2, #0]
1a000bec:	2b03      	cmp	r3, #3
1a000bee:	f67f adae 	bls.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
				SetEsp8622Status(ESP_CIPMUX_SEND);
1a000bf2:	2019      	movs	r0, #25
1a000bf4:	f7ff fb84 	bl	1a000300 <SetEsp8622Status>
1a000bf8:	e5a9      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000bfa:	f241 3288 	movw	r2, #5000	; 0x1388
1a000bfe:	2300      	movs	r3, #0
1a000c00:	481e      	ldr	r0, [pc, #120]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000c02:	f005 f99f 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPSERVER);
1a000c06:	201b      	movs	r0, #27
1a000c08:	f7ff fb7a 	bl	1a000300 <SetEsp8622Status>
1a000c0c:	e7dd      	b.n	1a000bca <ExcecuteHttpServerFsm+0x51a>
		vTaskDelay(10);
1a000c0e:	200a      	movs	r0, #10
1a000c10:	f003 f810 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000c14:	4819      	ldr	r0, [pc, #100]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000c16:	f005 f9a5 	bl	1a005f64 <delayRead>
1a000c1a:	2800      	cmp	r0, #0
1a000c1c:	f43f ad97 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CIPSERVER=1,80\r\n");
1a000c20:	4924      	ldr	r1, [pc, #144]	; (1a000cb4 <ExcecuteHttpServerFsm+0x604>)
1a000c22:	2005      	movs	r0, #5
1a000c24:	f005 fb2c 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_OK;
1a000c28:	4b18      	ldr	r3, [pc, #96]	; (1a000c8c <ExcecuteHttpServerFsm+0x5dc>)
1a000c2a:	4a1b      	ldr	r2, [pc, #108]	; (1a000c98 <ExcecuteHttpServerFsm+0x5e8>)
1a000c2c:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_TMO);
1a000c2e:	f242 7210 	movw	r2, #10000	; 0x2710
1a000c32:	2300      	movs	r3, #0
1a000c34:	4811      	ldr	r0, [pc, #68]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000c36:	f005 f985 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIPSERVER);
1a000c3a:	201c      	movs	r0, #28
1a000c3c:	f7ff fb60 	bl	1a000300 <SetEsp8622Status>
1a000c40:	e585      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000c42:	f7ff fb63 	bl	1a00030c <IsWaitedResponse>
1a000c46:	b978      	cbnz	r0, 1a000c68 <ExcecuteHttpServerFsm+0x5b8>
		if (delayRead(&Esp8266Delay))
1a000c48:	480c      	ldr	r0, [pc, #48]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000c4a:	f005 f98b 	bl	1a005f64 <delayRead>
1a000c4e:	2800      	cmp	r0, #0
1a000c50:	f43f ad7d 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c54:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c58:	2300      	movs	r3, #0
1a000c5a:	4808      	ldr	r0, [pc, #32]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000c5c:	f005 f972 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_AT);
1a000c60:	2003      	movs	r0, #3
1a000c62:	f7ff fb4d 	bl	1a000300 <SetEsp8622Status>
1a000c66:	e572      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000c68:	f241 3288 	movw	r2, #5000	; 0x1388
1a000c6c:	2300      	movs	r3, #0
1a000c6e:	4803      	ldr	r0, [pc, #12]	; (1a000c7c <ExcecuteHttpServerFsm+0x5cc>)
1a000c70:	f005 f968 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a000c74:	2029      	movs	r0, #41	; 0x29
1a000c76:	f7ff fb43 	bl	1a000300 <SetEsp8622Status>
1a000c7a:	e7e5      	b.n	1a000c48 <ExcecuteHttpServerFsm+0x598>
1a000c7c:	10001d68 	.word	0x10001d68
1a000c80:	10001dd4 	.word	0x10001dd4
1a000c84:	10001db4 	.word	0x10001db4
1a000c88:	1a0075d0 	.word	0x1a0075d0
1a000c8c:	10001d80 	.word	0x10001d80
1a000c90:	1a0076f4 	.word	0x1a0076f4
1a000c94:	1a007704 	.word	0x1a007704
1a000c98:	1a007720 	.word	0x1a007720
1a000c9c:	10001da0 	.word	0x10001da0
1a000ca0:	1a0075e8 	.word	0x1a0075e8
1a000ca4:	1a0075fc 	.word	0x1a0075fc
1a000ca8:	10001df2 	.word	0x10001df2
1a000cac:	1a00760c 	.word	0x1a00760c
1a000cb0:	1a007620 	.word	0x1a007620
1a000cb4:	1a007630 	.word	0x1a007630
		vTaskDelay(10);
1a000cb8:	200a      	movs	r0, #10
1a000cba:	f002 ffbb 	bl	1a003c34 <vTaskDelay>
		if (delayRead(&Esp8266Delay))
1a000cbe:	48b5      	ldr	r0, [pc, #724]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000cc0:	f005 f950 	bl	1a005f64 <delayRead>
1a000cc4:	2800      	cmp	r0, #0
1a000cc6:	f43f ad42 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioPrintf(ESP8266_UART, "AT+CIFSR\r\n");
1a000cca:	49b3      	ldr	r1, [pc, #716]	; (1a000f98 <ExcecuteHttpServerFsm+0x8e8>)
1a000ccc:	2005      	movs	r0, #5
1a000cce:	f005 fad7 	bl	1a006280 <stdioPrintf>
			Esp8266ResponseToWait = Response_CIFSR;
1a000cd2:	4bb2      	ldr	r3, [pc, #712]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000cd4:	4ab2      	ldr	r2, [pc, #712]	; (1a000fa0 <ExcecuteHttpServerFsm+0x8f0>)
1a000cd6:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000cd8:	f241 3288 	movw	r2, #5000	; 0x1388
1a000cdc:	2300      	movs	r3, #0
1a000cde:	48ad      	ldr	r0, [pc, #692]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000ce0:	f005 f930 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_CIFSR);
1a000ce4:	202a      	movs	r0, #42	; 0x2a
1a000ce6:	f7ff fb0b 	bl	1a000300 <SetEsp8622Status>
1a000cea:	e530      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000cec:	f7ff fb0e 	bl	1a00030c <IsWaitedResponse>
1a000cf0:	b978      	cbnz	r0, 1a000d12 <ExcecuteHttpServerFsm+0x662>
		if (delayRead(&Esp8266Delay))
1a000cf2:	48a8      	ldr	r0, [pc, #672]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000cf4:	f005 f936 	bl	1a005f64 <delayRead>
1a000cf8:	2800      	cmp	r0, #0
1a000cfa:	f43f ad28 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000cfe:	f241 3288 	movw	r2, #5000	; 0x1388
1a000d02:	2300      	movs	r3, #0
1a000d04:	48a3      	ldr	r0, [pc, #652]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000d06:	f005 f91d 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CIFSR);
1a000d0a:	2029      	movs	r0, #41	; 0x29
1a000d0c:	f7ff faf8 	bl	1a000300 <SetEsp8622Status>
1a000d10:	e51d      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			SetEsp8622Status(ESP_LOAD_IP);
1a000d12:	202b      	movs	r0, #43	; 0x2b
1a000d14:	f7ff faf4 	bl	1a000300 <SetEsp8622Status>
			auxIndex = 0;
1a000d18:	4ba2      	ldr	r3, [pc, #648]	; (1a000fa4 <ExcecuteHttpServerFsm+0x8f4>)
1a000d1a:	2200      	movs	r2, #0
1a000d1c:	701a      	strb	r2, [r3, #0]
1a000d1e:	e7e8      	b.n	1a000cf2 <ExcecuteHttpServerFsm+0x642>
		if (receiveEspByte(&UARTEsp, &byteReceived, 10))
1a000d20:	220a      	movs	r2, #10
1a000d22:	49a1      	ldr	r1, [pc, #644]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000d24:	48a1      	ldr	r0, [pc, #644]	; (1a000fac <ExcecuteHttpServerFsm+0x8fc>)
1a000d26:	f000 fb09 	bl	1a00133c <receiveEspByte>
1a000d2a:	2800      	cmp	r0, #0
1a000d2c:	f43f ad0f 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			if (byteReceived != '"')
1a000d30:	4b9d      	ldr	r3, [pc, #628]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000d32:	781a      	ldrb	r2, [r3, #0]
1a000d34:	2a22      	cmp	r2, #34	; 0x22
1a000d36:	d006      	beq.n	1a000d46 <ExcecuteHttpServerFsm+0x696>
				WifiIp[auxIndex] = byteReceived;
1a000d38:	499a      	ldr	r1, [pc, #616]	; (1a000fa4 <ExcecuteHttpServerFsm+0x8f4>)
1a000d3a:	780b      	ldrb	r3, [r1, #0]
1a000d3c:	489c      	ldr	r0, [pc, #624]	; (1a000fb0 <ExcecuteHttpServerFsm+0x900>)
1a000d3e:	54c2      	strb	r2, [r0, r3]
				auxIndex++;
1a000d40:	3301      	adds	r3, #1
1a000d42:	700b      	strb	r3, [r1, #0]
1a000d44:	e503      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
				WifiIp[auxIndex] = '\0';
1a000d46:	4b97      	ldr	r3, [pc, #604]	; (1a000fa4 <ExcecuteHttpServerFsm+0x8f4>)
1a000d48:	781b      	ldrb	r3, [r3, #0]
1a000d4a:	4a99      	ldr	r2, [pc, #612]	; (1a000fb0 <ExcecuteHttpServerFsm+0x900>)
1a000d4c:	2100      	movs	r1, #0
1a000d4e:	54d1      	strb	r1, [r2, r3]
				Esp8266ResponseToWait = Response_IPD;
1a000d50:	4b92      	ldr	r3, [pc, #584]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000d52:	4a98      	ldr	r2, [pc, #608]	; (1a000fb4 <ExcecuteHttpServerFsm+0x904>)
1a000d54:	601a      	str	r2, [r3, #0]
				SetEsp8622Status(ESP_WAIT_IPD);
1a000d56:	202e      	movs	r0, #46	; 0x2e
1a000d58:	f7ff fad2 	bl	1a000300 <SetEsp8622Status>
1a000d5c:	e4f7      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000d5e:	f7ff fad5 	bl	1a00030c <IsWaitedResponse>
1a000d62:	b978      	cbnz	r0, 1a000d84 <ExcecuteHttpServerFsm+0x6d4>
		if (delayRead(&Esp8266Delay))
1a000d64:	488b      	ldr	r0, [pc, #556]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000d66:	f005 f8fd 	bl	1a005f64 <delayRead>
1a000d6a:	2800      	cmp	r0, #0
1a000d6c:	f43f acef 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000d70:	f241 3288 	movw	r2, #5000	; 0x1388
1a000d74:	2300      	movs	r3, #0
1a000d76:	4887      	ldr	r0, [pc, #540]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000d78:	f005 f8e4 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a000d7c:	202e      	movs	r0, #46	; 0x2e
1a000d7e:	f7ff fabf 	bl	1a000300 <SetEsp8622Status>
1a000d82:	e4e4      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			SetEsp8622Status(ESP_GET_REQUEST_ID);
1a000d84:	202f      	movs	r0, #47	; 0x2f
1a000d86:	f7ff fabb 	bl	1a000300 <SetEsp8622Status>
1a000d8a:	e7eb      	b.n	1a000d64 <ExcecuteHttpServerFsm+0x6b4>
		if (receiveEspByte(&UARTEsp, &byteReceived, 10))
1a000d8c:	220a      	movs	r2, #10
1a000d8e:	4986      	ldr	r1, [pc, #536]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000d90:	4886      	ldr	r0, [pc, #536]	; (1a000fac <ExcecuteHttpServerFsm+0x8fc>)
1a000d92:	f000 fad3 	bl	1a00133c <receiveEspByte>
1a000d96:	2800      	cmp	r0, #0
1a000d98:	f43f acd9 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			CurrentConnectionId = byteReceived;
1a000d9c:	4b82      	ldr	r3, [pc, #520]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000d9e:	781a      	ldrb	r2, [r3, #0]
1a000da0:	4b85      	ldr	r3, [pc, #532]	; (1a000fb8 <ExcecuteHttpServerFsm+0x908>)
1a000da2:	701a      	strb	r2, [r3, #0]
			Esp8266ResponseToWait = Response_COMMA;
1a000da4:	4b7d      	ldr	r3, [pc, #500]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000da6:	4a85      	ldr	r2, [pc, #532]	; (1a000fbc <ExcecuteHttpServerFsm+0x90c>)
1a000da8:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_COMMA);
1a000daa:	2030      	movs	r0, #48	; 0x30
1a000dac:	f7ff faa8 	bl	1a000300 <SetEsp8622Status>
			gpioWrite(LED3, true);
1a000db0:	2101      	movs	r1, #1
1a000db2:	202d      	movs	r0, #45	; 0x2d
1a000db4:	f005 f80e 	bl	1a005dd4 <gpioWrite>
1a000db8:	e4c9      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000dba:	f7ff faa7 	bl	1a00030c <IsWaitedResponse>
1a000dbe:	b990      	cbnz	r0, 1a000de6 <ExcecuteHttpServerFsm+0x736>
		if (delayRead(&Esp8266Delay))
1a000dc0:	4874      	ldr	r0, [pc, #464]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000dc2:	f005 f8cf 	bl	1a005f64 <delayRead>
1a000dc6:	2800      	cmp	r0, #0
1a000dc8:	f43f acc1 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			Esp8266ResponseToWait = Response_IPD;
1a000dcc:	4b73      	ldr	r3, [pc, #460]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000dce:	4a79      	ldr	r2, [pc, #484]	; (1a000fb4 <ExcecuteHttpServerFsm+0x904>)
1a000dd0:	601a      	str	r2, [r3, #0]
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000dd2:	f241 3288 	movw	r2, #5000	; 0x1388
1a000dd6:	2300      	movs	r3, #0
1a000dd8:	486e      	ldr	r0, [pc, #440]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000dda:	f005 f8b3 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a000dde:	202e      	movs	r0, #46	; 0x2e
1a000de0:	f7ff fa8e 	bl	1a000300 <SetEsp8622Status>
1a000de4:	e4b3      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			SetEsp8622Status(ESP_GET_REQUEST_LENGTH);
1a000de6:	2031      	movs	r0, #49	; 0x31
1a000de8:	f7ff fa8a 	bl	1a000300 <SetEsp8622Status>
1a000dec:	e7e8      	b.n	1a000dc0 <ExcecuteHttpServerFsm+0x710>
		if (receiveEspByte(&UARTEsp, &byteReceived, 10))
1a000dee:	220a      	movs	r2, #10
1a000df0:	496d      	ldr	r1, [pc, #436]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000df2:	486e      	ldr	r0, [pc, #440]	; (1a000fac <ExcecuteHttpServerFsm+0x8fc>)
1a000df4:	f000 faa2 	bl	1a00133c <receiveEspByte>
1a000df8:	2800      	cmp	r0, #0
1a000dfa:	f43f aca8 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			if (byteReceived != ':' && byteReceived >= '0'
1a000dfe:	4b6a      	ldr	r3, [pc, #424]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000e00:	781b      	ldrb	r3, [r3, #0]
1a000e02:	2b3a      	cmp	r3, #58	; 0x3a
1a000e04:	d003      	beq.n	1a000e0e <ExcecuteHttpServerFsm+0x75e>
1a000e06:	2b2f      	cmp	r3, #47	; 0x2f
1a000e08:	d901      	bls.n	1a000e0e <ExcecuteHttpServerFsm+0x75e>
					&& byteReceived <= '9')
1a000e0a:	2b39      	cmp	r3, #57	; 0x39
1a000e0c:	d906      	bls.n	1a000e1c <ExcecuteHttpServerFsm+0x76c>
				i = 0; //reinicio el indice del request
1a000e0e:	4b6c      	ldr	r3, [pc, #432]	; (1a000fc0 <ExcecuteHttpServerFsm+0x910>)
1a000e10:	2200      	movs	r2, #0
1a000e12:	801a      	strh	r2, [r3, #0]
				SetEsp8622Status(ESP_GET_REQUEST);
1a000e14:	2032      	movs	r0, #50	; 0x32
1a000e16:	f7ff fa73 	bl	1a000300 <SetEsp8622Status>
1a000e1a:	e498      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
						+ (byteReceived - '0'); //guardo el valor de la longituda de la request.
1a000e1c:	4969      	ldr	r1, [pc, #420]	; (1a000fc4 <ExcecuteHttpServerFsm+0x914>)
1a000e1e:	780a      	ldrb	r2, [r1, #0]
1a000e20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a000e24:	0050      	lsls	r0, r2, #1
1a000e26:	4403      	add	r3, r0
1a000e28:	3b30      	subs	r3, #48	; 0x30
				CurrentReqLength = (CurrentReqLength * 10)
1a000e2a:	700b      	strb	r3, [r1, #0]
				SetEsp8622Status(ESP_GET_REQUEST_LENGTH);
1a000e2c:	2031      	movs	r0, #49	; 0x31
1a000e2e:	f7ff fa67 	bl	1a000300 <SetEsp8622Status>
1a000e32:	e48c      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (receiveEspByte(&UARTEsp, &byteReceived, 10))
1a000e34:	220a      	movs	r2, #10
1a000e36:	495c      	ldr	r1, [pc, #368]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000e38:	485c      	ldr	r0, [pc, #368]	; (1a000fac <ExcecuteHttpServerFsm+0x8fc>)
1a000e3a:	f000 fa7f 	bl	1a00133c <receiveEspByte>
1a000e3e:	2800      	cmp	r0, #0
1a000e40:	f43f ac85 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			if (byteReceived != 0x0D && byteReceived != 0x0A) //si es distinto de CR o LF (enter)
1a000e44:	4b58      	ldr	r3, [pc, #352]	; (1a000fa8 <ExcecuteHttpServerFsm+0x8f8>)
1a000e46:	781b      	ldrb	r3, [r3, #0]
1a000e48:	2b0d      	cmp	r3, #13
1a000e4a:	d001      	beq.n	1a000e50 <ExcecuteHttpServerFsm+0x7a0>
1a000e4c:	2b0a      	cmp	r3, #10
1a000e4e:	d10b      	bne.n	1a000e68 <ExcecuteHttpServerFsm+0x7b8>
				rawRequest[i] = 0;
1a000e50:	4b5b      	ldr	r3, [pc, #364]	; (1a000fc0 <ExcecuteHttpServerFsm+0x910>)
1a000e52:	8819      	ldrh	r1, [r3, #0]
1a000e54:	485c      	ldr	r0, [pc, #368]	; (1a000fc8 <ExcecuteHttpServerFsm+0x918>)
1a000e56:	2300      	movs	r3, #0
1a000e58:	5443      	strb	r3, [r0, r1]
				requestCallback(rawRequest, i); //envio al callback del request la request completa (GET + algo) y el tamaño de la request
1a000e5a:	b2c9      	uxtb	r1, r1
1a000e5c:	f7ff fafa 	bl	1a000454 <requestCallback>
				SetEsp8622Status(ESP_SEND_CIPSEND);
1a000e60:	2021      	movs	r0, #33	; 0x21
1a000e62:	f7ff fa4d 	bl	1a000300 <SetEsp8622Status>
1a000e66:	e472      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
				rawRequest[i] = byteReceived;
1a000e68:	4955      	ldr	r1, [pc, #340]	; (1a000fc0 <ExcecuteHttpServerFsm+0x910>)
1a000e6a:	880a      	ldrh	r2, [r1, #0]
1a000e6c:	4856      	ldr	r0, [pc, #344]	; (1a000fc8 <ExcecuteHttpServerFsm+0x918>)
1a000e6e:	5483      	strb	r3, [r0, r2]
				i++;
1a000e70:	3201      	adds	r2, #1
1a000e72:	800a      	strh	r2, [r1, #0]
				SetEsp8622Status(ESP_GET_REQUEST);
1a000e74:	2032      	movs	r0, #50	; 0x32
1a000e76:	f7ff fa43 	bl	1a000300 <SetEsp8622Status>
1a000e7a:	e468      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		lenghtOfHttpLines = (strlen(PointerOfHttpWebPage));
1a000e7c:	4b53      	ldr	r3, [pc, #332]	; (1a000fcc <ExcecuteHttpServerFsm+0x91c>)
1a000e7e:	681c      	ldr	r4, [r3, #0]
1a000e80:	4620      	mov	r0, r4
1a000e82:	f005 ff28 	bl	1a006cd6 <strlen>
1a000e86:	b283      	uxth	r3, r0
		if (lenghtOfHttpLines >= MAX_HTTP_WEB_LENGHT)
1a000e88:	f240 72fe 	movw	r2, #2046	; 0x7fe
1a000e8c:	4293      	cmp	r3, r2
1a000e8e:	d812      	bhi.n	1a000eb6 <ExcecuteHttpServerFsm+0x806>
		stdioPrintf(ESP8266_UART, "AT+CIPSEND=%c,%d\r\n", CurrentConnectionId,
1a000e90:	4a49      	ldr	r2, [pc, #292]	; (1a000fb8 <ExcecuteHttpServerFsm+0x908>)
1a000e92:	7812      	ldrb	r2, [r2, #0]
1a000e94:	494e      	ldr	r1, [pc, #312]	; (1a000fd0 <ExcecuteHttpServerFsm+0x920>)
1a000e96:	2005      	movs	r0, #5
1a000e98:	f005 f9f2 	bl	1a006280 <stdioPrintf>
		delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000e9c:	f241 3288 	movw	r2, #5000	; 0x1388
1a000ea0:	2300      	movs	r3, #0
1a000ea2:	483c      	ldr	r0, [pc, #240]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000ea4:	f005 f84e 	bl	1a005f44 <delayInit>
		SetEsp8622Status(ESP_WAIT_CIPSEND);
1a000ea8:	2022      	movs	r0, #34	; 0x22
1a000eaa:	f7ff fa29 	bl	1a000300 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_OK;
1a000eae:	4b3b      	ldr	r3, [pc, #236]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000eb0:	4a48      	ldr	r2, [pc, #288]	; (1a000fd4 <ExcecuteHttpServerFsm+0x924>)
1a000eb2:	601a      	str	r2, [r3, #0]
		break;
1a000eb4:	e44b      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			stdioSprintf(PointerOfHttpWebPage,
1a000eb6:	f240 72ff 	movw	r2, #2047	; 0x7ff
1a000eba:	4947      	ldr	r1, [pc, #284]	; (1a000fd8 <ExcecuteHttpServerFsm+0x928>)
1a000ebc:	4620      	mov	r0, r4
1a000ebe:	f005 f9ed 	bl	1a00629c <stdioSprintf>
			lenghtOfHttpLines = (strlen(PointerOfHttpWebPage));
1a000ec2:	4b42      	ldr	r3, [pc, #264]	; (1a000fcc <ExcecuteHttpServerFsm+0x91c>)
1a000ec4:	6818      	ldr	r0, [r3, #0]
1a000ec6:	f005 ff06 	bl	1a006cd6 <strlen>
1a000eca:	b283      	uxth	r3, r0
1a000ecc:	e7e0      	b.n	1a000e90 <ExcecuteHttpServerFsm+0x7e0>
		if (IsWaitedResponse())
1a000ece:	f7ff fa1d 	bl	1a00030c <IsWaitedResponse>
1a000ed2:	b990      	cbnz	r0, 1a000efa <ExcecuteHttpServerFsm+0x84a>
		if (delayRead(&Esp8266Delay))
1a000ed4:	482f      	ldr	r0, [pc, #188]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000ed6:	f005 f845 	bl	1a005f64 <delayRead>
1a000eda:	2800      	cmp	r0, #0
1a000edc:	f43f ac37 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
1a000ee4:	2300      	movs	r3, #0
1a000ee6:	482b      	ldr	r0, [pc, #172]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000ee8:	f005 f82c 	bl	1a005f44 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a000eec:	4b2b      	ldr	r3, [pc, #172]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000eee:	4a31      	ldr	r2, [pc, #196]	; (1a000fb4 <ExcecuteHttpServerFsm+0x904>)
1a000ef0:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a000ef2:	202e      	movs	r0, #46	; 0x2e
1a000ef4:	f7ff fa04 	bl	1a000300 <SetEsp8622Status>
1a000ef8:	e429      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000efa:	f241 3288 	movw	r2, #5000	; 0x1388
1a000efe:	2300      	movs	r3, #0
1a000f00:	4824      	ldr	r0, [pc, #144]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000f02:	f005 f81f 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_HTTP);
1a000f06:	2023      	movs	r0, #35	; 0x23
1a000f08:	f7ff f9fa 	bl	1a000300 <SetEsp8622Status>
1a000f0c:	e7e2      	b.n	1a000ed4 <ExcecuteHttpServerFsm+0x824>
		stdioPrintf(ESP8266_UART, "%s", PointerOfHttpWebPage);
1a000f0e:	4b2f      	ldr	r3, [pc, #188]	; (1a000fcc <ExcecuteHttpServerFsm+0x91c>)
1a000f10:	681a      	ldr	r2, [r3, #0]
1a000f12:	4932      	ldr	r1, [pc, #200]	; (1a000fdc <ExcecuteHttpServerFsm+0x92c>)
1a000f14:	2005      	movs	r0, #5
1a000f16:	f005 f9b3 	bl	1a006280 <stdioPrintf>
		SetEsp8622Status(ESP_WAIT_HTTP);
1a000f1a:	2024      	movs	r0, #36	; 0x24
1a000f1c:	f7ff f9f0 	bl	1a000300 <SetEsp8622Status>
		Esp8266ResponseToWait = Response_SEND_OK;
1a000f20:	4b1e      	ldr	r3, [pc, #120]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000f22:	4a2f      	ldr	r2, [pc, #188]	; (1a000fe0 <ExcecuteHttpServerFsm+0x930>)
1a000f24:	601a      	str	r2, [r3, #0]
		break;
1a000f26:	e412      	b.n	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a000f28:	f7ff f9f0 	bl	1a00030c <IsWaitedResponse>
1a000f2c:	b980      	cbnz	r0, 1a000f50 <ExcecuteHttpServerFsm+0x8a0>
		if (delayRead(&Esp8266Delay))
1a000f2e:	4819      	ldr	r0, [pc, #100]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000f30:	f005 f818 	bl	1a005f64 <delayRead>
1a000f34:	2800      	cmp	r0, #0
1a000f36:	f43f ac0a 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000f3a:	f241 3288 	movw	r2, #5000	; 0x1388
1a000f3e:	2300      	movs	r3, #0
1a000f40:	4814      	ldr	r0, [pc, #80]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000f42:	f004 ffff 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPSEND);
1a000f46:	2021      	movs	r0, #33	; 0x21
1a000f48:	f7ff f9da 	bl	1a000300 <SetEsp8622Status>
1a000f4c:	f7ff bbff 	b.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000f50:	f241 3288 	movw	r2, #5000	; 0x1388
1a000f54:	2300      	movs	r3, #0
1a000f56:	480f      	ldr	r0, [pc, #60]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000f58:	f004 fff4 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_SEND_CIPCLOSE);
1a000f5c:	2027      	movs	r0, #39	; 0x27
1a000f5e:	f7ff f9cf 	bl	1a000300 <SetEsp8622Status>
			gpioWrite(LED3, false);
1a000f62:	2100      	movs	r1, #0
1a000f64:	202d      	movs	r0, #45	; 0x2d
1a000f66:	f004 ff35 	bl	1a005dd4 <gpioWrite>
1a000f6a:	e7e0      	b.n	1a000f2e <ExcecuteHttpServerFsm+0x87e>
		stdioPrintf(ESP8266_UART, "AT+CIPCLOSE=%c\r\n", CurrentConnectionId);
1a000f6c:	4b12      	ldr	r3, [pc, #72]	; (1a000fb8 <ExcecuteHttpServerFsm+0x908>)
1a000f6e:	781a      	ldrb	r2, [r3, #0]
1a000f70:	491c      	ldr	r1, [pc, #112]	; (1a000fe4 <ExcecuteHttpServerFsm+0x934>)
1a000f72:	2005      	movs	r0, #5
1a000f74:	f005 f984 	bl	1a006280 <stdioPrintf>
		Esp8266ResponseToWait = Response_CIPCLOSE;
1a000f78:	4b08      	ldr	r3, [pc, #32]	; (1a000f9c <ExcecuteHttpServerFsm+0x8ec>)
1a000f7a:	4a1b      	ldr	r2, [pc, #108]	; (1a000fe8 <ExcecuteHttpServerFsm+0x938>)
1a000f7c:	601a      	str	r2, [r3, #0]
		delayConfig(&Esp8266Delay, 100);
1a000f7e:	2264      	movs	r2, #100	; 0x64
1a000f80:	2300      	movs	r3, #0
1a000f82:	4804      	ldr	r0, [pc, #16]	; (1a000f94 <ExcecuteHttpServerFsm+0x8e4>)
1a000f84:	f004 ffde 	bl	1a005f44 <delayInit>
		SetEsp8622Status(ESP_WAIT_CIPCLOSE);
1a000f88:	2028      	movs	r0, #40	; 0x28
1a000f8a:	f7ff f9b9 	bl	1a000300 <SetEsp8622Status>
		break;
1a000f8e:	f7ff bbde 	b.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
1a000f92:	bf00      	nop
1a000f94:	10001d68 	.word	0x10001d68
1a000f98:	1a007644 	.word	0x1a007644
1a000f9c:	10001d80 	.word	0x10001d80
1a000fa0:	1a0076d8 	.word	0x1a0076d8
1a000fa4:	10001df2 	.word	0x10001df2
1a000fa8:	10001dfc 	.word	0x10001dfc
1a000fac:	10001d90 	.word	0x10001d90
1a000fb0:	10001da0 	.word	0x10001da0
1a000fb4:	1a007718 	.word	0x1a007718
1a000fb8:	10001d60 	.word	0x10001d60
1a000fbc:	1a0076f0 	.word	0x1a0076f0
1a000fc0:	10001dfe 	.word	0x10001dfe
1a000fc4:	10001d61 	.word	0x10001d61
1a000fc8:	10001e0c 	.word	0x10001e0c
1a000fcc:	10001d8c 	.word	0x10001d8c
1a000fd0:	1a00769c 	.word	0x1a00769c
1a000fd4:	1a007720 	.word	0x1a007720
1a000fd8:	1a007650 	.word	0x1a007650
1a000fdc:	1a0076b0 	.word	0x1a0076b0
1a000fe0:	1a007724 	.word	0x1a007724
1a000fe4:	1a0076b4 	.word	0x1a0076b4
1a000fe8:	1a0076e8 	.word	0x1a0076e8
		if (IsWaitedResponse())
1a000fec:	f7ff f98e 	bl	1a00030c <IsWaitedResponse>
1a000ff0:	b998      	cbnz	r0, 1a00101a <ExcecuteHttpServerFsm+0x96a>
		if (delayRead(&Esp8266Delay))
1a000ff2:	482d      	ldr	r0, [pc, #180]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a000ff4:	f004 ffb6 	bl	1a005f64 <delayRead>
1a000ff8:	2800      	cmp	r0, #0
1a000ffa:	f43f aba8 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
1a001002:	2300      	movs	r3, #0
1a001004:	4828      	ldr	r0, [pc, #160]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a001006:	f004 ff9d 	bl	1a005f44 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a00100a:	4b28      	ldr	r3, [pc, #160]	; (1a0010ac <ExcecuteHttpServerFsm+0x9fc>)
1a00100c:	4a28      	ldr	r2, [pc, #160]	; (1a0010b0 <ExcecuteHttpServerFsm+0xa00>)
1a00100e:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a001010:	202e      	movs	r0, #46	; 0x2e
1a001012:	f7ff f975 	bl	1a000300 <SetEsp8622Status>
1a001016:	f7ff bb9a 	b.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, 1);
1a00101a:	2201      	movs	r2, #1
1a00101c:	2300      	movs	r3, #0
1a00101e:	4822      	ldr	r0, [pc, #136]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a001020:	f004 ff90 	bl	1a005f44 <delayInit>
			Esp8266ResponseToWait = Response_IPD;
1a001024:	4b21      	ldr	r3, [pc, #132]	; (1a0010ac <ExcecuteHttpServerFsm+0x9fc>)
1a001026:	4a22      	ldr	r2, [pc, #136]	; (1a0010b0 <ExcecuteHttpServerFsm+0xa00>)
1a001028:	601a      	str	r2, [r3, #0]
			SetEsp8622Status(ESP_WAIT_IPD);
1a00102a:	202e      	movs	r0, #46	; 0x2e
1a00102c:	f7ff f968 	bl	1a000300 <SetEsp8622Status>
1a001030:	e7df      	b.n	1a000ff2 <ExcecuteHttpServerFsm+0x942>
		stdioPrintf(ESP8266_UART, "AT+CIPSTATUS\r\n");
1a001032:	4920      	ldr	r1, [pc, #128]	; (1a0010b4 <ExcecuteHttpServerFsm+0xa04>)
1a001034:	2005      	movs	r0, #5
1a001036:	f005 f923 	bl	1a006280 <stdioPrintf>
		Esp8266ResponseToWait = Response_OK;
1a00103a:	4b1c      	ldr	r3, [pc, #112]	; (1a0010ac <ExcecuteHttpServerFsm+0x9fc>)
1a00103c:	4a1e      	ldr	r2, [pc, #120]	; (1a0010b8 <ExcecuteHttpServerFsm+0xa08>)
1a00103e:	601a      	str	r2, [r3, #0]
		delayConfig(&Esp8266Delay, ESP8266_TMO);
1a001040:	f242 7210 	movw	r2, #10000	; 0x2710
1a001044:	2300      	movs	r3, #0
1a001046:	4818      	ldr	r0, [pc, #96]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a001048:	f004 ff7c 	bl	1a005f44 <delayInit>
		SetEsp8622Status(ESP_WAIT_CIPSTATUS);
1a00104c:	2026      	movs	r0, #38	; 0x26
1a00104e:	f7ff f957 	bl	1a000300 <SetEsp8622Status>
		auxIndex = 0;
1a001052:	4b1a      	ldr	r3, [pc, #104]	; (1a0010bc <ExcecuteHttpServerFsm+0xa0c>)
1a001054:	2200      	movs	r2, #0
1a001056:	701a      	strb	r2, [r3, #0]
		break;
1a001058:	f7ff bb79 	b.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
		if (IsWaitedResponse())
1a00105c:	f7ff f956 	bl	1a00030c <IsWaitedResponse>
1a001060:	b9c0      	cbnz	r0, 1a001094 <ExcecuteHttpServerFsm+0x9e4>
		if (delayRead(&Esp8266Delay))
1a001062:	4811      	ldr	r0, [pc, #68]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a001064:	f004 ff7e 	bl	1a005f64 <delayRead>
1a001068:	2800      	cmp	r0, #0
1a00106a:	f43f ab70 	beq.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a00106e:	f241 3288 	movw	r2, #5000	; 0x1388
1a001072:	2300      	movs	r3, #0
1a001074:	480c      	ldr	r0, [pc, #48]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a001076:	f004 ff65 	bl	1a005f44 <delayInit>
			if (++auxIndex >= 4)
1a00107a:	4a10      	ldr	r2, [pc, #64]	; (1a0010bc <ExcecuteHttpServerFsm+0xa0c>)
1a00107c:	7813      	ldrb	r3, [r2, #0]
1a00107e:	3301      	adds	r3, #1
1a001080:	b2db      	uxtb	r3, r3
1a001082:	7013      	strb	r3, [r2, #0]
1a001084:	2b03      	cmp	r3, #3
1a001086:	f67f ab62 	bls.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
				SetEsp8622Status(ESP_WAIT_IPD);
1a00108a:	202e      	movs	r0, #46	; 0x2e
1a00108c:	f7ff f938 	bl	1a000300 <SetEsp8622Status>
}
1a001090:	f7ff bb5d 	b.w	1a00074e <ExcecuteHttpServerFsm+0x9e>
			delayConfig(&Esp8266Delay, ESP8266_PAUSE);
1a001094:	f241 3288 	movw	r2, #5000	; 0x1388
1a001098:	2300      	movs	r3, #0
1a00109a:	4803      	ldr	r0, [pc, #12]	; (1a0010a8 <ExcecuteHttpServerFsm+0x9f8>)
1a00109c:	f004 ff52 	bl	1a005f44 <delayInit>
			SetEsp8622Status(ESP_WAIT_IPD);
1a0010a0:	202e      	movs	r0, #46	; 0x2e
1a0010a2:	f7ff f92d 	bl	1a000300 <SetEsp8622Status>
1a0010a6:	e7dc      	b.n	1a001062 <ExcecuteHttpServerFsm+0x9b2>
1a0010a8:	10001d68 	.word	0x10001d68
1a0010ac:	10001d80 	.word	0x10001d80
1a0010b0:	1a007718 	.word	0x1a007718
1a0010b4:	1a0076c8 	.word	0x1a0076c8
1a0010b8:	1a007720 	.word	0x1a007720
1a0010bc:	10001df2 	.word	0x10001df2

1a0010c0 <gesp8266InitHttpServer>:
{
1a0010c0:	b570      	push	{r4, r5, r6, lr}
1a0010c2:	4606      	mov	r6, r0
1a0010c4:	460d      	mov	r5, r1
1a0010c6:	4614      	mov	r4, r2
	if ((!parametersReceived) || checkWifiChange())
1a0010c8:	4b11      	ldr	r3, [pc, #68]	; (1a001110 <gesp8266InitHttpServer+0x50>)
1a0010ca:	781b      	ldrb	r3, [r3, #0]
1a0010cc:	b113      	cbz	r3, 1a0010d4 <gesp8266InitHttpServer+0x14>
1a0010ce:	f7ff f981 	bl	1a0003d4 <checkWifiChange>
1a0010d2:	b198      	cbz	r0, 1a0010fc <gesp8266InitHttpServer+0x3c>
		strcpy(WifiName, wifiName);
1a0010d4:	4631      	mov	r1, r6
1a0010d6:	480f      	ldr	r0, [pc, #60]	; (1a001114 <gesp8266InitHttpServer+0x54>)
1a0010d8:	f005 fdf5 	bl	1a006cc6 <strcpy>
		strcpy(WifiPass, wifiPass);
1a0010dc:	4629      	mov	r1, r5
1a0010de:	480e      	ldr	r0, [pc, #56]	; (1a001118 <gesp8266InitHttpServer+0x58>)
1a0010e0:	f005 fdf1 	bl	1a006cc6 <strcpy>
		strcpy(WifiIp, wifiIp);
1a0010e4:	4621      	mov	r1, r4
1a0010e6:	480d      	ldr	r0, [pc, #52]	; (1a00111c <gesp8266InitHttpServer+0x5c>)
1a0010e8:	f005 fded 	bl	1a006cc6 <strcpy>
		SetEsp8622Status(ESP_INIT);
1a0010ec:	2000      	movs	r0, #0
1a0010ee:	f7ff f907 	bl	1a000300 <SetEsp8622Status>
		parametersReceived = TRUE;
1a0010f2:	4b07      	ldr	r3, [pc, #28]	; (1a001110 <gesp8266InitHttpServer+0x50>)
1a0010f4:	2201      	movs	r2, #1
1a0010f6:	701a      	strb	r2, [r3, #0]
		resetWifiFlag();
1a0010f8:	f7ff f962 	bl	1a0003c0 <resetWifiFlag>
	ExcecuteHttpServerFsm();
1a0010fc:	f7ff fad8 	bl	1a0006b0 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_WAIT_IPD); //si llego al estado ESP_WAIT_IPD es porque el modulo ya esta configurado.
1a001100:	4b07      	ldr	r3, [pc, #28]	; (1a001120 <gesp8266InitHttpServer+0x60>)
1a001102:	7818      	ldrb	r0, [r3, #0]
}
1a001104:	282e      	cmp	r0, #46	; 0x2e
1a001106:	bf14      	ite	ne
1a001108:	2000      	movne	r0, #0
1a00110a:	2001      	moveq	r0, #1
1a00110c:	bd70      	pop	{r4, r5, r6, pc}
1a00110e:	bf00      	nop
1a001110:	10001e08 	.word	0x10001e08
1a001114:	10001db4 	.word	0x10001db4
1a001118:	10001dd4 	.word	0x10001dd4
1a00111c:	10001da0 	.word	0x10001da0
1a001120:	10001d84 	.word	0x10001d84

1a001124 <gesp8266ReadHttpServer>:
{
1a001124:	b508      	push	{r3, lr}
	ExcecuteHttpServerFsm();
1a001126:	f7ff fac3 	bl	1a0006b0 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPSEND); //si la FSM llego al estado ESP_SEND_CIPSEND significa que ya llego una peticion
1a00112a:	4b03      	ldr	r3, [pc, #12]	; (1a001138 <gesp8266ReadHttpServer+0x14>)
1a00112c:	7818      	ldrb	r0, [r3, #0]
}
1a00112e:	2821      	cmp	r0, #33	; 0x21
1a001130:	bf14      	ite	ne
1a001132:	2000      	movne	r0, #0
1a001134:	2001      	moveq	r0, #1
1a001136:	bd08      	pop	{r3, pc}
1a001138:	10001d84 	.word	0x10001d84

1a00113c <gesp8266WriteHttpServer>:
{
1a00113c:	b508      	push	{r3, lr}
	if (Esp8266Status == ESP_SEND_CIPSEND)
1a00113e:	4b08      	ldr	r3, [pc, #32]	; (1a001160 <gesp8266WriteHttpServer+0x24>)
1a001140:	781b      	ldrb	r3, [r3, #0]
1a001142:	2b21      	cmp	r3, #33	; 0x21
1a001144:	d008      	beq.n	1a001158 <gesp8266WriteHttpServer+0x1c>
	ExcecuteHttpServerFsm();
1a001146:	f7ff fab3 	bl	1a0006b0 <ExcecuteHttpServerFsm>
	return (Esp8266Status == ESP_SEND_CIPCLOSE);
1a00114a:	4b05      	ldr	r3, [pc, #20]	; (1a001160 <gesp8266WriteHttpServer+0x24>)
1a00114c:	7818      	ldrb	r0, [r3, #0]
}
1a00114e:	2827      	cmp	r0, #39	; 0x27
1a001150:	bf14      	ite	ne
1a001152:	2000      	movne	r0, #0
1a001154:	2001      	moveq	r0, #1
1a001156:	bd08      	pop	{r3, pc}
		PointerOfHttpWebPage = answer;
1a001158:	4b02      	ldr	r3, [pc, #8]	; (1a001164 <gesp8266WriteHttpServer+0x28>)
1a00115a:	6018      	str	r0, [r3, #0]
1a00115c:	e7f3      	b.n	1a001146 <gesp8266WriteHttpServer+0xa>
1a00115e:	bf00      	nop
1a001160:	10001d84 	.word	0x10001d84
1a001164:	10001d8c 	.word	0x10001d8c

1a001168 <server>:

//Tarea del servidor WIFI
void server(void* taskParmPtr)
{
1a001168:	b510      	push	{r4, lr}
1a00116a:	b0a4      	sub	sp, #144	; 0x90
	char SSID[33];
	char PASS[64];
	char IP[16];

	// Send the task to the locked state for 1 s (delay)
	vTaskDelay(1000 / portTICK_RATE_MS);
1a00116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001170:	f002 fd60 	bl	1a003c34 <vTaskDelay>
	stdioPrintf(UART_USB,
			"\n\rLa configuracion puede tardar hasta 1 minuto.\n\r\n\r");
#endif
	error = FALSE;
	// Configura un delay para salir de la configuracion en caso de error.
	delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a001174:	f64e 2260 	movw	r2, #60000	; 0xea60
1a001178:	2300      	movs	r3, #0
1a00117a:	a81e      	add	r0, sp, #120	; 0x78
1a00117c:	f004 fee2 	bl	1a005f44 <delayInit>

	// Mientras no termine la configuracion o mientras no pase el tiempo maximo, ejecuta la configuracion.
	// A la configuracion se le pasa nombre y contrasenia de RED

	loadWIFIData(SSID, PASS, IP); //Cargo los datos de la red desde EEPROM
1a001180:	aa01      	add	r2, sp, #4
1a001182:	a905      	add	r1, sp, #20
1a001184:	a815      	add	r0, sp, #84	; 0x54
1a001186:	f000 ffa7 	bl	1a0020d8 <loadWIFIData>
	error = FALSE;
1a00118a:	2400      	movs	r4, #0
	while (!gesp8266ConfigHttpServer(SSID, PASS, IP) && !error)
1a00118c:	e004      	b.n	1a001198 <server+0x30>
	{
		//vTaskDelay(1);
		if (delayRead(&wifiDelay))
1a00118e:	a81e      	add	r0, sp, #120	; 0x78
1a001190:	f004 fee8 	bl	1a005f64 <delayRead>
1a001194:	b100      	cbz	r0, 1a001198 <server+0x30>
		{
			error = TRUE;
1a001196:	2401      	movs	r4, #1
	while (!gesp8266ConfigHttpServer(SSID, PASS, IP) && !error)
1a001198:	aa01      	add	r2, sp, #4
1a00119a:	a905      	add	r1, sp, #20
1a00119c:	a815      	add	r0, sp, #84	; 0x54
1a00119e:	f7ff ff8f 	bl	1a0010c0 <gesp8266InitHttpServer>
1a0011a2:	b908      	cbnz	r0, 1a0011a8 <server+0x40>
1a0011a4:	2c00      	cmp	r4, #0
1a0011a6:	d0f2      	beq.n	1a00118e <server+0x26>
		}
	}

	// Avisa al usuario como salio la configuracion
	if (!error)
1a0011a8:	b95c      	cbnz	r4, 1a0011c2 <server+0x5a>
	{
		stdioPrintf(UART_USB, "\n\rServidor HTTP configurado. IP: %s",gesp8266GetIpAddress());
1a0011aa:	f7ff f8db 	bl	1a000364 <gesp8266GetIpAddress>
1a0011ae:	4602      	mov	r2, r0
1a0011b0:	4931      	ldr	r1, [pc, #196]	; (1a001278 <server+0x110>)
1a0011b2:	2003      	movs	r0, #3
1a0011b4:	f005 f864 	bl	1a006280 <stdioPrintf>
		// Enciende LEDG indicando que el modulo esta configurado.
		gpioWrite(LEDG, TRUE);
1a0011b8:	2101      	movs	r1, #1
1a0011ba:	2029      	movs	r0, #41	; 0x29
1a0011bc:	f004 fe0a 	bl	1a005dd4 <gpioWrite>
1a0011c0:	e00b      	b.n	1a0011da <server+0x72>
	}
	else
	{
		stdioPrintf(UART_USB, "\n\rError al configurar servidor HTTP.");
1a0011c2:	492e      	ldr	r1, [pc, #184]	; (1a00127c <server+0x114>)
1a0011c4:	2003      	movs	r0, #3
1a0011c6:	f005 f85b 	bl	1a006280 <stdioPrintf>
		// Enciende LEDR indicando que el modulo esta en error.
		gpioWrite(LEDR, TRUE);
1a0011ca:	2101      	movs	r1, #1
1a0011cc:	2028      	movs	r0, #40	; 0x28
1a0011ce:	f004 fe01 	bl	1a005dd4 <gpioWrite>
1a0011d2:	e002      	b.n	1a0011da <server+0x72>
				stdioPrintf(UART_USB,"\n\rPeticion no respondida al cliente HTTP %d.",gesp8266GetConnectionId());
			}
	#endif
			counter++;
		}
		if (checkWifiChange())
1a0011d4:	f7ff f8fe 	bl	1a0003d4 <checkWifiChange>
1a0011d8:	b9c8      	cbnz	r0, 1a00120e <server+0xa6>
		if (gesp8266ReadHttpServer())
1a0011da:	f7ff ffa3 	bl	1a001124 <gesp8266ReadHttpServer>
1a0011de:	2800      	cmp	r0, #0
1a0011e0:	d0f8      	beq.n	1a0011d4 <server+0x6c>
			delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a0011e2:	f64e 2260 	movw	r2, #60000	; 0xea60
1a0011e6:	2300      	movs	r3, #0
1a0011e8:	a81e      	add	r0, sp, #120	; 0x78
1a0011ea:	f004 feab 	bl	1a005f44 <delayInit>
			error = FALSE;
1a0011ee:	2400      	movs	r4, #0
			while (!gesp8266WriteHttpServer(requestAnswer) && !error)
1a0011f0:	4b23      	ldr	r3, [pc, #140]	; (1a001280 <server+0x118>)
1a0011f2:	6818      	ldr	r0, [r3, #0]
1a0011f4:	f7ff ffa2 	bl	1a00113c <gesp8266WriteHttpServer>
1a0011f8:	2800      	cmp	r0, #0
1a0011fa:	d1eb      	bne.n	1a0011d4 <server+0x6c>
1a0011fc:	2c00      	cmp	r4, #0
1a0011fe:	d1e9      	bne.n	1a0011d4 <server+0x6c>
				if (delayRead(&wifiDelay))
1a001200:	a81e      	add	r0, sp, #120	; 0x78
1a001202:	f004 feaf 	bl	1a005f64 <delayRead>
1a001206:	2800      	cmp	r0, #0
1a001208:	d0f2      	beq.n	1a0011f0 <server+0x88>
					error = TRUE;
1a00120a:	2401      	movs	r4, #1
1a00120c:	e7f0      	b.n	1a0011f0 <server+0x88>
		{
			stdioPrintf(UART_USB,"\n\rLa configuracion puede tardar hasta 1 minuto.\n\r\n\r");
1a00120e:	491d      	ldr	r1, [pc, #116]	; (1a001284 <server+0x11c>)
1a001210:	2003      	movs	r0, #3
1a001212:	f005 f835 	bl	1a006280 <stdioPrintf>

			error = FALSE;
			// Configura un delay para salir de la configuracion en caso de error.
			delayConfig(&wifiDelay, WIFI_MAX_DELAY);
1a001216:	f64e 2260 	movw	r2, #60000	; 0xea60
1a00121a:	2300      	movs	r3, #0
1a00121c:	a81e      	add	r0, sp, #120	; 0x78
1a00121e:	f004 fe91 	bl	1a005f44 <delayInit>

			// Mientras no termine la configuracion o mientras no pase el tiempo maximo, ejecuta la configuracion.
			// A la configuracion se le pasa nombre y contrasenia de RED

			loadWIFIData(SSID, PASS, IP); //Cargo los datos de la red desde EEPROM
1a001222:	aa01      	add	r2, sp, #4
1a001224:	a905      	add	r1, sp, #20
1a001226:	a815      	add	r0, sp, #84	; 0x54
1a001228:	f000 ff56 	bl	1a0020d8 <loadWIFIData>
			error = FALSE;
1a00122c:	2400      	movs	r4, #0
			while (!gesp8266ConfigHttpServer(SSID, PASS, IP) && !error)
1a00122e:	aa01      	add	r2, sp, #4
1a001230:	a905      	add	r1, sp, #20
1a001232:	a815      	add	r0, sp, #84	; 0x54
1a001234:	f7ff ff44 	bl	1a0010c0 <gesp8266InitHttpServer>
1a001238:	b938      	cbnz	r0, 1a00124a <server+0xe2>
1a00123a:	b934      	cbnz	r4, 1a00124a <server+0xe2>
			{
				//vTaskDelay(1);
				if (delayRead(&wifiDelay))
1a00123c:	a81e      	add	r0, sp, #120	; 0x78
1a00123e:	f004 fe91 	bl	1a005f64 <delayRead>
1a001242:	2800      	cmp	r0, #0
1a001244:	d0f3      	beq.n	1a00122e <server+0xc6>
				{
					error = TRUE;
1a001246:	2401      	movs	r4, #1
1a001248:	e7f1      	b.n	1a00122e <server+0xc6>
				}
			}

			// Avisa al usuario como salio la configuracion
			if (!error)
1a00124a:	b95c      	cbnz	r4, 1a001264 <server+0xfc>
			{
				stdioPrintf(UART_USB, "\n\rServidor HTTP configurado. IP: %s",gesp8266GetIpAddress());
1a00124c:	f7ff f88a 	bl	1a000364 <gesp8266GetIpAddress>
1a001250:	4602      	mov	r2, r0
1a001252:	4909      	ldr	r1, [pc, #36]	; (1a001278 <server+0x110>)
1a001254:	2003      	movs	r0, #3
1a001256:	f005 f813 	bl	1a006280 <stdioPrintf>
				// Enciende LEDG indicando que el modulo esta configurado.
				gpioWrite(LEDG, TRUE);
1a00125a:	2101      	movs	r1, #1
1a00125c:	2029      	movs	r0, #41	; 0x29
1a00125e:	f004 fdb9 	bl	1a005dd4 <gpioWrite>
1a001262:	e7ba      	b.n	1a0011da <server+0x72>
			}
			else
			{
				stdioPrintf(UART_USB, "\n\rError al configurar servidor HTTP.");
1a001264:	4905      	ldr	r1, [pc, #20]	; (1a00127c <server+0x114>)
1a001266:	2003      	movs	r0, #3
1a001268:	f005 f80a 	bl	1a006280 <stdioPrintf>
				// Enciende LEDR indicando que el modulo esta en error.
				gpioWrite(LEDR, TRUE);
1a00126c:	2101      	movs	r1, #1
1a00126e:	2028      	movs	r0, #40	; 0x28
1a001270:	f004 fdb0 	bl	1a005dd4 <gpioWrite>
1a001274:	e7b1      	b.n	1a0011da <server+0x72>
1a001276:	bf00      	nop
1a001278:	1a007784 	.word	0x1a007784
1a00127c:	1a0077a8 	.word	0x1a0077a8
1a001280:	10006200 	.word	0x10006200
1a001284:	1a0077d0 	.word	0x1a0077d0

1a001288 <EspRxCallback>:
}


// Callback para la recepción serie
void EspRxCallback(void *param)
{
1a001288:	b530      	push	{r4, r5, lr}
1a00128a:	b083      	sub	sp, #12
1a00128c:	4604      	mov	r4, r0

	//Paso por param los datos del puerto
	UARTData_t* UARTData = (UARTData_t*) param;


	gpioWrite( LED2, true );
1a00128e:	2101      	movs	r1, #1
1a001290:	202c      	movs	r0, #44	; 0x2c
1a001292:	f004 fd9f 	bl	1a005dd4 <gpioWrite>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001296:	f3ef 8511 	mrs	r5, BASEPRI
1a00129a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00129e:	f383 8811 	msr	BASEPRI, r3
1a0012a2:	f3bf 8f6f 	isb	sy
1a0012a6:	f3bf 8f4f 	dsb	sy


	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	receivedData = uartRxRead(UARTData->uartValue);
1a0012aa:	7820      	ldrb	r0, [r4, #0]
1a0012ac:	f004 fbae 	bl	1a005a0c <uartRxRead>
1a0012b0:	f88d 0003 	strb.w	r0, [sp, #3]

	xQueueSendFromISR( UARTData->onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a0012b4:	2300      	movs	r3, #0
1a0012b6:	aa01      	add	r2, sp, #4
1a0012b8:	f10d 0103 	add.w	r1, sp, #3
1a0012bc:	68e0      	ldr	r0, [r4, #12]
1a0012be:	f001 fe4a 	bl	1a002f56 <xQueueGenericSendFromISR>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0012c2:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a0012c6:	9b01      	ldr	r3, [sp, #4]
1a0012c8:	b13b      	cbz	r3, 1a0012da <EspRxCallback+0x52>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a0012ca:	4b07      	ldr	r3, [pc, #28]	; (1a0012e8 <EspRxCallback+0x60>)
1a0012cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012d0:	601a      	str	r2, [r3, #0]
1a0012d2:	f3bf 8f4f 	dsb	sy
1a0012d6:	f3bf 8f6f 	isb	sy
	}

	gpioWrite( LED2, false );
1a0012da:	2100      	movs	r1, #0
1a0012dc:	202c      	movs	r0, #44	; 0x2c
1a0012de:	f004 fd79 	bl	1a005dd4 <gpioWrite>

}
1a0012e2:	b003      	add	sp, #12
1a0012e4:	bd30      	pop	{r4, r5, pc}
1a0012e6:	bf00      	nop
1a0012e8:	e000ed04 	.word	0xe000ed04

1a0012ec <UARTEspInit>:
{
1a0012ec:	b510      	push	{r4, lr}
1a0012ee:	4604      	mov	r4, r0
		UARTData->onRxQueue = xQueueCreate(ESP_IN_QUEUE_LEN, sizeof(uint8_t));
1a0012f0:	2200      	movs	r2, #0
1a0012f2:	2101      	movs	r1, #1
1a0012f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
1a0012f8:	f001 fd31 	bl	1a002d5e <xQueueGenericCreate>
1a0012fc:	60e0      	str	r0, [r4, #12]
		UARTData->onTxQueue = xQueueCreate(ESP_OUT_QUEUE_LEN, sizeof(uint8_t));
1a0012fe:	2200      	movs	r2, #0
1a001300:	2101      	movs	r1, #1
1a001302:	201e      	movs	r0, #30
1a001304:	f001 fd2b 	bl	1a002d5e <xQueueGenericCreate>
1a001308:	60a0      	str	r0, [r4, #8]
		if((UARTData->onRxQueue == NULL)||(UARTData->onTxQueue == NULL))
1a00130a:	68e3      	ldr	r3, [r4, #12]
1a00130c:	b183      	cbz	r3, 1a001330 <UARTEspInit+0x44>
1a00130e:	b188      	cbz	r0, 1a001334 <UARTEspInit+0x48>
	uartConfig(UARTData->uartValue, UARTData->baudRate);
1a001310:	6861      	ldr	r1, [r4, #4]
1a001312:	7820      	ldrb	r0, [r4, #0]
1a001314:	f004 fb8e 	bl	1a005a34 <uartInit>
	uartCallbackSet(UARTData->uartValue, UART_RECEIVE, EspRxCallback,(void*) UARTData);
1a001318:	4623      	mov	r3, r4
1a00131a:	4a07      	ldr	r2, [pc, #28]	; (1a001338 <UARTEspInit+0x4c>)
1a00131c:	2100      	movs	r1, #0
1a00131e:	7820      	ldrb	r0, [r4, #0]
1a001320:	f004 fade 	bl	1a0058e0 <uartCallbackSet>
	uartInterrupt(UARTData->uartValue, true);
1a001324:	2101      	movs	r1, #1
1a001326:	7820      	ldrb	r0, [r4, #0]
1a001328:	f004 fa92 	bl	1a005850 <uartInterrupt>
	return(true);
1a00132c:	2001      	movs	r0, #1
}
1a00132e:	bd10      	pop	{r4, pc}
			return (false);
1a001330:	2000      	movs	r0, #0
1a001332:	e7fc      	b.n	1a00132e <UARTEspInit+0x42>
1a001334:	2000      	movs	r0, #0
1a001336:	e7fa      	b.n	1a00132e <UARTEspInit+0x42>
1a001338:	1a001289 	.word	0x1a001289

1a00133c <receiveEspByte>:
	}

}

bool_t receiveEspByte(UARTData_t* UARTData,uint8_t *receivedByte,TickType_t timeout)
{
1a00133c:	b508      	push	{r3, lr}


	if (pdTRUE==xQueueReceive( UARTData->onRxQueue, ( void * ) receivedByte, timeout )) //Leo de la cola el dato recibido
1a00133e:	68c0      	ldr	r0, [r0, #12]
1a001340:	f001 fe70 	bl	1a003024 <xQueueReceive>
1a001344:	2801      	cmp	r0, #1
1a001346:	d000      	beq.n	1a00134a <receiveEspByte+0xe>
	{
		return true;
	}
	else
		return false;
1a001348:	2000      	movs	r0, #0

}
1a00134a:	bd08      	pop	{r3, pc}

1a00134c <pruebasInit>:
//static uint32_t parametersROM[TESTS_QTY][PARAM_NUM*PORTS_NUMBER];//Creo una matriz donde van a estar todos los parametros de cada test



bool_t pruebasInit ()
{
1a00134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001350:	b082      	sub	sp, #8
	//configuro la comunicacion con los puertos de prueba
	static portsConfig_t ports;
	//static UARTData_t UARTData;
	initEeprom();
1a001352:	f000 fe31 	bl	1a001fb8 <initEeprom>
	uint8_t i,j;
	ports.uartValue = UART_GPIO;
1a001356:	4820      	ldr	r0, [pc, #128]	; (1a0013d8 <pruebasInit+0x8c>)
1a001358:	2400      	movs	r4, #0
1a00135a:	7004      	strb	r4, [r0, #0]
	ports.baudRate = 460800;
1a00135c:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
1a001360:	6043      	str	r3, [r0, #4]
	portsdriverInit(&ports);
1a001362:	f001 f869 	bl	1a002438 <portsdriverInit>
	for (i=0;i<TESTS_QTY;i++)
1a001366:	e004      	b.n	1a001372 <pruebasInit+0x26>
		//for(j = 0; j < (PARAM_NUM * PORTS_NUMBER); j++) {
		//	parametersROM[i][j]=0;
		//}

		//taskENTER_CRITICAL(  );
			loadParametersUnprotected ((uint32_t) i); 	//Cargo los parametros desde la EEPROM
1a001368:	4620      	mov	r0, r4
1a00136a:	f000 fe61 	bl	1a002030 <loadParametersUnprotected>
	for (i=0;i<TESTS_QTY;i++)
1a00136e:	3401      	adds	r4, #1
1a001370:	b2e4      	uxtb	r4, r4
1a001372:	2c02      	cmp	r4, #2
1a001374:	d9f8      	bls.n	1a001368 <pruebasInit+0x1c>

		//taskEXIT_CRITICAL(  );
	}

	//Inicializo el vector de datos y comunicacion de los tests
	for (i=0;i<PORTS_NUMBER;i++)
1a001376:	2400      	movs	r4, #0
1a001378:	e029      	b.n	1a0013ce <pruebasInit+0x82>
	{
		FSMRegisters[i].port = ports.port[i]; //Asigno las colas del puerto de pruebas
1a00137a:	4f18      	ldr	r7, [pc, #96]	; (1a0013dc <pruebasInit+0x90>)
1a00137c:	00e5      	lsls	r5, r4, #3
1a00137e:	192b      	adds	r3, r5, r4
1a001380:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
1a001384:	eb07 080c 	add.w	r8, r7, ip
1a001388:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a00138c:	009a      	lsls	r2, r3, #2
1a00138e:	4b12      	ldr	r3, [pc, #72]	; (1a0013d8 <pruebasInit+0x8c>)
1a001390:	4413      	add	r3, r2
1a001392:	f108 0624 	add.w	r6, r8, #36	; 0x24
1a001396:	330c      	adds	r3, #12
1a001398:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a00139c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		FSMRegisters[i].test = 0;
1a0013a0:	2600      	movs	r6, #0
1a0013a2:	f807 600c 	strb.w	r6, [r7, ip]
		FSMRegisters[i].state = INIT;
1a0013a6:	f888 6001 	strb.w	r6, [r8, #1]
		FSMRegisters[i].testControlQueue = xQueueCreate(CONTROL_QUEUE_LEN,sizeof(testOrder_t)); //Creo la cola por donde llegan las ordenes para la tarea de pruebas
1a0013aa:	4632      	mov	r2, r6
1a0013ac:	2102      	movs	r1, #2
1a0013ae:	200a      	movs	r0, #10
1a0013b0:	f001 fcd5 	bl	1a002d5e <xQueueGenericCreate>
1a0013b4:	f8c8 0020 	str.w	r0, [r8, #32]


		//Creo la tarea de la prueb y le paso el registro de datos
		xTaskCreate(
1a0013b8:	9601      	str	r6, [sp, #4]
1a0013ba:	2201      	movs	r2, #1
1a0013bc:	9200      	str	r2, [sp, #0]
1a0013be:	4643      	mov	r3, r8
1a0013c0:	225a      	movs	r2, #90	; 0x5a
1a0013c2:	4907      	ldr	r1, [pc, #28]	; (1a0013e0 <pruebasInit+0x94>)
1a0013c4:	4807      	ldr	r0, [pc, #28]	; (1a0013e4 <pruebasInit+0x98>)
1a0013c6:	f002 faa4 	bl	1a003912 <xTaskCreate>
	for (i=0;i<PORTS_NUMBER;i++)
1a0013ca:	3401      	adds	r4, #1
1a0013cc:	b2e4      	uxtb	r4, r4
1a0013ce:	2c05      	cmp	r4, #5
1a0013d0:	d9d3      	bls.n	1a00137a <pruebasInit+0x2e>
			(void*)&FSMRegisters[i],    // Parameter passed into the task.
			tskIDLE_PRIORITY+1,         // Priority at which the task is created.
			0                           // Pointer to the task created in the system
		);
	}
}
1a0013d2:	b002      	add	sp, #8
1a0013d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0013d8:	10001f10 	.word	0x10001f10
1a0013dc:	10006204 	.word	0x10006204
1a0013e0:	1a007804 	.word	0x1a007804
1a0013e4:	1a001c8f 	.word	0x1a001c8f

1a0013e8 <setTestOrder>:
   }
}


bool_t setTestOrder (uint8_t portNum, uint8_t testNum, uint8_t testState )
{
1a0013e8:	b510      	push	{r4, lr}
1a0013ea:	b082      	sub	sp, #8
	testOrder_t order;
	order.state = testState;
1a0013ec:	f88d 2005 	strb.w	r2, [sp, #5]
	order.test = testNum;
1a0013f0:	ac02      	add	r4, sp, #8
1a0013f2:	f804 1d04 	strb.w	r1, [r4, #-4]!

	if (pdTRUE == xQueueSend(FSMRegisters[portNum].testControlQueue, &order,0))
1a0013f6:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
1a0013fa:	00c3      	lsls	r3, r0, #3
1a0013fc:	4806      	ldr	r0, [pc, #24]	; (1a001418 <setTestOrder+0x30>)
1a0013fe:	4418      	add	r0, r3
1a001400:	2300      	movs	r3, #0
1a001402:	461a      	mov	r2, r3
1a001404:	4621      	mov	r1, r4
1a001406:	6a00      	ldr	r0, [r0, #32]
1a001408:	f001 fcd0 	bl	1a002dac <xQueueGenericSend>
1a00140c:	2801      	cmp	r0, #1
1a00140e:	d000      	beq.n	1a001412 <setTestOrder+0x2a>
		return true;
	else
		return false;
1a001410:	2000      	movs	r0, #0

}
1a001412:	b002      	add	sp, #8
1a001414:	bd10      	pop	{r4, pc}
1a001416:	bf00      	nop
1a001418:	10006204 	.word	0x10006204

1a00141c <sendToAllTests>:

bool_t sendToAllTests ( uint8_t testNum, uint8_t testState )
{
1a00141c:	b530      	push	{r4, r5, lr}
1a00141e:	b083      	sub	sp, #12
	bool_t ret;
	testOrder_t order;
	uint8_t portNum;
	order.state = testState;
1a001420:	f88d 1005 	strb.w	r1, [sp, #5]
	order.test = testNum;
1a001424:	f88d 0004 	strb.w	r0, [sp, #4]
	ret= true;
	for (portNum = 0;portNum<PORTS_NUMBER;portNum++)
1a001428:	2400      	movs	r4, #0
	ret= true;
1a00142a:	2501      	movs	r5, #1
	for (portNum = 0;portNum<PORTS_NUMBER;portNum++)
1a00142c:	e001      	b.n	1a001432 <sendToAllTests+0x16>
1a00142e:	3401      	adds	r4, #1
1a001430:	b2e4      	uxtb	r4, r4
1a001432:	2c05      	cmp	r4, #5
1a001434:	d80e      	bhi.n	1a001454 <sendToAllTests+0x38>
	{
		if (pdTRUE != xQueueSend(FSMRegisters[portNum].testControlQueue, &order,0))
1a001436:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
1a00143a:	00d3      	lsls	r3, r2, #3
1a00143c:	4812      	ldr	r0, [pc, #72]	; (1a001488 <sendToAllTests+0x6c>)
1a00143e:	4418      	add	r0, r3
1a001440:	2300      	movs	r3, #0
1a001442:	461a      	mov	r2, r3
1a001444:	a901      	add	r1, sp, #4
1a001446:	6a00      	ldr	r0, [r0, #32]
1a001448:	f001 fcb0 	bl	1a002dac <xQueueGenericSend>
1a00144c:	2801      	cmp	r0, #1
1a00144e:	d0ee      	beq.n	1a00142e <sendToAllTests+0x12>
			ret =false;
1a001450:	2500      	movs	r5, #0
1a001452:	e7ec      	b.n	1a00142e <sendToAllTests+0x12>
	}
	portNum = 0;
1a001454:	2300      	movs	r3, #0
1a001456:	e001      	b.n	1a00145c <sendToAllTests+0x40>
	while (portNum <(PORTS_NUMBER-1))
	{
		if (FSMRegisters[portNum].state==STOP)
			portNum++;
1a001458:	3301      	adds	r3, #1
1a00145a:	b2db      	uxtb	r3, r3
	while (portNum <(PORTS_NUMBER-1))
1a00145c:	2b04      	cmp	r3, #4
1a00145e:	d810      	bhi.n	1a001482 <sendToAllTests+0x66>
		if (FSMRegisters[portNum].state==STOP)
1a001460:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
1a001464:	00d1      	lsls	r1, r2, #3
1a001466:	4a08      	ldr	r2, [pc, #32]	; (1a001488 <sendToAllTests+0x6c>)
1a001468:	440a      	add	r2, r1
1a00146a:	7852      	ldrb	r2, [r2, #1]
1a00146c:	2a21      	cmp	r2, #33	; 0x21
1a00146e:	d0f3      	beq.n	1a001458 <sendToAllTests+0x3c>
		else
			taskYIELD();
1a001470:	4a06      	ldr	r2, [pc, #24]	; (1a00148c <sendToAllTests+0x70>)
1a001472:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
1a001476:	6011      	str	r1, [r2, #0]
1a001478:	f3bf 8f4f 	dsb	sy
1a00147c:	f3bf 8f6f 	isb	sy
1a001480:	e7ec      	b.n	1a00145c <sendToAllTests+0x40>
	}

return ret;
}
1a001482:	4628      	mov	r0, r5
1a001484:	b003      	add	sp, #12
1a001486:	bd30      	pop	{r4, r5, pc}
1a001488:	10006204 	.word	0x10006204
1a00148c:	e000ed04 	.word	0xe000ed04

1a001490 <getTestsState>:

uint8_t getTestsState (uint8_t portNum)
{
	return FSMRegisters[portNum].state;
1a001490:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
1a001494:	00c2      	lsls	r2, r0, #3
1a001496:	4b02      	ldr	r3, [pc, #8]	; (1a0014a0 <getTestsState+0x10>)
1a001498:	4413      	add	r3, r2
}
1a00149a:	7858      	ldrb	r0, [r3, #1]
1a00149c:	4770      	bx	lr
1a00149e:	bf00      	nop
1a0014a0:	10006204 	.word	0x10006204

1a0014a4 <FSMPruebaDrivers>:
//Entradas analogicas
//0 = Corriente * 1.25
//1 = Tension /160

void FSMPruebaDrivers(testState_t *FSMReg)
{
1a0014a4:	b570      	push	{r4, r5, r6, lr}
1a0014a6:	b086      	sub	sp, #24
1a0014a8:	4604      	mov	r4, r0
	static uint8_t ADC_V[10];
	static uint8_t ADC_I[10];



	receiveDataPort(&testPort,&ADC1DataTemp,&ADC2DataTemp, &digInTemp,0);
1a0014aa:	f100 0524 	add.w	r5, r0, #36	; 0x24
1a0014ae:	2300      	movs	r3, #0
1a0014b0:	9300      	str	r3, [sp, #0]
1a0014b2:	f10d 0313 	add.w	r3, sp, #19
1a0014b6:	aa05      	add	r2, sp, #20
1a0014b8:	f10d 0116 	add.w	r1, sp, #22
1a0014bc:	4628      	mov	r0, r5
1a0014be:	f001 f831 	bl	1a002524 <receiveDataPort>
	/*------Maquina de estados------*/

	switch (FSMReg->state)
1a0014c2:	7863      	ldrb	r3, [r4, #1]
1a0014c4:	2b21      	cmp	r3, #33	; 0x21
1a0014c6:	f200 8171 	bhi.w	1a0017ac <FSMPruebaDrivers+0x308>
1a0014ca:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0014ce:	0022      	.short	0x0022
1a0014d0:	016f016f 	.word	0x016f016f
1a0014d4:	0032016f 	.word	0x0032016f
1a0014d8:	0078005c 	.word	0x0078005c
1a0014dc:	00bd009c 	.word	0x00bd009c
1a0014e0:	016f016f 	.word	0x016f016f
1a0014e4:	016f016f 	.word	0x016f016f
1a0014e8:	016f016f 	.word	0x016f016f
1a0014ec:	016f016f 	.word	0x016f016f
1a0014f0:	016f016f 	.word	0x016f016f
1a0014f4:	016f016f 	.word	0x016f016f
1a0014f8:	016f016f 	.word	0x016f016f
1a0014fc:	016f016f 	.word	0x016f016f
1a001500:	016f016f 	.word	0x016f016f
1a001504:	016f016f 	.word	0x016f016f
1a001508:	016f016f 	.word	0x016f016f
1a00150c:	016f016f 	.word	0x016f016f
1a001510:	0161      	.short	0x0161
	{
	case INIT:
	{	//inicialización
		//Le quito la alimentación al driver.
		//digitalOuts = 0;
		digitalOuts = 0x05; //0110 Poweroff, loadOn, 10%
1a001512:	2205      	movs	r2, #5
1a001514:	6062      	str	r2, [r4, #4]
		digitalIn = 0;
1a001516:	2100      	movs	r1, #0
1a001518:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a00151a:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a00151c:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a00151e:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001520:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		//FSMReg->pasa=3;
		FSMReg->pasa=INIT;
1a001524:	7621      	strb	r1, [r4, #24]
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001526:	460b      	mov	r3, r1
1a001528:	4628      	mov	r0, r5
1a00152a:	f000 ffd7 	bl	1a0024dc <sendDataPort>

		break;
	}
	}
	return;
}
1a00152e:	b006      	add	sp, #24
1a001530:	bd70      	pop	{r4, r5, r6, pc}
			FSMReg->pasa=MARCHA-1;
1a001532:	2314      	movs	r3, #20
1a001534:	7623      	strb	r3, [r4, #24]
			switch(FSMReg->i){
1a001536:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a00153a:	2b01      	cmp	r3, #1
1a00153c:	d017      	beq.n	1a00156e <FSMPruebaDrivers+0xca>
1a00153e:	b18b      	cbz	r3, 1a001564 <FSMPruebaDrivers+0xc0>
1a001540:	2b02      	cmp	r3, #2
1a001542:	d01a      	beq.n	1a00157a <FSMPruebaDrivers+0xd6>
		FSMReg->adcSamples=0;
1a001544:	2300      	movs	r3, #0
1a001546:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		FSMReg->ADC_1=0;
1a00154a:	63a3      	str	r3, [r4, #56]	; 0x38
		FSMReg->ADC_2=0;
1a00154c:	63e3      	str	r3, [r4, #60]	; 0x3c
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a00154e:	7922      	ldrb	r2, [r4, #4]
1a001550:	89a1      	ldrh	r1, [r4, #12]
1a001552:	4628      	mov	r0, r5
1a001554:	f000 ffc2 	bl	1a0024dc <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a001558:	f002 fa60 	bl	1a003a1c <xTaskGetTickCount>
1a00155c:	6360      	str	r0, [r4, #52]	; 0x34
		FSMReg->state= WAIT_5S;
1a00155e:	2305      	movs	r3, #5
1a001560:	7063      	strb	r3, [r4, #1]
		break;
1a001562:	e7e4      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
				digitalOuts = 0x05; //0110 Poweroff, loadOn, 10%
1a001564:	2305      	movs	r3, #5
1a001566:	6063      	str	r3, [r4, #4]
				Vout =102; //10%
1a001568:	2366      	movs	r3, #102	; 0x66
1a00156a:	60e3      	str	r3, [r4, #12]
				break;
1a00156c:	e7ea      	b.n	1a001544 <FSMPruebaDrivers+0xa0>
				digitalOuts = 0x04; //0100 Poweroff, loadOn, 50%
1a00156e:	2304      	movs	r3, #4
1a001570:	6063      	str	r3, [r4, #4]
				Vout =510; //50%
1a001572:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
1a001576:	60e3      	str	r3, [r4, #12]
				break;
1a001578:	e7e4      	b.n	1a001544 <FSMPruebaDrivers+0xa0>
				digitalOuts = 0x06; //0101 Poweroff, loadOn, 100%
1a00157a:	2306      	movs	r3, #6
1a00157c:	6063      	str	r3, [r4, #4]
				Vout =1023; //100%
1a00157e:	f240 33ff 	movw	r3, #1023	; 0x3ff
1a001582:	60e3      	str	r3, [r4, #12]
				break;
1a001584:	e7de      	b.n	1a001544 <FSMPruebaDrivers+0xa0>
		tempTick = xTaskGetTickCount(); //Tomo el estado actual del tick y luego comparo con el valor al inicio
1a001586:	f002 fa49 	bl	1a003a1c <xTaskGetTickCount>
1a00158a:	9003      	str	r0, [sp, #12]
		if (tempTick >= FSMReg->tickRegister) //chequeo que el Tick counter no se haya reiniciado
1a00158c:	6b62      	ldr	r2, [r4, #52]	; 0x34
1a00158e:	9b03      	ldr	r3, [sp, #12]
1a001590:	429a      	cmp	r2, r3
1a001592:	d808      	bhi.n	1a0015a6 <FSMPruebaDrivers+0x102>
			if ((tempTick - FSMReg->tickRegister)
1a001594:	9b03      	ldr	r3, [sp, #12]
1a001596:	1a9b      	subs	r3, r3, r2
1a001598:	f241 3288 	movw	r2, #5000	; 0x1388
1a00159c:	4293      	cmp	r3, r2
1a00159e:	d9c6      	bls.n	1a00152e <FSMPruebaDrivers+0x8a>
				FSMReg->state= POWER_ON;
1a0015a0:	2306      	movs	r3, #6
1a0015a2:	7063      	strb	r3, [r4, #1]
1a0015a4:	e7c3      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
			if ((tempTick + (0xFFFF - FSMReg->tickRegister))
1a0015a6:	9b03      	ldr	r3, [sp, #12]
1a0015a8:	1a9b      	subs	r3, r3, r2
1a0015aa:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a0015ae:	33ff      	adds	r3, #255	; 0xff
1a0015b0:	f241 3288 	movw	r2, #5000	; 0x1388
1a0015b4:	4293      	cmp	r3, r2
1a0015b6:	d9ba      	bls.n	1a00152e <FSMPruebaDrivers+0x8a>
				FSMReg->state= POWER_ON;
1a0015b8:	2306      	movs	r3, #6
1a0015ba:	7063      	strb	r3, [r4, #1]
1a0015bc:	e7b7      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
			switch(FSMReg->i){
1a0015be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a0015c2:	2b01      	cmp	r3, #1
1a0015c4:	d013      	beq.n	1a0015ee <FSMPruebaDrivers+0x14a>
1a0015c6:	b16b      	cbz	r3, 1a0015e4 <FSMPruebaDrivers+0x140>
1a0015c8:	2b02      	cmp	r3, #2
1a0015ca:	d016      	beq.n	1a0015fa <FSMPruebaDrivers+0x156>
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a0015cc:	2300      	movs	r3, #0
1a0015ce:	7922      	ldrb	r2, [r4, #4]
1a0015d0:	89a1      	ldrh	r1, [r4, #12]
1a0015d2:	4628      	mov	r0, r5
1a0015d4:	f000 ff82 	bl	1a0024dc <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a0015d8:	f002 fa20 	bl	1a003a1c <xTaskGetTickCount>
1a0015dc:	6360      	str	r0, [r4, #52]	; 0x34
		FSMReg->state= WAIT_5S2;
1a0015de:	2307      	movs	r3, #7
1a0015e0:	7063      	strb	r3, [r4, #1]
		break;
1a0015e2:	e7a4      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
				digitalOuts = 0x0D; //1110 Poweron, loadOn, 10%
1a0015e4:	230d      	movs	r3, #13
1a0015e6:	6063      	str	r3, [r4, #4]
				Vout =102; //10%
1a0015e8:	2366      	movs	r3, #102	; 0x66
1a0015ea:	60e3      	str	r3, [r4, #12]
				break;
1a0015ec:	e7ee      	b.n	1a0015cc <FSMPruebaDrivers+0x128>
				digitalOuts = 0x0C; //1100 Poweron, loadOn, 50%
1a0015ee:	230c      	movs	r3, #12
1a0015f0:	6063      	str	r3, [r4, #4]
				Vout =510; //50%
1a0015f2:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
1a0015f6:	60e3      	str	r3, [r4, #12]
				break;
1a0015f8:	e7e8      	b.n	1a0015cc <FSMPruebaDrivers+0x128>
				digitalOuts = 0x0E; //1101 Poweron, loadOn, 100%
1a0015fa:	230e      	movs	r3, #14
1a0015fc:	6063      	str	r3, [r4, #4]
				Vout =1023; //100%
1a0015fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
1a001602:	60e3      	str	r3, [r4, #12]
				break;
1a001604:	e7e2      	b.n	1a0015cc <FSMPruebaDrivers+0x128>
		tempTick = xTaskGetTickCount(); //Tomo el estado actual del tick y luego comparo con el valor al inicio
1a001606:	f002 fa09 	bl	1a003a1c <xTaskGetTickCount>
1a00160a:	9003      	str	r0, [sp, #12]
		if (tempTick >= FSMReg->tickRegister) //chequeo que el Tick counter no se haya reiniciado
1a00160c:	6b62      	ldr	r2, [r4, #52]	; 0x34
1a00160e:	9b03      	ldr	r3, [sp, #12]
1a001610:	429a      	cmp	r2, r3
1a001612:	d808      	bhi.n	1a001626 <FSMPruebaDrivers+0x182>
			if ((tempTick - FSMReg->tickRegister)
1a001614:	9b03      	ldr	r3, [sp, #12]
1a001616:	1a9b      	subs	r3, r3, r2
1a001618:	f241 3288 	movw	r2, #5000	; 0x1388
1a00161c:	4293      	cmp	r3, r2
1a00161e:	d986      	bls.n	1a00152e <FSMPruebaDrivers+0x8a>
				FSMReg->state= MEASURE;
1a001620:	2308      	movs	r3, #8
1a001622:	7063      	strb	r3, [r4, #1]
1a001624:	e783      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
			if ((tempTick + (0xFFFF - FSMReg->tickRegister))
1a001626:	9b03      	ldr	r3, [sp, #12]
1a001628:	1a9b      	subs	r3, r3, r2
1a00162a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a00162e:	33ff      	adds	r3, #255	; 0xff
1a001630:	f241 3288 	movw	r2, #5000	; 0x1388
1a001634:	4293      	cmp	r3, r2
1a001636:	f67f af7a 	bls.w	1a00152e <FSMPruebaDrivers+0x8a>
				FSMReg->state= MEASURE;
1a00163a:	2308      	movs	r3, #8
1a00163c:	7063      	strb	r3, [r4, #1]
				xQueueReset( FSMReg->port.onRxQueue ); //Reinicio la cola para no leer datos viejos
1a00163e:	2100      	movs	r1, #0
1a001640:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a001642:	f001 faf1 	bl	1a002c28 <xQueueGenericReset>
1a001646:	e772      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
		FSMReg->adcSamples++;
1a001648:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
1a00164c:	3301      	adds	r3, #1
1a00164e:	b2db      	uxtb	r3, r3
1a001650:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		FSMReg->ADC_1+=ADC1DataTemp;
1a001654:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
1a001658:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00165a:	4411      	add	r1, r2
1a00165c:	63a1      	str	r1, [r4, #56]	; 0x38
		FSMReg->ADC_2+=ADC2DataTemp;
1a00165e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
1a001662:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001664:	4402      	add	r2, r0
1a001666:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (FSMReg->adcSamples==20)		//una vez tomadas las 20 muestras evaluo el resultado
1a001668:	2b14      	cmp	r3, #20
1a00166a:	f47f af60 	bne.w	1a00152e <FSMPruebaDrivers+0x8a>
			Iin= ((ADC1Gain*FSMReg->ADC_1)/FSMReg->adcSamples)+(ADC_OFFSET*ADC1Gain);
1a00166e:	69e0      	ldr	r0, [r4, #28]
1a001670:	6885      	ldr	r5, [r0, #8]
1a001672:	fb05 f101 	mul.w	r1, r5, r1
1a001676:	fbb1 f1f3 	udiv	r1, r1, r3
1a00167a:	eb01 1145 	add.w	r1, r1, r5, lsl #5
1a00167e:	6161      	str	r1, [r4, #20]
			Vin= ((ADC2Gain*FSMReg->ADC_2)/FSMReg->adcSamples)+(ADC_OFFSET*ADC2Gain);
1a001680:	68c5      	ldr	r5, [r0, #12]
1a001682:	fb05 f202 	mul.w	r2, r5, r2
1a001686:	fbb2 f3f3 	udiv	r3, r2, r3
1a00168a:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a00168e:	6123      	str	r3, [r4, #16]
			FSMReg->adcSamples=0;
1a001690:	2200      	movs	r2, #0
1a001692:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
			FSMReg->ADC_1=0;
1a001696:	63a2      	str	r2, [r4, #56]	; 0x38
			FSMReg->ADC_2=0;
1a001698:	63e2      	str	r2, [r4, #60]	; 0x3c
			switch(FSMReg->i){
1a00169a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00169e:	2a01      	cmp	r2, #1
1a0016a0:	d02b      	beq.n	1a0016fa <FSMPruebaDrivers+0x256>
1a0016a2:	b142      	cbz	r2, 1a0016b6 <FSMPruebaDrivers+0x212>
1a0016a4:	2a02      	cmp	r2, #2
1a0016a6:	d04c      	beq.n	1a001742 <FSMPruebaDrivers+0x29e>
		if(FSMReg->i==3)
1a0016a8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a0016ac:	2b03      	cmp	r3, #3
1a0016ae:	d06c      	beq.n	1a00178a <FSMPruebaDrivers+0x2e6>
			FSMReg->state= POWER_ON;
1a0016b0:	2306      	movs	r3, #6
1a0016b2:	7063      	strb	r3, [r4, #1]
1a0016b4:	e73b      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
				if ((Iin < 150 *testCurrent)&&(Iin > 50 *testCurrent)&&			//Entre 8% y 15% de la corriente
1a0016b6:	6846      	ldr	r6, [r0, #4]
1a0016b8:	2596      	movs	r5, #150	; 0x96
1a0016ba:	fb05 f506 	mul.w	r5, r5, r6
1a0016be:	42a9      	cmp	r1, r5
1a0016c0:	d215      	bcs.n	1a0016ee <FSMPruebaDrivers+0x24a>
1a0016c2:	2532      	movs	r5, #50	; 0x32
1a0016c4:	fb05 f606 	mul.w	r6, r5, r6
1a0016c8:	42b1      	cmp	r1, r6
1a0016ca:	d910      	bls.n	1a0016ee <FSMPruebaDrivers+0x24a>
					(Vin < 1100 *testVoltage)&&(Vin > 700 *testVoltage))		//Entre 70% y 110% de la tension
1a0016cc:	6800      	ldr	r0, [r0, #0]
1a0016ce:	f240 414c 	movw	r1, #1100	; 0x44c
1a0016d2:	fb01 f100 	mul.w	r1, r1, r0
				if ((Iin < 150 *testCurrent)&&(Iin > 50 *testCurrent)&&			//Entre 8% y 15% de la corriente
1a0016d6:	428b      	cmp	r3, r1
1a0016d8:	d209      	bcs.n	1a0016ee <FSMPruebaDrivers+0x24a>
					(Vin < 1100 *testVoltage)&&(Vin > 700 *testVoltage))		//Entre 70% y 110% de la tension
1a0016da:	f44f 712f 	mov.w	r1, #700	; 0x2bc
1a0016de:	fb01 f000 	mul.w	r0, r1, r0
1a0016e2:	4283      	cmp	r3, r0
1a0016e4:	d903      	bls.n	1a0016ee <FSMPruebaDrivers+0x24a>
					FSMReg->i++;
1a0016e6:	3201      	adds	r2, #1
1a0016e8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a0016ec:	e7dc      	b.n	1a0016a8 <FSMPruebaDrivers+0x204>
					FSMReg->i=3;
1a0016ee:	2303      	movs	r3, #3
1a0016f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->pasa= NO_PASA;
1a0016f4:	2322      	movs	r3, #34	; 0x22
1a0016f6:	7623      	strb	r3, [r4, #24]
1a0016f8:	e7d6      	b.n	1a0016a8 <FSMPruebaDrivers+0x204>
				if ((Iin < 550 *testCurrent)&&(Iin > 450 *testCurrent)&&		//Entre 45% y 55% de la corriente
1a0016fa:	6846      	ldr	r6, [r0, #4]
1a0016fc:	f240 2526 	movw	r5, #550	; 0x226
1a001700:	fb05 f506 	mul.w	r5, r5, r6
1a001704:	42a9      	cmp	r1, r5
1a001706:	d216      	bcs.n	1a001736 <FSMPruebaDrivers+0x292>
1a001708:	f44f 75e1 	mov.w	r5, #450	; 0x1c2
1a00170c:	fb05 f606 	mul.w	r6, r5, r6
1a001710:	42b1      	cmp	r1, r6
1a001712:	d910      	bls.n	1a001736 <FSMPruebaDrivers+0x292>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))		//Entre 90% y 110% de la tension
1a001714:	6800      	ldr	r0, [r0, #0]
1a001716:	f240 414c 	movw	r1, #1100	; 0x44c
1a00171a:	fb01 f100 	mul.w	r1, r1, r0
				if ((Iin < 550 *testCurrent)&&(Iin > 450 *testCurrent)&&		//Entre 45% y 55% de la corriente
1a00171e:	428b      	cmp	r3, r1
1a001720:	d209      	bcs.n	1a001736 <FSMPruebaDrivers+0x292>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))		//Entre 90% y 110% de la tension
1a001722:	f44f 7161 	mov.w	r1, #900	; 0x384
1a001726:	fb01 f000 	mul.w	r0, r1, r0
1a00172a:	4283      	cmp	r3, r0
1a00172c:	d903      	bls.n	1a001736 <FSMPruebaDrivers+0x292>
					FSMReg->i++;
1a00172e:	3201      	adds	r2, #1
1a001730:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a001734:	e7b8      	b.n	1a0016a8 <FSMPruebaDrivers+0x204>
					FSMReg->i=3;
1a001736:	2303      	movs	r3, #3
1a001738:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->pasa= NO_PASA;
1a00173c:	2322      	movs	r3, #34	; 0x22
1a00173e:	7623      	strb	r3, [r4, #24]
1a001740:	e7b2      	b.n	1a0016a8 <FSMPruebaDrivers+0x204>
				if ((Iin < 1100 *testCurrent)&&(Iin > 900 *testCurrent)&&		//Entre 9% y 110% de la corriente
1a001742:	6846      	ldr	r6, [r0, #4]
1a001744:	f240 454c 	movw	r5, #1100	; 0x44c
1a001748:	fb05 f506 	mul.w	r5, r5, r6
1a00174c:	42a9      	cmp	r1, r5
1a00174e:	d216      	bcs.n	1a00177e <FSMPruebaDrivers+0x2da>
1a001750:	f44f 7561 	mov.w	r5, #900	; 0x384
1a001754:	fb05 f606 	mul.w	r6, r5, r6
1a001758:	42b1      	cmp	r1, r6
1a00175a:	d910      	bls.n	1a00177e <FSMPruebaDrivers+0x2da>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))		//Entre 90% y 110% de la tension
1a00175c:	6800      	ldr	r0, [r0, #0]
1a00175e:	f240 414c 	movw	r1, #1100	; 0x44c
1a001762:	fb01 f100 	mul.w	r1, r1, r0
				if ((Iin < 1100 *testCurrent)&&(Iin > 900 *testCurrent)&&		//Entre 9% y 110% de la corriente
1a001766:	428b      	cmp	r3, r1
1a001768:	d209      	bcs.n	1a00177e <FSMPruebaDrivers+0x2da>
					(Vin < 1100 *testVoltage)&&(Vin > 900 *testVoltage))		//Entre 90% y 110% de la tension
1a00176a:	fb05 f000 	mul.w	r0, r5, r0
1a00176e:	4283      	cmp	r3, r0
1a001770:	d905      	bls.n	1a00177e <FSMPruebaDrivers+0x2da>
					FSMReg->i++;
1a001772:	3201      	adds	r2, #1
1a001774:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
					FSMReg->pasa = PASA;
1a001778:	2317      	movs	r3, #23
1a00177a:	7623      	strb	r3, [r4, #24]
1a00177c:	e794      	b.n	1a0016a8 <FSMPruebaDrivers+0x204>
					FSMReg->i=3;
1a00177e:	2303      	movs	r3, #3
1a001780:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->pasa= NO_PASA;
1a001784:	2322      	movs	r3, #34	; 0x22
1a001786:	7623      	strb	r3, [r4, #24]
1a001788:	e78e      	b.n	1a0016a8 <FSMPruebaDrivers+0x204>
			FSMReg->state= STOP;
1a00178a:	2321      	movs	r3, #33	; 0x21
1a00178c:	7063      	strb	r3, [r4, #1]
1a00178e:	e6ce      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
		digitalOuts = 0x05; //0110 Poweroff, loadOn, 10%
1a001790:	2205      	movs	r2, #5
1a001792:	6062      	str	r2, [r4, #4]
		digitalIn = 0;
1a001794:	2100      	movs	r1, #0
1a001796:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001798:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a00179a:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a00179c:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a00179e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a0017a2:	460b      	mov	r3, r1
1a0017a4:	4628      	mov	r0, r5
1a0017a6:	f000 fe99 	bl	1a0024dc <sendDataPort>
	return;
1a0017aa:	e6c0      	b.n	1a00152e <FSMPruebaDrivers+0x8a>
		digitalOuts = 0;
1a0017ac:	2100      	movs	r1, #0
1a0017ae:	6061      	str	r1, [r4, #4]
		digitalIn = 0;
1a0017b0:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a0017b2:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a0017b4:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a0017b6:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a0017b8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a0017bc:	460b      	mov	r3, r1
1a0017be:	460a      	mov	r2, r1
1a0017c0:	4628      	mov	r0, r5
1a0017c2:	f000 fe8b 	bl	1a0024dc <sendDataPort>
	return;
1a0017c6:	e6b2      	b.n	1a00152e <FSMPruebaDrivers+0x8a>

1a0017c8 <checkTimeout>:


//Esta funcion devuelve true si ya paso el tiempo inciado por timeoutMS desde
// el instante indicado por initialTick, que debe ser una captura del tick del sistema opertivo
bool_t checkTimeout (uint32_t initialTick, uint32_t timeoutMS)
{
1a0017c8:	b538      	push	{r3, r4, r5, lr}
1a0017ca:	4604      	mov	r4, r0
1a0017cc:	460d      	mov	r5, r1
	uint32_t actualTick;
	bool_t ret;
	actualTick = xTaskGetTickCount();
1a0017ce:	f002 f925 	bl	1a003a1c <xTaskGetTickCount>
	ret= false;
	if (actualTick >= initialTick) //chequeo que el Tick counter no se haya reiniciado
1a0017d2:	42a0      	cmp	r0, r4
1a0017d4:	d304      	bcc.n	1a0017e0 <checkTimeout+0x18>
	{
		if ((actualTick - initialTick)> (timeoutMS * ((uint32_t) portTICK_PERIOD_MS)))
1a0017d6:	1b00      	subs	r0, r0, r4
1a0017d8:	42a8      	cmp	r0, r5
1a0017da:	d80b      	bhi.n	1a0017f4 <checkTimeout+0x2c>
	ret= false;
1a0017dc:	2000      	movs	r0, #0
1a0017de:	e006      	b.n	1a0017ee <checkTimeout+0x26>
				ret=true;
	}
	else //el Tick counter se reinicio
	{
		if ((actualTick + (0xFFFF - initialTick))> (timeoutMS * ((uint32_t) portTICK_PERIOD_MS)))
1a0017e0:	1b00      	subs	r0, r0, r4
1a0017e2:	f500 407f 	add.w	r0, r0, #65280	; 0xff00
1a0017e6:	30ff      	adds	r0, #255	; 0xff
1a0017e8:	42a8      	cmp	r0, r5
1a0017ea:	d901      	bls.n	1a0017f0 <checkTimeout+0x28>
			ret=true;
1a0017ec:	2001      	movs	r0, #1
	}
	return ret;
}
1a0017ee:	bd38      	pop	{r3, r4, r5, pc}
	ret= false;
1a0017f0:	2000      	movs	r0, #0
1a0017f2:	e7fc      	b.n	1a0017ee <checkTimeout+0x26>
				ret=true;
1a0017f4:	2001      	movs	r0, #1
1a0017f6:	e7fa      	b.n	1a0017ee <checkTimeout+0x26>

1a0017f8 <FSMPruebaTemporizadores>:
void FSMPruebaTemporizadores(testState_t *FSMReg){
1a0017f8:	b570      	push	{r4, r5, r6, lr}
1a0017fa:	b086      	sub	sp, #24
1a0017fc:	4604      	mov	r4, r0
	receiveDataPort(&testPort,&ADC1DataTemp,&ADC2DataTemp, &digInTemp,0);
1a0017fe:	f100 0524 	add.w	r5, r0, #36	; 0x24
1a001802:	2300      	movs	r3, #0
1a001804:	9300      	str	r3, [sp, #0]
1a001806:	f10d 030f 	add.w	r3, sp, #15
1a00180a:	aa04      	add	r2, sp, #16
1a00180c:	f10d 0112 	add.w	r1, sp, #18
1a001810:	4628      	mov	r0, r5
1a001812:	f000 fe87 	bl	1a002524 <receiveDataPort>
	switch (FSMReg->state)
1a001816:	7863      	ldrb	r3, [r4, #1]
1a001818:	2b23      	cmp	r3, #35	; 0x23
1a00181a:	f200 813c 	bhi.w	1a001a96 <FSMPruebaTemporizadores+0x29e>
1a00181e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a001822:	0024      	.short	0x0024
1a001824:	013a013a 	.word	0x013a013a
1a001828:	0035013a 	.word	0x0035013a
1a00182c:	013a013a 	.word	0x013a013a
1a001830:	013a013a 	.word	0x013a013a
1a001834:	0059013a 	.word	0x0059013a
1a001838:	00a2004c 	.word	0x00a2004c
1a00183c:	013a00dc 	.word	0x013a00dc
1a001840:	00420042 	.word	0x00420042
1a001844:	013a013a 	.word	0x013a013a
1a001848:	013a013a 	.word	0x013a013a
1a00184c:	013a013a 	.word	0x013a013a
1a001850:	013a013a 	.word	0x013a013a
1a001854:	013a013a 	.word	0x013a013a
1a001858:	013a013a 	.word	0x013a013a
1a00185c:	013a013a 	.word	0x013a013a
1a001860:	013a013a 	.word	0x013a013a
1a001864:	013a012c 	.word	0x013a012c
1a001868:	0070      	.short	0x0070
		digitalOuts = 0;
1a00186a:	2100      	movs	r1, #0
1a00186c:	6061      	str	r1, [r4, #4]
		digitalIn = 0;
1a00186e:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001870:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a001872:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a001874:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001876:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		FSMReg->pasa=3;
1a00187a:	2303      	movs	r3, #3
1a00187c:	7623      	strb	r3, [r4, #24]
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a00187e:	460b      	mov	r3, r1
1a001880:	460a      	mov	r2, r1
1a001882:	4628      	mov	r0, r5
1a001884:	f000 fe2a 	bl	1a0024dc <sendDataPort>
}
1a001888:	b006      	add	sp, #24
1a00188a:	bd70      	pop	{r4, r5, r6, pc}
		digitalOuts = 0x08;
1a00188c:	2208      	movs	r2, #8
1a00188e:	6062      	str	r2, [r4, #4]
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001890:	2300      	movs	r3, #0
1a001892:	89a1      	ldrh	r1, [r4, #12]
1a001894:	4628      	mov	r0, r5
1a001896:	f000 fe21 	bl	1a0024dc <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a00189a:	f002 f8bf 	bl	1a003a1c <xTaskGetTickCount>
1a00189e:	6360      	str	r0, [r4, #52]	; 0x34
		FSMReg->state= WAIT_SHORT_SETUP;
1a0018a0:	230f      	movs	r3, #15
1a0018a2:	7063      	strb	r3, [r4, #1]
		break;
1a0018a4:	e7f0      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		if (checkTimeout (FSMReg->tickRegister, 20000))
1a0018a6:	f644 6120 	movw	r1, #20000	; 0x4e20
1a0018aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a0018ac:	f7ff ff8c 	bl	1a0017c8 <checkTimeout>
1a0018b0:	2800      	cmp	r0, #0
1a0018b2:	d0e9      	beq.n	1a001888 <FSMPruebaTemporizadores+0x90>
			FSMReg->state= TRIGGER;
1a0018b4:	230b      	movs	r3, #11
1a0018b6:	7063      	strb	r3, [r4, #1]
1a0018b8:	e7e6      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		digitalOuts = 0x09;
1a0018ba:	2209      	movs	r2, #9
1a0018bc:	6062      	str	r2, [r4, #4]
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a0018be:	2300      	movs	r3, #0
1a0018c0:	89a1      	ldrh	r1, [r4, #12]
1a0018c2:	4628      	mov	r0, r5
1a0018c4:	f000 fe0a 	bl	1a0024dc <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a0018c8:	f002 f8a8 	bl	1a003a1c <xTaskGetTickCount>
1a0018cc:	6360      	str	r0, [r4, #52]	; 0x34
		FSMReg->state= WAIT_2S2;
1a0018ce:	230a      	movs	r3, #10
1a0018d0:	7063      	strb	r3, [r4, #1]
		break;
1a0018d2:	e7d9      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		if (checkTimeout (FSMReg->tickRegister, 2000))
1a0018d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
1a0018d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a0018da:	f7ff ff75 	bl	1a0017c8 <checkTimeout>
1a0018de:	2800      	cmp	r0, #0
1a0018e0:	d0d2      	beq.n	1a001888 <FSMPruebaTemporizadores+0x90>
			digitalOuts = 0x08; //Termino el pulso de disparo
1a0018e2:	2208      	movs	r2, #8
1a0018e4:	6062      	str	r2, [r4, #4]
			sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a0018e6:	2300      	movs	r3, #0
1a0018e8:	89a1      	ldrh	r1, [r4, #12]
1a0018ea:	4628      	mov	r0, r5
1a0018ec:	f000 fdf6 	bl	1a0024dc <sendDataPort>
			sumIn0=0;
1a0018f0:	2300      	movs	r3, #0
1a0018f2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
			FSMReg->tickRegister = xTaskGetTickCount(); //Leo el tick para hacer un timeout si no se enciende el temporizador
1a0018f6:	f002 f891 	bl	1a003a1c <xTaskGetTickCount>
1a0018fa:	6360      	str	r0, [r4, #52]	; 0x34
			FSMReg->state= WAIT_ON;
1a0018fc:	2323      	movs	r3, #35	; 0x23
1a0018fe:	7063      	strb	r3, [r4, #1]
1a001900:	e7c2      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		if (checkTimeout (FSMReg->tickRegister, 30000))
1a001902:	f247 5130 	movw	r1, #30000	; 0x7530
1a001906:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a001908:	f7ff ff5e 	bl	1a0017c8 <checkTimeout>
1a00190c:	b968      	cbnz	r0, 1a00192a <FSMPruebaTemporizadores+0x132>
		if (digInTemp&0x01)
1a00190e:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a001912:	f013 0f01 	tst.w	r3, #1
1a001916:	d01b      	beq.n	1a001950 <FSMPruebaTemporizadores+0x158>
			if (sumIn0<300) //Si estuvo al menos 300 ms encendido empiezo a contar
1a001918:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
1a00191c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
1a001920:	d20b      	bcs.n	1a00193a <FSMPruebaTemporizadores+0x142>
				sumIn0++;
1a001922:	3301      	adds	r3, #1
1a001924:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
1a001928:	e7ae      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
			FSMReg->i=2;
1a00192a:	2302      	movs	r3, #2
1a00192c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			FSMReg->pasa=NO_PASA;
1a001930:	2322      	movs	r3, #34	; 0x22
1a001932:	7623      	strb	r3, [r4, #24]
			FSMReg->state= STOP;
1a001934:	2321      	movs	r3, #33	; 0x21
1a001936:	7063      	strb	r3, [r4, #1]
			break;
1a001938:	e7a6      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
				tempTick = xTaskGetTickCount(); //Tomo el estado actual del tick y luego comparo con el valor al inicio
1a00193a:	f002 f86f 	bl	1a003a1c <xTaskGetTickCount>
1a00193e:	9005      	str	r0, [sp, #20]
				FSMReg->tickRegister = xTaskGetTickCount(); //Leo el tick para hacer un timeout si no se apaga el temporizador
1a001940:	f002 f86c 	bl	1a003a1c <xTaskGetTickCount>
1a001944:	6360      	str	r0, [r4, #52]	; 0x34
				digitalIn=0x01;
1a001946:	2301      	movs	r3, #1
1a001948:	60a3      	str	r3, [r4, #8]
				FSMReg->state= WAIT_OFF;
1a00194a:	230c      	movs	r3, #12
1a00194c:	7063      	strb	r3, [r4, #1]
1a00194e:	e79b      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
			tempTick = xTaskGetTickCount();
1a001950:	f002 f864 	bl	1a003a1c <xTaskGetTickCount>
1a001954:	9005      	str	r0, [sp, #20]
			if (sumIn0>0)
1a001956:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
1a00195a:	2b00      	cmp	r3, #0
1a00195c:	d094      	beq.n	1a001888 <FSMPruebaTemporizadores+0x90>
				sumIn0--;
1a00195e:	3b01      	subs	r3, #1
1a001960:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
1a001964:	e790      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		if (FSMReg->i==SHORT_TIME)
1a001966:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a00196a:	b92b      	cbnz	r3, 1a001978 <FSMPruebaTemporizadores+0x180>
			aux=1000*maxShort;
1a00196c:	69e2      	ldr	r2, [r4, #28]
1a00196e:	6852      	ldr	r2, [r2, #4]
1a001970:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
1a001974:	fb06 f602 	mul.w	r6, r6, r2
		if (FSMReg->i==LONG_TIME)
1a001978:	2b01      	cmp	r3, #1
1a00197a:	d013      	beq.n	1a0019a4 <FSMPruebaTemporizadores+0x1ac>
		if (checkTimeout (FSMReg->tickRegister, aux))
1a00197c:	4631      	mov	r1, r6
1a00197e:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a001980:	f7ff ff22 	bl	1a0017c8 <checkTimeout>
1a001984:	b9a8      	cbnz	r0, 1a0019b2 <FSMPruebaTemporizadores+0x1ba>
		if (digInTemp&0x01)
1a001986:	f89d 300f 	ldrb.w	r3, [sp, #15]
1a00198a:	f013 0f01 	tst.w	r3, #1
1a00198e:	d018      	beq.n	1a0019c2 <FSMPruebaTemporizadores+0x1ca>
			if (sumIn0<1000)
1a001990:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
1a001994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a001998:	f4bf af76 	bcs.w	1a001888 <FSMPruebaTemporizadores+0x90>
				sumIn0++;
1a00199c:	3301      	adds	r3, #1
1a00199e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
1a0019a2:	e771      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
			aux=1000*maxLong;
1a0019a4:	69e3      	ldr	r3, [r4, #28]
1a0019a6:	68db      	ldr	r3, [r3, #12]
1a0019a8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
1a0019ac:	fb06 f603 	mul.w	r6, r6, r3
1a0019b0:	e7e4      	b.n	1a00197c <FSMPruebaTemporizadores+0x184>
			FSMReg->i=2;
1a0019b2:	2302      	movs	r3, #2
1a0019b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			FSMReg->pasa=NO_PASA;
1a0019b8:	2322      	movs	r3, #34	; 0x22
1a0019ba:	7623      	strb	r3, [r4, #24]
			FSMReg->state= STOP;
1a0019bc:	2321      	movs	r3, #33	; 0x21
1a0019be:	7063      	strb	r3, [r4, #1]
			break;
1a0019c0:	e762      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
			if (sumIn0>0)
1a0019c2:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
1a0019c6:	b11b      	cbz	r3, 1a0019d0 <FSMPruebaTemporizadores+0x1d8>
				sumIn0--;
1a0019c8:	3b01      	subs	r3, #1
1a0019ca:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
1a0019ce:	e75b      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
				FSMReg->state= CHECK_TIME;
1a0019d0:	230d      	movs	r3, #13
1a0019d2:	7063      	strb	r3, [r4, #1]
				digitalIn=0x00;
1a0019d4:	2300      	movs	r3, #0
1a0019d6:	60a3      	str	r3, [r4, #8]
1a0019d8:	e756      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		tempTick = xTaskGetTickCount();
1a0019da:	f002 f81f 	bl	1a003a1c <xTaskGetTickCount>
1a0019de:	9005      	str	r0, [sp, #20]
		if (tempTick >FSMReg->tickRegister)
1a0019e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
1a0019e2:	9b05      	ldr	r3, [sp, #20]
1a0019e4:	429a      	cmp	r2, r3
1a0019e6:	d213      	bcs.n	1a001a10 <FSMPruebaTemporizadores+0x218>
			tempTick = (tempTick-FSMReg->tickRegister)/ (1000* portTICK_PERIOD_MS);
1a0019e8:	9b05      	ldr	r3, [sp, #20]
1a0019ea:	1a9b      	subs	r3, r3, r2
1a0019ec:	4a31      	ldr	r2, [pc, #196]	; (1a001ab4 <FSMPruebaTemporizadores+0x2bc>)
1a0019ee:	fba2 2303 	umull	r2, r3, r2, r3
1a0019f2:	099b      	lsrs	r3, r3, #6
1a0019f4:	9305      	str	r3, [sp, #20]
		switch(FSMReg->i){
1a0019f6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a0019fa:	b1a3      	cbz	r3, 1a001a26 <FSMPruebaTemporizadores+0x22e>
1a0019fc:	2b01      	cmp	r3, #1
1a0019fe:	d027      	beq.n	1a001a50 <FSMPruebaTemporizadores+0x258>
		if(FSMReg->i==2)
1a001a00:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a001a04:	2b02      	cmp	r3, #2
1a001a06:	f47f af3f 	bne.w	1a001888 <FSMPruebaTemporizadores+0x90>
			FSMReg->state= STOP;
1a001a0a:	2321      	movs	r3, #33	; 0x21
1a001a0c:	7063      	strb	r3, [r4, #1]
1a001a0e:	e73b      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
			tempTick = (tempTick + (0xFFFF - FSMReg->tickRegister))/ (1000* portTICK_PERIOD_MS);
1a001a10:	9b05      	ldr	r3, [sp, #20]
1a001a12:	1a9b      	subs	r3, r3, r2
1a001a14:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
1a001a18:	33ff      	adds	r3, #255	; 0xff
1a001a1a:	4a26      	ldr	r2, [pc, #152]	; (1a001ab4 <FSMPruebaTemporizadores+0x2bc>)
1a001a1c:	fba2 2303 	umull	r2, r3, r2, r3
1a001a20:	099b      	lsrs	r3, r3, #6
1a001a22:	9305      	str	r3, [sp, #20]
1a001a24:	e7e7      	b.n	1a0019f6 <FSMPruebaTemporizadores+0x1fe>
				if ((minShort < tempTick)&&(maxShort > tempTick))//Comparo el tiempo medido
1a001a26:	69e2      	ldr	r2, [r4, #28]
1a001a28:	6810      	ldr	r0, [r2, #0]
1a001a2a:	9905      	ldr	r1, [sp, #20]
1a001a2c:	4288      	cmp	r0, r1
1a001a2e:	d209      	bcs.n	1a001a44 <FSMPruebaTemporizadores+0x24c>
1a001a30:	6851      	ldr	r1, [r2, #4]
1a001a32:	9a05      	ldr	r2, [sp, #20]
1a001a34:	4291      	cmp	r1, r2
1a001a36:	d905      	bls.n	1a001a44 <FSMPruebaTemporizadores+0x24c>
					FSMReg->i++;
1a001a38:	3301      	adds	r3, #1
1a001a3a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->state= WAIT_LONG_SETUP;
1a001a3e:	2310      	movs	r3, #16
1a001a40:	7063      	strb	r3, [r4, #1]
1a001a42:	e7dd      	b.n	1a001a00 <FSMPruebaTemporizadores+0x208>
					FSMReg->i=2;
1a001a44:	2302      	movs	r3, #2
1a001a46:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->pasa=NO_PASA;
1a001a4a:	2322      	movs	r3, #34	; 0x22
1a001a4c:	7623      	strb	r3, [r4, #24]
1a001a4e:	e7d7      	b.n	1a001a00 <FSMPruebaTemporizadores+0x208>
				if ((minLong < tempTick)&&(maxLong > tempTick))//Comparo el tiempo medido
1a001a50:	69e2      	ldr	r2, [r4, #28]
1a001a52:	6890      	ldr	r0, [r2, #8]
1a001a54:	9905      	ldr	r1, [sp, #20]
1a001a56:	4288      	cmp	r0, r1
1a001a58:	d209      	bcs.n	1a001a6e <FSMPruebaTemporizadores+0x276>
1a001a5a:	68d1      	ldr	r1, [r2, #12]
1a001a5c:	9a05      	ldr	r2, [sp, #20]
1a001a5e:	4291      	cmp	r1, r2
1a001a60:	d905      	bls.n	1a001a6e <FSMPruebaTemporizadores+0x276>
					FSMReg->i++;
1a001a62:	3301      	adds	r3, #1
1a001a64:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->pasa=PASA; //Cuando paso todas las pruebas marco como PASA
1a001a68:	2317      	movs	r3, #23
1a001a6a:	7623      	strb	r3, [r4, #24]
1a001a6c:	e7c8      	b.n	1a001a00 <FSMPruebaTemporizadores+0x208>
					FSMReg->i=2;
1a001a6e:	2302      	movs	r3, #2
1a001a70:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
					FSMReg->pasa=NO_PASA;
1a001a74:	2322      	movs	r3, #34	; 0x22
1a001a76:	7623      	strb	r3, [r4, #24]
1a001a78:	e7c2      	b.n	1a001a00 <FSMPruebaTemporizadores+0x208>
		digitalOuts = 0;
1a001a7a:	2100      	movs	r1, #0
1a001a7c:	6061      	str	r1, [r4, #4]
		digitalIn = 0;
1a001a7e:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001a80:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a001a82:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a001a84:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001a86:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001a8a:	460b      	mov	r3, r1
1a001a8c:	460a      	mov	r2, r1
1a001a8e:	4628      	mov	r0, r5
1a001a90:	f000 fd24 	bl	1a0024dc <sendDataPort>
	return;
1a001a94:	e6f8      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
		digitalOuts = 0;
1a001a96:	2100      	movs	r1, #0
1a001a98:	6061      	str	r1, [r4, #4]
		digitalIn = 0;
1a001a9a:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001a9c:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a001a9e:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a001aa0:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001aa2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001aa6:	460b      	mov	r3, r1
1a001aa8:	460a      	mov	r2, r1
1a001aaa:	4628      	mov	r0, r5
1a001aac:	f000 fd16 	bl	1a0024dc <sendDataPort>
	return;
1a001ab0:	e6ea      	b.n	1a001888 <FSMPruebaTemporizadores+0x90>
1a001ab2:	bf00      	nop
1a001ab4:	10624dd3 	.word	0x10624dd3

1a001ab8 <FSMCalibracion>:
{
1a001ab8:	b530      	push	{r4, r5, lr}
1a001aba:	b085      	sub	sp, #20
1a001abc:	4604      	mov	r4, r0
	receiveDataPort(&testPort,&ADC1DataTemp,&ADC2DataTemp, &digInTemp,0);
1a001abe:	f100 0524 	add.w	r5, r0, #36	; 0x24
1a001ac2:	2300      	movs	r3, #0
1a001ac4:	9300      	str	r3, [sp, #0]
1a001ac6:	f10d 030b 	add.w	r3, sp, #11
1a001aca:	aa03      	add	r2, sp, #12
1a001acc:	f10d 010e 	add.w	r1, sp, #14
1a001ad0:	4628      	mov	r0, r5
1a001ad2:	f000 fd27 	bl	1a002524 <receiveDataPort>
	switch (FSMReg->state)
1a001ad6:	7863      	ldrb	r3, [r4, #1]
1a001ad8:	2b21      	cmp	r3, #33	; 0x21
1a001ada:	f200 80ca 	bhi.w	1a001c72 <FSMCalibracion+0x1ba>
1a001ade:	e8df f003 	tbb	[pc, r3]
1a001ae2:	c811      	.short	0xc811
1a001ae4:	6b22c8c8 	.word	0x6b22c8c8
1a001ae8:	3478c8c8 	.word	0x3478c8c8
1a001aec:	c8c8c8c8 	.word	0xc8c8c8c8
1a001af0:	c8c8c83e 	.word	0xc8c8c83e
1a001af4:	c8c8c8c8 	.word	0xc8c8c8c8
1a001af8:	c8c8c8c8 	.word	0xc8c8c8c8
1a001afc:	c8c8c8c8 	.word	0xc8c8c8c8
1a001b00:	bac8c8c8 	.word	0xbac8c8c8
		digitalOuts = 0;
1a001b04:	2100      	movs	r1, #0
1a001b06:	6061      	str	r1, [r4, #4]
		digitalIn = 0;
1a001b08:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001b0a:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a001b0c:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a001b0e:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001b10:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		FSMReg->pasa=3;
1a001b14:	2303      	movs	r3, #3
1a001b16:	7623      	strb	r3, [r4, #24]
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001b18:	460b      	mov	r3, r1
1a001b1a:	460a      	mov	r2, r1
1a001b1c:	4628      	mov	r0, r5
1a001b1e:	f000 fcdd 	bl	1a0024dc <sendDataPort>
}
1a001b22:	b005      	add	sp, #20
1a001b24:	bd30      	pop	{r4, r5, pc}
		digitalOuts = 0x04; //0100 Poweroff, loadOn, 50%
1a001b26:	2204      	movs	r2, #4
1a001b28:	6062      	str	r2, [r4, #4]
		Vout =0; //0%
1a001b2a:	2100      	movs	r1, #0
1a001b2c:	60e1      	str	r1, [r4, #12]
		FSMReg->adcSamples=0;
1a001b2e:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
		FSMReg->ADC_1=0;
1a001b32:	63a1      	str	r1, [r4, #56]	; 0x38
		FSMReg->ADC_2=0;
1a001b34:	63e1      	str	r1, [r4, #60]	; 0x3c
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001b36:	460b      	mov	r3, r1
1a001b38:	4628      	mov	r0, r5
1a001b3a:	f000 fccf 	bl	1a0024dc <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a001b3e:	f001 ff6d 	bl	1a003a1c <xTaskGetTickCount>
1a001b42:	6360      	str	r0, [r4, #52]	; 0x34
		FSMReg->state= WAIT_2S;
1a001b44:	2309      	movs	r3, #9
1a001b46:	7063      	strb	r3, [r4, #1]
		break;
1a001b48:	e7eb      	b.n	1a001b22 <FSMCalibracion+0x6a>
		if (checkTimeout (FSMReg->tickRegister, 2000)){
1a001b4a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
1a001b4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a001b50:	f7ff fe3a 	bl	1a0017c8 <checkTimeout>
1a001b54:	2800      	cmp	r0, #0
1a001b56:	d0e4      	beq.n	1a001b22 <FSMCalibracion+0x6a>
			FSMReg->state= CHANGE_VOUT;}
1a001b58:	230e      	movs	r3, #14
1a001b5a:	7063      	strb	r3, [r4, #1]
1a001b5c:	e7e1      	b.n	1a001b22 <FSMCalibracion+0x6a>
		switch (FSMReg->i){
1a001b5e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a001b62:	2b0a      	cmp	r3, #10
1a001b64:	d825      	bhi.n	1a001bb2 <FSMCalibracion+0xfa>
1a001b66:	e8df f003 	tbb	[pc, r3]
1a001b6a:	0606      	.short	0x0606
1a001b6c:	21211e1b 	.word	0x21211e1b
1a001b70:	21212121 	.word	0x21212121
1a001b74:	21          	.byte	0x21
1a001b75:	00          	.byte	0x00
			digitalOuts = 0x0D; //1000 Poweron, loadOn, 10%
1a001b76:	220d      	movs	r2, #13
1a001b78:	6062      	str	r2, [r4, #4]
		Vout =FSMReg->i*102; //i*10%
1a001b7a:	2166      	movs	r1, #102	; 0x66
1a001b7c:	fb01 f103 	mul.w	r1, r1, r3
1a001b80:	60e1      	str	r1, [r4, #12]
		FSMReg->adcSamples=0;
1a001b82:	2300      	movs	r3, #0
1a001b84:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		FSMReg->ADC_1=0;
1a001b88:	63a3      	str	r3, [r4, #56]	; 0x38
		FSMReg->ADC_2=0;
1a001b8a:	63e3      	str	r3, [r4, #60]	; 0x3c
		sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0);
1a001b8c:	7922      	ldrb	r2, [r4, #4]
1a001b8e:	4628      	mov	r0, r5
1a001b90:	f000 fca4 	bl	1a0024dc <sendDataPort>
		FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para la demora
1a001b94:	f001 ff42 	bl	1a003a1c <xTaskGetTickCount>
1a001b98:	6360      	str	r0, [r4, #52]	; 0x34
		FSMReg->state= MEASURE;
1a001b9a:	2308      	movs	r3, #8
1a001b9c:	7063      	strb	r3, [r4, #1]
		break;
1a001b9e:	e7c0      	b.n	1a001b22 <FSMCalibracion+0x6a>
			digitalOuts = 0x0C; //1100 Poweron, loadOn, 50%
1a001ba0:	220c      	movs	r2, #12
1a001ba2:	6062      	str	r2, [r4, #4]
			break;
1a001ba4:	e7e9      	b.n	1a001b7a <FSMCalibracion+0xc2>
			digitalOuts = 0x0E; //1101 Poweron, loadOn, 100%
1a001ba6:	220e      	movs	r2, #14
1a001ba8:	6062      	str	r2, [r4, #4]
			break;
1a001baa:	e7e6      	b.n	1a001b7a <FSMCalibracion+0xc2>
			digitalOuts = 0x0D; //1000 Poweron, loadOn, 10%
1a001bac:	220d      	movs	r2, #13
1a001bae:	6062      	str	r2, [r4, #4]
			break;
1a001bb0:	e7e3      	b.n	1a001b7a <FSMCalibracion+0xc2>
			digitalOuts = 0x00; //1101 Poweroff
1a001bb2:	2200      	movs	r2, #0
1a001bb4:	6062      	str	r2, [r4, #4]
			break;
1a001bb6:	e7e0      	b.n	1a001b7a <FSMCalibracion+0xc2>
		if (checkTimeout (FSMReg->tickRegister, 5000)){
1a001bb8:	f241 3188 	movw	r1, #5000	; 0x1388
1a001bbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a001bbe:	f7ff fe03 	bl	1a0017c8 <checkTimeout>
1a001bc2:	2800      	cmp	r0, #0
1a001bc4:	d0ad      	beq.n	1a001b22 <FSMCalibracion+0x6a>
			FSMReg->state= MEASURE;
1a001bc6:	2308      	movs	r3, #8
1a001bc8:	7063      	strb	r3, [r4, #1]
			FSMReg->tickRegister=xTaskGetTickCount();//guardo el tick para el tiempo de medicion
1a001bca:	f001 ff27 	bl	1a003a1c <xTaskGetTickCount>
1a001bce:	6360      	str	r0, [r4, #52]	; 0x34
1a001bd0:	e7a7      	b.n	1a001b22 <FSMCalibracion+0x6a>
		FSMReg->adcSamples++;
1a001bd2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
1a001bd6:	3301      	adds	r3, #1
1a001bd8:	b2db      	uxtb	r3, r3
1a001bda:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
		FSMReg->ADC_1+=ADC1DataTemp;
1a001bde:	f8bd 200e 	ldrh.w	r2, [sp, #14]
1a001be2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001be4:	440a      	add	r2, r1
1a001be6:	63a2      	str	r2, [r4, #56]	; 0x38
		FSMReg->ADC_2+=ADC2DataTemp;
1a001be8:	f8bd 000c 	ldrh.w	r0, [sp, #12]
1a001bec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001bee:	4401      	add	r1, r0
1a001bf0:	63e1      	str	r1, [r4, #60]	; 0x3c
		if (FSMReg->adcSamples == 100){
1a001bf2:	2b64      	cmp	r3, #100	; 0x64
1a001bf4:	d014      	beq.n	1a001c20 <FSMCalibracion+0x168>
		if (checkTimeout (FSMReg->tickRegister, 10000)){
1a001bf6:	f242 7110 	movw	r1, #10000	; 0x2710
1a001bfa:	6b60      	ldr	r0, [r4, #52]	; 0x34
1a001bfc:	f7ff fde4 	bl	1a0017c8 <checkTimeout>
1a001c00:	b130      	cbz	r0, 1a001c10 <FSMCalibracion+0x158>
			FSMReg->i++;
1a001c02:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a001c06:	3301      	adds	r3, #1
1a001c08:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			FSMReg->state= CHANGE_VOUT;
1a001c0c:	230e      	movs	r3, #14
1a001c0e:	7063      	strb	r3, [r4, #1]
		if (FSMReg->i==11)
1a001c10:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a001c14:	2b0b      	cmp	r3, #11
1a001c16:	d184      	bne.n	1a001b22 <FSMCalibracion+0x6a>
			FSMReg->i=0;
1a001c18:	2300      	movs	r3, #0
1a001c1a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a001c1e:	e780      	b.n	1a001b22 <FSMCalibracion+0x6a>
			Res1= (ADC1G*FSMReg->ADC_1/FSMReg->adcSamples)+(ADC_OFFSET*ADC1G);
1a001c20:	69e1      	ldr	r1, [r4, #28]
1a001c22:	6888      	ldr	r0, [r1, #8]
1a001c24:	fb00 f202 	mul.w	r2, r0, r2
1a001c28:	fbb2 f3f3 	udiv	r3, r2, r3
1a001c2c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c30:	600b      	str	r3, [r1, #0]
			Res2= (ADC2G*FSMReg->ADC_2/FSMReg->adcSamples)+(ADC_OFFSET*ADC2G);
1a001c32:	69e2      	ldr	r2, [r4, #28]
1a001c34:	68d1      	ldr	r1, [r2, #12]
1a001c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001c38:	fb03 f301 	mul.w	r3, r3, r1
1a001c3c:	f894 0031 	ldrb.w	r0, [r4, #49]	; 0x31
1a001c40:	fbb3 f3f0 	udiv	r3, r3, r0
1a001c44:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c48:	6053      	str	r3, [r2, #4]
			FSMReg->adcSamples=0;
1a001c4a:	2300      	movs	r3, #0
1a001c4c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			FSMReg->ADC_1=0;
1a001c50:	63a3      	str	r3, [r4, #56]	; 0x38
			FSMReg->ADC_2=0;
1a001c52:	63e3      	str	r3, [r4, #60]	; 0x3c
1a001c54:	e7cf      	b.n	1a001bf6 <FSMCalibracion+0x13e>
		digitalOuts = 0;
1a001c56:	2100      	movs	r1, #0
1a001c58:	6061      	str	r1, [r4, #4]
		digitalIn = 0;
1a001c5a:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001c5c:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a001c5e:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a001c60:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001c62:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001c66:	460b      	mov	r3, r1
1a001c68:	460a      	mov	r2, r1
1a001c6a:	4628      	mov	r0, r5
1a001c6c:	f000 fc36 	bl	1a0024dc <sendDataPort>
	return;
1a001c70:	e757      	b.n	1a001b22 <FSMCalibracion+0x6a>
		digitalOuts = 0x05; //0101 Power off+out on+10%
1a001c72:	2205      	movs	r2, #5
1a001c74:	6062      	str	r2, [r4, #4]
		digitalIn = 0;
1a001c76:	2100      	movs	r1, #0
1a001c78:	60a1      	str	r1, [r4, #8]
		Vout = 0;
1a001c7a:	60e1      	str	r1, [r4, #12]
		Vin = 0;
1a001c7c:	6121      	str	r1, [r4, #16]
		Iin = 0;
1a001c7e:	6161      	str	r1, [r4, #20]
		FSMReg->i=0;
1a001c80:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
		if(false == sendDataPort(&testPort,(uint16_t) Vout, (uint8_t) digitalOuts, 0))
1a001c84:	460b      	mov	r3, r1
1a001c86:	4628      	mov	r0, r5
1a001c88:	f000 fc28 	bl	1a0024dc <sendDataPort>
	return;
1a001c8c:	e749      	b.n	1a001b22 <FSMCalibracion+0x6a>

1a001c8e <testsTask>:
{
1a001c8e:	b510      	push	{r4, lr}
1a001c90:	b082      	sub	sp, #8
1a001c92:	4604      	mov	r4, r0
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a001c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001c98:	f001 ffcc 	bl	1a003c34 <vTaskDelay>
   test->state= INIT;
1a001c9c:	2300      	movs	r3, #0
1a001c9e:	7063      	strb	r3, [r4, #1]
1a001ca0:	e009      	b.n	1a001cb6 <testsTask+0x28>
		   test->test=order.test;
1a001ca2:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a001ca6:	7023      	strb	r3, [r4, #0]
	   	   test->state= order.state;
1a001ca8:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a001cac:	7063      	strb	r3, [r4, #1]
1a001cae:	e019      	b.n	1a001ce4 <testsTask+0x56>
				 FSMPruebaDrivers(test);
1a001cb0:	4620      	mov	r0, r4
1a001cb2:	f7ff fbf7 	bl	1a0014a4 <FSMPruebaDrivers>
	   if (gpioRead(TEC1)==0)
1a001cb6:	2024      	movs	r0, #36	; 0x24
1a001cb8:	f004 f8c1 	bl	1a005e3e <gpioRead>
1a001cbc:	b918      	cbnz	r0, 1a001cc6 <testsTask+0x38>
		   test->test=1;
1a001cbe:	2301      	movs	r3, #1
1a001cc0:	7023      	strb	r3, [r4, #0]
	   	   test->state= START;
1a001cc2:	2304      	movs	r3, #4
1a001cc4:	7063      	strb	r3, [r4, #1]
	   if (gpioRead(TEC2)==0)
1a001cc6:	2025      	movs	r0, #37	; 0x25
1a001cc8:	f004 f8b9 	bl	1a005e3e <gpioRead>
1a001ccc:	b918      	cbnz	r0, 1a001cd6 <testsTask+0x48>
		   test->test=2;
1a001cce:	2302      	movs	r3, #2
1a001cd0:	7023      	strb	r3, [r4, #0]
	   	   test->state= START;
1a001cd2:	2304      	movs	r3, #4
1a001cd4:	7063      	strb	r3, [r4, #1]
	   if (pdTRUE == xQueueReceive(test->testControlQueue, &order,0))
1a001cd6:	2200      	movs	r2, #0
1a001cd8:	a901      	add	r1, sp, #4
1a001cda:	6a20      	ldr	r0, [r4, #32]
1a001cdc:	f001 f9a2 	bl	1a003024 <xQueueReceive>
1a001ce0:	2801      	cmp	r0, #1
1a001ce2:	d0de      	beq.n	1a001ca2 <testsTask+0x14>
	   if (uxQueueMessagesWaiting(test->port.onRxQueue))
1a001ce4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a001ce6:	f001 fb6c 	bl	1a0033c2 <uxQueueMessagesWaiting>
1a001cea:	2800      	cmp	r0, #0
1a001cec:	d0e3      	beq.n	1a001cb6 <testsTask+0x28>
		 switch(test->test){
1a001cee:	7823      	ldrb	r3, [r4, #0]
1a001cf0:	2b02      	cmp	r3, #2
1a001cf2:	d004      	beq.n	1a001cfe <testsTask+0x70>
1a001cf4:	2b03      	cmp	r3, #3
1a001cf6:	d006      	beq.n	1a001d06 <testsTask+0x78>
1a001cf8:	2b01      	cmp	r3, #1
1a001cfa:	d1dc      	bne.n	1a001cb6 <testsTask+0x28>
1a001cfc:	e7d8      	b.n	1a001cb0 <testsTask+0x22>
				 FSMPruebaTemporizadores(test);
1a001cfe:	4620      	mov	r0, r4
1a001d00:	f7ff fd7a 	bl	1a0017f8 <FSMPruebaTemporizadores>
				 break;
1a001d04:	e7d7      	b.n	1a001cb6 <testsTask+0x28>
				 FSMCalibracion(test);
1a001d06:	4620      	mov	r0, r4
1a001d08:	f7ff fed6 	bl	1a001ab8 <FSMCalibracion>
				 break;
1a001d0c:	e7d3      	b.n	1a001cb6 <testsTask+0x28>
1a001d0e:	Address 0x000000001a001d0e is out of bounds.


1a001d10 <updateAllParameters>:

//Actualizar los parametros en los registros de las FSM
void updateAllParameters (uint8_t testNum){
	uint8_t i;

	for (i=0;i<PORTS_NUMBER;i++)
1a001d10:	2300      	movs	r3, #0
1a001d12:	2b05      	cmp	r3, #5
1a001d14:	d815      	bhi.n	1a001d42 <updateAllParameters+0x32>
void updateAllParameters (uint8_t testNum){
1a001d16:	b410      	push	{r4}
		FSMRegisters[i].param = &parametersROM[testNum][i*PARAM_NUM]; //busco el punto donde estan los parametros del test actual en este puerto
1a001d18:	eb00 0140 	add.w	r1, r0, r0, lsl #1
1a001d1c:	00ca      	lsls	r2, r1, #3
1a001d1e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
1a001d22:	4908      	ldr	r1, [pc, #32]	; (1a001d44 <updateAllParameters+0x34>)
1a001d24:	eb01 0282 	add.w	r2, r1, r2, lsl #2
1a001d28:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
1a001d2c:	00cc      	lsls	r4, r1, #3
1a001d2e:	4906      	ldr	r1, [pc, #24]	; (1a001d48 <updateAllParameters+0x38>)
1a001d30:	4421      	add	r1, r4
1a001d32:	61ca      	str	r2, [r1, #28]
	for (i=0;i<PORTS_NUMBER;i++)
1a001d34:	3301      	adds	r3, #1
1a001d36:	b2db      	uxtb	r3, r3
1a001d38:	2b05      	cmp	r3, #5
1a001d3a:	d9ed      	bls.n	1a001d18 <updateAllParameters+0x8>
}
1a001d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001d40:	4770      	bx	lr
1a001d42:	4770      	bx	lr
1a001d44:	10006448 	.word	0x10006448
1a001d48:	10006204 	.word	0x10006204

1a001d4c <terminalInit>:
char SSID[33];
char PASS[64];
char IP[16];

void terminalInit()
{
1a001d4c:	b500      	push	{lr}
1a001d4e:	b083      	sub	sp, #12
	UARTTerminal.uartValue=UART_USB;
1a001d50:	480d      	ldr	r0, [pc, #52]	; (1a001d88 <terminalInit+0x3c>)
1a001d52:	2303      	movs	r3, #3
1a001d54:	7003      	strb	r3, [r0, #0]
	UARTTerminal.baudRate=115200;
1a001d56:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
1a001d5a:	6043      	str	r3, [r0, #4]

	if(UARTEspInit(&UARTTerminal)==false)
1a001d5c:	f7ff fac6 	bl	1a0012ec <UARTEspInit>
1a001d60:	b158      	cbz	r0, 1a001d7a <terminalInit+0x2e>
	{
		stdioPrintf(UARTTerminal.uartValue, "Error al incializar UART TERMINAL");
	}
	//Heart Bit
   xTaskCreate(
1a001d62:	2300      	movs	r3, #0
1a001d64:	9301      	str	r3, [sp, #4]
1a001d66:	2201      	movs	r2, #1
1a001d68:	9200      	str	r2, [sp, #0]
1a001d6a:	22b4      	movs	r2, #180	; 0xb4
1a001d6c:	4907      	ldr	r1, [pc, #28]	; (1a001d8c <terminalInit+0x40>)
1a001d6e:	4808      	ldr	r0, [pc, #32]	; (1a001d90 <terminalInit+0x44>)
1a001d70:	f001 fdcf 	bl	1a003912 <xTaskCreate>
      configMINIMAL_STACK_SIZE*2, // Stack size in words, not bytes.
      (void*)NULL,                          // Parameter passed into the task.
      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
      0                           // Pointer to the task created in the system
   );
}
1a001d74:	b003      	add	sp, #12
1a001d76:	f85d fb04 	ldr.w	pc, [sp], #4
		stdioPrintf(UARTTerminal.uartValue, "Error al incializar UART TERMINAL");
1a001d7a:	4906      	ldr	r1, [pc, #24]	; (1a001d94 <terminalInit+0x48>)
1a001d7c:	4b02      	ldr	r3, [pc, #8]	; (1a001d88 <terminalInit+0x3c>)
1a001d7e:	7818      	ldrb	r0, [r3, #0]
1a001d80:	f004 fa7e 	bl	1a006280 <stdioPrintf>
1a001d84:	e7ed      	b.n	1a001d62 <terminalInit+0x16>
1a001d86:	bf00      	nop
1a001d88:	100063c0 	.word	0x100063c0
1a001d8c:	1a0078fc 	.word	0x1a0078fc
1a001d90:	1a001f41 	.word	0x1a001f41
1a001d94:	1a0078d8 	.word	0x1a0078d8

1a001d98 <scanParameter>:
}



bool_t scanParameter (char *param, uint8_t length)
{
1a001d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001d9c:	b093      	sub	sp, #76	; 0x4c
1a001d9e:	4680      	mov	r8, r0
1a001da0:	4689      	mov	r9, r1
	timeOut 	= false;
	endOfString = false;
	commandError= false;
	i=0;

	if (receiveEspByte(&UARTTerminal,&byteReceived,1000 / portTICK_RATE_MS )){
1a001da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001da6:	f10d 0147 	add.w	r1, sp, #71	; 0x47
1a001daa:	4827      	ldr	r0, [pc, #156]	; (1a001e48 <scanParameter+0xb0>)
1a001dac:	f7ff fac6 	bl	1a00133c <receiveEspByte>
1a001db0:	b148      	cbz	r0, 1a001dc6 <scanParameter+0x2e>
		if (byteReceived!=' ')	//el primer caracter en llegar luego de un comando debe ser un espacio, sino hay un error
1a001db2:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
1a001db6:	2b20      	cmp	r3, #32
1a001db8:	d002      	beq.n	1a001dc0 <scanParameter+0x28>
			commandError= true;}
1a001dba:	2401      	movs	r4, #1
	timeOut 	= false;
1a001dbc:	2500      	movs	r5, #0
1a001dbe:	e004      	b.n	1a001dca <scanParameter+0x32>
	commandError= false;
1a001dc0:	2400      	movs	r4, #0
	timeOut 	= false;
1a001dc2:	4625      	mov	r5, r4
1a001dc4:	e001      	b.n	1a001dca <scanParameter+0x32>
1a001dc6:	4604      	mov	r4, r0
	else
		timeOut=true;
1a001dc8:	2501      	movs	r5, #1
					endOfString = true;
					byteReceived = '\0'; //indico el fin de cadena
				}
				else
					if (i>length)
						commandError= true;
1a001dca:	2700      	movs	r7, #0
1a001dcc:	463e      	mov	r6, r7
1a001dce:	e00f      	b.n	1a001df0 <scanParameter+0x58>
					byteReceived = '\0'; //indico el fin de cadena
1a001dd0:	2300      	movs	r3, #0
1a001dd2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
					endOfString = true;
1a001dd6:	2701      	movs	r7, #1
					byteReceived = '\0'; //indico el fin de cadena
1a001dd8:	e000      	b.n	1a001ddc <scanParameter+0x44>
		}
		else
			timeOut=true;
1a001dda:	2501      	movs	r5, #1
		if((!commandError)&&(!timeOut))
1a001ddc:	b944      	cbnz	r4, 1a001df0 <scanParameter+0x58>
1a001dde:	b93d      	cbnz	r5, 1a001df0 <scanParameter+0x58>
		{
			data[i]=byteReceived;
1a001de0:	ab12      	add	r3, sp, #72	; 0x48
1a001de2:	4433      	add	r3, r6
1a001de4:	f89d 2047 	ldrb.w	r2, [sp, #71]	; 0x47
1a001de8:	f803 2c44 	strb.w	r2, [r3, #-68]
			i++;
1a001dec:	3601      	adds	r6, #1
1a001dee:	b2f6      	uxtb	r6, r6
	while ((!timeOut)&&(!endOfString)&&(!commandError))
1a001df0:	b9a5      	cbnz	r5, 1a001e1c <scanParameter+0x84>
1a001df2:	b99f      	cbnz	r7, 1a001e1c <scanParameter+0x84>
1a001df4:	b994      	cbnz	r4, 1a001e1c <scanParameter+0x84>
		if (receiveEspByte(&UARTTerminal,&byteReceived,1000 / portTICK_RATE_MS )){
1a001df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001dfa:	f10d 0147 	add.w	r1, sp, #71	; 0x47
1a001dfe:	4812      	ldr	r0, [pc, #72]	; (1a001e48 <scanParameter+0xb0>)
1a001e00:	f7ff fa9c 	bl	1a00133c <receiveEspByte>
1a001e04:	2800      	cmp	r0, #0
1a001e06:	d0e8      	beq.n	1a001dda <scanParameter+0x42>
				if ((byteReceived=='\n')||(byteReceived=='\r'))	//Si es enter
1a001e08:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
1a001e0c:	2b0a      	cmp	r3, #10
1a001e0e:	d0df      	beq.n	1a001dd0 <scanParameter+0x38>
1a001e10:	2b0d      	cmp	r3, #13
1a001e12:	d0dd      	beq.n	1a001dd0 <scanParameter+0x38>
					if (i>length)
1a001e14:	454e      	cmp	r6, r9
1a001e16:	d9e1      	bls.n	1a001ddc <scanParameter+0x44>
						commandError= true;
1a001e18:	2401      	movs	r4, #1
1a001e1a:	e7df      	b.n	1a001ddc <scanParameter+0x44>
		}
	}
	if((!commandError)&&(!timeOut))
1a001e1c:	b974      	cbnz	r4, 1a001e3c <scanParameter+0xa4>
1a001e1e:	b975      	cbnz	r5, 1a001e3e <scanParameter+0xa6>
	{
		for(j=0;j<i;j++)
1a001e20:	2300      	movs	r3, #0
1a001e22:	e007      	b.n	1a001e34 <scanParameter+0x9c>
			param[j]=data[j];
1a001e24:	aa12      	add	r2, sp, #72	; 0x48
1a001e26:	441a      	add	r2, r3
1a001e28:	f812 2c44 	ldrb.w	r2, [r2, #-68]
1a001e2c:	f808 2003 	strb.w	r2, [r8, r3]
		for(j=0;j<i;j++)
1a001e30:	3301      	adds	r3, #1
1a001e32:	b2db      	uxtb	r3, r3
1a001e34:	429e      	cmp	r6, r3
1a001e36:	d8f5      	bhi.n	1a001e24 <scanParameter+0x8c>
		ret = true;
1a001e38:	2401      	movs	r4, #1
1a001e3a:	e000      	b.n	1a001e3e <scanParameter+0xa6>
	}
	else
		ret = false;
1a001e3c:	2400      	movs	r4, #0

return ret;

}
1a001e3e:	4620      	mov	r0, r4
1a001e40:	b013      	add	sp, #76	; 0x4c
1a001e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001e46:	bf00      	nop
1a001e48:	100063c0 	.word	0x100063c0

1a001e4c <commandsFSM>:
{
1a001e4c:	b508      	push	{r3, lr}
	switch (commandData)
1a001e4e:	4b30      	ldr	r3, [pc, #192]	; (1a001f10 <commandsFSM+0xc4>)
1a001e50:	4298      	cmp	r0, r3
1a001e52:	d049      	beq.n	1a001ee8 <commandsFSM+0x9c>
1a001e54:	d916      	bls.n	1a001e84 <commandsFSM+0x38>
1a001e56:	4b2f      	ldr	r3, [pc, #188]	; (1a001f14 <commandsFSM+0xc8>)
1a001e58:	4298      	cmp	r0, r3
1a001e5a:	d027      	beq.n	1a001eac <commandsFSM+0x60>
1a001e5c:	f103 737d 	add.w	r3, r3, #66322432	; 0x3f40000
1a001e60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
1a001e64:	330c      	adds	r3, #12
1a001e66:	4298      	cmp	r0, r3
1a001e68:	d14b      	bne.n	1a001f02 <commandsFSM+0xb6>
		if (scanParameter (IP,32)){
1a001e6a:	2120      	movs	r1, #32
1a001e6c:	482a      	ldr	r0, [pc, #168]	; (1a001f18 <commandsFSM+0xcc>)
1a001e6e:	f7ff ff93 	bl	1a001d98 <scanParameter>
1a001e72:	2800      	cmp	r0, #0
1a001e74:	d132      	bne.n	1a001edc <commandsFSM+0x90>
		stdioPrintf(UARTTerminal.uartValue, "\n La direccion IP es : %s \n",IP);
1a001e76:	4a28      	ldr	r2, [pc, #160]	; (1a001f18 <commandsFSM+0xcc>)
1a001e78:	4928      	ldr	r1, [pc, #160]	; (1a001f1c <commandsFSM+0xd0>)
1a001e7a:	4b29      	ldr	r3, [pc, #164]	; (1a001f20 <commandsFSM+0xd4>)
1a001e7c:	7818      	ldrb	r0, [r3, #0]
1a001e7e:	f004 f9ff 	bl	1a006280 <stdioPrintf>
	break;
1a001e82:	e01e      	b.n	1a001ec2 <commandsFSM+0x76>
	switch (commandData)
1a001e84:	f103 437e 	add.w	r3, r3, #4261412864	; 0xfe000000
1a001e88:	f5a3 337b 	sub.w	r3, r3, #257024	; 0x3ec00
1a001e8c:	f2a3 33fb 	subw	r3, r3, #1019	; 0x3fb
1a001e90:	4298      	cmp	r0, r3
1a001e92:	d136      	bne.n	1a001f02 <commandsFSM+0xb6>
		if (scanParameter (PASS,32)){
1a001e94:	2120      	movs	r1, #32
1a001e96:	4823      	ldr	r0, [pc, #140]	; (1a001f24 <commandsFSM+0xd8>)
1a001e98:	f7ff ff7e 	bl	1a001d98 <scanParameter>
1a001e9c:	b9c0      	cbnz	r0, 1a001ed0 <commandsFSM+0x84>
		stdioPrintf(UARTTerminal.uartValue, "\n El password es : %s \n",PASS);  //Comentar en la version final para ocultar el password
1a001e9e:	4a21      	ldr	r2, [pc, #132]	; (1a001f24 <commandsFSM+0xd8>)
1a001ea0:	4921      	ldr	r1, [pc, #132]	; (1a001f28 <commandsFSM+0xdc>)
1a001ea2:	4b1f      	ldr	r3, [pc, #124]	; (1a001f20 <commandsFSM+0xd4>)
1a001ea4:	7818      	ldrb	r0, [r3, #0]
1a001ea6:	f004 f9eb 	bl	1a006280 <stdioPrintf>
	break;
1a001eaa:	e00a      	b.n	1a001ec2 <commandsFSM+0x76>
		if (scanParameter (SSID,32)){
1a001eac:	2120      	movs	r1, #32
1a001eae:	481f      	ldr	r0, [pc, #124]	; (1a001f2c <commandsFSM+0xe0>)
1a001eb0:	f7ff ff72 	bl	1a001d98 <scanParameter>
1a001eb4:	b930      	cbnz	r0, 1a001ec4 <commandsFSM+0x78>
		stdioPrintf(UARTTerminal.uartValue, "\n La SSID es : %s \n",SSID);
1a001eb6:	4a1d      	ldr	r2, [pc, #116]	; (1a001f2c <commandsFSM+0xe0>)
1a001eb8:	491d      	ldr	r1, [pc, #116]	; (1a001f30 <commandsFSM+0xe4>)
1a001eba:	4b19      	ldr	r3, [pc, #100]	; (1a001f20 <commandsFSM+0xd4>)
1a001ebc:	7818      	ldrb	r0, [r3, #0]
1a001ebe:	f004 f9df 	bl	1a006280 <stdioPrintf>
}
1a001ec2:	bd08      	pop	{r3, pc}
			stdioPrintf(UARTTerminal.uartValue, "\n Ejecute el comando RECN para guardar los cambios \n");
1a001ec4:	491b      	ldr	r1, [pc, #108]	; (1a001f34 <commandsFSM+0xe8>)
1a001ec6:	4b16      	ldr	r3, [pc, #88]	; (1a001f20 <commandsFSM+0xd4>)
1a001ec8:	7818      	ldrb	r0, [r3, #0]
1a001eca:	f004 f9d9 	bl	1a006280 <stdioPrintf>
1a001ece:	e7f2      	b.n	1a001eb6 <commandsFSM+0x6a>
			stdioPrintf(UARTTerminal.uartValue, "\n Ejecute el comando RECN para guardar los cambios \n");
1a001ed0:	4918      	ldr	r1, [pc, #96]	; (1a001f34 <commandsFSM+0xe8>)
1a001ed2:	4b13      	ldr	r3, [pc, #76]	; (1a001f20 <commandsFSM+0xd4>)
1a001ed4:	7818      	ldrb	r0, [r3, #0]
1a001ed6:	f004 f9d3 	bl	1a006280 <stdioPrintf>
1a001eda:	e7e0      	b.n	1a001e9e <commandsFSM+0x52>
			stdioPrintf(UARTTerminal.uartValue, "\n Ejecute el comando RECN para guardar los cambios \n");
1a001edc:	4915      	ldr	r1, [pc, #84]	; (1a001f34 <commandsFSM+0xe8>)
1a001ede:	4b10      	ldr	r3, [pc, #64]	; (1a001f20 <commandsFSM+0xd4>)
1a001ee0:	7818      	ldrb	r0, [r3, #0]
1a001ee2:	f004 f9cd 	bl	1a006280 <stdioPrintf>
1a001ee6:	e7c6      	b.n	1a001e76 <commandsFSM+0x2a>
		saveWIFIData (SSID,PASS,IP);
1a001ee8:	4a0b      	ldr	r2, [pc, #44]	; (1a001f18 <commandsFSM+0xcc>)
1a001eea:	490e      	ldr	r1, [pc, #56]	; (1a001f24 <commandsFSM+0xd8>)
1a001eec:	480f      	ldr	r0, [pc, #60]	; (1a001f2c <commandsFSM+0xe0>)
1a001eee:	f000 f931 	bl	1a002154 <saveWIFIData>
		stdioPrintf(UARTTerminal.uartValue, "\n Configuracion de red guardada");
1a001ef2:	4911      	ldr	r1, [pc, #68]	; (1a001f38 <commandsFSM+0xec>)
1a001ef4:	4b0a      	ldr	r3, [pc, #40]	; (1a001f20 <commandsFSM+0xd4>)
1a001ef6:	7818      	ldrb	r0, [r3, #0]
1a001ef8:	f004 f9c2 	bl	1a006280 <stdioPrintf>
		setWifiFlag ();
1a001efc:	f7fe fa54 	bl	1a0003a8 <setWifiFlag>
	break;
1a001f00:	e7df      	b.n	1a001ec2 <commandsFSM+0x76>
		stdioPrintf(UARTTerminal.uartValue, "\n Default \n");
1a001f02:	490e      	ldr	r1, [pc, #56]	; (1a001f3c <commandsFSM+0xf0>)
1a001f04:	4b06      	ldr	r3, [pc, #24]	; (1a001f20 <commandsFSM+0xd4>)
1a001f06:	7818      	ldrb	r0, [r3, #0]
1a001f08:	f004 f9ba 	bl	1a006280 <stdioPrintf>
}
1a001f0c:	e7d9      	b.n	1a001ec2 <commandsFSM+0x76>
1a001f0e:	bf00      	nop
1a001f10:	5245434e 	.word	0x5245434e
1a001f14:	53534944 	.word	0x53534944
1a001f18:	10006410 	.word	0x10006410
1a001f1c:	1a007870 	.word	0x1a007870
1a001f20:	100063c0 	.word	0x100063c0
1a001f24:	100063d0 	.word	0x100063d0
1a001f28:	1a007858 	.word	0x1a007858
1a001f2c:	10006420 	.word	0x10006420
1a001f30:	1a007844 	.word	0x1a007844
1a001f34:	1a00780c 	.word	0x1a00780c
1a001f38:	1a00788c 	.word	0x1a00788c
1a001f3c:	1a0078ac 	.word	0x1a0078ac

1a001f40 <terminal>:
{
1a001f40:	b510      	push	{r4, lr}
1a001f42:	b082      	sub	sp, #8
   gpioWrite( LED, ON );
1a001f44:	2101      	movs	r1, #1
1a001f46:	202a      	movs	r0, #42	; 0x2a
1a001f48:	f003 ff44 	bl	1a005dd4 <gpioWrite>
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a001f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001f50:	f001 fe70 	bl	1a003c34 <vTaskDelay>
   loadWIFIData (SSID,PASS,IP); //Cargo los datos de la red desde EEPROM
1a001f54:	4a13      	ldr	r2, [pc, #76]	; (1a001fa4 <terminal+0x64>)
1a001f56:	4914      	ldr	r1, [pc, #80]	; (1a001fa8 <terminal+0x68>)
1a001f58:	4814      	ldr	r0, [pc, #80]	; (1a001fac <terminal+0x6c>)
1a001f5a:	f000 f8bd 	bl	1a0020d8 <loadWIFIData>
   stdioPrintf(UARTTerminal.uartValue, "Por favor ingrese un comando");
1a001f5e:	4914      	ldr	r1, [pc, #80]	; (1a001fb0 <terminal+0x70>)
1a001f60:	4b14      	ldr	r3, [pc, #80]	; (1a001fb4 <terminal+0x74>)
1a001f62:	7818      	ldrb	r0, [r3, #0]
1a001f64:	f004 f98c 	bl	1a006280 <stdioPrintf>
	uint32_t commandData = 0;
1a001f68:	2400      	movs	r4, #0
1a001f6a:	e000      	b.n	1a001f6e <terminal+0x2e>
			   commandData=0;
1a001f6c:	2400      	movs	r4, #0
	   gpioToggle( LED );
1a001f6e:	202a      	movs	r0, #42	; 0x2a
1a001f70:	f003 ff99 	bl	1a005ea6 <gpioToggle>
	   if (receiveEspByte(&UARTTerminal,&byteReceived,1000 / portTICK_RATE_MS ))
1a001f74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001f78:	f10d 0107 	add.w	r1, sp, #7
1a001f7c:	480d      	ldr	r0, [pc, #52]	; (1a001fb4 <terminal+0x74>)
1a001f7e:	f7ff f9dd 	bl	1a00133c <receiveEspByte>
1a001f82:	2800      	cmp	r0, #0
1a001f84:	d0f3      	beq.n	1a001f6e <terminal+0x2e>
		   if ((byteReceived=='\n')||(byteReceived=='\r'))
1a001f86:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001f8a:	2b0a      	cmp	r3, #10
1a001f8c:	d0ee      	beq.n	1a001f6c <terminal+0x2c>
1a001f8e:	2b0d      	cmp	r3, #13
1a001f90:	d101      	bne.n	1a001f96 <terminal+0x56>
			   commandData=0;
1a001f92:	2400      	movs	r4, #0
1a001f94:	e7eb      	b.n	1a001f6e <terminal+0x2e>
			   commandData=(commandData<<8)|(uint32_t)byteReceived;//Tomo el byte y lo agrego a commandData para ver si es un comando
1a001f96:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
			   commandsFSM(commandData); //Ejecuto el comando
1a001f9a:	4620      	mov	r0, r4
1a001f9c:	f7ff ff56 	bl	1a001e4c <commandsFSM>
1a001fa0:	e7e5      	b.n	1a001f6e <terminal+0x2e>
1a001fa2:	bf00      	nop
1a001fa4:	10006410 	.word	0x10006410
1a001fa8:	100063d0 	.word	0x100063d0
1a001fac:	10006420 	.word	0x10006420
1a001fb0:	1a0078b8 	.word	0x1a0078b8
1a001fb4:	100063c0 	.word	0x100063c0

1a001fb8 <initEeprom>:
SemaphoreHandle_t EEPROMSemaphore; //Semaforo para el uso de la EEPROM


//Funcion de inicializacion de la EEPROM
bool initEeprom(void)
{
1a001fb8:	b510      	push	{r4, lr}
	bool ret = true;
	Chip_EEPROM_Init(LPC_EEPROM); //inicializar la eeprom
1a001fba:	4c07      	ldr	r4, [pc, #28]	; (1a001fd8 <initEeprom+0x20>)
1a001fbc:	4620      	mov	r0, r4
1a001fbe:	f003 fb49 	bl	1a005654 <Chip_EEPROM_Init>
 * @param	mode	: Auto Program Mode (One of EEPROM_AUTOPROG_* value)
 * @return	Nothing
 */
STATIC INLINE void Chip_EEPROM_SetAutoProg(LPC_EEPROM_T *pEEPROM, uint32_t mode)
{
	pEEPROM->AUTOPROG = mode;
1a001fc2:	2001      	movs	r0, #1
1a001fc4:	60e0      	str	r0, [r4, #12]
	Chip_EEPROM_SetAutoProg(LPC_EEPROM,EEPROM_AUTOPROG_AFT_1WORDWRITTEN); //Habilito autoprogramacion


	EEPROMSemaphore = xSemaphoreCreateMutex(); //Creo un semaforo para evitar problemas en el uso compartido entre tareas
1a001fc6:	f000 ffbb 	bl	1a002f40 <xQueueCreateMutex>
1a001fca:	4b04      	ldr	r3, [pc, #16]	; (1a001fdc <initEeprom+0x24>)
1a001fcc:	6018      	str	r0, [r3, #0]

	if( EEPROMSemaphore == NULL )
1a001fce:	b108      	cbz	r0, 1a001fd4 <initEeprom+0x1c>
	bool ret = true;
1a001fd0:	2001      	movs	r0, #1
	{
	   ret = false;
	}
	return ret;
}
1a001fd2:	bd10      	pop	{r4, pc}
	   ret = false;
1a001fd4:	2000      	movs	r0, #0
1a001fd6:	e7fc      	b.n	1a001fd2 <initEeprom+0x1a>
1a001fd8:	4000e000 	.word	0x4000e000
1a001fdc:	10006444 	.word	0x10006444

1a001fe0 <loadParameters>:

//Cargar parametros desde EEPROM Protegido
void loadParameters (uint32_t testNumber)
{
1a001fe0:	b510      	push	{r4, lr}
1a001fe2:	4604      	mov	r4, r0
	xSemaphoreTake( EEPROMSemaphore, portMAX_DELAY);//Espero a que el recurso este disponible
1a001fe4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001fe8:	4b0f      	ldr	r3, [pc, #60]	; (1a002028 <loadParameters+0x48>)
1a001fea:	6818      	ldr	r0, [r3, #0]
1a001fec:	f001 f8c6 	bl	1a00317c <xQueueSemaphoreTake>

	uint32_t* ptr = &parametersROM[testNumber][0];
1a001ff0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a001ff4:	0158      	lsls	r0, r3, #5
1a001ff6:	4b0d      	ldr	r3, [pc, #52]	; (1a00202c <loadParameters+0x4c>)
1a001ff8:	4418      	add	r0, r3
	uint32_t i = 0;
	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(testNumber+3,0); //inicio en la pagina 3 porque las tres primeras son del servidor
1a001ffa:	f504 0180 	add.w	r1, r4, #4194304	; 0x400000
1a001ffe:	f601 0103 	addw	r1, r1, #2051	; 0x803
1a002002:	01c9      	lsls	r1, r1, #7
	for(i = 0; i < PARAM_NUM * PORTS_NUMBER; i++) {
1a002004:	2300      	movs	r3, #0
1a002006:	e004      	b.n	1a002012 <loadParameters+0x32>
		ptr[i] = pEepromMem[i];
1a002008:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00200c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for(i = 0; i < PARAM_NUM * PORTS_NUMBER; i++) {
1a002010:	3301      	adds	r3, #1
1a002012:	2b17      	cmp	r3, #23
1a002014:	d9f8      	bls.n	1a002008 <loadParameters+0x28>
	}

	xSemaphoreGive( EEPROMSemaphore );//Libero el recurso
1a002016:	2300      	movs	r3, #0
1a002018:	461a      	mov	r2, r3
1a00201a:	4619      	mov	r1, r3
1a00201c:	4802      	ldr	r0, [pc, #8]	; (1a002028 <loadParameters+0x48>)
1a00201e:	6800      	ldr	r0, [r0, #0]
1a002020:	f000 fec4 	bl	1a002dac <xQueueGenericSend>
}
1a002024:	bd10      	pop	{r4, pc}
1a002026:	bf00      	nop
1a002028:	10006444 	.word	0x10006444
1a00202c:	10006448 	.word	0x10006448

1a002030 <loadParametersUnprotected>:

//Cargar parametros desde EEPROM sin proteger
void loadParametersUnprotected (uint32_t testNumber)
{
1a002030:	b410      	push	{r4}
	uint32_t* ptr = &parametersROM[testNumber][0];
1a002032:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a002036:	015c      	lsls	r4, r3, #5
1a002038:	4b09      	ldr	r3, [pc, #36]	; (1a002060 <loadParametersUnprotected+0x30>)
1a00203a:	441c      	add	r4, r3
	uint32_t i = 0;
	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(testNumber+3,0); //inicio en la pagina 3 porque las tres primeras son del servidor
1a00203c:	f500 0180 	add.w	r1, r0, #4194304	; 0x400000
1a002040:	f601 0103 	addw	r1, r1, #2051	; 0x803
1a002044:	01c9      	lsls	r1, r1, #7
	for(i = 0; i < PARAM_NUM * PORTS_NUMBER; i++) {
1a002046:	2300      	movs	r3, #0
1a002048:	e004      	b.n	1a002054 <loadParametersUnprotected+0x24>
		ptr[i] = pEepromMem[i];
1a00204a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00204e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for(i = 0; i < PARAM_NUM * PORTS_NUMBER; i++) {
1a002052:	3301      	adds	r3, #1
1a002054:	2b17      	cmp	r3, #23
1a002056:	d9f8      	bls.n	1a00204a <loadParametersUnprotected+0x1a>
	}

}
1a002058:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00205c:	4770      	bx	lr
1a00205e:	bf00      	nop
1a002060:	10006448 	.word	0x10006448

1a002064 <getParameters>:

//Obtener el puntero a los paramtros del test en RAM
uint32_t * getParameters (uint32_t testNumber,uint8_t port)
{
	return (&parametersROM[testNumber][port*PARAM_NUM]);
1a002064:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a002068:	00c3      	lsls	r3, r0, #3
1a00206a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
}
1a00206e:	4802      	ldr	r0, [pc, #8]	; (1a002078 <getParameters+0x14>)
1a002070:	eb00 0081 	add.w	r0, r0, r1, lsl #2
1a002074:	4770      	bx	lr
1a002076:	bf00      	nop
1a002078:	10006448 	.word	0x10006448

1a00207c <saveParameters>:

//Guardar los parametros del test en EEPROM
void saveParameters (uint32_t testNumber)
{
1a00207c:	b570      	push	{r4, r5, r6, lr}
1a00207e:	4605      	mov	r5, r0
	xSemaphoreTake( EEPROMSemaphore, portMAX_DELAY);//Espero a que el recurso este disponible
1a002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a002084:	4b11      	ldr	r3, [pc, #68]	; (1a0020cc <saveParameters+0x50>)
1a002086:	6818      	ldr	r0, [r3, #0]
1a002088:	f001 f878 	bl	1a00317c <xQueueSemaphoreTake>

	//uint32_t* ptr = &parametersROM[testNumber-1][0];
	uint32_t* ptr = &parametersROM[testNumber][0];
1a00208c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a002090:	015e      	lsls	r6, r3, #5
1a002092:	4b0f      	ldr	r3, [pc, #60]	; (1a0020d0 <saveParameters+0x54>)
1a002094:	441e      	add	r6, r3
	uint8_t i = 0;
	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(testNumber+3,0);//las primeras 3 posiciones son del servidor
1a002096:	f505 0580 	add.w	r5, r5, #4194304	; 0x400000
1a00209a:	f605 0503 	addw	r5, r5, #2051	; 0x803
1a00209e:	01ed      	lsls	r5, r5, #7
	uint32_t size =PARAM_NUM * PORTS_NUMBER;
	if(size > EEPROM_PAGE_SIZE )
	   size = EEPROM_PAGE_SIZE;

	  //for(i = 0; i < size/4; i++) {
	for(i = 0; i < size; i++) {
1a0020a0:	2400      	movs	r4, #0
1a0020a2:	e009      	b.n	1a0020b8 <saveParameters+0x3c>
	   pEepromMem[i] = ptr[i];
1a0020a4:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
1a0020a8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]

	   Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a0020ac:	2104      	movs	r1, #4
1a0020ae:	4809      	ldr	r0, [pc, #36]	; (1a0020d4 <saveParameters+0x58>)
1a0020b0:	f003 fadc 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
	for(i = 0; i < size; i++) {
1a0020b4:	3401      	adds	r4, #1
1a0020b6:	b2e4      	uxtb	r4, r4
1a0020b8:	2c17      	cmp	r4, #23
1a0020ba:	d9f3      	bls.n	1a0020a4 <saveParameters+0x28>
	  }
	xSemaphoreGive( EEPROMSemaphore );//Libero el recurso
1a0020bc:	2300      	movs	r3, #0
1a0020be:	461a      	mov	r2, r3
1a0020c0:	4619      	mov	r1, r3
1a0020c2:	4802      	ldr	r0, [pc, #8]	; (1a0020cc <saveParameters+0x50>)
1a0020c4:	6800      	ldr	r0, [r0, #0]
1a0020c6:	f000 fe71 	bl	1a002dac <xQueueGenericSend>
}
1a0020ca:	bd70      	pop	{r4, r5, r6, pc}
1a0020cc:	10006444 	.word	0x10006444
1a0020d0:	10006448 	.word	0x10006448
1a0020d4:	4000e000 	.word	0x4000e000

1a0020d8 <loadWIFIData>:

//Cargar Datos WIFI desde EEPROM
void loadWIFIData (char * SSID,char * PASS,char * IP)
{
1a0020d8:	b570      	push	{r4, r5, r6, lr}
1a0020da:	4606      	mov	r6, r0
1a0020dc:	460d      	mov	r5, r1
1a0020de:	4614      	mov	r4, r2
	xSemaphoreTake( EEPROMSemaphore, portMAX_DELAY);//Espero a que el recurso este disponible
1a0020e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0020e4:	4b18      	ldr	r3, [pc, #96]	; (1a002148 <loadWIFIData+0x70>)
1a0020e6:	6818      	ldr	r0, [r3, #0]
1a0020e8:	f001 f848 	bl	1a00317c <xQueueSemaphoreTake>

	//Cargo la SSID
	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(0,0); //En la pagina 0 esta la SSID
	uint32_t i = 0;
1a0020ec:	2200      	movs	r2, #0
	while ((pEepromMem[i]!='\0')&&(i<32)){		//Leo desde ROM hasta que llego al fin de cadena
1a0020ee:	e001      	b.n	1a0020f4 <loadWIFIData+0x1c>
		SSID[i] = pEepromMem[i];
1a0020f0:	54b3      	strb	r3, [r6, r2]
		i++;
1a0020f2:	3201      	adds	r2, #1
	while ((pEepromMem[i]!='\0')&&(i<32)){		//Leo desde ROM hasta que llego al fin de cadena
1a0020f4:	0093      	lsls	r3, r2, #2
1a0020f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
1a0020fa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
1a0020fe:	681b      	ldr	r3, [r3, #0]
1a002100:	b10b      	cbz	r3, 1a002106 <loadWIFIData+0x2e>
1a002102:	2a1f      	cmp	r2, #31
1a002104:	d9f4      	bls.n	1a0020f0 <loadWIFIData+0x18>
		}
	SSID[i]='\0';//pongo el fin de cadena
1a002106:	2300      	movs	r3, #0
1a002108:	54b3      	strb	r3, [r6, r2]
	//Cargo la contraseña
	pEepromMem = (uint32_t*)EEPROM_ADDRESS(1,0); //En la pagina 1 esta el password
	i = 0;
	while ((pEepromMem[i]!='\0')&&(i<63)){		//Leo desde ROM hasta que llego al fin de cadena
1a00210a:	e001      	b.n	1a002110 <loadWIFIData+0x38>
		PASS[i] = pEepromMem[i];
1a00210c:	54ea      	strb	r2, [r5, r3]
		i++;
1a00210e:	3301      	adds	r3, #1
	while ((pEepromMem[i]!='\0')&&(i<63)){		//Leo desde ROM hasta que llego al fin de cadena
1a002110:	4a0e      	ldr	r2, [pc, #56]	; (1a00214c <loadWIFIData+0x74>)
1a002112:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a002116:	b10a      	cbz	r2, 1a00211c <loadWIFIData+0x44>
1a002118:	2b3e      	cmp	r3, #62	; 0x3e
1a00211a:	d9f7      	bls.n	1a00210c <loadWIFIData+0x34>
		}
	PASS[i]='\0';//pongo el fin de cadena
1a00211c:	2200      	movs	r2, #0
1a00211e:	54ea      	strb	r2, [r5, r3]
	//Cargo el IP
	pEepromMem = (uint32_t*)EEPROM_ADDRESS(2,0); //En la pagina 2 esta el IP
	i = 0;
1a002120:	4613      	mov	r3, r2
	while ((pEepromMem[i]!='\0')&&(i<15)){		//Leo desde ROM hasta que llego al fin de cadena
1a002122:	4a0b      	ldr	r2, [pc, #44]	; (1a002150 <loadWIFIData+0x78>)
1a002124:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a002128:	b122      	cbz	r2, 1a002134 <loadWIFIData+0x5c>
1a00212a:	2b0e      	cmp	r3, #14
1a00212c:	d802      	bhi.n	1a002134 <loadWIFIData+0x5c>
		IP[i] = pEepromMem[i];
1a00212e:	54e2      	strb	r2, [r4, r3]
		i++;
1a002130:	3301      	adds	r3, #1
1a002132:	e7f6      	b.n	1a002122 <loadWIFIData+0x4a>
		}
	IP[i]='\0';//pongo el fin de cadena
1a002134:	2100      	movs	r1, #0
1a002136:	54e1      	strb	r1, [r4, r3]
	xSemaphoreGive( EEPROMSemaphore );//Libero el recurso
1a002138:	460b      	mov	r3, r1
1a00213a:	460a      	mov	r2, r1
1a00213c:	4802      	ldr	r0, [pc, #8]	; (1a002148 <loadWIFIData+0x70>)
1a00213e:	6800      	ldr	r0, [r0, #0]
1a002140:	f000 fe34 	bl	1a002dac <xQueueGenericSend>
}
1a002144:	bd70      	pop	{r4, r5, r6, pc}
1a002146:	bf00      	nop
1a002148:	10006444 	.word	0x10006444
1a00214c:	20040080 	.word	0x20040080
1a002150:	20040100 	.word	0x20040100

1a002154 <saveWIFIData>:


//Guardar Datos WIFI en EEPROM
void saveWIFIData (char * SSID,char * PASS,char * IP)
{
1a002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002156:	4607      	mov	r7, r0
1a002158:	460d      	mov	r5, r1
1a00215a:	4616      	mov	r6, r2
	xSemaphoreTake( EEPROMSemaphore, portMAX_DELAY);//Espero a que el recurso este disponible
1a00215c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a002160:	4b29      	ldr	r3, [pc, #164]	; (1a002208 <saveWIFIData+0xb4>)
1a002162:	6818      	ldr	r0, [r3, #0]
1a002164:	f001 f80a 	bl	1a00317c <xQueueSemaphoreTake>

	//Guardo en ROM la SSID
	uint32_t *pEepromMem = (uint32_t*)EEPROM_ADDRESS(0,0);	//En la pagina 0 esta la SSID
	uint32_t i = 0;
1a002168:	2400      	movs	r4, #0
	while ((SSID[i]!='\0')&&(i<32)){		//Guardo en ROM hasta que llego al fin de cadena
1a00216a:	e00a      	b.n	1a002182 <saveWIFIData+0x2e>
		pEepromMem[i] = SSID[i];
1a00216c:	00a3      	lsls	r3, r4, #2
1a00216e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
1a002172:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
1a002176:	601a      	str	r2, [r3, #0]
		Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a002178:	2104      	movs	r1, #4
1a00217a:	4824      	ldr	r0, [pc, #144]	; (1a00220c <saveWIFIData+0xb8>)
1a00217c:	f003 fa76 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
		i++;
1a002180:	3401      	adds	r4, #1
	while ((SSID[i]!='\0')&&(i<32)){		//Guardo en ROM hasta que llego al fin de cadena
1a002182:	5d3a      	ldrb	r2, [r7, r4]
1a002184:	b10a      	cbz	r2, 1a00218a <saveWIFIData+0x36>
1a002186:	2c1f      	cmp	r4, #31
1a002188:	d9f0      	bls.n	1a00216c <saveWIFIData+0x18>
		}
	pEepromMem[i]='\0';//pongo el fin de cadena
1a00218a:	00a4      	lsls	r4, r4, #2
1a00218c:	f104 5300 	add.w	r3, r4, #536870912	; 0x20000000
1a002190:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
1a002194:	2400      	movs	r4, #0
1a002196:	601c      	str	r4, [r3, #0]
	Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a002198:	2104      	movs	r1, #4
1a00219a:	481c      	ldr	r0, [pc, #112]	; (1a00220c <saveWIFIData+0xb8>)
1a00219c:	f003 fa66 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
	//Guardo en ROM la SSID
	pEepromMem = (uint32_t*)EEPROM_ADDRESS(1,0);	//En la pagina 1 esta el password
	i = 0;
	while ((PASS[i]!='\0')&&(i<63)){		//Guardo en ROM hasta que llego al fin de cadena
1a0021a0:	e007      	b.n	1a0021b2 <saveWIFIData+0x5e>
		pEepromMem[i] = PASS[i];
1a0021a2:	4a1b      	ldr	r2, [pc, #108]	; (1a002210 <saveWIFIData+0xbc>)
1a0021a4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a0021a8:	2104      	movs	r1, #4
1a0021aa:	4818      	ldr	r0, [pc, #96]	; (1a00220c <saveWIFIData+0xb8>)
1a0021ac:	f003 fa5e 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
		i++;
1a0021b0:	3401      	adds	r4, #1
	while ((PASS[i]!='\0')&&(i<63)){		//Guardo en ROM hasta que llego al fin de cadena
1a0021b2:	5d2b      	ldrb	r3, [r5, r4]
1a0021b4:	b10b      	cbz	r3, 1a0021ba <saveWIFIData+0x66>
1a0021b6:	2c3e      	cmp	r4, #62	; 0x3e
1a0021b8:	d9f3      	bls.n	1a0021a2 <saveWIFIData+0x4e>
		}
	pEepromMem[i]='\0';//pongo el fin de cadena
1a0021ba:	2500      	movs	r5, #0
1a0021bc:	4b14      	ldr	r3, [pc, #80]	; (1a002210 <saveWIFIData+0xbc>)
1a0021be:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
	Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a0021c2:	2104      	movs	r1, #4
1a0021c4:	4811      	ldr	r0, [pc, #68]	; (1a00220c <saveWIFIData+0xb8>)
1a0021c6:	f003 fa51 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
	//Guardo en ROM la SSID
	pEepromMem = (uint32_t*)EEPROM_ADDRESS(2,0);	//En la pagina 2 esta el IP
	i = 0;
1a0021ca:	462c      	mov	r4, r5
	while ((IP[i]!='\0')&&(i<15)){		//Guardo en ROM hasta que llego al fin de cadena
1a0021cc:	5d33      	ldrb	r3, [r6, r4]
1a0021ce:	b153      	cbz	r3, 1a0021e6 <saveWIFIData+0x92>
1a0021d0:	2c0e      	cmp	r4, #14
1a0021d2:	d808      	bhi.n	1a0021e6 <saveWIFIData+0x92>
		pEepromMem[i] = IP[i];
1a0021d4:	4a0f      	ldr	r2, [pc, #60]	; (1a002214 <saveWIFIData+0xc0>)
1a0021d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a0021da:	2104      	movs	r1, #4
1a0021dc:	480b      	ldr	r0, [pc, #44]	; (1a00220c <saveWIFIData+0xb8>)
1a0021de:	f003 fa45 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
		i++;
1a0021e2:	3401      	adds	r4, #1
1a0021e4:	e7f2      	b.n	1a0021cc <saveWIFIData+0x78>
		}
	pEepromMem[i]='\0';//pongo el fin de cadena
1a0021e6:	2500      	movs	r5, #0
1a0021e8:	4b0a      	ldr	r3, [pc, #40]	; (1a002214 <saveWIFIData+0xc0>)
1a0021ea:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
	Chip_EEPROM_WaitForIntStatus(LPC_EEPROM, EEPROM_INT_ENDOFPROG);
1a0021ee:	2104      	movs	r1, #4
1a0021f0:	4806      	ldr	r0, [pc, #24]	; (1a00220c <saveWIFIData+0xb8>)
1a0021f2:	f003 fa3b 	bl	1a00566c <Chip_EEPROM_WaitForIntStatus>
	xSemaphoreGive( EEPROMSemaphore );//Libero el recurso
1a0021f6:	462b      	mov	r3, r5
1a0021f8:	462a      	mov	r2, r5
1a0021fa:	4629      	mov	r1, r5
1a0021fc:	4802      	ldr	r0, [pc, #8]	; (1a002208 <saveWIFIData+0xb4>)
1a0021fe:	6800      	ldr	r0, [r0, #0]
1a002200:	f000 fdd4 	bl	1a002dac <xQueueGenericSend>
}
1a002204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002206:	bf00      	nop
1a002208:	10006444 	.word	0x10006444
1a00220c:	4000e000 	.word	0x4000e000
1a002210:	20040080 	.word	0x20040080
1a002214:	20040100 	.word	0x20040100

1a002218 <onRxCallback>:
}


// Callback para la recepción serie a través de la UART USB.
void onRxCallback(void *param)
{
1a002218:	b530      	push	{r4, r5, lr}
1a00221a:	b083      	sub	sp, #12
1a00221c:	4604      	mov	r4, r0
	__asm volatile
1a00221e:	f3ef 8511 	mrs	r5, BASEPRI
1a002222:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002226:	f383 8811 	msr	BASEPRI, r3
1a00222a:	f3bf 8f6f 	isb	sy
1a00222e:	f3bf 8f4f 	dsb	sy
	portsConfig_t* ports = (portsConfig_t*) param;

	//Inicio seccion critica
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();	//

	aux = uartRxRead(ports->uartValue);
1a002232:	7800      	ldrb	r0, [r0, #0]
1a002234:	f003 fbea 	bl	1a005a0c <uartRxRead>

	if(aux & 0x80) //Si el primer bit es 1 significa que estoy recibiendo el primer byte
1a002238:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00223c:	d117      	bne.n	1a00226e <onRxCallback+0x56>
		byteNumber=1;
		receivedData.rxData [0]=aux;
		}
	else
	{
		if(byteNumber==1)
1a00223e:	4b1b      	ldr	r3, [pc, #108]	; (1a0022ac <onRxCallback+0x94>)
1a002240:	781b      	ldrb	r3, [r3, #0]
1a002242:	2b01      	cmp	r3, #1
1a002244:	d026      	beq.n	1a002294 <onRxCallback+0x7c>
			byteNumber=2;
			receivedData.rxData [1]= aux;
		}
		else
		{
			if(byteNumber==2)
1a002246:	2b02      	cmp	r3, #2
1a002248:	d02a      	beq.n	1a0022a0 <onRxCallback+0x88>
				byteNumber=3;
				receivedData.rxData [2]= aux;
			}
			else{
				byteNumber==0;
				receivedData.rxData [3] = aux;
1a00224a:	4b19      	ldr	r3, [pc, #100]	; (1a0022b0 <onRxCallback+0x98>)
1a00224c:	70d8      	strb	r0, [r3, #3]
				aux=(receivedData.rxData[0]>>4)&0x07; //Obtengo el address del puerto que envio el dato
1a00224e:	781b      	ldrb	r3, [r3, #0]
1a002250:	f3c3 1302 	ubfx	r3, r3, #4, #3
				if (aux<PORTS_NUMBER) //Agregado por error al desconectar
1a002254:	2b05      	cmp	r3, #5
1a002256:	d80f      	bhi.n	1a002278 <onRxCallback+0x60>
					xQueueSendFromISR( ports->port[aux].onRxQueue, ( void * ) &receivedData, &xHigherPriorityTaskWoken );//Pongo en cola los datos recividos en la cola correspondiente
1a002258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00225c:	009a      	lsls	r2, r3, #2
1a00225e:	4414      	add	r4, r2
1a002260:	2300      	movs	r3, #0
1a002262:	aa01      	add	r2, sp, #4
1a002264:	4912      	ldr	r1, [pc, #72]	; (1a0022b0 <onRxCallback+0x98>)
1a002266:	6960      	ldr	r0, [r4, #20]
1a002268:	f000 fe75 	bl	1a002f56 <xQueueGenericSendFromISR>
1a00226c:	e004      	b.n	1a002278 <onRxCallback+0x60>
		byteNumber=1;
1a00226e:	4b0f      	ldr	r3, [pc, #60]	; (1a0022ac <onRxCallback+0x94>)
1a002270:	2201      	movs	r2, #1
1a002272:	701a      	strb	r2, [r3, #0]
		receivedData.rxData [0]=aux;
1a002274:	4b0e      	ldr	r3, [pc, #56]	; (1a0022b0 <onRxCallback+0x98>)
1a002276:	7018      	strb	r0, [r3, #0]
	__asm volatile
1a002278:	f385 8811 	msr	BASEPRI, r5


	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);

	//Chequeo de cambio de contexto
	if (xHigherPriorityTaskWoken)
1a00227c:	9b01      	ldr	r3, [sp, #4]
1a00227e:	b13b      	cbz	r3, 1a002290 <onRxCallback+0x78>
	{
		/* Actual macro used here is port specific. */
		taskYIELD();
1a002280:	4b0c      	ldr	r3, [pc, #48]	; (1a0022b4 <onRxCallback+0x9c>)
1a002282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002286:	601a      	str	r2, [r3, #0]
1a002288:	f3bf 8f4f 	dsb	sy
1a00228c:	f3bf 8f6f 	isb	sy
	}

}
1a002290:	b003      	add	sp, #12
1a002292:	bd30      	pop	{r4, r5, pc}
			byteNumber=2;
1a002294:	4b05      	ldr	r3, [pc, #20]	; (1a0022ac <onRxCallback+0x94>)
1a002296:	2202      	movs	r2, #2
1a002298:	701a      	strb	r2, [r3, #0]
			receivedData.rxData [1]= aux;
1a00229a:	4b05      	ldr	r3, [pc, #20]	; (1a0022b0 <onRxCallback+0x98>)
1a00229c:	7058      	strb	r0, [r3, #1]
1a00229e:	e7eb      	b.n	1a002278 <onRxCallback+0x60>
				byteNumber=3;
1a0022a0:	4b02      	ldr	r3, [pc, #8]	; (1a0022ac <onRxCallback+0x94>)
1a0022a2:	2203      	movs	r2, #3
1a0022a4:	701a      	strb	r2, [r3, #0]
				receivedData.rxData [2]= aux;
1a0022a6:	4b02      	ldr	r3, [pc, #8]	; (1a0022b0 <onRxCallback+0x98>)
1a0022a8:	7098      	strb	r0, [r3, #2]
1a0022aa:	e7e5      	b.n	1a002278 <onRxCallback+0x60>
1a0022ac:	10001f65 	.word	0x10001f65
1a0022b0:	10001f7c 	.word	0x10001f7c
1a0022b4:	e000ed04 	.word	0xe000ed04

1a0022b8 <onTxTimeOutCallback>:

//Callback del timer de transmision
//Cada 1ms se llama a esta funcion para enviar los datos a los puertos
void onTxTimeOutCallback(TimerHandle_t xTimer)
{
1a0022b8:	b510      	push	{r4, lr}
	// Obtenemos los datos de la UART seleccionada, aprovechando el campo reservado
	// para el Timer ID.
	portsConfig_t *ports= (portsConfig_t *) pvTimerGetTimerID(xTimer);
1a0022ba:	f002 f998 	bl	1a0045ee <pvTimerGetTimerID>
1a0022be:	4604      	mov	r4, r0
	gpioToggle( GPIO0 );
1a0022c0:	2020      	movs	r0, #32
1a0022c2:	f003 fdf0 	bl	1a005ea6 <gpioToggle>

	//Configuro el callback de la interrupcion de transmision de UART
	uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a0022c6:	4623      	mov	r3, r4
1a0022c8:	4a04      	ldr	r2, [pc, #16]	; (1a0022dc <onTxTimeOutCallback+0x24>)
1a0022ca:	2101      	movs	r1, #1
1a0022cc:	7820      	ldrb	r0, [r4, #0]
1a0022ce:	f003 fb07 	bl	1a0058e0 <uartCallbackSet>
	uartSetPendingInterrupt(ports->uartValue);
1a0022d2:	7820      	ldrb	r0, [r4, #0]
1a0022d4:	f003 fb76 	bl	1a0059c4 <uartSetPendingInterrupt>
}
1a0022d8:	bd10      	pop	{r4, pc}
1a0022da:	bf00      	nop
1a0022dc:	1a0022e1 	.word	0x1a0022e1

1a0022e0 <onTxCallback>:
}


//Callback de la interrupcion de transmision por UART
void onTxCallback(void*param)
{
1a0022e0:	b530      	push	{r4, r5, lr}
1a0022e2:	b083      	sub	sp, #12
1a0022e4:	4605      	mov	r5, r0
	portsConfig_t *ports = (portsConfig_t *) param; //Datos del puerto de comunicacion UART
	BaseType_t xTaskWokenByReceive = pdFALSE; 		//Variable para evaluar el cambio de contexto al finaliza la interrupcion
1a0022e6:	2300      	movs	r3, #0
1a0022e8:	9301      	str	r3, [sp, #4]
	uint8_t i;
	static uint8_t transmitEmpty = 0;


	//Leo los datos de todas las colas de puertos para enviarlos (los leo al incio de cada rafaga de datos)
	if (portIndex==0 && byteIndex==0)
1a0022ea:	4b3d      	ldr	r3, [pc, #244]	; (1a0023e0 <onTxCallback+0x100>)
1a0022ec:	781b      	ldrb	r3, [r3, #0]
1a0022ee:	b91b      	cbnz	r3, 1a0022f8 <onTxCallback+0x18>
1a0022f0:	4b3c      	ldr	r3, [pc, #240]	; (1a0023e4 <onTxCallback+0x104>)
1a0022f2:	781c      	ldrb	r4, [r3, #0]
1a0022f4:	2c00      	cmp	r4, #0
1a0022f6:	d02d      	beq.n	1a002354 <onTxCallback+0x74>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);

	}

	//Si llegué a la interrupcion es porque hay que enviar datos
	if(transmitEmpty==0) //Transmito datos
1a0022f8:	4b3b      	ldr	r3, [pc, #236]	; (1a0023e8 <onTxCallback+0x108>)
1a0022fa:	781b      	ldrb	r3, [r3, #0]
1a0022fc:	2b00      	cmp	r3, #0
1a0022fe:	d138      	bne.n	1a002372 <onTxCallback+0x92>
	{
		uartTxWrite(ports->uartValue,dataToSend[portIndex].txData[byteIndex]);	//Envio el byte apuntado por portIndex y byteIndex
1a002300:	4b37      	ldr	r3, [pc, #220]	; (1a0023e0 <onTxCallback+0x100>)
1a002302:	781b      	ldrb	r3, [r3, #0]
1a002304:	4c37      	ldr	r4, [pc, #220]	; (1a0023e4 <onTxCallback+0x104>)
1a002306:	7821      	ldrb	r1, [r4, #0]
1a002308:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00230c:	4a37      	ldr	r2, [pc, #220]	; (1a0023ec <onTxCallback+0x10c>)
1a00230e:	4413      	add	r3, r2
1a002310:	5c59      	ldrb	r1, [r3, r1]
1a002312:	7828      	ldrb	r0, [r5, #0]
1a002314:	f003 fb84 	bl	1a005a20 <uartTxWrite>


		if (byteIndex<2)
1a002318:	7823      	ldrb	r3, [r4, #0]
1a00231a:	2b01      	cmp	r3, #1
1a00231c:	d91d      	bls.n	1a00235a <onTxCallback+0x7a>
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
		}
		else
		{
			transmitEmpty=1; //El siguiente dato a transmitir es vacio para dar tiempo al esclavo para responder
1a00231e:	4b32      	ldr	r3, [pc, #200]	; (1a0023e8 <onTxCallback+0x108>)
1a002320:	2201      	movs	r2, #1
1a002322:	701a      	strb	r2, [r3, #0]
			uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
		}

	}
	//Hago la evaluacion de cambio de cambio de contexto necesario.
	if (xTaskWokenByReceive != pdFALSE)
1a002324:	9b01      	ldr	r3, [sp, #4]
1a002326:	b13b      	cbz	r3, 1a002338 <onTxCallback+0x58>
	{
		taskYIELD ();
1a002328:	4b31      	ldr	r3, [pc, #196]	; (1a0023f0 <onTxCallback+0x110>)
1a00232a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00232e:	601a      	str	r2, [r3, #0]
1a002330:	f3bf 8f4f 	dsb	sy
1a002334:	f3bf 8f6f 	isb	sy
	}
}
1a002338:	b003      	add	sp, #12
1a00233a:	bd30      	pop	{r4, r5, pc}
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);
1a00233c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a002340:	eb05 0083 	add.w	r0, r5, r3, lsl #2
1a002344:	aa01      	add	r2, sp, #4
1a002346:	4929      	ldr	r1, [pc, #164]	; (1a0023ec <onTxCallback+0x10c>)
1a002348:	4419      	add	r1, r3
1a00234a:	6900      	ldr	r0, [r0, #16]
1a00234c:	f000 ffe4 	bl	1a003318 <xQueueReceiveFromISR>
		for (i=0;i<PORTS_NUMBER;i++)
1a002350:	3401      	adds	r4, #1
1a002352:	b2e4      	uxtb	r4, r4
1a002354:	2c05      	cmp	r4, #5
1a002356:	d9f1      	bls.n	1a00233c <onTxCallback+0x5c>
1a002358:	e7ce      	b.n	1a0022f8 <onTxCallback+0x18>
			byteIndex++;
1a00235a:	3301      	adds	r3, #1
1a00235c:	7023      	strb	r3, [r4, #0]
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a00235e:	462b      	mov	r3, r5
1a002360:	4a24      	ldr	r2, [pc, #144]	; (1a0023f4 <onTxCallback+0x114>)
1a002362:	2101      	movs	r1, #1
1a002364:	7828      	ldrb	r0, [r5, #0]
1a002366:	f003 fabb 	bl	1a0058e0 <uartCallbackSet>
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
1a00236a:	7828      	ldrb	r0, [r5, #0]
1a00236c:	f003 fb2a 	bl	1a0059c4 <uartSetPendingInterrupt>
1a002370:	e7d8      	b.n	1a002324 <onTxCallback+0x44>
		uartTxWrite(ports->uartValue,emptyData);
1a002372:	21ff      	movs	r1, #255	; 0xff
1a002374:	7828      	ldrb	r0, [r5, #0]
1a002376:	f003 fb53 	bl	1a005a20 <uartTxWrite>
		if (transmitEmpty==2) //Si termi
1a00237a:	4b1b      	ldr	r3, [pc, #108]	; (1a0023e8 <onTxCallback+0x108>)
1a00237c:	781b      	ldrb	r3, [r3, #0]
1a00237e:	2b02      	cmp	r3, #2
1a002380:	d120      	bne.n	1a0023c4 <onTxCallback+0xe4>
			if (portIndex<(PORTS_NUMBER-1))
1a002382:	4b17      	ldr	r3, [pc, #92]	; (1a0023e0 <onTxCallback+0x100>)
1a002384:	781b      	ldrb	r3, [r3, #0]
1a002386:	2b04      	cmp	r3, #4
1a002388:	d812      	bhi.n	1a0023b0 <onTxCallback+0xd0>
				portIndex++;
1a00238a:	3301      	adds	r3, #1
1a00238c:	4a14      	ldr	r2, [pc, #80]	; (1a0023e0 <onTxCallback+0x100>)
1a00238e:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a002390:	4b14      	ldr	r3, [pc, #80]	; (1a0023e4 <onTxCallback+0x104>)
1a002392:	2200      	movs	r2, #0
1a002394:	701a      	strb	r2, [r3, #0]
				uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a002396:	462b      	mov	r3, r5
1a002398:	4a16      	ldr	r2, [pc, #88]	; (1a0023f4 <onTxCallback+0x114>)
1a00239a:	2101      	movs	r1, #1
1a00239c:	7828      	ldrb	r0, [r5, #0]
1a00239e:	f003 fa9f 	bl	1a0058e0 <uartCallbackSet>
				uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
1a0023a2:	7828      	ldrb	r0, [r5, #0]
1a0023a4:	f003 fb0e 	bl	1a0059c4 <uartSetPendingInterrupt>
			transmitEmpty=0;
1a0023a8:	4b0f      	ldr	r3, [pc, #60]	; (1a0023e8 <onTxCallback+0x108>)
1a0023aa:	2200      	movs	r2, #0
1a0023ac:	701a      	strb	r2, [r3, #0]
1a0023ae:	e7b9      	b.n	1a002324 <onTxCallback+0x44>
				portIndex=0;
1a0023b0:	2300      	movs	r3, #0
1a0023b2:	4a0b      	ldr	r2, [pc, #44]	; (1a0023e0 <onTxCallback+0x100>)
1a0023b4:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a0023b6:	4a0b      	ldr	r2, [pc, #44]	; (1a0023e4 <onTxCallback+0x104>)
1a0023b8:	7013      	strb	r3, [r2, #0]
				uartCallbackClr(ports->uartValue, UART_TRANSMITER_FREE);
1a0023ba:	2101      	movs	r1, #1
1a0023bc:	7828      	ldrb	r0, [r5, #0]
1a0023be:	f003 faed 	bl	1a00599c <uartCallbackClr>
1a0023c2:	e7f1      	b.n	1a0023a8 <onTxCallback+0xc8>
			transmitEmpty++;
1a0023c4:	3301      	adds	r3, #1
1a0023c6:	4a08      	ldr	r2, [pc, #32]	; (1a0023e8 <onTxCallback+0x108>)
1a0023c8:	7013      	strb	r3, [r2, #0]
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a0023ca:	462b      	mov	r3, r5
1a0023cc:	4a09      	ldr	r2, [pc, #36]	; (1a0023f4 <onTxCallback+0x114>)
1a0023ce:	2101      	movs	r1, #1
1a0023d0:	7828      	ldrb	r0, [r5, #0]
1a0023d2:	f003 fa85 	bl	1a0058e0 <uartCallbackSet>
			uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
1a0023d6:	7828      	ldrb	r0, [r5, #0]
1a0023d8:	f003 faf4 	bl	1a0059c4 <uartSetPendingInterrupt>
1a0023dc:	e7a2      	b.n	1a002324 <onTxCallback+0x44>
1a0023de:	bf00      	nop
1a0023e0:	10001f7a 	.word	0x10001f7a
1a0023e4:	10001f64 	.word	0x10001f64
1a0023e8:	10001f80 	.word	0x10001f80
1a0023ec:	10001f68 	.word	0x10001f68
1a0023f0:	e000ed04 	.word	0xe000ed04
1a0023f4:	1a0022e1 	.word	0x1a0022e1

1a0023f8 <portsDataInit>:
{
1a0023f8:	b530      	push	{r4, r5, lr}
1a0023fa:	b083      	sub	sp, #12
1a0023fc:	4605      	mov	r5, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a0023fe:	2400      	movs	r4, #0
1a002400:	e015      	b.n	1a00242e <portsDataInit+0x36>
		portData.txData[0]=(i<<4)|0x80; //Armo el primer byte con el primer bit en uno y el address
1a002402:	0123      	lsls	r3, r4, #4
1a002404:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a002408:	f88d 3004 	strb.w	r3, [sp, #4]
		portData.txData[1]=0x00;
1a00240c:	2300      	movs	r3, #0
1a00240e:	f88d 3005 	strb.w	r3, [sp, #5]
		portData.txData[2]=0x00;
1a002412:	f88d 3006 	strb.w	r3, [sp, #6]
		xQueueSend( port[i].onTxQueue, ( void * ) &portData, ( TickType_t ) portMAX_DELAY ); //Pongo en cola el primer dato a enviar
1a002416:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a00241a:	008a      	lsls	r2, r1, #2
1a00241c:	18a8      	adds	r0, r5, r2
1a00241e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002422:	a901      	add	r1, sp, #4
1a002424:	6840      	ldr	r0, [r0, #4]
1a002426:	f000 fcc1 	bl	1a002dac <xQueueGenericSend>
	for (i=0; i< PORTS_NUMBER; i++)
1a00242a:	3401      	adds	r4, #1
1a00242c:	b2e4      	uxtb	r4, r4
1a00242e:	2c05      	cmp	r4, #5
1a002430:	d9e7      	bls.n	1a002402 <portsDataInit+0xa>
}
1a002432:	b003      	add	sp, #12
1a002434:	bd30      	pop	{r4, r5, pc}
1a002436:	Address 0x000000001a002436 is out of bounds.


1a002438 <portsdriverInit>:
{
1a002438:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00243a:	b083      	sub	sp, #12
1a00243c:	4607      	mov	r7, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a00243e:	2400      	movs	r4, #0
1a002440:	2c05      	cmp	r4, #5
1a002442:	d816      	bhi.n	1a002472 <portsdriverInit+0x3a>
		ports->port[i].portAddr = i;
1a002444:	0066      	lsls	r6, r4, #1
1a002446:	1933      	adds	r3, r6, r4
1a002448:	009d      	lsls	r5, r3, #2
1a00244a:	443d      	add	r5, r7
1a00244c:	732c      	strb	r4, [r5, #12]
		ports->port[i].onRxQueue  = xQueueCreate(IN_QUEUE_LEN, sizeof(rxData_t));
1a00244e:	2200      	movs	r2, #0
1a002450:	2104      	movs	r1, #4
1a002452:	201e      	movs	r0, #30
1a002454:	f000 fc83 	bl	1a002d5e <xQueueGenericCreate>
1a002458:	6168      	str	r0, [r5, #20]
		ports->port[i].onTxQueue = xQueueCreate(OUT_QUEUE_LEN, sizeof(txData_t));
1a00245a:	2200      	movs	r2, #0
1a00245c:	2103      	movs	r1, #3
1a00245e:	201e      	movs	r0, #30
1a002460:	f000 fc7d 	bl	1a002d5e <xQueueGenericCreate>
1a002464:	6128      	str	r0, [r5, #16]
		if((ports->port[i].onRxQueue == NULL)||(ports->port[i].onTxQueue == NULL))
1a002466:	696b      	ldr	r3, [r5, #20]
1a002468:	b363      	cbz	r3, 1a0024c4 <portsdriverInit+0x8c>
1a00246a:	b368      	cbz	r0, 1a0024c8 <portsdriverInit+0x90>
	for (i=0; i< PORTS_NUMBER; i++)
1a00246c:	3401      	adds	r4, #1
1a00246e:	b2e4      	uxtb	r4, r4
1a002470:	e7e6      	b.n	1a002440 <portsdriverInit+0x8>
	ports->onTxTimeOut = xTimerCreate("Transmit", pdMS_TO_TICKS(1),pdTRUE, (void*) ports, onTxTimeOutCallback);
1a002472:	4b17      	ldr	r3, [pc, #92]	; (1a0024d0 <portsdriverInit+0x98>)
1a002474:	9300      	str	r3, [sp, #0]
1a002476:	463b      	mov	r3, r7
1a002478:	2201      	movs	r2, #1
1a00247a:	4611      	mov	r1, r2
1a00247c:	4815      	ldr	r0, [pc, #84]	; (1a0024d4 <portsdriverInit+0x9c>)
1a00247e:	f001 ff1f 	bl	1a0042c0 <xTimerCreate>
1a002482:	60b8      	str	r0, [r7, #8]
	if (ports->onTxTimeOut==NULL)
1a002484:	b310      	cbz	r0, 1a0024cc <portsdriverInit+0x94>
	uartConfig(ports->uartValue, ports->baudRate);
1a002486:	6879      	ldr	r1, [r7, #4]
1a002488:	7838      	ldrb	r0, [r7, #0]
1a00248a:	f003 fad3 	bl	1a005a34 <uartInit>
	uartCallbackSet(ports->uartValue, UART_RECEIVE, onRxCallback,(void*) ports);
1a00248e:	463b      	mov	r3, r7
1a002490:	4a11      	ldr	r2, [pc, #68]	; (1a0024d8 <portsdriverInit+0xa0>)
1a002492:	2100      	movs	r1, #0
1a002494:	7838      	ldrb	r0, [r7, #0]
1a002496:	f003 fa23 	bl	1a0058e0 <uartCallbackSet>
	portsDataInit (ports->port);
1a00249a:	f107 000c 	add.w	r0, r7, #12
1a00249e:	f7ff ffab 	bl	1a0023f8 <portsDataInit>
	uartInterrupt(ports->uartValue, true);
1a0024a2:	2101      	movs	r1, #1
1a0024a4:	7838      	ldrb	r0, [r7, #0]
1a0024a6:	f003 f9d3 	bl	1a005850 <uartInterrupt>
	xTimerStart( ports->onTxTimeOut, 0 );
1a0024aa:	68bc      	ldr	r4, [r7, #8]
1a0024ac:	f001 fab6 	bl	1a003a1c <xTaskGetTickCount>
1a0024b0:	2300      	movs	r3, #0
1a0024b2:	9300      	str	r3, [sp, #0]
1a0024b4:	4602      	mov	r2, r0
1a0024b6:	2101      	movs	r1, #1
1a0024b8:	4620      	mov	r0, r4
1a0024ba:	f001 ff1d 	bl	1a0042f8 <xTimerGenericCommand>
	return(true);
1a0024be:	2001      	movs	r0, #1
}
1a0024c0:	b003      	add	sp, #12
1a0024c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (false);
1a0024c4:	2000      	movs	r0, #0
1a0024c6:	e7fb      	b.n	1a0024c0 <portsdriverInit+0x88>
1a0024c8:	2000      	movs	r0, #0
1a0024ca:	e7f9      	b.n	1a0024c0 <portsdriverInit+0x88>
		return (false);
1a0024cc:	2000      	movs	r0, #0
1a0024ce:	e7f7      	b.n	1a0024c0 <portsdriverInit+0x88>
1a0024d0:	1a0022b9 	.word	0x1a0022b9
1a0024d4:	1a007904 	.word	0x1a007904
1a0024d8:	1a002219 	.word	0x1a002219

1a0024dc <sendDataPort>:

//Funcion de para transmitir datos a los puertos
bool_t sendDataPort(portsData_t * port,uint16_t DAC, uint8_t digitalOuts,TickType_t timeout)
{
1a0024dc:	b530      	push	{r4, r5, lr}
1a0024de:	b083      	sub	sp, #12
1a0024e0:	461c      	mov	r4, r3
	txData_t portData;
	uint8_t aux;
	if(DAC>1023)
1a0024e2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1a0024e6:	d301      	bcc.n	1a0024ec <sendDataPort+0x10>
		DAC=1023;
1a0024e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
	aux= (uint8_t)(DAC>>7);
1a0024ec:	f3c1 13c7 	ubfx	r3, r1, #7, #8
	portData.txData[0]=(port->portAddr<<4)|0x80|aux; //Armo el primer byte con el primer bit en uno, el address y la parte alta del dac
1a0024f0:	7805      	ldrb	r5, [r0, #0]
1a0024f2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
1a0024f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a0024fa:	f88d 3004 	strb.w	r3, [sp, #4]
	portData.txData[1]=(uint8_t)(DAC & 0x007F); //Armo el segundo byte (parte baja del DAC)
1a0024fe:	f001 017f 	and.w	r1, r1, #127	; 0x7f
1a002502:	f88d 1005 	strb.w	r1, [sp, #5]
	portData.txData[2]=digitalOuts & 0x0F;
1a002506:	f002 030f 	and.w	r3, r2, #15
1a00250a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (pdTRUE==xQueueSend( port->onTxQueue, ( void * ) &portData, timeout )) //Pongo en cola los datos a enviar
1a00250e:	2300      	movs	r3, #0
1a002510:	4622      	mov	r2, r4
1a002512:	a901      	add	r1, sp, #4
1a002514:	6840      	ldr	r0, [r0, #4]
1a002516:	f000 fc49 	bl	1a002dac <xQueueGenericSend>
1a00251a:	2801      	cmp	r0, #1
1a00251c:	d000      	beq.n	1a002520 <sendDataPort+0x44>
		return true;
	else
		return false;
1a00251e:	2000      	movs	r0, #0

}
1a002520:	b003      	add	sp, #12
1a002522:	bd30      	pop	{r4, r5, pc}

1a002524 <receiveDataPort>:

//Funcion para leer datos de los puertos
bool_t receiveDataPort(portsData_t * port,uint16_t *ADC1,uint16_t *ADC2, uint8_t *digitalIn,TickType_t timeout)
{
1a002524:	b570      	push	{r4, r5, r6, lr}
1a002526:	b082      	sub	sp, #8
1a002528:	460e      	mov	r6, r1
1a00252a:	4615      	mov	r5, r2
1a00252c:	461c      	mov	r4, r3
	rxData_t portData;
	uint8_t aux;
	aux= (uint8_t)(DAC>>7);

	if (pdTRUE==xQueueReceive( port->onRxQueue, ( void * ) &portData, timeout )) //Leo de la cola el dato recibido
1a00252e:	9a06      	ldr	r2, [sp, #24]
1a002530:	a901      	add	r1, sp, #4
1a002532:	6880      	ldr	r0, [r0, #8]
1a002534:	f000 fd76 	bl	1a003024 <xQueueReceive>
1a002538:	2801      	cmp	r0, #1
1a00253a:	d002      	beq.n	1a002542 <receiveDataPort+0x1e>
		*ADC2 = (((uint16_t)portData.rxData[2] & 0x0F)<<7) | (uint16_t)portData.rxData[3];
		*digitalIn= (portData.rxData[2]>>4) & 0x07;
		return true;
	}
	else
		return false;
1a00253c:	2000      	movs	r0, #0

}
1a00253e:	b002      	add	sp, #8
1a002540:	bd70      	pop	{r4, r5, r6, pc}
		*ADC1 = (((uint16_t)portData.rxData[0] & 0x0F)<<7) | (uint16_t)portData.rxData[1];
1a002542:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a002546:	01db      	lsls	r3, r3, #7
1a002548:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
1a00254c:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a002550:	4313      	orrs	r3, r2
1a002552:	8033      	strh	r3, [r6, #0]
		*ADC2 = (((uint16_t)portData.rxData[2] & 0x0F)<<7) | (uint16_t)portData.rxData[3];
1a002554:	f89d 2006 	ldrb.w	r2, [sp, #6]
1a002558:	01d3      	lsls	r3, r2, #7
1a00255a:	f403 63f0 	and.w	r3, r3, #1920	; 0x780
1a00255e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a002562:	430b      	orrs	r3, r1
1a002564:	802b      	strh	r3, [r5, #0]
		*digitalIn= (portData.rxData[2]>>4) & 0x07;
1a002566:	f3c2 1202 	ubfx	r2, r2, #4, #3
1a00256a:	7022      	strb	r2, [r4, #0]
		return true;
1a00256c:	e7e7      	b.n	1a00253e <receiveDataPort+0x1a>
1a00256e:	Address 0x000000001a00256e is out of bounds.


1a002570 <interpreterInit>:
uint32_t *params;

//Funcion de inicializacion de la tarea del interprete de comandos

bool_t interpreterInit()
{
1a002570:	b510      	push	{r4, lr}
1a002572:	b082      	sub	sp, #8
	//Pongo en el vector de paneles los strngs que contienen el codigo HTML 
	//de los paneles correspondientes a las pruebas
	panels [0] = panel0; 
1a002574:	4b0d      	ldr	r3, [pc, #52]	; (1a0025ac <interpreterInit+0x3c>)
1a002576:	4a0e      	ldr	r2, [pc, #56]	; (1a0025b0 <interpreterInit+0x40>)
1a002578:	601a      	str	r2, [r3, #0]
	panels [1] = panel1;
1a00257a:	4a0e      	ldr	r2, [pc, #56]	; (1a0025b4 <interpreterInit+0x44>)
1a00257c:	605a      	str	r2, [r3, #4]
	panels [2] = panel2;
1a00257e:	4a0e      	ldr	r2, [pc, #56]	; (1a0025b8 <interpreterInit+0x48>)
1a002580:	609a      	str	r2, [r3, #8]
	commandsQueue = xQueueCreate(INTERPRETER_QUEUE_LEN,sizeof(command_t));
1a002582:	2200      	movs	r2, #0
1a002584:	2118      	movs	r1, #24
1a002586:	2005      	movs	r0, #5
1a002588:	f000 fbe9 	bl	1a002d5e <xQueueGenericCreate>
1a00258c:	4b0b      	ldr	r3, [pc, #44]	; (1a0025bc <interpreterInit+0x4c>)
1a00258e:	6018      	str	r0, [r3, #0]
	xTaskCreate(
1a002590:	2300      	movs	r3, #0
1a002592:	9301      	str	r3, [sp, #4]
1a002594:	2401      	movs	r4, #1
1a002596:	9400      	str	r4, [sp, #0]
1a002598:	225a      	movs	r2, #90	; 0x5a
1a00259a:	4909      	ldr	r1, [pc, #36]	; (1a0025c0 <interpreterInit+0x50>)
1a00259c:	4809      	ldr	r0, [pc, #36]	; (1a0025c4 <interpreterInit+0x54>)
1a00259e:	f001 f9b8 	bl	1a003912 <xTaskCreate>
	      configMINIMAL_STACK_SIZE, // Stack size in words, not bytes.
	      (void*)NULL,                          // Parameter passed into the task.
	      tskIDLE_PRIORITY+1,         // Priority at which the task is created.
	      0                           // Pointer to the task created in the system
	   );
	actualPanelNumber=1;
1a0025a2:	4b09      	ldr	r3, [pc, #36]	; (1a0025c8 <interpreterInit+0x58>)
1a0025a4:	701c      	strb	r4, [r3, #0]


}
1a0025a6:	b002      	add	sp, #8
1a0025a8:	bd10      	pop	{r4, pc}
1a0025aa:	bf00      	nop
1a0025ac:	10006574 	.word	0x10006574
1a0025b0:	10001084 	.word	0x10001084
1a0025b4:	10001468 	.word	0x10001468
1a0025b8:	1000183c 	.word	0x1000183c
1a0025bc:	100063b4 	.word	0x100063b4
1a0025c0:	1a007910 	.word	0x1a007910
1a0025c4:	1a002765 	.word	0x1a002765
1a0025c8:	100063bc 	.word	0x100063bc

1a0025cc <sendCommand>:
}
}

//Funcion para enviar un comando al interpreter mediante una cola
void sendCommand(command_t command)
{
1a0025cc:	b084      	sub	sp, #16
1a0025ce:	b508      	push	{r3, lr}
1a0025d0:	f10d 0c08 	add.w	ip, sp, #8
1a0025d4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	xQueueSend(commandsQueue,&command,0);
1a0025d8:	2300      	movs	r3, #0
1a0025da:	461a      	mov	r2, r3
1a0025dc:	4661      	mov	r1, ip
1a0025de:	4804      	ldr	r0, [pc, #16]	; (1a0025f0 <sendCommand+0x24>)
1a0025e0:	6800      	ldr	r0, [r0, #0]
1a0025e2:	f000 fbe3 	bl	1a002dac <xQueueGenericSend>

}
1a0025e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
1a0025ea:	b004      	add	sp, #16
1a0025ec:	4770      	bx	lr
1a0025ee:	bf00      	nop
1a0025f0:	100063b4 	.word	0x100063b4

1a0025f4 <refreshPageData>:


//Funcion para actualizar los datos del panel actual 
//en los strings que luego el servidor usa para responder

void refreshPageData(){
1a0025f4:	b570      	push	{r4, r5, r6, lr}
1a0025f6:	b090      	sub	sp, #64	; 0x40
	
	//Se usan dos strings en forma alternada de modo que se escribe en uno
	//mientras el servidor utiliza el otro
	//Dado que la tarea del servidor tiene prioridad mayor prioridad que el interpreter
	//nunca se va a cambiar el sting mientras se esta leyendo.
	if (actualPageData == pageDataA)
1a0025f8:	4b52      	ldr	r3, [pc, #328]	; (1a002744 <refreshPageData+0x150>)
1a0025fa:	681a      	ldr	r2, [r3, #0]
1a0025fc:	4b52      	ldr	r3, [pc, #328]	; (1a002748 <refreshPageData+0x154>)
1a0025fe:	429a      	cmp	r2, r3
1a002600:	d008      	beq.n	1a002614 <refreshPageData+0x20>
	{
		pageData = pageDataB;
	}
	else
		{
		pageData = pageDataA;
1a002602:	4e51      	ldr	r6, [pc, #324]	; (1a002748 <refreshPageData+0x154>)
	uint8_t aux;
	uint8_t * auxPointer;
	char auxStrig[60];
	//Armo un string con formato JSON de la siguiente forma
	// {"panel":Nº de panel, "data":[,,,,]}
	stdioSprintf(pageData, "{\"panel\":%d,\"data\":[",actualPanelNumber);
1a002604:	4b51      	ldr	r3, [pc, #324]	; (1a00274c <refreshPageData+0x158>)
1a002606:	781a      	ldrb	r2, [r3, #0]
1a002608:	4951      	ldr	r1, [pc, #324]	; (1a002750 <refreshPageData+0x15c>)
1a00260a:	4630      	mov	r0, r6
1a00260c:	f003 fe46 	bl	1a00629c <stdioSprintf>
	for (j=0;j<8;j++)
1a002610:	2500      	movs	r5, #0
1a002612:	e07f      	b.n	1a002714 <refreshPageData+0x120>
		pageData = pageDataB;
1a002614:	4e4f      	ldr	r6, [pc, #316]	; (1a002754 <refreshPageData+0x160>)
1a002616:	e7f5      	b.n	1a002604 <refreshPageData+0x10>
	{
		for (i=0;i<PORTS_NUMBER;i++)
		{
			switch (j){
				case 0:{
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].state);
1a002618:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a00261c:	00da      	lsls	r2, r3, #3
1a00261e:	4b4e      	ldr	r3, [pc, #312]	; (1a002758 <refreshPageData+0x164>)
1a002620:	4413      	add	r3, r2
1a002622:	785a      	ldrb	r2, [r3, #1]
1a002624:	494d      	ldr	r1, [pc, #308]	; (1a00275c <refreshPageData+0x168>)
1a002626:	a801      	add	r0, sp, #4
1a002628:	f003 fe38 	bl	1a00629c <stdioSprintf>
					aux = GUARDAR;
					stdioSprintf(auxStrig,"%d,",aux);
				break;
				}
			}
			strcat (pageData,auxStrig);
1a00262c:	a901      	add	r1, sp, #4
1a00262e:	4630      	mov	r0, r6
1a002630:	f004 fb23 	bl	1a006c7a <strcat>
		for (i=0;i<PORTS_NUMBER;i++)
1a002634:	3401      	adds	r4, #1
1a002636:	b2e4      	uxtb	r4, r4
1a002638:	2c05      	cmp	r4, #5
1a00263a:	d869      	bhi.n	1a002710 <refreshPageData+0x11c>
			switch (j){
1a00263c:	2d07      	cmp	r5, #7
1a00263e:	d8f5      	bhi.n	1a00262c <refreshPageData+0x38>
1a002640:	a301      	add	r3, pc, #4	; (adr r3, 1a002648 <refreshPageData+0x54>)
1a002642:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
1a002646:	bf00      	nop
1a002648:	1a002619 	.word	0x1a002619
1a00264c:	1a002669 	.word	0x1a002669
1a002650:	1a00268f 	.word	0x1a00268f
1a002654:	1a0026a5 	.word	0x1a0026a5
1a002658:	1a0026bd 	.word	0x1a0026bd
1a00265c:	1a0026d5 	.word	0x1a0026d5
1a002660:	1a0026ed 	.word	0x1a0026ed
1a002664:	1a002705 	.word	0x1a002705
					if ((FSMRegisters[i].state==STOP)||(FSMRegisters[i].state==INIT))
1a002668:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a00266c:	00da      	lsls	r2, r3, #3
1a00266e:	4b3a      	ldr	r3, [pc, #232]	; (1a002758 <refreshPageData+0x164>)
1a002670:	4413      	add	r3, r2
1a002672:	785b      	ldrb	r3, [r3, #1]
1a002674:	2b21      	cmp	r3, #33	; 0x21
1a002676:	d002      	beq.n	1a00267e <refreshPageData+0x8a>
1a002678:	b93b      	cbnz	r3, 1a00268a <refreshPageData+0x96>
						aux = MARCHA;
1a00267a:	2215      	movs	r2, #21
1a00267c:	e000      	b.n	1a002680 <refreshPageData+0x8c>
1a00267e:	2215      	movs	r2, #21
					stdioSprintf(auxStrig,"%d,",aux);
1a002680:	4936      	ldr	r1, [pc, #216]	; (1a00275c <refreshPageData+0x168>)
1a002682:	a801      	add	r0, sp, #4
1a002684:	f003 fe0a 	bl	1a00629c <stdioSprintf>
				break;
1a002688:	e7d0      	b.n	1a00262c <refreshPageData+0x38>
						aux = PARADA;
1a00268a:	221f      	movs	r2, #31
1a00268c:	e7f8      	b.n	1a002680 <refreshPageData+0x8c>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].pasa);
1a00268e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a002692:	00da      	lsls	r2, r3, #3
1a002694:	4b30      	ldr	r3, [pc, #192]	; (1a002758 <refreshPageData+0x164>)
1a002696:	4413      	add	r3, r2
1a002698:	7e1a      	ldrb	r2, [r3, #24]
1a00269a:	4930      	ldr	r1, [pc, #192]	; (1a00275c <refreshPageData+0x168>)
1a00269c:	a801      	add	r0, sp, #4
1a00269e:	f003 fdfd 	bl	1a00629c <stdioSprintf>
					break;
1a0026a2:	e7c3      	b.n	1a00262c <refreshPageData+0x38>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[0]);
1a0026a4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a0026a8:	00da      	lsls	r2, r3, #3
1a0026aa:	4b2b      	ldr	r3, [pc, #172]	; (1a002758 <refreshPageData+0x164>)
1a0026ac:	4413      	add	r3, r2
1a0026ae:	69db      	ldr	r3, [r3, #28]
1a0026b0:	681a      	ldr	r2, [r3, #0]
1a0026b2:	492a      	ldr	r1, [pc, #168]	; (1a00275c <refreshPageData+0x168>)
1a0026b4:	a801      	add	r0, sp, #4
1a0026b6:	f003 fdf1 	bl	1a00629c <stdioSprintf>
					break;
1a0026ba:	e7b7      	b.n	1a00262c <refreshPageData+0x38>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[1]);
1a0026bc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a0026c0:	00da      	lsls	r2, r3, #3
1a0026c2:	4b25      	ldr	r3, [pc, #148]	; (1a002758 <refreshPageData+0x164>)
1a0026c4:	4413      	add	r3, r2
1a0026c6:	69db      	ldr	r3, [r3, #28]
1a0026c8:	685a      	ldr	r2, [r3, #4]
1a0026ca:	4924      	ldr	r1, [pc, #144]	; (1a00275c <refreshPageData+0x168>)
1a0026cc:	a801      	add	r0, sp, #4
1a0026ce:	f003 fde5 	bl	1a00629c <stdioSprintf>
					break;
1a0026d2:	e7ab      	b.n	1a00262c <refreshPageData+0x38>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[2]);
1a0026d4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a0026d8:	00da      	lsls	r2, r3, #3
1a0026da:	4b1f      	ldr	r3, [pc, #124]	; (1a002758 <refreshPageData+0x164>)
1a0026dc:	4413      	add	r3, r2
1a0026de:	69db      	ldr	r3, [r3, #28]
1a0026e0:	689a      	ldr	r2, [r3, #8]
1a0026e2:	491e      	ldr	r1, [pc, #120]	; (1a00275c <refreshPageData+0x168>)
1a0026e4:	a801      	add	r0, sp, #4
1a0026e6:	f003 fdd9 	bl	1a00629c <stdioSprintf>
					break;
1a0026ea:	e79f      	b.n	1a00262c <refreshPageData+0x38>
					stdioSprintf(auxStrig,"%d,",FSMRegisters[i].param[3]);
1a0026ec:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
1a0026f0:	00da      	lsls	r2, r3, #3
1a0026f2:	4b19      	ldr	r3, [pc, #100]	; (1a002758 <refreshPageData+0x164>)
1a0026f4:	4413      	add	r3, r2
1a0026f6:	69db      	ldr	r3, [r3, #28]
1a0026f8:	68da      	ldr	r2, [r3, #12]
1a0026fa:	4918      	ldr	r1, [pc, #96]	; (1a00275c <refreshPageData+0x168>)
1a0026fc:	a801      	add	r0, sp, #4
1a0026fe:	f003 fdcd 	bl	1a00629c <stdioSprintf>
					break;
1a002702:	e793      	b.n	1a00262c <refreshPageData+0x38>
					stdioSprintf(auxStrig,"%d,",aux);
1a002704:	2216      	movs	r2, #22
1a002706:	4915      	ldr	r1, [pc, #84]	; (1a00275c <refreshPageData+0x168>)
1a002708:	a801      	add	r0, sp, #4
1a00270a:	f003 fdc7 	bl	1a00629c <stdioSprintf>
				break;
1a00270e:	e78d      	b.n	1a00262c <refreshPageData+0x38>
	for (j=0;j<8;j++)
1a002710:	3501      	adds	r5, #1
1a002712:	b2ed      	uxtb	r5, r5
1a002714:	2d07      	cmp	r5, #7
1a002716:	d801      	bhi.n	1a00271c <refreshPageData+0x128>
		for (i=0;i<PORTS_NUMBER;i++)
1a002718:	2400      	movs	r4, #0
1a00271a:	e78d      	b.n	1a002638 <refreshPageData+0x44>
		}
	}
	pageData[strlen(pageData)-1]=0; //borro la ultima coma
1a00271c:	4630      	mov	r0, r6
1a00271e:	f004 fada 	bl	1a006cd6 <strlen>
1a002722:	3801      	subs	r0, #1
1a002724:	2300      	movs	r3, #0
1a002726:	5433      	strb	r3, [r6, r0]
	strcat (pageData,"]}");
1a002728:	4630      	mov	r0, r6
1a00272a:	f004 fad4 	bl	1a006cd6 <strlen>
1a00272e:	1832      	adds	r2, r6, r0
1a002730:	4b0b      	ldr	r3, [pc, #44]	; (1a002760 <refreshPageData+0x16c>)
1a002732:	8819      	ldrh	r1, [r3, #0]
1a002734:	789b      	ldrb	r3, [r3, #2]
1a002736:	5231      	strh	r1, [r6, r0]
1a002738:	7093      	strb	r3, [r2, #2]

	actualPageData = pageData; //Unicamente cambio el puntero a los datos que se van a mandar cuando ya esta completa la informacion
1a00273a:	4b02      	ldr	r3, [pc, #8]	; (1a002744 <refreshPageData+0x150>)
1a00273c:	601e      	str	r6, [r3, #0]

}
1a00273e:	b010      	add	sp, #64	; 0x40
1a002740:	bd70      	pop	{r4, r5, r6, pc}
1a002742:	bf00      	nop
1a002744:	1000656c 	.word	0x1000656c
1a002748:	10000dc4 	.word	0x10000dc4
1a00274c:	100063bc 	.word	0x100063bc
1a002750:	1a00791c 	.word	0x1a00791c
1a002754:	10000f24 	.word	0x10000f24
1a002758:	10006204 	.word	0x10006204
1a00275c:	1a007934 	.word	0x1a007934
1a002760:	1a007938 	.word	0x1a007938

1a002764 <interpreter>:
{
1a002764:	b510      	push	{r4, lr}
1a002766:	b086      	sub	sp, #24
	loadParameters (actualPanelNumber-1); 		//Cargo los parametros en los registros de la maquina de estado
1a002768:	4c54      	ldr	r4, [pc, #336]	; (1a0028bc <interpreter+0x158>)
1a00276a:	7820      	ldrb	r0, [r4, #0]
1a00276c:	3801      	subs	r0, #1
1a00276e:	f7ff fc37 	bl	1a001fe0 <loadParameters>
	actualPageData = pageDataA;
1a002772:	4b53      	ldr	r3, [pc, #332]	; (1a0028c0 <interpreter+0x15c>)
1a002774:	4a53      	ldr	r2, [pc, #332]	; (1a0028c4 <interpreter+0x160>)
1a002776:	601a      	str	r2, [r3, #0]
	actualPanel=panel0;
1a002778:	4b53      	ldr	r3, [pc, #332]	; (1a0028c8 <interpreter+0x164>)
1a00277a:	4a54      	ldr	r2, [pc, #336]	; (1a0028cc <interpreter+0x168>)
1a00277c:	601a      	str	r2, [r3, #0]
	updateAllParameters (actualPanelNumber-1);
1a00277e:	7820      	ldrb	r0, [r4, #0]
1a002780:	3801      	subs	r0, #1
1a002782:	b2c0      	uxtb	r0, r0
1a002784:	f7ff fac4 	bl	1a001d10 <updateAllParameters>
1a002788:	e009      	b.n	1a00279e <interpreter+0x3a>
							switch (command.buttonId[1]){
1a00278a:	f89d 3002 	ldrb.w	r3, [sp, #2]
1a00278e:	2b32      	cmp	r3, #50	; 0x32
1a002790:	d049      	beq.n	1a002826 <interpreter+0xc2>
1a002792:	2b34      	cmp	r3, #52	; 0x34
1a002794:	d061      	beq.n	1a00285a <interpreter+0xf6>
1a002796:	2b30      	cmp	r3, #48	; 0x30
1a002798:	d02b      	beq.n	1a0027f2 <interpreter+0x8e>
	refreshPageData();
1a00279a:	f7ff ff2b 	bl	1a0025f4 <refreshPageData>
	if(pdTRUE == xQueueReceive(commandsQueue,&command,250*portTICK_RATE_MS))
1a00279e:	22fa      	movs	r2, #250	; 0xfa
1a0027a0:	4669      	mov	r1, sp
1a0027a2:	4b4b      	ldr	r3, [pc, #300]	; (1a0028d0 <interpreter+0x16c>)
1a0027a4:	6818      	ldr	r0, [r3, #0]
1a0027a6:	f000 fc3d 	bl	1a003024 <xQueueReceive>
1a0027aa:	2801      	cmp	r0, #1
1a0027ac:	d1f5      	bne.n	1a00279a <interpreter+0x36>
		if (actualPanelNumber == command.panelNum) //Los comandos pueden ser producto de botones b (botones de la base de la interfaz de usuatio) o botones p (del panel de la interfaz)
1a0027ae:	f89d 3000 	ldrb.w	r3, [sp]
1a0027b2:	4a42      	ldr	r2, [pc, #264]	; (1a0028bc <interpreter+0x158>)
1a0027b4:	7810      	ldrb	r0, [r2, #0]
1a0027b6:	4283      	cmp	r3, r0
1a0027b8:	d1ef      	bne.n	1a00279a <interpreter+0x36>
			switch (command.buttonId[0]){
1a0027ba:	f89d 3001 	ldrb.w	r3, [sp, #1]
1a0027be:	2b62      	cmp	r3, #98	; 0x62
1a0027c0:	d0e3      	beq.n	1a00278a <interpreter+0x26>
1a0027c2:	2b70      	cmp	r3, #112	; 0x70
1a0027c4:	d1e9      	bne.n	1a00279a <interpreter+0x36>
							switch (command.buttonId[1]){
1a0027c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
1a0027ca:	2b31      	cmp	r3, #49	; 0x31
1a0027cc:	d049      	beq.n	1a002862 <interpreter+0xfe>
1a0027ce:	2b37      	cmp	r3, #55	; 0x37
1a0027d0:	d1e3      	bne.n	1a00279a <interpreter+0x36>
									sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a0027d2:	2121      	movs	r1, #33	; 0x21
1a0027d4:	f7fe fe22 	bl	1a00141c <sendToAllTests>
									params = getParameters ((uint32_t) actualPanelNumber-1,command.buttonId[2]-'0'); //Pido los parametros del panel actual para el puerto correspondiente al boton
1a0027d8:	4b38      	ldr	r3, [pc, #224]	; (1a0028bc <interpreter+0x158>)
1a0027da:	7818      	ldrb	r0, [r3, #0]
1a0027dc:	f89d 1003 	ldrb.w	r1, [sp, #3]
1a0027e0:	3930      	subs	r1, #48	; 0x30
1a0027e2:	b2c9      	uxtb	r1, r1
1a0027e4:	3801      	subs	r0, #1
1a0027e6:	f7ff fc3d 	bl	1a002064 <getParameters>
1a0027ea:	4b3a      	ldr	r3, [pc, #232]	; (1a0028d4 <interpreter+0x170>)
1a0027ec:	6018      	str	r0, [r3, #0]
									for (i=0;i<4;i++)
1a0027ee:	2300      	movs	r3, #0
1a0027f0:	e05b      	b.n	1a0028aa <interpreter+0x146>
											sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a0027f2:	2121      	movs	r1, #33	; 0x21
1a0027f4:	f7fe fe12 	bl	1a00141c <sendToAllTests>
											if (actualPanelNumber > 1)	
1a0027f8:	4b30      	ldr	r3, [pc, #192]	; (1a0028bc <interpreter+0x158>)
1a0027fa:	781b      	ldrb	r3, [r3, #0]
1a0027fc:	2b01      	cmp	r3, #1
1a0027fe:	d90e      	bls.n	1a00281e <interpreter+0xba>
												actualPanelNumber--;
1a002800:	3b01      	subs	r3, #1
1a002802:	4a2e      	ldr	r2, [pc, #184]	; (1a0028bc <interpreter+0x158>)
1a002804:	7013      	strb	r3, [r2, #0]
											actualPanel = panels[actualPanelNumber-1];
1a002806:	4b2d      	ldr	r3, [pc, #180]	; (1a0028bc <interpreter+0x158>)
1a002808:	7818      	ldrb	r0, [r3, #0]
1a00280a:	3801      	subs	r0, #1
1a00280c:	4b32      	ldr	r3, [pc, #200]	; (1a0028d8 <interpreter+0x174>)
1a00280e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
1a002812:	4b2d      	ldr	r3, [pc, #180]	; (1a0028c8 <interpreter+0x164>)
1a002814:	601a      	str	r2, [r3, #0]
											updateAllParameters (actualPanelNumber-1);
1a002816:	b2c0      	uxtb	r0, r0
1a002818:	f7ff fa7a 	bl	1a001d10 <updateAllParameters>
											break;
1a00281c:	e7bd      	b.n	1a00279a <interpreter+0x36>
												actualPanelNumber = 1;
1a00281e:	4b27      	ldr	r3, [pc, #156]	; (1a0028bc <interpreter+0x158>)
1a002820:	2201      	movs	r2, #1
1a002822:	701a      	strb	r2, [r3, #0]
1a002824:	e7ef      	b.n	1a002806 <interpreter+0xa2>
											sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a002826:	2121      	movs	r1, #33	; 0x21
1a002828:	f7fe fdf8 	bl	1a00141c <sendToAllTests>
											if (actualPanelNumber < TESTS_QTY)
1a00282c:	4b23      	ldr	r3, [pc, #140]	; (1a0028bc <interpreter+0x158>)
1a00282e:	781b      	ldrb	r3, [r3, #0]
1a002830:	2b02      	cmp	r3, #2
1a002832:	d80e      	bhi.n	1a002852 <interpreter+0xee>
												actualPanelNumber++;
1a002834:	3301      	adds	r3, #1
1a002836:	4a21      	ldr	r2, [pc, #132]	; (1a0028bc <interpreter+0x158>)
1a002838:	7013      	strb	r3, [r2, #0]
											actualPanel = panels[actualPanelNumber-1];
1a00283a:	4b20      	ldr	r3, [pc, #128]	; (1a0028bc <interpreter+0x158>)
1a00283c:	7818      	ldrb	r0, [r3, #0]
1a00283e:	3801      	subs	r0, #1
1a002840:	4b25      	ldr	r3, [pc, #148]	; (1a0028d8 <interpreter+0x174>)
1a002842:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
1a002846:	4b20      	ldr	r3, [pc, #128]	; (1a0028c8 <interpreter+0x164>)
1a002848:	601a      	str	r2, [r3, #0]
											updateAllParameters (actualPanelNumber-1);
1a00284a:	b2c0      	uxtb	r0, r0
1a00284c:	f7ff fa60 	bl	1a001d10 <updateAllParameters>
											break;
1a002850:	e7a3      	b.n	1a00279a <interpreter+0x36>
												actualPanelNumber = TESTS_QTY;
1a002852:	4b1a      	ldr	r3, [pc, #104]	; (1a0028bc <interpreter+0x158>)
1a002854:	2203      	movs	r2, #3
1a002856:	701a      	strb	r2, [r3, #0]
1a002858:	e7ef      	b.n	1a00283a <interpreter+0xd6>
											sendToAllTests (actualPanelNumber , STOP); //envio la orden de detener todas las tareas y no continuo hasta que se detuvieron
1a00285a:	2121      	movs	r1, #33	; 0x21
1a00285c:	f7fe fdde 	bl	1a00141c <sendToAllTests>
											break;
1a002860:	e79b      	b.n	1a00279a <interpreter+0x36>
									portNum = command.buttonId[2]-'0';
1a002862:	f89d 4003 	ldrb.w	r4, [sp, #3]
1a002866:	3c30      	subs	r4, #48	; 0x30
1a002868:	b2e4      	uxtb	r4, r4
									testState = getTestsState (portNum);
1a00286a:	4620      	mov	r0, r4
1a00286c:	f7fe fe10 	bl	1a001490 <getTestsState>
									if((testState == INIT)||(testState == STOP))
1a002870:	b108      	cbz	r0, 1a002876 <interpreter+0x112>
1a002872:	2821      	cmp	r0, #33	; 0x21
1a002874:	d106      	bne.n	1a002884 <interpreter+0x120>
										setTestOrder (portNum, actualPanelNumber, START);
1a002876:	2204      	movs	r2, #4
1a002878:	4b10      	ldr	r3, [pc, #64]	; (1a0028bc <interpreter+0x158>)
1a00287a:	7819      	ldrb	r1, [r3, #0]
1a00287c:	4620      	mov	r0, r4
1a00287e:	f7fe fdb3 	bl	1a0013e8 <setTestOrder>
1a002882:	e78a      	b.n	1a00279a <interpreter+0x36>
										setTestOrder (portNum, actualPanelNumber, STOP);
1a002884:	2221      	movs	r2, #33	; 0x21
1a002886:	4b0d      	ldr	r3, [pc, #52]	; (1a0028bc <interpreter+0x158>)
1a002888:	7819      	ldrb	r1, [r3, #0]
1a00288a:	4620      	mov	r0, r4
1a00288c:	f7fe fdac 	bl	1a0013e8 <setTestOrder>
1a002890:	e783      	b.n	1a00279a <interpreter+0x36>
										params[i]= command.parameters[i];
1a002892:	4a10      	ldr	r2, [pc, #64]	; (1a0028d4 <interpreter+0x170>)
1a002894:	6811      	ldr	r1, [r2, #0]
1a002896:	1c9a      	adds	r2, r3, #2
1a002898:	a806      	add	r0, sp, #24
1a00289a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
1a00289e:	f852 2c18 	ldr.w	r2, [r2, #-24]
1a0028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
									for (i=0;i<4;i++)
1a0028a6:	3301      	adds	r3, #1
1a0028a8:	b2db      	uxtb	r3, r3
1a0028aa:	2b03      	cmp	r3, #3
1a0028ac:	d9f1      	bls.n	1a002892 <interpreter+0x12e>
									saveParameters ((uint32_t) actualPanelNumber-1); //Guardo los nuevos parametros en EEPROM
1a0028ae:	4b03      	ldr	r3, [pc, #12]	; (1a0028bc <interpreter+0x158>)
1a0028b0:	7818      	ldrb	r0, [r3, #0]
1a0028b2:	3801      	subs	r0, #1
1a0028b4:	f7ff fbe2 	bl	1a00207c <saveParameters>
									break;
1a0028b8:	e76f      	b.n	1a00279a <interpreter+0x36>
1a0028ba:	bf00      	nop
1a0028bc:	100063bc 	.word	0x100063bc
1a0028c0:	1000656c 	.word	0x1000656c
1a0028c4:	10000dc4 	.word	0x10000dc4
1a0028c8:	10006568 	.word	0x10006568
1a0028cc:	10001084 	.word	0x10001084
1a0028d0:	100063b4 	.word	0x100063b4
1a0028d4:	10006570 	.word	0x10006570
1a0028d8:	10006574 	.word	0x10006574

1a0028dc <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a0028dc:	b508      	push	{r3, lr}

   boardInit();
1a0028de:	f003 fafb 	bl	1a005ed8 <boardInit>
   //gpioInit( T_COL1, GPIO_OUTPUT );
   //gpioWrite( T_COL1, ON ); //Habilito el modulo wifi


   //Creo las tareas de test y al mismo tiempo inicializo los puertos de pruebas
   interpreterInit();	//Configuro y creo la tarea del interprete
1a0028e2:	f7ff fe45 	bl	1a002570 <interpreterInit>
   pruebasInit ();		//Configuro y creo las tareas de las pruebas (una por cada puerto)
1a0028e6:	f7fe fd31 	bl	1a00134c <pruebasInit>
   espServerInit();		//Configuro y creo la tarea del servidor
1a0028ea:	f7fd fd7d 	bl	1a0003e8 <espServerInit>
   terminalInit();		//Configuro y creo la tarea de la terminal de configuarcion
1a0028ee:	f7ff fa2d 	bl	1a001d4c <terminalInit>


   vTaskStartScheduler(); // Initialize scheduler
1a0028f2:	f001 f841 	bl	1a003978 <vTaskStartScheduler>
1a0028f6:	e7fe      	b.n	1a0028f6 <main+0x1a>

1a0028f8 <initialise_monitor_handles>:
}
1a0028f8:	4770      	bx	lr
1a0028fa:	Address 0x000000001a0028fa is out of bounds.


1a0028fc <Reset_Handler>:
void Reset_Handler(void) {
1a0028fc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0028fe:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a002900:	4b19      	ldr	r3, [pc, #100]	; (1a002968 <Reset_Handler+0x6c>)
1a002902:	4a1a      	ldr	r2, [pc, #104]	; (1a00296c <Reset_Handler+0x70>)
1a002904:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a002906:	3304      	adds	r3, #4
1a002908:	4a19      	ldr	r2, [pc, #100]	; (1a002970 <Reset_Handler+0x74>)
1a00290a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00290c:	2300      	movs	r3, #0
1a00290e:	e005      	b.n	1a00291c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a002910:	4a18      	ldr	r2, [pc, #96]	; (1a002974 <Reset_Handler+0x78>)
1a002912:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a002916:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00291a:	3301      	adds	r3, #1
1a00291c:	2b07      	cmp	r3, #7
1a00291e:	d9f7      	bls.n	1a002910 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a002920:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a002922:	4b15      	ldr	r3, [pc, #84]	; (1a002978 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a002924:	e007      	b.n	1a002936 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a002926:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00292a:	689a      	ldr	r2, [r3, #8]
1a00292c:	6859      	ldr	r1, [r3, #4]
1a00292e:	6818      	ldr	r0, [r3, #0]
1a002930:	f7fd fc2b 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a002934:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a002936:	4a11      	ldr	r2, [pc, #68]	; (1a00297c <Reset_Handler+0x80>)
1a002938:	4293      	cmp	r3, r2
1a00293a:	d3f4      	bcc.n	1a002926 <Reset_Handler+0x2a>
1a00293c:	e006      	b.n	1a00294c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00293e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a002940:	6859      	ldr	r1, [r3, #4]
1a002942:	f854 0b08 	ldr.w	r0, [r4], #8
1a002946:	f7fd fc2f 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00294a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00294c:	4a0c      	ldr	r2, [pc, #48]	; (1a002980 <Reset_Handler+0x84>)
1a00294e:	4293      	cmp	r3, r2
1a002950:	d3f5      	bcc.n	1a00293e <Reset_Handler+0x42>
    SystemInit();
1a002952:	f002 feef 	bl	1a005734 <SystemInit>
    __libc_init_array();
1a002956:	f003 fff1 	bl	1a00693c <__libc_init_array>
    initialise_monitor_handles();
1a00295a:	f7ff ffcd 	bl	1a0028f8 <initialise_monitor_handles>
    main();
1a00295e:	f7ff ffbd 	bl	1a0028dc <main>
        __asm__ volatile("wfi");
1a002962:	bf30      	wfi
1a002964:	e7fd      	b.n	1a002962 <Reset_Handler+0x66>
1a002966:	bf00      	nop
1a002968:	40053100 	.word	0x40053100
1a00296c:	10df1000 	.word	0x10df1000
1a002970:	01dff7ff 	.word	0x01dff7ff
1a002974:	e000e280 	.word	0xe000e280
1a002978:	1a000114 	.word	0x1a000114
1a00297c:	1a000150 	.word	0x1a000150
1a002980:	1a000178 	.word	0x1a000178

1a002984 <_fini>:
void _fini(void) {}
1a002984:	4770      	bx	lr

1a002986 <_init>:
void _init(void) {}
1a002986:	4770      	bx	lr

1a002988 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a002988:	2309      	movs	r3, #9
1a00298a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00298c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002990:	4770      	bx	lr

1a002992 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a002992:	2358      	movs	r3, #88	; 0x58
1a002994:	6003      	str	r3, [r0, #0]
   return -1;
}
1a002996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00299a:	4770      	bx	lr

1a00299c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a00299c:	2902      	cmp	r1, #2
1a00299e:	d801      	bhi.n	1a0029a4 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0029a0:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0029a2:	4770      	bx	lr
       SET_ERR(EBADF);
1a0029a4:	2309      	movs	r3, #9
1a0029a6:	6003      	str	r3, [r0, #0]
       return -1;
1a0029a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0029ac:	4770      	bx	lr

1a0029ae <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0029ae:	2358      	movs	r3, #88	; 0x58
1a0029b0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0029b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0029b6:	4770      	bx	lr

1a0029b8 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0029b8:	2902      	cmp	r1, #2
1a0029ba:	d81f      	bhi.n	1a0029fc <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0029bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0029c0:	461d      	mov	r5, r3
1a0029c2:	4617      	mov	r7, r2
1a0029c4:	4606      	mov	r6, r0
  size_t i = 0;
1a0029c6:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0029c8:	42ac      	cmp	r4, r5
1a0029ca:	d211      	bcs.n	1a0029f0 <_read_r+0x38>
         int c = __stdio_getchar();
1a0029cc:	f002 f8e1 	bl	1a004b92 <__stdio_getchar>
         if( c != -1 ){
1a0029d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0029d4:	d0f8      	beq.n	1a0029c8 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0029d6:	f104 0801 	add.w	r8, r4, #1
1a0029da:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0029dc:	280d      	cmp	r0, #13
1a0029de:	d003      	beq.n	1a0029e8 <_read_r+0x30>
1a0029e0:	280a      	cmp	r0, #10
1a0029e2:	d001      	beq.n	1a0029e8 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0029e4:	4644      	mov	r4, r8
1a0029e6:	e7ef      	b.n	1a0029c8 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0029e8:	f002 f8d3 	bl	1a004b92 <__stdio_getchar>
               return i;
1a0029ec:	4640      	mov	r0, r8
1a0029ee:	e003      	b.n	1a0029f8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0029f0:	2313      	movs	r3, #19
1a0029f2:	6033      	str	r3, [r6, #0]
      return -1;
1a0029f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0029f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0029fc:	2313      	movs	r3, #19
1a0029fe:	6003      	str	r3, [r0, #0]
      return -1;
1a002a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002a04:	4770      	bx	lr

1a002a06 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a002a06:	2902      	cmp	r1, #2
1a002a08:	d80c      	bhi.n	1a002a24 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a002a0a:	b570      	push	{r4, r5, r6, lr}
1a002a0c:	461d      	mov	r5, r3
1a002a0e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a002a10:	2400      	movs	r4, #0
1a002a12:	e003      	b.n	1a002a1c <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a002a14:	5d30      	ldrb	r0, [r6, r4]
1a002a16:	f002 f8b7 	bl	1a004b88 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a002a1a:	3401      	adds	r4, #1
1a002a1c:	42ac      	cmp	r4, r5
1a002a1e:	d3f9      	bcc.n	1a002a14 <_write_r+0xe>
       return n;
1a002a20:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a002a22:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a002a24:	2313      	movs	r3, #19
1a002a26:	6003      	str	r3, [r0, #0]
       return -1;
1a002a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002a2c:	4770      	bx	lr
1a002a2e:	Address 0x000000001a002a2e is out of bounds.


1a002a30 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a002a30:	4b05      	ldr	r3, [pc, #20]	; (1a002a48 <_sbrk_r+0x18>)
1a002a32:	681b      	ldr	r3, [r3, #0]
1a002a34:	b123      	cbz	r3, 1a002a40 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a002a36:	4b04      	ldr	r3, [pc, #16]	; (1a002a48 <_sbrk_r+0x18>)
1a002a38:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a002a3a:	4401      	add	r1, r0
1a002a3c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a002a3e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a002a40:	4b01      	ldr	r3, [pc, #4]	; (1a002a48 <_sbrk_r+0x18>)
1a002a42:	4a02      	ldr	r2, [pc, #8]	; (1a002a4c <_sbrk_r+0x1c>)
1a002a44:	601a      	str	r2, [r3, #0]
1a002a46:	e7f6      	b.n	1a002a36 <_sbrk_r+0x6>
1a002a48:	10001f84 	.word	0x10001f84
1a002a4c:	100065c8 	.word	0x100065c8

1a002a50 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a002a50:	b538      	push	{r3, r4, r5, lr}
1a002a52:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a002a54:	f010 0f07 	tst.w	r0, #7
1a002a58:	d002      	beq.n	1a002a60 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a002a5a:	f020 0407 	bic.w	r4, r0, #7
1a002a5e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a002a60:	f000 ffd4 	bl	1a003a0c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a002a64:	4b13      	ldr	r3, [pc, #76]	; (1a002ab4 <pvPortMalloc+0x64>)
1a002a66:	681b      	ldr	r3, [r3, #0]
1a002a68:	b17b      	cbz	r3, 1a002a8a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a002a6a:	4b13      	ldr	r3, [pc, #76]	; (1a002ab8 <pvPortMalloc+0x68>)
1a002a6c:	681b      	ldr	r3, [r3, #0]
1a002a6e:	441c      	add	r4, r3
1a002a70:	f243 72f7 	movw	r2, #14327	; 0x37f7
1a002a74:	4294      	cmp	r4, r2
1a002a76:	d80e      	bhi.n	1a002a96 <pvPortMalloc+0x46>
1a002a78:	42a3      	cmp	r3, r4
1a002a7a:	d310      	bcc.n	1a002a9e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a002a7c:	f001 f860 	bl	1a003b40 <xTaskResumeAll>
void *pvReturn = NULL;
1a002a80:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a002a82:	f000 fd65 	bl	1a003550 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a002a86:	4628      	mov	r0, r5
1a002a88:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a002a8a:	4b0c      	ldr	r3, [pc, #48]	; (1a002abc <pvPortMalloc+0x6c>)
1a002a8c:	f023 0307 	bic.w	r3, r3, #7
1a002a90:	4a08      	ldr	r2, [pc, #32]	; (1a002ab4 <pvPortMalloc+0x64>)
1a002a92:	6013      	str	r3, [r2, #0]
1a002a94:	e7e9      	b.n	1a002a6a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a002a96:	f001 f853 	bl	1a003b40 <xTaskResumeAll>
void *pvReturn = NULL;
1a002a9a:	2500      	movs	r5, #0
1a002a9c:	e7f1      	b.n	1a002a82 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a002a9e:	4a05      	ldr	r2, [pc, #20]	; (1a002ab4 <pvPortMalloc+0x64>)
1a002aa0:	6815      	ldr	r5, [r2, #0]
1a002aa2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a002aa4:	4b04      	ldr	r3, [pc, #16]	; (1a002ab8 <pvPortMalloc+0x68>)
1a002aa6:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a002aa8:	f001 f84a 	bl	1a003b40 <xTaskResumeAll>
		if( pvReturn == NULL )
1a002aac:	2d00      	cmp	r5, #0
1a002aae:	d1ea      	bne.n	1a002a86 <pvPortMalloc+0x36>
1a002ab0:	e7e7      	b.n	1a002a82 <pvPortMalloc+0x32>
1a002ab2:	bf00      	nop
1a002ab4:	10001f88 	.word	0x10001f88
1a002ab8:	1000578c 	.word	0x1000578c
1a002abc:	10001f94 	.word	0x10001f94

1a002ac0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a002ac0:	b140      	cbz	r0, 1a002ad4 <vPortFree+0x14>
	__asm volatile
1a002ac2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ac6:	f383 8811 	msr	BASEPRI, r3
1a002aca:	f3bf 8f6f 	isb	sy
1a002ace:	f3bf 8f4f 	dsb	sy
1a002ad2:	e7fe      	b.n	1a002ad2 <vPortFree+0x12>
}
1a002ad4:	4770      	bx	lr

1a002ad6 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a002ad6:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a002ad8:	b123      	cbz	r3, 1a002ae4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a002ada:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a002adc:	6818      	ldr	r0, [r3, #0]
1a002ade:	f1c0 0007 	rsb	r0, r0, #7
1a002ae2:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a002ae4:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a002ae6:	4770      	bx	lr

1a002ae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a002ae8:	b510      	push	{r4, lr}
1a002aea:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a002aec:	f001 fdfa 	bl	1a0046e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a002af0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a002af2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002af4:	429a      	cmp	r2, r3
1a002af6:	d004      	beq.n	1a002b02 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a002af8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a002afa:	f001 fe15 	bl	1a004728 <vPortExitCritical>

	return xReturn;
}
1a002afe:	4620      	mov	r0, r4
1a002b00:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a002b02:	2401      	movs	r4, #1
1a002b04:	e7f9      	b.n	1a002afa <prvIsQueueFull+0x12>

1a002b06 <prvIsQueueEmpty>:
{
1a002b06:	b510      	push	{r4, lr}
1a002b08:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a002b0a:	f001 fdeb 	bl	1a0046e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a002b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002b10:	b123      	cbz	r3, 1a002b1c <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a002b12:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002b14:	f001 fe08 	bl	1a004728 <vPortExitCritical>
}
1a002b18:	4620      	mov	r0, r4
1a002b1a:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a002b1c:	2401      	movs	r4, #1
1a002b1e:	e7f9      	b.n	1a002b14 <prvIsQueueEmpty+0xe>

1a002b20 <prvCopyDataToQueue>:
{
1a002b20:	b570      	push	{r4, r5, r6, lr}
1a002b22:	4604      	mov	r4, r0
1a002b24:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a002b26:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a002b28:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a002b2a:	b95a      	cbnz	r2, 1a002b44 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a002b2c:	6803      	ldr	r3, [r0, #0]
1a002b2e:	b11b      	cbz	r3, 1a002b38 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a002b30:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a002b32:	3501      	adds	r5, #1
1a002b34:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a002b36:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a002b38:	6840      	ldr	r0, [r0, #4]
1a002b3a:	f001 fa3d 	bl	1a003fb8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a002b3e:	2300      	movs	r3, #0
1a002b40:	6063      	str	r3, [r4, #4]
1a002b42:	e7f6      	b.n	1a002b32 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a002b44:	b96e      	cbnz	r6, 1a002b62 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a002b46:	6880      	ldr	r0, [r0, #8]
1a002b48:	f003 ff1c 	bl	1a006984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a002b4c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a002b4e:	68a3      	ldr	r3, [r4, #8]
1a002b50:	4413      	add	r3, r2
1a002b52:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a002b54:	6862      	ldr	r2, [r4, #4]
1a002b56:	4293      	cmp	r3, r2
1a002b58:	d319      	bcc.n	1a002b8e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a002b5a:	6823      	ldr	r3, [r4, #0]
1a002b5c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a002b5e:	2000      	movs	r0, #0
1a002b60:	e7e7      	b.n	1a002b32 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002b62:	68c0      	ldr	r0, [r0, #12]
1a002b64:	f003 ff0e 	bl	1a006984 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a002b68:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a002b6a:	4252      	negs	r2, r2
1a002b6c:	68e3      	ldr	r3, [r4, #12]
1a002b6e:	4413      	add	r3, r2
1a002b70:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a002b72:	6821      	ldr	r1, [r4, #0]
1a002b74:	428b      	cmp	r3, r1
1a002b76:	d202      	bcs.n	1a002b7e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a002b78:	6863      	ldr	r3, [r4, #4]
1a002b7a:	441a      	add	r2, r3
1a002b7c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a002b7e:	2e02      	cmp	r6, #2
1a002b80:	d001      	beq.n	1a002b86 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a002b82:	2000      	movs	r0, #0
1a002b84:	e7d5      	b.n	1a002b32 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a002b86:	b125      	cbz	r5, 1a002b92 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a002b88:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a002b8a:	2000      	movs	r0, #0
1a002b8c:	e7d1      	b.n	1a002b32 <prvCopyDataToQueue+0x12>
1a002b8e:	2000      	movs	r0, #0
1a002b90:	e7cf      	b.n	1a002b32 <prvCopyDataToQueue+0x12>
1a002b92:	2000      	movs	r0, #0
1a002b94:	e7cd      	b.n	1a002b32 <prvCopyDataToQueue+0x12>

1a002b96 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a002b96:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a002b98:	b172      	cbz	r2, 1a002bb8 <prvCopyDataFromQueue+0x22>
{
1a002b9a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a002b9c:	68c3      	ldr	r3, [r0, #12]
1a002b9e:	4413      	add	r3, r2
1a002ba0:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a002ba2:	6844      	ldr	r4, [r0, #4]
1a002ba4:	42a3      	cmp	r3, r4
1a002ba6:	d301      	bcc.n	1a002bac <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a002ba8:	6803      	ldr	r3, [r0, #0]
1a002baa:	60c3      	str	r3, [r0, #12]
1a002bac:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a002bae:	68c1      	ldr	r1, [r0, #12]
1a002bb0:	4620      	mov	r0, r4
1a002bb2:	f003 fee7 	bl	1a006984 <memcpy>
}
1a002bb6:	bd10      	pop	{r4, pc}
1a002bb8:	4770      	bx	lr

1a002bba <prvUnlockQueue>:
{
1a002bba:	b538      	push	{r3, r4, r5, lr}
1a002bbc:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a002bbe:	f001 fd91 	bl	1a0046e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a002bc2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a002bc6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a002bc8:	e003      	b.n	1a002bd2 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a002bca:	f001 f983 	bl	1a003ed4 <vTaskMissedYield>
			--cTxLock;
1a002bce:	3c01      	subs	r4, #1
1a002bd0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a002bd2:	2c00      	cmp	r4, #0
1a002bd4:	dd08      	ble.n	1a002be8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a002bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a002bd8:	b133      	cbz	r3, 1a002be8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a002bda:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a002bde:	f001 f8e7 	bl	1a003db0 <xTaskRemoveFromEventList>
1a002be2:	2800      	cmp	r0, #0
1a002be4:	d0f3      	beq.n	1a002bce <prvUnlockQueue+0x14>
1a002be6:	e7f0      	b.n	1a002bca <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a002be8:	23ff      	movs	r3, #255	; 0xff
1a002bea:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a002bee:	f001 fd9b 	bl	1a004728 <vPortExitCritical>
	taskENTER_CRITICAL();
1a002bf2:	f001 fd77 	bl	1a0046e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a002bf6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a002bfa:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a002bfc:	e003      	b.n	1a002c06 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a002bfe:	f001 f969 	bl	1a003ed4 <vTaskMissedYield>
				--cRxLock;
1a002c02:	3c01      	subs	r4, #1
1a002c04:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a002c06:	2c00      	cmp	r4, #0
1a002c08:	dd08      	ble.n	1a002c1c <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a002c0a:	692b      	ldr	r3, [r5, #16]
1a002c0c:	b133      	cbz	r3, 1a002c1c <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a002c0e:	f105 0010 	add.w	r0, r5, #16
1a002c12:	f001 f8cd 	bl	1a003db0 <xTaskRemoveFromEventList>
1a002c16:	2800      	cmp	r0, #0
1a002c18:	d0f3      	beq.n	1a002c02 <prvUnlockQueue+0x48>
1a002c1a:	e7f0      	b.n	1a002bfe <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a002c1c:	23ff      	movs	r3, #255	; 0xff
1a002c1e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a002c22:	f001 fd81 	bl	1a004728 <vPortExitCritical>
}
1a002c26:	bd38      	pop	{r3, r4, r5, pc}

1a002c28 <xQueueGenericReset>:
{
1a002c28:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a002c2a:	b940      	cbnz	r0, 1a002c3e <xQueueGenericReset+0x16>
1a002c2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c30:	f383 8811 	msr	BASEPRI, r3
1a002c34:	f3bf 8f6f 	isb	sy
1a002c38:	f3bf 8f4f 	dsb	sy
1a002c3c:	e7fe      	b.n	1a002c3c <xQueueGenericReset+0x14>
1a002c3e:	4604      	mov	r4, r0
1a002c40:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a002c42:	f001 fd4f 	bl	1a0046e4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a002c46:	6821      	ldr	r1, [r4, #0]
1a002c48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a002c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002c4c:	fb03 1002 	mla	r0, r3, r2, r1
1a002c50:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a002c52:	2000      	movs	r0, #0
1a002c54:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a002c56:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a002c58:	3a01      	subs	r2, #1
1a002c5a:	fb02 1303 	mla	r3, r2, r3, r1
1a002c5e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a002c60:	23ff      	movs	r3, #255	; 0xff
1a002c62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a002c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a002c6a:	b9a5      	cbnz	r5, 1a002c96 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a002c6c:	6923      	ldr	r3, [r4, #16]
1a002c6e:	b91b      	cbnz	r3, 1a002c78 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a002c70:	f001 fd5a 	bl	1a004728 <vPortExitCritical>
}
1a002c74:	2001      	movs	r0, #1
1a002c76:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a002c78:	f104 0010 	add.w	r0, r4, #16
1a002c7c:	f001 f898 	bl	1a003db0 <xTaskRemoveFromEventList>
1a002c80:	2800      	cmp	r0, #0
1a002c82:	d0f5      	beq.n	1a002c70 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a002c84:	4b08      	ldr	r3, [pc, #32]	; (1a002ca8 <xQueueGenericReset+0x80>)
1a002c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002c8a:	601a      	str	r2, [r3, #0]
1a002c8c:	f3bf 8f4f 	dsb	sy
1a002c90:	f3bf 8f6f 	isb	sy
1a002c94:	e7ec      	b.n	1a002c70 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a002c96:	f104 0010 	add.w	r0, r4, #16
1a002c9a:	f000 fbe2 	bl	1a003462 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a002c9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a002ca2:	f000 fbde 	bl	1a003462 <vListInitialise>
1a002ca6:	e7e3      	b.n	1a002c70 <xQueueGenericReset+0x48>
1a002ca8:	e000ed04 	.word	0xe000ed04

1a002cac <prvInitialiseNewQueue>:
{
1a002cac:	b538      	push	{r3, r4, r5, lr}
1a002cae:	461d      	mov	r5, r3
1a002cb0:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a002cb2:	460b      	mov	r3, r1
1a002cb4:	b149      	cbz	r1, 1a002cca <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a002cb6:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a002cb8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a002cba:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a002cbc:	2101      	movs	r1, #1
1a002cbe:	4620      	mov	r0, r4
1a002cc0:	f7ff ffb2 	bl	1a002c28 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a002cc4:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a002cc8:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a002cca:	6024      	str	r4, [r4, #0]
1a002ccc:	e7f4      	b.n	1a002cb8 <prvInitialiseNewQueue+0xc>

1a002cce <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a002cce:	b940      	cbnz	r0, 1a002ce2 <xQueueGenericCreateStatic+0x14>
1a002cd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cd4:	f383 8811 	msr	BASEPRI, r3
1a002cd8:	f3bf 8f6f 	isb	sy
1a002cdc:	f3bf 8f4f 	dsb	sy
1a002ce0:	e7fe      	b.n	1a002ce0 <xQueueGenericCreateStatic+0x12>
	{
1a002ce2:	b510      	push	{r4, lr}
1a002ce4:	b084      	sub	sp, #16
1a002ce6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a002ce8:	b153      	cbz	r3, 1a002d00 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a002cea:	b192      	cbz	r2, 1a002d12 <xQueueGenericCreateStatic+0x44>
1a002cec:	b989      	cbnz	r1, 1a002d12 <xQueueGenericCreateStatic+0x44>
1a002cee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002cf2:	f383 8811 	msr	BASEPRI, r3
1a002cf6:	f3bf 8f6f 	isb	sy
1a002cfa:	f3bf 8f4f 	dsb	sy
1a002cfe:	e7fe      	b.n	1a002cfe <xQueueGenericCreateStatic+0x30>
1a002d00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d04:	f383 8811 	msr	BASEPRI, r3
1a002d08:	f3bf 8f6f 	isb	sy
1a002d0c:	f3bf 8f4f 	dsb	sy
1a002d10:	e7fe      	b.n	1a002d10 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a002d12:	b94a      	cbnz	r2, 1a002d28 <xQueueGenericCreateStatic+0x5a>
1a002d14:	b141      	cbz	r1, 1a002d28 <xQueueGenericCreateStatic+0x5a>
1a002d16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d1a:	f383 8811 	msr	BASEPRI, r3
1a002d1e:	f3bf 8f6f 	isb	sy
1a002d22:	f3bf 8f4f 	dsb	sy
1a002d26:	e7fe      	b.n	1a002d26 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a002d28:	2050      	movs	r0, #80	; 0x50
1a002d2a:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a002d2c:	9803      	ldr	r0, [sp, #12]
1a002d2e:	2850      	cmp	r0, #80	; 0x50
1a002d30:	d008      	beq.n	1a002d44 <xQueueGenericCreateStatic+0x76>
1a002d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d36:	f383 8811 	msr	BASEPRI, r3
1a002d3a:	f3bf 8f6f 	isb	sy
1a002d3e:	f3bf 8f4f 	dsb	sy
1a002d42:	e7fe      	b.n	1a002d42 <xQueueGenericCreateStatic+0x74>
1a002d44:	4620      	mov	r0, r4
1a002d46:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a002d48:	2301      	movs	r3, #1
1a002d4a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a002d4e:	9400      	str	r4, [sp, #0]
1a002d50:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a002d54:	f7ff ffaa 	bl	1a002cac <prvInitialiseNewQueue>
	}
1a002d58:	4620      	mov	r0, r4
1a002d5a:	b004      	add	sp, #16
1a002d5c:	bd10      	pop	{r4, pc}

1a002d5e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a002d5e:	b940      	cbnz	r0, 1a002d72 <xQueueGenericCreate+0x14>
1a002d60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002d64:	f383 8811 	msr	BASEPRI, r3
1a002d68:	f3bf 8f6f 	isb	sy
1a002d6c:	f3bf 8f4f 	dsb	sy
1a002d70:	e7fe      	b.n	1a002d70 <xQueueGenericCreate+0x12>
	{
1a002d72:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002d74:	b083      	sub	sp, #12
1a002d76:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a002d78:	b111      	cbz	r1, 1a002d80 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002d7a:	fb01 f000 	mul.w	r0, r1, r0
1a002d7e:	e000      	b.n	1a002d82 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a002d80:	2000      	movs	r0, #0
1a002d82:	4617      	mov	r7, r2
1a002d84:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a002d86:	3050      	adds	r0, #80	; 0x50
1a002d88:	f7ff fe62 	bl	1a002a50 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a002d8c:	4605      	mov	r5, r0
1a002d8e:	b150      	cbz	r0, 1a002da6 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a002d90:	2300      	movs	r3, #0
1a002d92:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a002d96:	9000      	str	r0, [sp, #0]
1a002d98:	463b      	mov	r3, r7
1a002d9a:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a002d9e:	4621      	mov	r1, r4
1a002da0:	4630      	mov	r0, r6
1a002da2:	f7ff ff83 	bl	1a002cac <prvInitialiseNewQueue>
	}
1a002da6:	4628      	mov	r0, r5
1a002da8:	b003      	add	sp, #12
1a002daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a002dac <xQueueGenericSend>:
{
1a002dac:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002dae:	b085      	sub	sp, #20
1a002db0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a002db2:	b160      	cbz	r0, 1a002dce <xQueueGenericSend+0x22>
1a002db4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a002db6:	b999      	cbnz	r1, 1a002de0 <xQueueGenericSend+0x34>
1a002db8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a002dba:	b18a      	cbz	r2, 1a002de0 <xQueueGenericSend+0x34>
1a002dbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002dc0:	f383 8811 	msr	BASEPRI, r3
1a002dc4:	f3bf 8f6f 	isb	sy
1a002dc8:	f3bf 8f4f 	dsb	sy
1a002dcc:	e7fe      	b.n	1a002dcc <xQueueGenericSend+0x20>
1a002dce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002dd2:	f383 8811 	msr	BASEPRI, r3
1a002dd6:	f3bf 8f6f 	isb	sy
1a002dda:	f3bf 8f4f 	dsb	sy
1a002dde:	e7fe      	b.n	1a002dde <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a002de0:	2b02      	cmp	r3, #2
1a002de2:	d10b      	bne.n	1a002dfc <xQueueGenericSend+0x50>
1a002de4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a002de6:	2a01      	cmp	r2, #1
1a002de8:	d008      	beq.n	1a002dfc <xQueueGenericSend+0x50>
1a002dea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002dee:	f383 8811 	msr	BASEPRI, r3
1a002df2:	f3bf 8f6f 	isb	sy
1a002df6:	f3bf 8f4f 	dsb	sy
1a002dfa:	e7fe      	b.n	1a002dfa <xQueueGenericSend+0x4e>
1a002dfc:	461e      	mov	r6, r3
1a002dfe:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a002e00:	f001 f86e 	bl	1a003ee0 <xTaskGetSchedulerState>
1a002e04:	b950      	cbnz	r0, 1a002e1c <xQueueGenericSend+0x70>
1a002e06:	9b01      	ldr	r3, [sp, #4]
1a002e08:	b153      	cbz	r3, 1a002e20 <xQueueGenericSend+0x74>
1a002e0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002e0e:	f383 8811 	msr	BASEPRI, r3
1a002e12:	f3bf 8f6f 	isb	sy
1a002e16:	f3bf 8f4f 	dsb	sy
1a002e1a:	e7fe      	b.n	1a002e1a <xQueueGenericSend+0x6e>
1a002e1c:	2500      	movs	r5, #0
1a002e1e:	e03a      	b.n	1a002e96 <xQueueGenericSend+0xea>
1a002e20:	2500      	movs	r5, #0
1a002e22:	e038      	b.n	1a002e96 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a002e24:	4632      	mov	r2, r6
1a002e26:	4639      	mov	r1, r7
1a002e28:	4620      	mov	r0, r4
1a002e2a:	f7ff fe79 	bl	1a002b20 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a002e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002e30:	b94b      	cbnz	r3, 1a002e46 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a002e32:	b1a8      	cbz	r0, 1a002e60 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a002e34:	4b3b      	ldr	r3, [pc, #236]	; (1a002f24 <xQueueGenericSend+0x178>)
1a002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002e3a:	601a      	str	r2, [r3, #0]
1a002e3c:	f3bf 8f4f 	dsb	sy
1a002e40:	f3bf 8f6f 	isb	sy
1a002e44:	e00c      	b.n	1a002e60 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a002e46:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a002e4a:	f000 ffb1 	bl	1a003db0 <xTaskRemoveFromEventList>
1a002e4e:	b138      	cbz	r0, 1a002e60 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a002e50:	4b34      	ldr	r3, [pc, #208]	; (1a002f24 <xQueueGenericSend+0x178>)
1a002e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002e56:	601a      	str	r2, [r3, #0]
1a002e58:	f3bf 8f4f 	dsb	sy
1a002e5c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a002e60:	f001 fc62 	bl	1a004728 <vPortExitCritical>
				return pdPASS;
1a002e64:	2001      	movs	r0, #1
}
1a002e66:	b005      	add	sp, #20
1a002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a002e6a:	f001 fc5d 	bl	1a004728 <vPortExitCritical>
					return errQUEUE_FULL;
1a002e6e:	2000      	movs	r0, #0
1a002e70:	e7f9      	b.n	1a002e66 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a002e72:	a802      	add	r0, sp, #8
1a002e74:	f000 ffe2 	bl	1a003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a002e78:	2501      	movs	r5, #1
1a002e7a:	e019      	b.n	1a002eb0 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a002e7c:	2300      	movs	r3, #0
1a002e7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a002e82:	e021      	b.n	1a002ec8 <xQueueGenericSend+0x11c>
1a002e84:	2300      	movs	r3, #0
1a002e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a002e8a:	e023      	b.n	1a002ed4 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a002e8c:	4620      	mov	r0, r4
1a002e8e:	f7ff fe94 	bl	1a002bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a002e92:	f000 fe55 	bl	1a003b40 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a002e96:	f001 fc25 	bl	1a0046e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a002e9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a002e9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002e9e:	429a      	cmp	r2, r3
1a002ea0:	d3c0      	bcc.n	1a002e24 <xQueueGenericSend+0x78>
1a002ea2:	2e02      	cmp	r6, #2
1a002ea4:	d0be      	beq.n	1a002e24 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a002ea6:	9b01      	ldr	r3, [sp, #4]
1a002ea8:	2b00      	cmp	r3, #0
1a002eaa:	d0de      	beq.n	1a002e6a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a002eac:	2d00      	cmp	r5, #0
1a002eae:	d0e0      	beq.n	1a002e72 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a002eb0:	f001 fc3a 	bl	1a004728 <vPortExitCritical>
		vTaskSuspendAll();
1a002eb4:	f000 fdaa 	bl	1a003a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a002eb8:	f001 fc14 	bl	1a0046e4 <vPortEnterCritical>
1a002ebc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a002ec0:	b25b      	sxtb	r3, r3
1a002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002ec6:	d0d9      	beq.n	1a002e7c <xQueueGenericSend+0xd0>
1a002ec8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a002ecc:	b25b      	sxtb	r3, r3
1a002ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002ed2:	d0d7      	beq.n	1a002e84 <xQueueGenericSend+0xd8>
1a002ed4:	f001 fc28 	bl	1a004728 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a002ed8:	a901      	add	r1, sp, #4
1a002eda:	a802      	add	r0, sp, #8
1a002edc:	f000 ffba 	bl	1a003e54 <xTaskCheckForTimeOut>
1a002ee0:	b9c8      	cbnz	r0, 1a002f16 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a002ee2:	4620      	mov	r0, r4
1a002ee4:	f7ff fe00 	bl	1a002ae8 <prvIsQueueFull>
1a002ee8:	2800      	cmp	r0, #0
1a002eea:	d0cf      	beq.n	1a002e8c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a002eec:	9901      	ldr	r1, [sp, #4]
1a002eee:	f104 0010 	add.w	r0, r4, #16
1a002ef2:	f000 ff29 	bl	1a003d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a002ef6:	4620      	mov	r0, r4
1a002ef8:	f7ff fe5f 	bl	1a002bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a002efc:	f000 fe20 	bl	1a003b40 <xTaskResumeAll>
1a002f00:	2800      	cmp	r0, #0
1a002f02:	d1c8      	bne.n	1a002e96 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a002f04:	4b07      	ldr	r3, [pc, #28]	; (1a002f24 <xQueueGenericSend+0x178>)
1a002f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002f0a:	601a      	str	r2, [r3, #0]
1a002f0c:	f3bf 8f4f 	dsb	sy
1a002f10:	f3bf 8f6f 	isb	sy
1a002f14:	e7bf      	b.n	1a002e96 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a002f16:	4620      	mov	r0, r4
1a002f18:	f7ff fe4f 	bl	1a002bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a002f1c:	f000 fe10 	bl	1a003b40 <xTaskResumeAll>
			return errQUEUE_FULL;
1a002f20:	2000      	movs	r0, #0
1a002f22:	e7a0      	b.n	1a002e66 <xQueueGenericSend+0xba>
1a002f24:	e000ed04 	.word	0xe000ed04

1a002f28 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a002f28:	b148      	cbz	r0, 1a002f3e <prvInitialiseMutex+0x16>
	{
1a002f2a:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a002f2c:	2100      	movs	r1, #0
1a002f2e:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a002f30:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a002f32:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a002f34:	460b      	mov	r3, r1
1a002f36:	460a      	mov	r2, r1
1a002f38:	f7ff ff38 	bl	1a002dac <xQueueGenericSend>
	}
1a002f3c:	bd08      	pop	{r3, pc}
1a002f3e:	4770      	bx	lr

1a002f40 <xQueueCreateMutex>:
	{
1a002f40:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a002f42:	4602      	mov	r2, r0
1a002f44:	2100      	movs	r1, #0
1a002f46:	2001      	movs	r0, #1
1a002f48:	f7ff ff09 	bl	1a002d5e <xQueueGenericCreate>
1a002f4c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a002f4e:	f7ff ffeb 	bl	1a002f28 <prvInitialiseMutex>
	}
1a002f52:	4620      	mov	r0, r4
1a002f54:	bd10      	pop	{r4, pc}

1a002f56 <xQueueGenericSendFromISR>:
{
1a002f56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a002f5a:	b160      	cbz	r0, 1a002f76 <xQueueGenericSendFromISR+0x20>
1a002f5c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a002f5e:	b999      	cbnz	r1, 1a002f88 <xQueueGenericSendFromISR+0x32>
1a002f60:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a002f62:	b188      	cbz	r0, 1a002f88 <xQueueGenericSendFromISR+0x32>
1a002f64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f68:	f383 8811 	msr	BASEPRI, r3
1a002f6c:	f3bf 8f6f 	isb	sy
1a002f70:	f3bf 8f4f 	dsb	sy
1a002f74:	e7fe      	b.n	1a002f74 <xQueueGenericSendFromISR+0x1e>
1a002f76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f7a:	f383 8811 	msr	BASEPRI, r3
1a002f7e:	f3bf 8f6f 	isb	sy
1a002f82:	f3bf 8f4f 	dsb	sy
1a002f86:	e7fe      	b.n	1a002f86 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a002f88:	2b02      	cmp	r3, #2
1a002f8a:	d10b      	bne.n	1a002fa4 <xQueueGenericSendFromISR+0x4e>
1a002f8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002f8e:	2801      	cmp	r0, #1
1a002f90:	d008      	beq.n	1a002fa4 <xQueueGenericSendFromISR+0x4e>
1a002f92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002f96:	f383 8811 	msr	BASEPRI, r3
1a002f9a:	f3bf 8f6f 	isb	sy
1a002f9e:	f3bf 8f4f 	dsb	sy
1a002fa2:	e7fe      	b.n	1a002fa2 <xQueueGenericSendFromISR+0x4c>
1a002fa4:	461f      	mov	r7, r3
1a002fa6:	4690      	mov	r8, r2
1a002fa8:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a002faa:	f001 fcc5 	bl	1a004938 <vPortValidateInterruptPriority>
	__asm volatile
1a002fae:	f3ef 8611 	mrs	r6, BASEPRI
1a002fb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002fb6:	f383 8811 	msr	BASEPRI, r3
1a002fba:	f3bf 8f6f 	isb	sy
1a002fbe:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a002fc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a002fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002fc6:	429a      	cmp	r2, r3
1a002fc8:	d303      	bcc.n	1a002fd2 <xQueueGenericSendFromISR+0x7c>
1a002fca:	2f02      	cmp	r7, #2
1a002fcc:	d001      	beq.n	1a002fd2 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a002fce:	2000      	movs	r0, #0
1a002fd0:	e00f      	b.n	1a002ff2 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a002fd2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a002fd6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a002fd8:	463a      	mov	r2, r7
1a002fda:	4649      	mov	r1, r9
1a002fdc:	4620      	mov	r0, r4
1a002fde:	f7ff fd9f 	bl	1a002b20 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a002fe2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a002fe6:	d008      	beq.n	1a002ffa <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a002fe8:	1c6b      	adds	r3, r5, #1
1a002fea:	b25b      	sxtb	r3, r3
1a002fec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a002ff0:	2001      	movs	r0, #1
	__asm volatile
1a002ff2:	f386 8811 	msr	BASEPRI, r6
}
1a002ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a002ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002ffc:	b15b      	cbz	r3, 1a003016 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a002ffe:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003002:	f000 fed5 	bl	1a003db0 <xTaskRemoveFromEventList>
1a003006:	b140      	cbz	r0, 1a00301a <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a003008:	f1b8 0f00 	cmp.w	r8, #0
1a00300c:	d007      	beq.n	1a00301e <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00300e:	2001      	movs	r0, #1
1a003010:	f8c8 0000 	str.w	r0, [r8]
1a003014:	e7ed      	b.n	1a002ff2 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a003016:	2001      	movs	r0, #1
1a003018:	e7eb      	b.n	1a002ff2 <xQueueGenericSendFromISR+0x9c>
1a00301a:	2001      	movs	r0, #1
1a00301c:	e7e9      	b.n	1a002ff2 <xQueueGenericSendFromISR+0x9c>
1a00301e:	2001      	movs	r0, #1
1a003020:	e7e7      	b.n	1a002ff2 <xQueueGenericSendFromISR+0x9c>
1a003022:	Address 0x000000001a003022 is out of bounds.


1a003024 <xQueueReceive>:
{
1a003024:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003026:	b085      	sub	sp, #20
1a003028:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a00302a:	b160      	cbz	r0, 1a003046 <xQueueReceive+0x22>
1a00302c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00302e:	b999      	cbnz	r1, 1a003058 <xQueueReceive+0x34>
1a003030:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a003032:	b18b      	cbz	r3, 1a003058 <xQueueReceive+0x34>
	__asm volatile
1a003034:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003038:	f383 8811 	msr	BASEPRI, r3
1a00303c:	f3bf 8f6f 	isb	sy
1a003040:	f3bf 8f4f 	dsb	sy
1a003044:	e7fe      	b.n	1a003044 <xQueueReceive+0x20>
1a003046:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00304a:	f383 8811 	msr	BASEPRI, r3
1a00304e:	f3bf 8f6f 	isb	sy
1a003052:	f3bf 8f4f 	dsb	sy
1a003056:	e7fe      	b.n	1a003056 <xQueueReceive+0x32>
1a003058:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00305a:	f000 ff41 	bl	1a003ee0 <xTaskGetSchedulerState>
1a00305e:	b950      	cbnz	r0, 1a003076 <xQueueReceive+0x52>
1a003060:	9b01      	ldr	r3, [sp, #4]
1a003062:	b153      	cbz	r3, 1a00307a <xQueueReceive+0x56>
1a003064:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003068:	f383 8811 	msr	BASEPRI, r3
1a00306c:	f3bf 8f6f 	isb	sy
1a003070:	f3bf 8f4f 	dsb	sy
1a003074:	e7fe      	b.n	1a003074 <xQueueReceive+0x50>
1a003076:	2600      	movs	r6, #0
1a003078:	e03e      	b.n	1a0030f8 <xQueueReceive+0xd4>
1a00307a:	2600      	movs	r6, #0
1a00307c:	e03c      	b.n	1a0030f8 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00307e:	4639      	mov	r1, r7
1a003080:	4620      	mov	r0, r4
1a003082:	f7ff fd88 	bl	1a002b96 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a003086:	3d01      	subs	r5, #1
1a003088:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00308a:	6923      	ldr	r3, [r4, #16]
1a00308c:	b923      	cbnz	r3, 1a003098 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00308e:	f001 fb4b 	bl	1a004728 <vPortExitCritical>
				return pdPASS;
1a003092:	2001      	movs	r0, #1
}
1a003094:	b005      	add	sp, #20
1a003096:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003098:	f104 0010 	add.w	r0, r4, #16
1a00309c:	f000 fe88 	bl	1a003db0 <xTaskRemoveFromEventList>
1a0030a0:	2800      	cmp	r0, #0
1a0030a2:	d0f4      	beq.n	1a00308e <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a0030a4:	4b34      	ldr	r3, [pc, #208]	; (1a003178 <xQueueReceive+0x154>)
1a0030a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0030aa:	601a      	str	r2, [r3, #0]
1a0030ac:	f3bf 8f4f 	dsb	sy
1a0030b0:	f3bf 8f6f 	isb	sy
1a0030b4:	e7eb      	b.n	1a00308e <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a0030b6:	f001 fb37 	bl	1a004728 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0030ba:	2000      	movs	r0, #0
1a0030bc:	e7ea      	b.n	1a003094 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0030be:	a802      	add	r0, sp, #8
1a0030c0:	f000 febc 	bl	1a003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0030c4:	2601      	movs	r6, #1
1a0030c6:	e021      	b.n	1a00310c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a0030c8:	2300      	movs	r3, #0
1a0030ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0030ce:	e029      	b.n	1a003124 <xQueueReceive+0x100>
1a0030d0:	2300      	movs	r3, #0
1a0030d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0030d6:	e02b      	b.n	1a003130 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0030d8:	4620      	mov	r0, r4
1a0030da:	f7ff fd6e 	bl	1a002bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0030de:	f000 fd2f 	bl	1a003b40 <xTaskResumeAll>
1a0030e2:	e009      	b.n	1a0030f8 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0030e4:	4620      	mov	r0, r4
1a0030e6:	f7ff fd68 	bl	1a002bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0030ea:	f000 fd29 	bl	1a003b40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0030ee:	4620      	mov	r0, r4
1a0030f0:	f7ff fd09 	bl	1a002b06 <prvIsQueueEmpty>
1a0030f4:	2800      	cmp	r0, #0
1a0030f6:	d13d      	bne.n	1a003174 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0030f8:	f001 faf4 	bl	1a0046e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0030fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0030fe:	2d00      	cmp	r5, #0
1a003100:	d1bd      	bne.n	1a00307e <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a003102:	9b01      	ldr	r3, [sp, #4]
1a003104:	2b00      	cmp	r3, #0
1a003106:	d0d6      	beq.n	1a0030b6 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a003108:	2e00      	cmp	r6, #0
1a00310a:	d0d8      	beq.n	1a0030be <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a00310c:	f001 fb0c 	bl	1a004728 <vPortExitCritical>
		vTaskSuspendAll();
1a003110:	f000 fc7c 	bl	1a003a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003114:	f001 fae6 	bl	1a0046e4 <vPortEnterCritical>
1a003118:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00311c:	b25b      	sxtb	r3, r3
1a00311e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003122:	d0d1      	beq.n	1a0030c8 <xQueueReceive+0xa4>
1a003124:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003128:	b25b      	sxtb	r3, r3
1a00312a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00312e:	d0cf      	beq.n	1a0030d0 <xQueueReceive+0xac>
1a003130:	f001 fafa 	bl	1a004728 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a003134:	a901      	add	r1, sp, #4
1a003136:	a802      	add	r0, sp, #8
1a003138:	f000 fe8c 	bl	1a003e54 <xTaskCheckForTimeOut>
1a00313c:	2800      	cmp	r0, #0
1a00313e:	d1d1      	bne.n	1a0030e4 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a003140:	4620      	mov	r0, r4
1a003142:	f7ff fce0 	bl	1a002b06 <prvIsQueueEmpty>
1a003146:	2800      	cmp	r0, #0
1a003148:	d0c6      	beq.n	1a0030d8 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00314a:	9901      	ldr	r1, [sp, #4]
1a00314c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003150:	f000 fdfa 	bl	1a003d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a003154:	4620      	mov	r0, r4
1a003156:	f7ff fd30 	bl	1a002bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00315a:	f000 fcf1 	bl	1a003b40 <xTaskResumeAll>
1a00315e:	2800      	cmp	r0, #0
1a003160:	d1ca      	bne.n	1a0030f8 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a003162:	4b05      	ldr	r3, [pc, #20]	; (1a003178 <xQueueReceive+0x154>)
1a003164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003168:	601a      	str	r2, [r3, #0]
1a00316a:	f3bf 8f4f 	dsb	sy
1a00316e:	f3bf 8f6f 	isb	sy
1a003172:	e7c1      	b.n	1a0030f8 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a003174:	2000      	movs	r0, #0
1a003176:	e78d      	b.n	1a003094 <xQueueReceive+0x70>
1a003178:	e000ed04 	.word	0xe000ed04

1a00317c <xQueueSemaphoreTake>:
{
1a00317c:	b570      	push	{r4, r5, r6, lr}
1a00317e:	b084      	sub	sp, #16
1a003180:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a003182:	b940      	cbnz	r0, 1a003196 <xQueueSemaphoreTake+0x1a>
1a003184:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003188:	f383 8811 	msr	BASEPRI, r3
1a00318c:	f3bf 8f6f 	isb	sy
1a003190:	f3bf 8f4f 	dsb	sy
1a003194:	e7fe      	b.n	1a003194 <xQueueSemaphoreTake+0x18>
1a003196:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a003198:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00319a:	b143      	cbz	r3, 1a0031ae <xQueueSemaphoreTake+0x32>
1a00319c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031a0:	f383 8811 	msr	BASEPRI, r3
1a0031a4:	f3bf 8f6f 	isb	sy
1a0031a8:	f3bf 8f4f 	dsb	sy
1a0031ac:	e7fe      	b.n	1a0031ac <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0031ae:	f000 fe97 	bl	1a003ee0 <xTaskGetSchedulerState>
1a0031b2:	b950      	cbnz	r0, 1a0031ca <xQueueSemaphoreTake+0x4e>
1a0031b4:	9b01      	ldr	r3, [sp, #4]
1a0031b6:	b15b      	cbz	r3, 1a0031d0 <xQueueSemaphoreTake+0x54>
1a0031b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0031bc:	f383 8811 	msr	BASEPRI, r3
1a0031c0:	f3bf 8f6f 	isb	sy
1a0031c4:	f3bf 8f4f 	dsb	sy
1a0031c8:	e7fe      	b.n	1a0031c8 <xQueueSemaphoreTake+0x4c>
1a0031ca:	2500      	movs	r5, #0
1a0031cc:	462e      	mov	r6, r5
1a0031ce:	e051      	b.n	1a003274 <xQueueSemaphoreTake+0xf8>
1a0031d0:	2500      	movs	r5, #0
1a0031d2:	462e      	mov	r6, r5
1a0031d4:	e04e      	b.n	1a003274 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a0031d6:	3b01      	subs	r3, #1
1a0031d8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0031da:	6823      	ldr	r3, [r4, #0]
1a0031dc:	b913      	cbnz	r3, 1a0031e4 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a0031de:	f000 ffa3 	bl	1a004128 <pvTaskIncrementMutexHeldCount>
1a0031e2:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0031e4:	6923      	ldr	r3, [r4, #16]
1a0031e6:	b163      	cbz	r3, 1a003202 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0031e8:	f104 0010 	add.w	r0, r4, #16
1a0031ec:	f000 fde0 	bl	1a003db0 <xTaskRemoveFromEventList>
1a0031f0:	b138      	cbz	r0, 1a003202 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a0031f2:	4b48      	ldr	r3, [pc, #288]	; (1a003314 <xQueueSemaphoreTake+0x198>)
1a0031f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0031f8:	601a      	str	r2, [r3, #0]
1a0031fa:	f3bf 8f4f 	dsb	sy
1a0031fe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a003202:	f001 fa91 	bl	1a004728 <vPortExitCritical>
				return pdPASS;
1a003206:	2501      	movs	r5, #1
}
1a003208:	4628      	mov	r0, r5
1a00320a:	b004      	add	sp, #16
1a00320c:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a00320e:	b145      	cbz	r5, 1a003222 <xQueueSemaphoreTake+0xa6>
1a003210:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003214:	f383 8811 	msr	BASEPRI, r3
1a003218:	f3bf 8f6f 	isb	sy
1a00321c:	f3bf 8f4f 	dsb	sy
1a003220:	e7fe      	b.n	1a003220 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a003222:	f001 fa81 	bl	1a004728 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a003226:	e7ef      	b.n	1a003208 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a003228:	a802      	add	r0, sp, #8
1a00322a:	f000 fe07 	bl	1a003e3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00322e:	2601      	movs	r6, #1
1a003230:	e02a      	b.n	1a003288 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a003232:	2300      	movs	r3, #0
1a003234:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a003238:	e032      	b.n	1a0032a0 <xQueueSemaphoreTake+0x124>
1a00323a:	2300      	movs	r3, #0
1a00323c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003240:	e034      	b.n	1a0032ac <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a003242:	f001 fa4f 	bl	1a0046e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a003246:	6860      	ldr	r0, [r4, #4]
1a003248:	f000 fe5a 	bl	1a003f00 <xTaskPriorityInherit>
1a00324c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a00324e:	f001 fa6b 	bl	1a004728 <vPortExitCritical>
1a003252:	e03b      	b.n	1a0032cc <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a003254:	4620      	mov	r0, r4
1a003256:	f7ff fcb0 	bl	1a002bba <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00325a:	f000 fc71 	bl	1a003b40 <xTaskResumeAll>
1a00325e:	e009      	b.n	1a003274 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a003260:	4620      	mov	r0, r4
1a003262:	f7ff fcaa 	bl	1a002bba <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a003266:	f000 fc6b 	bl	1a003b40 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00326a:	4620      	mov	r0, r4
1a00326c:	f7ff fc4b 	bl	1a002b06 <prvIsQueueEmpty>
1a003270:	2800      	cmp	r0, #0
1a003272:	d140      	bne.n	1a0032f6 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a003274:	f001 fa36 	bl	1a0046e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a003278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a00327a:	2b00      	cmp	r3, #0
1a00327c:	d1ab      	bne.n	1a0031d6 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00327e:	9b01      	ldr	r3, [sp, #4]
1a003280:	2b00      	cmp	r3, #0
1a003282:	d0c4      	beq.n	1a00320e <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a003284:	2e00      	cmp	r6, #0
1a003286:	d0cf      	beq.n	1a003228 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a003288:	f001 fa4e 	bl	1a004728 <vPortExitCritical>
		vTaskSuspendAll();
1a00328c:	f000 fbbe 	bl	1a003a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003290:	f001 fa28 	bl	1a0046e4 <vPortEnterCritical>
1a003294:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003298:	b25b      	sxtb	r3, r3
1a00329a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00329e:	d0c8      	beq.n	1a003232 <xQueueSemaphoreTake+0xb6>
1a0032a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0032a4:	b25b      	sxtb	r3, r3
1a0032a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0032aa:	d0c6      	beq.n	1a00323a <xQueueSemaphoreTake+0xbe>
1a0032ac:	f001 fa3c 	bl	1a004728 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0032b0:	a901      	add	r1, sp, #4
1a0032b2:	a802      	add	r0, sp, #8
1a0032b4:	f000 fdce 	bl	1a003e54 <xTaskCheckForTimeOut>
1a0032b8:	2800      	cmp	r0, #0
1a0032ba:	d1d1      	bne.n	1a003260 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0032bc:	4620      	mov	r0, r4
1a0032be:	f7ff fc22 	bl	1a002b06 <prvIsQueueEmpty>
1a0032c2:	2800      	cmp	r0, #0
1a0032c4:	d0c6      	beq.n	1a003254 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0032c6:	6823      	ldr	r3, [r4, #0]
1a0032c8:	2b00      	cmp	r3, #0
1a0032ca:	d0ba      	beq.n	1a003242 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0032cc:	9901      	ldr	r1, [sp, #4]
1a0032ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0032d2:	f000 fd39 	bl	1a003d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0032d6:	4620      	mov	r0, r4
1a0032d8:	f7ff fc6f 	bl	1a002bba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0032dc:	f000 fc30 	bl	1a003b40 <xTaskResumeAll>
1a0032e0:	2800      	cmp	r0, #0
1a0032e2:	d1c7      	bne.n	1a003274 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a0032e4:	4b0b      	ldr	r3, [pc, #44]	; (1a003314 <xQueueSemaphoreTake+0x198>)
1a0032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0032ea:	601a      	str	r2, [r3, #0]
1a0032ec:	f3bf 8f4f 	dsb	sy
1a0032f0:	f3bf 8f6f 	isb	sy
1a0032f4:	e7be      	b.n	1a003274 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a0032f6:	2d00      	cmp	r5, #0
1a0032f8:	d086      	beq.n	1a003208 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a0032fa:	f001 f9f3 	bl	1a0046e4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a0032fe:	4620      	mov	r0, r4
1a003300:	f7ff fbe9 	bl	1a002ad6 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a003304:	4601      	mov	r1, r0
1a003306:	6860      	ldr	r0, [r4, #4]
1a003308:	f000 feae 	bl	1a004068 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a00330c:	f001 fa0c 	bl	1a004728 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a003310:	2500      	movs	r5, #0
1a003312:	e779      	b.n	1a003208 <xQueueSemaphoreTake+0x8c>
1a003314:	e000ed04 	.word	0xe000ed04

1a003318 <xQueueReceiveFromISR>:
{
1a003318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00331c:	b160      	cbz	r0, 1a003338 <xQueueReceiveFromISR+0x20>
1a00331e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a003320:	b999      	cbnz	r1, 1a00334a <xQueueReceiveFromISR+0x32>
1a003322:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a003324:	b18b      	cbz	r3, 1a00334a <xQueueReceiveFromISR+0x32>
1a003326:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00332a:	f383 8811 	msr	BASEPRI, r3
1a00332e:	f3bf 8f6f 	isb	sy
1a003332:	f3bf 8f4f 	dsb	sy
1a003336:	e7fe      	b.n	1a003336 <xQueueReceiveFromISR+0x1e>
1a003338:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00333c:	f383 8811 	msr	BASEPRI, r3
1a003340:	f3bf 8f6f 	isb	sy
1a003344:	f3bf 8f4f 	dsb	sy
1a003348:	e7fe      	b.n	1a003348 <xQueueReceiveFromISR+0x30>
1a00334a:	4617      	mov	r7, r2
1a00334c:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00334e:	f001 faf3 	bl	1a004938 <vPortValidateInterruptPriority>
	__asm volatile
1a003352:	f3ef 8611 	mrs	r6, BASEPRI
1a003356:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00335a:	f383 8811 	msr	BASEPRI, r3
1a00335e:	f3bf 8f6f 	isb	sy
1a003362:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a003366:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00336a:	f1b8 0f00 	cmp.w	r8, #0
1a00336e:	d01d      	beq.n	1a0033ac <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
1a003370:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a003374:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a003376:	4649      	mov	r1, r9
1a003378:	4620      	mov	r0, r4
1a00337a:	f7ff fc0c 	bl	1a002b96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00337e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a003382:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a003384:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a003388:	d005      	beq.n	1a003396 <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a00338a:	1c6b      	adds	r3, r5, #1
1a00338c:	b25b      	sxtb	r3, r3
1a00338e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a003392:	2001      	movs	r0, #1
1a003394:	e00b      	b.n	1a0033ae <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003396:	6923      	ldr	r3, [r4, #16]
1a003398:	b16b      	cbz	r3, 1a0033b6 <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00339a:	f104 0010 	add.w	r0, r4, #16
1a00339e:	f000 fd07 	bl	1a003db0 <xTaskRemoveFromEventList>
1a0033a2:	b150      	cbz	r0, 1a0033ba <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
1a0033a4:	b15f      	cbz	r7, 1a0033be <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a0033a6:	2001      	movs	r0, #1
1a0033a8:	6038      	str	r0, [r7, #0]
1a0033aa:	e000      	b.n	1a0033ae <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
1a0033ac:	2000      	movs	r0, #0
	__asm volatile
1a0033ae:	f386 8811 	msr	BASEPRI, r6
}
1a0033b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
1a0033b6:	2001      	movs	r0, #1
1a0033b8:	e7f9      	b.n	1a0033ae <xQueueReceiveFromISR+0x96>
1a0033ba:	2001      	movs	r0, #1
1a0033bc:	e7f7      	b.n	1a0033ae <xQueueReceiveFromISR+0x96>
1a0033be:	2001      	movs	r0, #1
1a0033c0:	e7f5      	b.n	1a0033ae <xQueueReceiveFromISR+0x96>

1a0033c2 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a0033c2:	b940      	cbnz	r0, 1a0033d6 <uxQueueMessagesWaiting+0x14>
	__asm volatile
1a0033c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0033c8:	f383 8811 	msr	BASEPRI, r3
1a0033cc:	f3bf 8f6f 	isb	sy
1a0033d0:	f3bf 8f4f 	dsb	sy
1a0033d4:	e7fe      	b.n	1a0033d4 <uxQueueMessagesWaiting+0x12>
{
1a0033d6:	b510      	push	{r4, lr}
1a0033d8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0033da:	f001 f983 	bl	1a0046e4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a0033de:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a0033e0:	f001 f9a2 	bl	1a004728 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a0033e4:	4620      	mov	r0, r4
1a0033e6:	bd10      	pop	{r4, pc}

1a0033e8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0033e8:	2300      	movs	r3, #0
1a0033ea:	2b07      	cmp	r3, #7
1a0033ec:	d80c      	bhi.n	1a003408 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0033ee:	4a07      	ldr	r2, [pc, #28]	; (1a00340c <vQueueAddToRegistry+0x24>)
1a0033f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0033f4:	b10a      	cbz	r2, 1a0033fa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0033f6:	3301      	adds	r3, #1
1a0033f8:	e7f7      	b.n	1a0033ea <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0033fa:	4a04      	ldr	r2, [pc, #16]	; (1a00340c <vQueueAddToRegistry+0x24>)
1a0033fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a003400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a003404:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a003406:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a003408:	4770      	bx	lr
1a00340a:	bf00      	nop
1a00340c:	10006580 	.word	0x10006580

1a003410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a003410:	b570      	push	{r4, r5, r6, lr}
1a003412:	4604      	mov	r4, r0
1a003414:	460d      	mov	r5, r1
1a003416:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a003418:	f001 f964 	bl	1a0046e4 <vPortEnterCritical>
1a00341c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003420:	b25b      	sxtb	r3, r3
1a003422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003426:	d00d      	beq.n	1a003444 <vQueueWaitForMessageRestricted+0x34>
1a003428:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00342c:	b25b      	sxtb	r3, r3
1a00342e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003432:	d00b      	beq.n	1a00344c <vQueueWaitForMessageRestricted+0x3c>
1a003434:	f001 f978 	bl	1a004728 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a003438:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00343a:	b15b      	cbz	r3, 1a003454 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a00343c:	4620      	mov	r0, r4
1a00343e:	f7ff fbbc 	bl	1a002bba <prvUnlockQueue>
	}
1a003442:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a003444:	2300      	movs	r3, #0
1a003446:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00344a:	e7ed      	b.n	1a003428 <vQueueWaitForMessageRestricted+0x18>
1a00344c:	2300      	movs	r3, #0
1a00344e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003452:	e7ef      	b.n	1a003434 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a003454:	4632      	mov	r2, r6
1a003456:	4629      	mov	r1, r5
1a003458:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00345c:	f000 fc8c 	bl	1a003d78 <vTaskPlaceOnEventListRestricted>
1a003460:	e7ec      	b.n	1a00343c <vQueueWaitForMessageRestricted+0x2c>

1a003462 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003462:	f100 0308 	add.w	r3, r0, #8
1a003466:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a003468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00346c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00346e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a003470:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a003472:	2300      	movs	r3, #0
1a003474:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a003476:	4770      	bx	lr

1a003478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a003478:	2300      	movs	r3, #0
1a00347a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a00347c:	4770      	bx	lr

1a00347e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a00347e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a003480:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a003482:	689a      	ldr	r2, [r3, #8]
1a003484:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a003486:	689a      	ldr	r2, [r3, #8]
1a003488:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00348a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00348c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00348e:	6803      	ldr	r3, [r0, #0]
1a003490:	3301      	adds	r3, #1
1a003492:	6003      	str	r3, [r0, #0]
}
1a003494:	4770      	bx	lr

1a003496 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a003496:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a003498:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00349a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a00349e:	d002      	beq.n	1a0034a6 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0034a0:	f100 0208 	add.w	r2, r0, #8
1a0034a4:	e002      	b.n	1a0034ac <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0034a6:	6902      	ldr	r2, [r0, #16]
1a0034a8:	e004      	b.n	1a0034b4 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0034aa:	461a      	mov	r2, r3
1a0034ac:	6853      	ldr	r3, [r2, #4]
1a0034ae:	681c      	ldr	r4, [r3, #0]
1a0034b0:	42ac      	cmp	r4, r5
1a0034b2:	d9fa      	bls.n	1a0034aa <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0034b4:	6853      	ldr	r3, [r2, #4]
1a0034b6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0034b8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0034ba:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0034bc:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0034be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0034c0:	6803      	ldr	r3, [r0, #0]
1a0034c2:	3301      	adds	r3, #1
1a0034c4:	6003      	str	r3, [r0, #0]
}
1a0034c6:	bc30      	pop	{r4, r5}
1a0034c8:	4770      	bx	lr

1a0034ca <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0034ca:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0034cc:	6842      	ldr	r2, [r0, #4]
1a0034ce:	6881      	ldr	r1, [r0, #8]
1a0034d0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0034d2:	6882      	ldr	r2, [r0, #8]
1a0034d4:	6841      	ldr	r1, [r0, #4]
1a0034d6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0034d8:	685a      	ldr	r2, [r3, #4]
1a0034da:	4282      	cmp	r2, r0
1a0034dc:	d006      	beq.n	1a0034ec <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0034de:	2200      	movs	r2, #0
1a0034e0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0034e2:	681a      	ldr	r2, [r3, #0]
1a0034e4:	3a01      	subs	r2, #1
1a0034e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0034e8:	6818      	ldr	r0, [r3, #0]
}
1a0034ea:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0034ec:	6882      	ldr	r2, [r0, #8]
1a0034ee:	605a      	str	r2, [r3, #4]
1a0034f0:	e7f5      	b.n	1a0034de <uxListRemove+0x14>
1a0034f2:	Address 0x000000001a0034f2 is out of bounds.


1a0034f4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0034f4:	4b03      	ldr	r3, [pc, #12]	; (1a003504 <vApplicationGetIdleTaskMemory+0x10>)
1a0034f6:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0034f8:	4b03      	ldr	r3, [pc, #12]	; (1a003508 <vApplicationGetIdleTaskMemory+0x14>)
1a0034fa:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0034fc:	235a      	movs	r3, #90	; 0x5a
1a0034fe:	6013      	str	r3, [r2, #0]
}
1a003500:	4770      	bx	lr
1a003502:	bf00      	nop
1a003504:	10005e98 	.word	0x10005e98
1a003508:	10005790 	.word	0x10005790

1a00350c <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a00350c:	4b03      	ldr	r3, [pc, #12]	; (1a00351c <vApplicationGetTimerTaskMemory+0x10>)
1a00350e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a003510:	4b03      	ldr	r3, [pc, #12]	; (1a003520 <vApplicationGetTimerTaskMemory+0x14>)
1a003512:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a003514:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a003518:	6013      	str	r3, [r2, #0]
1a00351a:	4770      	bx	lr
1a00351c:	10005ef8 	.word	0x10005ef8
1a003520:	100058f8 	.word	0x100058f8

1a003524 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a003524:	b510      	push	{r4, lr}
1a003526:	b082      	sub	sp, #8
1a003528:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a00352a:	9001      	str	r0, [sp, #4]
1a00352c:	2300      	movs	r3, #0
1a00352e:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a003530:	f001 f8d8 	bl	1a0046e4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a003534:	9901      	ldr	r1, [sp, #4]
1a003536:	4622      	mov	r2, r4
1a003538:	4804      	ldr	r0, [pc, #16]	; (1a00354c <vAssertCalled+0x28>)
1a00353a:	f003 fadf 	bl	1a006afc <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00353e:	9b00      	ldr	r3, [sp, #0]
1a003540:	2b00      	cmp	r3, #0
1a003542:	d0fc      	beq.n	1a00353e <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a003544:	f001 f8f0 	bl	1a004728 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a003548:	b002      	add	sp, #8
1a00354a:	bd10      	pop	{r4, pc}
1a00354c:	1a0079b0 	.word	0x1a0079b0

1a003550 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a003550:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a003552:	4804      	ldr	r0, [pc, #16]	; (1a003564 <vApplicationMallocFailedHook+0x14>)
1a003554:	f003 fb46 	bl	1a006be4 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a003558:	4903      	ldr	r1, [pc, #12]	; (1a003568 <vApplicationMallocFailedHook+0x18>)
1a00355a:	202c      	movs	r0, #44	; 0x2c
1a00355c:	f7ff ffe2 	bl	1a003524 <vAssertCalled>
}
1a003560:	bd08      	pop	{r3, pc}
1a003562:	bf00      	nop
1a003564:	1a00793c 	.word	0x1a00793c
1a003568:	1a007960 	.word	0x1a007960

1a00356c <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a00356c:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00356e:	4804      	ldr	r0, [pc, #16]	; (1a003580 <vApplicationStackOverflowHook+0x14>)
1a003570:	f003 fac4 	bl	1a006afc <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a003574:	4903      	ldr	r1, [pc, #12]	; (1a003584 <vApplicationStackOverflowHook+0x18>)
1a003576:	2050      	movs	r0, #80	; 0x50
1a003578:	f7ff ffd4 	bl	1a003524 <vAssertCalled>
}
1a00357c:	bd08      	pop	{r3, pc}
1a00357e:	bf00      	nop
1a003580:	1a007980 	.word	0x1a007980
1a003584:	1a007960 	.word	0x1a007960

1a003588 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003588:	4b08      	ldr	r3, [pc, #32]	; (1a0035ac <prvResetNextTaskUnblockTime+0x24>)
1a00358a:	681b      	ldr	r3, [r3, #0]
1a00358c:	681b      	ldr	r3, [r3, #0]
1a00358e:	b13b      	cbz	r3, 1a0035a0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003590:	4b06      	ldr	r3, [pc, #24]	; (1a0035ac <prvResetNextTaskUnblockTime+0x24>)
1a003592:	681b      	ldr	r3, [r3, #0]
1a003594:	68db      	ldr	r3, [r3, #12]
1a003596:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a003598:	685a      	ldr	r2, [r3, #4]
1a00359a:	4b05      	ldr	r3, [pc, #20]	; (1a0035b0 <prvResetNextTaskUnblockTime+0x28>)
1a00359c:	601a      	str	r2, [r3, #0]
	}
}
1a00359e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0035a0:	4b03      	ldr	r3, [pc, #12]	; (1a0035b0 <prvResetNextTaskUnblockTime+0x28>)
1a0035a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0035a6:	601a      	str	r2, [r3, #0]
1a0035a8:	4770      	bx	lr
1a0035aa:	bf00      	nop
1a0035ac:	10005f5c 	.word	0x10005f5c
1a0035b0:	10006030 	.word	0x10006030

1a0035b4 <prvInitialiseNewTask>:
{
1a0035b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0035b8:	4681      	mov	r9, r0
1a0035ba:	460d      	mov	r5, r1
1a0035bc:	4617      	mov	r7, r2
1a0035be:	469a      	mov	sl, r3
1a0035c0:	9e08      	ldr	r6, [sp, #32]
1a0035c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0035c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0035c8:	0092      	lsls	r2, r2, #2
1a0035ca:	21a5      	movs	r1, #165	; 0xa5
1a0035cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0035ce:	f003 f9e4 	bl	1a00699a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0035d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0035d4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0035d8:	3a01      	subs	r2, #1
1a0035da:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0035de:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0035e2:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0035e4:	2300      	movs	r3, #0
1a0035e6:	2b0f      	cmp	r3, #15
1a0035e8:	d807      	bhi.n	1a0035fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0035ea:	5ce9      	ldrb	r1, [r5, r3]
1a0035ec:	18e2      	adds	r2, r4, r3
1a0035ee:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0035f2:	5cea      	ldrb	r2, [r5, r3]
1a0035f4:	b10a      	cbz	r2, 1a0035fa <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0035f6:	3301      	adds	r3, #1
1a0035f8:	e7f5      	b.n	1a0035e6 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0035fa:	2300      	movs	r3, #0
1a0035fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a003600:	2e06      	cmp	r6, #6
1a003602:	d900      	bls.n	1a003606 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a003604:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a003606:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a003608:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00360a:	2500      	movs	r5, #0
1a00360c:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a00360e:	1d20      	adds	r0, r4, #4
1a003610:	f7ff ff32 	bl	1a003478 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a003614:	f104 0018 	add.w	r0, r4, #24
1a003618:	f7ff ff2e 	bl	1a003478 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a00361c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00361e:	f1c6 0607 	rsb	r6, r6, #7
1a003622:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a003624:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a003626:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a003628:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a00362c:	4652      	mov	r2, sl
1a00362e:	4649      	mov	r1, r9
1a003630:	4638      	mov	r0, r7
1a003632:	f001 f82d 	bl	1a004690 <pxPortInitialiseStack>
1a003636:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a003638:	f1b8 0f00 	cmp.w	r8, #0
1a00363c:	d001      	beq.n	1a003642 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00363e:	f8c8 4000 	str.w	r4, [r8]
}
1a003642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003646:	Address 0x000000001a003646 is out of bounds.


1a003648 <prvInitialiseTaskLists>:
{
1a003648:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00364a:	2400      	movs	r4, #0
1a00364c:	e007      	b.n	1a00365e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00364e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a003652:	0093      	lsls	r3, r2, #2
1a003654:	480e      	ldr	r0, [pc, #56]	; (1a003690 <prvInitialiseTaskLists+0x48>)
1a003656:	4418      	add	r0, r3
1a003658:	f7ff ff03 	bl	1a003462 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00365c:	3401      	adds	r4, #1
1a00365e:	2c06      	cmp	r4, #6
1a003660:	d9f5      	bls.n	1a00364e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a003662:	4d0c      	ldr	r5, [pc, #48]	; (1a003694 <prvInitialiseTaskLists+0x4c>)
1a003664:	4628      	mov	r0, r5
1a003666:	f7ff fefc 	bl	1a003462 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00366a:	4c0b      	ldr	r4, [pc, #44]	; (1a003698 <prvInitialiseTaskLists+0x50>)
1a00366c:	4620      	mov	r0, r4
1a00366e:	f7ff fef8 	bl	1a003462 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a003672:	480a      	ldr	r0, [pc, #40]	; (1a00369c <prvInitialiseTaskLists+0x54>)
1a003674:	f7ff fef5 	bl	1a003462 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a003678:	4809      	ldr	r0, [pc, #36]	; (1a0036a0 <prvInitialiseTaskLists+0x58>)
1a00367a:	f7ff fef2 	bl	1a003462 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00367e:	4809      	ldr	r0, [pc, #36]	; (1a0036a4 <prvInitialiseTaskLists+0x5c>)
1a003680:	f7ff feef 	bl	1a003462 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a003684:	4b08      	ldr	r3, [pc, #32]	; (1a0036a8 <prvInitialiseTaskLists+0x60>)
1a003686:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a003688:	4b08      	ldr	r3, [pc, #32]	; (1a0036ac <prvInitialiseTaskLists+0x64>)
1a00368a:	601c      	str	r4, [r3, #0]
}
1a00368c:	bd38      	pop	{r3, r4, r5, pc}
1a00368e:	bf00      	nop
1a003690:	10005f64 	.word	0x10005f64
1a003694:	10006008 	.word	0x10006008
1a003698:	1000601c 	.word	0x1000601c
1a00369c:	10006038 	.word	0x10006038
1a0036a0:	10006064 	.word	0x10006064
1a0036a4:	10006050 	.word	0x10006050
1a0036a8:	10005f5c 	.word	0x10005f5c
1a0036ac:	10005f60 	.word	0x10005f60

1a0036b0 <prvAddNewTaskToReadyList>:
{
1a0036b0:	b510      	push	{r4, lr}
1a0036b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0036b4:	f001 f816 	bl	1a0046e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0036b8:	4a21      	ldr	r2, [pc, #132]	; (1a003740 <prvAddNewTaskToReadyList+0x90>)
1a0036ba:	6813      	ldr	r3, [r2, #0]
1a0036bc:	3301      	adds	r3, #1
1a0036be:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0036c0:	4b20      	ldr	r3, [pc, #128]	; (1a003744 <prvAddNewTaskToReadyList+0x94>)
1a0036c2:	681b      	ldr	r3, [r3, #0]
1a0036c4:	b15b      	cbz	r3, 1a0036de <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0036c6:	4b20      	ldr	r3, [pc, #128]	; (1a003748 <prvAddNewTaskToReadyList+0x98>)
1a0036c8:	681b      	ldr	r3, [r3, #0]
1a0036ca:	b96b      	cbnz	r3, 1a0036e8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0036cc:	4b1d      	ldr	r3, [pc, #116]	; (1a003744 <prvAddNewTaskToReadyList+0x94>)
1a0036ce:	681b      	ldr	r3, [r3, #0]
1a0036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0036d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0036d4:	429a      	cmp	r2, r3
1a0036d6:	d807      	bhi.n	1a0036e8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0036d8:	4b1a      	ldr	r3, [pc, #104]	; (1a003744 <prvAddNewTaskToReadyList+0x94>)
1a0036da:	601c      	str	r4, [r3, #0]
1a0036dc:	e004      	b.n	1a0036e8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0036de:	4b19      	ldr	r3, [pc, #100]	; (1a003744 <prvAddNewTaskToReadyList+0x94>)
1a0036e0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0036e2:	6813      	ldr	r3, [r2, #0]
1a0036e4:	2b01      	cmp	r3, #1
1a0036e6:	d027      	beq.n	1a003738 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0036e8:	4a18      	ldr	r2, [pc, #96]	; (1a00374c <prvAddNewTaskToReadyList+0x9c>)
1a0036ea:	6813      	ldr	r3, [r2, #0]
1a0036ec:	3301      	adds	r3, #1
1a0036ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0036f0:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0036f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0036f4:	2201      	movs	r2, #1
1a0036f6:	409a      	lsls	r2, r3
1a0036f8:	4915      	ldr	r1, [pc, #84]	; (1a003750 <prvAddNewTaskToReadyList+0xa0>)
1a0036fa:	6808      	ldr	r0, [r1, #0]
1a0036fc:	4302      	orrs	r2, r0
1a0036fe:	600a      	str	r2, [r1, #0]
1a003700:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003704:	009a      	lsls	r2, r3, #2
1a003706:	1d21      	adds	r1, r4, #4
1a003708:	4812      	ldr	r0, [pc, #72]	; (1a003754 <prvAddNewTaskToReadyList+0xa4>)
1a00370a:	4410      	add	r0, r2
1a00370c:	f7ff feb7 	bl	1a00347e <vListInsertEnd>
	taskEXIT_CRITICAL();
1a003710:	f001 f80a 	bl	1a004728 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a003714:	4b0c      	ldr	r3, [pc, #48]	; (1a003748 <prvAddNewTaskToReadyList+0x98>)
1a003716:	681b      	ldr	r3, [r3, #0]
1a003718:	b16b      	cbz	r3, 1a003736 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00371a:	4b0a      	ldr	r3, [pc, #40]	; (1a003744 <prvAddNewTaskToReadyList+0x94>)
1a00371c:	681b      	ldr	r3, [r3, #0]
1a00371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003722:	429a      	cmp	r2, r3
1a003724:	d207      	bcs.n	1a003736 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a003726:	4b0c      	ldr	r3, [pc, #48]	; (1a003758 <prvAddNewTaskToReadyList+0xa8>)
1a003728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00372c:	601a      	str	r2, [r3, #0]
1a00372e:	f3bf 8f4f 	dsb	sy
1a003732:	f3bf 8f6f 	isb	sy
}
1a003736:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a003738:	f7ff ff86 	bl	1a003648 <prvInitialiseTaskLists>
1a00373c:	e7d4      	b.n	1a0036e8 <prvAddNewTaskToReadyList+0x38>
1a00373e:	bf00      	nop
1a003740:	10005ff0 	.word	0x10005ff0
1a003744:	10005f58 	.word	0x10005f58
1a003748:	1000604c 	.word	0x1000604c
1a00374c:	10006000 	.word	0x10006000
1a003750:	10006004 	.word	0x10006004
1a003754:	10005f64 	.word	0x10005f64
1a003758:	e000ed04 	.word	0xe000ed04

1a00375c <prvDeleteTCB>:
	{
1a00375c:	b510      	push	{r4, lr}
1a00375e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a003760:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a003764:	b933      	cbnz	r3, 1a003774 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a003766:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003768:	f7ff f9aa 	bl	1a002ac0 <vPortFree>
				vPortFree( pxTCB );
1a00376c:	4620      	mov	r0, r4
1a00376e:	f7ff f9a7 	bl	1a002ac0 <vPortFree>
	}
1a003772:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a003774:	2b01      	cmp	r3, #1
1a003776:	d00a      	beq.n	1a00378e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a003778:	2b02      	cmp	r3, #2
1a00377a:	d0fa      	beq.n	1a003772 <prvDeleteTCB+0x16>
1a00377c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003780:	f383 8811 	msr	BASEPRI, r3
1a003784:	f3bf 8f6f 	isb	sy
1a003788:	f3bf 8f4f 	dsb	sy
1a00378c:	e7fe      	b.n	1a00378c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a00378e:	f7ff f997 	bl	1a002ac0 <vPortFree>
1a003792:	e7ee      	b.n	1a003772 <prvDeleteTCB+0x16>

1a003794 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a003794:	4b0f      	ldr	r3, [pc, #60]	; (1a0037d4 <prvCheckTasksWaitingTermination+0x40>)
1a003796:	681b      	ldr	r3, [r3, #0]
1a003798:	b1d3      	cbz	r3, 1a0037d0 <prvCheckTasksWaitingTermination+0x3c>
{
1a00379a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a00379c:	f000 ffa2 	bl	1a0046e4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0037a0:	4b0d      	ldr	r3, [pc, #52]	; (1a0037d8 <prvCheckTasksWaitingTermination+0x44>)
1a0037a2:	68db      	ldr	r3, [r3, #12]
1a0037a4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0037a6:	1d20      	adds	r0, r4, #4
1a0037a8:	f7ff fe8f 	bl	1a0034ca <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0037ac:	4a0b      	ldr	r2, [pc, #44]	; (1a0037dc <prvCheckTasksWaitingTermination+0x48>)
1a0037ae:	6813      	ldr	r3, [r2, #0]
1a0037b0:	3b01      	subs	r3, #1
1a0037b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0037b4:	4a07      	ldr	r2, [pc, #28]	; (1a0037d4 <prvCheckTasksWaitingTermination+0x40>)
1a0037b6:	6813      	ldr	r3, [r2, #0]
1a0037b8:	3b01      	subs	r3, #1
1a0037ba:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0037bc:	f000 ffb4 	bl	1a004728 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0037c0:	4620      	mov	r0, r4
1a0037c2:	f7ff ffcb 	bl	1a00375c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0037c6:	4b03      	ldr	r3, [pc, #12]	; (1a0037d4 <prvCheckTasksWaitingTermination+0x40>)
1a0037c8:	681b      	ldr	r3, [r3, #0]
1a0037ca:	2b00      	cmp	r3, #0
1a0037cc:	d1e6      	bne.n	1a00379c <prvCheckTasksWaitingTermination+0x8>
}
1a0037ce:	bd10      	pop	{r4, pc}
1a0037d0:	4770      	bx	lr
1a0037d2:	bf00      	nop
1a0037d4:	10005ff4 	.word	0x10005ff4
1a0037d8:	10006064 	.word	0x10006064
1a0037dc:	10005ff0 	.word	0x10005ff0

1a0037e0 <prvIdleTask>:
{
1a0037e0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0037e2:	f7ff ffd7 	bl	1a003794 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0037e6:	4b06      	ldr	r3, [pc, #24]	; (1a003800 <prvIdleTask+0x20>)
1a0037e8:	681b      	ldr	r3, [r3, #0]
1a0037ea:	2b01      	cmp	r3, #1
1a0037ec:	d9f9      	bls.n	1a0037e2 <prvIdleTask+0x2>
				taskYIELD();
1a0037ee:	4b05      	ldr	r3, [pc, #20]	; (1a003804 <prvIdleTask+0x24>)
1a0037f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0037f4:	601a      	str	r2, [r3, #0]
1a0037f6:	f3bf 8f4f 	dsb	sy
1a0037fa:	f3bf 8f6f 	isb	sy
1a0037fe:	e7f0      	b.n	1a0037e2 <prvIdleTask+0x2>
1a003800:	10005f64 	.word	0x10005f64
1a003804:	e000ed04 	.word	0xe000ed04

1a003808 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a003808:	b570      	push	{r4, r5, r6, lr}
1a00380a:	4604      	mov	r4, r0
1a00380c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00380e:	4b1d      	ldr	r3, [pc, #116]	; (1a003884 <prvAddCurrentTaskToDelayedList+0x7c>)
1a003810:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a003812:	4b1d      	ldr	r3, [pc, #116]	; (1a003888 <prvAddCurrentTaskToDelayedList+0x80>)
1a003814:	6818      	ldr	r0, [r3, #0]
1a003816:	3004      	adds	r0, #4
1a003818:	f7ff fe57 	bl	1a0034ca <uxListRemove>
1a00381c:	b950      	cbnz	r0, 1a003834 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00381e:	4b1a      	ldr	r3, [pc, #104]	; (1a003888 <prvAddCurrentTaskToDelayedList+0x80>)
1a003820:	681b      	ldr	r3, [r3, #0]
1a003822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003824:	2301      	movs	r3, #1
1a003826:	fa03 f202 	lsl.w	r2, r3, r2
1a00382a:	4918      	ldr	r1, [pc, #96]	; (1a00388c <prvAddCurrentTaskToDelayedList+0x84>)
1a00382c:	680b      	ldr	r3, [r1, #0]
1a00382e:	ea23 0302 	bic.w	r3, r3, r2
1a003832:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a003834:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a003838:	d013      	beq.n	1a003862 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00383a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00383c:	4b12      	ldr	r3, [pc, #72]	; (1a003888 <prvAddCurrentTaskToDelayedList+0x80>)
1a00383e:	681b      	ldr	r3, [r3, #0]
1a003840:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a003842:	42a5      	cmp	r5, r4
1a003844:	d816      	bhi.n	1a003874 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003846:	4b12      	ldr	r3, [pc, #72]	; (1a003890 <prvAddCurrentTaskToDelayedList+0x88>)
1a003848:	6818      	ldr	r0, [r3, #0]
1a00384a:	4b0f      	ldr	r3, [pc, #60]	; (1a003888 <prvAddCurrentTaskToDelayedList+0x80>)
1a00384c:	6819      	ldr	r1, [r3, #0]
1a00384e:	3104      	adds	r1, #4
1a003850:	f7ff fe21 	bl	1a003496 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a003854:	4b0f      	ldr	r3, [pc, #60]	; (1a003894 <prvAddCurrentTaskToDelayedList+0x8c>)
1a003856:	681b      	ldr	r3, [r3, #0]
1a003858:	42a3      	cmp	r3, r4
1a00385a:	d912      	bls.n	1a003882 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a00385c:	4b0d      	ldr	r3, [pc, #52]	; (1a003894 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00385e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a003860:	e00f      	b.n	1a003882 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a003862:	2e00      	cmp	r6, #0
1a003864:	d0e9      	beq.n	1a00383a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003866:	4b08      	ldr	r3, [pc, #32]	; (1a003888 <prvAddCurrentTaskToDelayedList+0x80>)
1a003868:	6819      	ldr	r1, [r3, #0]
1a00386a:	3104      	adds	r1, #4
1a00386c:	480a      	ldr	r0, [pc, #40]	; (1a003898 <prvAddCurrentTaskToDelayedList+0x90>)
1a00386e:	f7ff fe06 	bl	1a00347e <vListInsertEnd>
1a003872:	e006      	b.n	1a003882 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003874:	4b09      	ldr	r3, [pc, #36]	; (1a00389c <prvAddCurrentTaskToDelayedList+0x94>)
1a003876:	6818      	ldr	r0, [r3, #0]
1a003878:	4b03      	ldr	r3, [pc, #12]	; (1a003888 <prvAddCurrentTaskToDelayedList+0x80>)
1a00387a:	6819      	ldr	r1, [r3, #0]
1a00387c:	3104      	adds	r1, #4
1a00387e:	f7ff fe0a 	bl	1a003496 <vListInsert>
}
1a003882:	bd70      	pop	{r4, r5, r6, pc}
1a003884:	10006078 	.word	0x10006078
1a003888:	10005f58 	.word	0x10005f58
1a00388c:	10006004 	.word	0x10006004
1a003890:	10005f5c 	.word	0x10005f5c
1a003894:	10006030 	.word	0x10006030
1a003898:	10006050 	.word	0x10006050
1a00389c:	10005f60 	.word	0x10005f60

1a0038a0 <xTaskCreateStatic>:
	{
1a0038a0:	b570      	push	{r4, r5, r6, lr}
1a0038a2:	b086      	sub	sp, #24
1a0038a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a0038a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a0038a8:	b945      	cbnz	r5, 1a0038bc <xTaskCreateStatic+0x1c>
1a0038aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0038ae:	f383 8811 	msr	BASEPRI, r3
1a0038b2:	f3bf 8f6f 	isb	sy
1a0038b6:	f3bf 8f4f 	dsb	sy
1a0038ba:	e7fe      	b.n	1a0038ba <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a0038bc:	b944      	cbnz	r4, 1a0038d0 <xTaskCreateStatic+0x30>
1a0038be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0038c2:	f383 8811 	msr	BASEPRI, r3
1a0038c6:	f3bf 8f6f 	isb	sy
1a0038ca:	f3bf 8f4f 	dsb	sy
1a0038ce:	e7fe      	b.n	1a0038ce <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a0038d0:	2660      	movs	r6, #96	; 0x60
1a0038d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a0038d4:	9e04      	ldr	r6, [sp, #16]
1a0038d6:	2e60      	cmp	r6, #96	; 0x60
1a0038d8:	d008      	beq.n	1a0038ec <xTaskCreateStatic+0x4c>
1a0038da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0038de:	f383 8811 	msr	BASEPRI, r3
1a0038e2:	f3bf 8f6f 	isb	sy
1a0038e6:	f3bf 8f4f 	dsb	sy
1a0038ea:	e7fe      	b.n	1a0038ea <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0038ec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0038ee:	2502      	movs	r5, #2
1a0038f0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0038f4:	2500      	movs	r5, #0
1a0038f6:	9503      	str	r5, [sp, #12]
1a0038f8:	9402      	str	r4, [sp, #8]
1a0038fa:	ad05      	add	r5, sp, #20
1a0038fc:	9501      	str	r5, [sp, #4]
1a0038fe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a003900:	9500      	str	r5, [sp, #0]
1a003902:	f7ff fe57 	bl	1a0035b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a003906:	4620      	mov	r0, r4
1a003908:	f7ff fed2 	bl	1a0036b0 <prvAddNewTaskToReadyList>
	}
1a00390c:	9805      	ldr	r0, [sp, #20]
1a00390e:	b006      	add	sp, #24
1a003910:	bd70      	pop	{r4, r5, r6, pc}

1a003912 <xTaskCreate>:
	{
1a003912:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003916:	b085      	sub	sp, #20
1a003918:	4607      	mov	r7, r0
1a00391a:	4688      	mov	r8, r1
1a00391c:	4615      	mov	r5, r2
1a00391e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003920:	0090      	lsls	r0, r2, #2
1a003922:	f7ff f895 	bl	1a002a50 <pvPortMalloc>
			if( pxStack != NULL )
1a003926:	b308      	cbz	r0, 1a00396c <xTaskCreate+0x5a>
1a003928:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a00392a:	2060      	movs	r0, #96	; 0x60
1a00392c:	f7ff f890 	bl	1a002a50 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a003930:	4604      	mov	r4, r0
1a003932:	b1b8      	cbz	r0, 1a003964 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a003934:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a003936:	b1e4      	cbz	r4, 1a003972 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a003938:	2300      	movs	r3, #0
1a00393a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00393e:	9303      	str	r3, [sp, #12]
1a003940:	9402      	str	r4, [sp, #8]
1a003942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003944:	9301      	str	r3, [sp, #4]
1a003946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003948:	9300      	str	r3, [sp, #0]
1a00394a:	464b      	mov	r3, r9
1a00394c:	462a      	mov	r2, r5
1a00394e:	4641      	mov	r1, r8
1a003950:	4638      	mov	r0, r7
1a003952:	f7ff fe2f 	bl	1a0035b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a003956:	4620      	mov	r0, r4
1a003958:	f7ff feaa 	bl	1a0036b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a00395c:	2001      	movs	r0, #1
	}
1a00395e:	b005      	add	sp, #20
1a003960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a003964:	4630      	mov	r0, r6
1a003966:	f7ff f8ab 	bl	1a002ac0 <vPortFree>
1a00396a:	e7e4      	b.n	1a003936 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00396c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003970:	e7f5      	b.n	1a00395e <xTaskCreate+0x4c>
1a003972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a003976:	e7f2      	b.n	1a00395e <xTaskCreate+0x4c>

1a003978 <vTaskStartScheduler>:
{
1a003978:	b510      	push	{r4, lr}
1a00397a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a00397c:	2400      	movs	r4, #0
1a00397e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a003980:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a003982:	aa07      	add	r2, sp, #28
1a003984:	a906      	add	r1, sp, #24
1a003986:	a805      	add	r0, sp, #20
1a003988:	f7ff fdb4 	bl	1a0034f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00398c:	9b05      	ldr	r3, [sp, #20]
1a00398e:	9302      	str	r3, [sp, #8]
1a003990:	9b06      	ldr	r3, [sp, #24]
1a003992:	9301      	str	r3, [sp, #4]
1a003994:	9400      	str	r4, [sp, #0]
1a003996:	4623      	mov	r3, r4
1a003998:	9a07      	ldr	r2, [sp, #28]
1a00399a:	4917      	ldr	r1, [pc, #92]	; (1a0039f8 <vTaskStartScheduler+0x80>)
1a00399c:	4817      	ldr	r0, [pc, #92]	; (1a0039fc <vTaskStartScheduler+0x84>)
1a00399e:	f7ff ff7f 	bl	1a0038a0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a0039a2:	b140      	cbz	r0, 1a0039b6 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a0039a4:	f000 fc5a 	bl	1a00425c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a0039a8:	2801      	cmp	r0, #1
1a0039aa:	d006      	beq.n	1a0039ba <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0039ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0039b0:	d018      	beq.n	1a0039e4 <vTaskStartScheduler+0x6c>
}
1a0039b2:	b008      	add	sp, #32
1a0039b4:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a0039b6:	2000      	movs	r0, #0
1a0039b8:	e7f6      	b.n	1a0039a8 <vTaskStartScheduler+0x30>
1a0039ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039be:	f383 8811 	msr	BASEPRI, r3
1a0039c2:	f3bf 8f6f 	isb	sy
1a0039c6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a0039ca:	4b0d      	ldr	r3, [pc, #52]	; (1a003a00 <vTaskStartScheduler+0x88>)
1a0039cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0039d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0039d2:	4b0c      	ldr	r3, [pc, #48]	; (1a003a04 <vTaskStartScheduler+0x8c>)
1a0039d4:	2201      	movs	r2, #1
1a0039d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0039d8:	4b0b      	ldr	r3, [pc, #44]	; (1a003a08 <vTaskStartScheduler+0x90>)
1a0039da:	2200      	movs	r2, #0
1a0039dc:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0039de:	f000 ff23 	bl	1a004828 <xPortStartScheduler>
1a0039e2:	e7e6      	b.n	1a0039b2 <vTaskStartScheduler+0x3a>
1a0039e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0039e8:	f383 8811 	msr	BASEPRI, r3
1a0039ec:	f3bf 8f6f 	isb	sy
1a0039f0:	f3bf 8f4f 	dsb	sy
1a0039f4:	e7fe      	b.n	1a0039f4 <vTaskStartScheduler+0x7c>
1a0039f6:	bf00      	nop
1a0039f8:	1a0079f0 	.word	0x1a0079f0
1a0039fc:	1a0037e1 	.word	0x1a0037e1
1a003a00:	10006030 	.word	0x10006030
1a003a04:	1000604c 	.word	0x1000604c
1a003a08:	10006078 	.word	0x10006078

1a003a0c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a003a0c:	4a02      	ldr	r2, [pc, #8]	; (1a003a18 <vTaskSuspendAll+0xc>)
1a003a0e:	6813      	ldr	r3, [r2, #0]
1a003a10:	3301      	adds	r3, #1
1a003a12:	6013      	str	r3, [r2, #0]
}
1a003a14:	4770      	bx	lr
1a003a16:	bf00      	nop
1a003a18:	10005ffc 	.word	0x10005ffc

1a003a1c <xTaskGetTickCount>:
		xTicks = xTickCount;
1a003a1c:	4b01      	ldr	r3, [pc, #4]	; (1a003a24 <xTaskGetTickCount+0x8>)
1a003a1e:	6818      	ldr	r0, [r3, #0]
}
1a003a20:	4770      	bx	lr
1a003a22:	bf00      	nop
1a003a24:	10006078 	.word	0x10006078

1a003a28 <xTaskIncrementTick>:
{
1a003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003a2a:	4b3a      	ldr	r3, [pc, #232]	; (1a003b14 <xTaskIncrementTick+0xec>)
1a003a2c:	681b      	ldr	r3, [r3, #0]
1a003a2e:	2b00      	cmp	r3, #0
1a003a30:	d164      	bne.n	1a003afc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a003a32:	4b39      	ldr	r3, [pc, #228]	; (1a003b18 <xTaskIncrementTick+0xf0>)
1a003a34:	681d      	ldr	r5, [r3, #0]
1a003a36:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a003a38:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a003a3a:	b9c5      	cbnz	r5, 1a003a6e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a003a3c:	4b37      	ldr	r3, [pc, #220]	; (1a003b1c <xTaskIncrementTick+0xf4>)
1a003a3e:	681b      	ldr	r3, [r3, #0]
1a003a40:	681b      	ldr	r3, [r3, #0]
1a003a42:	b143      	cbz	r3, 1a003a56 <xTaskIncrementTick+0x2e>
1a003a44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003a48:	f383 8811 	msr	BASEPRI, r3
1a003a4c:	f3bf 8f6f 	isb	sy
1a003a50:	f3bf 8f4f 	dsb	sy
1a003a54:	e7fe      	b.n	1a003a54 <xTaskIncrementTick+0x2c>
1a003a56:	4a31      	ldr	r2, [pc, #196]	; (1a003b1c <xTaskIncrementTick+0xf4>)
1a003a58:	6811      	ldr	r1, [r2, #0]
1a003a5a:	4b31      	ldr	r3, [pc, #196]	; (1a003b20 <xTaskIncrementTick+0xf8>)
1a003a5c:	6818      	ldr	r0, [r3, #0]
1a003a5e:	6010      	str	r0, [r2, #0]
1a003a60:	6019      	str	r1, [r3, #0]
1a003a62:	4a30      	ldr	r2, [pc, #192]	; (1a003b24 <xTaskIncrementTick+0xfc>)
1a003a64:	6813      	ldr	r3, [r2, #0]
1a003a66:	3301      	adds	r3, #1
1a003a68:	6013      	str	r3, [r2, #0]
1a003a6a:	f7ff fd8d 	bl	1a003588 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a003a6e:	4b2e      	ldr	r3, [pc, #184]	; (1a003b28 <xTaskIncrementTick+0x100>)
1a003a70:	681b      	ldr	r3, [r3, #0]
1a003a72:	42ab      	cmp	r3, r5
1a003a74:	d938      	bls.n	1a003ae8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a003a76:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a003a78:	4b2c      	ldr	r3, [pc, #176]	; (1a003b2c <xTaskIncrementTick+0x104>)
1a003a7a:	681b      	ldr	r3, [r3, #0]
1a003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003a7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003a82:	009a      	lsls	r2, r3, #2
1a003a84:	4b2a      	ldr	r3, [pc, #168]	; (1a003b30 <xTaskIncrementTick+0x108>)
1a003a86:	589b      	ldr	r3, [r3, r2]
1a003a88:	2b01      	cmp	r3, #1
1a003a8a:	d93c      	bls.n	1a003b06 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a003a8c:	2401      	movs	r4, #1
1a003a8e:	e03a      	b.n	1a003b06 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a003a90:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003a92:	4b22      	ldr	r3, [pc, #136]	; (1a003b1c <xTaskIncrementTick+0xf4>)
1a003a94:	681b      	ldr	r3, [r3, #0]
1a003a96:	681b      	ldr	r3, [r3, #0]
1a003a98:	b343      	cbz	r3, 1a003aec <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003a9a:	4b20      	ldr	r3, [pc, #128]	; (1a003b1c <xTaskIncrementTick+0xf4>)
1a003a9c:	681b      	ldr	r3, [r3, #0]
1a003a9e:	68db      	ldr	r3, [r3, #12]
1a003aa0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a003aa2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a003aa4:	429d      	cmp	r5, r3
1a003aa6:	d326      	bcc.n	1a003af6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003aa8:	1d37      	adds	r7, r6, #4
1a003aaa:	4638      	mov	r0, r7
1a003aac:	f7ff fd0d 	bl	1a0034ca <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a003ab0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a003ab2:	b11b      	cbz	r3, 1a003abc <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a003ab4:	f106 0018 	add.w	r0, r6, #24
1a003ab8:	f7ff fd07 	bl	1a0034ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a003abc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a003abe:	2201      	movs	r2, #1
1a003ac0:	409a      	lsls	r2, r3
1a003ac2:	491c      	ldr	r1, [pc, #112]	; (1a003b34 <xTaskIncrementTick+0x10c>)
1a003ac4:	6808      	ldr	r0, [r1, #0]
1a003ac6:	4302      	orrs	r2, r0
1a003ac8:	600a      	str	r2, [r1, #0]
1a003aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003ace:	009a      	lsls	r2, r3, #2
1a003ad0:	4639      	mov	r1, r7
1a003ad2:	4817      	ldr	r0, [pc, #92]	; (1a003b30 <xTaskIncrementTick+0x108>)
1a003ad4:	4410      	add	r0, r2
1a003ad6:	f7ff fcd2 	bl	1a00347e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a003ada:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a003adc:	4b13      	ldr	r3, [pc, #76]	; (1a003b2c <xTaskIncrementTick+0x104>)
1a003ade:	681b      	ldr	r3, [r3, #0]
1a003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003ae2:	429a      	cmp	r2, r3
1a003ae4:	d2d4      	bcs.n	1a003a90 <xTaskIncrementTick+0x68>
1a003ae6:	e7d4      	b.n	1a003a92 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a003ae8:	2400      	movs	r4, #0
1a003aea:	e7d2      	b.n	1a003a92 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003aec:	4b0e      	ldr	r3, [pc, #56]	; (1a003b28 <xTaskIncrementTick+0x100>)
1a003aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003af2:	601a      	str	r2, [r3, #0]
					break;
1a003af4:	e7c0      	b.n	1a003a78 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a003af6:	4a0c      	ldr	r2, [pc, #48]	; (1a003b28 <xTaskIncrementTick+0x100>)
1a003af8:	6013      	str	r3, [r2, #0]
						break;
1a003afa:	e7bd      	b.n	1a003a78 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a003afc:	4a0e      	ldr	r2, [pc, #56]	; (1a003b38 <xTaskIncrementTick+0x110>)
1a003afe:	6813      	ldr	r3, [r2, #0]
1a003b00:	3301      	adds	r3, #1
1a003b02:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a003b04:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a003b06:	4b0d      	ldr	r3, [pc, #52]	; (1a003b3c <xTaskIncrementTick+0x114>)
1a003b08:	681b      	ldr	r3, [r3, #0]
1a003b0a:	b103      	cbz	r3, 1a003b0e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a003b0c:	2401      	movs	r4, #1
}
1a003b0e:	4620      	mov	r0, r4
1a003b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003b12:	bf00      	nop
1a003b14:	10005ffc 	.word	0x10005ffc
1a003b18:	10006078 	.word	0x10006078
1a003b1c:	10005f5c 	.word	0x10005f5c
1a003b20:	10005f60 	.word	0x10005f60
1a003b24:	10006034 	.word	0x10006034
1a003b28:	10006030 	.word	0x10006030
1a003b2c:	10005f58 	.word	0x10005f58
1a003b30:	10005f64 	.word	0x10005f64
1a003b34:	10006004 	.word	0x10006004
1a003b38:	10005ff8 	.word	0x10005ff8
1a003b3c:	1000607c 	.word	0x1000607c

1a003b40 <xTaskResumeAll>:
{
1a003b40:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a003b42:	4b33      	ldr	r3, [pc, #204]	; (1a003c10 <xTaskResumeAll+0xd0>)
1a003b44:	681b      	ldr	r3, [r3, #0]
1a003b46:	b943      	cbnz	r3, 1a003b5a <xTaskResumeAll+0x1a>
1a003b48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003b4c:	f383 8811 	msr	BASEPRI, r3
1a003b50:	f3bf 8f6f 	isb	sy
1a003b54:	f3bf 8f4f 	dsb	sy
1a003b58:	e7fe      	b.n	1a003b58 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a003b5a:	f000 fdc3 	bl	1a0046e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a003b5e:	4b2c      	ldr	r3, [pc, #176]	; (1a003c10 <xTaskResumeAll+0xd0>)
1a003b60:	681a      	ldr	r2, [r3, #0]
1a003b62:	3a01      	subs	r2, #1
1a003b64:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003b66:	681b      	ldr	r3, [r3, #0]
1a003b68:	2b00      	cmp	r3, #0
1a003b6a:	d14d      	bne.n	1a003c08 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a003b6c:	4b29      	ldr	r3, [pc, #164]	; (1a003c14 <xTaskResumeAll+0xd4>)
1a003b6e:	681b      	ldr	r3, [r3, #0]
1a003b70:	b923      	cbnz	r3, 1a003b7c <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a003b72:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a003b74:	f000 fdd8 	bl	1a004728 <vPortExitCritical>
}
1a003b78:	4620      	mov	r0, r4
1a003b7a:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a003b7c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a003b7e:	4b26      	ldr	r3, [pc, #152]	; (1a003c18 <xTaskResumeAll+0xd8>)
1a003b80:	681b      	ldr	r3, [r3, #0]
1a003b82:	b31b      	cbz	r3, 1a003bcc <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a003b84:	4b24      	ldr	r3, [pc, #144]	; (1a003c18 <xTaskResumeAll+0xd8>)
1a003b86:	68db      	ldr	r3, [r3, #12]
1a003b88:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a003b8a:	f104 0018 	add.w	r0, r4, #24
1a003b8e:	f7ff fc9c 	bl	1a0034ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003b92:	1d25      	adds	r5, r4, #4
1a003b94:	4628      	mov	r0, r5
1a003b96:	f7ff fc98 	bl	1a0034ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a003b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003b9c:	2201      	movs	r2, #1
1a003b9e:	409a      	lsls	r2, r3
1a003ba0:	491e      	ldr	r1, [pc, #120]	; (1a003c1c <xTaskResumeAll+0xdc>)
1a003ba2:	6808      	ldr	r0, [r1, #0]
1a003ba4:	4302      	orrs	r2, r0
1a003ba6:	600a      	str	r2, [r1, #0]
1a003ba8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003bac:	009a      	lsls	r2, r3, #2
1a003bae:	4629      	mov	r1, r5
1a003bb0:	481b      	ldr	r0, [pc, #108]	; (1a003c20 <xTaskResumeAll+0xe0>)
1a003bb2:	4410      	add	r0, r2
1a003bb4:	f7ff fc63 	bl	1a00347e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a003bb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a003bba:	4b1a      	ldr	r3, [pc, #104]	; (1a003c24 <xTaskResumeAll+0xe4>)
1a003bbc:	681b      	ldr	r3, [r3, #0]
1a003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003bc0:	429a      	cmp	r2, r3
1a003bc2:	d3dc      	bcc.n	1a003b7e <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a003bc4:	4b18      	ldr	r3, [pc, #96]	; (1a003c28 <xTaskResumeAll+0xe8>)
1a003bc6:	2201      	movs	r2, #1
1a003bc8:	601a      	str	r2, [r3, #0]
1a003bca:	e7d8      	b.n	1a003b7e <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a003bcc:	b10c      	cbz	r4, 1a003bd2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a003bce:	f7ff fcdb 	bl	1a003588 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a003bd2:	4b16      	ldr	r3, [pc, #88]	; (1a003c2c <xTaskResumeAll+0xec>)
1a003bd4:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a003bd6:	b154      	cbz	r4, 1a003bee <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a003bd8:	f7ff ff26 	bl	1a003a28 <xTaskIncrementTick>
1a003bdc:	b110      	cbz	r0, 1a003be4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a003bde:	4b12      	ldr	r3, [pc, #72]	; (1a003c28 <xTaskResumeAll+0xe8>)
1a003be0:	2201      	movs	r2, #1
1a003be2:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a003be4:	3c01      	subs	r4, #1
1a003be6:	d1f7      	bne.n	1a003bd8 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a003be8:	4b10      	ldr	r3, [pc, #64]	; (1a003c2c <xTaskResumeAll+0xec>)
1a003bea:	2200      	movs	r2, #0
1a003bec:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a003bee:	4b0e      	ldr	r3, [pc, #56]	; (1a003c28 <xTaskResumeAll+0xe8>)
1a003bf0:	681b      	ldr	r3, [r3, #0]
1a003bf2:	b15b      	cbz	r3, 1a003c0c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a003bf4:	4b0e      	ldr	r3, [pc, #56]	; (1a003c30 <xTaskResumeAll+0xf0>)
1a003bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003bfa:	601a      	str	r2, [r3, #0]
1a003bfc:	f3bf 8f4f 	dsb	sy
1a003c00:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a003c04:	2401      	movs	r4, #1
1a003c06:	e7b5      	b.n	1a003b74 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a003c08:	2400      	movs	r4, #0
1a003c0a:	e7b3      	b.n	1a003b74 <xTaskResumeAll+0x34>
1a003c0c:	2400      	movs	r4, #0
1a003c0e:	e7b1      	b.n	1a003b74 <xTaskResumeAll+0x34>
1a003c10:	10005ffc 	.word	0x10005ffc
1a003c14:	10005ff0 	.word	0x10005ff0
1a003c18:	10006038 	.word	0x10006038
1a003c1c:	10006004 	.word	0x10006004
1a003c20:	10005f64 	.word	0x10005f64
1a003c24:	10005f58 	.word	0x10005f58
1a003c28:	1000607c 	.word	0x1000607c
1a003c2c:	10005ff8 	.word	0x10005ff8
1a003c30:	e000ed04 	.word	0xe000ed04

1a003c34 <vTaskDelay>:
	{
1a003c34:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a003c36:	b1a8      	cbz	r0, 1a003c64 <vTaskDelay+0x30>
1a003c38:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a003c3a:	4b0f      	ldr	r3, [pc, #60]	; (1a003c78 <vTaskDelay+0x44>)
1a003c3c:	681b      	ldr	r3, [r3, #0]
1a003c3e:	b143      	cbz	r3, 1a003c52 <vTaskDelay+0x1e>
1a003c40:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003c44:	f383 8811 	msr	BASEPRI, r3
1a003c48:	f3bf 8f6f 	isb	sy
1a003c4c:	f3bf 8f4f 	dsb	sy
1a003c50:	e7fe      	b.n	1a003c50 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a003c52:	f7ff fedb 	bl	1a003a0c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a003c56:	2100      	movs	r1, #0
1a003c58:	4620      	mov	r0, r4
1a003c5a:	f7ff fdd5 	bl	1a003808 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a003c5e:	f7ff ff6f 	bl	1a003b40 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a003c62:	b938      	cbnz	r0, 1a003c74 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a003c64:	4b05      	ldr	r3, [pc, #20]	; (1a003c7c <vTaskDelay+0x48>)
1a003c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003c6a:	601a      	str	r2, [r3, #0]
1a003c6c:	f3bf 8f4f 	dsb	sy
1a003c70:	f3bf 8f6f 	isb	sy
	}
1a003c74:	bd10      	pop	{r4, pc}
1a003c76:	bf00      	nop
1a003c78:	10005ffc 	.word	0x10005ffc
1a003c7c:	e000ed04 	.word	0xe000ed04

1a003c80 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a003c80:	4b2c      	ldr	r3, [pc, #176]	; (1a003d34 <vTaskSwitchContext+0xb4>)
1a003c82:	681b      	ldr	r3, [r3, #0]
1a003c84:	b11b      	cbz	r3, 1a003c8e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a003c86:	4b2c      	ldr	r3, [pc, #176]	; (1a003d38 <vTaskSwitchContext+0xb8>)
1a003c88:	2201      	movs	r2, #1
1a003c8a:	601a      	str	r2, [r3, #0]
1a003c8c:	4770      	bx	lr
{
1a003c8e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a003c90:	4b29      	ldr	r3, [pc, #164]	; (1a003d38 <vTaskSwitchContext+0xb8>)
1a003c92:	2200      	movs	r2, #0
1a003c94:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a003c96:	4b29      	ldr	r3, [pc, #164]	; (1a003d3c <vTaskSwitchContext+0xbc>)
1a003c98:	681b      	ldr	r3, [r3, #0]
1a003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a003c9c:	681a      	ldr	r2, [r3, #0]
1a003c9e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a003ca2:	d103      	bne.n	1a003cac <vTaskSwitchContext+0x2c>
1a003ca4:	685a      	ldr	r2, [r3, #4]
1a003ca6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a003caa:	d01b      	beq.n	1a003ce4 <vTaskSwitchContext+0x64>
1a003cac:	4b23      	ldr	r3, [pc, #140]	; (1a003d3c <vTaskSwitchContext+0xbc>)
1a003cae:	6818      	ldr	r0, [r3, #0]
1a003cb0:	6819      	ldr	r1, [r3, #0]
1a003cb2:	3134      	adds	r1, #52	; 0x34
1a003cb4:	f7ff fc5a 	bl	1a00356c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003cb8:	4b21      	ldr	r3, [pc, #132]	; (1a003d40 <vTaskSwitchContext+0xc0>)
1a003cba:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a003cbc:	fab3 f383 	clz	r3, r3
1a003cc0:	b2db      	uxtb	r3, r3
1a003cc2:	f1c3 031f 	rsb	r3, r3, #31
1a003cc6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a003cca:	008a      	lsls	r2, r1, #2
1a003ccc:	491d      	ldr	r1, [pc, #116]	; (1a003d44 <vTaskSwitchContext+0xc4>)
1a003cce:	588a      	ldr	r2, [r1, r2]
1a003cd0:	b98a      	cbnz	r2, 1a003cf6 <vTaskSwitchContext+0x76>
	__asm volatile
1a003cd2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003cd6:	f383 8811 	msr	BASEPRI, r3
1a003cda:	f3bf 8f6f 	isb	sy
1a003cde:	f3bf 8f4f 	dsb	sy
1a003ce2:	e7fe      	b.n	1a003ce2 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a003ce4:	689a      	ldr	r2, [r3, #8]
1a003ce6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a003cea:	d1df      	bne.n	1a003cac <vTaskSwitchContext+0x2c>
1a003cec:	68db      	ldr	r3, [r3, #12]
1a003cee:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a003cf2:	d1db      	bne.n	1a003cac <vTaskSwitchContext+0x2c>
1a003cf4:	e7e0      	b.n	1a003cb8 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003cf6:	4813      	ldr	r0, [pc, #76]	; (1a003d44 <vTaskSwitchContext+0xc4>)
1a003cf8:	009a      	lsls	r2, r3, #2
1a003cfa:	18d4      	adds	r4, r2, r3
1a003cfc:	00a1      	lsls	r1, r4, #2
1a003cfe:	4401      	add	r1, r0
1a003d00:	684c      	ldr	r4, [r1, #4]
1a003d02:	6864      	ldr	r4, [r4, #4]
1a003d04:	604c      	str	r4, [r1, #4]
1a003d06:	441a      	add	r2, r3
1a003d08:	0091      	lsls	r1, r2, #2
1a003d0a:	3108      	adds	r1, #8
1a003d0c:	4408      	add	r0, r1
1a003d0e:	4284      	cmp	r4, r0
1a003d10:	d009      	beq.n	1a003d26 <vTaskSwitchContext+0xa6>
1a003d12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003d16:	009a      	lsls	r2, r3, #2
1a003d18:	4b0a      	ldr	r3, [pc, #40]	; (1a003d44 <vTaskSwitchContext+0xc4>)
1a003d1a:	4413      	add	r3, r2
1a003d1c:	685b      	ldr	r3, [r3, #4]
1a003d1e:	68da      	ldr	r2, [r3, #12]
1a003d20:	4b06      	ldr	r3, [pc, #24]	; (1a003d3c <vTaskSwitchContext+0xbc>)
1a003d22:	601a      	str	r2, [r3, #0]
}
1a003d24:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a003d26:	6861      	ldr	r1, [r4, #4]
1a003d28:	4806      	ldr	r0, [pc, #24]	; (1a003d44 <vTaskSwitchContext+0xc4>)
1a003d2a:	2214      	movs	r2, #20
1a003d2c:	fb02 0203 	mla	r2, r2, r3, r0
1a003d30:	6051      	str	r1, [r2, #4]
1a003d32:	e7ee      	b.n	1a003d12 <vTaskSwitchContext+0x92>
1a003d34:	10005ffc 	.word	0x10005ffc
1a003d38:	1000607c 	.word	0x1000607c
1a003d3c:	10005f58 	.word	0x10005f58
1a003d40:	10006004 	.word	0x10006004
1a003d44:	10005f64 	.word	0x10005f64

1a003d48 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a003d48:	b940      	cbnz	r0, 1a003d5c <vTaskPlaceOnEventList+0x14>
1a003d4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d4e:	f383 8811 	msr	BASEPRI, r3
1a003d52:	f3bf 8f6f 	isb	sy
1a003d56:	f3bf 8f4f 	dsb	sy
1a003d5a:	e7fe      	b.n	1a003d5a <vTaskPlaceOnEventList+0x12>
{
1a003d5c:	b510      	push	{r4, lr}
1a003d5e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a003d60:	4b04      	ldr	r3, [pc, #16]	; (1a003d74 <vTaskPlaceOnEventList+0x2c>)
1a003d62:	6819      	ldr	r1, [r3, #0]
1a003d64:	3118      	adds	r1, #24
1a003d66:	f7ff fb96 	bl	1a003496 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a003d6a:	2101      	movs	r1, #1
1a003d6c:	4620      	mov	r0, r4
1a003d6e:	f7ff fd4b 	bl	1a003808 <prvAddCurrentTaskToDelayedList>
}
1a003d72:	bd10      	pop	{r4, pc}
1a003d74:	10005f58 	.word	0x10005f58

1a003d78 <vTaskPlaceOnEventListRestricted>:
	{
1a003d78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a003d7a:	b940      	cbnz	r0, 1a003d8e <vTaskPlaceOnEventListRestricted+0x16>
1a003d7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d80:	f383 8811 	msr	BASEPRI, r3
1a003d84:	f3bf 8f6f 	isb	sy
1a003d88:	f3bf 8f4f 	dsb	sy
1a003d8c:	e7fe      	b.n	1a003d8c <vTaskPlaceOnEventListRestricted+0x14>
1a003d8e:	460c      	mov	r4, r1
1a003d90:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a003d92:	4a06      	ldr	r2, [pc, #24]	; (1a003dac <vTaskPlaceOnEventListRestricted+0x34>)
1a003d94:	6811      	ldr	r1, [r2, #0]
1a003d96:	3118      	adds	r1, #24
1a003d98:	f7ff fb71 	bl	1a00347e <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a003d9c:	b10d      	cbz	r5, 1a003da2 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a003d9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a003da2:	4629      	mov	r1, r5
1a003da4:	4620      	mov	r0, r4
1a003da6:	f7ff fd2f 	bl	1a003808 <prvAddCurrentTaskToDelayedList>
	}
1a003daa:	bd38      	pop	{r3, r4, r5, pc}
1a003dac:	10005f58 	.word	0x10005f58

1a003db0 <xTaskRemoveFromEventList>:
{
1a003db0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a003db2:	68c3      	ldr	r3, [r0, #12]
1a003db4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a003db6:	b944      	cbnz	r4, 1a003dca <xTaskRemoveFromEventList+0x1a>
1a003db8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003dbc:	f383 8811 	msr	BASEPRI, r3
1a003dc0:	f3bf 8f6f 	isb	sy
1a003dc4:	f3bf 8f4f 	dsb	sy
1a003dc8:	e7fe      	b.n	1a003dc8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a003dca:	f104 0518 	add.w	r5, r4, #24
1a003dce:	4628      	mov	r0, r5
1a003dd0:	f7ff fb7b 	bl	1a0034ca <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003dd4:	4b13      	ldr	r3, [pc, #76]	; (1a003e24 <xTaskRemoveFromEventList+0x74>)
1a003dd6:	681b      	ldr	r3, [r3, #0]
1a003dd8:	b9e3      	cbnz	r3, 1a003e14 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a003dda:	1d25      	adds	r5, r4, #4
1a003ddc:	4628      	mov	r0, r5
1a003dde:	f7ff fb74 	bl	1a0034ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a003de2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003de4:	2201      	movs	r2, #1
1a003de6:	409a      	lsls	r2, r3
1a003de8:	490f      	ldr	r1, [pc, #60]	; (1a003e28 <xTaskRemoveFromEventList+0x78>)
1a003dea:	6808      	ldr	r0, [r1, #0]
1a003dec:	4302      	orrs	r2, r0
1a003dee:	600a      	str	r2, [r1, #0]
1a003df0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003df4:	009a      	lsls	r2, r3, #2
1a003df6:	4629      	mov	r1, r5
1a003df8:	480c      	ldr	r0, [pc, #48]	; (1a003e2c <xTaskRemoveFromEventList+0x7c>)
1a003dfa:	4410      	add	r0, r2
1a003dfc:	f7ff fb3f 	bl	1a00347e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a003e00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a003e02:	4b0b      	ldr	r3, [pc, #44]	; (1a003e30 <xTaskRemoveFromEventList+0x80>)
1a003e04:	681b      	ldr	r3, [r3, #0]
1a003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003e08:	429a      	cmp	r2, r3
1a003e0a:	d908      	bls.n	1a003e1e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a003e0c:	2001      	movs	r0, #1
1a003e0e:	4b09      	ldr	r3, [pc, #36]	; (1a003e34 <xTaskRemoveFromEventList+0x84>)
1a003e10:	6018      	str	r0, [r3, #0]
}
1a003e12:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a003e14:	4629      	mov	r1, r5
1a003e16:	4808      	ldr	r0, [pc, #32]	; (1a003e38 <xTaskRemoveFromEventList+0x88>)
1a003e18:	f7ff fb31 	bl	1a00347e <vListInsertEnd>
1a003e1c:	e7f0      	b.n	1a003e00 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a003e1e:	2000      	movs	r0, #0
	return xReturn;
1a003e20:	e7f7      	b.n	1a003e12 <xTaskRemoveFromEventList+0x62>
1a003e22:	bf00      	nop
1a003e24:	10005ffc 	.word	0x10005ffc
1a003e28:	10006004 	.word	0x10006004
1a003e2c:	10005f64 	.word	0x10005f64
1a003e30:	10005f58 	.word	0x10005f58
1a003e34:	1000607c 	.word	0x1000607c
1a003e38:	10006038 	.word	0x10006038

1a003e3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a003e3c:	4b03      	ldr	r3, [pc, #12]	; (1a003e4c <vTaskInternalSetTimeOutState+0x10>)
1a003e3e:	681b      	ldr	r3, [r3, #0]
1a003e40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a003e42:	4b03      	ldr	r3, [pc, #12]	; (1a003e50 <vTaskInternalSetTimeOutState+0x14>)
1a003e44:	681b      	ldr	r3, [r3, #0]
1a003e46:	6043      	str	r3, [r0, #4]
}
1a003e48:	4770      	bx	lr
1a003e4a:	bf00      	nop
1a003e4c:	10006034 	.word	0x10006034
1a003e50:	10006078 	.word	0x10006078

1a003e54 <xTaskCheckForTimeOut>:
{
1a003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a003e56:	b150      	cbz	r0, 1a003e6e <xTaskCheckForTimeOut+0x1a>
1a003e58:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a003e5a:	b989      	cbnz	r1, 1a003e80 <xTaskCheckForTimeOut+0x2c>
1a003e5c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e60:	f383 8811 	msr	BASEPRI, r3
1a003e64:	f3bf 8f6f 	isb	sy
1a003e68:	f3bf 8f4f 	dsb	sy
1a003e6c:	e7fe      	b.n	1a003e6c <xTaskCheckForTimeOut+0x18>
1a003e6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e72:	f383 8811 	msr	BASEPRI, r3
1a003e76:	f3bf 8f6f 	isb	sy
1a003e7a:	f3bf 8f4f 	dsb	sy
1a003e7e:	e7fe      	b.n	1a003e7e <xTaskCheckForTimeOut+0x2a>
1a003e80:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a003e82:	f000 fc2f 	bl	1a0046e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a003e86:	4b11      	ldr	r3, [pc, #68]	; (1a003ecc <xTaskCheckForTimeOut+0x78>)
1a003e88:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a003e8a:	6868      	ldr	r0, [r5, #4]
1a003e8c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a003e8e:	6823      	ldr	r3, [r4, #0]
1a003e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003e94:	d016      	beq.n	1a003ec4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a003e96:	682f      	ldr	r7, [r5, #0]
1a003e98:	4e0d      	ldr	r6, [pc, #52]	; (1a003ed0 <xTaskCheckForTimeOut+0x7c>)
1a003e9a:	6836      	ldr	r6, [r6, #0]
1a003e9c:	42b7      	cmp	r7, r6
1a003e9e:	d001      	beq.n	1a003ea4 <xTaskCheckForTimeOut+0x50>
1a003ea0:	4288      	cmp	r0, r1
1a003ea2:	d911      	bls.n	1a003ec8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a003ea4:	4293      	cmp	r3, r2
1a003ea6:	d803      	bhi.n	1a003eb0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a003ea8:	2300      	movs	r3, #0
1a003eaa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a003eac:	2401      	movs	r4, #1
1a003eae:	e005      	b.n	1a003ebc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a003eb0:	1a9b      	subs	r3, r3, r2
1a003eb2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a003eb4:	4628      	mov	r0, r5
1a003eb6:	f7ff ffc1 	bl	1a003e3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a003eba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a003ebc:	f000 fc34 	bl	1a004728 <vPortExitCritical>
}
1a003ec0:	4620      	mov	r0, r4
1a003ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a003ec4:	2400      	movs	r4, #0
1a003ec6:	e7f9      	b.n	1a003ebc <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a003ec8:	2401      	movs	r4, #1
1a003eca:	e7f7      	b.n	1a003ebc <xTaskCheckForTimeOut+0x68>
1a003ecc:	10006078 	.word	0x10006078
1a003ed0:	10006034 	.word	0x10006034

1a003ed4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a003ed4:	4b01      	ldr	r3, [pc, #4]	; (1a003edc <vTaskMissedYield+0x8>)
1a003ed6:	2201      	movs	r2, #1
1a003ed8:	601a      	str	r2, [r3, #0]
}
1a003eda:	4770      	bx	lr
1a003edc:	1000607c 	.word	0x1000607c

1a003ee0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a003ee0:	4b05      	ldr	r3, [pc, #20]	; (1a003ef8 <xTaskGetSchedulerState+0x18>)
1a003ee2:	681b      	ldr	r3, [r3, #0]
1a003ee4:	b133      	cbz	r3, 1a003ef4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003ee6:	4b05      	ldr	r3, [pc, #20]	; (1a003efc <xTaskGetSchedulerState+0x1c>)
1a003ee8:	681b      	ldr	r3, [r3, #0]
1a003eea:	b10b      	cbz	r3, 1a003ef0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a003eec:	2000      	movs	r0, #0
	}
1a003eee:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a003ef0:	2002      	movs	r0, #2
1a003ef2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a003ef4:	2001      	movs	r0, #1
1a003ef6:	4770      	bx	lr
1a003ef8:	1000604c 	.word	0x1000604c
1a003efc:	10005ffc 	.word	0x10005ffc

1a003f00 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a003f00:	2800      	cmp	r0, #0
1a003f02:	d050      	beq.n	1a003fa6 <xTaskPriorityInherit+0xa6>
	{
1a003f04:	b538      	push	{r3, r4, r5, lr}
1a003f06:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a003f08:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a003f0a:	4928      	ldr	r1, [pc, #160]	; (1a003fac <xTaskPriorityInherit+0xac>)
1a003f0c:	6809      	ldr	r1, [r1, #0]
1a003f0e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a003f10:	428a      	cmp	r2, r1
1a003f12:	d23e      	bcs.n	1a003f92 <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a003f14:	6981      	ldr	r1, [r0, #24]
1a003f16:	2900      	cmp	r1, #0
1a003f18:	db05      	blt.n	1a003f26 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003f1a:	4924      	ldr	r1, [pc, #144]	; (1a003fac <xTaskPriorityInherit+0xac>)
1a003f1c:	6809      	ldr	r1, [r1, #0]
1a003f1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a003f20:	f1c1 0107 	rsb	r1, r1, #7
1a003f24:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a003f26:	6960      	ldr	r0, [r4, #20]
1a003f28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a003f2c:	0091      	lsls	r1, r2, #2
1a003f2e:	4a20      	ldr	r2, [pc, #128]	; (1a003fb0 <xTaskPriorityInherit+0xb0>)
1a003f30:	440a      	add	r2, r1
1a003f32:	4290      	cmp	r0, r2
1a003f34:	d005      	beq.n	1a003f42 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a003f36:	4a1d      	ldr	r2, [pc, #116]	; (1a003fac <xTaskPriorityInherit+0xac>)
1a003f38:	6812      	ldr	r2, [r2, #0]
1a003f3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a003f3c:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a003f3e:	2001      	movs	r0, #1
	}
1a003f40:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a003f42:	1d25      	adds	r5, r4, #4
1a003f44:	4628      	mov	r0, r5
1a003f46:	f7ff fac0 	bl	1a0034ca <uxListRemove>
1a003f4a:	b968      	cbnz	r0, 1a003f68 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a003f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003f4e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a003f52:	008a      	lsls	r2, r1, #2
1a003f54:	4916      	ldr	r1, [pc, #88]	; (1a003fb0 <xTaskPriorityInherit+0xb0>)
1a003f56:	588a      	ldr	r2, [r1, r2]
1a003f58:	b932      	cbnz	r2, 1a003f68 <xTaskPriorityInherit+0x68>
1a003f5a:	2201      	movs	r2, #1
1a003f5c:	409a      	lsls	r2, r3
1a003f5e:	4915      	ldr	r1, [pc, #84]	; (1a003fb4 <xTaskPriorityInherit+0xb4>)
1a003f60:	680b      	ldr	r3, [r1, #0]
1a003f62:	ea23 0302 	bic.w	r3, r3, r2
1a003f66:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a003f68:	4b10      	ldr	r3, [pc, #64]	; (1a003fac <xTaskPriorityInherit+0xac>)
1a003f6a:	681b      	ldr	r3, [r3, #0]
1a003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003f6e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a003f70:	2401      	movs	r4, #1
1a003f72:	fa04 f203 	lsl.w	r2, r4, r3
1a003f76:	490f      	ldr	r1, [pc, #60]	; (1a003fb4 <xTaskPriorityInherit+0xb4>)
1a003f78:	6808      	ldr	r0, [r1, #0]
1a003f7a:	4302      	orrs	r2, r0
1a003f7c:	600a      	str	r2, [r1, #0]
1a003f7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003f82:	009a      	lsls	r2, r3, #2
1a003f84:	4629      	mov	r1, r5
1a003f86:	480a      	ldr	r0, [pc, #40]	; (1a003fb0 <xTaskPriorityInherit+0xb0>)
1a003f88:	4410      	add	r0, r2
1a003f8a:	f7ff fa78 	bl	1a00347e <vListInsertEnd>
				xReturn = pdTRUE;
1a003f8e:	4620      	mov	r0, r4
1a003f90:	e7d6      	b.n	1a003f40 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a003f92:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a003f94:	4b05      	ldr	r3, [pc, #20]	; (1a003fac <xTaskPriorityInherit+0xac>)
1a003f96:	681b      	ldr	r3, [r3, #0]
1a003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003f9a:	429a      	cmp	r2, r3
1a003f9c:	d201      	bcs.n	1a003fa2 <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a003f9e:	2001      	movs	r0, #1
		return xReturn;
1a003fa0:	e7ce      	b.n	1a003f40 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a003fa2:	2000      	movs	r0, #0
1a003fa4:	e7cc      	b.n	1a003f40 <xTaskPriorityInherit+0x40>
1a003fa6:	2000      	movs	r0, #0
	}
1a003fa8:	4770      	bx	lr
1a003faa:	bf00      	nop
1a003fac:	10005f58 	.word	0x10005f58
1a003fb0:	10005f64 	.word	0x10005f64
1a003fb4:	10006004 	.word	0x10006004

1a003fb8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a003fb8:	2800      	cmp	r0, #0
1a003fba:	d049      	beq.n	1a004050 <xTaskPriorityDisinherit+0x98>
	{
1a003fbc:	b538      	push	{r3, r4, r5, lr}
1a003fbe:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a003fc0:	4a26      	ldr	r2, [pc, #152]	; (1a00405c <xTaskPriorityDisinherit+0xa4>)
1a003fc2:	6812      	ldr	r2, [r2, #0]
1a003fc4:	4282      	cmp	r2, r0
1a003fc6:	d008      	beq.n	1a003fda <xTaskPriorityDisinherit+0x22>
1a003fc8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003fcc:	f383 8811 	msr	BASEPRI, r3
1a003fd0:	f3bf 8f6f 	isb	sy
1a003fd4:	f3bf 8f4f 	dsb	sy
1a003fd8:	e7fe      	b.n	1a003fd8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a003fda:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a003fdc:	b942      	cbnz	r2, 1a003ff0 <xTaskPriorityDisinherit+0x38>
1a003fde:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003fe2:	f383 8811 	msr	BASEPRI, r3
1a003fe6:	f3bf 8f6f 	isb	sy
1a003fea:	f3bf 8f4f 	dsb	sy
1a003fee:	e7fe      	b.n	1a003fee <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a003ff0:	3a01      	subs	r2, #1
1a003ff2:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a003ff4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a003ff6:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a003ff8:	4288      	cmp	r0, r1
1a003ffa:	d02b      	beq.n	1a004054 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a003ffc:	bb62      	cbnz	r2, 1a004058 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a003ffe:	1d25      	adds	r5, r4, #4
1a004000:	4628      	mov	r0, r5
1a004002:	f7ff fa62 	bl	1a0034ca <uxListRemove>
1a004006:	b970      	cbnz	r0, 1a004026 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a004008:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00400a:	2314      	movs	r3, #20
1a00400c:	fb03 f302 	mul.w	r3, r3, r2
1a004010:	4913      	ldr	r1, [pc, #76]	; (1a004060 <xTaskPriorityDisinherit+0xa8>)
1a004012:	58cb      	ldr	r3, [r1, r3]
1a004014:	b93b      	cbnz	r3, 1a004026 <xTaskPriorityDisinherit+0x6e>
1a004016:	2301      	movs	r3, #1
1a004018:	fa03 f202 	lsl.w	r2, r3, r2
1a00401c:	4911      	ldr	r1, [pc, #68]	; (1a004064 <xTaskPriorityDisinherit+0xac>)
1a00401e:	680b      	ldr	r3, [r1, #0]
1a004020:	ea23 0302 	bic.w	r3, r3, r2
1a004024:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a004026:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a004028:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00402a:	f1c3 0207 	rsb	r2, r3, #7
1a00402e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a004030:	2401      	movs	r4, #1
1a004032:	fa04 f203 	lsl.w	r2, r4, r3
1a004036:	490b      	ldr	r1, [pc, #44]	; (1a004064 <xTaskPriorityDisinherit+0xac>)
1a004038:	6808      	ldr	r0, [r1, #0]
1a00403a:	4302      	orrs	r2, r0
1a00403c:	600a      	str	r2, [r1, #0]
1a00403e:	4629      	mov	r1, r5
1a004040:	4a07      	ldr	r2, [pc, #28]	; (1a004060 <xTaskPriorityDisinherit+0xa8>)
1a004042:	2014      	movs	r0, #20
1a004044:	fb00 2003 	mla	r0, r0, r3, r2
1a004048:	f7ff fa19 	bl	1a00347e <vListInsertEnd>
					xReturn = pdTRUE;
1a00404c:	4620      	mov	r0, r4
	}
1a00404e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a004050:	2000      	movs	r0, #0
	}
1a004052:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a004054:	2000      	movs	r0, #0
1a004056:	e7fa      	b.n	1a00404e <xTaskPriorityDisinherit+0x96>
1a004058:	2000      	movs	r0, #0
		return xReturn;
1a00405a:	e7f8      	b.n	1a00404e <xTaskPriorityDisinherit+0x96>
1a00405c:	10005f58 	.word	0x10005f58
1a004060:	10005f64 	.word	0x10005f64
1a004064:	10006004 	.word	0x10006004

1a004068 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a004068:	2800      	cmp	r0, #0
1a00406a:	d055      	beq.n	1a004118 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a00406c:	b538      	push	{r3, r4, r5, lr}
1a00406e:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a004070:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a004072:	b940      	cbnz	r0, 1a004086 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a004074:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004078:	f383 8811 	msr	BASEPRI, r3
1a00407c:	f3bf 8f6f 	isb	sy
1a004080:	f3bf 8f4f 	dsb	sy
1a004084:	e7fe      	b.n	1a004084 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a004086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a004088:	428a      	cmp	r2, r1
1a00408a:	d200      	bcs.n	1a00408e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a00408c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00408e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a004090:	4291      	cmp	r1, r2
1a004092:	d001      	beq.n	1a004098 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a004094:	2801      	cmp	r0, #1
1a004096:	d000      	beq.n	1a00409a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a004098:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a00409a:	4820      	ldr	r0, [pc, #128]	; (1a00411c <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a00409c:	6800      	ldr	r0, [r0, #0]
1a00409e:	4298      	cmp	r0, r3
1a0040a0:	d108      	bne.n	1a0040b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a0040a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0040a6:	f383 8811 	msr	BASEPRI, r3
1a0040aa:	f3bf 8f6f 	isb	sy
1a0040ae:	f3bf 8f4f 	dsb	sy
1a0040b2:	e7fe      	b.n	1a0040b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a0040b4:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0040b6:	6998      	ldr	r0, [r3, #24]
1a0040b8:	2800      	cmp	r0, #0
1a0040ba:	db02      	blt.n	1a0040c2 <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0040bc:	f1c2 0207 	rsb	r2, r2, #7
1a0040c0:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a0040c2:	695a      	ldr	r2, [r3, #20]
1a0040c4:	4816      	ldr	r0, [pc, #88]	; (1a004120 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0040c6:	2414      	movs	r4, #20
1a0040c8:	fb04 0101 	mla	r1, r4, r1, r0
1a0040cc:	428a      	cmp	r2, r1
1a0040ce:	d1e3      	bne.n	1a004098 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0040d0:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0040d2:	1d1d      	adds	r5, r3, #4
1a0040d4:	4628      	mov	r0, r5
1a0040d6:	f7ff f9f8 	bl	1a0034ca <uxListRemove>
1a0040da:	b970      	cbnz	r0, 1a0040fa <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0040dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0040de:	2314      	movs	r3, #20
1a0040e0:	fb03 f302 	mul.w	r3, r3, r2
1a0040e4:	490e      	ldr	r1, [pc, #56]	; (1a004120 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a0040e6:	58cb      	ldr	r3, [r1, r3]
1a0040e8:	b93b      	cbnz	r3, 1a0040fa <vTaskPriorityDisinheritAfterTimeout+0x92>
1a0040ea:	2301      	movs	r3, #1
1a0040ec:	fa03 f202 	lsl.w	r2, r3, r2
1a0040f0:	490c      	ldr	r1, [pc, #48]	; (1a004124 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a0040f2:	680b      	ldr	r3, [r1, #0]
1a0040f4:	ea23 0302 	bic.w	r3, r3, r2
1a0040f8:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a0040fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0040fc:	2301      	movs	r3, #1
1a0040fe:	4093      	lsls	r3, r2
1a004100:	4908      	ldr	r1, [pc, #32]	; (1a004124 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a004102:	6808      	ldr	r0, [r1, #0]
1a004104:	4303      	orrs	r3, r0
1a004106:	600b      	str	r3, [r1, #0]
1a004108:	4629      	mov	r1, r5
1a00410a:	4b05      	ldr	r3, [pc, #20]	; (1a004120 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a00410c:	2014      	movs	r0, #20
1a00410e:	fb00 3002 	mla	r0, r0, r2, r3
1a004112:	f7ff f9b4 	bl	1a00347e <vListInsertEnd>
	}
1a004116:	e7bf      	b.n	1a004098 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a004118:	4770      	bx	lr
1a00411a:	bf00      	nop
1a00411c:	10005f58 	.word	0x10005f58
1a004120:	10005f64 	.word	0x10005f64
1a004124:	10006004 	.word	0x10006004

1a004128 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a004128:	4b05      	ldr	r3, [pc, #20]	; (1a004140 <pvTaskIncrementMutexHeldCount+0x18>)
1a00412a:	681b      	ldr	r3, [r3, #0]
1a00412c:	b123      	cbz	r3, 1a004138 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a00412e:	4b04      	ldr	r3, [pc, #16]	; (1a004140 <pvTaskIncrementMutexHeldCount+0x18>)
1a004130:	681a      	ldr	r2, [r3, #0]
1a004132:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a004134:	3301      	adds	r3, #1
1a004136:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a004138:	4b01      	ldr	r3, [pc, #4]	; (1a004140 <pvTaskIncrementMutexHeldCount+0x18>)
1a00413a:	6818      	ldr	r0, [r3, #0]
	}
1a00413c:	4770      	bx	lr
1a00413e:	bf00      	nop
1a004140:	10005f58 	.word	0x10005f58

1a004144 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a004144:	4b06      	ldr	r3, [pc, #24]	; (1a004160 <prvGetNextExpireTime+0x1c>)
1a004146:	681a      	ldr	r2, [r3, #0]
1a004148:	6813      	ldr	r3, [r2, #0]
1a00414a:	fab3 f383 	clz	r3, r3
1a00414e:	095b      	lsrs	r3, r3, #5
1a004150:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a004152:	b913      	cbnz	r3, 1a00415a <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004154:	68d3      	ldr	r3, [r2, #12]
1a004156:	6818      	ldr	r0, [r3, #0]
1a004158:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a00415a:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a00415c:	4770      	bx	lr
1a00415e:	bf00      	nop
1a004160:	10006080 	.word	0x10006080

1a004164 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a004164:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a004166:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004168:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a00416a:	4291      	cmp	r1, r2
1a00416c:	d80c      	bhi.n	1a004188 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00416e:	1ad2      	subs	r2, r2, r3
1a004170:	6983      	ldr	r3, [r0, #24]
1a004172:	429a      	cmp	r2, r3
1a004174:	d301      	bcc.n	1a00417a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a004176:	2001      	movs	r0, #1
1a004178:	e010      	b.n	1a00419c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00417a:	1d01      	adds	r1, r0, #4
1a00417c:	4b09      	ldr	r3, [pc, #36]	; (1a0041a4 <prvInsertTimerInActiveList+0x40>)
1a00417e:	6818      	ldr	r0, [r3, #0]
1a004180:	f7ff f989 	bl	1a003496 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004184:	2000      	movs	r0, #0
1a004186:	e009      	b.n	1a00419c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a004188:	429a      	cmp	r2, r3
1a00418a:	d201      	bcs.n	1a004190 <prvInsertTimerInActiveList+0x2c>
1a00418c:	4299      	cmp	r1, r3
1a00418e:	d206      	bcs.n	1a00419e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004190:	1d01      	adds	r1, r0, #4
1a004192:	4b05      	ldr	r3, [pc, #20]	; (1a0041a8 <prvInsertTimerInActiveList+0x44>)
1a004194:	6818      	ldr	r0, [r3, #0]
1a004196:	f7ff f97e 	bl	1a003496 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00419a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a00419c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00419e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0041a0:	e7fc      	b.n	1a00419c <prvInsertTimerInActiveList+0x38>
1a0041a2:	bf00      	nop
1a0041a4:	10006084 	.word	0x10006084
1a0041a8:	10006080 	.word	0x10006080

1a0041ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0041ac:	b530      	push	{r4, r5, lr}
1a0041ae:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0041b0:	f000 fa98 	bl	1a0046e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0041b4:	4b11      	ldr	r3, [pc, #68]	; (1a0041fc <prvCheckForValidListAndQueue+0x50>)
1a0041b6:	681b      	ldr	r3, [r3, #0]
1a0041b8:	b11b      	cbz	r3, 1a0041c2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0041ba:	f000 fab5 	bl	1a004728 <vPortExitCritical>
}
1a0041be:	b003      	add	sp, #12
1a0041c0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0041c2:	4d0f      	ldr	r5, [pc, #60]	; (1a004200 <prvCheckForValidListAndQueue+0x54>)
1a0041c4:	4628      	mov	r0, r5
1a0041c6:	f7ff f94c 	bl	1a003462 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0041ca:	4c0e      	ldr	r4, [pc, #56]	; (1a004204 <prvCheckForValidListAndQueue+0x58>)
1a0041cc:	4620      	mov	r0, r4
1a0041ce:	f7ff f948 	bl	1a003462 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0041d2:	4b0d      	ldr	r3, [pc, #52]	; (1a004208 <prvCheckForValidListAndQueue+0x5c>)
1a0041d4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0041d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00420c <prvCheckForValidListAndQueue+0x60>)
1a0041d8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0041da:	2300      	movs	r3, #0
1a0041dc:	9300      	str	r3, [sp, #0]
1a0041de:	4b0c      	ldr	r3, [pc, #48]	; (1a004210 <prvCheckForValidListAndQueue+0x64>)
1a0041e0:	4a0c      	ldr	r2, [pc, #48]	; (1a004214 <prvCheckForValidListAndQueue+0x68>)
1a0041e2:	2110      	movs	r1, #16
1a0041e4:	200a      	movs	r0, #10
1a0041e6:	f7fe fd72 	bl	1a002cce <xQueueGenericCreateStatic>
1a0041ea:	4b04      	ldr	r3, [pc, #16]	; (1a0041fc <prvCheckForValidListAndQueue+0x50>)
1a0041ec:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a0041ee:	2800      	cmp	r0, #0
1a0041f0:	d0e3      	beq.n	1a0041ba <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0041f2:	4909      	ldr	r1, [pc, #36]	; (1a004218 <prvCheckForValidListAndQueue+0x6c>)
1a0041f4:	f7ff f8f8 	bl	1a0033e8 <vQueueAddToRegistry>
1a0041f8:	e7df      	b.n	1a0041ba <prvCheckForValidListAndQueue+0xe>
1a0041fa:	bf00      	nop
1a0041fc:	100061a4 	.word	0x100061a4
1a004200:	10006128 	.word	0x10006128
1a004204:	1000613c 	.word	0x1000613c
1a004208:	10006080 	.word	0x10006080
1a00420c:	10006084 	.word	0x10006084
1a004210:	10006154 	.word	0x10006154
1a004214:	10006088 	.word	0x10006088
1a004218:	1a0079f8 	.word	0x1a0079f8

1a00421c <prvInitialiseNewTimer>:
{
1a00421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004220:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a004222:	b941      	cbnz	r1, 1a004236 <prvInitialiseNewTimer+0x1a>
1a004224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004228:	f383 8811 	msr	BASEPRI, r3
1a00422c:	f3bf 8f6f 	isb	sy
1a004230:	f3bf 8f4f 	dsb	sy
1a004234:	e7fe      	b.n	1a004234 <prvInitialiseNewTimer+0x18>
1a004236:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a004238:	b174      	cbz	r4, 1a004258 <prvInitialiseNewTimer+0x3c>
1a00423a:	461d      	mov	r5, r3
1a00423c:	4616      	mov	r6, r2
1a00423e:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a004240:	f7ff ffb4 	bl	1a0041ac <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a004244:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a004248:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a00424a:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a00424c:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a00424e:	9b06      	ldr	r3, [sp, #24]
1a004250:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a004252:	1d20      	adds	r0, r4, #4
1a004254:	f7ff f910 	bl	1a003478 <vListInitialiseItem>
}
1a004258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00425c <xTimerCreateTimerTask>:
{
1a00425c:	b510      	push	{r4, lr}
1a00425e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a004260:	f7ff ffa4 	bl	1a0041ac <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a004264:	4b12      	ldr	r3, [pc, #72]	; (1a0042b0 <xTimerCreateTimerTask+0x54>)
1a004266:	681b      	ldr	r3, [r3, #0]
1a004268:	b1cb      	cbz	r3, 1a00429e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00426a:	2400      	movs	r4, #0
1a00426c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a00426e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a004270:	aa07      	add	r2, sp, #28
1a004272:	a906      	add	r1, sp, #24
1a004274:	a805      	add	r0, sp, #20
1a004276:	f7ff f949 	bl	1a00350c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00427a:	9b05      	ldr	r3, [sp, #20]
1a00427c:	9302      	str	r3, [sp, #8]
1a00427e:	9b06      	ldr	r3, [sp, #24]
1a004280:	9301      	str	r3, [sp, #4]
1a004282:	2304      	movs	r3, #4
1a004284:	9300      	str	r3, [sp, #0]
1a004286:	4623      	mov	r3, r4
1a004288:	9a07      	ldr	r2, [sp, #28]
1a00428a:	490a      	ldr	r1, [pc, #40]	; (1a0042b4 <xTimerCreateTimerTask+0x58>)
1a00428c:	480a      	ldr	r0, [pc, #40]	; (1a0042b8 <xTimerCreateTimerTask+0x5c>)
1a00428e:	f7ff fb07 	bl	1a0038a0 <xTaskCreateStatic>
1a004292:	4b0a      	ldr	r3, [pc, #40]	; (1a0042bc <xTimerCreateTimerTask+0x60>)
1a004294:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a004296:	b110      	cbz	r0, 1a00429e <xTimerCreateTimerTask+0x42>
}
1a004298:	2001      	movs	r0, #1
1a00429a:	b008      	add	sp, #32
1a00429c:	bd10      	pop	{r4, pc}
1a00429e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0042a2:	f383 8811 	msr	BASEPRI, r3
1a0042a6:	f3bf 8f6f 	isb	sy
1a0042aa:	f3bf 8f4f 	dsb	sy
1a0042ae:	e7fe      	b.n	1a0042ae <xTimerCreateTimerTask+0x52>
1a0042b0:	100061a4 	.word	0x100061a4
1a0042b4:	1a007a00 	.word	0x1a007a00
1a0042b8:	1a0045d9 	.word	0x1a0045d9
1a0042bc:	100061a8 	.word	0x100061a8

1a0042c0 <xTimerCreate>:
	{
1a0042c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0042c4:	b082      	sub	sp, #8
1a0042c6:	4605      	mov	r5, r0
1a0042c8:	460e      	mov	r6, r1
1a0042ca:	4617      	mov	r7, r2
1a0042cc:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a0042ce:	2030      	movs	r0, #48	; 0x30
1a0042d0:	f7fe fbbe 	bl	1a002a50 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a0042d4:	4604      	mov	r4, r0
1a0042d6:	b158      	cbz	r0, 1a0042f0 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a0042d8:	9001      	str	r0, [sp, #4]
1a0042da:	9b08      	ldr	r3, [sp, #32]
1a0042dc:	9300      	str	r3, [sp, #0]
1a0042de:	4643      	mov	r3, r8
1a0042e0:	463a      	mov	r2, r7
1a0042e2:	4631      	mov	r1, r6
1a0042e4:	4628      	mov	r0, r5
1a0042e6:	f7ff ff99 	bl	1a00421c <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a0042ea:	2300      	movs	r3, #0
1a0042ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a0042f0:	4620      	mov	r0, r4
1a0042f2:	b002      	add	sp, #8
1a0042f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0042f8 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a0042f8:	b1c8      	cbz	r0, 1a00432e <xTimerGenericCommand+0x36>
{
1a0042fa:	b530      	push	{r4, r5, lr}
1a0042fc:	b085      	sub	sp, #20
1a0042fe:	4615      	mov	r5, r2
1a004300:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a004302:	4a17      	ldr	r2, [pc, #92]	; (1a004360 <xTimerGenericCommand+0x68>)
1a004304:	6810      	ldr	r0, [r2, #0]
1a004306:	b340      	cbz	r0, 1a00435a <xTimerGenericCommand+0x62>
1a004308:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a00430a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a00430c:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a00430e:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a004310:	2905      	cmp	r1, #5
1a004312:	dc1d      	bgt.n	1a004350 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a004314:	f7ff fde4 	bl	1a003ee0 <xTaskGetSchedulerState>
1a004318:	2802      	cmp	r0, #2
1a00431a:	d011      	beq.n	1a004340 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a00431c:	2300      	movs	r3, #0
1a00431e:	461a      	mov	r2, r3
1a004320:	4669      	mov	r1, sp
1a004322:	480f      	ldr	r0, [pc, #60]	; (1a004360 <xTimerGenericCommand+0x68>)
1a004324:	6800      	ldr	r0, [r0, #0]
1a004326:	f7fe fd41 	bl	1a002dac <xQueueGenericSend>
}
1a00432a:	b005      	add	sp, #20
1a00432c:	bd30      	pop	{r4, r5, pc}
1a00432e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004332:	f383 8811 	msr	BASEPRI, r3
1a004336:	f3bf 8f6f 	isb	sy
1a00433a:	f3bf 8f4f 	dsb	sy
1a00433e:	e7fe      	b.n	1a00433e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a004340:	2300      	movs	r3, #0
1a004342:	9a08      	ldr	r2, [sp, #32]
1a004344:	4669      	mov	r1, sp
1a004346:	4806      	ldr	r0, [pc, #24]	; (1a004360 <xTimerGenericCommand+0x68>)
1a004348:	6800      	ldr	r0, [r0, #0]
1a00434a:	f7fe fd2f 	bl	1a002dac <xQueueGenericSend>
1a00434e:	e7ec      	b.n	1a00432a <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a004350:	2300      	movs	r3, #0
1a004352:	4669      	mov	r1, sp
1a004354:	f7fe fdff 	bl	1a002f56 <xQueueGenericSendFromISR>
1a004358:	e7e7      	b.n	1a00432a <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a00435a:	2000      	movs	r0, #0
	return xReturn;
1a00435c:	e7e5      	b.n	1a00432a <xTimerGenericCommand+0x32>
1a00435e:	bf00      	nop
1a004360:	100061a4 	.word	0x100061a4

1a004364 <prvSwitchTimerLists>:
{
1a004364:	b570      	push	{r4, r5, r6, lr}
1a004366:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a004368:	4b1a      	ldr	r3, [pc, #104]	; (1a0043d4 <prvSwitchTimerLists+0x70>)
1a00436a:	681b      	ldr	r3, [r3, #0]
1a00436c:	681a      	ldr	r2, [r3, #0]
1a00436e:	b352      	cbz	r2, 1a0043c6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004370:	68db      	ldr	r3, [r3, #12]
1a004372:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004374:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004376:	1d25      	adds	r5, r4, #4
1a004378:	4628      	mov	r0, r5
1a00437a:	f7ff f8a6 	bl	1a0034ca <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00437e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004380:	4620      	mov	r0, r4
1a004382:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004384:	69e3      	ldr	r3, [r4, #28]
1a004386:	2b01      	cmp	r3, #1
1a004388:	d1ee      	bne.n	1a004368 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00438a:	69a3      	ldr	r3, [r4, #24]
1a00438c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00438e:	429e      	cmp	r6, r3
1a004390:	d207      	bcs.n	1a0043a2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a004392:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004394:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004396:	4629      	mov	r1, r5
1a004398:	4b0e      	ldr	r3, [pc, #56]	; (1a0043d4 <prvSwitchTimerLists+0x70>)
1a00439a:	6818      	ldr	r0, [r3, #0]
1a00439c:	f7ff f87b 	bl	1a003496 <vListInsert>
1a0043a0:	e7e2      	b.n	1a004368 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0043a2:	2100      	movs	r1, #0
1a0043a4:	9100      	str	r1, [sp, #0]
1a0043a6:	460b      	mov	r3, r1
1a0043a8:	4632      	mov	r2, r6
1a0043aa:	4620      	mov	r0, r4
1a0043ac:	f7ff ffa4 	bl	1a0042f8 <xTimerGenericCommand>
				configASSERT( xResult );
1a0043b0:	2800      	cmp	r0, #0
1a0043b2:	d1d9      	bne.n	1a004368 <prvSwitchTimerLists+0x4>
1a0043b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0043b8:	f383 8811 	msr	BASEPRI, r3
1a0043bc:	f3bf 8f6f 	isb	sy
1a0043c0:	f3bf 8f4f 	dsb	sy
1a0043c4:	e7fe      	b.n	1a0043c4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0043c6:	4a04      	ldr	r2, [pc, #16]	; (1a0043d8 <prvSwitchTimerLists+0x74>)
1a0043c8:	6810      	ldr	r0, [r2, #0]
1a0043ca:	4902      	ldr	r1, [pc, #8]	; (1a0043d4 <prvSwitchTimerLists+0x70>)
1a0043cc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0043ce:	6013      	str	r3, [r2, #0]
}
1a0043d0:	b002      	add	sp, #8
1a0043d2:	bd70      	pop	{r4, r5, r6, pc}
1a0043d4:	10006080 	.word	0x10006080
1a0043d8:	10006084 	.word	0x10006084

1a0043dc <prvSampleTimeNow>:
{
1a0043dc:	b538      	push	{r3, r4, r5, lr}
1a0043de:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0043e0:	f7ff fb1c 	bl	1a003a1c <xTaskGetTickCount>
1a0043e4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0043e6:	4b07      	ldr	r3, [pc, #28]	; (1a004404 <prvSampleTimeNow+0x28>)
1a0043e8:	681b      	ldr	r3, [r3, #0]
1a0043ea:	4283      	cmp	r3, r0
1a0043ec:	d805      	bhi.n	1a0043fa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0043ee:	2300      	movs	r3, #0
1a0043f0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0043f2:	4b04      	ldr	r3, [pc, #16]	; (1a004404 <prvSampleTimeNow+0x28>)
1a0043f4:	601c      	str	r4, [r3, #0]
}
1a0043f6:	4620      	mov	r0, r4
1a0043f8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0043fa:	f7ff ffb3 	bl	1a004364 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0043fe:	2301      	movs	r3, #1
1a004400:	602b      	str	r3, [r5, #0]
1a004402:	e7f6      	b.n	1a0043f2 <prvSampleTimeNow+0x16>
1a004404:	10006150 	.word	0x10006150

1a004408 <prvProcessExpiredTimer>:
{
1a004408:	b570      	push	{r4, r5, r6, lr}
1a00440a:	b082      	sub	sp, #8
1a00440c:	4605      	mov	r5, r0
1a00440e:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004410:	4b14      	ldr	r3, [pc, #80]	; (1a004464 <prvProcessExpiredTimer+0x5c>)
1a004412:	681b      	ldr	r3, [r3, #0]
1a004414:	68db      	ldr	r3, [r3, #12]
1a004416:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a004418:	1d20      	adds	r0, r4, #4
1a00441a:	f7ff f856 	bl	1a0034ca <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00441e:	69e3      	ldr	r3, [r4, #28]
1a004420:	2b01      	cmp	r3, #1
1a004422:	d004      	beq.n	1a00442e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004424:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004426:	4620      	mov	r0, r4
1a004428:	4798      	blx	r3
}
1a00442a:	b002      	add	sp, #8
1a00442c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00442e:	69a1      	ldr	r1, [r4, #24]
1a004430:	462b      	mov	r3, r5
1a004432:	4632      	mov	r2, r6
1a004434:	4429      	add	r1, r5
1a004436:	4620      	mov	r0, r4
1a004438:	f7ff fe94 	bl	1a004164 <prvInsertTimerInActiveList>
1a00443c:	2800      	cmp	r0, #0
1a00443e:	d0f1      	beq.n	1a004424 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004440:	2100      	movs	r1, #0
1a004442:	9100      	str	r1, [sp, #0]
1a004444:	460b      	mov	r3, r1
1a004446:	462a      	mov	r2, r5
1a004448:	4620      	mov	r0, r4
1a00444a:	f7ff ff55 	bl	1a0042f8 <xTimerGenericCommand>
			configASSERT( xResult );
1a00444e:	2800      	cmp	r0, #0
1a004450:	d1e8      	bne.n	1a004424 <prvProcessExpiredTimer+0x1c>
1a004452:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004456:	f383 8811 	msr	BASEPRI, r3
1a00445a:	f3bf 8f6f 	isb	sy
1a00445e:	f3bf 8f4f 	dsb	sy
1a004462:	e7fe      	b.n	1a004462 <prvProcessExpiredTimer+0x5a>
1a004464:	10006080 	.word	0x10006080

1a004468 <prvProcessTimerOrBlockTask>:
{
1a004468:	b570      	push	{r4, r5, r6, lr}
1a00446a:	b082      	sub	sp, #8
1a00446c:	4606      	mov	r6, r0
1a00446e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a004470:	f7ff facc 	bl	1a003a0c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a004474:	a801      	add	r0, sp, #4
1a004476:	f7ff ffb1 	bl	1a0043dc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00447a:	9b01      	ldr	r3, [sp, #4]
1a00447c:	bb1b      	cbnz	r3, 1a0044c6 <prvProcessTimerOrBlockTask+0x5e>
1a00447e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a004480:	b90c      	cbnz	r4, 1a004486 <prvProcessTimerOrBlockTask+0x1e>
1a004482:	42b0      	cmp	r0, r6
1a004484:	d218      	bcs.n	1a0044b8 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a004486:	b12c      	cbz	r4, 1a004494 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a004488:	4b11      	ldr	r3, [pc, #68]	; (1a0044d0 <prvProcessTimerOrBlockTask+0x68>)
1a00448a:	681b      	ldr	r3, [r3, #0]
1a00448c:	681c      	ldr	r4, [r3, #0]
1a00448e:	fab4 f484 	clz	r4, r4
1a004492:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a004494:	4622      	mov	r2, r4
1a004496:	1b71      	subs	r1, r6, r5
1a004498:	4b0e      	ldr	r3, [pc, #56]	; (1a0044d4 <prvProcessTimerOrBlockTask+0x6c>)
1a00449a:	6818      	ldr	r0, [r3, #0]
1a00449c:	f7fe ffb8 	bl	1a003410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a0044a0:	f7ff fb4e 	bl	1a003b40 <xTaskResumeAll>
1a0044a4:	b988      	cbnz	r0, 1a0044ca <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a0044a6:	4b0c      	ldr	r3, [pc, #48]	; (1a0044d8 <prvProcessTimerOrBlockTask+0x70>)
1a0044a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0044ac:	601a      	str	r2, [r3, #0]
1a0044ae:	f3bf 8f4f 	dsb	sy
1a0044b2:	f3bf 8f6f 	isb	sy
1a0044b6:	e008      	b.n	1a0044ca <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0044b8:	f7ff fb42 	bl	1a003b40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0044bc:	4629      	mov	r1, r5
1a0044be:	4630      	mov	r0, r6
1a0044c0:	f7ff ffa2 	bl	1a004408 <prvProcessExpiredTimer>
1a0044c4:	e001      	b.n	1a0044ca <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0044c6:	f7ff fb3b 	bl	1a003b40 <xTaskResumeAll>
}
1a0044ca:	b002      	add	sp, #8
1a0044cc:	bd70      	pop	{r4, r5, r6, pc}
1a0044ce:	bf00      	nop
1a0044d0:	10006084 	.word	0x10006084
1a0044d4:	100061a4 	.word	0x100061a4
1a0044d8:	e000ed04 	.word	0xe000ed04

1a0044dc <prvProcessReceivedCommands>:
{
1a0044dc:	b530      	push	{r4, r5, lr}
1a0044de:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0044e0:	e002      	b.n	1a0044e8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0044e2:	9b04      	ldr	r3, [sp, #16]
1a0044e4:	2b00      	cmp	r3, #0
1a0044e6:	da0f      	bge.n	1a004508 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0044e8:	2200      	movs	r2, #0
1a0044ea:	a904      	add	r1, sp, #16
1a0044ec:	4b39      	ldr	r3, [pc, #228]	; (1a0045d4 <prvProcessReceivedCommands+0xf8>)
1a0044ee:	6818      	ldr	r0, [r3, #0]
1a0044f0:	f7fe fd98 	bl	1a003024 <xQueueReceive>
1a0044f4:	2800      	cmp	r0, #0
1a0044f6:	d06a      	beq.n	1a0045ce <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0044f8:	9b04      	ldr	r3, [sp, #16]
1a0044fa:	2b00      	cmp	r3, #0
1a0044fc:	daf1      	bge.n	1a0044e2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0044fe:	9907      	ldr	r1, [sp, #28]
1a004500:	9806      	ldr	r0, [sp, #24]
1a004502:	9b05      	ldr	r3, [sp, #20]
1a004504:	4798      	blx	r3
1a004506:	e7ec      	b.n	1a0044e2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a004508:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00450a:	6963      	ldr	r3, [r4, #20]
1a00450c:	b113      	cbz	r3, 1a004514 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00450e:	1d20      	adds	r0, r4, #4
1a004510:	f7fe ffdb 	bl	1a0034ca <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a004514:	a803      	add	r0, sp, #12
1a004516:	f7ff ff61 	bl	1a0043dc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a00451a:	9b04      	ldr	r3, [sp, #16]
1a00451c:	2b09      	cmp	r3, #9
1a00451e:	d8e3      	bhi.n	1a0044e8 <prvProcessReceivedCommands+0xc>
1a004520:	a201      	add	r2, pc, #4	; (adr r2, 1a004528 <prvProcessReceivedCommands+0x4c>)
1a004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a004526:	bf00      	nop
1a004528:	1a004551 	.word	0x1a004551
1a00452c:	1a004551 	.word	0x1a004551
1a004530:	1a004551 	.word	0x1a004551
1a004534:	1a0044e9 	.word	0x1a0044e9
1a004538:	1a004599 	.word	0x1a004599
1a00453c:	1a0045bf 	.word	0x1a0045bf
1a004540:	1a004551 	.word	0x1a004551
1a004544:	1a004551 	.word	0x1a004551
1a004548:	1a0044e9 	.word	0x1a0044e9
1a00454c:	1a004599 	.word	0x1a004599
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a004550:	9905      	ldr	r1, [sp, #20]
1a004552:	69a5      	ldr	r5, [r4, #24]
1a004554:	460b      	mov	r3, r1
1a004556:	4602      	mov	r2, r0
1a004558:	4429      	add	r1, r5
1a00455a:	4620      	mov	r0, r4
1a00455c:	f7ff fe02 	bl	1a004164 <prvInsertTimerInActiveList>
1a004560:	2800      	cmp	r0, #0
1a004562:	d0c1      	beq.n	1a0044e8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004564:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004566:	4620      	mov	r0, r4
1a004568:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00456a:	69e3      	ldr	r3, [r4, #28]
1a00456c:	2b01      	cmp	r3, #1
1a00456e:	d1bb      	bne.n	1a0044e8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a004570:	69a2      	ldr	r2, [r4, #24]
1a004572:	2100      	movs	r1, #0
1a004574:	9100      	str	r1, [sp, #0]
1a004576:	460b      	mov	r3, r1
1a004578:	9805      	ldr	r0, [sp, #20]
1a00457a:	4402      	add	r2, r0
1a00457c:	4620      	mov	r0, r4
1a00457e:	f7ff febb 	bl	1a0042f8 <xTimerGenericCommand>
							configASSERT( xResult );
1a004582:	2800      	cmp	r0, #0
1a004584:	d1b0      	bne.n	1a0044e8 <prvProcessReceivedCommands+0xc>
1a004586:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00458a:	f383 8811 	msr	BASEPRI, r3
1a00458e:	f3bf 8f6f 	isb	sy
1a004592:	f3bf 8f4f 	dsb	sy
1a004596:	e7fe      	b.n	1a004596 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a004598:	9905      	ldr	r1, [sp, #20]
1a00459a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00459c:	b131      	cbz	r1, 1a0045ac <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00459e:	4603      	mov	r3, r0
1a0045a0:	4602      	mov	r2, r0
1a0045a2:	4401      	add	r1, r0
1a0045a4:	4620      	mov	r0, r4
1a0045a6:	f7ff fddd 	bl	1a004164 <prvInsertTimerInActiveList>
					break;
1a0045aa:	e79d      	b.n	1a0044e8 <prvProcessReceivedCommands+0xc>
1a0045ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0045b0:	f383 8811 	msr	BASEPRI, r3
1a0045b4:	f3bf 8f6f 	isb	sy
1a0045b8:	f3bf 8f4f 	dsb	sy
1a0045bc:	e7fe      	b.n	1a0045bc <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a0045be:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a0045c2:	2b00      	cmp	r3, #0
1a0045c4:	d190      	bne.n	1a0044e8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a0045c6:	4620      	mov	r0, r4
1a0045c8:	f7fe fa7a 	bl	1a002ac0 <vPortFree>
1a0045cc:	e78c      	b.n	1a0044e8 <prvProcessReceivedCommands+0xc>
}
1a0045ce:	b009      	add	sp, #36	; 0x24
1a0045d0:	bd30      	pop	{r4, r5, pc}
1a0045d2:	bf00      	nop
1a0045d4:	100061a4 	.word	0x100061a4

1a0045d8 <prvTimerTask>:
{
1a0045d8:	b500      	push	{lr}
1a0045da:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0045dc:	a801      	add	r0, sp, #4
1a0045de:	f7ff fdb1 	bl	1a004144 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0045e2:	9901      	ldr	r1, [sp, #4]
1a0045e4:	f7ff ff40 	bl	1a004468 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0045e8:	f7ff ff78 	bl	1a0044dc <prvProcessReceivedCommands>
1a0045ec:	e7f6      	b.n	1a0045dc <prvTimerTask+0x4>

1a0045ee <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
1a0045ee:	b940      	cbnz	r0, 1a004602 <pvTimerGetTimerID+0x14>
1a0045f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0045f4:	f383 8811 	msr	BASEPRI, r3
1a0045f8:	f3bf 8f6f 	isb	sy
1a0045fc:	f3bf 8f4f 	dsb	sy
1a004600:	e7fe      	b.n	1a004600 <pvTimerGetTimerID+0x12>
{
1a004602:	b510      	push	{r4, lr}
1a004604:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
1a004606:	f000 f86d 	bl	1a0046e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
1a00460a:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
1a00460c:	f000 f88c 	bl	1a004728 <vPortExitCritical>

	return pvReturn;
}
1a004610:	4620      	mov	r0, r4
1a004612:	bd10      	pop	{r4, pc}

1a004614 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a004614:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a004616:	2300      	movs	r3, #0
1a004618:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00461a:	4b0d      	ldr	r3, [pc, #52]	; (1a004650 <prvTaskExitError+0x3c>)
1a00461c:	681b      	ldr	r3, [r3, #0]
1a00461e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a004622:	d008      	beq.n	1a004636 <prvTaskExitError+0x22>
1a004624:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004628:	f383 8811 	msr	BASEPRI, r3
1a00462c:	f3bf 8f6f 	isb	sy
1a004630:	f3bf 8f4f 	dsb	sy
1a004634:	e7fe      	b.n	1a004634 <prvTaskExitError+0x20>
1a004636:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00463a:	f383 8811 	msr	BASEPRI, r3
1a00463e:	f3bf 8f6f 	isb	sy
1a004642:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a004646:	9b01      	ldr	r3, [sp, #4]
1a004648:	2b00      	cmp	r3, #0
1a00464a:	d0fc      	beq.n	1a004646 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a00464c:	b002      	add	sp, #8
1a00464e:	4770      	bx	lr
1a004650:	10001c28 	.word	0x10001c28

1a004654 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a004654:	4808      	ldr	r0, [pc, #32]	; (1a004678 <prvPortStartFirstTask+0x24>)
1a004656:	6800      	ldr	r0, [r0, #0]
1a004658:	6800      	ldr	r0, [r0, #0]
1a00465a:	f380 8808 	msr	MSP, r0
1a00465e:	f04f 0000 	mov.w	r0, #0
1a004662:	f380 8814 	msr	CONTROL, r0
1a004666:	b662      	cpsie	i
1a004668:	b661      	cpsie	f
1a00466a:	f3bf 8f4f 	dsb	sy
1a00466e:	f3bf 8f6f 	isb	sy
1a004672:	df00      	svc	0
1a004674:	bf00      	nop
1a004676:	0000      	.short	0x0000
1a004678:	e000ed08 	.word	0xe000ed08

1a00467c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a00467c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a00468c <vPortEnableVFP+0x10>
1a004680:	6801      	ldr	r1, [r0, #0]
1a004682:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004686:	6001      	str	r1, [r0, #0]
1a004688:	4770      	bx	lr
1a00468a:	0000      	.short	0x0000
1a00468c:	e000ed88 	.word	0xe000ed88

1a004690 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a004690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a004694:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a004698:	f021 0101 	bic.w	r1, r1, #1
1a00469c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0046a0:	4b05      	ldr	r3, [pc, #20]	; (1a0046b8 <pxPortInitialiseStack+0x28>)
1a0046a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0046a6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0046aa:	f06f 0302 	mvn.w	r3, #2
1a0046ae:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0046b2:	3844      	subs	r0, #68	; 0x44
1a0046b4:	4770      	bx	lr
1a0046b6:	bf00      	nop
1a0046b8:	1a004615 	.word	0x1a004615
1a0046bc:	ffffffff 	.word	0xffffffff

1a0046c0 <SVC_Handler>:
	__asm volatile (
1a0046c0:	4b07      	ldr	r3, [pc, #28]	; (1a0046e0 <pxCurrentTCBConst2>)
1a0046c2:	6819      	ldr	r1, [r3, #0]
1a0046c4:	6808      	ldr	r0, [r1, #0]
1a0046c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0046ca:	f380 8809 	msr	PSP, r0
1a0046ce:	f3bf 8f6f 	isb	sy
1a0046d2:	f04f 0000 	mov.w	r0, #0
1a0046d6:	f380 8811 	msr	BASEPRI, r0
1a0046da:	4770      	bx	lr
1a0046dc:	f3af 8000 	nop.w

1a0046e0 <pxCurrentTCBConst2>:
1a0046e0:	10005f58 	.word	0x10005f58

1a0046e4 <vPortEnterCritical>:
1a0046e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0046e8:	f383 8811 	msr	BASEPRI, r3
1a0046ec:	f3bf 8f6f 	isb	sy
1a0046f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0046f4:	4a0a      	ldr	r2, [pc, #40]	; (1a004720 <vPortEnterCritical+0x3c>)
1a0046f6:	6813      	ldr	r3, [r2, #0]
1a0046f8:	3301      	adds	r3, #1
1a0046fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0046fc:	2b01      	cmp	r3, #1
1a0046fe:	d000      	beq.n	1a004702 <vPortEnterCritical+0x1e>
}
1a004700:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a004702:	4b08      	ldr	r3, [pc, #32]	; (1a004724 <vPortEnterCritical+0x40>)
1a004704:	681b      	ldr	r3, [r3, #0]
1a004706:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00470a:	d0f9      	beq.n	1a004700 <vPortEnterCritical+0x1c>
1a00470c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004710:	f383 8811 	msr	BASEPRI, r3
1a004714:	f3bf 8f6f 	isb	sy
1a004718:	f3bf 8f4f 	dsb	sy
1a00471c:	e7fe      	b.n	1a00471c <vPortEnterCritical+0x38>
1a00471e:	bf00      	nop
1a004720:	10001c28 	.word	0x10001c28
1a004724:	e000ed04 	.word	0xe000ed04

1a004728 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a004728:	4b09      	ldr	r3, [pc, #36]	; (1a004750 <vPortExitCritical+0x28>)
1a00472a:	681b      	ldr	r3, [r3, #0]
1a00472c:	b943      	cbnz	r3, 1a004740 <vPortExitCritical+0x18>
1a00472e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004732:	f383 8811 	msr	BASEPRI, r3
1a004736:	f3bf 8f6f 	isb	sy
1a00473a:	f3bf 8f4f 	dsb	sy
1a00473e:	e7fe      	b.n	1a00473e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a004740:	3b01      	subs	r3, #1
1a004742:	4a03      	ldr	r2, [pc, #12]	; (1a004750 <vPortExitCritical+0x28>)
1a004744:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a004746:	b90b      	cbnz	r3, 1a00474c <vPortExitCritical+0x24>
	__asm volatile
1a004748:	f383 8811 	msr	BASEPRI, r3
}
1a00474c:	4770      	bx	lr
1a00474e:	bf00      	nop
1a004750:	10001c28 	.word	0x10001c28
1a004754:	ffffffff 	.word	0xffffffff
1a004758:	ffffffff 	.word	0xffffffff
1a00475c:	ffffffff 	.word	0xffffffff

1a004760 <PendSV_Handler>:
	__asm volatile
1a004760:	f3ef 8009 	mrs	r0, PSP
1a004764:	f3bf 8f6f 	isb	sy
1a004768:	4b15      	ldr	r3, [pc, #84]	; (1a0047c0 <pxCurrentTCBConst>)
1a00476a:	681a      	ldr	r2, [r3, #0]
1a00476c:	f01e 0f10 	tst.w	lr, #16
1a004770:	bf08      	it	eq
1a004772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a004776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00477a:	6010      	str	r0, [r2, #0]
1a00477c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a004780:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a004784:	f380 8811 	msr	BASEPRI, r0
1a004788:	f3bf 8f4f 	dsb	sy
1a00478c:	f3bf 8f6f 	isb	sy
1a004790:	f7ff fa76 	bl	1a003c80 <vTaskSwitchContext>
1a004794:	f04f 0000 	mov.w	r0, #0
1a004798:	f380 8811 	msr	BASEPRI, r0
1a00479c:	bc09      	pop	{r0, r3}
1a00479e:	6819      	ldr	r1, [r3, #0]
1a0047a0:	6808      	ldr	r0, [r1, #0]
1a0047a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0047a6:	f01e 0f10 	tst.w	lr, #16
1a0047aa:	bf08      	it	eq
1a0047ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0047b0:	f380 8809 	msr	PSP, r0
1a0047b4:	f3bf 8f6f 	isb	sy
1a0047b8:	4770      	bx	lr
1a0047ba:	bf00      	nop
1a0047bc:	f3af 8000 	nop.w

1a0047c0 <pxCurrentTCBConst>:
1a0047c0:	10005f58 	.word	0x10005f58

1a0047c4 <SysTick_Handler>:
{
1a0047c4:	b508      	push	{r3, lr}
	__asm volatile
1a0047c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0047ca:	f383 8811 	msr	BASEPRI, r3
1a0047ce:	f3bf 8f6f 	isb	sy
1a0047d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a0047d6:	f7ff f927 	bl	1a003a28 <xTaskIncrementTick>
1a0047da:	b118      	cbz	r0, 1a0047e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a0047dc:	4b03      	ldr	r3, [pc, #12]	; (1a0047ec <SysTick_Handler+0x28>)
1a0047de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0047e2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0047e4:	2300      	movs	r3, #0
1a0047e6:	f383 8811 	msr	BASEPRI, r3
}
1a0047ea:	bd08      	pop	{r3, pc}
1a0047ec:	e000ed04 	.word	0xe000ed04

1a0047f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0047f0:	4a08      	ldr	r2, [pc, #32]	; (1a004814 <vPortSetupTimerInterrupt+0x24>)
1a0047f2:	2300      	movs	r3, #0
1a0047f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0047f6:	4908      	ldr	r1, [pc, #32]	; (1a004818 <vPortSetupTimerInterrupt+0x28>)
1a0047f8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0047fa:	4b08      	ldr	r3, [pc, #32]	; (1a00481c <vPortSetupTimerInterrupt+0x2c>)
1a0047fc:	681b      	ldr	r3, [r3, #0]
1a0047fe:	4908      	ldr	r1, [pc, #32]	; (1a004820 <vPortSetupTimerInterrupt+0x30>)
1a004800:	fba1 1303 	umull	r1, r3, r1, r3
1a004804:	099b      	lsrs	r3, r3, #6
1a004806:	3b01      	subs	r3, #1
1a004808:	4906      	ldr	r1, [pc, #24]	; (1a004824 <vPortSetupTimerInterrupt+0x34>)
1a00480a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00480c:	2307      	movs	r3, #7
1a00480e:	6013      	str	r3, [r2, #0]
}
1a004810:	4770      	bx	lr
1a004812:	bf00      	nop
1a004814:	e000e010 	.word	0xe000e010
1a004818:	e000e018 	.word	0xe000e018
1a00481c:	100065c0 	.word	0x100065c0
1a004820:	10624dd3 	.word	0x10624dd3
1a004824:	e000e014 	.word	0xe000e014

1a004828 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a004828:	4b3a      	ldr	r3, [pc, #232]	; (1a004914 <xPortStartScheduler+0xec>)
1a00482a:	681a      	ldr	r2, [r3, #0]
1a00482c:	4b3a      	ldr	r3, [pc, #232]	; (1a004918 <xPortStartScheduler+0xf0>)
1a00482e:	429a      	cmp	r2, r3
1a004830:	d00d      	beq.n	1a00484e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a004832:	4b38      	ldr	r3, [pc, #224]	; (1a004914 <xPortStartScheduler+0xec>)
1a004834:	681a      	ldr	r2, [r3, #0]
1a004836:	4b39      	ldr	r3, [pc, #228]	; (1a00491c <xPortStartScheduler+0xf4>)
1a004838:	429a      	cmp	r2, r3
1a00483a:	d111      	bne.n	1a004860 <xPortStartScheduler+0x38>
	__asm volatile
1a00483c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004840:	f383 8811 	msr	BASEPRI, r3
1a004844:	f3bf 8f6f 	isb	sy
1a004848:	f3bf 8f4f 	dsb	sy
1a00484c:	e7fe      	b.n	1a00484c <xPortStartScheduler+0x24>
1a00484e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004852:	f383 8811 	msr	BASEPRI, r3
1a004856:	f3bf 8f6f 	isb	sy
1a00485a:	f3bf 8f4f 	dsb	sy
1a00485e:	e7fe      	b.n	1a00485e <xPortStartScheduler+0x36>
{
1a004860:	b510      	push	{r4, lr}
1a004862:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a004864:	4b2e      	ldr	r3, [pc, #184]	; (1a004920 <xPortStartScheduler+0xf8>)
1a004866:	781a      	ldrb	r2, [r3, #0]
1a004868:	b2d2      	uxtb	r2, r2
1a00486a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00486c:	22ff      	movs	r2, #255	; 0xff
1a00486e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a004870:	781b      	ldrb	r3, [r3, #0]
1a004872:	b2db      	uxtb	r3, r3
1a004874:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a004878:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00487c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a004880:	4a28      	ldr	r2, [pc, #160]	; (1a004924 <xPortStartScheduler+0xfc>)
1a004882:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a004884:	4b28      	ldr	r3, [pc, #160]	; (1a004928 <xPortStartScheduler+0x100>)
1a004886:	2207      	movs	r2, #7
1a004888:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00488a:	e009      	b.n	1a0048a0 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00488c:	4a26      	ldr	r2, [pc, #152]	; (1a004928 <xPortStartScheduler+0x100>)
1a00488e:	6813      	ldr	r3, [r2, #0]
1a004890:	3b01      	subs	r3, #1
1a004892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a004894:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004898:	005b      	lsls	r3, r3, #1
1a00489a:	b2db      	uxtb	r3, r3
1a00489c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0048a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0048a4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0048a8:	d1f0      	bne.n	1a00488c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0048aa:	4b1f      	ldr	r3, [pc, #124]	; (1a004928 <xPortStartScheduler+0x100>)
1a0048ac:	681b      	ldr	r3, [r3, #0]
1a0048ae:	2b04      	cmp	r3, #4
1a0048b0:	d008      	beq.n	1a0048c4 <xPortStartScheduler+0x9c>
1a0048b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0048b6:	f383 8811 	msr	BASEPRI, r3
1a0048ba:	f3bf 8f6f 	isb	sy
1a0048be:	f3bf 8f4f 	dsb	sy
1a0048c2:	e7fe      	b.n	1a0048c2 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a0048c4:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a0048c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0048ca:	4a17      	ldr	r2, [pc, #92]	; (1a004928 <xPortStartScheduler+0x100>)
1a0048cc:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a0048ce:	9b01      	ldr	r3, [sp, #4]
1a0048d0:	b2db      	uxtb	r3, r3
1a0048d2:	4a13      	ldr	r2, [pc, #76]	; (1a004920 <xPortStartScheduler+0xf8>)
1a0048d4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a0048d6:	4b15      	ldr	r3, [pc, #84]	; (1a00492c <xPortStartScheduler+0x104>)
1a0048d8:	681a      	ldr	r2, [r3, #0]
1a0048da:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a0048de:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0048e0:	681a      	ldr	r2, [r3, #0]
1a0048e2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0048e6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0048e8:	f7ff ff82 	bl	1a0047f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0048ec:	2400      	movs	r4, #0
1a0048ee:	4b10      	ldr	r3, [pc, #64]	; (1a004930 <xPortStartScheduler+0x108>)
1a0048f0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0048f2:	f7ff fec3 	bl	1a00467c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0048f6:	4a0f      	ldr	r2, [pc, #60]	; (1a004934 <xPortStartScheduler+0x10c>)
1a0048f8:	6813      	ldr	r3, [r2, #0]
1a0048fa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0048fe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a004900:	f7ff fea8 	bl	1a004654 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a004904:	f7ff f9bc 	bl	1a003c80 <vTaskSwitchContext>
	prvTaskExitError();
1a004908:	f7ff fe84 	bl	1a004614 <prvTaskExitError>
}
1a00490c:	4620      	mov	r0, r4
1a00490e:	b002      	add	sp, #8
1a004910:	bd10      	pop	{r4, pc}
1a004912:	bf00      	nop
1a004914:	e000ed00 	.word	0xe000ed00
1a004918:	410fc271 	.word	0x410fc271
1a00491c:	410fc270 	.word	0x410fc270
1a004920:	e000e400 	.word	0xe000e400
1a004924:	100061ac 	.word	0x100061ac
1a004928:	100061b0 	.word	0x100061b0
1a00492c:	e000ed20 	.word	0xe000ed20
1a004930:	10001c28 	.word	0x10001c28
1a004934:	e000ef34 	.word	0xe000ef34

1a004938 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a004938:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00493c:	2b0f      	cmp	r3, #15
1a00493e:	d90f      	bls.n	1a004960 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a004940:	4a10      	ldr	r2, [pc, #64]	; (1a004984 <vPortValidateInterruptPriority+0x4c>)
1a004942:	5c9b      	ldrb	r3, [r3, r2]
1a004944:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a004946:	4a10      	ldr	r2, [pc, #64]	; (1a004988 <vPortValidateInterruptPriority+0x50>)
1a004948:	7812      	ldrb	r2, [r2, #0]
1a00494a:	429a      	cmp	r2, r3
1a00494c:	d908      	bls.n	1a004960 <vPortValidateInterruptPriority+0x28>
1a00494e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004952:	f383 8811 	msr	BASEPRI, r3
1a004956:	f3bf 8f6f 	isb	sy
1a00495a:	f3bf 8f4f 	dsb	sy
1a00495e:	e7fe      	b.n	1a00495e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a004960:	4b0a      	ldr	r3, [pc, #40]	; (1a00498c <vPortValidateInterruptPriority+0x54>)
1a004962:	681b      	ldr	r3, [r3, #0]
1a004964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a004968:	4a09      	ldr	r2, [pc, #36]	; (1a004990 <vPortValidateInterruptPriority+0x58>)
1a00496a:	6812      	ldr	r2, [r2, #0]
1a00496c:	4293      	cmp	r3, r2
1a00496e:	d908      	bls.n	1a004982 <vPortValidateInterruptPriority+0x4a>
1a004970:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004974:	f383 8811 	msr	BASEPRI, r3
1a004978:	f3bf 8f6f 	isb	sy
1a00497c:	f3bf 8f4f 	dsb	sy
1a004980:	e7fe      	b.n	1a004980 <vPortValidateInterruptPriority+0x48>
	}
1a004982:	4770      	bx	lr
1a004984:	e000e3f0 	.word	0xe000e3f0
1a004988:	100061ac 	.word	0x100061ac
1a00498c:	e000ed0c 	.word	0xe000ed0c
1a004990:	100061b0 	.word	0x100061b0

1a004994 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a004994:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a004996:	4b05      	ldr	r3, [pc, #20]	; (1a0049ac <DAC_IRQHandler+0x18>)
1a004998:	2201      	movs	r2, #1
1a00499a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00499e:	4b04      	ldr	r3, [pc, #16]	; (1a0049b0 <DAC_IRQHandler+0x1c>)
1a0049a0:	681b      	ldr	r3, [r3, #0]
1a0049a2:	b113      	cbz	r3, 1a0049aa <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0049a4:	4b02      	ldr	r3, [pc, #8]	; (1a0049b0 <DAC_IRQHandler+0x1c>)
1a0049a6:	681b      	ldr	r3, [r3, #0]
1a0049a8:	4798      	blx	r3
   }
}
1a0049aa:	bd08      	pop	{r3, pc}
1a0049ac:	e000e100 	.word	0xe000e100
1a0049b0:	100061b4 	.word	0x100061b4

1a0049b4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0049b4:	2200      	movs	r2, #0
1a0049b6:	2a05      	cmp	r2, #5
1a0049b8:	d819      	bhi.n	1a0049ee <Board_LED_Init+0x3a>
{
1a0049ba:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0049bc:	490c      	ldr	r1, [pc, #48]	; (1a0049f0 <Board_LED_Init+0x3c>)
1a0049be:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a0049c2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a0049c6:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0049c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0049f4 <Board_LED_Init+0x40>)
1a0049ca:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a0049ce:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0049d2:	2001      	movs	r0, #1
1a0049d4:	40a0      	lsls	r0, r4
1a0049d6:	4301      	orrs	r1, r0
1a0049d8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0049dc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0049e0:	2100      	movs	r1, #0
1a0049e2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0049e4:	3201      	adds	r2, #1
1a0049e6:	2a05      	cmp	r2, #5
1a0049e8:	d9e8      	bls.n	1a0049bc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0049ea:	bc70      	pop	{r4, r5, r6}
1a0049ec:	4770      	bx	lr
1a0049ee:	4770      	bx	lr
1a0049f0:	1a007a14 	.word	0x1a007a14
1a0049f4:	400f4000 	.word	0x400f4000

1a0049f8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0049f8:	2300      	movs	r3, #0
1a0049fa:	2b03      	cmp	r3, #3
1a0049fc:	d816      	bhi.n	1a004a2c <Board_TEC_Init+0x34>
{
1a0049fe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a004a00:	490b      	ldr	r1, [pc, #44]	; (1a004a30 <Board_TEC_Init+0x38>)
1a004a02:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a004a06:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a004a0a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a004a0c:	4c09      	ldr	r4, [pc, #36]	; (1a004a34 <Board_TEC_Init+0x3c>)
1a004a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004a12:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a004a16:	2001      	movs	r0, #1
1a004a18:	40a8      	lsls	r0, r5
1a004a1a:	ea21 0100 	bic.w	r1, r1, r0
1a004a1e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a004a22:	3301      	adds	r3, #1
1a004a24:	2b03      	cmp	r3, #3
1a004a26:	d9eb      	bls.n	1a004a00 <Board_TEC_Init+0x8>
   }
}
1a004a28:	bc30      	pop	{r4, r5}
1a004a2a:	4770      	bx	lr
1a004a2c:	4770      	bx	lr
1a004a2e:	bf00      	nop
1a004a30:	1a007a0c 	.word	0x1a007a0c
1a004a34:	400f4000 	.word	0x400f4000

1a004a38 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a004a38:	2300      	movs	r3, #0
1a004a3a:	2b08      	cmp	r3, #8
1a004a3c:	d816      	bhi.n	1a004a6c <Board_GPIO_Init+0x34>
{
1a004a3e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a004a40:	490b      	ldr	r1, [pc, #44]	; (1a004a70 <Board_GPIO_Init+0x38>)
1a004a42:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a004a46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a004a4a:	784d      	ldrb	r5, [r1, #1]
1a004a4c:	4c09      	ldr	r4, [pc, #36]	; (1a004a74 <Board_GPIO_Init+0x3c>)
1a004a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a004a52:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a004a56:	2001      	movs	r0, #1
1a004a58:	40a8      	lsls	r0, r5
1a004a5a:	ea21 0100 	bic.w	r1, r1, r0
1a004a5e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a004a62:	3301      	adds	r3, #1
1a004a64:	2b08      	cmp	r3, #8
1a004a66:	d9eb      	bls.n	1a004a40 <Board_GPIO_Init+0x8>
   }
}
1a004a68:	bc30      	pop	{r4, r5}
1a004a6a:	4770      	bx	lr
1a004a6c:	4770      	bx	lr
1a004a6e:	bf00      	nop
1a004a70:	1a007a20 	.word	0x1a007a20
1a004a74:	400f4000 	.word	0x400f4000

1a004a78 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a004a78:	b510      	push	{r4, lr}
1a004a7a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a004a7c:	4c08      	ldr	r4, [pc, #32]	; (1a004aa0 <Board_ADC_Init+0x28>)
1a004a7e:	4669      	mov	r1, sp
1a004a80:	4620      	mov	r0, r4
1a004a82:	f000 fa1d 	bl	1a004ec0 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a004a86:	4a07      	ldr	r2, [pc, #28]	; (1a004aa4 <Board_ADC_Init+0x2c>)
1a004a88:	4669      	mov	r1, sp
1a004a8a:	4620      	mov	r0, r4
1a004a8c:	f000 fa38 	bl	1a004f00 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a004a90:	2200      	movs	r2, #0
1a004a92:	4669      	mov	r1, sp
1a004a94:	4620      	mov	r0, r4
1a004a96:	f000 fa4c 	bl	1a004f32 <Chip_ADC_SetResolution>
}
1a004a9a:	b002      	add	sp, #8
1a004a9c:	bd10      	pop	{r4, pc}
1a004a9e:	bf00      	nop
1a004aa0:	400e3000 	.word	0x400e3000
1a004aa4:	00061a80 	.word	0x00061a80

1a004aa8 <Board_SPI_Init>:
{
1a004aa8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a004aaa:	4c0b      	ldr	r4, [pc, #44]	; (1a004ad8 <Board_SPI_Init+0x30>)
1a004aac:	4620      	mov	r0, r4
1a004aae:	f000 fe25 	bl	1a0056fc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a004ab2:	6863      	ldr	r3, [r4, #4]
1a004ab4:	f023 0304 	bic.w	r3, r3, #4
1a004ab8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a004aba:	6823      	ldr	r3, [r4, #0]
1a004abc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a004ac0:	f043 0307 	orr.w	r3, r3, #7
1a004ac4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a004ac6:	4905      	ldr	r1, [pc, #20]	; (1a004adc <Board_SPI_Init+0x34>)
1a004ac8:	4620      	mov	r0, r4
1a004aca:	f000 fdf8 	bl	1a0056be <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a004ace:	6863      	ldr	r3, [r4, #4]
1a004ad0:	f043 0302 	orr.w	r3, r3, #2
1a004ad4:	6063      	str	r3, [r4, #4]
}
1a004ad6:	bd10      	pop	{r4, pc}
1a004ad8:	400c5000 	.word	0x400c5000
1a004adc:	000186a0 	.word	0x000186a0

1a004ae0 <Board_I2C_Init>:
{
1a004ae0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a004ae2:	2000      	movs	r0, #0
1a004ae4:	f000 f8c6 	bl	1a004c74 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a004ae8:	4b04      	ldr	r3, [pc, #16]	; (1a004afc <Board_I2C_Init+0x1c>)
1a004aea:	f640 0208 	movw	r2, #2056	; 0x808
1a004aee:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a004af2:	4903      	ldr	r1, [pc, #12]	; (1a004b00 <Board_I2C_Init+0x20>)
1a004af4:	2000      	movs	r0, #0
1a004af6:	f000 f8cf 	bl	1a004c98 <Chip_I2C_SetClockRate>
}
1a004afa:	bd08      	pop	{r3, pc}
1a004afc:	40086000 	.word	0x40086000
1a004b00:	000f4240 	.word	0x000f4240

1a004b04 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a004b04:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a004b06:	4c07      	ldr	r4, [pc, #28]	; (1a004b24 <Board_Debug_Init+0x20>)
1a004b08:	4620      	mov	r0, r4
1a004b0a:	f000 f8f7 	bl	1a004cfc <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a004b0e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a004b12:	4620      	mov	r0, r4
1a004b14:	f000 f93c 	bl	1a004d90 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a004b18:	2303      	movs	r3, #3
1a004b1a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a004b1c:	2301      	movs	r3, #1
1a004b1e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a004b20:	bd10      	pop	{r4, pc}
1a004b22:	bf00      	nop
1a004b24:	400c1000 	.word	0x400c1000

1a004b28 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a004b28:	4b03      	ldr	r3, [pc, #12]	; (1a004b38 <Board_UARTPutChar+0x10>)
1a004b2a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a004b2c:	f013 0f20 	tst.w	r3, #32
1a004b30:	d0fa      	beq.n	1a004b28 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a004b32:	4b01      	ldr	r3, [pc, #4]	; (1a004b38 <Board_UARTPutChar+0x10>)
1a004b34:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a004b36:	4770      	bx	lr
1a004b38:	400c1000 	.word	0x400c1000

1a004b3c <Board_UARTGetChar>:
	return pUART->LSR;
1a004b3c:	4b05      	ldr	r3, [pc, #20]	; (1a004b54 <Board_UARTGetChar+0x18>)
1a004b3e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a004b40:	f013 0f01 	tst.w	r3, #1
1a004b44:	d003      	beq.n	1a004b4e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a004b46:	4b03      	ldr	r3, [pc, #12]	; (1a004b54 <Board_UARTGetChar+0x18>)
1a004b48:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a004b4a:	b2c0      	uxtb	r0, r0
1a004b4c:	4770      	bx	lr
   }
   return EOF;
1a004b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a004b52:	4770      	bx	lr
1a004b54:	400c1000 	.word	0x400c1000

1a004b58 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a004b58:	b508      	push	{r3, lr}
   DEBUGINIT();
1a004b5a:	f7ff ffd3 	bl	1a004b04 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a004b5e:	4809      	ldr	r0, [pc, #36]	; (1a004b84 <Board_Init+0x2c>)
1a004b60:	f000 fd8c 	bl	1a00567c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a004b64:	f7ff ff68 	bl	1a004a38 <Board_GPIO_Init>
   Board_ADC_Init();
1a004b68:	f7ff ff86 	bl	1a004a78 <Board_ADC_Init>
   Board_SPI_Init();
1a004b6c:	f7ff ff9c 	bl	1a004aa8 <Board_SPI_Init>
   Board_I2C_Init();
1a004b70:	f7ff ffb6 	bl	1a004ae0 <Board_I2C_Init>

   Board_LED_Init();
1a004b74:	f7ff ff1e 	bl	1a0049b4 <Board_LED_Init>
   Board_TEC_Init();
1a004b78:	f7ff ff3e 	bl	1a0049f8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a004b7c:	f000 fca8 	bl	1a0054d0 <SystemCoreClockUpdate>
}
1a004b80:	bd08      	pop	{r3, pc}
1a004b82:	bf00      	nop
1a004b84:	400f4000 	.word	0x400f4000

1a004b88 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a004b88:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a004b8a:	b2c0      	uxtb	r0, r0
1a004b8c:	f7ff ffcc 	bl	1a004b28 <Board_UARTPutChar>
}
1a004b90:	bd08      	pop	{r3, pc}

1a004b92 <__stdio_getchar>:

int __stdio_getchar()
{
1a004b92:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a004b94:	f7ff ffd2 	bl	1a004b3c <Board_UARTGetChar>
}
1a004b98:	bd08      	pop	{r3, pc}

1a004b9a <__stdio_init>:

void __stdio_init()
{
1a004b9a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a004b9c:	f7ff ffb2 	bl	1a004b04 <Board_Debug_Init>
1a004ba0:	bd08      	pop	{r3, pc}
1a004ba2:	Address 0x000000001a004ba2 is out of bounds.


1a004ba4 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a004ba4:	2300      	movs	r3, #0
1a004ba6:	2b1c      	cmp	r3, #28
1a004ba8:	d812      	bhi.n	1a004bd0 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a004baa:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a004bac:	4a09      	ldr	r2, [pc, #36]	; (1a004bd4 <Board_SetupMuxing+0x30>)
1a004bae:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a004bb2:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a004bb6:	784a      	ldrb	r2, [r1, #1]
1a004bb8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a004bba:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a004bbe:	4906      	ldr	r1, [pc, #24]	; (1a004bd8 <Board_SetupMuxing+0x34>)
1a004bc0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a004bc4:	3301      	adds	r3, #1
1a004bc6:	2b1c      	cmp	r3, #28
1a004bc8:	d9f0      	bls.n	1a004bac <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a004bca:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004bce:	4770      	bx	lr
1a004bd0:	4770      	bx	lr
1a004bd2:	bf00      	nop
1a004bd4:	1a007a3c 	.word	0x1a007a3c
1a004bd8:	40086000 	.word	0x40086000

1a004bdc <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a004bdc:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a004bde:	4a17      	ldr	r2, [pc, #92]	; (1a004c3c <Board_SetupClocking+0x60>)
1a004be0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a004be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a004be8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a004bec:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a004bf0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a004bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a004bf8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a004bfc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a004c00:	2201      	movs	r2, #1
1a004c02:	490f      	ldr	r1, [pc, #60]	; (1a004c40 <Board_SetupClocking+0x64>)
1a004c04:	2006      	movs	r0, #6
1a004c06:	f000 fc6d 	bl	1a0054e4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a004c0a:	2400      	movs	r4, #0
1a004c0c:	b14c      	cbz	r4, 1a004c22 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a004c0e:	4b0b      	ldr	r3, [pc, #44]	; (1a004c3c <Board_SetupClocking+0x60>)
1a004c10:	685a      	ldr	r2, [r3, #4]
1a004c12:	f022 020c 	bic.w	r2, r2, #12
1a004c16:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a004c18:	685a      	ldr	r2, [r3, #4]
1a004c1a:	f042 0203 	orr.w	r2, r2, #3
1a004c1e:	605a      	str	r2, [r3, #4]
}
1a004c20:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a004c22:	4808      	ldr	r0, [pc, #32]	; (1a004c44 <Board_SetupClocking+0x68>)
1a004c24:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a004c28:	2301      	movs	r3, #1
1a004c2a:	788a      	ldrb	r2, [r1, #2]
1a004c2c:	7849      	ldrb	r1, [r1, #1]
1a004c2e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a004c32:	f000 fba9 	bl	1a005388 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a004c36:	3401      	adds	r4, #1
1a004c38:	e7e8      	b.n	1a004c0c <Board_SetupClocking+0x30>
1a004c3a:	bf00      	nop
1a004c3c:	40043000 	.word	0x40043000
1a004c40:	0c28cb00 	.word	0x0c28cb00
1a004c44:	1a007a38 	.word	0x1a007a38

1a004c48 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a004c48:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a004c4a:	f7ff ffab 	bl	1a004ba4 <Board_SetupMuxing>
    Board_SetupClocking();
1a004c4e:	f7ff ffc5 	bl	1a004bdc <Board_SetupClocking>
}
1a004c52:	bd08      	pop	{r3, pc}

1a004c54 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a004c54:	2901      	cmp	r1, #1
1a004c56:	d000      	beq.n	1a004c5a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a004c58:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a004c5a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a004c5e:	0082      	lsls	r2, r0, #2
1a004c60:	4b03      	ldr	r3, [pc, #12]	; (1a004c70 <Chip_I2C_EventHandler+0x1c>)
1a004c62:	4413      	add	r3, r2
1a004c64:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a004c66:	7d13      	ldrb	r3, [r2, #20]
1a004c68:	b2db      	uxtb	r3, r3
1a004c6a:	2b04      	cmp	r3, #4
1a004c6c:	d0fb      	beq.n	1a004c66 <Chip_I2C_EventHandler+0x12>
1a004c6e:	e7f3      	b.n	1a004c58 <Chip_I2C_EventHandler+0x4>
1a004c70:	10001c2c 	.word	0x10001c2c

1a004c74 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a004c74:	b570      	push	{r4, r5, r6, lr}
1a004c76:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a004c78:	4e06      	ldr	r6, [pc, #24]	; (1a004c94 <Chip_I2C_Init+0x20>)
1a004c7a:	00c4      	lsls	r4, r0, #3
1a004c7c:	1a22      	subs	r2, r4, r0
1a004c7e:	0093      	lsls	r3, r2, #2
1a004c80:	4433      	add	r3, r6
1a004c82:	8898      	ldrh	r0, [r3, #4]
1a004c84:	f000 fbe4 	bl	1a005450 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a004c88:	1b64      	subs	r4, r4, r5
1a004c8a:	00a3      	lsls	r3, r4, #2
1a004c8c:	58f3      	ldr	r3, [r6, r3]
1a004c8e:	226c      	movs	r2, #108	; 0x6c
1a004c90:	619a      	str	r2, [r3, #24]
}
1a004c92:	bd70      	pop	{r4, r5, r6, pc}
1a004c94:	10001c2c 	.word	0x10001c2c

1a004c98 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a004c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004c9c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a004c9e:	4e0b      	ldr	r6, [pc, #44]	; (1a004ccc <Chip_I2C_SetClockRate+0x34>)
1a004ca0:	00c5      	lsls	r5, r0, #3
1a004ca2:	1a2b      	subs	r3, r5, r0
1a004ca4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a004ca8:	eb06 0308 	add.w	r3, r6, r8
1a004cac:	8898      	ldrh	r0, [r3, #4]
1a004cae:	f000 fbe9 	bl	1a005484 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a004cb2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a004cb6:	f856 3008 	ldr.w	r3, [r6, r8]
1a004cba:	0842      	lsrs	r2, r0, #1
1a004cbc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a004cbe:	f856 3008 	ldr.w	r3, [r6, r8]
1a004cc2:	691a      	ldr	r2, [r3, #16]
1a004cc4:	1a80      	subs	r0, r0, r2
1a004cc6:	6158      	str	r0, [r3, #20]
}
1a004cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004ccc:	10001c2c 	.word	0x10001c2c

1a004cd0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a004cd0:	4b09      	ldr	r3, [pc, #36]	; (1a004cf8 <Chip_UART_GetIndex+0x28>)
1a004cd2:	4298      	cmp	r0, r3
1a004cd4:	d009      	beq.n	1a004cea <Chip_UART_GetIndex+0x1a>
1a004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a004cda:	4298      	cmp	r0, r3
1a004cdc:	d007      	beq.n	1a004cee <Chip_UART_GetIndex+0x1e>
1a004cde:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a004ce2:	4298      	cmp	r0, r3
1a004ce4:	d005      	beq.n	1a004cf2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a004ce6:	2000      	movs	r0, #0
1a004ce8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a004cea:	2002      	movs	r0, #2
1a004cec:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a004cee:	2003      	movs	r0, #3
1a004cf0:	4770      	bx	lr
			return 1;
1a004cf2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a004cf4:	4770      	bx	lr
1a004cf6:	bf00      	nop
1a004cf8:	400c1000 	.word	0x400c1000

1a004cfc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a004cfc:	b530      	push	{r4, r5, lr}
1a004cfe:	b083      	sub	sp, #12
1a004d00:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a004d02:	f7ff ffe5 	bl	1a004cd0 <Chip_UART_GetIndex>
1a004d06:	2301      	movs	r3, #1
1a004d08:	461a      	mov	r2, r3
1a004d0a:	4619      	mov	r1, r3
1a004d0c:	4d0e      	ldr	r5, [pc, #56]	; (1a004d48 <Chip_UART_Init+0x4c>)
1a004d0e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a004d12:	f000 fb7f 	bl	1a005414 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a004d16:	2307      	movs	r3, #7
1a004d18:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a004d1a:	2300      	movs	r3, #0
1a004d1c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a004d1e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a004d20:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a004d22:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a004d24:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a004d26:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a004d28:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a004d2a:	4b08      	ldr	r3, [pc, #32]	; (1a004d4c <Chip_UART_Init+0x50>)
1a004d2c:	429c      	cmp	r4, r3
1a004d2e:	d006      	beq.n	1a004d3e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a004d30:	2303      	movs	r3, #3
1a004d32:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a004d34:	2310      	movs	r3, #16
1a004d36:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a004d38:	9b01      	ldr	r3, [sp, #4]
}
1a004d3a:	b003      	add	sp, #12
1a004d3c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a004d3e:	2300      	movs	r3, #0
1a004d40:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a004d42:	69a3      	ldr	r3, [r4, #24]
1a004d44:	9301      	str	r3, [sp, #4]
1a004d46:	e7f3      	b.n	1a004d30 <Chip_UART_Init+0x34>
1a004d48:	1a007ab8 	.word	0x1a007ab8
1a004d4c:	40082000 	.word	0x40082000

1a004d50 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a004d50:	b538      	push	{r3, r4, r5, lr}
1a004d52:	4605      	mov	r5, r0
1a004d54:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a004d56:	f7ff ffbb 	bl	1a004cd0 <Chip_UART_GetIndex>
1a004d5a:	4b0c      	ldr	r3, [pc, #48]	; (1a004d8c <Chip_UART_SetBaud+0x3c>)
1a004d5c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a004d60:	f000 fb90 	bl	1a005484 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a004d64:	0123      	lsls	r3, r4, #4
1a004d66:	fbb0 f3f3 	udiv	r3, r0, r3
1a004d6a:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a004d6c:	68ea      	ldr	r2, [r5, #12]
1a004d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a004d72:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a004d74:	6029      	str	r1, [r5, #0]
1a004d76:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a004d7a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a004d7c:	68ea      	ldr	r2, [r5, #12]
1a004d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a004d82:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a004d84:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a004d88:	0900      	lsrs	r0, r0, #4
1a004d8a:	bd38      	pop	{r3, r4, r5, pc}
1a004d8c:	1a007ab0 	.word	0x1a007ab0

1a004d90 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004d94:	b083      	sub	sp, #12
1a004d96:	4683      	mov	fp, r0
1a004d98:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a004d9a:	f7ff ff99 	bl	1a004cd0 <Chip_UART_GetIndex>
1a004d9e:	4b35      	ldr	r3, [pc, #212]	; (1a004e74 <Chip_UART_SetBaudFDR+0xe4>)
1a004da0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a004da4:	f000 fb6e 	bl	1a005484 <Chip_Clock_GetRate>
1a004da8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a004daa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a004dae:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a004db0:	2300      	movs	r3, #0
1a004db2:	9301      	str	r3, [sp, #4]
1a004db4:	46a2      	mov	sl, r4
1a004db6:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a004db8:	e02a      	b.n	1a004e10 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a004dba:	4242      	negs	r2, r0
				div ++;
1a004dbc:	1c4b      	adds	r3, r1, #1
1a004dbe:	e017      	b.n	1a004df0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a004dc0:	b30a      	cbz	r2, 1a004e06 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a004dc2:	4617      	mov	r7, r2
			sd = d;
1a004dc4:	9501      	str	r5, [sp, #4]
			sm = m;
1a004dc6:	46a2      	mov	sl, r4
			sdiv = div;
1a004dc8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a004dca:	3501      	adds	r5, #1
1a004dcc:	42ac      	cmp	r4, r5
1a004dce:	d91e      	bls.n	1a004e0e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a004dd0:	0933      	lsrs	r3, r6, #4
1a004dd2:	0730      	lsls	r0, r6, #28
1a004dd4:	fba4 0100 	umull	r0, r1, r4, r0
1a004dd8:	fb04 1103 	mla	r1, r4, r3, r1
1a004ddc:	1962      	adds	r2, r4, r5
1a004dde:	fb08 f202 	mul.w	r2, r8, r2
1a004de2:	2300      	movs	r3, #0
1a004de4:	f001 fab0 	bl	1a006348 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a004de8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a004dea:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a004dec:	2800      	cmp	r0, #0
1a004dee:	dbe4      	blt.n	1a004dba <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a004df0:	4297      	cmp	r7, r2
1a004df2:	d3ea      	bcc.n	1a004dca <Chip_UART_SetBaudFDR+0x3a>
1a004df4:	2b00      	cmp	r3, #0
1a004df6:	d0e8      	beq.n	1a004dca <Chip_UART_SetBaudFDR+0x3a>
1a004df8:	0c19      	lsrs	r1, r3, #16
1a004dfa:	d1e6      	bne.n	1a004dca <Chip_UART_SetBaudFDR+0x3a>
1a004dfc:	2b02      	cmp	r3, #2
1a004dfe:	d8df      	bhi.n	1a004dc0 <Chip_UART_SetBaudFDR+0x30>
1a004e00:	2d00      	cmp	r5, #0
1a004e02:	d0dd      	beq.n	1a004dc0 <Chip_UART_SetBaudFDR+0x30>
1a004e04:	e7e1      	b.n	1a004dca <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a004e06:	4617      	mov	r7, r2
			sd = d;
1a004e08:	9501      	str	r5, [sp, #4]
			sm = m;
1a004e0a:	46a2      	mov	sl, r4
			sdiv = div;
1a004e0c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a004e0e:	3401      	adds	r4, #1
1a004e10:	b11f      	cbz	r7, 1a004e1a <Chip_UART_SetBaudFDR+0x8a>
1a004e12:	2c0f      	cmp	r4, #15
1a004e14:	d801      	bhi.n	1a004e1a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a004e16:	2500      	movs	r5, #0
1a004e18:	e7d8      	b.n	1a004dcc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a004e1a:	f1b9 0f00 	cmp.w	r9, #0
1a004e1e:	d024      	beq.n	1a004e6a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a004e20:	f8db 300c 	ldr.w	r3, [fp, #12]
1a004e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004e28:	f8cb 300c 	str.w	r3, [fp, #12]
1a004e2c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a004e30:	f8cb 3000 	str.w	r3, [fp]
1a004e34:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a004e38:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a004e3c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004e44:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a004e48:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a004e4c:	b2db      	uxtb	r3, r3
1a004e4e:	9901      	ldr	r1, [sp, #4]
1a004e50:	f001 020f 	and.w	r2, r1, #15
1a004e54:	4313      	orrs	r3, r2
1a004e56:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a004e5a:	0933      	lsrs	r3, r6, #4
1a004e5c:	fb0a f303 	mul.w	r3, sl, r3
1a004e60:	448a      	add	sl, r1
1a004e62:	fb09 f90a 	mul.w	r9, r9, sl
1a004e66:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a004e6a:	4648      	mov	r0, r9
1a004e6c:	b003      	add	sp, #12
1a004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004e72:	bf00      	nop
1a004e74:	1a007ab0 	.word	0x1a007ab0

1a004e78 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a004e78:	4b03      	ldr	r3, [pc, #12]	; (1a004e88 <Chip_ADC_GetClockIndex+0x10>)
1a004e7a:	4298      	cmp	r0, r3
1a004e7c:	d001      	beq.n	1a004e82 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a004e7e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a004e80:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a004e82:	2004      	movs	r0, #4
1a004e84:	4770      	bx	lr
1a004e86:	bf00      	nop
1a004e88:	400e4000 	.word	0x400e4000

1a004e8c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a004e8c:	b570      	push	{r4, r5, r6, lr}
1a004e8e:	460d      	mov	r5, r1
1a004e90:	4614      	mov	r4, r2
1a004e92:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a004e94:	f7ff fff0 	bl	1a004e78 <Chip_ADC_GetClockIndex>
1a004e98:	f000 faf4 	bl	1a005484 <Chip_Clock_GetRate>
	if (burstMode) {
1a004e9c:	b965      	cbnz	r5, 1a004eb8 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a004e9e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a004ea2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a004ea6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a004eaa:	0064      	lsls	r4, r4, #1
1a004eac:	fbb0 f0f4 	udiv	r0, r0, r4
1a004eb0:	b2c0      	uxtb	r0, r0
1a004eb2:	3801      	subs	r0, #1
	return div;
}
1a004eb4:	b2c0      	uxtb	r0, r0
1a004eb6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a004eb8:	fb04 f406 	mul.w	r4, r4, r6
1a004ebc:	e7f3      	b.n	1a004ea6 <getClkDiv+0x1a>
1a004ebe:	Address 0x000000001a004ebe is out of bounds.


1a004ec0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a004ec0:	b538      	push	{r3, r4, r5, lr}
1a004ec2:	4605      	mov	r5, r0
1a004ec4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a004ec6:	f7ff ffd7 	bl	1a004e78 <Chip_ADC_GetClockIndex>
1a004eca:	2301      	movs	r3, #1
1a004ecc:	461a      	mov	r2, r3
1a004ece:	4619      	mov	r1, r3
1a004ed0:	f000 faa0 	bl	1a005414 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a004ed4:	2100      	movs	r1, #0
1a004ed6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a004ed8:	4a08      	ldr	r2, [pc, #32]	; (1a004efc <Chip_ADC_Init+0x3c>)
1a004eda:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a004edc:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a004ede:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a004ee0:	230b      	movs	r3, #11
1a004ee2:	4628      	mov	r0, r5
1a004ee4:	f7ff ffd2 	bl	1a004e8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a004ee8:	0200      	lsls	r0, r0, #8
1a004eea:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a004eee:	7920      	ldrb	r0, [r4, #4]
1a004ef0:	0440      	lsls	r0, r0, #17
1a004ef2:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a004ef6:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a004ef8:	6028      	str	r0, [r5, #0]
}
1a004efa:	bd38      	pop	{r3, r4, r5, pc}
1a004efc:	00061a80 	.word	0x00061a80

1a004f00 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a004f00:	b570      	push	{r4, r5, r6, lr}
1a004f02:	4605      	mov	r5, r0
1a004f04:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a004f06:	6804      	ldr	r4, [r0, #0]
1a004f08:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a004f0c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a004f10:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a004f12:	790b      	ldrb	r3, [r1, #4]
1a004f14:	f1c3 030b 	rsb	r3, r3, #11
1a004f18:	b2db      	uxtb	r3, r3
1a004f1a:	7949      	ldrb	r1, [r1, #5]
1a004f1c:	f7ff ffb6 	bl	1a004e8c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a004f20:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a004f24:	7930      	ldrb	r0, [r6, #4]
1a004f26:	0440      	lsls	r0, r0, #17
1a004f28:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a004f2c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a004f2e:	6028      	str	r0, [r5, #0]
}
1a004f30:	bd70      	pop	{r4, r5, r6, pc}

1a004f32 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a004f32:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a004f34:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a004f36:	680a      	ldr	r2, [r1, #0]
1a004f38:	f7ff ffe2 	bl	1a004f00 <Chip_ADC_SetSampleRate>
}
1a004f3c:	bd08      	pop	{r3, pc}
1a004f3e:	Address 0x000000001a004f3e is out of bounds.


1a004f40 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a004f40:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a004f42:	680b      	ldr	r3, [r1, #0]
1a004f44:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004f48:	d002      	beq.n	1a004f50 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a004f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a004f4e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a004f50:	4607      	mov	r7, r0
1a004f52:	2501      	movs	r5, #1
1a004f54:	e03b      	b.n	1a004fce <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a004f56:	694b      	ldr	r3, [r1, #20]
1a004f58:	fb03 f302 	mul.w	r3, r3, r2
1a004f5c:	fbb3 f3f5 	udiv	r3, r3, r5
1a004f60:	e014      	b.n	1a004f8c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a004f62:	461c      	mov	r4, r3
1a004f64:	e020      	b.n	1a004fa8 <pll_calc_divs+0x68>
		return -val;
1a004f66:	f1cc 0c00 	rsb	ip, ip, #0
1a004f6a:	e020      	b.n	1a004fae <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a004f6c:	3201      	adds	r2, #1
1a004f6e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a004f72:	dc26      	bgt.n	1a004fc2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a004f74:	680c      	ldr	r4, [r1, #0]
1a004f76:	f014 0f40 	tst.w	r4, #64	; 0x40
1a004f7a:	d0ec      	beq.n	1a004f56 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a004f7c:	1c73      	adds	r3, r6, #1
1a004f7e:	fa02 fc03 	lsl.w	ip, r2, r3
1a004f82:	694b      	ldr	r3, [r1, #20]
1a004f84:	fb03 f30c 	mul.w	r3, r3, ip
1a004f88:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a004f8c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a004fdc <pll_calc_divs+0x9c>
1a004f90:	4563      	cmp	r3, ip
1a004f92:	d9eb      	bls.n	1a004f6c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a004f94:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a004fe0 <pll_calc_divs+0xa0>
1a004f98:	4563      	cmp	r3, ip
1a004f9a:	d812      	bhi.n	1a004fc2 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a004f9c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a004fa0:	d1df      	bne.n	1a004f62 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a004fa2:	1c74      	adds	r4, r6, #1
1a004fa4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a004fa8:	ebb0 0c04 	subs.w	ip, r0, r4
1a004fac:	d4db      	bmi.n	1a004f66 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a004fae:	4567      	cmp	r7, ip
1a004fb0:	d9dc      	bls.n	1a004f6c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a004fb2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a004fb4:	1c77      	adds	r7, r6, #1
1a004fb6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a004fb8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a004fba:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a004fbc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a004fbe:	4667      	mov	r7, ip
1a004fc0:	e7d4      	b.n	1a004f6c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a004fc2:	3601      	adds	r6, #1
1a004fc4:	2e03      	cmp	r6, #3
1a004fc6:	dc01      	bgt.n	1a004fcc <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a004fc8:	2201      	movs	r2, #1
1a004fca:	e7d0      	b.n	1a004f6e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a004fcc:	3501      	adds	r5, #1
1a004fce:	2d04      	cmp	r5, #4
1a004fd0:	dc01      	bgt.n	1a004fd6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a004fd2:	2600      	movs	r6, #0
1a004fd4:	e7f6      	b.n	1a004fc4 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a004fd6:	bcf0      	pop	{r4, r5, r6, r7}
1a004fd8:	4770      	bx	lr
1a004fda:	bf00      	nop
1a004fdc:	094c5eff 	.word	0x094c5eff
1a004fe0:	1312d000 	.word	0x1312d000

1a004fe4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a004fe6:	b099      	sub	sp, #100	; 0x64
1a004fe8:	4605      	mov	r5, r0
1a004fea:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a004fec:	225c      	movs	r2, #92	; 0x5c
1a004fee:	2100      	movs	r1, #0
1a004ff0:	a801      	add	r0, sp, #4
1a004ff2:	f001 fcd2 	bl	1a00699a <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a004ff6:	2380      	movs	r3, #128	; 0x80
1a004ff8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a004ffa:	6963      	ldr	r3, [r4, #20]
1a004ffc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a004ffe:	7923      	ldrb	r3, [r4, #4]
1a005000:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a005004:	4669      	mov	r1, sp
1a005006:	4628      	mov	r0, r5
1a005008:	f7ff ff9a 	bl	1a004f40 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00500c:	9b06      	ldr	r3, [sp, #24]
1a00500e:	42ab      	cmp	r3, r5
1a005010:	d027      	beq.n	1a005062 <pll_get_frac+0x7e>
	if (val < 0)
1a005012:	1aeb      	subs	r3, r5, r3
1a005014:	d42e      	bmi.n	1a005074 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a005016:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a005018:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00501a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00501e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a005020:	6963      	ldr	r3, [r4, #20]
1a005022:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a005024:	7923      	ldrb	r3, [r4, #4]
1a005026:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00502a:	a910      	add	r1, sp, #64	; 0x40
1a00502c:	4628      	mov	r0, r5
1a00502e:	f7ff ff87 	bl	1a004f40 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a005032:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005034:	42ab      	cmp	r3, r5
1a005036:	d01f      	beq.n	1a005078 <pll_get_frac+0x94>
	if (val < 0)
1a005038:	1aeb      	subs	r3, r5, r3
1a00503a:	d425      	bmi.n	1a005088 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00503c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00503e:	4b2b      	ldr	r3, [pc, #172]	; (1a0050ec <pll_get_frac+0x108>)
1a005040:	429d      	cmp	r5, r3
1a005042:	d923      	bls.n	1a00508c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a005044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a005046:	1aed      	subs	r5, r5, r3
1a005048:	d433      	bmi.n	1a0050b2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00504a:	42ae      	cmp	r6, r5
1a00504c:	dc3b      	bgt.n	1a0050c6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00504e:	42be      	cmp	r6, r7
1a005050:	dc31      	bgt.n	1a0050b6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a005052:	466d      	mov	r5, sp
1a005054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005058:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00505c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005060:	e006      	b.n	1a005070 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a005062:	466d      	mov	r5, sp
1a005064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005068:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00506c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a005070:	b019      	add	sp, #100	; 0x64
1a005072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a005074:	425b      	negs	r3, r3
1a005076:	e7ce      	b.n	1a005016 <pll_get_frac+0x32>
		*ppll = pll[2];
1a005078:	ad10      	add	r5, sp, #64	; 0x40
1a00507a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00507c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00507e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a005086:	e7f3      	b.n	1a005070 <pll_get_frac+0x8c>
		return -val;
1a005088:	425b      	negs	r3, r3
1a00508a:	e7d7      	b.n	1a00503c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a00508c:	2340      	movs	r3, #64	; 0x40
1a00508e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a005090:	6963      	ldr	r3, [r4, #20]
1a005092:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a005094:	a908      	add	r1, sp, #32
1a005096:	4628      	mov	r0, r5
1a005098:	f7ff ff52 	bl	1a004f40 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00509c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00509e:	42ab      	cmp	r3, r5
1a0050a0:	d1d0      	bne.n	1a005044 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0050a2:	ad08      	add	r5, sp, #32
1a0050a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0050a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0050a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0050ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0050b0:	e7de      	b.n	1a005070 <pll_get_frac+0x8c>
		return -val;
1a0050b2:	426d      	negs	r5, r5
1a0050b4:	e7c9      	b.n	1a00504a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0050b6:	ad10      	add	r5, sp, #64	; 0x40
1a0050b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0050ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0050bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0050c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0050c4:	e7d4      	b.n	1a005070 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a0050c6:	42af      	cmp	r7, r5
1a0050c8:	db07      	blt.n	1a0050da <pll_get_frac+0xf6>
			*ppll = pll[1];
1a0050ca:	ad08      	add	r5, sp, #32
1a0050cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0050ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0050d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0050d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0050d8:	e7ca      	b.n	1a005070 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a0050da:	ad10      	add	r5, sp, #64	; 0x40
1a0050dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0050de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0050e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0050e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0050e8:	e7c2      	b.n	1a005070 <pll_get_frac+0x8c>
1a0050ea:	bf00      	nop
1a0050ec:	068e7780 	.word	0x068e7780

1a0050f0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0050f0:	b430      	push	{r4, r5}
1a0050f2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0050f4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0050f6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0050f8:	e000      	b.n	1a0050fc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0050fa:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0050fc:	281c      	cmp	r0, #28
1a0050fe:	d118      	bne.n	1a005132 <Chip_Clock_FindBaseClock+0x42>
1a005100:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a005104:	0051      	lsls	r1, r2, #1
1a005106:	4a0c      	ldr	r2, [pc, #48]	; (1a005138 <Chip_Clock_FindBaseClock+0x48>)
1a005108:	440a      	add	r2, r1
1a00510a:	7914      	ldrb	r4, [r2, #4]
1a00510c:	4284      	cmp	r4, r0
1a00510e:	d010      	beq.n	1a005132 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a005110:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a005114:	004a      	lsls	r2, r1, #1
1a005116:	4908      	ldr	r1, [pc, #32]	; (1a005138 <Chip_Clock_FindBaseClock+0x48>)
1a005118:	5a8a      	ldrh	r2, [r1, r2]
1a00511a:	42aa      	cmp	r2, r5
1a00511c:	d8ed      	bhi.n	1a0050fa <Chip_Clock_FindBaseClock+0xa>
1a00511e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a005122:	0051      	lsls	r1, r2, #1
1a005124:	4a04      	ldr	r2, [pc, #16]	; (1a005138 <Chip_Clock_FindBaseClock+0x48>)
1a005126:	440a      	add	r2, r1
1a005128:	8852      	ldrh	r2, [r2, #2]
1a00512a:	42aa      	cmp	r2, r5
1a00512c:	d3e5      	bcc.n	1a0050fa <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00512e:	4620      	mov	r0, r4
1a005130:	e7e4      	b.n	1a0050fc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a005132:	bc30      	pop	{r4, r5}
1a005134:	4770      	bx	lr
1a005136:	bf00      	nop
1a005138:	1a007acc 	.word	0x1a007acc

1a00513c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00513c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00513e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a005142:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a005144:	4a0d      	ldr	r2, [pc, #52]	; (1a00517c <Chip_Clock_EnableCrystal+0x40>)
1a005146:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a005148:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00514c:	6992      	ldr	r2, [r2, #24]
1a00514e:	428a      	cmp	r2, r1
1a005150:	d001      	beq.n	1a005156 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a005152:	4a0a      	ldr	r2, [pc, #40]	; (1a00517c <Chip_Clock_EnableCrystal+0x40>)
1a005154:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a005156:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00515a:	4a09      	ldr	r2, [pc, #36]	; (1a005180 <Chip_Clock_EnableCrystal+0x44>)
1a00515c:	6811      	ldr	r1, [r2, #0]
1a00515e:	4a09      	ldr	r2, [pc, #36]	; (1a005184 <Chip_Clock_EnableCrystal+0x48>)
1a005160:	4291      	cmp	r1, r2
1a005162:	d901      	bls.n	1a005168 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a005164:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a005168:	4a04      	ldr	r2, [pc, #16]	; (1a00517c <Chip_Clock_EnableCrystal+0x40>)
1a00516a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00516c:	9b01      	ldr	r3, [sp, #4]
1a00516e:	1e5a      	subs	r2, r3, #1
1a005170:	9201      	str	r2, [sp, #4]
1a005172:	2b00      	cmp	r3, #0
1a005174:	d1fa      	bne.n	1a00516c <Chip_Clock_EnableCrystal+0x30>
}
1a005176:	b002      	add	sp, #8
1a005178:	4770      	bx	lr
1a00517a:	bf00      	nop
1a00517c:	40050000 	.word	0x40050000
1a005180:	1a007a34 	.word	0x1a007a34
1a005184:	01312cff 	.word	0x01312cff

1a005188 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a005188:	3012      	adds	r0, #18
1a00518a:	4b05      	ldr	r3, [pc, #20]	; (1a0051a0 <Chip_Clock_GetDividerSource+0x18>)
1a00518c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a005190:	f010 0f01 	tst.w	r0, #1
1a005194:	d102      	bne.n	1a00519c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a005196:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00519a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00519c:	2011      	movs	r0, #17
}
1a00519e:	4770      	bx	lr
1a0051a0:	40050000 	.word	0x40050000

1a0051a4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0051a4:	f100 0212 	add.w	r2, r0, #18
1a0051a8:	4b03      	ldr	r3, [pc, #12]	; (1a0051b8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0051aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0051ae:	4b03      	ldr	r3, [pc, #12]	; (1a0051bc <Chip_Clock_GetDividerDivisor+0x18>)
1a0051b0:	5c18      	ldrb	r0, [r3, r0]
}
1a0051b2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0051b6:	4770      	bx	lr
1a0051b8:	40050000 	.word	0x40050000
1a0051bc:	1a007ac4 	.word	0x1a007ac4

1a0051c0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0051c0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0051c2:	2810      	cmp	r0, #16
1a0051c4:	d80a      	bhi.n	1a0051dc <Chip_Clock_GetClockInputHz+0x1c>
1a0051c6:	e8df f000 	tbb	[pc, r0]
1a0051ca:	0b42      	.short	0x0b42
1a0051cc:	091f160d 	.word	0x091f160d
1a0051d0:	2b282522 	.word	0x2b282522
1a0051d4:	322e0909 	.word	0x322e0909
1a0051d8:	3a36      	.short	0x3a36
1a0051da:	3e          	.byte	0x3e
1a0051db:	00          	.byte	0x00
	uint32_t rate = 0;
1a0051dc:	2000      	movs	r0, #0
1a0051de:	e038      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0051e0:	481e      	ldr	r0, [pc, #120]	; (1a00525c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0051e2:	e036      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0051e4:	4b1e      	ldr	r3, [pc, #120]	; (1a005260 <Chip_Clock_GetClockInputHz+0xa0>)
1a0051e6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0051ea:	f003 0307 	and.w	r3, r3, #7
1a0051ee:	2b04      	cmp	r3, #4
1a0051f0:	d130      	bne.n	1a005254 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0051f2:	2000      	movs	r0, #0
1a0051f4:	e02d      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0051f6:	4b1a      	ldr	r3, [pc, #104]	; (1a005260 <Chip_Clock_GetClockInputHz+0xa0>)
1a0051f8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0051fc:	f003 0307 	and.w	r3, r3, #7
1a005200:	2b04      	cmp	r3, #4
1a005202:	d029      	beq.n	1a005258 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a005204:	4817      	ldr	r0, [pc, #92]	; (1a005264 <Chip_Clock_GetClockInputHz+0xa4>)
1a005206:	e024      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a005208:	4b17      	ldr	r3, [pc, #92]	; (1a005268 <Chip_Clock_GetClockInputHz+0xa8>)
1a00520a:	6818      	ldr	r0, [r3, #0]
		break;
1a00520c:	e021      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00520e:	4b17      	ldr	r3, [pc, #92]	; (1a00526c <Chip_Clock_GetClockInputHz+0xac>)
1a005210:	6818      	ldr	r0, [r3, #0]
		break;
1a005212:	e01e      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a005214:	4b16      	ldr	r3, [pc, #88]	; (1a005270 <Chip_Clock_GetClockInputHz+0xb0>)
1a005216:	6818      	ldr	r0, [r3, #0]
		break;
1a005218:	e01b      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00521a:	4b15      	ldr	r3, [pc, #84]	; (1a005270 <Chip_Clock_GetClockInputHz+0xb0>)
1a00521c:	6858      	ldr	r0, [r3, #4]
		break;
1a00521e:	e018      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a005220:	f000 f86a 	bl	1a0052f8 <Chip_Clock_GetMainPLLHz>
		break;
1a005224:	e015      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a005226:	2100      	movs	r1, #0
1a005228:	f000 f89c 	bl	1a005364 <Chip_Clock_GetDivRate>
		break;
1a00522c:	e011      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00522e:	2101      	movs	r1, #1
1a005230:	f000 f898 	bl	1a005364 <Chip_Clock_GetDivRate>
		break;
1a005234:	e00d      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a005236:	2102      	movs	r1, #2
1a005238:	f000 f894 	bl	1a005364 <Chip_Clock_GetDivRate>
		break;
1a00523c:	e009      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00523e:	2103      	movs	r1, #3
1a005240:	f000 f890 	bl	1a005364 <Chip_Clock_GetDivRate>
		break;
1a005244:	e005      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a005246:	2104      	movs	r1, #4
1a005248:	f000 f88c 	bl	1a005364 <Chip_Clock_GetDivRate>
		break;
1a00524c:	e001      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00524e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a005252:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a005254:	4803      	ldr	r0, [pc, #12]	; (1a005264 <Chip_Clock_GetClockInputHz+0xa4>)
1a005256:	e7fc      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a005258:	4806      	ldr	r0, [pc, #24]	; (1a005274 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00525a:	e7fa      	b.n	1a005252 <Chip_Clock_GetClockInputHz+0x92>
1a00525c:	00b71b00 	.word	0x00b71b00
1a005260:	40043000 	.word	0x40043000
1a005264:	017d7840 	.word	0x017d7840
1a005268:	1a007a08 	.word	0x1a007a08
1a00526c:	1a007a34 	.word	0x1a007a34
1a005270:	100061b8 	.word	0x100061b8
1a005274:	02faf080 	.word	0x02faf080

1a005278 <Chip_Clock_CalcMainPLLValue>:
{
1a005278:	b538      	push	{r3, r4, r5, lr}
1a00527a:	4605      	mov	r5, r0
1a00527c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00527e:	7908      	ldrb	r0, [r1, #4]
1a005280:	f7ff ff9e 	bl	1a0051c0 <Chip_Clock_GetClockInputHz>
1a005284:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a005286:	4b19      	ldr	r3, [pc, #100]	; (1a0052ec <Chip_Clock_CalcMainPLLValue+0x74>)
1a005288:	442b      	add	r3, r5
1a00528a:	4a19      	ldr	r2, [pc, #100]	; (1a0052f0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00528c:	4293      	cmp	r3, r2
1a00528e:	d821      	bhi.n	1a0052d4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a005290:	b318      	cbz	r0, 1a0052da <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a005292:	2380      	movs	r3, #128	; 0x80
1a005294:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a005296:	2300      	movs	r3, #0
1a005298:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00529a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00529c:	fbb5 f3f0 	udiv	r3, r5, r0
1a0052a0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0052a2:	4a14      	ldr	r2, [pc, #80]	; (1a0052f4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0052a4:	4295      	cmp	r5, r2
1a0052a6:	d903      	bls.n	1a0052b0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0052a8:	fb03 f000 	mul.w	r0, r3, r0
1a0052ac:	42a8      	cmp	r0, r5
1a0052ae:	d007      	beq.n	1a0052c0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0052b0:	4621      	mov	r1, r4
1a0052b2:	4628      	mov	r0, r5
1a0052b4:	f7ff fe96 	bl	1a004fe4 <pll_get_frac>
		if (!ppll->nsel) {
1a0052b8:	68a3      	ldr	r3, [r4, #8]
1a0052ba:	b18b      	cbz	r3, 1a0052e0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0052bc:	3b01      	subs	r3, #1
1a0052be:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a0052c0:	6923      	ldr	r3, [r4, #16]
1a0052c2:	b183      	cbz	r3, 1a0052e6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a0052c4:	68e2      	ldr	r2, [r4, #12]
1a0052c6:	b10a      	cbz	r2, 1a0052cc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a0052c8:	3a01      	subs	r2, #1
1a0052ca:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a0052cc:	3b01      	subs	r3, #1
1a0052ce:	6123      	str	r3, [r4, #16]
	return 0;
1a0052d0:	2000      	movs	r0, #0
}
1a0052d2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0052d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0052d8:	e7fb      	b.n	1a0052d2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0052da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0052de:	e7f8      	b.n	1a0052d2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0052e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0052e4:	e7f5      	b.n	1a0052d2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0052e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0052ea:	e7f2      	b.n	1a0052d2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0052ec:	ff6b3a10 	.word	0xff6b3a10
1a0052f0:	0b940510 	.word	0x0b940510
1a0052f4:	094c5eff 	.word	0x094c5eff

1a0052f8 <Chip_Clock_GetMainPLLHz>:
{
1a0052f8:	b530      	push	{r4, r5, lr}
1a0052fa:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0052fc:	4d17      	ldr	r5, [pc, #92]	; (1a00535c <Chip_Clock_GetMainPLLHz+0x64>)
1a0052fe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a005300:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a005304:	f7ff ff5c 	bl	1a0051c0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a005308:	4b15      	ldr	r3, [pc, #84]	; (1a005360 <Chip_Clock_GetMainPLLHz+0x68>)
1a00530a:	681b      	ldr	r3, [r3, #0]
1a00530c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00530e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a005310:	f013 0f01 	tst.w	r3, #1
1a005314:	d01f      	beq.n	1a005356 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a005316:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00531a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00531e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a005322:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a005326:	3301      	adds	r3, #1
	n = nsel + 1;
1a005328:	3201      	adds	r2, #1
	p = ptab[psel];
1a00532a:	f10d 0c08 	add.w	ip, sp, #8
1a00532e:	4461      	add	r1, ip
1a005330:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a005334:	f014 0f80 	tst.w	r4, #128	; 0x80
1a005338:	d108      	bne.n	1a00534c <Chip_Clock_GetMainPLLHz+0x54>
1a00533a:	b93d      	cbnz	r5, 1a00534c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00533c:	0049      	lsls	r1, r1, #1
1a00533e:	fbb3 f3f1 	udiv	r3, r3, r1
1a005342:	fbb0 f0f2 	udiv	r0, r0, r2
1a005346:	fb00 f003 	mul.w	r0, r0, r3
1a00534a:	e005      	b.n	1a005358 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a00534c:	fbb0 f0f2 	udiv	r0, r0, r2
1a005350:	fb03 f000 	mul.w	r0, r3, r0
1a005354:	e000      	b.n	1a005358 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a005356:	2000      	movs	r0, #0
}
1a005358:	b003      	add	sp, #12
1a00535a:	bd30      	pop	{r4, r5, pc}
1a00535c:	40050000 	.word	0x40050000
1a005360:	1a007ac0 	.word	0x1a007ac0

1a005364 <Chip_Clock_GetDivRate>:
{
1a005364:	b538      	push	{r3, r4, r5, lr}
1a005366:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a005368:	4608      	mov	r0, r1
1a00536a:	f7ff ff0d 	bl	1a005188 <Chip_Clock_GetDividerSource>
1a00536e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a005370:	4620      	mov	r0, r4
1a005372:	f7ff ff17 	bl	1a0051a4 <Chip_Clock_GetDividerDivisor>
1a005376:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a005378:	4628      	mov	r0, r5
1a00537a:	f7ff ff21 	bl	1a0051c0 <Chip_Clock_GetClockInputHz>
1a00537e:	3401      	adds	r4, #1
}
1a005380:	fbb0 f0f4 	udiv	r0, r0, r4
1a005384:	bd38      	pop	{r3, r4, r5, pc}
1a005386:	Address 0x000000001a005386 is out of bounds.


1a005388 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a005388:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00538a:	f100 0416 	add.w	r4, r0, #22
1a00538e:	00a4      	lsls	r4, r4, #2
1a005390:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a005394:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a005398:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00539a:	281b      	cmp	r0, #27
1a00539c:	d813      	bhi.n	1a0053c6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00539e:	2911      	cmp	r1, #17
1a0053a0:	d01a      	beq.n	1a0053d8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0053a2:	4d0e      	ldr	r5, [pc, #56]	; (1a0053dc <Chip_Clock_SetBaseClock+0x54>)
1a0053a4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0053a6:	b10a      	cbz	r2, 1a0053ac <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0053a8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0053ac:	b10b      	cbz	r3, 1a0053b2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0053ae:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0053b2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0053b6:	3016      	adds	r0, #22
1a0053b8:	0080      	lsls	r0, r0, #2
1a0053ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0053be:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0053c2:	6045      	str	r5, [r0, #4]
1a0053c4:	e008      	b.n	1a0053d8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0053c6:	f044 0401 	orr.w	r4, r4, #1
1a0053ca:	3016      	adds	r0, #22
1a0053cc:	0080      	lsls	r0, r0, #2
1a0053ce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0053d2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0053d6:	6044      	str	r4, [r0, #4]
	}
}
1a0053d8:	bc30      	pop	{r4, r5}
1a0053da:	4770      	bx	lr
1a0053dc:	e0fff7fe 	.word	0xe0fff7fe

1a0053e0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0053e0:	281b      	cmp	r0, #27
1a0053e2:	d80c      	bhi.n	1a0053fe <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0053e4:	3016      	adds	r0, #22
1a0053e6:	0080      	lsls	r0, r0, #2
1a0053e8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0053ec:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0053f0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0053f2:	f010 0f01 	tst.w	r0, #1
1a0053f6:	d104      	bne.n	1a005402 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0053f8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0053fc:	4770      	bx	lr
		return CLKINPUT_PD;
1a0053fe:	2011      	movs	r0, #17
1a005400:	4770      	bx	lr
		return CLKINPUT_PD;
1a005402:	2011      	movs	r0, #17
}
1a005404:	4770      	bx	lr

1a005406 <Chip_Clock_GetBaseClocktHz>:
{
1a005406:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a005408:	f7ff ffea 	bl	1a0053e0 <Chip_Clock_GetBaseClock>
1a00540c:	f7ff fed8 	bl	1a0051c0 <Chip_Clock_GetClockInputHz>
}
1a005410:	bd08      	pop	{r3, pc}
1a005412:	Address 0x000000001a005412 is out of bounds.


1a005414 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a005414:	b969      	cbnz	r1, 1a005432 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a005416:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a005418:	b10a      	cbz	r2, 1a00541e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00541a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00541e:	2b02      	cmp	r3, #2
1a005420:	d009      	beq.n	1a005436 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a005422:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a005426:	d209      	bcs.n	1a00543c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a005428:	3020      	adds	r0, #32
1a00542a:	4b07      	ldr	r3, [pc, #28]	; (1a005448 <Chip_Clock_EnableOpts+0x34>)
1a00542c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a005430:	4770      	bx	lr
		reg |= (1 << 1);
1a005432:	2103      	movs	r1, #3
1a005434:	e7f0      	b.n	1a005418 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a005436:	f041 0120 	orr.w	r1, r1, #32
1a00543a:	e7f2      	b.n	1a005422 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00543c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a005440:	4b02      	ldr	r3, [pc, #8]	; (1a00544c <Chip_Clock_EnableOpts+0x38>)
1a005442:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a005446:	4770      	bx	lr
1a005448:	40051000 	.word	0x40051000
1a00544c:	40052000 	.word	0x40052000

1a005450 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a005450:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a005454:	d208      	bcs.n	1a005468 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a005456:	4a09      	ldr	r2, [pc, #36]	; (1a00547c <Chip_Clock_Enable+0x2c>)
1a005458:	3020      	adds	r0, #32
1a00545a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00545e:	f043 0301 	orr.w	r3, r3, #1
1a005462:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a005466:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a005468:	4a05      	ldr	r2, [pc, #20]	; (1a005480 <Chip_Clock_Enable+0x30>)
1a00546a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00546e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a005472:	f043 0301 	orr.w	r3, r3, #1
1a005476:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00547a:	4770      	bx	lr
1a00547c:	40051000 	.word	0x40051000
1a005480:	40052000 	.word	0x40052000

1a005484 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a005484:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a005486:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00548a:	d309      	bcc.n	1a0054a0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00548c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a005490:	4a0d      	ldr	r2, [pc, #52]	; (1a0054c8 <Chip_Clock_GetRate+0x44>)
1a005492:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a005496:	f014 0f01 	tst.w	r4, #1
1a00549a:	d107      	bne.n	1a0054ac <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00549c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00549e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0054a0:	f100 0320 	add.w	r3, r0, #32
1a0054a4:	4a09      	ldr	r2, [pc, #36]	; (1a0054cc <Chip_Clock_GetRate+0x48>)
1a0054a6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0054aa:	e7f4      	b.n	1a005496 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0054ac:	f7ff fe20 	bl	1a0050f0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0054b0:	f7ff ffa9 	bl	1a005406 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a0054b4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0054b8:	d103      	bne.n	1a0054c2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a0054ba:	2301      	movs	r3, #1
		rate = rate / div;
1a0054bc:	fbb0 f0f3 	udiv	r0, r0, r3
1a0054c0:	e7ed      	b.n	1a00549e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a0054c2:	2302      	movs	r3, #2
1a0054c4:	e7fa      	b.n	1a0054bc <Chip_Clock_GetRate+0x38>
1a0054c6:	bf00      	nop
1a0054c8:	40052000 	.word	0x40052000
1a0054cc:	40051000 	.word	0x40051000

1a0054d0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0054d0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0054d2:	2069      	movs	r0, #105	; 0x69
1a0054d4:	f7ff ffd6 	bl	1a005484 <Chip_Clock_GetRate>
1a0054d8:	4b01      	ldr	r3, [pc, #4]	; (1a0054e0 <SystemCoreClockUpdate+0x10>)
1a0054da:	6018      	str	r0, [r3, #0]
}
1a0054dc:	bd08      	pop	{r3, pc}
1a0054de:	bf00      	nop
1a0054e0:	100065c0 	.word	0x100065c0

1a0054e4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0054e4:	b570      	push	{r4, r5, r6, lr}
1a0054e6:	b08a      	sub	sp, #40	; 0x28
1a0054e8:	4605      	mov	r5, r0
1a0054ea:	460e      	mov	r6, r1
1a0054ec:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0054ee:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0054f2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0054f4:	2806      	cmp	r0, #6
1a0054f6:	d018      	beq.n	1a00552a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0054f8:	2300      	movs	r3, #0
1a0054fa:	2201      	movs	r2, #1
1a0054fc:	4629      	mov	r1, r5
1a0054fe:	2004      	movs	r0, #4
1a005500:	f7ff ff42 	bl	1a005388 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a005504:	4a49      	ldr	r2, [pc, #292]	; (1a00562c <Chip_SetupCoreClock+0x148>)
1a005506:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a005508:	f043 0301 	orr.w	r3, r3, #1
1a00550c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00550e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a005512:	a901      	add	r1, sp, #4
1a005514:	4630      	mov	r0, r6
1a005516:	f7ff feaf 	bl	1a005278 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00551a:	4b45      	ldr	r3, [pc, #276]	; (1a005630 <Chip_SetupCoreClock+0x14c>)
1a00551c:	429e      	cmp	r6, r3
1a00551e:	d916      	bls.n	1a00554e <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a005520:	9b01      	ldr	r3, [sp, #4]
1a005522:	f013 0f40 	tst.w	r3, #64	; 0x40
1a005526:	d003      	beq.n	1a005530 <Chip_SetupCoreClock+0x4c>
1a005528:	e7fe      	b.n	1a005528 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00552a:	f7ff fe07 	bl	1a00513c <Chip_Clock_EnableCrystal>
1a00552e:	e7e3      	b.n	1a0054f8 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a005530:	f013 0f80 	tst.w	r3, #128	; 0x80
1a005534:	d005      	beq.n	1a005542 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a005536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00553a:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a00553c:	2500      	movs	r5, #0
			direct = 1;
1a00553e:	2601      	movs	r6, #1
1a005540:	e007      	b.n	1a005552 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a005542:	9b04      	ldr	r3, [sp, #16]
1a005544:	3301      	adds	r3, #1
1a005546:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a005548:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00554a:	2600      	movs	r6, #0
1a00554c:	e001      	b.n	1a005552 <Chip_SetupCoreClock+0x6e>
1a00554e:	2500      	movs	r5, #0
1a005550:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a005552:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a005556:	9b01      	ldr	r3, [sp, #4]
1a005558:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00555c:	9a05      	ldr	r2, [sp, #20]
1a00555e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a005562:	9a03      	ldr	r2, [sp, #12]
1a005564:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a005568:	9a04      	ldr	r2, [sp, #16]
1a00556a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00556e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005572:	4a2e      	ldr	r2, [pc, #184]	; (1a00562c <Chip_SetupCoreClock+0x148>)
1a005574:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a005576:	4b2d      	ldr	r3, [pc, #180]	; (1a00562c <Chip_SetupCoreClock+0x148>)
1a005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00557a:	f013 0f01 	tst.w	r3, #1
1a00557e:	d0fa      	beq.n	1a005576 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a005580:	2300      	movs	r3, #0
1a005582:	2201      	movs	r2, #1
1a005584:	2109      	movs	r1, #9
1a005586:	2004      	movs	r0, #4
1a005588:	f7ff fefe 	bl	1a005388 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00558c:	b1fe      	cbz	r6, 1a0055ce <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00558e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a005592:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a005594:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005596:	1e5a      	subs	r2, r3, #1
1a005598:	9209      	str	r2, [sp, #36]	; 0x24
1a00559a:	2b00      	cmp	r3, #0
1a00559c:	d1fa      	bne.n	1a005594 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00559e:	9b01      	ldr	r3, [sp, #4]
1a0055a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0055a4:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0055a6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0055aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0055ae:	9a05      	ldr	r2, [sp, #20]
1a0055b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0055b4:	9a03      	ldr	r2, [sp, #12]
1a0055b6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0055ba:	9a04      	ldr	r2, [sp, #16]
1a0055bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0055c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0055c4:	4a19      	ldr	r2, [pc, #100]	; (1a00562c <Chip_SetupCoreClock+0x148>)
1a0055c6:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0055c8:	b36c      	cbz	r4, 1a005626 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0055ca:	2400      	movs	r4, #0
1a0055cc:	e029      	b.n	1a005622 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a0055ce:	2d00      	cmp	r5, #0
1a0055d0:	d0fa      	beq.n	1a0055c8 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0055d2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0055d6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0055d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0055da:	1e5a      	subs	r2, r3, #1
1a0055dc:	9209      	str	r2, [sp, #36]	; 0x24
1a0055de:	2b00      	cmp	r3, #0
1a0055e0:	d1fa      	bne.n	1a0055d8 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a0055e2:	9b04      	ldr	r3, [sp, #16]
1a0055e4:	1e5a      	subs	r2, r3, #1
1a0055e6:	9204      	str	r2, [sp, #16]
1a0055e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0055ec:	9b01      	ldr	r3, [sp, #4]
1a0055ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0055f2:	9905      	ldr	r1, [sp, #20]
1a0055f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0055f8:	9903      	ldr	r1, [sp, #12]
1a0055fa:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0055fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a005602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005606:	4a09      	ldr	r2, [pc, #36]	; (1a00562c <Chip_SetupCoreClock+0x148>)
1a005608:	6453      	str	r3, [r2, #68]	; 0x44
1a00560a:	e7dd      	b.n	1a0055c8 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00560c:	4809      	ldr	r0, [pc, #36]	; (1a005634 <Chip_SetupCoreClock+0x150>)
1a00560e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a005612:	78cb      	ldrb	r3, [r1, #3]
1a005614:	788a      	ldrb	r2, [r1, #2]
1a005616:	7849      	ldrb	r1, [r1, #1]
1a005618:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00561c:	f7ff feb4 	bl	1a005388 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a005620:	3401      	adds	r4, #1
1a005622:	2c11      	cmp	r4, #17
1a005624:	d9f2      	bls.n	1a00560c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a005626:	b00a      	add	sp, #40	; 0x28
1a005628:	bd70      	pop	{r4, r5, r6, pc}
1a00562a:	bf00      	nop
1a00562c:	40050000 	.word	0x40050000
1a005630:	068e7780 	.word	0x068e7780
1a005634:	1a007b38 	.word	0x1a007b38

1a005638 <setClkDiv>:
 * Private functions
 ****************************************************************************/

/* Setup EEPROM clock */
STATIC void setClkDiv(LPC_EEPROM_T *pEEPROM)
{
1a005638:	b510      	push	{r4, lr}
1a00563a:	4604      	mov	r4, r0
	uint32_t clk;

	/* Setup EEPROM timing to 375KHz based on PCLK rate */
	clk = Chip_Clock_GetRate(CLK_MX_EEPROM);
1a00563c:	2074      	movs	r0, #116	; 0x74
1a00563e:	f7ff ff21 	bl	1a005484 <Chip_Clock_GetRate>

	/* Set EEPROM clock divide value*/
	pEEPROM->CLKDIV = clk / EEPROM_CLOCK_DIV - 1;
1a005642:	4b03      	ldr	r3, [pc, #12]	; (1a005650 <setClkDiv+0x18>)
1a005644:	fba3 3000 	umull	r3, r0, r3, r0
1a005648:	0c40      	lsrs	r0, r0, #17
1a00564a:	3801      	subs	r0, #1
1a00564c:	6160      	str	r0, [r4, #20]
}
1a00564e:	bd10      	pop	{r4, pc}
1a005650:	165e9f81 	.word	0x165e9f81

1a005654 <Chip_EEPROM_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the EEPROM peripheral with specified parameter */
void Chip_EEPROM_Init(LPC_EEPROM_T *pEEPROM)
{
1a005654:	b510      	push	{r4, lr}
1a005656:	4604      	mov	r4, r0
	pEEPROM->PWRDWN = 0;
1a005658:	2300      	movs	r3, #0
1a00565a:	6183      	str	r3, [r0, #24]
	/* Disable EEPROM power down mode */
	Chip_EEPROM_DisablePowerDown(pEEPROM);
	setClkDiv(pEEPROM);
1a00565c:	f7ff ffec 	bl	1a005638 <setClkDiv>
 * @note    Bits 7:0 represents wait state for Read Phase 2 and
 *          Bits 15:8 represents wait state for Read Phase1
 */
STATIC INLINE void Chip_EEPROM_SetReadWaitState(LPC_EEPROM_T *pEEPROM, uint32_t ws)
{
	pEEPROM->RWSTATE = ws;
1a005660:	2358      	movs	r3, #88	; 0x58
1a005662:	60a3      	str	r3, [r4, #8]
 *          Bits 15:8 represents wait state for Phase2, and
 *          Bits 23:16 represents wait state for Phase1
 */
STATIC INLINE void Chip_EEPROM_SetWaitState(LPC_EEPROM_T *pEEPROM, uint32_t ws)
{
	pEEPROM->WSTATE = ws;
1a005664:	f240 2332 	movw	r3, #562	; 0x232
1a005668:	6123      	str	r3, [r4, #16]
	setWaitState(pEEPROM);
}
1a00566a:	bd10      	pop	{r4, pc}

1a00566c <Chip_EEPROM_WaitForIntStatus>:
 * @param	pEEPROM	: Pointer to EEPROM peripheral block structure
 * @return	OR-ed bits value of EEPROM_INT_*
 */
STATIC INLINE uint32_t Chip_EEPROM_GetIntStatus(LPC_EEPROM_T *pEEPROM)
{
	return pEEPROM->INTSTAT;
1a00566c:	f8d0 3fe0 	ldr.w	r3, [r0, #4064]	; 0xfe0
void Chip_EEPROM_WaitForIntStatus(LPC_EEPROM_T *pEEPROM, uint32_t mask)
{
	uint32_t status;
	while (1) {
		status = Chip_EEPROM_GetIntStatus(pEEPROM);
		if ((status & mask) == mask) {
1a005670:	ea31 0303 	bics.w	r3, r1, r3
1a005674:	d1fa      	bne.n	1a00566c <Chip_EEPROM_WaitForIntStatus>
 * @param	mask	: Interrupt mask (or-ed bits value of EEPROM_INT_*)
 * @return	Nothing
 */
STATIC INLINE void Chip_EEPROM_ClearIntStatus(LPC_EEPROM_T *pEEPROM, uint32_t mask)
{
	pEEPROM->INTSTATCLR =  mask;
1a005676:	f8c0 1fe8 	str.w	r1, [r0, #4072]	; 0xfe8
			break;
		}
	}
	Chip_EEPROM_ClearIntStatus(pEEPROM, mask);
}
1a00567a:	4770      	bx	lr

1a00567c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00567c:	4770      	bx	lr
1a00567e:	Address 0x000000001a00567e is out of bounds.


1a005680 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a005680:	4b03      	ldr	r3, [pc, #12]	; (1a005690 <Chip_SSP_GetClockIndex+0x10>)
1a005682:	4298      	cmp	r0, r3
1a005684:	d001      	beq.n	1a00568a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a005686:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a005688:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00568a:	20a5      	movs	r0, #165	; 0xa5
1a00568c:	4770      	bx	lr
1a00568e:	bf00      	nop
1a005690:	400c5000 	.word	0x400c5000

1a005694 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a005694:	4b04      	ldr	r3, [pc, #16]	; (1a0056a8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a005696:	4298      	cmp	r0, r3
1a005698:	d002      	beq.n	1a0056a0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00569a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00569e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0056a0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0056a4:	4770      	bx	lr
1a0056a6:	bf00      	nop
1a0056a8:	400c5000 	.word	0x400c5000

1a0056ac <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0056ac:	6803      	ldr	r3, [r0, #0]
1a0056ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0056b2:	0209      	lsls	r1, r1, #8
1a0056b4:	b289      	uxth	r1, r1
1a0056b6:	4319      	orrs	r1, r3
1a0056b8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0056ba:	6102      	str	r2, [r0, #16]
}
1a0056bc:	4770      	bx	lr

1a0056be <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0056be:	b570      	push	{r4, r5, r6, lr}
1a0056c0:	4606      	mov	r6, r0
1a0056c2:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0056c4:	f7ff ffe6 	bl	1a005694 <Chip_SSP_GetPeriphClockIndex>
1a0056c8:	f7ff fedc 	bl	1a005484 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0056cc:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0056ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0056d2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0056d4:	e000      	b.n	1a0056d8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0056d6:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0056d8:	42ab      	cmp	r3, r5
1a0056da:	d90b      	bls.n	1a0056f4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0056dc:	1c4c      	adds	r4, r1, #1
1a0056de:	fb02 f304 	mul.w	r3, r2, r4
1a0056e2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0056e6:	429d      	cmp	r5, r3
1a0056e8:	d2f6      	bcs.n	1a0056d8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0056ea:	2cff      	cmp	r4, #255	; 0xff
1a0056ec:	d9f3      	bls.n	1a0056d6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0056ee:	3202      	adds	r2, #2
				cr0_div = 0;
1a0056f0:	2100      	movs	r1, #0
1a0056f2:	e7f1      	b.n	1a0056d8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0056f4:	4630      	mov	r0, r6
1a0056f6:	f7ff ffd9 	bl	1a0056ac <Chip_SSP_SetClockRate>
}
1a0056fa:	bd70      	pop	{r4, r5, r6, pc}

1a0056fc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0056fc:	b510      	push	{r4, lr}
1a0056fe:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a005700:	f7ff ffbe 	bl	1a005680 <Chip_SSP_GetClockIndex>
1a005704:	f7ff fea4 	bl	1a005450 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a005708:	4620      	mov	r0, r4
1a00570a:	f7ff ffc3 	bl	1a005694 <Chip_SSP_GetPeriphClockIndex>
1a00570e:	f7ff fe9f 	bl	1a005450 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005712:	6863      	ldr	r3, [r4, #4]
1a005714:	f023 0304 	bic.w	r3, r3, #4
1a005718:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00571a:	6823      	ldr	r3, [r4, #0]
1a00571c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005720:	f043 0307 	orr.w	r3, r3, #7
1a005724:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a005726:	4902      	ldr	r1, [pc, #8]	; (1a005730 <Chip_SSP_Init+0x34>)
1a005728:	4620      	mov	r0, r4
1a00572a:	f7ff ffc8 	bl	1a0056be <Chip_SSP_SetBitRate>
}
1a00572e:	bd10      	pop	{r4, pc}
1a005730:	000186a0 	.word	0x000186a0

1a005734 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a005734:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a005736:	4a0b      	ldr	r2, [pc, #44]	; (1a005764 <SystemInit+0x30>)
1a005738:	4b0b      	ldr	r3, [pc, #44]	; (1a005768 <SystemInit+0x34>)
1a00573a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00573c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a005740:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a005742:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a005746:	2b20      	cmp	r3, #32
1a005748:	d004      	beq.n	1a005754 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00574a:	f7ff fa7d 	bl	1a004c48 <Board_SystemInit>
   Board_Init();
1a00574e:	f7ff fa03 	bl	1a004b58 <Board_Init>
}
1a005752:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a005754:	4a04      	ldr	r2, [pc, #16]	; (1a005768 <SystemInit+0x34>)
1a005756:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00575a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00575e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a005762:	e7f2      	b.n	1a00574a <SystemInit+0x16>
1a005764:	1a000000 	.word	0x1a000000
1a005768:	e000ed00 	.word	0xe000ed00

1a00576c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00576c:	4b04      	ldr	r3, [pc, #16]	; (1a005780 <cyclesCounterInit+0x14>)
1a00576e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a005770:	4a04      	ldr	r2, [pc, #16]	; (1a005784 <cyclesCounterInit+0x18>)
1a005772:	6813      	ldr	r3, [r2, #0]
1a005774:	f043 0301 	orr.w	r3, r3, #1
1a005778:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00577a:	2001      	movs	r0, #1
1a00577c:	4770      	bx	lr
1a00577e:	bf00      	nop
1a005780:	10001c64 	.word	0x10001c64
1a005784:	e0001000 	.word	0xe0001000

1a005788 <uartProcessIRQ>:
{
1a005788:	b570      	push	{r4, r5, r6, lr}
1a00578a:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a00578c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a005790:	0093      	lsls	r3, r2, #2
1a005792:	4a22      	ldr	r2, [pc, #136]	; (1a00581c <uartProcessIRQ+0x94>)
1a005794:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a005796:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a005798:	b2ed      	uxtb	r5, r5
1a00579a:	f015 0f01 	tst.w	r5, #1
1a00579e:	d00a      	beq.n	1a0057b6 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0057a0:	b928      	cbnz	r0, 1a0057ae <uartProcessIRQ+0x26>
1a0057a2:	4b1f      	ldr	r3, [pc, #124]	; (1a005820 <uartProcessIRQ+0x98>)
1a0057a4:	681b      	ldr	r3, [r3, #0]
1a0057a6:	b113      	cbz	r3, 1a0057ae <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a0057a8:	4a1e      	ldr	r2, [pc, #120]	; (1a005824 <uartProcessIRQ+0x9c>)
1a0057aa:	6810      	ldr	r0, [r2, #0]
1a0057ac:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0057ae:	2c03      	cmp	r4, #3
1a0057b0:	d014      	beq.n	1a0057dc <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0057b2:	2c05      	cmp	r4, #5
1a0057b4:	d01a      	beq.n	1a0057ec <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0057b6:	f015 0f20 	tst.w	r5, #32
1a0057ba:	d00e      	beq.n	1a0057da <uartProcessIRQ+0x52>
	return pUART->IER;
1a0057bc:	6873      	ldr	r3, [r6, #4]
1a0057be:	f013 0f02 	tst.w	r3, #2
1a0057c2:	d00a      	beq.n	1a0057da <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0057c4:	b92c      	cbnz	r4, 1a0057d2 <uartProcessIRQ+0x4a>
1a0057c6:	4b18      	ldr	r3, [pc, #96]	; (1a005828 <uartProcessIRQ+0xa0>)
1a0057c8:	681b      	ldr	r3, [r3, #0]
1a0057ca:	b113      	cbz	r3, 1a0057d2 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a0057cc:	4a17      	ldr	r2, [pc, #92]	; (1a00582c <uartProcessIRQ+0xa4>)
1a0057ce:	6810      	ldr	r0, [r2, #0]
1a0057d0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0057d2:	2c03      	cmp	r4, #3
1a0057d4:	d012      	beq.n	1a0057fc <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0057d6:	2c05      	cmp	r4, #5
1a0057d8:	d018      	beq.n	1a00580c <uartProcessIRQ+0x84>
}
1a0057da:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0057dc:	4b14      	ldr	r3, [pc, #80]	; (1a005830 <uartProcessIRQ+0xa8>)
1a0057de:	681b      	ldr	r3, [r3, #0]
1a0057e0:	2b00      	cmp	r3, #0
1a0057e2:	d0e6      	beq.n	1a0057b2 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a0057e4:	4a13      	ldr	r2, [pc, #76]	; (1a005834 <uartProcessIRQ+0xac>)
1a0057e6:	6810      	ldr	r0, [r2, #0]
1a0057e8:	4798      	blx	r3
1a0057ea:	e7e2      	b.n	1a0057b2 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0057ec:	4b12      	ldr	r3, [pc, #72]	; (1a005838 <uartProcessIRQ+0xb0>)
1a0057ee:	681b      	ldr	r3, [r3, #0]
1a0057f0:	2b00      	cmp	r3, #0
1a0057f2:	d0e0      	beq.n	1a0057b6 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a0057f4:	4a11      	ldr	r2, [pc, #68]	; (1a00583c <uartProcessIRQ+0xb4>)
1a0057f6:	6810      	ldr	r0, [r2, #0]
1a0057f8:	4798      	blx	r3
1a0057fa:	e7dc      	b.n	1a0057b6 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0057fc:	4b10      	ldr	r3, [pc, #64]	; (1a005840 <uartProcessIRQ+0xb8>)
1a0057fe:	681b      	ldr	r3, [r3, #0]
1a005800:	2b00      	cmp	r3, #0
1a005802:	d0e8      	beq.n	1a0057d6 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a005804:	4a0f      	ldr	r2, [pc, #60]	; (1a005844 <uartProcessIRQ+0xbc>)
1a005806:	6810      	ldr	r0, [r2, #0]
1a005808:	4798      	blx	r3
1a00580a:	e7e4      	b.n	1a0057d6 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00580c:	4b0e      	ldr	r3, [pc, #56]	; (1a005848 <uartProcessIRQ+0xc0>)
1a00580e:	681b      	ldr	r3, [r3, #0]
1a005810:	2b00      	cmp	r3, #0
1a005812:	d0e2      	beq.n	1a0057da <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a005814:	4a0d      	ldr	r2, [pc, #52]	; (1a00584c <uartProcessIRQ+0xc4>)
1a005816:	6810      	ldr	r0, [r2, #0]
1a005818:	4798      	blx	r3
}
1a00581a:	e7de      	b.n	1a0057da <uartProcessIRQ+0x52>
1a00581c:	1a007b80 	.word	0x1a007b80
1a005820:	100061c0 	.word	0x100061c0
1a005824:	100061c4 	.word	0x100061c4
1a005828:	100061d8 	.word	0x100061d8
1a00582c:	100061dc 	.word	0x100061dc
1a005830:	100061c8 	.word	0x100061c8
1a005834:	100061cc 	.word	0x100061cc
1a005838:	100061d0 	.word	0x100061d0
1a00583c:	100061d4 	.word	0x100061d4
1a005840:	100061e0 	.word	0x100061e0
1a005844:	100061e4 	.word	0x100061e4
1a005848:	100061e8 	.word	0x100061e8
1a00584c:	100061ec 	.word	0x100061ec

1a005850 <uartInterrupt>:
   if( enable ) {
1a005850:	b341      	cbz	r1, 1a0058a4 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a005852:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a005856:	009a      	lsls	r2, r3, #2
1a005858:	4b1e      	ldr	r3, [pc, #120]	; (1a0058d4 <uartInterrupt+0x84>)
1a00585a:	4413      	add	r3, r2
1a00585c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a005860:	2b00      	cmp	r3, #0
1a005862:	db18      	blt.n	1a005896 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a005864:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a005868:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a00586c:	22a0      	movs	r2, #160	; 0xa0
1a00586e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a005872:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a005876:	0082      	lsls	r2, r0, #2
1a005878:	4b16      	ldr	r3, [pc, #88]	; (1a0058d4 <uartInterrupt+0x84>)
1a00587a:	4413      	add	r3, r2
1a00587c:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a005880:	2b00      	cmp	r3, #0
1a005882:	db25      	blt.n	1a0058d0 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a005884:	f003 011f 	and.w	r1, r3, #31
1a005888:	095b      	lsrs	r3, r3, #5
1a00588a:	2201      	movs	r2, #1
1a00588c:	408a      	lsls	r2, r1
1a00588e:	4912      	ldr	r1, [pc, #72]	; (1a0058d8 <uartInterrupt+0x88>)
1a005890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a005894:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a005896:	f003 030f 	and.w	r3, r3, #15
1a00589a:	4a10      	ldr	r2, [pc, #64]	; (1a0058dc <uartInterrupt+0x8c>)
1a00589c:	441a      	add	r2, r3
1a00589e:	23a0      	movs	r3, #160	; 0xa0
1a0058a0:	7613      	strb	r3, [r2, #24]
1a0058a2:	e7e6      	b.n	1a005872 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a0058a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0058a8:	0082      	lsls	r2, r0, #2
1a0058aa:	4b0a      	ldr	r3, [pc, #40]	; (1a0058d4 <uartInterrupt+0x84>)
1a0058ac:	4413      	add	r3, r2
1a0058ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0058b2:	2b00      	cmp	r3, #0
1a0058b4:	db0c      	blt.n	1a0058d0 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0058b6:	f003 011f 	and.w	r1, r3, #31
1a0058ba:	095b      	lsrs	r3, r3, #5
1a0058bc:	2201      	movs	r2, #1
1a0058be:	408a      	lsls	r2, r1
1a0058c0:	3320      	adds	r3, #32
1a0058c2:	4905      	ldr	r1, [pc, #20]	; (1a0058d8 <uartInterrupt+0x88>)
1a0058c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0058c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a0058cc:	f3bf 8f6f 	isb	sy
}
1a0058d0:	4770      	bx	lr
1a0058d2:	bf00      	nop
1a0058d4:	1a007b80 	.word	0x1a007b80
1a0058d8:	e000e100 	.word	0xe000e100
1a0058dc:	e000ecfc 	.word	0xe000ecfc

1a0058e0 <uartCallbackSet>:
{   
1a0058e0:	b410      	push	{r4}
   switch(event){
1a0058e2:	b161      	cbz	r1, 1a0058fe <uartCallbackSet+0x1e>
1a0058e4:	2901      	cmp	r1, #1
1a0058e6:	d11c      	bne.n	1a005922 <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a0058e8:	b1da      	cbz	r2, 1a005922 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a0058ea:	2801      	cmp	r0, #1
1a0058ec:	d92c      	bls.n	1a005948 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a0058ee:	1ec1      	subs	r1, r0, #3
1a0058f0:	b2c9      	uxtb	r1, r1
1a0058f2:	2901      	cmp	r1, #1
1a0058f4:	d92d      	bls.n	1a005952 <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a0058f6:	2805      	cmp	r0, #5
1a0058f8:	d030      	beq.n	1a00595c <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a0058fa:	2302      	movs	r3, #2
1a0058fc:	e009      	b.n	1a005912 <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a0058fe:	b182      	cbz	r2, 1a005922 <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a005900:	2801      	cmp	r0, #1
1a005902:	d911      	bls.n	1a005928 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a005904:	1ec1      	subs	r1, r0, #3
1a005906:	b2c9      	uxtb	r1, r1
1a005908:	2901      	cmp	r1, #1
1a00590a:	d912      	bls.n	1a005932 <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a00590c:	2805      	cmp	r0, #5
1a00590e:	d015      	beq.n	1a00593c <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a005910:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a005912:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a005916:	0082      	lsls	r2, r0, #2
1a005918:	4913      	ldr	r1, [pc, #76]	; (1a005968 <uartCallbackSet+0x88>)
1a00591a:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a00591c:	6851      	ldr	r1, [r2, #4]
1a00591e:	430b      	orrs	r3, r1
1a005920:	6053      	str	r3, [r2, #4]
}
1a005922:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005926:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a005928:	4910      	ldr	r1, [pc, #64]	; (1a00596c <uartCallbackSet+0x8c>)
1a00592a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a00592c:	4910      	ldr	r1, [pc, #64]	; (1a005970 <uartCallbackSet+0x90>)
1a00592e:	600b      	str	r3, [r1, #0]
1a005930:	e7e8      	b.n	1a005904 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a005932:	4910      	ldr	r1, [pc, #64]	; (1a005974 <uartCallbackSet+0x94>)
1a005934:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a005936:	4910      	ldr	r1, [pc, #64]	; (1a005978 <uartCallbackSet+0x98>)
1a005938:	600b      	str	r3, [r1, #0]
1a00593a:	e7e7      	b.n	1a00590c <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a00593c:	490f      	ldr	r1, [pc, #60]	; (1a00597c <uartCallbackSet+0x9c>)
1a00593e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a005940:	4a0f      	ldr	r2, [pc, #60]	; (1a005980 <uartCallbackSet+0xa0>)
1a005942:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a005944:	2305      	movs	r3, #5
1a005946:	e7e4      	b.n	1a005912 <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a005948:	490e      	ldr	r1, [pc, #56]	; (1a005984 <uartCallbackSet+0xa4>)
1a00594a:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a00594c:	490e      	ldr	r1, [pc, #56]	; (1a005988 <uartCallbackSet+0xa8>)
1a00594e:	600b      	str	r3, [r1, #0]
1a005950:	e7cd      	b.n	1a0058ee <uartCallbackSet+0xe>
            	txIsrCallbackUART2 = callbackFunc;
1a005952:	490e      	ldr	r1, [pc, #56]	; (1a00598c <uartCallbackSet+0xac>)
1a005954:	600a      	str	r2, [r1, #0]
            	txIsrCallbackUART2Params = callbackParam;
1a005956:	490e      	ldr	r1, [pc, #56]	; (1a005990 <uartCallbackSet+0xb0>)
1a005958:	600b      	str	r3, [r1, #0]
1a00595a:	e7cc      	b.n	1a0058f6 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a00595c:	490d      	ldr	r1, [pc, #52]	; (1a005994 <uartCallbackSet+0xb4>)
1a00595e:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a005960:	4a0d      	ldr	r2, [pc, #52]	; (1a005998 <uartCallbackSet+0xb8>)
1a005962:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a005964:	2302      	movs	r3, #2
1a005966:	e7d4      	b.n	1a005912 <uartCallbackSet+0x32>
1a005968:	1a007b80 	.word	0x1a007b80
1a00596c:	100061c0 	.word	0x100061c0
1a005970:	100061c4 	.word	0x100061c4
1a005974:	100061c8 	.word	0x100061c8
1a005978:	100061cc 	.word	0x100061cc
1a00597c:	100061d0 	.word	0x100061d0
1a005980:	100061d4 	.word	0x100061d4
1a005984:	100061d8 	.word	0x100061d8
1a005988:	100061dc 	.word	0x100061dc
1a00598c:	100061e0 	.word	0x100061e0
1a005990:	100061e4 	.word	0x100061e4
1a005994:	100061e8 	.word	0x100061e8
1a005998:	100061ec 	.word	0x100061ec

1a00599c <uartCallbackClr>:
   switch(event){
1a00599c:	b111      	cbz	r1, 1a0059a4 <uartCallbackClr+0x8>
1a00599e:	2901      	cmp	r1, #1
1a0059a0:	d00b      	beq.n	1a0059ba <uartCallbackClr+0x1e>
1a0059a2:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0059a4:	2105      	movs	r1, #5
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a0059a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0059aa:	0082      	lsls	r2, r0, #2
1a0059ac:	4b04      	ldr	r3, [pc, #16]	; (1a0059c0 <uartCallbackClr+0x24>)
1a0059ae:	589a      	ldr	r2, [r3, r2]
	pUART->IER &= ~intMask;
1a0059b0:	6853      	ldr	r3, [r2, #4]
1a0059b2:	ea23 0301 	bic.w	r3, r3, r1
1a0059b6:	6053      	str	r3, [r2, #4]
}
1a0059b8:	4770      	bx	lr
         intMask = UART_IER_THREINT;
1a0059ba:	2102      	movs	r1, #2
1a0059bc:	e7f3      	b.n	1a0059a6 <uartCallbackClr+0xa>
1a0059be:	bf00      	nop
1a0059c0:	1a007b80 	.word	0x1a007b80

1a0059c4 <uartSetPendingInterrupt>:
   NVIC_SetPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a0059c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0059c8:	0082      	lsls	r2, r0, #2
1a0059ca:	4b08      	ldr	r3, [pc, #32]	; (1a0059ec <uartSetPendingInterrupt+0x28>)
1a0059cc:	4413      	add	r3, r2
1a0059ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0059d2:	2b00      	cmp	r3, #0
1a0059d4:	db08      	blt.n	1a0059e8 <uartSetPendingInterrupt+0x24>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0059d6:	f003 011f 	and.w	r1, r3, #31
1a0059da:	095b      	lsrs	r3, r3, #5
1a0059dc:	2201      	movs	r2, #1
1a0059de:	408a      	lsls	r2, r1
1a0059e0:	3340      	adds	r3, #64	; 0x40
1a0059e2:	4903      	ldr	r1, [pc, #12]	; (1a0059f0 <uartSetPendingInterrupt+0x2c>)
1a0059e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0059e8:	4770      	bx	lr
1a0059ea:	bf00      	nop
1a0059ec:	1a007b80 	.word	0x1a007b80
1a0059f0:	e000e100 	.word	0xe000e100

1a0059f4 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0059f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0059f8:	0083      	lsls	r3, r0, #2
1a0059fa:	4a03      	ldr	r2, [pc, #12]	; (1a005a08 <uartTxReady+0x14>)
1a0059fc:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0059fe:	6958      	ldr	r0, [r3, #20]
}
1a005a00:	f000 0020 	and.w	r0, r0, #32
1a005a04:	4770      	bx	lr
1a005a06:	bf00      	nop
1a005a08:	1a007b80 	.word	0x1a007b80

1a005a0c <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a005a0c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a005a10:	0083      	lsls	r3, r0, #2
1a005a12:	4a02      	ldr	r2, [pc, #8]	; (1a005a1c <uartRxRead+0x10>)
1a005a14:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a005a16:	6818      	ldr	r0, [r3, #0]
}
1a005a18:	b2c0      	uxtb	r0, r0
1a005a1a:	4770      	bx	lr
1a005a1c:	1a007b80 	.word	0x1a007b80

1a005a20 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a005a20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a005a24:	0083      	lsls	r3, r0, #2
1a005a26:	4a02      	ldr	r2, [pc, #8]	; (1a005a30 <uartTxWrite+0x10>)
1a005a28:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a005a2a:	6019      	str	r1, [r3, #0]
}
1a005a2c:	4770      	bx	lr
1a005a2e:	bf00      	nop
1a005a30:	1a007b80 	.word	0x1a007b80

1a005a34 <uartInit>:
{
1a005a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005a38:	4680      	mov	r8, r0
1a005a3a:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a005a3c:	4c19      	ldr	r4, [pc, #100]	; (1a005aa4 <uartInit+0x70>)
1a005a3e:	0045      	lsls	r5, r0, #1
1a005a40:	182a      	adds	r2, r5, r0
1a005a42:	0093      	lsls	r3, r2, #2
1a005a44:	18e6      	adds	r6, r4, r3
1a005a46:	58e7      	ldr	r7, [r4, r3]
1a005a48:	4638      	mov	r0, r7
1a005a4a:	f7ff f957 	bl	1a004cfc <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a005a4e:	4649      	mov	r1, r9
1a005a50:	4638      	mov	r0, r7
1a005a52:	f7ff f97d 	bl	1a004d50 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a005a56:	2307      	movs	r3, #7
1a005a58:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a005a5a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a005a5c:	2301      	movs	r3, #1
1a005a5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a005a60:	7930      	ldrb	r0, [r6, #4]
1a005a62:	7973      	ldrb	r3, [r6, #5]
1a005a64:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a005a66:	f042 0218 	orr.w	r2, r2, #24
1a005a6a:	490f      	ldr	r1, [pc, #60]	; (1a005aa8 <uartInit+0x74>)
1a005a6c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a005a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a005a74:	79f0      	ldrb	r0, [r6, #7]
1a005a76:	7a33      	ldrb	r3, [r6, #8]
1a005a78:	7a72      	ldrb	r2, [r6, #9]
1a005a7a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a005a7e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a005a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a005a86:	f1b8 0f01 	cmp.w	r8, #1
1a005a8a:	d001      	beq.n	1a005a90 <uartInit+0x5c>
}
1a005a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a005a90:	4a06      	ldr	r2, [pc, #24]	; (1a005aac <uartInit+0x78>)
1a005a92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a005a94:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a005a98:	64d3      	str	r3, [r2, #76]	; 0x4c
1a005a9a:	221a      	movs	r2, #26
1a005a9c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a005aa0:	e7f4      	b.n	1a005a8c <uartInit+0x58>
1a005aa2:	bf00      	nop
1a005aa4:	1a007b80 	.word	0x1a007b80
1a005aa8:	40086000 	.word	0x40086000
1a005aac:	40081000 	.word	0x40081000

1a005ab0 <uartWriteByte>:
{
1a005ab0:	b538      	push	{r3, r4, r5, lr}
1a005ab2:	4604      	mov	r4, r0
1a005ab4:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a005ab6:	4620      	mov	r0, r4
1a005ab8:	f7ff ff9c 	bl	1a0059f4 <uartTxReady>
1a005abc:	2800      	cmp	r0, #0
1a005abe:	d0fa      	beq.n	1a005ab6 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a005ac0:	4629      	mov	r1, r5
1a005ac2:	4620      	mov	r0, r4
1a005ac4:	f7ff ffac 	bl	1a005a20 <uartTxWrite>
}
1a005ac8:	bd38      	pop	{r3, r4, r5, pc}

1a005aca <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a005aca:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a005acc:	2003      	movs	r0, #3
1a005ace:	f7ff fe5b 	bl	1a005788 <uartProcessIRQ>
}
1a005ad2:	bd08      	pop	{r3, pc}

1a005ad4 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a005ad4:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a005ad6:	2005      	movs	r0, #5
1a005ad8:	f7ff fe56 	bl	1a005788 <uartProcessIRQ>
}
1a005adc:	bd08      	pop	{r3, pc}

1a005ade <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a005ade:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a005ae0:	f7fd ff9c 	bl	1a003a1c <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a005ae4:	2100      	movs	r1, #0
1a005ae6:	bd08      	pop	{r3, pc}

1a005ae8 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a005ae8:	e7fe      	b.n	1a005ae8 <errorOcurred>

1a005aea <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a005aea:	4770      	bx	lr

1a005aec <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a005aec:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005aee:	2400      	movs	r4, #0
1a005af0:	e001      	b.n	1a005af6 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005af2:	3401      	adds	r4, #1
1a005af4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005af6:	2c03      	cmp	r4, #3
1a005af8:	d812      	bhi.n	1a005b20 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a005afa:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005afc:	4b09      	ldr	r3, [pc, #36]	; (1a005b24 <TIMER0_IRQHandler+0x38>)
1a005afe:	681a      	ldr	r2, [r3, #0]
1a005b00:	f004 010f 	and.w	r1, r4, #15
1a005b04:	2301      	movs	r3, #1
1a005b06:	408b      	lsls	r3, r1
1a005b08:	421a      	tst	r2, r3
1a005b0a:	d0f2      	beq.n	1a005af2 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005b0c:	4b06      	ldr	r3, [pc, #24]	; (1a005b28 <TIMER0_IRQHandler+0x3c>)
1a005b0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a005b12:	2000      	movs	r0, #0
1a005b14:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005b16:	2301      	movs	r3, #1
1a005b18:	40ab      	lsls	r3, r5
1a005b1a:	4a02      	ldr	r2, [pc, #8]	; (1a005b24 <TIMER0_IRQHandler+0x38>)
1a005b1c:	6013      	str	r3, [r2, #0]
1a005b1e:	e7e8      	b.n	1a005af2 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a005b20:	bd38      	pop	{r3, r4, r5, pc}
1a005b22:	bf00      	nop
1a005b24:	40084000 	.word	0x40084000
1a005b28:	10001c70 	.word	0x10001c70

1a005b2c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a005b2c:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005b2e:	2400      	movs	r4, #0
1a005b30:	e001      	b.n	1a005b36 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005b32:	3401      	adds	r4, #1
1a005b34:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005b36:	2c03      	cmp	r4, #3
1a005b38:	d813      	bhi.n	1a005b62 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a005b3a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005b3c:	4b09      	ldr	r3, [pc, #36]	; (1a005b64 <TIMER1_IRQHandler+0x38>)
1a005b3e:	681a      	ldr	r2, [r3, #0]
1a005b40:	f004 010f 	and.w	r1, r4, #15
1a005b44:	2301      	movs	r3, #1
1a005b46:	408b      	lsls	r3, r1
1a005b48:	421a      	tst	r2, r3
1a005b4a:	d0f2      	beq.n	1a005b32 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005b4c:	1d23      	adds	r3, r4, #4
1a005b4e:	4a06      	ldr	r2, [pc, #24]	; (1a005b68 <TIMER1_IRQHandler+0x3c>)
1a005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a005b54:	2000      	movs	r0, #0
1a005b56:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005b58:	2301      	movs	r3, #1
1a005b5a:	40ab      	lsls	r3, r5
1a005b5c:	4a01      	ldr	r2, [pc, #4]	; (1a005b64 <TIMER1_IRQHandler+0x38>)
1a005b5e:	6013      	str	r3, [r2, #0]
1a005b60:	e7e7      	b.n	1a005b32 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a005b62:	bd38      	pop	{r3, r4, r5, pc}
1a005b64:	40085000 	.word	0x40085000
1a005b68:	10001c70 	.word	0x10001c70

1a005b6c <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a005b6c:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005b6e:	2400      	movs	r4, #0
1a005b70:	e001      	b.n	1a005b76 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005b72:	3401      	adds	r4, #1
1a005b74:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005b76:	2c03      	cmp	r4, #3
1a005b78:	d814      	bhi.n	1a005ba4 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a005b7a:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005b7c:	4b0a      	ldr	r3, [pc, #40]	; (1a005ba8 <TIMER2_IRQHandler+0x3c>)
1a005b7e:	681a      	ldr	r2, [r3, #0]
1a005b80:	f004 010f 	and.w	r1, r4, #15
1a005b84:	2301      	movs	r3, #1
1a005b86:	408b      	lsls	r3, r1
1a005b88:	421a      	tst	r2, r3
1a005b8a:	d0f2      	beq.n	1a005b72 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005b8c:	f104 0308 	add.w	r3, r4, #8
1a005b90:	4a06      	ldr	r2, [pc, #24]	; (1a005bac <TIMER2_IRQHandler+0x40>)
1a005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a005b96:	2000      	movs	r0, #0
1a005b98:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005b9a:	2301      	movs	r3, #1
1a005b9c:	40ab      	lsls	r3, r5
1a005b9e:	4a02      	ldr	r2, [pc, #8]	; (1a005ba8 <TIMER2_IRQHandler+0x3c>)
1a005ba0:	6013      	str	r3, [r2, #0]
1a005ba2:	e7e6      	b.n	1a005b72 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a005ba4:	bd38      	pop	{r3, r4, r5, pc}
1a005ba6:	bf00      	nop
1a005ba8:	400c3000 	.word	0x400c3000
1a005bac:	10001c70 	.word	0x10001c70

1a005bb0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a005bb0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005bb2:	2400      	movs	r4, #0
1a005bb4:	e001      	b.n	1a005bba <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a005bb6:	3401      	adds	r4, #1
1a005bb8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a005bba:	2c03      	cmp	r4, #3
1a005bbc:	d814      	bhi.n	1a005be8 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a005bbe:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a005bc0:	4b0a      	ldr	r3, [pc, #40]	; (1a005bec <TIMER3_IRQHandler+0x3c>)
1a005bc2:	681a      	ldr	r2, [r3, #0]
1a005bc4:	f004 010f 	and.w	r1, r4, #15
1a005bc8:	2301      	movs	r3, #1
1a005bca:	408b      	lsls	r3, r1
1a005bcc:	421a      	tst	r2, r3
1a005bce:	d0f2      	beq.n	1a005bb6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a005bd0:	f104 030c 	add.w	r3, r4, #12
1a005bd4:	4a06      	ldr	r2, [pc, #24]	; (1a005bf0 <TIMER3_IRQHandler+0x40>)
1a005bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a005bda:	2000      	movs	r0, #0
1a005bdc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a005bde:	2301      	movs	r3, #1
1a005be0:	40ab      	lsls	r3, r5
1a005be2:	4a02      	ldr	r2, [pc, #8]	; (1a005bec <TIMER3_IRQHandler+0x3c>)
1a005be4:	6013      	str	r3, [r2, #0]
1a005be6:	e7e6      	b.n	1a005bb6 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a005be8:	bd38      	pop	{r3, r4, r5, pc}
1a005bea:	bf00      	nop
1a005bec:	400c4000 	.word	0x400c4000
1a005bf0:	10001c70 	.word	0x10001c70

1a005bf4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a005bf4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a005bf6:	4d0b      	ldr	r5, [pc, #44]	; (1a005c24 <gpioObtainPinInit+0x30>)
1a005bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a005bfc:	182c      	adds	r4, r5, r0
1a005bfe:	5628      	ldrsb	r0, [r5, r0]
1a005c00:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a005c02:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a005c06:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a005c08:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a005c0c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a005c0e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a005c12:	9b02      	ldr	r3, [sp, #8]
1a005c14:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a005c16:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a005c1a:	9b03      	ldr	r3, [sp, #12]
1a005c1c:	701a      	strb	r2, [r3, #0]
}
1a005c1e:	bc30      	pop	{r4, r5}
1a005c20:	4770      	bx	lr
1a005c22:	bf00      	nop
1a005c24:	1a007bc8 	.word	0x1a007bc8

1a005c28 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a005c28:	f110 0f02 	cmn.w	r0, #2
1a005c2c:	f000 80c7 	beq.w	1a005dbe <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a005c30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005c34:	f000 80c5 	beq.w	1a005dc2 <gpioInit+0x19a>
{
1a005c38:	b570      	push	{r4, r5, r6, lr}
1a005c3a:	b084      	sub	sp, #16
1a005c3c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a005c3e:	2300      	movs	r3, #0
1a005c40:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a005c44:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a005c48:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a005c4c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a005c50:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a005c54:	f10d 030b 	add.w	r3, sp, #11
1a005c58:	9301      	str	r3, [sp, #4]
1a005c5a:	ab03      	add	r3, sp, #12
1a005c5c:	9300      	str	r3, [sp, #0]
1a005c5e:	f10d 030d 	add.w	r3, sp, #13
1a005c62:	f10d 020e 	add.w	r2, sp, #14
1a005c66:	f10d 010f 	add.w	r1, sp, #15
1a005c6a:	f7ff ffc3 	bl	1a005bf4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a005c6e:	2c05      	cmp	r4, #5
1a005c70:	f200 80a9 	bhi.w	1a005dc6 <gpioInit+0x19e>
1a005c74:	e8df f004 	tbb	[pc, r4]
1a005c78:	45278109 	.word	0x45278109
1a005c7c:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a005c7e:	4853      	ldr	r0, [pc, #332]	; (1a005dcc <gpioInit+0x1a4>)
1a005c80:	f7ff fcfc 	bl	1a00567c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a005c84:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a005c86:	b004      	add	sp, #16
1a005c88:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a005c8a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005c8e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005c92:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005c96:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a005c9a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005c9e:	494c      	ldr	r1, [pc, #304]	; (1a005dd0 <gpioInit+0x1a8>)
1a005ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005ca4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005ca8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005cac:	2001      	movs	r0, #1
1a005cae:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a005cb2:	4c46      	ldr	r4, [pc, #280]	; (1a005dcc <gpioInit+0x1a4>)
1a005cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a005cb8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a005cbc:	ea22 0201 	bic.w	r2, r2, r1
1a005cc0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a005cc4:	e7df      	b.n	1a005c86 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a005cc6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005cca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005cce:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005cd2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a005cd6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005cda:	493d      	ldr	r1, [pc, #244]	; (1a005dd0 <gpioInit+0x1a8>)
1a005cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005ce0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005ce4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005ce8:	2001      	movs	r0, #1
1a005cea:	fa00 f102 	lsl.w	r1, r0, r2
1a005cee:	4c37      	ldr	r4, [pc, #220]	; (1a005dcc <gpioInit+0x1a4>)
1a005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a005cf4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a005cf8:	ea22 0201 	bic.w	r2, r2, r1
1a005cfc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a005d00:	e7c1      	b.n	1a005c86 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a005d02:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005d06:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005d0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005d0e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a005d12:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005d16:	492e      	ldr	r1, [pc, #184]	; (1a005dd0 <gpioInit+0x1a8>)
1a005d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005d1c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005d20:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005d24:	2001      	movs	r0, #1
1a005d26:	fa00 f102 	lsl.w	r1, r0, r2
1a005d2a:	4c28      	ldr	r4, [pc, #160]	; (1a005dcc <gpioInit+0x1a4>)
1a005d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a005d30:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a005d34:	ea22 0201 	bic.w	r2, r2, r1
1a005d38:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a005d3c:	e7a3      	b.n	1a005c86 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a005d3e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005d42:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005d46:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005d4a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a005d4e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005d52:	491f      	ldr	r1, [pc, #124]	; (1a005dd0 <gpioInit+0x1a8>)
1a005d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a005d58:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005d5c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005d60:	2001      	movs	r0, #1
1a005d62:	fa00 f102 	lsl.w	r1, r0, r2
1a005d66:	4c19      	ldr	r4, [pc, #100]	; (1a005dcc <gpioInit+0x1a4>)
1a005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a005d6c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a005d70:	ea22 0201 	bic.w	r2, r2, r1
1a005d74:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a005d78:	e785      	b.n	1a005c86 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a005d7a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a005d7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a005d82:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a005d86:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a005d8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a005d8e:	4910      	ldr	r1, [pc, #64]	; (1a005dd0 <gpioInit+0x1a8>)
1a005d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a005d94:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a005d98:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a005d9c:	2001      	movs	r0, #1
1a005d9e:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a005da2:	4b0a      	ldr	r3, [pc, #40]	; (1a005dcc <gpioInit+0x1a4>)
1a005da4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a005da8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a005dac:	4331      	orrs	r1, r6
1a005dae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a005db2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a005db4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a005db8:	2100      	movs	r1, #0
1a005dba:	5499      	strb	r1, [r3, r2]
1a005dbc:	e763      	b.n	1a005c86 <gpioInit+0x5e>
	  return FALSE;
1a005dbe:	2000      	movs	r0, #0
1a005dc0:	4770      	bx	lr
	  return FALSE;
1a005dc2:	2000      	movs	r0, #0
}
1a005dc4:	4770      	bx	lr
      ret_val = 0;
1a005dc6:	2000      	movs	r0, #0
1a005dc8:	e75d      	b.n	1a005c86 <gpioInit+0x5e>
1a005dca:	bf00      	nop
1a005dcc:	400f4000 	.word	0x400f4000
1a005dd0:	40086000 	.word	0x40086000

1a005dd4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a005dd4:	f110 0f02 	cmn.w	r0, #2
1a005dd8:	d02d      	beq.n	1a005e36 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a005dda:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005dde:	d02c      	beq.n	1a005e3a <gpioWrite+0x66>
{
1a005de0:	b510      	push	{r4, lr}
1a005de2:	b084      	sub	sp, #16
1a005de4:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a005de6:	2300      	movs	r3, #0
1a005de8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a005dec:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a005df0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a005df4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a005df8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a005dfc:	f10d 030b 	add.w	r3, sp, #11
1a005e00:	9301      	str	r3, [sp, #4]
1a005e02:	ab03      	add	r3, sp, #12
1a005e04:	9300      	str	r3, [sp, #0]
1a005e06:	f10d 030d 	add.w	r3, sp, #13
1a005e0a:	f10d 020e 	add.w	r2, sp, #14
1a005e0e:	f10d 010f 	add.w	r1, sp, #15
1a005e12:	f7ff feef 	bl	1a005bf4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a005e16:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a005e1a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a005e1e:	1c21      	adds	r1, r4, #0
1a005e20:	bf18      	it	ne
1a005e22:	2101      	movne	r1, #1
1a005e24:	015b      	lsls	r3, r3, #5
1a005e26:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a005e2a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a005e2e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a005e30:	2001      	movs	r0, #1
}
1a005e32:	b004      	add	sp, #16
1a005e34:	bd10      	pop	{r4, pc}
	  return FALSE;
1a005e36:	2000      	movs	r0, #0
1a005e38:	4770      	bx	lr
	  return FALSE;
1a005e3a:	2000      	movs	r0, #0
}
1a005e3c:	4770      	bx	lr

1a005e3e <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a005e3e:	f110 0f02 	cmn.w	r0, #2
1a005e42:	d02c      	beq.n	1a005e9e <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a005e44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005e48:	d02b      	beq.n	1a005ea2 <gpioRead+0x64>
{
1a005e4a:	b500      	push	{lr}
1a005e4c:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a005e4e:	2300      	movs	r3, #0
1a005e50:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a005e54:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a005e58:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a005e5c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a005e60:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a005e64:	f10d 030b 	add.w	r3, sp, #11
1a005e68:	9301      	str	r3, [sp, #4]
1a005e6a:	ab03      	add	r3, sp, #12
1a005e6c:	9300      	str	r3, [sp, #0]
1a005e6e:	f10d 030d 	add.w	r3, sp, #13
1a005e72:	f10d 020e 	add.w	r2, sp, #14
1a005e76:	f10d 010f 	add.w	r1, sp, #15
1a005e7a:	f7ff febb 	bl	1a005bf4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a005e7e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a005e82:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a005e86:	015b      	lsls	r3, r3, #5
1a005e88:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a005e8c:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a005e90:	5c98      	ldrb	r0, [r3, r2]
1a005e92:	3000      	adds	r0, #0
1a005e94:	bf18      	it	ne
1a005e96:	2001      	movne	r0, #1

   return ret_val;
}
1a005e98:	b005      	add	sp, #20
1a005e9a:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a005e9e:	2001      	movs	r0, #1
1a005ea0:	4770      	bx	lr
      return FALSE;
1a005ea2:	2000      	movs	r0, #0
}
1a005ea4:	4770      	bx	lr

1a005ea6 <gpioToggle>:
{
1a005ea6:	b510      	push	{r4, lr}
1a005ea8:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a005eaa:	f7ff ffc8 	bl	1a005e3e <gpioRead>
1a005eae:	fab0 f180 	clz	r1, r0
1a005eb2:	0949      	lsrs	r1, r1, #5
1a005eb4:	4620      	mov	r0, r4
1a005eb6:	f7ff ff8d 	bl	1a005dd4 <gpioWrite>
}
1a005eba:	bd10      	pop	{r4, pc}

1a005ebc <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a005ebc:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a005ebe:	4b04      	ldr	r3, [pc, #16]	; (1a005ed0 <USB0_IRQHandler+0x14>)
1a005ec0:	681b      	ldr	r3, [r3, #0]
1a005ec2:	681b      	ldr	r3, [r3, #0]
1a005ec4:	68db      	ldr	r3, [r3, #12]
1a005ec6:	4a03      	ldr	r2, [pc, #12]	; (1a005ed4 <USB0_IRQHandler+0x18>)
1a005ec8:	6810      	ldr	r0, [r2, #0]
1a005eca:	4798      	blx	r3
}
1a005ecc:	bd08      	pop	{r3, pc}
1a005ece:	bf00      	nop
1a005ed0:	100065c4 	.word	0x100065c4
1a005ed4:	100061f0 	.word	0x100061f0

1a005ed8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a005ed8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a005eda:	f7ff faf9 	bl	1a0054d0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a005ede:	4b18      	ldr	r3, [pc, #96]	; (1a005f40 <boardInit+0x68>)
1a005ee0:	6818      	ldr	r0, [r3, #0]
1a005ee2:	f7ff fc43 	bl	1a00576c <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a005ee6:	2105      	movs	r1, #5
1a005ee8:	2000      	movs	r0, #0
1a005eea:	f7ff fe9d 	bl	1a005c28 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a005eee:	2100      	movs	r1, #0
1a005ef0:	2024      	movs	r0, #36	; 0x24
1a005ef2:	f7ff fe99 	bl	1a005c28 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a005ef6:	2100      	movs	r1, #0
1a005ef8:	2025      	movs	r0, #37	; 0x25
1a005efa:	f7ff fe95 	bl	1a005c28 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a005efe:	2100      	movs	r1, #0
1a005f00:	2026      	movs	r0, #38	; 0x26
1a005f02:	f7ff fe91 	bl	1a005c28 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a005f06:	2100      	movs	r1, #0
1a005f08:	2027      	movs	r0, #39	; 0x27
1a005f0a:	f7ff fe8d 	bl	1a005c28 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a005f0e:	2101      	movs	r1, #1
1a005f10:	2028      	movs	r0, #40	; 0x28
1a005f12:	f7ff fe89 	bl	1a005c28 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a005f16:	2101      	movs	r1, #1
1a005f18:	2029      	movs	r0, #41	; 0x29
1a005f1a:	f7ff fe85 	bl	1a005c28 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a005f1e:	2101      	movs	r1, #1
1a005f20:	202a      	movs	r0, #42	; 0x2a
1a005f22:	f7ff fe81 	bl	1a005c28 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a005f26:	2101      	movs	r1, #1
1a005f28:	202b      	movs	r0, #43	; 0x2b
1a005f2a:	f7ff fe7d 	bl	1a005c28 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a005f2e:	2101      	movs	r1, #1
1a005f30:	202c      	movs	r0, #44	; 0x2c
1a005f32:	f7ff fe79 	bl	1a005c28 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a005f36:	2101      	movs	r1, #1
1a005f38:	202d      	movs	r0, #45	; 0x2d
1a005f3a:	f7ff fe75 	bl	1a005c28 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a005f3e:	bd08      	pop	{r3, pc}
1a005f40:	100065c0 	.word	0x100065c0

1a005f44 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a005f44:	b510      	push	{r4, lr}
1a005f46:	4604      	mov	r4, r0
1a005f48:	4610      	mov	r0, r2
1a005f4a:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a005f4c:	4b04      	ldr	r3, [pc, #16]	; (1a005f60 <delayInit+0x1c>)
1a005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005f52:	f000 f9f9 	bl	1a006348 <__aeabi_uldivmod>
1a005f56:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a005f5a:	2300      	movs	r3, #0
1a005f5c:	7423      	strb	r3, [r4, #16]
}
1a005f5e:	bd10      	pop	{r4, pc}
1a005f60:	10001c68 	.word	0x10001c68

1a005f64 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a005f64:	b570      	push	{r4, r5, r6, lr}
1a005f66:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a005f68:	7c05      	ldrb	r5, [r0, #16]
1a005f6a:	b195      	cbz	r5, 1a005f92 <delayRead+0x2e>
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a005f6c:	f7ff fdb7 	bl	1a005ade <tickRead>
1a005f70:	e9d4 2300 	ldrd	r2, r3, [r4]
1a005f74:	1a82      	subs	r2, r0, r2
1a005f76:	eb61 0303 	sbc.w	r3, r1, r3
1a005f7a:	4615      	mov	r5, r2
1a005f7c:	461e      	mov	r6, r3
1a005f7e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a005f82:	429e      	cmp	r6, r3
1a005f84:	bf08      	it	eq
1a005f86:	4295      	cmpeq	r5, r2
1a005f88:	d30b      	bcc.n	1a005fa2 <delayRead+0x3e>
         timeArrived = 1;
         delay->running = 0;
1a005f8a:	2300      	movs	r3, #0
1a005f8c:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a005f8e:	2501      	movs	r5, #1
1a005f90:	e005      	b.n	1a005f9e <delayRead+0x3a>
      delay->startTime = tickRead();
1a005f92:	f7ff fda4 	bl	1a005ade <tickRead>
1a005f96:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a005f9a:	2301      	movs	r3, #1
1a005f9c:	7423      	strb	r3, [r4, #16]
      }
   }

   return timeArrived;
}
1a005f9e:	4628      	mov	r0, r5
1a005fa0:	bd70      	pop	{r4, r5, r6, pc}
   bool_t timeArrived = 0;
1a005fa2:	2500      	movs	r5, #0
1a005fa4:	e7fb      	b.n	1a005f9e <delayRead+0x3a>
1a005fa6:	Address 0x000000001a005fa6 is out of bounds.


1a005fa8 <_outbyte>:
static int print(char **out, int *varg);

/*==================[internal data definition]===============================*/

void _outbyte(int c)
{
1a005fa8:	b508      	push	{r3, lr}
   uartWriteByte(UartPrintf, (char)c);
1a005faa:	b2c1      	uxtb	r1, r0
1a005fac:	4b02      	ldr	r3, [pc, #8]	; (1a005fb8 <_outbyte+0x10>)
1a005fae:	7818      	ldrb	r0, [r3, #0]
1a005fb0:	f7ff fd7e 	bl	1a005ab0 <uartWriteByte>
}
1a005fb4:	bd08      	pop	{r3, pc}
1a005fb6:	bf00      	nop
1a005fb8:	10001cb0 	.word	0x10001cb0

1a005fbc <outbyte>:

void outbyte(int c)
{
   static char prev = 0;
   if (c < ' ' && c != '\r' && c != '\n' && c != '\t' && c != '\b')
1a005fbc:	281f      	cmp	r0, #31
1a005fbe:	dc08      	bgt.n	1a005fd2 <outbyte+0x16>
1a005fc0:	280d      	cmp	r0, #13
1a005fc2:	d006      	beq.n	1a005fd2 <outbyte+0x16>
1a005fc4:	280a      	cmp	r0, #10
1a005fc6:	d004      	beq.n	1a005fd2 <outbyte+0x16>
1a005fc8:	2809      	cmp	r0, #9
1a005fca:	d002      	beq.n	1a005fd2 <outbyte+0x16>
1a005fcc:	2808      	cmp	r0, #8
1a005fce:	d000      	beq.n	1a005fd2 <outbyte+0x16>
1a005fd0:	4770      	bx	lr
{
1a005fd2:	b510      	push	{r4, lr}
1a005fd4:	4604      	mov	r4, r0
      return;
   if (c == '\n' && prev != '\r') _outbyte('\r');
1a005fd6:	280a      	cmp	r0, #10
1a005fd8:	d005      	beq.n	1a005fe6 <outbyte+0x2a>
   _outbyte(c);
1a005fda:	4620      	mov	r0, r4
1a005fdc:	f7ff ffe4 	bl	1a005fa8 <_outbyte>
   prev = c;
1a005fe0:	4b05      	ldr	r3, [pc, #20]	; (1a005ff8 <outbyte+0x3c>)
1a005fe2:	701c      	strb	r4, [r3, #0]
}
1a005fe4:	bd10      	pop	{r4, pc}
   if (c == '\n' && prev != '\r') _outbyte('\r');
1a005fe6:	4b04      	ldr	r3, [pc, #16]	; (1a005ff8 <outbyte+0x3c>)
1a005fe8:	781b      	ldrb	r3, [r3, #0]
1a005fea:	2b0d      	cmp	r3, #13
1a005fec:	d0f5      	beq.n	1a005fda <outbyte+0x1e>
1a005fee:	200d      	movs	r0, #13
1a005ff0:	f7ff ffda 	bl	1a005fa8 <_outbyte>
1a005ff4:	e7f1      	b.n	1a005fda <outbyte+0x1e>
1a005ff6:	bf00      	nop
1a005ff8:	100061f4 	.word	0x100061f4

1a005ffc <printchar>:
 * termina sacando un dato por la UART.
 * @param str
 * @param c
 */
static void printchar(char **str, int c)
{
1a005ffc:	b508      	push	{r3, lr}
   extern void putchar(int c);
   if (str) {
1a005ffe:	b128      	cbz	r0, 1a00600c <printchar+0x10>
      **str = c;
1a006000:	6802      	ldr	r2, [r0, #0]
1a006002:	7011      	strb	r1, [r2, #0]
      ++(*str);
1a006004:	6802      	ldr	r2, [r0, #0]
1a006006:	3201      	adds	r2, #1
1a006008:	6002      	str	r2, [r0, #0]
   } else {
      (void)putchar(c);
   }
}
1a00600a:	bd08      	pop	{r3, pc}
1a00600c:	4608      	mov	r0, r1
      (void)putchar(c);
1a00600e:	f7ff ffd5 	bl	1a005fbc <outbyte>
}
1a006012:	e7fa      	b.n	1a00600a <printchar+0xe>

1a006014 <prints>:

static int prints(char **out, const char *string, int width, int pad)
{
1a006014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006018:	4607      	mov	r7, r0
1a00601a:	460e      	mov	r6, r1
   register int pc = 0, padchar = ' ';

   if (width > 0) {
1a00601c:	1e15      	subs	r5, r2, #0
1a00601e:	dd02      	ble.n	1a006026 <prints+0x12>
      register int len = 0;
      register const char *ptr;
      for (ptr = string; *ptr; ++ptr) ++len;
1a006020:	460a      	mov	r2, r1
      register int len = 0;
1a006022:	2100      	movs	r1, #0
1a006024:	e008      	b.n	1a006038 <prints+0x24>
   register int pc = 0, padchar = ' ';
1a006026:	f04f 0820 	mov.w	r8, #32
      if (len >= width) width = 0;
      else width -= len;
      if (pad & PAD_ZERO) padchar = '0';
   }
   if (!(pad & PAD_RIGHT)) {
1a00602a:	f013 0401 	ands.w	r4, r3, #1
1a00602e:	d01a      	beq.n	1a006066 <prints+0x52>
   register int pc = 0, padchar = ' ';
1a006030:	2400      	movs	r4, #0
1a006032:	e020      	b.n	1a006076 <prints+0x62>
      for (ptr = string; *ptr; ++ptr) ++len;
1a006034:	3101      	adds	r1, #1
1a006036:	3201      	adds	r2, #1
1a006038:	7810      	ldrb	r0, [r2, #0]
1a00603a:	2800      	cmp	r0, #0
1a00603c:	d1fa      	bne.n	1a006034 <prints+0x20>
      if (len >= width) width = 0;
1a00603e:	42a9      	cmp	r1, r5
1a006040:	da06      	bge.n	1a006050 <prints+0x3c>
      else width -= len;
1a006042:	1a6d      	subs	r5, r5, r1
      if (pad & PAD_ZERO) padchar = '0';
1a006044:	f013 0f02 	tst.w	r3, #2
1a006048:	d104      	bne.n	1a006054 <prints+0x40>
   register int pc = 0, padchar = ' ';
1a00604a:	f04f 0820 	mov.w	r8, #32
1a00604e:	e7ec      	b.n	1a00602a <prints+0x16>
      if (len >= width) width = 0;
1a006050:	2500      	movs	r5, #0
1a006052:	e7f7      	b.n	1a006044 <prints+0x30>
      if (pad & PAD_ZERO) padchar = '0';
1a006054:	f04f 0830 	mov.w	r8, #48	; 0x30
1a006058:	e7e7      	b.n	1a00602a <prints+0x16>
      for ( ; width > 0; --width) {
         printchar (out, padchar);
1a00605a:	4641      	mov	r1, r8
1a00605c:	4638      	mov	r0, r7
1a00605e:	f7ff ffcd 	bl	1a005ffc <printchar>
         ++pc;
1a006062:	3401      	adds	r4, #1
      for ( ; width > 0; --width) {
1a006064:	3d01      	subs	r5, #1
1a006066:	2d00      	cmp	r5, #0
1a006068:	dcf7      	bgt.n	1a00605a <prints+0x46>
1a00606a:	e004      	b.n	1a006076 <prints+0x62>
      }
   }
   for ( ; *string ; ++string) {
      printchar (out, *string);
1a00606c:	4638      	mov	r0, r7
1a00606e:	f7ff ffc5 	bl	1a005ffc <printchar>
      ++pc;
1a006072:	3401      	adds	r4, #1
   for ( ; *string ; ++string) {
1a006074:	3601      	adds	r6, #1
1a006076:	7831      	ldrb	r1, [r6, #0]
1a006078:	2900      	cmp	r1, #0
1a00607a:	d1f7      	bne.n	1a00606c <prints+0x58>
1a00607c:	e005      	b.n	1a00608a <prints+0x76>
   }
   for ( ; width > 0; --width) {
      printchar (out, padchar);
1a00607e:	4641      	mov	r1, r8
1a006080:	4638      	mov	r0, r7
1a006082:	f7ff ffbb 	bl	1a005ffc <printchar>
      ++pc;
1a006086:	3401      	adds	r4, #1
   for ( ; width > 0; --width) {
1a006088:	3d01      	subs	r5, #1
1a00608a:	2d00      	cmp	r5, #0
1a00608c:	dcf7      	bgt.n	1a00607e <prints+0x6a>
   }
   return pc;
}
1a00608e:	4620      	mov	r0, r4
1a006090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a006094 <printi>:

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
1a006094:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006096:	b085      	sub	sp, #20
1a006098:	4607      	mov	r7, r0
1a00609a:	980c      	ldr	r0, [sp, #48]	; 0x30
   char print_buf[PRINT_BUF_LEN];
   register char *s;
   register int t, neg = 0, pc = 0;
   register unsigned int u = i;

   if (i == 0) {
1a00609c:	b151      	cbz	r1, 1a0060b4 <printi+0x20>
1a00609e:	461e      	mov	r6, r3
1a0060a0:	460c      	mov	r4, r1
      print_buf[0] = '0';
      print_buf[1] = '\0';
      return prints (out, print_buf, width, pad);
   }

   if (sg && b == 10 && i < 0) {
1a0060a2:	b113      	cbz	r3, 1a0060aa <printi+0x16>
1a0060a4:	2a0a      	cmp	r2, #10
1a0060a6:	d012      	beq.n	1a0060ce <printi+0x3a>
   register int t, neg = 0, pc = 0;
1a0060a8:	2600      	movs	r6, #0
      neg = 1;
      u = -i;
   }

   s = print_buf + PRINT_BUF_LEN-1;
   *s = '\0';
1a0060aa:	ad04      	add	r5, sp, #16
1a0060ac:	2300      	movs	r3, #0
1a0060ae:	f805 3d01 	strb.w	r3, [r5, #-1]!

   while (u) {
1a0060b2:	e018      	b.n	1a0060e6 <printi+0x52>
      print_buf[0] = '0';
1a0060b4:	2330      	movs	r3, #48	; 0x30
1a0060b6:	f88d 3004 	strb.w	r3, [sp, #4]
      print_buf[1] = '\0';
1a0060ba:	2300      	movs	r3, #0
1a0060bc:	f88d 3005 	strb.w	r3, [sp, #5]
      return prints (out, print_buf, width, pad);
1a0060c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0060c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a0060c4:	a901      	add	r1, sp, #4
1a0060c6:	4638      	mov	r0, r7
1a0060c8:	f7ff ffa4 	bl	1a006014 <prints>
1a0060cc:	e029      	b.n	1a006122 <printi+0x8e>
   if (sg && b == 10 && i < 0) {
1a0060ce:	2900      	cmp	r1, #0
1a0060d0:	db01      	blt.n	1a0060d6 <printi+0x42>
   register int t, neg = 0, pc = 0;
1a0060d2:	2600      	movs	r6, #0
1a0060d4:	e7e9      	b.n	1a0060aa <printi+0x16>
      u = -i;
1a0060d6:	424c      	negs	r4, r1
      neg = 1;
1a0060d8:	2601      	movs	r6, #1
1a0060da:	e7e6      	b.n	1a0060aa <printi+0x16>
      t = u % b;
      if( t >= 10 )
         t += letbase - '0' - 10;
      *--s = t + '0';
1a0060dc:	3330      	adds	r3, #48	; 0x30
1a0060de:	f805 3d01 	strb.w	r3, [r5, #-1]!
      u /= b;
1a0060e2:	fbb4 f4f2 	udiv	r4, r4, r2
   while (u) {
1a0060e6:	b14c      	cbz	r4, 1a0060fc <printi+0x68>
      t = u % b;
1a0060e8:	fbb4 f3f2 	udiv	r3, r4, r2
1a0060ec:	fb02 4313 	mls	r3, r2, r3, r4
      if( t >= 10 )
1a0060f0:	2b09      	cmp	r3, #9
1a0060f2:	ddf3      	ble.n	1a0060dc <printi+0x48>
         t += letbase - '0' - 10;
1a0060f4:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
1a0060f8:	440b      	add	r3, r1
1a0060fa:	e7ef      	b.n	1a0060dc <printi+0x48>
   }

   if (neg) {
1a0060fc:	b156      	cbz	r6, 1a006114 <printi+0x80>
      if( width && (pad & PAD_ZERO) ) {
1a0060fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006100:	b11b      	cbz	r3, 1a00610a <printi+0x76>
1a006102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006104:	f013 0f02 	tst.w	r3, #2
1a006108:	d10d      	bne.n	1a006126 <printi+0x92>
         printchar (out, '-');
         ++pc;
         --width;
      } else {
         *--s = '-';
1a00610a:	232d      	movs	r3, #45	; 0x2d
1a00610c:	f805 3c01 	strb.w	r3, [r5, #-1]
1a006110:	3d01      	subs	r5, #1
   register int t, neg = 0, pc = 0;
1a006112:	2600      	movs	r6, #0
      }
   }

   return pc + prints (out, s, width, pad);
1a006114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a006116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a006118:	4629      	mov	r1, r5
1a00611a:	4638      	mov	r0, r7
1a00611c:	f7ff ff7a 	bl	1a006014 <prints>
1a006120:	4430      	add	r0, r6
}
1a006122:	b005      	add	sp, #20
1a006124:	bdf0      	pop	{r4, r5, r6, r7, pc}
         printchar (out, '-');
1a006126:	212d      	movs	r1, #45	; 0x2d
1a006128:	4638      	mov	r0, r7
1a00612a:	f7ff ff67 	bl	1a005ffc <printchar>
         --width;
1a00612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a006130:	3b01      	subs	r3, #1
1a006132:	930a      	str	r3, [sp, #40]	; 0x28
1a006134:	e7ee      	b.n	1a006114 <printi+0x80>
1a006136:	Address 0x000000001a006136 is out of bounds.


1a006138 <print>:

static int print(char **out, int *varg)
{
1a006138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00613c:	b086      	sub	sp, #24
1a00613e:	4606      	mov	r6, r0
   register int width, pad;
   register int pc = 0;
   register char *format = (char *)(*varg++);
1a006140:	1d0f      	adds	r7, r1, #4
1a006142:	680c      	ldr	r4, [r1, #0]
   register int pc = 0;
1a006144:	2500      	movs	r5, #0
   char scr[2];

   for (; *format != 0; ++format) {
1a006146:	e081      	b.n	1a00624c <print+0x114>
         ++format;
         width = pad = 0;
         if (*format == '\0') break;
         if (*format == '%') goto out;
         if (*format == '-') {
            ++format;
1a006148:	1ca2      	adds	r2, r4, #2
            pad = PAD_RIGHT;
1a00614a:	2301      	movs	r3, #1
1a00614c:	e08b      	b.n	1a006266 <print+0x12e>
         }
         while (*format == '0') {
            ++format;
1a00614e:	3401      	adds	r4, #1
            pad |= PAD_ZERO;
1a006150:	f043 0302 	orr.w	r3, r3, #2
         while (*format == '0') {
1a006154:	7822      	ldrb	r2, [r4, #0]
1a006156:	2a30      	cmp	r2, #48	; 0x30
1a006158:	d0f9      	beq.n	1a00614e <print+0x16>
         width = pad = 0;
1a00615a:	2200      	movs	r2, #0
1a00615c:	e006      	b.n	1a00616c <print+0x34>
         }
         for ( ; *format >= '0' && *format <= '9'; ++format) {
            width *= 10;
1a00615e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a006162:	0050      	lsls	r0, r2, #1
            width += *format - '0';
1a006164:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a006168:	4402      	add	r2, r0
         for ( ; *format >= '0' && *format <= '9'; ++format) {
1a00616a:	3401      	adds	r4, #1
1a00616c:	7821      	ldrb	r1, [r4, #0]
1a00616e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
1a006172:	b2c0      	uxtb	r0, r0
1a006174:	2809      	cmp	r0, #9
1a006176:	d9f2      	bls.n	1a00615e <print+0x26>
         }
         if( *format == 's' ) {
1a006178:	2973      	cmp	r1, #115	; 0x73
1a00617a:	d018      	beq.n	1a0061ae <print+0x76>
            register char *s = *((char **)varg++);
            pc += prints (out, s?s:"(null)", width, pad);
            continue;
         }
         if( *format == 'd' ) {
1a00617c:	2964      	cmp	r1, #100	; 0x64
1a00617e:	d022      	beq.n	1a0061c6 <print+0x8e>
            pc += printi (out, *varg++, 10, 1, width, pad, 'a');
            continue;
         }
         if( *format == 'x' ) {
1a006180:	2978      	cmp	r1, #120	; 0x78
1a006182:	d02f      	beq.n	1a0061e4 <print+0xac>
            pc += printi (out, *varg++, 16, 0, width, pad, 'a');
            continue;
         }
         if( *format == 'X' ) {
1a006184:	2958      	cmp	r1, #88	; 0x58
1a006186:	d03c      	beq.n	1a006202 <print+0xca>
            pc += printi (out, *varg++, 16, 0, width, pad, 'A');
            continue;
         }
         if( *format == 'u' ) {
1a006188:	2975      	cmp	r1, #117	; 0x75
1a00618a:	d049      	beq.n	1a006220 <print+0xe8>
            pc += printi (out, *varg++, 10, 0, width, pad, 'a');
            continue;
         }
         if( *format == 'c' ) {
1a00618c:	2963      	cmp	r1, #99	; 0x63
1a00618e:	d15c      	bne.n	1a00624a <print+0x112>
            /* char are converted to int then pushed on the stack */
            scr[0] = *varg++;
1a006190:	f107 0804 	add.w	r8, r7, #4
1a006194:	6839      	ldr	r1, [r7, #0]
1a006196:	f88d 1014 	strb.w	r1, [sp, #20]
            scr[1] = '\0';
1a00619a:	2100      	movs	r1, #0
1a00619c:	f88d 1015 	strb.w	r1, [sp, #21]
            pc += prints (out, scr, width, pad);
1a0061a0:	a905      	add	r1, sp, #20
1a0061a2:	4630      	mov	r0, r6
1a0061a4:	f7ff ff36 	bl	1a006014 <prints>
1a0061a8:	4405      	add	r5, r0
            scr[0] = *varg++;
1a0061aa:	4647      	mov	r7, r8
            continue;
1a0061ac:	e04d      	b.n	1a00624a <print+0x112>
            register char *s = *((char **)varg++);
1a0061ae:	f107 0804 	add.w	r8, r7, #4
1a0061b2:	6839      	ldr	r1, [r7, #0]
            pc += prints (out, s?s:"(null)", width, pad);
1a0061b4:	b129      	cbz	r1, 1a0061c2 <print+0x8a>
1a0061b6:	4630      	mov	r0, r6
1a0061b8:	f7ff ff2c 	bl	1a006014 <prints>
1a0061bc:	4405      	add	r5, r0
            register char *s = *((char **)varg++);
1a0061be:	4647      	mov	r7, r8
            continue;
1a0061c0:	e043      	b.n	1a00624a <print+0x112>
            pc += prints (out, s?s:"(null)", width, pad);
1a0061c2:	492e      	ldr	r1, [pc, #184]	; (1a00627c <print+0x144>)
1a0061c4:	e7f7      	b.n	1a0061b6 <print+0x7e>
            pc += printi (out, *varg++, 10, 1, width, pad, 'a');
1a0061c6:	f107 0804 	add.w	r8, r7, #4
1a0061ca:	6839      	ldr	r1, [r7, #0]
1a0061cc:	2061      	movs	r0, #97	; 0x61
1a0061ce:	9002      	str	r0, [sp, #8]
1a0061d0:	9301      	str	r3, [sp, #4]
1a0061d2:	9200      	str	r2, [sp, #0]
1a0061d4:	2301      	movs	r3, #1
1a0061d6:	220a      	movs	r2, #10
1a0061d8:	4630      	mov	r0, r6
1a0061da:	f7ff ff5b 	bl	1a006094 <printi>
1a0061de:	4405      	add	r5, r0
1a0061e0:	4647      	mov	r7, r8
            continue;
1a0061e2:	e032      	b.n	1a00624a <print+0x112>
            pc += printi (out, *varg++, 16, 0, width, pad, 'a');
1a0061e4:	f107 0804 	add.w	r8, r7, #4
1a0061e8:	6839      	ldr	r1, [r7, #0]
1a0061ea:	2061      	movs	r0, #97	; 0x61
1a0061ec:	9002      	str	r0, [sp, #8]
1a0061ee:	9301      	str	r3, [sp, #4]
1a0061f0:	9200      	str	r2, [sp, #0]
1a0061f2:	2300      	movs	r3, #0
1a0061f4:	2210      	movs	r2, #16
1a0061f6:	4630      	mov	r0, r6
1a0061f8:	f7ff ff4c 	bl	1a006094 <printi>
1a0061fc:	4405      	add	r5, r0
1a0061fe:	4647      	mov	r7, r8
            continue;
1a006200:	e023      	b.n	1a00624a <print+0x112>
            pc += printi (out, *varg++, 16, 0, width, pad, 'A');
1a006202:	f107 0804 	add.w	r8, r7, #4
1a006206:	6839      	ldr	r1, [r7, #0]
1a006208:	2041      	movs	r0, #65	; 0x41
1a00620a:	9002      	str	r0, [sp, #8]
1a00620c:	9301      	str	r3, [sp, #4]
1a00620e:	9200      	str	r2, [sp, #0]
1a006210:	2300      	movs	r3, #0
1a006212:	2210      	movs	r2, #16
1a006214:	4630      	mov	r0, r6
1a006216:	f7ff ff3d 	bl	1a006094 <printi>
1a00621a:	4405      	add	r5, r0
1a00621c:	4647      	mov	r7, r8
            continue;
1a00621e:	e014      	b.n	1a00624a <print+0x112>
            pc += printi (out, *varg++, 10, 0, width, pad, 'a');
1a006220:	f107 0804 	add.w	r8, r7, #4
1a006224:	6839      	ldr	r1, [r7, #0]
1a006226:	2061      	movs	r0, #97	; 0x61
1a006228:	9002      	str	r0, [sp, #8]
1a00622a:	9301      	str	r3, [sp, #4]
1a00622c:	9200      	str	r2, [sp, #0]
1a00622e:	2300      	movs	r3, #0
1a006230:	220a      	movs	r2, #10
1a006232:	4630      	mov	r0, r6
1a006234:	f7ff ff2e 	bl	1a006094 <printi>
1a006238:	4405      	add	r5, r0
1a00623a:	4647      	mov	r7, r8
            continue;
1a00623c:	e005      	b.n	1a00624a <print+0x112>
         ++format;
1a00623e:	4614      	mov	r4, r2
         }
      } else {
out:
         printchar (out, *format);
1a006240:	7821      	ldrb	r1, [r4, #0]
1a006242:	4630      	mov	r0, r6
1a006244:	f7ff feda 	bl	1a005ffc <printchar>
         ++pc;
1a006248:	3501      	adds	r5, #1
   for (; *format != 0; ++format) {
1a00624a:	3401      	adds	r4, #1
1a00624c:	7823      	ldrb	r3, [r4, #0]
1a00624e:	b163      	cbz	r3, 1a00626a <print+0x132>
      if (*format == '%') {
1a006250:	2b25      	cmp	r3, #37	; 0x25
1a006252:	d1f5      	bne.n	1a006240 <print+0x108>
         ++format;
1a006254:	1c62      	adds	r2, r4, #1
         if (*format == '\0') break;
1a006256:	7863      	ldrb	r3, [r4, #1]
1a006258:	b13b      	cbz	r3, 1a00626a <print+0x132>
         if (*format == '%') goto out;
1a00625a:	2b25      	cmp	r3, #37	; 0x25
1a00625c:	d0ef      	beq.n	1a00623e <print+0x106>
         if (*format == '-') {
1a00625e:	2b2d      	cmp	r3, #45	; 0x2d
1a006260:	f43f af72 	beq.w	1a006148 <print+0x10>
         width = pad = 0;
1a006264:	2300      	movs	r3, #0
            pad = PAD_RIGHT;
1a006266:	4614      	mov	r4, r2
1a006268:	e774      	b.n	1a006154 <print+0x1c>
      }
   }
   if (out) **out = '\0';
1a00626a:	b116      	cbz	r6, 1a006272 <print+0x13a>
1a00626c:	6833      	ldr	r3, [r6, #0]
1a00626e:	2200      	movs	r2, #0
1a006270:	701a      	strb	r2, [r3, #0]
   return pc;
}
1a006272:	4628      	mov	r0, r5
1a006274:	b006      	add	sp, #24
1a006276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00627a:	bf00      	nop
1a00627c:	1a007cb0 	.word	0x1a007cb0

1a006280 <stdioPrintf>:
 * @param uartPrintf UART_USB, UART_232 o UART_485
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioPrintf(uartMap_t uartPrintf, const char *format, ...)
{
1a006280:	b40e      	push	{r1, r2, r3}
1a006282:	b500      	push	{lr}
   register int *varg = (int *)(&format);
   UartPrintf = uartPrintf;
1a006284:	4b04      	ldr	r3, [pc, #16]	; (1a006298 <stdioPrintf+0x18>)
1a006286:	7018      	strb	r0, [r3, #0]
   return print(0, varg);
1a006288:	a901      	add	r1, sp, #4
1a00628a:	2000      	movs	r0, #0
1a00628c:	f7ff ff54 	bl	1a006138 <print>
}
1a006290:	f85d eb04 	ldr.w	lr, [sp], #4
1a006294:	b003      	add	sp, #12
1a006296:	4770      	bx	lr
1a006298:	10001cb0 	.word	0x10001cb0

1a00629c <stdioSprintf>:
 * @param out el array a guardar los datos.
 * @param format el string formateado con argumentos.
 * @return TRUE si salio bien, FALSE caso contrario.
 */
int stdioSprintf(char *out, const char *format, ...)
{
1a00629c:	b40e      	push	{r1, r2, r3}
1a00629e:	b500      	push	{lr}
1a0062a0:	b082      	sub	sp, #8
1a0062a2:	ab02      	add	r3, sp, #8
1a0062a4:	f843 0d04 	str.w	r0, [r3, #-4]!
   register int *varg = (int *)(&format);
   return print(&out, varg);
1a0062a8:	a903      	add	r1, sp, #12
1a0062aa:	4618      	mov	r0, r3
1a0062ac:	f7ff ff44 	bl	1a006138 <print>
}
1a0062b0:	b002      	add	sp, #8
1a0062b2:	f85d eb04 	ldr.w	lr, [sp], #4
1a0062b6:	b003      	add	sp, #12
1a0062b8:	4770      	bx	lr
1a0062ba:	Address 0x000000001a0062ba is out of bounds.


1a0062bc <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0062bc:	2301      	movs	r3, #1
1a0062be:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0062c2:	4b01      	ldr	r3, [pc, #4]	; (1a0062c8 <clearInterrupt+0xc>)
1a0062c4:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0062c6:	4770      	bx	lr
1a0062c8:	40087000 	.word	0x40087000

1a0062cc <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0062ce:	4b12      	ldr	r3, [pc, #72]	; (1a006318 <serveInterrupt+0x4c>)
1a0062d0:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0062d2:	4b12      	ldr	r3, [pc, #72]	; (1a00631c <serveInterrupt+0x50>)
1a0062d4:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0062d6:	2301      	movs	r3, #1
1a0062d8:	4083      	lsls	r3, r0
1a0062da:	420b      	tst	r3, r1
1a0062dc:	d111      	bne.n	1a006302 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0062de:	4910      	ldr	r1, [pc, #64]	; (1a006320 <serveInterrupt+0x54>)
1a0062e0:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0062e2:	4d10      	ldr	r5, [pc, #64]	; (1a006324 <serveInterrupt+0x58>)
1a0062e4:	0051      	lsls	r1, r2, #1
1a0062e6:	188f      	adds	r7, r1, r2
1a0062e8:	00fc      	lsls	r4, r7, #3
1a0062ea:	4627      	mov	r7, r4
1a0062ec:	442c      	add	r4, r5
1a0062ee:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0062f0:	6864      	ldr	r4, [r4, #4]
1a0062f2:	1b36      	subs	r6, r6, r4
1a0062f4:	443d      	add	r5, r7
1a0062f6:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0062f8:	4a08      	ldr	r2, [pc, #32]	; (1a00631c <serveInterrupt+0x50>)
1a0062fa:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0062fc:	f7ff ffde 	bl	1a0062bc <clearInterrupt>
}
1a006300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006302:	4907      	ldr	r1, [pc, #28]	; (1a006320 <serveInterrupt+0x54>)
1a006304:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a006306:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00630a:	00d1      	lsls	r1, r2, #3
1a00630c:	4a05      	ldr	r2, [pc, #20]	; (1a006324 <serveInterrupt+0x58>)
1a00630e:	440a      	add	r2, r1
1a006310:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a006312:	4a02      	ldr	r2, [pc, #8]	; (1a00631c <serveInterrupt+0x50>)
1a006314:	61d3      	str	r3, [r2, #28]
1a006316:	e7f1      	b.n	1a0062fc <serveInterrupt+0x30>
1a006318:	1a007cb8 	.word	0x1a007cb8
1a00631c:	40087000 	.word	0x40087000
1a006320:	40084000 	.word	0x40084000
1a006324:	10001cb4 	.word	0x10001cb4

1a006328 <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a006328:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a00632a:	2000      	movs	r0, #0
1a00632c:	f7ff ffce 	bl	1a0062cc <serveInterrupt>
}
1a006330:	bd08      	pop	{r3, pc}

1a006332 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a006332:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a006334:	2001      	movs	r0, #1
1a006336:	f7ff ffc9 	bl	1a0062cc <serveInterrupt>
}
1a00633a:	bd08      	pop	{r3, pc}

1a00633c <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a00633c:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a00633e:	2002      	movs	r0, #2
1a006340:	f7ff ffc4 	bl	1a0062cc <serveInterrupt>
}
1a006344:	bd08      	pop	{r3, pc}
1a006346:	Address 0x000000001a006346 is out of bounds.


1a006348 <__aeabi_uldivmod>:
1a006348:	b953      	cbnz	r3, 1a006360 <__aeabi_uldivmod+0x18>
1a00634a:	b94a      	cbnz	r2, 1a006360 <__aeabi_uldivmod+0x18>
1a00634c:	2900      	cmp	r1, #0
1a00634e:	bf08      	it	eq
1a006350:	2800      	cmpeq	r0, #0
1a006352:	bf1c      	itt	ne
1a006354:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a006358:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00635c:	f000 b972 	b.w	1a006644 <__aeabi_idiv0>
1a006360:	f1ad 0c08 	sub.w	ip, sp, #8
1a006364:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a006368:	f000 f806 	bl	1a006378 <__udivmoddi4>
1a00636c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a006374:	b004      	add	sp, #16
1a006376:	4770      	bx	lr

1a006378 <__udivmoddi4>:
1a006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00637c:	9e08      	ldr	r6, [sp, #32]
1a00637e:	4604      	mov	r4, r0
1a006380:	4688      	mov	r8, r1
1a006382:	2b00      	cmp	r3, #0
1a006384:	d14b      	bne.n	1a00641e <__udivmoddi4+0xa6>
1a006386:	428a      	cmp	r2, r1
1a006388:	4615      	mov	r5, r2
1a00638a:	d967      	bls.n	1a00645c <__udivmoddi4+0xe4>
1a00638c:	fab2 f282 	clz	r2, r2
1a006390:	b14a      	cbz	r2, 1a0063a6 <__udivmoddi4+0x2e>
1a006392:	f1c2 0720 	rsb	r7, r2, #32
1a006396:	fa01 f302 	lsl.w	r3, r1, r2
1a00639a:	fa20 f707 	lsr.w	r7, r0, r7
1a00639e:	4095      	lsls	r5, r2
1a0063a0:	ea47 0803 	orr.w	r8, r7, r3
1a0063a4:	4094      	lsls	r4, r2
1a0063a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0063aa:	0c23      	lsrs	r3, r4, #16
1a0063ac:	fbb8 f7fe 	udiv	r7, r8, lr
1a0063b0:	fa1f fc85 	uxth.w	ip, r5
1a0063b4:	fb0e 8817 	mls	r8, lr, r7, r8
1a0063b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0063bc:	fb07 f10c 	mul.w	r1, r7, ip
1a0063c0:	4299      	cmp	r1, r3
1a0063c2:	d909      	bls.n	1a0063d8 <__udivmoddi4+0x60>
1a0063c4:	18eb      	adds	r3, r5, r3
1a0063c6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0063ca:	f080 811b 	bcs.w	1a006604 <__udivmoddi4+0x28c>
1a0063ce:	4299      	cmp	r1, r3
1a0063d0:	f240 8118 	bls.w	1a006604 <__udivmoddi4+0x28c>
1a0063d4:	3f02      	subs	r7, #2
1a0063d6:	442b      	add	r3, r5
1a0063d8:	1a5b      	subs	r3, r3, r1
1a0063da:	b2a4      	uxth	r4, r4
1a0063dc:	fbb3 f0fe 	udiv	r0, r3, lr
1a0063e0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0063e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0063e8:	fb00 fc0c 	mul.w	ip, r0, ip
1a0063ec:	45a4      	cmp	ip, r4
1a0063ee:	d909      	bls.n	1a006404 <__udivmoddi4+0x8c>
1a0063f0:	192c      	adds	r4, r5, r4
1a0063f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0063f6:	f080 8107 	bcs.w	1a006608 <__udivmoddi4+0x290>
1a0063fa:	45a4      	cmp	ip, r4
1a0063fc:	f240 8104 	bls.w	1a006608 <__udivmoddi4+0x290>
1a006400:	3802      	subs	r0, #2
1a006402:	442c      	add	r4, r5
1a006404:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a006408:	eba4 040c 	sub.w	r4, r4, ip
1a00640c:	2700      	movs	r7, #0
1a00640e:	b11e      	cbz	r6, 1a006418 <__udivmoddi4+0xa0>
1a006410:	40d4      	lsrs	r4, r2
1a006412:	2300      	movs	r3, #0
1a006414:	e9c6 4300 	strd	r4, r3, [r6]
1a006418:	4639      	mov	r1, r7
1a00641a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00641e:	428b      	cmp	r3, r1
1a006420:	d909      	bls.n	1a006436 <__udivmoddi4+0xbe>
1a006422:	2e00      	cmp	r6, #0
1a006424:	f000 80eb 	beq.w	1a0065fe <__udivmoddi4+0x286>
1a006428:	2700      	movs	r7, #0
1a00642a:	e9c6 0100 	strd	r0, r1, [r6]
1a00642e:	4638      	mov	r0, r7
1a006430:	4639      	mov	r1, r7
1a006432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006436:	fab3 f783 	clz	r7, r3
1a00643a:	2f00      	cmp	r7, #0
1a00643c:	d147      	bne.n	1a0064ce <__udivmoddi4+0x156>
1a00643e:	428b      	cmp	r3, r1
1a006440:	d302      	bcc.n	1a006448 <__udivmoddi4+0xd0>
1a006442:	4282      	cmp	r2, r0
1a006444:	f200 80fa 	bhi.w	1a00663c <__udivmoddi4+0x2c4>
1a006448:	1a84      	subs	r4, r0, r2
1a00644a:	eb61 0303 	sbc.w	r3, r1, r3
1a00644e:	2001      	movs	r0, #1
1a006450:	4698      	mov	r8, r3
1a006452:	2e00      	cmp	r6, #0
1a006454:	d0e0      	beq.n	1a006418 <__udivmoddi4+0xa0>
1a006456:	e9c6 4800 	strd	r4, r8, [r6]
1a00645a:	e7dd      	b.n	1a006418 <__udivmoddi4+0xa0>
1a00645c:	b902      	cbnz	r2, 1a006460 <__udivmoddi4+0xe8>
1a00645e:	deff      	udf	#255	; 0xff
1a006460:	fab2 f282 	clz	r2, r2
1a006464:	2a00      	cmp	r2, #0
1a006466:	f040 808f 	bne.w	1a006588 <__udivmoddi4+0x210>
1a00646a:	1b49      	subs	r1, r1, r5
1a00646c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006470:	fa1f f885 	uxth.w	r8, r5
1a006474:	2701      	movs	r7, #1
1a006476:	fbb1 fcfe 	udiv	ip, r1, lr
1a00647a:	0c23      	lsrs	r3, r4, #16
1a00647c:	fb0e 111c 	mls	r1, lr, ip, r1
1a006480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006484:	fb08 f10c 	mul.w	r1, r8, ip
1a006488:	4299      	cmp	r1, r3
1a00648a:	d907      	bls.n	1a00649c <__udivmoddi4+0x124>
1a00648c:	18eb      	adds	r3, r5, r3
1a00648e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a006492:	d202      	bcs.n	1a00649a <__udivmoddi4+0x122>
1a006494:	4299      	cmp	r1, r3
1a006496:	f200 80cd 	bhi.w	1a006634 <__udivmoddi4+0x2bc>
1a00649a:	4684      	mov	ip, r0
1a00649c:	1a59      	subs	r1, r3, r1
1a00649e:	b2a3      	uxth	r3, r4
1a0064a0:	fbb1 f0fe 	udiv	r0, r1, lr
1a0064a4:	fb0e 1410 	mls	r4, lr, r0, r1
1a0064a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0064ac:	fb08 f800 	mul.w	r8, r8, r0
1a0064b0:	45a0      	cmp	r8, r4
1a0064b2:	d907      	bls.n	1a0064c4 <__udivmoddi4+0x14c>
1a0064b4:	192c      	adds	r4, r5, r4
1a0064b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0064ba:	d202      	bcs.n	1a0064c2 <__udivmoddi4+0x14a>
1a0064bc:	45a0      	cmp	r8, r4
1a0064be:	f200 80b6 	bhi.w	1a00662e <__udivmoddi4+0x2b6>
1a0064c2:	4618      	mov	r0, r3
1a0064c4:	eba4 0408 	sub.w	r4, r4, r8
1a0064c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0064cc:	e79f      	b.n	1a00640e <__udivmoddi4+0x96>
1a0064ce:	f1c7 0c20 	rsb	ip, r7, #32
1a0064d2:	40bb      	lsls	r3, r7
1a0064d4:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0064d8:	ea4e 0e03 	orr.w	lr, lr, r3
1a0064dc:	fa01 f407 	lsl.w	r4, r1, r7
1a0064e0:	fa20 f50c 	lsr.w	r5, r0, ip
1a0064e4:	fa21 f30c 	lsr.w	r3, r1, ip
1a0064e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0064ec:	4325      	orrs	r5, r4
1a0064ee:	fbb3 f9f8 	udiv	r9, r3, r8
1a0064f2:	0c2c      	lsrs	r4, r5, #16
1a0064f4:	fb08 3319 	mls	r3, r8, r9, r3
1a0064f8:	fa1f fa8e 	uxth.w	sl, lr
1a0064fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a006500:	fb09 f40a 	mul.w	r4, r9, sl
1a006504:	429c      	cmp	r4, r3
1a006506:	fa02 f207 	lsl.w	r2, r2, r7
1a00650a:	fa00 f107 	lsl.w	r1, r0, r7
1a00650e:	d90b      	bls.n	1a006528 <__udivmoddi4+0x1b0>
1a006510:	eb1e 0303 	adds.w	r3, lr, r3
1a006514:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a006518:	f080 8087 	bcs.w	1a00662a <__udivmoddi4+0x2b2>
1a00651c:	429c      	cmp	r4, r3
1a00651e:	f240 8084 	bls.w	1a00662a <__udivmoddi4+0x2b2>
1a006522:	f1a9 0902 	sub.w	r9, r9, #2
1a006526:	4473      	add	r3, lr
1a006528:	1b1b      	subs	r3, r3, r4
1a00652a:	b2ad      	uxth	r5, r5
1a00652c:	fbb3 f0f8 	udiv	r0, r3, r8
1a006530:	fb08 3310 	mls	r3, r8, r0, r3
1a006534:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a006538:	fb00 fa0a 	mul.w	sl, r0, sl
1a00653c:	45a2      	cmp	sl, r4
1a00653e:	d908      	bls.n	1a006552 <__udivmoddi4+0x1da>
1a006540:	eb1e 0404 	adds.w	r4, lr, r4
1a006544:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006548:	d26b      	bcs.n	1a006622 <__udivmoddi4+0x2aa>
1a00654a:	45a2      	cmp	sl, r4
1a00654c:	d969      	bls.n	1a006622 <__udivmoddi4+0x2aa>
1a00654e:	3802      	subs	r0, #2
1a006550:	4474      	add	r4, lr
1a006552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a006556:	fba0 8902 	umull	r8, r9, r0, r2
1a00655a:	eba4 040a 	sub.w	r4, r4, sl
1a00655e:	454c      	cmp	r4, r9
1a006560:	46c2      	mov	sl, r8
1a006562:	464b      	mov	r3, r9
1a006564:	d354      	bcc.n	1a006610 <__udivmoddi4+0x298>
1a006566:	d051      	beq.n	1a00660c <__udivmoddi4+0x294>
1a006568:	2e00      	cmp	r6, #0
1a00656a:	d069      	beq.n	1a006640 <__udivmoddi4+0x2c8>
1a00656c:	ebb1 050a 	subs.w	r5, r1, sl
1a006570:	eb64 0403 	sbc.w	r4, r4, r3
1a006574:	fa04 fc0c 	lsl.w	ip, r4, ip
1a006578:	40fd      	lsrs	r5, r7
1a00657a:	40fc      	lsrs	r4, r7
1a00657c:	ea4c 0505 	orr.w	r5, ip, r5
1a006580:	e9c6 5400 	strd	r5, r4, [r6]
1a006584:	2700      	movs	r7, #0
1a006586:	e747      	b.n	1a006418 <__udivmoddi4+0xa0>
1a006588:	f1c2 0320 	rsb	r3, r2, #32
1a00658c:	fa20 f703 	lsr.w	r7, r0, r3
1a006590:	4095      	lsls	r5, r2
1a006592:	fa01 f002 	lsl.w	r0, r1, r2
1a006596:	fa21 f303 	lsr.w	r3, r1, r3
1a00659a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00659e:	4338      	orrs	r0, r7
1a0065a0:	0c01      	lsrs	r1, r0, #16
1a0065a2:	fbb3 f7fe 	udiv	r7, r3, lr
1a0065a6:	fa1f f885 	uxth.w	r8, r5
1a0065aa:	fb0e 3317 	mls	r3, lr, r7, r3
1a0065ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0065b2:	fb07 f308 	mul.w	r3, r7, r8
1a0065b6:	428b      	cmp	r3, r1
1a0065b8:	fa04 f402 	lsl.w	r4, r4, r2
1a0065bc:	d907      	bls.n	1a0065ce <__udivmoddi4+0x256>
1a0065be:	1869      	adds	r1, r5, r1
1a0065c0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0065c4:	d22f      	bcs.n	1a006626 <__udivmoddi4+0x2ae>
1a0065c6:	428b      	cmp	r3, r1
1a0065c8:	d92d      	bls.n	1a006626 <__udivmoddi4+0x2ae>
1a0065ca:	3f02      	subs	r7, #2
1a0065cc:	4429      	add	r1, r5
1a0065ce:	1acb      	subs	r3, r1, r3
1a0065d0:	b281      	uxth	r1, r0
1a0065d2:	fbb3 f0fe 	udiv	r0, r3, lr
1a0065d6:	fb0e 3310 	mls	r3, lr, r0, r3
1a0065da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0065de:	fb00 f308 	mul.w	r3, r0, r8
1a0065e2:	428b      	cmp	r3, r1
1a0065e4:	d907      	bls.n	1a0065f6 <__udivmoddi4+0x27e>
1a0065e6:	1869      	adds	r1, r5, r1
1a0065e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0065ec:	d217      	bcs.n	1a00661e <__udivmoddi4+0x2a6>
1a0065ee:	428b      	cmp	r3, r1
1a0065f0:	d915      	bls.n	1a00661e <__udivmoddi4+0x2a6>
1a0065f2:	3802      	subs	r0, #2
1a0065f4:	4429      	add	r1, r5
1a0065f6:	1ac9      	subs	r1, r1, r3
1a0065f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0065fc:	e73b      	b.n	1a006476 <__udivmoddi4+0xfe>
1a0065fe:	4637      	mov	r7, r6
1a006600:	4630      	mov	r0, r6
1a006602:	e709      	b.n	1a006418 <__udivmoddi4+0xa0>
1a006604:	4607      	mov	r7, r0
1a006606:	e6e7      	b.n	1a0063d8 <__udivmoddi4+0x60>
1a006608:	4618      	mov	r0, r3
1a00660a:	e6fb      	b.n	1a006404 <__udivmoddi4+0x8c>
1a00660c:	4541      	cmp	r1, r8
1a00660e:	d2ab      	bcs.n	1a006568 <__udivmoddi4+0x1f0>
1a006610:	ebb8 0a02 	subs.w	sl, r8, r2
1a006614:	eb69 020e 	sbc.w	r2, r9, lr
1a006618:	3801      	subs	r0, #1
1a00661a:	4613      	mov	r3, r2
1a00661c:	e7a4      	b.n	1a006568 <__udivmoddi4+0x1f0>
1a00661e:	4660      	mov	r0, ip
1a006620:	e7e9      	b.n	1a0065f6 <__udivmoddi4+0x27e>
1a006622:	4618      	mov	r0, r3
1a006624:	e795      	b.n	1a006552 <__udivmoddi4+0x1da>
1a006626:	4667      	mov	r7, ip
1a006628:	e7d1      	b.n	1a0065ce <__udivmoddi4+0x256>
1a00662a:	4681      	mov	r9, r0
1a00662c:	e77c      	b.n	1a006528 <__udivmoddi4+0x1b0>
1a00662e:	3802      	subs	r0, #2
1a006630:	442c      	add	r4, r5
1a006632:	e747      	b.n	1a0064c4 <__udivmoddi4+0x14c>
1a006634:	f1ac 0c02 	sub.w	ip, ip, #2
1a006638:	442b      	add	r3, r5
1a00663a:	e72f      	b.n	1a00649c <__udivmoddi4+0x124>
1a00663c:	4638      	mov	r0, r7
1a00663e:	e708      	b.n	1a006452 <__udivmoddi4+0xda>
1a006640:	4637      	mov	r7, r6
1a006642:	e6e9      	b.n	1a006418 <__udivmoddi4+0xa0>

1a006644 <__aeabi_idiv0>:
1a006644:	4770      	bx	lr
1a006646:	bf00      	nop

1a006648 <__sflush_r>:
1a006648:	898a      	ldrh	r2, [r1, #12]
1a00664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00664e:	4605      	mov	r5, r0
1a006650:	0710      	lsls	r0, r2, #28
1a006652:	460c      	mov	r4, r1
1a006654:	d458      	bmi.n	1a006708 <__sflush_r+0xc0>
1a006656:	684b      	ldr	r3, [r1, #4]
1a006658:	2b00      	cmp	r3, #0
1a00665a:	dc05      	bgt.n	1a006668 <__sflush_r+0x20>
1a00665c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a00665e:	2b00      	cmp	r3, #0
1a006660:	dc02      	bgt.n	1a006668 <__sflush_r+0x20>
1a006662:	2000      	movs	r0, #0
1a006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00666a:	2e00      	cmp	r6, #0
1a00666c:	d0f9      	beq.n	1a006662 <__sflush_r+0x1a>
1a00666e:	2300      	movs	r3, #0
1a006670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a006674:	682f      	ldr	r7, [r5, #0]
1a006676:	6a21      	ldr	r1, [r4, #32]
1a006678:	602b      	str	r3, [r5, #0]
1a00667a:	d032      	beq.n	1a0066e2 <__sflush_r+0x9a>
1a00667c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a00667e:	89a3      	ldrh	r3, [r4, #12]
1a006680:	075a      	lsls	r2, r3, #29
1a006682:	d505      	bpl.n	1a006690 <__sflush_r+0x48>
1a006684:	6863      	ldr	r3, [r4, #4]
1a006686:	1ac0      	subs	r0, r0, r3
1a006688:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00668a:	b10b      	cbz	r3, 1a006690 <__sflush_r+0x48>
1a00668c:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a00668e:	1ac0      	subs	r0, r0, r3
1a006690:	2300      	movs	r3, #0
1a006692:	4602      	mov	r2, r0
1a006694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a006696:	6a21      	ldr	r1, [r4, #32]
1a006698:	4628      	mov	r0, r5
1a00669a:	47b0      	blx	r6
1a00669c:	1c43      	adds	r3, r0, #1
1a00669e:	89a3      	ldrh	r3, [r4, #12]
1a0066a0:	d106      	bne.n	1a0066b0 <__sflush_r+0x68>
1a0066a2:	6829      	ldr	r1, [r5, #0]
1a0066a4:	291d      	cmp	r1, #29
1a0066a6:	d848      	bhi.n	1a00673a <__sflush_r+0xf2>
1a0066a8:	4a29      	ldr	r2, [pc, #164]	; (1a006750 <__sflush_r+0x108>)
1a0066aa:	40ca      	lsrs	r2, r1
1a0066ac:	07d6      	lsls	r6, r2, #31
1a0066ae:	d544      	bpl.n	1a00673a <__sflush_r+0xf2>
1a0066b0:	2200      	movs	r2, #0
1a0066b2:	6062      	str	r2, [r4, #4]
1a0066b4:	04d9      	lsls	r1, r3, #19
1a0066b6:	6922      	ldr	r2, [r4, #16]
1a0066b8:	6022      	str	r2, [r4, #0]
1a0066ba:	d504      	bpl.n	1a0066c6 <__sflush_r+0x7e>
1a0066bc:	1c42      	adds	r2, r0, #1
1a0066be:	d101      	bne.n	1a0066c4 <__sflush_r+0x7c>
1a0066c0:	682b      	ldr	r3, [r5, #0]
1a0066c2:	b903      	cbnz	r3, 1a0066c6 <__sflush_r+0x7e>
1a0066c4:	6560      	str	r0, [r4, #84]	; 0x54
1a0066c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0066c8:	602f      	str	r7, [r5, #0]
1a0066ca:	2900      	cmp	r1, #0
1a0066cc:	d0c9      	beq.n	1a006662 <__sflush_r+0x1a>
1a0066ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0066d2:	4299      	cmp	r1, r3
1a0066d4:	d002      	beq.n	1a0066dc <__sflush_r+0x94>
1a0066d6:	4628      	mov	r0, r5
1a0066d8:	f000 f968 	bl	1a0069ac <_free_r>
1a0066dc:	2000      	movs	r0, #0
1a0066de:	6360      	str	r0, [r4, #52]	; 0x34
1a0066e0:	e7c0      	b.n	1a006664 <__sflush_r+0x1c>
1a0066e2:	2301      	movs	r3, #1
1a0066e4:	4628      	mov	r0, r5
1a0066e6:	47b0      	blx	r6
1a0066e8:	1c41      	adds	r1, r0, #1
1a0066ea:	d1c8      	bne.n	1a00667e <__sflush_r+0x36>
1a0066ec:	682b      	ldr	r3, [r5, #0]
1a0066ee:	2b00      	cmp	r3, #0
1a0066f0:	d0c5      	beq.n	1a00667e <__sflush_r+0x36>
1a0066f2:	2b1d      	cmp	r3, #29
1a0066f4:	d001      	beq.n	1a0066fa <__sflush_r+0xb2>
1a0066f6:	2b16      	cmp	r3, #22
1a0066f8:	d101      	bne.n	1a0066fe <__sflush_r+0xb6>
1a0066fa:	602f      	str	r7, [r5, #0]
1a0066fc:	e7b1      	b.n	1a006662 <__sflush_r+0x1a>
1a0066fe:	89a3      	ldrh	r3, [r4, #12]
1a006700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006704:	81a3      	strh	r3, [r4, #12]
1a006706:	e7ad      	b.n	1a006664 <__sflush_r+0x1c>
1a006708:	690f      	ldr	r7, [r1, #16]
1a00670a:	2f00      	cmp	r7, #0
1a00670c:	d0a9      	beq.n	1a006662 <__sflush_r+0x1a>
1a00670e:	0793      	lsls	r3, r2, #30
1a006710:	680e      	ldr	r6, [r1, #0]
1a006712:	bf08      	it	eq
1a006714:	694b      	ldreq	r3, [r1, #20]
1a006716:	600f      	str	r7, [r1, #0]
1a006718:	bf18      	it	ne
1a00671a:	2300      	movne	r3, #0
1a00671c:	eba6 0807 	sub.w	r8, r6, r7
1a006720:	608b      	str	r3, [r1, #8]
1a006722:	f1b8 0f00 	cmp.w	r8, #0
1a006726:	dd9c      	ble.n	1a006662 <__sflush_r+0x1a>
1a006728:	4643      	mov	r3, r8
1a00672a:	463a      	mov	r2, r7
1a00672c:	6a21      	ldr	r1, [r4, #32]
1a00672e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a006730:	4628      	mov	r0, r5
1a006732:	47b0      	blx	r6
1a006734:	2800      	cmp	r0, #0
1a006736:	dc06      	bgt.n	1a006746 <__sflush_r+0xfe>
1a006738:	89a3      	ldrh	r3, [r4, #12]
1a00673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00673e:	81a3      	strh	r3, [r4, #12]
1a006740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006744:	e78e      	b.n	1a006664 <__sflush_r+0x1c>
1a006746:	4407      	add	r7, r0
1a006748:	eba8 0800 	sub.w	r8, r8, r0
1a00674c:	e7e9      	b.n	1a006722 <__sflush_r+0xda>
1a00674e:	bf00      	nop
1a006750:	20400001 	.word	0x20400001

1a006754 <_fflush_r>:
1a006754:	b538      	push	{r3, r4, r5, lr}
1a006756:	690b      	ldr	r3, [r1, #16]
1a006758:	4605      	mov	r5, r0
1a00675a:	460c      	mov	r4, r1
1a00675c:	b1db      	cbz	r3, 1a006796 <_fflush_r+0x42>
1a00675e:	b118      	cbz	r0, 1a006768 <_fflush_r+0x14>
1a006760:	6983      	ldr	r3, [r0, #24]
1a006762:	b90b      	cbnz	r3, 1a006768 <_fflush_r+0x14>
1a006764:	f000 f860 	bl	1a006828 <__sinit>
1a006768:	4b0c      	ldr	r3, [pc, #48]	; (1a00679c <_fflush_r+0x48>)
1a00676a:	429c      	cmp	r4, r3
1a00676c:	d109      	bne.n	1a006782 <_fflush_r+0x2e>
1a00676e:	686c      	ldr	r4, [r5, #4]
1a006770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006774:	b17b      	cbz	r3, 1a006796 <_fflush_r+0x42>
1a006776:	4621      	mov	r1, r4
1a006778:	4628      	mov	r0, r5
1a00677a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00677e:	f7ff bf63 	b.w	1a006648 <__sflush_r>
1a006782:	4b07      	ldr	r3, [pc, #28]	; (1a0067a0 <_fflush_r+0x4c>)
1a006784:	429c      	cmp	r4, r3
1a006786:	d101      	bne.n	1a00678c <_fflush_r+0x38>
1a006788:	68ac      	ldr	r4, [r5, #8]
1a00678a:	e7f1      	b.n	1a006770 <_fflush_r+0x1c>
1a00678c:	4b05      	ldr	r3, [pc, #20]	; (1a0067a4 <_fflush_r+0x50>)
1a00678e:	429c      	cmp	r4, r3
1a006790:	bf08      	it	eq
1a006792:	68ec      	ldreq	r4, [r5, #12]
1a006794:	e7ec      	b.n	1a006770 <_fflush_r+0x1c>
1a006796:	2000      	movs	r0, #0
1a006798:	bd38      	pop	{r3, r4, r5, pc}
1a00679a:	bf00      	nop
1a00679c:	1a007cdc 	.word	0x1a007cdc
1a0067a0:	1a007cfc 	.word	0x1a007cfc
1a0067a4:	1a007cbc 	.word	0x1a007cbc

1a0067a8 <std>:
1a0067a8:	2300      	movs	r3, #0
1a0067aa:	b510      	push	{r4, lr}
1a0067ac:	4604      	mov	r4, r0
1a0067ae:	e9c0 3300 	strd	r3, r3, [r0]
1a0067b2:	6083      	str	r3, [r0, #8]
1a0067b4:	8181      	strh	r1, [r0, #12]
1a0067b6:	6643      	str	r3, [r0, #100]	; 0x64
1a0067b8:	81c2      	strh	r2, [r0, #14]
1a0067ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0067be:	6183      	str	r3, [r0, #24]
1a0067c0:	4619      	mov	r1, r3
1a0067c2:	2208      	movs	r2, #8
1a0067c4:	305c      	adds	r0, #92	; 0x5c
1a0067c6:	f000 f8e8 	bl	1a00699a <memset>
1a0067ca:	4b05      	ldr	r3, [pc, #20]	; (1a0067e0 <std+0x38>)
1a0067cc:	6263      	str	r3, [r4, #36]	; 0x24
1a0067ce:	4b05      	ldr	r3, [pc, #20]	; (1a0067e4 <std+0x3c>)
1a0067d0:	62a3      	str	r3, [r4, #40]	; 0x28
1a0067d2:	4b05      	ldr	r3, [pc, #20]	; (1a0067e8 <std+0x40>)
1a0067d4:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0067d6:	4b05      	ldr	r3, [pc, #20]	; (1a0067ec <std+0x44>)
1a0067d8:	6224      	str	r4, [r4, #32]
1a0067da:	6323      	str	r3, [r4, #48]	; 0x30
1a0067dc:	bd10      	pop	{r4, pc}
1a0067de:	bf00      	nop
1a0067e0:	1a006bf5 	.word	0x1a006bf5
1a0067e4:	1a006c17 	.word	0x1a006c17
1a0067e8:	1a006c4f 	.word	0x1a006c4f
1a0067ec:	1a006c73 	.word	0x1a006c73

1a0067f0 <_cleanup_r>:
1a0067f0:	4901      	ldr	r1, [pc, #4]	; (1a0067f8 <_cleanup_r+0x8>)
1a0067f2:	f000 b885 	b.w	1a006900 <_fwalk_reent>
1a0067f6:	bf00      	nop
1a0067f8:	1a006755 	.word	0x1a006755

1a0067fc <__sfmoreglue>:
1a0067fc:	b570      	push	{r4, r5, r6, lr}
1a0067fe:	1e4a      	subs	r2, r1, #1
1a006800:	2568      	movs	r5, #104	; 0x68
1a006802:	4355      	muls	r5, r2
1a006804:	460e      	mov	r6, r1
1a006806:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00680a:	f000 f91d 	bl	1a006a48 <_malloc_r>
1a00680e:	4604      	mov	r4, r0
1a006810:	b140      	cbz	r0, 1a006824 <__sfmoreglue+0x28>
1a006812:	2100      	movs	r1, #0
1a006814:	e9c0 1600 	strd	r1, r6, [r0]
1a006818:	300c      	adds	r0, #12
1a00681a:	60a0      	str	r0, [r4, #8]
1a00681c:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a006820:	f000 f8bb 	bl	1a00699a <memset>
1a006824:	4620      	mov	r0, r4
1a006826:	bd70      	pop	{r4, r5, r6, pc}

1a006828 <__sinit>:
1a006828:	6983      	ldr	r3, [r0, #24]
1a00682a:	b510      	push	{r4, lr}
1a00682c:	4604      	mov	r4, r0
1a00682e:	bb33      	cbnz	r3, 1a00687e <__sinit+0x56>
1a006830:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a006834:	6503      	str	r3, [r0, #80]	; 0x50
1a006836:	4b12      	ldr	r3, [pc, #72]	; (1a006880 <__sinit+0x58>)
1a006838:	4a12      	ldr	r2, [pc, #72]	; (1a006884 <__sinit+0x5c>)
1a00683a:	681b      	ldr	r3, [r3, #0]
1a00683c:	6282      	str	r2, [r0, #40]	; 0x28
1a00683e:	4298      	cmp	r0, r3
1a006840:	bf04      	itt	eq
1a006842:	2301      	moveq	r3, #1
1a006844:	6183      	streq	r3, [r0, #24]
1a006846:	f000 f81f 	bl	1a006888 <__sfp>
1a00684a:	6060      	str	r0, [r4, #4]
1a00684c:	4620      	mov	r0, r4
1a00684e:	f000 f81b 	bl	1a006888 <__sfp>
1a006852:	60a0      	str	r0, [r4, #8]
1a006854:	4620      	mov	r0, r4
1a006856:	f000 f817 	bl	1a006888 <__sfp>
1a00685a:	2200      	movs	r2, #0
1a00685c:	60e0      	str	r0, [r4, #12]
1a00685e:	2104      	movs	r1, #4
1a006860:	6860      	ldr	r0, [r4, #4]
1a006862:	f7ff ffa1 	bl	1a0067a8 <std>
1a006866:	2201      	movs	r2, #1
1a006868:	2109      	movs	r1, #9
1a00686a:	68a0      	ldr	r0, [r4, #8]
1a00686c:	f7ff ff9c 	bl	1a0067a8 <std>
1a006870:	2202      	movs	r2, #2
1a006872:	2112      	movs	r1, #18
1a006874:	68e0      	ldr	r0, [r4, #12]
1a006876:	f7ff ff97 	bl	1a0067a8 <std>
1a00687a:	2301      	movs	r3, #1
1a00687c:	61a3      	str	r3, [r4, #24]
1a00687e:	bd10      	pop	{r4, pc}
1a006880:	1a007d1c 	.word	0x1a007d1c
1a006884:	1a0067f1 	.word	0x1a0067f1

1a006888 <__sfp>:
1a006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00688a:	4b1b      	ldr	r3, [pc, #108]	; (1a0068f8 <__sfp+0x70>)
1a00688c:	681e      	ldr	r6, [r3, #0]
1a00688e:	69b3      	ldr	r3, [r6, #24]
1a006890:	4607      	mov	r7, r0
1a006892:	b913      	cbnz	r3, 1a00689a <__sfp+0x12>
1a006894:	4630      	mov	r0, r6
1a006896:	f7ff ffc7 	bl	1a006828 <__sinit>
1a00689a:	3648      	adds	r6, #72	; 0x48
1a00689c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0068a0:	3b01      	subs	r3, #1
1a0068a2:	d503      	bpl.n	1a0068ac <__sfp+0x24>
1a0068a4:	6833      	ldr	r3, [r6, #0]
1a0068a6:	b133      	cbz	r3, 1a0068b6 <__sfp+0x2e>
1a0068a8:	6836      	ldr	r6, [r6, #0]
1a0068aa:	e7f7      	b.n	1a00689c <__sfp+0x14>
1a0068ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0068b0:	b16d      	cbz	r5, 1a0068ce <__sfp+0x46>
1a0068b2:	3468      	adds	r4, #104	; 0x68
1a0068b4:	e7f4      	b.n	1a0068a0 <__sfp+0x18>
1a0068b6:	2104      	movs	r1, #4
1a0068b8:	4638      	mov	r0, r7
1a0068ba:	f7ff ff9f 	bl	1a0067fc <__sfmoreglue>
1a0068be:	6030      	str	r0, [r6, #0]
1a0068c0:	2800      	cmp	r0, #0
1a0068c2:	d1f1      	bne.n	1a0068a8 <__sfp+0x20>
1a0068c4:	230c      	movs	r3, #12
1a0068c6:	603b      	str	r3, [r7, #0]
1a0068c8:	4604      	mov	r4, r0
1a0068ca:	4620      	mov	r0, r4
1a0068cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0068ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0068fc <__sfp+0x74>)
1a0068d0:	6665      	str	r5, [r4, #100]	; 0x64
1a0068d2:	e9c4 5500 	strd	r5, r5, [r4]
1a0068d6:	60a5      	str	r5, [r4, #8]
1a0068d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a0068dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a0068e0:	2208      	movs	r2, #8
1a0068e2:	4629      	mov	r1, r5
1a0068e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0068e8:	f000 f857 	bl	1a00699a <memset>
1a0068ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0068f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0068f4:	e7e9      	b.n	1a0068ca <__sfp+0x42>
1a0068f6:	bf00      	nop
1a0068f8:	1a007d1c 	.word	0x1a007d1c
1a0068fc:	ffff0001 	.word	0xffff0001

1a006900 <_fwalk_reent>:
1a006900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006904:	4680      	mov	r8, r0
1a006906:	4689      	mov	r9, r1
1a006908:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a00690c:	2600      	movs	r6, #0
1a00690e:	b914      	cbnz	r4, 1a006916 <_fwalk_reent+0x16>
1a006910:	4630      	mov	r0, r6
1a006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006916:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00691a:	3f01      	subs	r7, #1
1a00691c:	d501      	bpl.n	1a006922 <_fwalk_reent+0x22>
1a00691e:	6824      	ldr	r4, [r4, #0]
1a006920:	e7f5      	b.n	1a00690e <_fwalk_reent+0xe>
1a006922:	89ab      	ldrh	r3, [r5, #12]
1a006924:	2b01      	cmp	r3, #1
1a006926:	d907      	bls.n	1a006938 <_fwalk_reent+0x38>
1a006928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a00692c:	3301      	adds	r3, #1
1a00692e:	d003      	beq.n	1a006938 <_fwalk_reent+0x38>
1a006930:	4629      	mov	r1, r5
1a006932:	4640      	mov	r0, r8
1a006934:	47c8      	blx	r9
1a006936:	4306      	orrs	r6, r0
1a006938:	3568      	adds	r5, #104	; 0x68
1a00693a:	e7ee      	b.n	1a00691a <_fwalk_reent+0x1a>

1a00693c <__libc_init_array>:
1a00693c:	b570      	push	{r4, r5, r6, lr}
1a00693e:	4e0d      	ldr	r6, [pc, #52]	; (1a006974 <__libc_init_array+0x38>)
1a006940:	4c0d      	ldr	r4, [pc, #52]	; (1a006978 <__libc_init_array+0x3c>)
1a006942:	1ba4      	subs	r4, r4, r6
1a006944:	10a4      	asrs	r4, r4, #2
1a006946:	2500      	movs	r5, #0
1a006948:	42a5      	cmp	r5, r4
1a00694a:	d109      	bne.n	1a006960 <__libc_init_array+0x24>
1a00694c:	4e0b      	ldr	r6, [pc, #44]	; (1a00697c <__libc_init_array+0x40>)
1a00694e:	4c0c      	ldr	r4, [pc, #48]	; (1a006980 <__libc_init_array+0x44>)
1a006950:	f7fc f819 	bl	1a002986 <_init>
1a006954:	1ba4      	subs	r4, r4, r6
1a006956:	10a4      	asrs	r4, r4, #2
1a006958:	2500      	movs	r5, #0
1a00695a:	42a5      	cmp	r5, r4
1a00695c:	d105      	bne.n	1a00696a <__libc_init_array+0x2e>
1a00695e:	bd70      	pop	{r4, r5, r6, pc}
1a006960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a006964:	4798      	blx	r3
1a006966:	3501      	adds	r5, #1
1a006968:	e7ee      	b.n	1a006948 <__libc_init_array+0xc>
1a00696a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00696e:	4798      	blx	r3
1a006970:	3501      	adds	r5, #1
1a006972:	e7f2      	b.n	1a00695a <__libc_init_array+0x1e>
1a006974:	1a007d54 	.word	0x1a007d54
1a006978:	1a007d54 	.word	0x1a007d54
1a00697c:	1a007d54 	.word	0x1a007d54
1a006980:	1a007d58 	.word	0x1a007d58

1a006984 <memcpy>:
1a006984:	b510      	push	{r4, lr}
1a006986:	1e43      	subs	r3, r0, #1
1a006988:	440a      	add	r2, r1
1a00698a:	4291      	cmp	r1, r2
1a00698c:	d100      	bne.n	1a006990 <memcpy+0xc>
1a00698e:	bd10      	pop	{r4, pc}
1a006990:	f811 4b01 	ldrb.w	r4, [r1], #1
1a006994:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006998:	e7f7      	b.n	1a00698a <memcpy+0x6>

1a00699a <memset>:
1a00699a:	4402      	add	r2, r0
1a00699c:	4603      	mov	r3, r0
1a00699e:	4293      	cmp	r3, r2
1a0069a0:	d100      	bne.n	1a0069a4 <memset+0xa>
1a0069a2:	4770      	bx	lr
1a0069a4:	f803 1b01 	strb.w	r1, [r3], #1
1a0069a8:	e7f9      	b.n	1a00699e <memset+0x4>
1a0069aa:	Address 0x000000001a0069aa is out of bounds.


1a0069ac <_free_r>:
1a0069ac:	b538      	push	{r3, r4, r5, lr}
1a0069ae:	4605      	mov	r5, r0
1a0069b0:	2900      	cmp	r1, #0
1a0069b2:	d045      	beq.n	1a006a40 <_free_r+0x94>
1a0069b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0069b8:	1f0c      	subs	r4, r1, #4
1a0069ba:	2b00      	cmp	r3, #0
1a0069bc:	bfb8      	it	lt
1a0069be:	18e4      	addlt	r4, r4, r3
1a0069c0:	f000 fad0 	bl	1a006f64 <__malloc_lock>
1a0069c4:	4a1f      	ldr	r2, [pc, #124]	; (1a006a44 <_free_r+0x98>)
1a0069c6:	6813      	ldr	r3, [r2, #0]
1a0069c8:	4610      	mov	r0, r2
1a0069ca:	b933      	cbnz	r3, 1a0069da <_free_r+0x2e>
1a0069cc:	6063      	str	r3, [r4, #4]
1a0069ce:	6014      	str	r4, [r2, #0]
1a0069d0:	4628      	mov	r0, r5
1a0069d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0069d6:	f000 bac6 	b.w	1a006f66 <__malloc_unlock>
1a0069da:	42a3      	cmp	r3, r4
1a0069dc:	d90c      	bls.n	1a0069f8 <_free_r+0x4c>
1a0069de:	6821      	ldr	r1, [r4, #0]
1a0069e0:	1862      	adds	r2, r4, r1
1a0069e2:	4293      	cmp	r3, r2
1a0069e4:	bf04      	itt	eq
1a0069e6:	681a      	ldreq	r2, [r3, #0]
1a0069e8:	685b      	ldreq	r3, [r3, #4]
1a0069ea:	6063      	str	r3, [r4, #4]
1a0069ec:	bf04      	itt	eq
1a0069ee:	1852      	addeq	r2, r2, r1
1a0069f0:	6022      	streq	r2, [r4, #0]
1a0069f2:	6004      	str	r4, [r0, #0]
1a0069f4:	e7ec      	b.n	1a0069d0 <_free_r+0x24>
1a0069f6:	4613      	mov	r3, r2
1a0069f8:	685a      	ldr	r2, [r3, #4]
1a0069fa:	b10a      	cbz	r2, 1a006a00 <_free_r+0x54>
1a0069fc:	42a2      	cmp	r2, r4
1a0069fe:	d9fa      	bls.n	1a0069f6 <_free_r+0x4a>
1a006a00:	6819      	ldr	r1, [r3, #0]
1a006a02:	1858      	adds	r0, r3, r1
1a006a04:	42a0      	cmp	r0, r4
1a006a06:	d10b      	bne.n	1a006a20 <_free_r+0x74>
1a006a08:	6820      	ldr	r0, [r4, #0]
1a006a0a:	4401      	add	r1, r0
1a006a0c:	1858      	adds	r0, r3, r1
1a006a0e:	4282      	cmp	r2, r0
1a006a10:	6019      	str	r1, [r3, #0]
1a006a12:	d1dd      	bne.n	1a0069d0 <_free_r+0x24>
1a006a14:	6810      	ldr	r0, [r2, #0]
1a006a16:	6852      	ldr	r2, [r2, #4]
1a006a18:	605a      	str	r2, [r3, #4]
1a006a1a:	4401      	add	r1, r0
1a006a1c:	6019      	str	r1, [r3, #0]
1a006a1e:	e7d7      	b.n	1a0069d0 <_free_r+0x24>
1a006a20:	d902      	bls.n	1a006a28 <_free_r+0x7c>
1a006a22:	230c      	movs	r3, #12
1a006a24:	602b      	str	r3, [r5, #0]
1a006a26:	e7d3      	b.n	1a0069d0 <_free_r+0x24>
1a006a28:	6820      	ldr	r0, [r4, #0]
1a006a2a:	1821      	adds	r1, r4, r0
1a006a2c:	428a      	cmp	r2, r1
1a006a2e:	bf04      	itt	eq
1a006a30:	6811      	ldreq	r1, [r2, #0]
1a006a32:	6852      	ldreq	r2, [r2, #4]
1a006a34:	6062      	str	r2, [r4, #4]
1a006a36:	bf04      	itt	eq
1a006a38:	1809      	addeq	r1, r1, r0
1a006a3a:	6021      	streq	r1, [r4, #0]
1a006a3c:	605c      	str	r4, [r3, #4]
1a006a3e:	e7c7      	b.n	1a0069d0 <_free_r+0x24>
1a006a40:	bd38      	pop	{r3, r4, r5, pc}
1a006a42:	bf00      	nop
1a006a44:	100061f8 	.word	0x100061f8

1a006a48 <_malloc_r>:
1a006a48:	b570      	push	{r4, r5, r6, lr}
1a006a4a:	1ccd      	adds	r5, r1, #3
1a006a4c:	f025 0503 	bic.w	r5, r5, #3
1a006a50:	3508      	adds	r5, #8
1a006a52:	2d0c      	cmp	r5, #12
1a006a54:	bf38      	it	cc
1a006a56:	250c      	movcc	r5, #12
1a006a58:	2d00      	cmp	r5, #0
1a006a5a:	4606      	mov	r6, r0
1a006a5c:	db01      	blt.n	1a006a62 <_malloc_r+0x1a>
1a006a5e:	42a9      	cmp	r1, r5
1a006a60:	d903      	bls.n	1a006a6a <_malloc_r+0x22>
1a006a62:	230c      	movs	r3, #12
1a006a64:	6033      	str	r3, [r6, #0]
1a006a66:	2000      	movs	r0, #0
1a006a68:	bd70      	pop	{r4, r5, r6, pc}
1a006a6a:	f000 fa7b 	bl	1a006f64 <__malloc_lock>
1a006a6e:	4a21      	ldr	r2, [pc, #132]	; (1a006af4 <_malloc_r+0xac>)
1a006a70:	6814      	ldr	r4, [r2, #0]
1a006a72:	4621      	mov	r1, r4
1a006a74:	b991      	cbnz	r1, 1a006a9c <_malloc_r+0x54>
1a006a76:	4c20      	ldr	r4, [pc, #128]	; (1a006af8 <_malloc_r+0xb0>)
1a006a78:	6823      	ldr	r3, [r4, #0]
1a006a7a:	b91b      	cbnz	r3, 1a006a84 <_malloc_r+0x3c>
1a006a7c:	4630      	mov	r0, r6
1a006a7e:	f7fb ffd7 	bl	1a002a30 <_sbrk_r>
1a006a82:	6020      	str	r0, [r4, #0]
1a006a84:	4629      	mov	r1, r5
1a006a86:	4630      	mov	r0, r6
1a006a88:	f7fb ffd2 	bl	1a002a30 <_sbrk_r>
1a006a8c:	1c43      	adds	r3, r0, #1
1a006a8e:	d124      	bne.n	1a006ada <_malloc_r+0x92>
1a006a90:	230c      	movs	r3, #12
1a006a92:	6033      	str	r3, [r6, #0]
1a006a94:	4630      	mov	r0, r6
1a006a96:	f000 fa66 	bl	1a006f66 <__malloc_unlock>
1a006a9a:	e7e4      	b.n	1a006a66 <_malloc_r+0x1e>
1a006a9c:	680b      	ldr	r3, [r1, #0]
1a006a9e:	1b5b      	subs	r3, r3, r5
1a006aa0:	d418      	bmi.n	1a006ad4 <_malloc_r+0x8c>
1a006aa2:	2b0b      	cmp	r3, #11
1a006aa4:	d90f      	bls.n	1a006ac6 <_malloc_r+0x7e>
1a006aa6:	600b      	str	r3, [r1, #0]
1a006aa8:	50cd      	str	r5, [r1, r3]
1a006aaa:	18cc      	adds	r4, r1, r3
1a006aac:	4630      	mov	r0, r6
1a006aae:	f000 fa5a 	bl	1a006f66 <__malloc_unlock>
1a006ab2:	f104 000b 	add.w	r0, r4, #11
1a006ab6:	1d23      	adds	r3, r4, #4
1a006ab8:	f020 0007 	bic.w	r0, r0, #7
1a006abc:	1ac3      	subs	r3, r0, r3
1a006abe:	d0d3      	beq.n	1a006a68 <_malloc_r+0x20>
1a006ac0:	425a      	negs	r2, r3
1a006ac2:	50e2      	str	r2, [r4, r3]
1a006ac4:	e7d0      	b.n	1a006a68 <_malloc_r+0x20>
1a006ac6:	428c      	cmp	r4, r1
1a006ac8:	684b      	ldr	r3, [r1, #4]
1a006aca:	bf16      	itet	ne
1a006acc:	6063      	strne	r3, [r4, #4]
1a006ace:	6013      	streq	r3, [r2, #0]
1a006ad0:	460c      	movne	r4, r1
1a006ad2:	e7eb      	b.n	1a006aac <_malloc_r+0x64>
1a006ad4:	460c      	mov	r4, r1
1a006ad6:	6849      	ldr	r1, [r1, #4]
1a006ad8:	e7cc      	b.n	1a006a74 <_malloc_r+0x2c>
1a006ada:	1cc4      	adds	r4, r0, #3
1a006adc:	f024 0403 	bic.w	r4, r4, #3
1a006ae0:	42a0      	cmp	r0, r4
1a006ae2:	d005      	beq.n	1a006af0 <_malloc_r+0xa8>
1a006ae4:	1a21      	subs	r1, r4, r0
1a006ae6:	4630      	mov	r0, r6
1a006ae8:	f7fb ffa2 	bl	1a002a30 <_sbrk_r>
1a006aec:	3001      	adds	r0, #1
1a006aee:	d0cf      	beq.n	1a006a90 <_malloc_r+0x48>
1a006af0:	6025      	str	r5, [r4, #0]
1a006af2:	e7db      	b.n	1a006aac <_malloc_r+0x64>
1a006af4:	100061f8 	.word	0x100061f8
1a006af8:	100061fc 	.word	0x100061fc

1a006afc <iprintf>:
1a006afc:	b40f      	push	{r0, r1, r2, r3}
1a006afe:	4b0a      	ldr	r3, [pc, #40]	; (1a006b28 <iprintf+0x2c>)
1a006b00:	b513      	push	{r0, r1, r4, lr}
1a006b02:	681c      	ldr	r4, [r3, #0]
1a006b04:	b124      	cbz	r4, 1a006b10 <iprintf+0x14>
1a006b06:	69a3      	ldr	r3, [r4, #24]
1a006b08:	b913      	cbnz	r3, 1a006b10 <iprintf+0x14>
1a006b0a:	4620      	mov	r0, r4
1a006b0c:	f7ff fe8c 	bl	1a006828 <__sinit>
1a006b10:	ab05      	add	r3, sp, #20
1a006b12:	9a04      	ldr	r2, [sp, #16]
1a006b14:	68a1      	ldr	r1, [r4, #8]
1a006b16:	9301      	str	r3, [sp, #4]
1a006b18:	4620      	mov	r0, r4
1a006b1a:	f000 fa4f 	bl	1a006fbc <_vfiprintf_r>
1a006b1e:	b002      	add	sp, #8
1a006b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a006b24:	b004      	add	sp, #16
1a006b26:	4770      	bx	lr
1a006b28:	10001cfc 	.word	0x10001cfc

1a006b2c <_puts_r>:
1a006b2c:	b570      	push	{r4, r5, r6, lr}
1a006b2e:	460e      	mov	r6, r1
1a006b30:	4605      	mov	r5, r0
1a006b32:	b118      	cbz	r0, 1a006b3c <_puts_r+0x10>
1a006b34:	6983      	ldr	r3, [r0, #24]
1a006b36:	b90b      	cbnz	r3, 1a006b3c <_puts_r+0x10>
1a006b38:	f7ff fe76 	bl	1a006828 <__sinit>
1a006b3c:	69ab      	ldr	r3, [r5, #24]
1a006b3e:	68ac      	ldr	r4, [r5, #8]
1a006b40:	b913      	cbnz	r3, 1a006b48 <_puts_r+0x1c>
1a006b42:	4628      	mov	r0, r5
1a006b44:	f7ff fe70 	bl	1a006828 <__sinit>
1a006b48:	4b23      	ldr	r3, [pc, #140]	; (1a006bd8 <_puts_r+0xac>)
1a006b4a:	429c      	cmp	r4, r3
1a006b4c:	d117      	bne.n	1a006b7e <_puts_r+0x52>
1a006b4e:	686c      	ldr	r4, [r5, #4]
1a006b50:	89a3      	ldrh	r3, [r4, #12]
1a006b52:	071b      	lsls	r3, r3, #28
1a006b54:	d51d      	bpl.n	1a006b92 <_puts_r+0x66>
1a006b56:	6923      	ldr	r3, [r4, #16]
1a006b58:	b1db      	cbz	r3, 1a006b92 <_puts_r+0x66>
1a006b5a:	3e01      	subs	r6, #1
1a006b5c:	68a3      	ldr	r3, [r4, #8]
1a006b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a006b62:	3b01      	subs	r3, #1
1a006b64:	60a3      	str	r3, [r4, #8]
1a006b66:	b9e9      	cbnz	r1, 1a006ba4 <_puts_r+0x78>
1a006b68:	2b00      	cmp	r3, #0
1a006b6a:	da2e      	bge.n	1a006bca <_puts_r+0x9e>
1a006b6c:	4622      	mov	r2, r4
1a006b6e:	210a      	movs	r1, #10
1a006b70:	4628      	mov	r0, r5
1a006b72:	f000 f8d3 	bl	1a006d1c <__swbuf_r>
1a006b76:	3001      	adds	r0, #1
1a006b78:	d011      	beq.n	1a006b9e <_puts_r+0x72>
1a006b7a:	200a      	movs	r0, #10
1a006b7c:	e011      	b.n	1a006ba2 <_puts_r+0x76>
1a006b7e:	4b17      	ldr	r3, [pc, #92]	; (1a006bdc <_puts_r+0xb0>)
1a006b80:	429c      	cmp	r4, r3
1a006b82:	d101      	bne.n	1a006b88 <_puts_r+0x5c>
1a006b84:	68ac      	ldr	r4, [r5, #8]
1a006b86:	e7e3      	b.n	1a006b50 <_puts_r+0x24>
1a006b88:	4b15      	ldr	r3, [pc, #84]	; (1a006be0 <_puts_r+0xb4>)
1a006b8a:	429c      	cmp	r4, r3
1a006b8c:	bf08      	it	eq
1a006b8e:	68ec      	ldreq	r4, [r5, #12]
1a006b90:	e7de      	b.n	1a006b50 <_puts_r+0x24>
1a006b92:	4621      	mov	r1, r4
1a006b94:	4628      	mov	r0, r5
1a006b96:	f000 f913 	bl	1a006dc0 <__swsetup_r>
1a006b9a:	2800      	cmp	r0, #0
1a006b9c:	d0dd      	beq.n	1a006b5a <_puts_r+0x2e>
1a006b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006ba2:	bd70      	pop	{r4, r5, r6, pc}
1a006ba4:	2b00      	cmp	r3, #0
1a006ba6:	da04      	bge.n	1a006bb2 <_puts_r+0x86>
1a006ba8:	69a2      	ldr	r2, [r4, #24]
1a006baa:	429a      	cmp	r2, r3
1a006bac:	dc06      	bgt.n	1a006bbc <_puts_r+0x90>
1a006bae:	290a      	cmp	r1, #10
1a006bb0:	d004      	beq.n	1a006bbc <_puts_r+0x90>
1a006bb2:	6823      	ldr	r3, [r4, #0]
1a006bb4:	1c5a      	adds	r2, r3, #1
1a006bb6:	6022      	str	r2, [r4, #0]
1a006bb8:	7019      	strb	r1, [r3, #0]
1a006bba:	e7cf      	b.n	1a006b5c <_puts_r+0x30>
1a006bbc:	4622      	mov	r2, r4
1a006bbe:	4628      	mov	r0, r5
1a006bc0:	f000 f8ac 	bl	1a006d1c <__swbuf_r>
1a006bc4:	3001      	adds	r0, #1
1a006bc6:	d1c9      	bne.n	1a006b5c <_puts_r+0x30>
1a006bc8:	e7e9      	b.n	1a006b9e <_puts_r+0x72>
1a006bca:	6823      	ldr	r3, [r4, #0]
1a006bcc:	200a      	movs	r0, #10
1a006bce:	1c5a      	adds	r2, r3, #1
1a006bd0:	6022      	str	r2, [r4, #0]
1a006bd2:	7018      	strb	r0, [r3, #0]
1a006bd4:	e7e5      	b.n	1a006ba2 <_puts_r+0x76>
1a006bd6:	bf00      	nop
1a006bd8:	1a007cdc 	.word	0x1a007cdc
1a006bdc:	1a007cfc 	.word	0x1a007cfc
1a006be0:	1a007cbc 	.word	0x1a007cbc

1a006be4 <puts>:
1a006be4:	4b02      	ldr	r3, [pc, #8]	; (1a006bf0 <puts+0xc>)
1a006be6:	4601      	mov	r1, r0
1a006be8:	6818      	ldr	r0, [r3, #0]
1a006bea:	f7ff bf9f 	b.w	1a006b2c <_puts_r>
1a006bee:	bf00      	nop
1a006bf0:	10001cfc 	.word	0x10001cfc

1a006bf4 <__sread>:
1a006bf4:	b510      	push	{r4, lr}
1a006bf6:	460c      	mov	r4, r1
1a006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006bfc:	f7fb fedc 	bl	1a0029b8 <_read_r>
1a006c00:	2800      	cmp	r0, #0
1a006c02:	bfab      	itete	ge
1a006c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a006c06:	89a3      	ldrhlt	r3, [r4, #12]
1a006c08:	181b      	addge	r3, r3, r0
1a006c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a006c0e:	bfac      	ite	ge
1a006c10:	6563      	strge	r3, [r4, #84]	; 0x54
1a006c12:	81a3      	strhlt	r3, [r4, #12]
1a006c14:	bd10      	pop	{r4, pc}

1a006c16 <__swrite>:
1a006c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006c1a:	461f      	mov	r7, r3
1a006c1c:	898b      	ldrh	r3, [r1, #12]
1a006c1e:	05db      	lsls	r3, r3, #23
1a006c20:	4605      	mov	r5, r0
1a006c22:	460c      	mov	r4, r1
1a006c24:	4616      	mov	r6, r2
1a006c26:	d505      	bpl.n	1a006c34 <__swrite+0x1e>
1a006c28:	2302      	movs	r3, #2
1a006c2a:	2200      	movs	r2, #0
1a006c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006c30:	f7fb febd 	bl	1a0029ae <_lseek_r>
1a006c34:	89a3      	ldrh	r3, [r4, #12]
1a006c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a006c3e:	81a3      	strh	r3, [r4, #12]
1a006c40:	4632      	mov	r2, r6
1a006c42:	463b      	mov	r3, r7
1a006c44:	4628      	mov	r0, r5
1a006c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006c4a:	f7fb bedc 	b.w	1a002a06 <_write_r>

1a006c4e <__sseek>:
1a006c4e:	b510      	push	{r4, lr}
1a006c50:	460c      	mov	r4, r1
1a006c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006c56:	f7fb feaa 	bl	1a0029ae <_lseek_r>
1a006c5a:	1c43      	adds	r3, r0, #1
1a006c5c:	89a3      	ldrh	r3, [r4, #12]
1a006c5e:	bf15      	itete	ne
1a006c60:	6560      	strne	r0, [r4, #84]	; 0x54
1a006c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a006c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a006c6a:	81a3      	strheq	r3, [r4, #12]
1a006c6c:	bf18      	it	ne
1a006c6e:	81a3      	strhne	r3, [r4, #12]
1a006c70:	bd10      	pop	{r4, pc}

1a006c72 <__sclose>:
1a006c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006c76:	f7fb be87 	b.w	1a002988 <_close_r>

1a006c7a <strcat>:
1a006c7a:	b510      	push	{r4, lr}
1a006c7c:	4603      	mov	r3, r0
1a006c7e:	781a      	ldrb	r2, [r3, #0]
1a006c80:	1c5c      	adds	r4, r3, #1
1a006c82:	b93a      	cbnz	r2, 1a006c94 <strcat+0x1a>
1a006c84:	3b01      	subs	r3, #1
1a006c86:	f811 2b01 	ldrb.w	r2, [r1], #1
1a006c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
1a006c8e:	2a00      	cmp	r2, #0
1a006c90:	d1f9      	bne.n	1a006c86 <strcat+0xc>
1a006c92:	bd10      	pop	{r4, pc}
1a006c94:	4623      	mov	r3, r4
1a006c96:	e7f2      	b.n	1a006c7e <strcat+0x4>

1a006c98 <strchr>:
1a006c98:	b2c9      	uxtb	r1, r1
1a006c9a:	4603      	mov	r3, r0
1a006c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
1a006ca0:	b11a      	cbz	r2, 1a006caa <strchr+0x12>
1a006ca2:	428a      	cmp	r2, r1
1a006ca4:	d1f9      	bne.n	1a006c9a <strchr+0x2>
1a006ca6:	4618      	mov	r0, r3
1a006ca8:	4770      	bx	lr
1a006caa:	2900      	cmp	r1, #0
1a006cac:	bf18      	it	ne
1a006cae:	2300      	movne	r3, #0
1a006cb0:	e7f9      	b.n	1a006ca6 <strchr+0xe>

1a006cb2 <strcmp>:
1a006cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
1a006cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
1a006cba:	2a01      	cmp	r2, #1
1a006cbc:	bf28      	it	cs
1a006cbe:	429a      	cmpcs	r2, r3
1a006cc0:	d0f7      	beq.n	1a006cb2 <strcmp>
1a006cc2:	1ad0      	subs	r0, r2, r3
1a006cc4:	4770      	bx	lr

1a006cc6 <strcpy>:
1a006cc6:	4603      	mov	r3, r0
1a006cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
1a006ccc:	f803 2b01 	strb.w	r2, [r3], #1
1a006cd0:	2a00      	cmp	r2, #0
1a006cd2:	d1f9      	bne.n	1a006cc8 <strcpy+0x2>
1a006cd4:	4770      	bx	lr

1a006cd6 <strlen>:
1a006cd6:	4603      	mov	r3, r0
1a006cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
1a006cdc:	2a00      	cmp	r2, #0
1a006cde:	d1fb      	bne.n	1a006cd8 <strlen+0x2>
1a006ce0:	1a18      	subs	r0, r3, r0
1a006ce2:	3801      	subs	r0, #1
1a006ce4:	4770      	bx	lr

1a006ce6 <strstr>:
1a006ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006ce8:	7803      	ldrb	r3, [r0, #0]
1a006cea:	b17b      	cbz	r3, 1a006d0c <strstr+0x26>
1a006cec:	4604      	mov	r4, r0
1a006cee:	7823      	ldrb	r3, [r4, #0]
1a006cf0:	4620      	mov	r0, r4
1a006cf2:	1c66      	adds	r6, r4, #1
1a006cf4:	b17b      	cbz	r3, 1a006d16 <strstr+0x30>
1a006cf6:	1e4a      	subs	r2, r1, #1
1a006cf8:	1e63      	subs	r3, r4, #1
1a006cfa:	f812 5f01 	ldrb.w	r5, [r2, #1]!
1a006cfe:	b14d      	cbz	r5, 1a006d14 <strstr+0x2e>
1a006d00:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a006d04:	42af      	cmp	r7, r5
1a006d06:	4634      	mov	r4, r6
1a006d08:	d0f7      	beq.n	1a006cfa <strstr+0x14>
1a006d0a:	e7f0      	b.n	1a006cee <strstr+0x8>
1a006d0c:	780b      	ldrb	r3, [r1, #0]
1a006d0e:	2b00      	cmp	r3, #0
1a006d10:	bf18      	it	ne
1a006d12:	2000      	movne	r0, #0
1a006d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006d16:	4618      	mov	r0, r3
1a006d18:	e7fc      	b.n	1a006d14 <strstr+0x2e>
1a006d1a:	Address 0x000000001a006d1a is out of bounds.


1a006d1c <__swbuf_r>:
1a006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006d1e:	460e      	mov	r6, r1
1a006d20:	4614      	mov	r4, r2
1a006d22:	4605      	mov	r5, r0
1a006d24:	b118      	cbz	r0, 1a006d2e <__swbuf_r+0x12>
1a006d26:	6983      	ldr	r3, [r0, #24]
1a006d28:	b90b      	cbnz	r3, 1a006d2e <__swbuf_r+0x12>
1a006d2a:	f7ff fd7d 	bl	1a006828 <__sinit>
1a006d2e:	4b21      	ldr	r3, [pc, #132]	; (1a006db4 <__swbuf_r+0x98>)
1a006d30:	429c      	cmp	r4, r3
1a006d32:	d12a      	bne.n	1a006d8a <__swbuf_r+0x6e>
1a006d34:	686c      	ldr	r4, [r5, #4]
1a006d36:	69a3      	ldr	r3, [r4, #24]
1a006d38:	60a3      	str	r3, [r4, #8]
1a006d3a:	89a3      	ldrh	r3, [r4, #12]
1a006d3c:	071a      	lsls	r2, r3, #28
1a006d3e:	d52e      	bpl.n	1a006d9e <__swbuf_r+0x82>
1a006d40:	6923      	ldr	r3, [r4, #16]
1a006d42:	b363      	cbz	r3, 1a006d9e <__swbuf_r+0x82>
1a006d44:	6923      	ldr	r3, [r4, #16]
1a006d46:	6820      	ldr	r0, [r4, #0]
1a006d48:	1ac0      	subs	r0, r0, r3
1a006d4a:	6963      	ldr	r3, [r4, #20]
1a006d4c:	b2f6      	uxtb	r6, r6
1a006d4e:	4283      	cmp	r3, r0
1a006d50:	4637      	mov	r7, r6
1a006d52:	dc04      	bgt.n	1a006d5e <__swbuf_r+0x42>
1a006d54:	4621      	mov	r1, r4
1a006d56:	4628      	mov	r0, r5
1a006d58:	f7ff fcfc 	bl	1a006754 <_fflush_r>
1a006d5c:	bb28      	cbnz	r0, 1a006daa <__swbuf_r+0x8e>
1a006d5e:	68a3      	ldr	r3, [r4, #8]
1a006d60:	3b01      	subs	r3, #1
1a006d62:	60a3      	str	r3, [r4, #8]
1a006d64:	6823      	ldr	r3, [r4, #0]
1a006d66:	1c5a      	adds	r2, r3, #1
1a006d68:	6022      	str	r2, [r4, #0]
1a006d6a:	701e      	strb	r6, [r3, #0]
1a006d6c:	6963      	ldr	r3, [r4, #20]
1a006d6e:	3001      	adds	r0, #1
1a006d70:	4283      	cmp	r3, r0
1a006d72:	d004      	beq.n	1a006d7e <__swbuf_r+0x62>
1a006d74:	89a3      	ldrh	r3, [r4, #12]
1a006d76:	07db      	lsls	r3, r3, #31
1a006d78:	d519      	bpl.n	1a006dae <__swbuf_r+0x92>
1a006d7a:	2e0a      	cmp	r6, #10
1a006d7c:	d117      	bne.n	1a006dae <__swbuf_r+0x92>
1a006d7e:	4621      	mov	r1, r4
1a006d80:	4628      	mov	r0, r5
1a006d82:	f7ff fce7 	bl	1a006754 <_fflush_r>
1a006d86:	b190      	cbz	r0, 1a006dae <__swbuf_r+0x92>
1a006d88:	e00f      	b.n	1a006daa <__swbuf_r+0x8e>
1a006d8a:	4b0b      	ldr	r3, [pc, #44]	; (1a006db8 <__swbuf_r+0x9c>)
1a006d8c:	429c      	cmp	r4, r3
1a006d8e:	d101      	bne.n	1a006d94 <__swbuf_r+0x78>
1a006d90:	68ac      	ldr	r4, [r5, #8]
1a006d92:	e7d0      	b.n	1a006d36 <__swbuf_r+0x1a>
1a006d94:	4b09      	ldr	r3, [pc, #36]	; (1a006dbc <__swbuf_r+0xa0>)
1a006d96:	429c      	cmp	r4, r3
1a006d98:	bf08      	it	eq
1a006d9a:	68ec      	ldreq	r4, [r5, #12]
1a006d9c:	e7cb      	b.n	1a006d36 <__swbuf_r+0x1a>
1a006d9e:	4621      	mov	r1, r4
1a006da0:	4628      	mov	r0, r5
1a006da2:	f000 f80d 	bl	1a006dc0 <__swsetup_r>
1a006da6:	2800      	cmp	r0, #0
1a006da8:	d0cc      	beq.n	1a006d44 <__swbuf_r+0x28>
1a006daa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a006dae:	4638      	mov	r0, r7
1a006db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006db2:	bf00      	nop
1a006db4:	1a007cdc 	.word	0x1a007cdc
1a006db8:	1a007cfc 	.word	0x1a007cfc
1a006dbc:	1a007cbc 	.word	0x1a007cbc

1a006dc0 <__swsetup_r>:
1a006dc0:	4b32      	ldr	r3, [pc, #200]	; (1a006e8c <__swsetup_r+0xcc>)
1a006dc2:	b570      	push	{r4, r5, r6, lr}
1a006dc4:	681d      	ldr	r5, [r3, #0]
1a006dc6:	4606      	mov	r6, r0
1a006dc8:	460c      	mov	r4, r1
1a006dca:	b125      	cbz	r5, 1a006dd6 <__swsetup_r+0x16>
1a006dcc:	69ab      	ldr	r3, [r5, #24]
1a006dce:	b913      	cbnz	r3, 1a006dd6 <__swsetup_r+0x16>
1a006dd0:	4628      	mov	r0, r5
1a006dd2:	f7ff fd29 	bl	1a006828 <__sinit>
1a006dd6:	4b2e      	ldr	r3, [pc, #184]	; (1a006e90 <__swsetup_r+0xd0>)
1a006dd8:	429c      	cmp	r4, r3
1a006dda:	d10f      	bne.n	1a006dfc <__swsetup_r+0x3c>
1a006ddc:	686c      	ldr	r4, [r5, #4]
1a006dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006de2:	b29a      	uxth	r2, r3
1a006de4:	0715      	lsls	r5, r2, #28
1a006de6:	d42c      	bmi.n	1a006e42 <__swsetup_r+0x82>
1a006de8:	06d0      	lsls	r0, r2, #27
1a006dea:	d411      	bmi.n	1a006e10 <__swsetup_r+0x50>
1a006dec:	2209      	movs	r2, #9
1a006dee:	6032      	str	r2, [r6, #0]
1a006df0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006df4:	81a3      	strh	r3, [r4, #12]
1a006df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006dfa:	e03e      	b.n	1a006e7a <__swsetup_r+0xba>
1a006dfc:	4b25      	ldr	r3, [pc, #148]	; (1a006e94 <__swsetup_r+0xd4>)
1a006dfe:	429c      	cmp	r4, r3
1a006e00:	d101      	bne.n	1a006e06 <__swsetup_r+0x46>
1a006e02:	68ac      	ldr	r4, [r5, #8]
1a006e04:	e7eb      	b.n	1a006dde <__swsetup_r+0x1e>
1a006e06:	4b24      	ldr	r3, [pc, #144]	; (1a006e98 <__swsetup_r+0xd8>)
1a006e08:	429c      	cmp	r4, r3
1a006e0a:	bf08      	it	eq
1a006e0c:	68ec      	ldreq	r4, [r5, #12]
1a006e0e:	e7e6      	b.n	1a006dde <__swsetup_r+0x1e>
1a006e10:	0751      	lsls	r1, r2, #29
1a006e12:	d512      	bpl.n	1a006e3a <__swsetup_r+0x7a>
1a006e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a006e16:	b141      	cbz	r1, 1a006e2a <__swsetup_r+0x6a>
1a006e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a006e1c:	4299      	cmp	r1, r3
1a006e1e:	d002      	beq.n	1a006e26 <__swsetup_r+0x66>
1a006e20:	4630      	mov	r0, r6
1a006e22:	f7ff fdc3 	bl	1a0069ac <_free_r>
1a006e26:	2300      	movs	r3, #0
1a006e28:	6363      	str	r3, [r4, #52]	; 0x34
1a006e2a:	89a3      	ldrh	r3, [r4, #12]
1a006e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a006e30:	81a3      	strh	r3, [r4, #12]
1a006e32:	2300      	movs	r3, #0
1a006e34:	6063      	str	r3, [r4, #4]
1a006e36:	6923      	ldr	r3, [r4, #16]
1a006e38:	6023      	str	r3, [r4, #0]
1a006e3a:	89a3      	ldrh	r3, [r4, #12]
1a006e3c:	f043 0308 	orr.w	r3, r3, #8
1a006e40:	81a3      	strh	r3, [r4, #12]
1a006e42:	6923      	ldr	r3, [r4, #16]
1a006e44:	b94b      	cbnz	r3, 1a006e5a <__swsetup_r+0x9a>
1a006e46:	89a3      	ldrh	r3, [r4, #12]
1a006e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a006e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a006e50:	d003      	beq.n	1a006e5a <__swsetup_r+0x9a>
1a006e52:	4621      	mov	r1, r4
1a006e54:	4630      	mov	r0, r6
1a006e56:	f000 f845 	bl	1a006ee4 <__smakebuf_r>
1a006e5a:	89a2      	ldrh	r2, [r4, #12]
1a006e5c:	f012 0301 	ands.w	r3, r2, #1
1a006e60:	d00c      	beq.n	1a006e7c <__swsetup_r+0xbc>
1a006e62:	2300      	movs	r3, #0
1a006e64:	60a3      	str	r3, [r4, #8]
1a006e66:	6963      	ldr	r3, [r4, #20]
1a006e68:	425b      	negs	r3, r3
1a006e6a:	61a3      	str	r3, [r4, #24]
1a006e6c:	6923      	ldr	r3, [r4, #16]
1a006e6e:	b953      	cbnz	r3, 1a006e86 <__swsetup_r+0xc6>
1a006e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006e74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a006e78:	d1ba      	bne.n	1a006df0 <__swsetup_r+0x30>
1a006e7a:	bd70      	pop	{r4, r5, r6, pc}
1a006e7c:	0792      	lsls	r2, r2, #30
1a006e7e:	bf58      	it	pl
1a006e80:	6963      	ldrpl	r3, [r4, #20]
1a006e82:	60a3      	str	r3, [r4, #8]
1a006e84:	e7f2      	b.n	1a006e6c <__swsetup_r+0xac>
1a006e86:	2000      	movs	r0, #0
1a006e88:	e7f7      	b.n	1a006e7a <__swsetup_r+0xba>
1a006e8a:	bf00      	nop
1a006e8c:	10001cfc 	.word	0x10001cfc
1a006e90:	1a007cdc 	.word	0x1a007cdc
1a006e94:	1a007cfc 	.word	0x1a007cfc
1a006e98:	1a007cbc 	.word	0x1a007cbc

1a006e9c <__swhatbuf_r>:
1a006e9c:	b570      	push	{r4, r5, r6, lr}
1a006e9e:	460e      	mov	r6, r1
1a006ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006ea4:	2900      	cmp	r1, #0
1a006ea6:	b096      	sub	sp, #88	; 0x58
1a006ea8:	4614      	mov	r4, r2
1a006eaa:	461d      	mov	r5, r3
1a006eac:	da07      	bge.n	1a006ebe <__swhatbuf_r+0x22>
1a006eae:	2300      	movs	r3, #0
1a006eb0:	602b      	str	r3, [r5, #0]
1a006eb2:	89b3      	ldrh	r3, [r6, #12]
1a006eb4:	061a      	lsls	r2, r3, #24
1a006eb6:	d410      	bmi.n	1a006eda <__swhatbuf_r+0x3e>
1a006eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006ebc:	e00e      	b.n	1a006edc <__swhatbuf_r+0x40>
1a006ebe:	466a      	mov	r2, sp
1a006ec0:	f7fb fd67 	bl	1a002992 <_fstat_r>
1a006ec4:	2800      	cmp	r0, #0
1a006ec6:	dbf2      	blt.n	1a006eae <__swhatbuf_r+0x12>
1a006ec8:	9a01      	ldr	r2, [sp, #4]
1a006eca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a006ece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a006ed2:	425a      	negs	r2, r3
1a006ed4:	415a      	adcs	r2, r3
1a006ed6:	602a      	str	r2, [r5, #0]
1a006ed8:	e7ee      	b.n	1a006eb8 <__swhatbuf_r+0x1c>
1a006eda:	2340      	movs	r3, #64	; 0x40
1a006edc:	2000      	movs	r0, #0
1a006ede:	6023      	str	r3, [r4, #0]
1a006ee0:	b016      	add	sp, #88	; 0x58
1a006ee2:	bd70      	pop	{r4, r5, r6, pc}

1a006ee4 <__smakebuf_r>:
1a006ee4:	898b      	ldrh	r3, [r1, #12]
1a006ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a006ee8:	079d      	lsls	r5, r3, #30
1a006eea:	4606      	mov	r6, r0
1a006eec:	460c      	mov	r4, r1
1a006eee:	d507      	bpl.n	1a006f00 <__smakebuf_r+0x1c>
1a006ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a006ef4:	6023      	str	r3, [r4, #0]
1a006ef6:	6123      	str	r3, [r4, #16]
1a006ef8:	2301      	movs	r3, #1
1a006efa:	6163      	str	r3, [r4, #20]
1a006efc:	b002      	add	sp, #8
1a006efe:	bd70      	pop	{r4, r5, r6, pc}
1a006f00:	ab01      	add	r3, sp, #4
1a006f02:	466a      	mov	r2, sp
1a006f04:	f7ff ffca 	bl	1a006e9c <__swhatbuf_r>
1a006f08:	9900      	ldr	r1, [sp, #0]
1a006f0a:	4605      	mov	r5, r0
1a006f0c:	4630      	mov	r0, r6
1a006f0e:	f7ff fd9b 	bl	1a006a48 <_malloc_r>
1a006f12:	b948      	cbnz	r0, 1a006f28 <__smakebuf_r+0x44>
1a006f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006f18:	059a      	lsls	r2, r3, #22
1a006f1a:	d4ef      	bmi.n	1a006efc <__smakebuf_r+0x18>
1a006f1c:	f023 0303 	bic.w	r3, r3, #3
1a006f20:	f043 0302 	orr.w	r3, r3, #2
1a006f24:	81a3      	strh	r3, [r4, #12]
1a006f26:	e7e3      	b.n	1a006ef0 <__smakebuf_r+0xc>
1a006f28:	4b0d      	ldr	r3, [pc, #52]	; (1a006f60 <__smakebuf_r+0x7c>)
1a006f2a:	62b3      	str	r3, [r6, #40]	; 0x28
1a006f2c:	89a3      	ldrh	r3, [r4, #12]
1a006f2e:	6020      	str	r0, [r4, #0]
1a006f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006f34:	81a3      	strh	r3, [r4, #12]
1a006f36:	9b00      	ldr	r3, [sp, #0]
1a006f38:	6163      	str	r3, [r4, #20]
1a006f3a:	9b01      	ldr	r3, [sp, #4]
1a006f3c:	6120      	str	r0, [r4, #16]
1a006f3e:	b15b      	cbz	r3, 1a006f58 <__smakebuf_r+0x74>
1a006f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006f44:	4630      	mov	r0, r6
1a006f46:	f7fb fd29 	bl	1a00299c <_isatty_r>
1a006f4a:	b128      	cbz	r0, 1a006f58 <__smakebuf_r+0x74>
1a006f4c:	89a3      	ldrh	r3, [r4, #12]
1a006f4e:	f023 0303 	bic.w	r3, r3, #3
1a006f52:	f043 0301 	orr.w	r3, r3, #1
1a006f56:	81a3      	strh	r3, [r4, #12]
1a006f58:	89a3      	ldrh	r3, [r4, #12]
1a006f5a:	431d      	orrs	r5, r3
1a006f5c:	81a5      	strh	r5, [r4, #12]
1a006f5e:	e7cd      	b.n	1a006efc <__smakebuf_r+0x18>
1a006f60:	1a0067f1 	.word	0x1a0067f1

1a006f64 <__malloc_lock>:
1a006f64:	4770      	bx	lr

1a006f66 <__malloc_unlock>:
1a006f66:	4770      	bx	lr

1a006f68 <__sfputc_r>:
1a006f68:	6893      	ldr	r3, [r2, #8]
1a006f6a:	3b01      	subs	r3, #1
1a006f6c:	2b00      	cmp	r3, #0
1a006f6e:	b410      	push	{r4}
1a006f70:	6093      	str	r3, [r2, #8]
1a006f72:	da08      	bge.n	1a006f86 <__sfputc_r+0x1e>
1a006f74:	6994      	ldr	r4, [r2, #24]
1a006f76:	42a3      	cmp	r3, r4
1a006f78:	db01      	blt.n	1a006f7e <__sfputc_r+0x16>
1a006f7a:	290a      	cmp	r1, #10
1a006f7c:	d103      	bne.n	1a006f86 <__sfputc_r+0x1e>
1a006f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006f82:	f7ff becb 	b.w	1a006d1c <__swbuf_r>
1a006f86:	6813      	ldr	r3, [r2, #0]
1a006f88:	1c58      	adds	r0, r3, #1
1a006f8a:	6010      	str	r0, [r2, #0]
1a006f8c:	7019      	strb	r1, [r3, #0]
1a006f8e:	4608      	mov	r0, r1
1a006f90:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006f94:	4770      	bx	lr

1a006f96 <__sfputs_r>:
1a006f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006f98:	4606      	mov	r6, r0
1a006f9a:	460f      	mov	r7, r1
1a006f9c:	4614      	mov	r4, r2
1a006f9e:	18d5      	adds	r5, r2, r3
1a006fa0:	42ac      	cmp	r4, r5
1a006fa2:	d101      	bne.n	1a006fa8 <__sfputs_r+0x12>
1a006fa4:	2000      	movs	r0, #0
1a006fa6:	e007      	b.n	1a006fb8 <__sfputs_r+0x22>
1a006fa8:	463a      	mov	r2, r7
1a006faa:	f814 1b01 	ldrb.w	r1, [r4], #1
1a006fae:	4630      	mov	r0, r6
1a006fb0:	f7ff ffda 	bl	1a006f68 <__sfputc_r>
1a006fb4:	1c43      	adds	r3, r0, #1
1a006fb6:	d1f3      	bne.n	1a006fa0 <__sfputs_r+0xa>
1a006fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006fba:	Address 0x000000001a006fba is out of bounds.


1a006fbc <_vfiprintf_r>:
1a006fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006fc0:	460c      	mov	r4, r1
1a006fc2:	b09d      	sub	sp, #116	; 0x74
1a006fc4:	4617      	mov	r7, r2
1a006fc6:	461d      	mov	r5, r3
1a006fc8:	4606      	mov	r6, r0
1a006fca:	b118      	cbz	r0, 1a006fd4 <_vfiprintf_r+0x18>
1a006fcc:	6983      	ldr	r3, [r0, #24]
1a006fce:	b90b      	cbnz	r3, 1a006fd4 <_vfiprintf_r+0x18>
1a006fd0:	f7ff fc2a 	bl	1a006828 <__sinit>
1a006fd4:	4b7c      	ldr	r3, [pc, #496]	; (1a0071c8 <_vfiprintf_r+0x20c>)
1a006fd6:	429c      	cmp	r4, r3
1a006fd8:	d158      	bne.n	1a00708c <_vfiprintf_r+0xd0>
1a006fda:	6874      	ldr	r4, [r6, #4]
1a006fdc:	89a3      	ldrh	r3, [r4, #12]
1a006fde:	0718      	lsls	r0, r3, #28
1a006fe0:	d55e      	bpl.n	1a0070a0 <_vfiprintf_r+0xe4>
1a006fe2:	6923      	ldr	r3, [r4, #16]
1a006fe4:	2b00      	cmp	r3, #0
1a006fe6:	d05b      	beq.n	1a0070a0 <_vfiprintf_r+0xe4>
1a006fe8:	2300      	movs	r3, #0
1a006fea:	9309      	str	r3, [sp, #36]	; 0x24
1a006fec:	2320      	movs	r3, #32
1a006fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a006ff2:	2330      	movs	r3, #48	; 0x30
1a006ff4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a006ff8:	9503      	str	r5, [sp, #12]
1a006ffa:	f04f 0b01 	mov.w	fp, #1
1a006ffe:	46b8      	mov	r8, r7
1a007000:	4645      	mov	r5, r8
1a007002:	f815 3b01 	ldrb.w	r3, [r5], #1
1a007006:	b10b      	cbz	r3, 1a00700c <_vfiprintf_r+0x50>
1a007008:	2b25      	cmp	r3, #37	; 0x25
1a00700a:	d154      	bne.n	1a0070b6 <_vfiprintf_r+0xfa>
1a00700c:	ebb8 0a07 	subs.w	sl, r8, r7
1a007010:	d00b      	beq.n	1a00702a <_vfiprintf_r+0x6e>
1a007012:	4653      	mov	r3, sl
1a007014:	463a      	mov	r2, r7
1a007016:	4621      	mov	r1, r4
1a007018:	4630      	mov	r0, r6
1a00701a:	f7ff ffbc 	bl	1a006f96 <__sfputs_r>
1a00701e:	3001      	adds	r0, #1
1a007020:	f000 80c2 	beq.w	1a0071a8 <_vfiprintf_r+0x1ec>
1a007024:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007026:	4453      	add	r3, sl
1a007028:	9309      	str	r3, [sp, #36]	; 0x24
1a00702a:	f898 3000 	ldrb.w	r3, [r8]
1a00702e:	2b00      	cmp	r3, #0
1a007030:	f000 80ba 	beq.w	1a0071a8 <_vfiprintf_r+0x1ec>
1a007034:	2300      	movs	r3, #0
1a007036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00703a:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a00703e:	9304      	str	r3, [sp, #16]
1a007040:	9307      	str	r3, [sp, #28]
1a007042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a007046:	931a      	str	r3, [sp, #104]	; 0x68
1a007048:	46a8      	mov	r8, r5
1a00704a:	2205      	movs	r2, #5
1a00704c:	f818 1b01 	ldrb.w	r1, [r8], #1
1a007050:	485e      	ldr	r0, [pc, #376]	; (1a0071cc <_vfiprintf_r+0x210>)
1a007052:	f000 fa55 	bl	1a007500 <memchr>
1a007056:	9b04      	ldr	r3, [sp, #16]
1a007058:	bb78      	cbnz	r0, 1a0070ba <_vfiprintf_r+0xfe>
1a00705a:	06d9      	lsls	r1, r3, #27
1a00705c:	bf44      	itt	mi
1a00705e:	2220      	movmi	r2, #32
1a007060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a007064:	071a      	lsls	r2, r3, #28
1a007066:	bf44      	itt	mi
1a007068:	222b      	movmi	r2, #43	; 0x2b
1a00706a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00706e:	782a      	ldrb	r2, [r5, #0]
1a007070:	2a2a      	cmp	r2, #42	; 0x2a
1a007072:	d02a      	beq.n	1a0070ca <_vfiprintf_r+0x10e>
1a007074:	9a07      	ldr	r2, [sp, #28]
1a007076:	46a8      	mov	r8, r5
1a007078:	2000      	movs	r0, #0
1a00707a:	250a      	movs	r5, #10
1a00707c:	4641      	mov	r1, r8
1a00707e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a007082:	3b30      	subs	r3, #48	; 0x30
1a007084:	2b09      	cmp	r3, #9
1a007086:	d969      	bls.n	1a00715c <_vfiprintf_r+0x1a0>
1a007088:	b360      	cbz	r0, 1a0070e4 <_vfiprintf_r+0x128>
1a00708a:	e024      	b.n	1a0070d6 <_vfiprintf_r+0x11a>
1a00708c:	4b50      	ldr	r3, [pc, #320]	; (1a0071d0 <_vfiprintf_r+0x214>)
1a00708e:	429c      	cmp	r4, r3
1a007090:	d101      	bne.n	1a007096 <_vfiprintf_r+0xda>
1a007092:	68b4      	ldr	r4, [r6, #8]
1a007094:	e7a2      	b.n	1a006fdc <_vfiprintf_r+0x20>
1a007096:	4b4f      	ldr	r3, [pc, #316]	; (1a0071d4 <_vfiprintf_r+0x218>)
1a007098:	429c      	cmp	r4, r3
1a00709a:	bf08      	it	eq
1a00709c:	68f4      	ldreq	r4, [r6, #12]
1a00709e:	e79d      	b.n	1a006fdc <_vfiprintf_r+0x20>
1a0070a0:	4621      	mov	r1, r4
1a0070a2:	4630      	mov	r0, r6
1a0070a4:	f7ff fe8c 	bl	1a006dc0 <__swsetup_r>
1a0070a8:	2800      	cmp	r0, #0
1a0070aa:	d09d      	beq.n	1a006fe8 <_vfiprintf_r+0x2c>
1a0070ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0070b0:	b01d      	add	sp, #116	; 0x74
1a0070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0070b6:	46a8      	mov	r8, r5
1a0070b8:	e7a2      	b.n	1a007000 <_vfiprintf_r+0x44>
1a0070ba:	4a44      	ldr	r2, [pc, #272]	; (1a0071cc <_vfiprintf_r+0x210>)
1a0070bc:	1a80      	subs	r0, r0, r2
1a0070be:	fa0b f000 	lsl.w	r0, fp, r0
1a0070c2:	4318      	orrs	r0, r3
1a0070c4:	9004      	str	r0, [sp, #16]
1a0070c6:	4645      	mov	r5, r8
1a0070c8:	e7be      	b.n	1a007048 <_vfiprintf_r+0x8c>
1a0070ca:	9a03      	ldr	r2, [sp, #12]
1a0070cc:	1d11      	adds	r1, r2, #4
1a0070ce:	6812      	ldr	r2, [r2, #0]
1a0070d0:	9103      	str	r1, [sp, #12]
1a0070d2:	2a00      	cmp	r2, #0
1a0070d4:	db01      	blt.n	1a0070da <_vfiprintf_r+0x11e>
1a0070d6:	9207      	str	r2, [sp, #28]
1a0070d8:	e004      	b.n	1a0070e4 <_vfiprintf_r+0x128>
1a0070da:	4252      	negs	r2, r2
1a0070dc:	f043 0302 	orr.w	r3, r3, #2
1a0070e0:	9207      	str	r2, [sp, #28]
1a0070e2:	9304      	str	r3, [sp, #16]
1a0070e4:	f898 3000 	ldrb.w	r3, [r8]
1a0070e8:	2b2e      	cmp	r3, #46	; 0x2e
1a0070ea:	d10e      	bne.n	1a00710a <_vfiprintf_r+0x14e>
1a0070ec:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0070f0:	2b2a      	cmp	r3, #42	; 0x2a
1a0070f2:	d138      	bne.n	1a007166 <_vfiprintf_r+0x1aa>
1a0070f4:	9b03      	ldr	r3, [sp, #12]
1a0070f6:	1d1a      	adds	r2, r3, #4
1a0070f8:	681b      	ldr	r3, [r3, #0]
1a0070fa:	9203      	str	r2, [sp, #12]
1a0070fc:	2b00      	cmp	r3, #0
1a0070fe:	bfb8      	it	lt
1a007100:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a007104:	f108 0802 	add.w	r8, r8, #2
1a007108:	9305      	str	r3, [sp, #20]
1a00710a:	4d33      	ldr	r5, [pc, #204]	; (1a0071d8 <_vfiprintf_r+0x21c>)
1a00710c:	f898 1000 	ldrb.w	r1, [r8]
1a007110:	2203      	movs	r2, #3
1a007112:	4628      	mov	r0, r5
1a007114:	f000 f9f4 	bl	1a007500 <memchr>
1a007118:	b140      	cbz	r0, 1a00712c <_vfiprintf_r+0x170>
1a00711a:	2340      	movs	r3, #64	; 0x40
1a00711c:	1b40      	subs	r0, r0, r5
1a00711e:	fa03 f000 	lsl.w	r0, r3, r0
1a007122:	9b04      	ldr	r3, [sp, #16]
1a007124:	4303      	orrs	r3, r0
1a007126:	f108 0801 	add.w	r8, r8, #1
1a00712a:	9304      	str	r3, [sp, #16]
1a00712c:	f898 1000 	ldrb.w	r1, [r8]
1a007130:	482a      	ldr	r0, [pc, #168]	; (1a0071dc <_vfiprintf_r+0x220>)
1a007132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a007136:	2206      	movs	r2, #6
1a007138:	f108 0701 	add.w	r7, r8, #1
1a00713c:	f000 f9e0 	bl	1a007500 <memchr>
1a007140:	2800      	cmp	r0, #0
1a007142:	d037      	beq.n	1a0071b4 <_vfiprintf_r+0x1f8>
1a007144:	4b26      	ldr	r3, [pc, #152]	; (1a0071e0 <_vfiprintf_r+0x224>)
1a007146:	bb1b      	cbnz	r3, 1a007190 <_vfiprintf_r+0x1d4>
1a007148:	9b03      	ldr	r3, [sp, #12]
1a00714a:	3307      	adds	r3, #7
1a00714c:	f023 0307 	bic.w	r3, r3, #7
1a007150:	3308      	adds	r3, #8
1a007152:	9303      	str	r3, [sp, #12]
1a007154:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a007156:	444b      	add	r3, r9
1a007158:	9309      	str	r3, [sp, #36]	; 0x24
1a00715a:	e750      	b.n	1a006ffe <_vfiprintf_r+0x42>
1a00715c:	fb05 3202 	mla	r2, r5, r2, r3
1a007160:	2001      	movs	r0, #1
1a007162:	4688      	mov	r8, r1
1a007164:	e78a      	b.n	1a00707c <_vfiprintf_r+0xc0>
1a007166:	2300      	movs	r3, #0
1a007168:	f108 0801 	add.w	r8, r8, #1
1a00716c:	9305      	str	r3, [sp, #20]
1a00716e:	4619      	mov	r1, r3
1a007170:	250a      	movs	r5, #10
1a007172:	4640      	mov	r0, r8
1a007174:	f810 2b01 	ldrb.w	r2, [r0], #1
1a007178:	3a30      	subs	r2, #48	; 0x30
1a00717a:	2a09      	cmp	r2, #9
1a00717c:	d903      	bls.n	1a007186 <_vfiprintf_r+0x1ca>
1a00717e:	2b00      	cmp	r3, #0
1a007180:	d0c3      	beq.n	1a00710a <_vfiprintf_r+0x14e>
1a007182:	9105      	str	r1, [sp, #20]
1a007184:	e7c1      	b.n	1a00710a <_vfiprintf_r+0x14e>
1a007186:	fb05 2101 	mla	r1, r5, r1, r2
1a00718a:	2301      	movs	r3, #1
1a00718c:	4680      	mov	r8, r0
1a00718e:	e7f0      	b.n	1a007172 <_vfiprintf_r+0x1b6>
1a007190:	ab03      	add	r3, sp, #12
1a007192:	9300      	str	r3, [sp, #0]
1a007194:	4622      	mov	r2, r4
1a007196:	4b13      	ldr	r3, [pc, #76]	; (1a0071e4 <_vfiprintf_r+0x228>)
1a007198:	a904      	add	r1, sp, #16
1a00719a:	4630      	mov	r0, r6
1a00719c:	f3af 8000 	nop.w
1a0071a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0071a4:	4681      	mov	r9, r0
1a0071a6:	d1d5      	bne.n	1a007154 <_vfiprintf_r+0x198>
1a0071a8:	89a3      	ldrh	r3, [r4, #12]
1a0071aa:	065b      	lsls	r3, r3, #25
1a0071ac:	f53f af7e 	bmi.w	1a0070ac <_vfiprintf_r+0xf0>
1a0071b0:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0071b2:	e77d      	b.n	1a0070b0 <_vfiprintf_r+0xf4>
1a0071b4:	ab03      	add	r3, sp, #12
1a0071b6:	9300      	str	r3, [sp, #0]
1a0071b8:	4622      	mov	r2, r4
1a0071ba:	4b0a      	ldr	r3, [pc, #40]	; (1a0071e4 <_vfiprintf_r+0x228>)
1a0071bc:	a904      	add	r1, sp, #16
1a0071be:	4630      	mov	r0, r6
1a0071c0:	f000 f888 	bl	1a0072d4 <_printf_i>
1a0071c4:	e7ec      	b.n	1a0071a0 <_vfiprintf_r+0x1e4>
1a0071c6:	bf00      	nop
1a0071c8:	1a007cdc 	.word	0x1a007cdc
1a0071cc:	1a007d20 	.word	0x1a007d20
1a0071d0:	1a007cfc 	.word	0x1a007cfc
1a0071d4:	1a007cbc 	.word	0x1a007cbc
1a0071d8:	1a007d26 	.word	0x1a007d26
1a0071dc:	1a007d2a 	.word	0x1a007d2a
1a0071e0:	00000000 	.word	0x00000000
1a0071e4:	1a006f97 	.word	0x1a006f97

1a0071e8 <_printf_common>:
1a0071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0071ec:	4691      	mov	r9, r2
1a0071ee:	461f      	mov	r7, r3
1a0071f0:	688a      	ldr	r2, [r1, #8]
1a0071f2:	690b      	ldr	r3, [r1, #16]
1a0071f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0071f8:	4293      	cmp	r3, r2
1a0071fa:	bfb8      	it	lt
1a0071fc:	4613      	movlt	r3, r2
1a0071fe:	f8c9 3000 	str.w	r3, [r9]
1a007202:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a007206:	4606      	mov	r6, r0
1a007208:	460c      	mov	r4, r1
1a00720a:	b112      	cbz	r2, 1a007212 <_printf_common+0x2a>
1a00720c:	3301      	adds	r3, #1
1a00720e:	f8c9 3000 	str.w	r3, [r9]
1a007212:	6823      	ldr	r3, [r4, #0]
1a007214:	0699      	lsls	r1, r3, #26
1a007216:	bf42      	ittt	mi
1a007218:	f8d9 3000 	ldrmi.w	r3, [r9]
1a00721c:	3302      	addmi	r3, #2
1a00721e:	f8c9 3000 	strmi.w	r3, [r9]
1a007222:	6825      	ldr	r5, [r4, #0]
1a007224:	f015 0506 	ands.w	r5, r5, #6
1a007228:	d107      	bne.n	1a00723a <_printf_common+0x52>
1a00722a:	f104 0a19 	add.w	sl, r4, #25
1a00722e:	68e3      	ldr	r3, [r4, #12]
1a007230:	f8d9 2000 	ldr.w	r2, [r9]
1a007234:	1a9b      	subs	r3, r3, r2
1a007236:	42ab      	cmp	r3, r5
1a007238:	dc28      	bgt.n	1a00728c <_printf_common+0xa4>
1a00723a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a00723e:	6822      	ldr	r2, [r4, #0]
1a007240:	3300      	adds	r3, #0
1a007242:	bf18      	it	ne
1a007244:	2301      	movne	r3, #1
1a007246:	0692      	lsls	r2, r2, #26
1a007248:	d42d      	bmi.n	1a0072a6 <_printf_common+0xbe>
1a00724a:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a00724e:	4639      	mov	r1, r7
1a007250:	4630      	mov	r0, r6
1a007252:	47c0      	blx	r8
1a007254:	3001      	adds	r0, #1
1a007256:	d020      	beq.n	1a00729a <_printf_common+0xb2>
1a007258:	6823      	ldr	r3, [r4, #0]
1a00725a:	68e5      	ldr	r5, [r4, #12]
1a00725c:	f8d9 2000 	ldr.w	r2, [r9]
1a007260:	f003 0306 	and.w	r3, r3, #6
1a007264:	2b04      	cmp	r3, #4
1a007266:	bf08      	it	eq
1a007268:	1aad      	subeq	r5, r5, r2
1a00726a:	68a3      	ldr	r3, [r4, #8]
1a00726c:	6922      	ldr	r2, [r4, #16]
1a00726e:	bf0c      	ite	eq
1a007270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a007274:	2500      	movne	r5, #0
1a007276:	4293      	cmp	r3, r2
1a007278:	bfc4      	itt	gt
1a00727a:	1a9b      	subgt	r3, r3, r2
1a00727c:	18ed      	addgt	r5, r5, r3
1a00727e:	f04f 0900 	mov.w	r9, #0
1a007282:	341a      	adds	r4, #26
1a007284:	454d      	cmp	r5, r9
1a007286:	d11a      	bne.n	1a0072be <_printf_common+0xd6>
1a007288:	2000      	movs	r0, #0
1a00728a:	e008      	b.n	1a00729e <_printf_common+0xb6>
1a00728c:	2301      	movs	r3, #1
1a00728e:	4652      	mov	r2, sl
1a007290:	4639      	mov	r1, r7
1a007292:	4630      	mov	r0, r6
1a007294:	47c0      	blx	r8
1a007296:	3001      	adds	r0, #1
1a007298:	d103      	bne.n	1a0072a2 <_printf_common+0xba>
1a00729a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00729e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0072a2:	3501      	adds	r5, #1
1a0072a4:	e7c3      	b.n	1a00722e <_printf_common+0x46>
1a0072a6:	18e1      	adds	r1, r4, r3
1a0072a8:	1c5a      	adds	r2, r3, #1
1a0072aa:	2030      	movs	r0, #48	; 0x30
1a0072ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0072b0:	4422      	add	r2, r4
1a0072b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0072b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0072ba:	3302      	adds	r3, #2
1a0072bc:	e7c5      	b.n	1a00724a <_printf_common+0x62>
1a0072be:	2301      	movs	r3, #1
1a0072c0:	4622      	mov	r2, r4
1a0072c2:	4639      	mov	r1, r7
1a0072c4:	4630      	mov	r0, r6
1a0072c6:	47c0      	blx	r8
1a0072c8:	3001      	adds	r0, #1
1a0072ca:	d0e6      	beq.n	1a00729a <_printf_common+0xb2>
1a0072cc:	f109 0901 	add.w	r9, r9, #1
1a0072d0:	e7d8      	b.n	1a007284 <_printf_common+0x9c>
1a0072d2:	Address 0x000000001a0072d2 is out of bounds.


1a0072d4 <_printf_i>:
1a0072d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0072d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a0072dc:	460c      	mov	r4, r1
1a0072de:	7e09      	ldrb	r1, [r1, #24]
1a0072e0:	b085      	sub	sp, #20
1a0072e2:	296e      	cmp	r1, #110	; 0x6e
1a0072e4:	4617      	mov	r7, r2
1a0072e6:	4606      	mov	r6, r0
1a0072e8:	4698      	mov	r8, r3
1a0072ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0072ec:	f000 80b3 	beq.w	1a007456 <_printf_i+0x182>
1a0072f0:	d822      	bhi.n	1a007338 <_printf_i+0x64>
1a0072f2:	2963      	cmp	r1, #99	; 0x63
1a0072f4:	d036      	beq.n	1a007364 <_printf_i+0x90>
1a0072f6:	d80a      	bhi.n	1a00730e <_printf_i+0x3a>
1a0072f8:	2900      	cmp	r1, #0
1a0072fa:	f000 80b9 	beq.w	1a007470 <_printf_i+0x19c>
1a0072fe:	2958      	cmp	r1, #88	; 0x58
1a007300:	f000 8083 	beq.w	1a00740a <_printf_i+0x136>
1a007304:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a007308:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00730c:	e032      	b.n	1a007374 <_printf_i+0xa0>
1a00730e:	2964      	cmp	r1, #100	; 0x64
1a007310:	d001      	beq.n	1a007316 <_printf_i+0x42>
1a007312:	2969      	cmp	r1, #105	; 0x69
1a007314:	d1f6      	bne.n	1a007304 <_printf_i+0x30>
1a007316:	6820      	ldr	r0, [r4, #0]
1a007318:	6813      	ldr	r3, [r2, #0]
1a00731a:	0605      	lsls	r5, r0, #24
1a00731c:	f103 0104 	add.w	r1, r3, #4
1a007320:	d52a      	bpl.n	1a007378 <_printf_i+0xa4>
1a007322:	681b      	ldr	r3, [r3, #0]
1a007324:	6011      	str	r1, [r2, #0]
1a007326:	2b00      	cmp	r3, #0
1a007328:	da03      	bge.n	1a007332 <_printf_i+0x5e>
1a00732a:	222d      	movs	r2, #45	; 0x2d
1a00732c:	425b      	negs	r3, r3
1a00732e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a007332:	486f      	ldr	r0, [pc, #444]	; (1a0074f0 <_printf_i+0x21c>)
1a007334:	220a      	movs	r2, #10
1a007336:	e039      	b.n	1a0073ac <_printf_i+0xd8>
1a007338:	2973      	cmp	r1, #115	; 0x73
1a00733a:	f000 809d 	beq.w	1a007478 <_printf_i+0x1a4>
1a00733e:	d808      	bhi.n	1a007352 <_printf_i+0x7e>
1a007340:	296f      	cmp	r1, #111	; 0x6f
1a007342:	d020      	beq.n	1a007386 <_printf_i+0xb2>
1a007344:	2970      	cmp	r1, #112	; 0x70
1a007346:	d1dd      	bne.n	1a007304 <_printf_i+0x30>
1a007348:	6823      	ldr	r3, [r4, #0]
1a00734a:	f043 0320 	orr.w	r3, r3, #32
1a00734e:	6023      	str	r3, [r4, #0]
1a007350:	e003      	b.n	1a00735a <_printf_i+0x86>
1a007352:	2975      	cmp	r1, #117	; 0x75
1a007354:	d017      	beq.n	1a007386 <_printf_i+0xb2>
1a007356:	2978      	cmp	r1, #120	; 0x78
1a007358:	d1d4      	bne.n	1a007304 <_printf_i+0x30>
1a00735a:	2378      	movs	r3, #120	; 0x78
1a00735c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a007360:	4864      	ldr	r0, [pc, #400]	; (1a0074f4 <_printf_i+0x220>)
1a007362:	e055      	b.n	1a007410 <_printf_i+0x13c>
1a007364:	6813      	ldr	r3, [r2, #0]
1a007366:	1d19      	adds	r1, r3, #4
1a007368:	681b      	ldr	r3, [r3, #0]
1a00736a:	6011      	str	r1, [r2, #0]
1a00736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a007370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a007374:	2301      	movs	r3, #1
1a007376:	e08c      	b.n	1a007492 <_printf_i+0x1be>
1a007378:	681b      	ldr	r3, [r3, #0]
1a00737a:	6011      	str	r1, [r2, #0]
1a00737c:	f010 0f40 	tst.w	r0, #64	; 0x40
1a007380:	bf18      	it	ne
1a007382:	b21b      	sxthne	r3, r3
1a007384:	e7cf      	b.n	1a007326 <_printf_i+0x52>
1a007386:	6813      	ldr	r3, [r2, #0]
1a007388:	6825      	ldr	r5, [r4, #0]
1a00738a:	1d18      	adds	r0, r3, #4
1a00738c:	6010      	str	r0, [r2, #0]
1a00738e:	0628      	lsls	r0, r5, #24
1a007390:	d501      	bpl.n	1a007396 <_printf_i+0xc2>
1a007392:	681b      	ldr	r3, [r3, #0]
1a007394:	e002      	b.n	1a00739c <_printf_i+0xc8>
1a007396:	0668      	lsls	r0, r5, #25
1a007398:	d5fb      	bpl.n	1a007392 <_printf_i+0xbe>
1a00739a:	881b      	ldrh	r3, [r3, #0]
1a00739c:	4854      	ldr	r0, [pc, #336]	; (1a0074f0 <_printf_i+0x21c>)
1a00739e:	296f      	cmp	r1, #111	; 0x6f
1a0073a0:	bf14      	ite	ne
1a0073a2:	220a      	movne	r2, #10
1a0073a4:	2208      	moveq	r2, #8
1a0073a6:	2100      	movs	r1, #0
1a0073a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0073ac:	6865      	ldr	r5, [r4, #4]
1a0073ae:	60a5      	str	r5, [r4, #8]
1a0073b0:	2d00      	cmp	r5, #0
1a0073b2:	f2c0 8095 	blt.w	1a0074e0 <_printf_i+0x20c>
1a0073b6:	6821      	ldr	r1, [r4, #0]
1a0073b8:	f021 0104 	bic.w	r1, r1, #4
1a0073bc:	6021      	str	r1, [r4, #0]
1a0073be:	2b00      	cmp	r3, #0
1a0073c0:	d13d      	bne.n	1a00743e <_printf_i+0x16a>
1a0073c2:	2d00      	cmp	r5, #0
1a0073c4:	f040 808e 	bne.w	1a0074e4 <_printf_i+0x210>
1a0073c8:	4665      	mov	r5, ip
1a0073ca:	2a08      	cmp	r2, #8
1a0073cc:	d10b      	bne.n	1a0073e6 <_printf_i+0x112>
1a0073ce:	6823      	ldr	r3, [r4, #0]
1a0073d0:	07db      	lsls	r3, r3, #31
1a0073d2:	d508      	bpl.n	1a0073e6 <_printf_i+0x112>
1a0073d4:	6923      	ldr	r3, [r4, #16]
1a0073d6:	6862      	ldr	r2, [r4, #4]
1a0073d8:	429a      	cmp	r2, r3
1a0073da:	bfde      	ittt	le
1a0073dc:	2330      	movle	r3, #48	; 0x30
1a0073de:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0073e2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0073e6:	ebac 0305 	sub.w	r3, ip, r5
1a0073ea:	6123      	str	r3, [r4, #16]
1a0073ec:	f8cd 8000 	str.w	r8, [sp]
1a0073f0:	463b      	mov	r3, r7
1a0073f2:	aa03      	add	r2, sp, #12
1a0073f4:	4621      	mov	r1, r4
1a0073f6:	4630      	mov	r0, r6
1a0073f8:	f7ff fef6 	bl	1a0071e8 <_printf_common>
1a0073fc:	3001      	adds	r0, #1
1a0073fe:	d14d      	bne.n	1a00749c <_printf_i+0x1c8>
1a007400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007404:	b005      	add	sp, #20
1a007406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00740a:	4839      	ldr	r0, [pc, #228]	; (1a0074f0 <_printf_i+0x21c>)
1a00740c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a007410:	6813      	ldr	r3, [r2, #0]
1a007412:	6821      	ldr	r1, [r4, #0]
1a007414:	1d1d      	adds	r5, r3, #4
1a007416:	681b      	ldr	r3, [r3, #0]
1a007418:	6015      	str	r5, [r2, #0]
1a00741a:	060a      	lsls	r2, r1, #24
1a00741c:	d50b      	bpl.n	1a007436 <_printf_i+0x162>
1a00741e:	07ca      	lsls	r2, r1, #31
1a007420:	bf44      	itt	mi
1a007422:	f041 0120 	orrmi.w	r1, r1, #32
1a007426:	6021      	strmi	r1, [r4, #0]
1a007428:	b91b      	cbnz	r3, 1a007432 <_printf_i+0x15e>
1a00742a:	6822      	ldr	r2, [r4, #0]
1a00742c:	f022 0220 	bic.w	r2, r2, #32
1a007430:	6022      	str	r2, [r4, #0]
1a007432:	2210      	movs	r2, #16
1a007434:	e7b7      	b.n	1a0073a6 <_printf_i+0xd2>
1a007436:	064d      	lsls	r5, r1, #25
1a007438:	bf48      	it	mi
1a00743a:	b29b      	uxthmi	r3, r3
1a00743c:	e7ef      	b.n	1a00741e <_printf_i+0x14a>
1a00743e:	4665      	mov	r5, ip
1a007440:	fbb3 f1f2 	udiv	r1, r3, r2
1a007444:	fb02 3311 	mls	r3, r2, r1, r3
1a007448:	5cc3      	ldrb	r3, [r0, r3]
1a00744a:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a00744e:	460b      	mov	r3, r1
1a007450:	2900      	cmp	r1, #0
1a007452:	d1f5      	bne.n	1a007440 <_printf_i+0x16c>
1a007454:	e7b9      	b.n	1a0073ca <_printf_i+0xf6>
1a007456:	6813      	ldr	r3, [r2, #0]
1a007458:	6825      	ldr	r5, [r4, #0]
1a00745a:	6961      	ldr	r1, [r4, #20]
1a00745c:	1d18      	adds	r0, r3, #4
1a00745e:	6010      	str	r0, [r2, #0]
1a007460:	0628      	lsls	r0, r5, #24
1a007462:	681b      	ldr	r3, [r3, #0]
1a007464:	d501      	bpl.n	1a00746a <_printf_i+0x196>
1a007466:	6019      	str	r1, [r3, #0]
1a007468:	e002      	b.n	1a007470 <_printf_i+0x19c>
1a00746a:	066a      	lsls	r2, r5, #25
1a00746c:	d5fb      	bpl.n	1a007466 <_printf_i+0x192>
1a00746e:	8019      	strh	r1, [r3, #0]
1a007470:	2300      	movs	r3, #0
1a007472:	6123      	str	r3, [r4, #16]
1a007474:	4665      	mov	r5, ip
1a007476:	e7b9      	b.n	1a0073ec <_printf_i+0x118>
1a007478:	6813      	ldr	r3, [r2, #0]
1a00747a:	1d19      	adds	r1, r3, #4
1a00747c:	6011      	str	r1, [r2, #0]
1a00747e:	681d      	ldr	r5, [r3, #0]
1a007480:	6862      	ldr	r2, [r4, #4]
1a007482:	2100      	movs	r1, #0
1a007484:	4628      	mov	r0, r5
1a007486:	f000 f83b 	bl	1a007500 <memchr>
1a00748a:	b108      	cbz	r0, 1a007490 <_printf_i+0x1bc>
1a00748c:	1b40      	subs	r0, r0, r5
1a00748e:	6060      	str	r0, [r4, #4]
1a007490:	6863      	ldr	r3, [r4, #4]
1a007492:	6123      	str	r3, [r4, #16]
1a007494:	2300      	movs	r3, #0
1a007496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00749a:	e7a7      	b.n	1a0073ec <_printf_i+0x118>
1a00749c:	6923      	ldr	r3, [r4, #16]
1a00749e:	462a      	mov	r2, r5
1a0074a0:	4639      	mov	r1, r7
1a0074a2:	4630      	mov	r0, r6
1a0074a4:	47c0      	blx	r8
1a0074a6:	3001      	adds	r0, #1
1a0074a8:	d0aa      	beq.n	1a007400 <_printf_i+0x12c>
1a0074aa:	6823      	ldr	r3, [r4, #0]
1a0074ac:	079b      	lsls	r3, r3, #30
1a0074ae:	d413      	bmi.n	1a0074d8 <_printf_i+0x204>
1a0074b0:	68e0      	ldr	r0, [r4, #12]
1a0074b2:	9b03      	ldr	r3, [sp, #12]
1a0074b4:	4298      	cmp	r0, r3
1a0074b6:	bfb8      	it	lt
1a0074b8:	4618      	movlt	r0, r3
1a0074ba:	e7a3      	b.n	1a007404 <_printf_i+0x130>
1a0074bc:	2301      	movs	r3, #1
1a0074be:	464a      	mov	r2, r9
1a0074c0:	4639      	mov	r1, r7
1a0074c2:	4630      	mov	r0, r6
1a0074c4:	47c0      	blx	r8
1a0074c6:	3001      	adds	r0, #1
1a0074c8:	d09a      	beq.n	1a007400 <_printf_i+0x12c>
1a0074ca:	3501      	adds	r5, #1
1a0074cc:	68e3      	ldr	r3, [r4, #12]
1a0074ce:	9a03      	ldr	r2, [sp, #12]
1a0074d0:	1a9b      	subs	r3, r3, r2
1a0074d2:	42ab      	cmp	r3, r5
1a0074d4:	dcf2      	bgt.n	1a0074bc <_printf_i+0x1e8>
1a0074d6:	e7eb      	b.n	1a0074b0 <_printf_i+0x1dc>
1a0074d8:	2500      	movs	r5, #0
1a0074da:	f104 0919 	add.w	r9, r4, #25
1a0074de:	e7f5      	b.n	1a0074cc <_printf_i+0x1f8>
1a0074e0:	2b00      	cmp	r3, #0
1a0074e2:	d1ac      	bne.n	1a00743e <_printf_i+0x16a>
1a0074e4:	7803      	ldrb	r3, [r0, #0]
1a0074e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0074ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0074ee:	e76c      	b.n	1a0073ca <_printf_i+0xf6>
1a0074f0:	1a007d31 	.word	0x1a007d31
1a0074f4:	1a007d42 	.word	0x1a007d42
1a0074f8:	ffffffff 	.word	0xffffffff
1a0074fc:	ffffffff 	.word	0xffffffff

1a007500 <memchr>:
1a007500:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007504:	2a10      	cmp	r2, #16
1a007506:	db2b      	blt.n	1a007560 <memchr+0x60>
1a007508:	f010 0f07 	tst.w	r0, #7
1a00750c:	d008      	beq.n	1a007520 <memchr+0x20>
1a00750e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007512:	3a01      	subs	r2, #1
1a007514:	428b      	cmp	r3, r1
1a007516:	d02d      	beq.n	1a007574 <memchr+0x74>
1a007518:	f010 0f07 	tst.w	r0, #7
1a00751c:	b342      	cbz	r2, 1a007570 <memchr+0x70>
1a00751e:	d1f6      	bne.n	1a00750e <memchr+0xe>
1a007520:	b4f0      	push	{r4, r5, r6, r7}
1a007522:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a007526:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00752a:	f022 0407 	bic.w	r4, r2, #7
1a00752e:	f07f 0700 	mvns.w	r7, #0
1a007532:	2300      	movs	r3, #0
1a007534:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a007538:	3c08      	subs	r4, #8
1a00753a:	ea85 0501 	eor.w	r5, r5, r1
1a00753e:	ea86 0601 	eor.w	r6, r6, r1
1a007542:	fa85 f547 	uadd8	r5, r5, r7
1a007546:	faa3 f587 	sel	r5, r3, r7
1a00754a:	fa86 f647 	uadd8	r6, r6, r7
1a00754e:	faa5 f687 	sel	r6, r5, r7
1a007552:	b98e      	cbnz	r6, 1a007578 <memchr+0x78>
1a007554:	d1ee      	bne.n	1a007534 <memchr+0x34>
1a007556:	bcf0      	pop	{r4, r5, r6, r7}
1a007558:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00755c:	f002 0207 	and.w	r2, r2, #7
1a007560:	b132      	cbz	r2, 1a007570 <memchr+0x70>
1a007562:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007566:	3a01      	subs	r2, #1
1a007568:	ea83 0301 	eor.w	r3, r3, r1
1a00756c:	b113      	cbz	r3, 1a007574 <memchr+0x74>
1a00756e:	d1f8      	bne.n	1a007562 <memchr+0x62>
1a007570:	2000      	movs	r0, #0
1a007572:	4770      	bx	lr
1a007574:	3801      	subs	r0, #1
1a007576:	4770      	bx	lr
1a007578:	2d00      	cmp	r5, #0
1a00757a:	bf06      	itte	eq
1a00757c:	4635      	moveq	r5, r6
1a00757e:	3803      	subeq	r0, #3
1a007580:	3807      	subne	r0, #7
1a007582:	f015 0f01 	tst.w	r5, #1
1a007586:	d107      	bne.n	1a007598 <memchr+0x98>
1a007588:	3001      	adds	r0, #1
1a00758a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00758e:	bf02      	ittt	eq
1a007590:	3001      	addeq	r0, #1
1a007592:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007596:	3001      	addeq	r0, #1
1a007598:	bcf0      	pop	{r4, r5, r6, r7}
1a00759a:	3801      	subs	r0, #1
1a00759c:	4770      	bx	lr
1a00759e:	bf00      	nop
1a0075a0:	522b5441 	.word	0x522b5441
1a0075a4:	0a0d5453 	.word	0x0a0d5453
1a0075a8:	00000000 	.word	0x00000000
1a0075ac:	0a0d5441 	.word	0x0a0d5441
1a0075b0:	00000000 	.word	0x00000000
1a0075b4:	432b5441 	.word	0x432b5441
1a0075b8:	444f4d57 	.word	0x444f4d57
1a0075bc:	0d333d45 	.word	0x0d333d45
1a0075c0:	0000000a 	.word	0x0000000a
1a0075c4:	432b5441 	.word	0x432b5441
1a0075c8:	50414a57 	.word	0x50414a57
1a0075cc:	000a0d3f 	.word	0x000a0d3f
1a0075d0:	432b5441 	.word	0x432b5441
1a0075d4:	50414a57 	.word	0x50414a57
1a0075d8:	7325223d 	.word	0x7325223d
1a0075dc:	25222c22 	.word	0x25222c22
1a0075e0:	0a0d2273 	.word	0x0a0d2273
1a0075e4:	00000000 	.word	0x00000000
1a0075e8:	432b5441 	.word	0x432b5441
1a0075ec:	54535049 	.word	0x54535049
1a0075f0:	25223d41 	.word	0x25223d41
1a0075f4:	0a0d2273 	.word	0x0a0d2273
1a0075f8:	00000000 	.word	0x00000000
1a0075fc:	432b5441 	.word	0x432b5441
1a007600:	554d5049 	.word	0x554d5049
1a007604:	0d313d58 	.word	0x0d313d58
1a007608:	0000000a 	.word	0x0000000a
1a00760c:	432b5441 	.word	0x432b5441
1a007610:	4c435049 	.word	0x4c435049
1a007614:	3d45534f 	.word	0x3d45534f
1a007618:	0a0d6425 	.word	0x0a0d6425
1a00761c:	00000000 	.word	0x00000000
1a007620:	432b5441 	.word	0x432b5441
1a007624:	54535049 	.word	0x54535049
1a007628:	0a0d3f4f 	.word	0x0a0d3f4f
1a00762c:	00000000 	.word	0x00000000
1a007630:	432b5441 	.word	0x432b5441
1a007634:	45535049 	.word	0x45535049
1a007638:	52455652 	.word	0x52455652
1a00763c:	382c313d 	.word	0x382c313d
1a007640:	000a0d30 	.word	0x000a0d30
1a007644:	432b5441 	.word	0x432b5441
1a007648:	52534649 	.word	0x52534649
1a00764c:	00000a0d 	.word	0x00000a0d
1a007650:	4f525245 	.word	0x4f525245
1a007654:	4c203a52 	.word	0x4c203a52
1a007658:	6f6c2061 	.word	0x6f6c2061
1a00765c:	7469676e 	.word	0x7469676e
1a007660:	64206475 	.word	0x64206475
1a007664:	61642065 	.word	0x61642065
1a007668:	20736f74 	.word	0x20736f74
1a00766c:	50545448 	.word	0x50545448
1a007670:	70757320 	.word	0x70757320
1a007674:	20617265 	.word	0x20617265
1a007678:	6d206c65 	.word	0x6d206c65
1a00767c:	6d697861 	.word	0x6d697861
1a007680:	6570206f 	.word	0x6570206f
1a007684:	74696d72 	.word	0x74696d72
1a007688:	206f6469 	.word	0x206f6469
1a00768c:	25206564 	.word	0x25206564
1a007690:	79622064 	.word	0x79622064
1a007694:	2e736574 	.word	0x2e736574
1a007698:	00000000 	.word	0x00000000
1a00769c:	432b5441 	.word	0x432b5441
1a0076a0:	45535049 	.word	0x45535049
1a0076a4:	253d444e 	.word	0x253d444e
1a0076a8:	64252c63 	.word	0x64252c63
1a0076ac:	00000a0d 	.word	0x00000a0d
1a0076b0:	00007325 	.word	0x00007325
1a0076b4:	432b5441 	.word	0x432b5441
1a0076b8:	4c435049 	.word	0x4c435049
1a0076bc:	3d45534f 	.word	0x3d45534f
1a0076c0:	0a0d6325 	.word	0x0a0d6325
1a0076c4:	00000000 	.word	0x00000000
1a0076c8:	432b5441 	.word	0x432b5441
1a0076cc:	54535049 	.word	0x54535049
1a0076d0:	53555441 	.word	0x53555441
1a0076d4:	ff000a0d 	.word	0xff000a0d

1a0076d8 <Response_CIFSR>:
1a0076d8:	4649432b 533a5253 50494154 ff00222c     +CIFSR:STAIP,"..

1a0076e8 <Response_CIPCLOSE>:
1a0076e8:	534f4c43 ff004445                       CLOSED..

1a0076f0 <Response_COMMA>:
1a0076f0:	ffff002c                                ,...

1a0076f4 <Response_CWJAP_1>:
1a0076f4:	49464957 4e4f4320 5443454e ff004445     WIFI CONNECTED..

1a007704 <Response_CWJAP_2>:
1a007704:	49464957 544f4720 00504920              WIFI GOT IP.

1a007710 <Response_CWJAP_OK>:
1a007710:	4a57432b 003a5041                       +CWJAP:.

1a007718 <Response_IPD>:
1a007718:	4450492b ffff002c                       +IPD,...

1a007720 <Response_OK>:
1a007720:	ff004b4f                                OK..

1a007724 <Response_SEND_OK>:
1a007724:	444e4553 004b4f20 6154796d 00336b73     SEND OK.myTask3.
1a007734:	00544547 7461642f 00000061 7475622f     GET./data.../but
1a007744:	006e6f74 6e61702f 00006c65 646f622f     ton./panel../bod
1a007754:	00000079 7661732f 00000065 54534f50     y.../save...POST
1a007764:	00000000 7475622f 246e6f74 00000000     ..../button$....
1a007774:	7661732f ff002465 50545448 ffff002f     /save$..HTTP/...
1a007784:	65530d0a 64697672 4820726f 20505454     ..Servidor HTTP 
1a007794:	666e6f63 72756769 2e6f6461 3a504920     configurado. IP:
1a0077a4:	00732520 72450d0a 20726f72 63206c61      %s...Error al c
1a0077b4:	69666e6f 61727567 65732072 64697672     onfigurar servid
1a0077c4:	4820726f 2e505454 00000000 614c0d0a     or HTTP.......La
1a0077d4:	6e6f6320 75676966 69636172 70206e6f      configuracion p
1a0077e4:	65646575 72617420 20726164 74736168     uede tardar hast
1a0077f4:	20312061 756e696d 0a2e6f74 000d0a0d     a 1 minuto......
1a007804:	74736554 ffffff00 6a45200a 74756365     Test..... Ejecut
1a007814:	6c652065 6d6f6320 6f646e61 43455220     e el comando REC
1a007824:	6170204e 67206172 64726175 6c207261     N para guardar l
1a007834:	6320736f 69626d61 0a20736f 00000000     os cambios .....
1a007844:	614c200a 49535320 73652044 25203a20     . La SSID es : %
1a007854:	000a2073 6c45200a 73617020 726f7773     s ... El passwor
1a007864:	73652064 25203a20 000a2073 614c200a     d es : %s ... La
1a007874:	72696420 69636365 49206e6f 73652050      direccion IP es
1a007884:	25203a20 000a2073 6f43200a 6769666e      : %s ... Config
1a007894:	63617275 206e6f69 72206564 67206465     uracion de red g
1a0078a4:	64726175 00616461 6544200a 6c756166     uardada.. Defaul
1a0078b4:	000a2074 20726f50 6f766166 6e692072     t ..Por favor in
1a0078c4:	73657267 6e752065 6d6f6320 6f646e61     grese un comando
1a0078d4:	ffffff00 6f727245 6c612072 636e6920     ....Error al inc
1a0078e4:	696c6169 2072617a 54524155 52455420     ializar UART TER
1a0078f4:	414e494d 0000004c 6154796d ff006b73     MINAL...myTask..
1a007904:	6e617254 74696d73 ffffff00 65746e49     Transmit....Inte
1a007914:	65727072 ff006574 6170227b 226c656e     rprete..{"panel"
1a007924:	2c64253a 74616422 5b3a2261 00000000     :%d,"data":[....
1a007934:	002c6425 ff007d5d 6c707041 74616369     %d,.]}..Applicat
1a007944:	206e6f69 6c6c614d 4620636f 656c6961     ion Malloc Faile
1a007954:	6f482064 0d216b6f 00000000 7362696c     d Hook!.....libs
1a007964:	6572662f 6f747265 6f732f73 65637275     /freertos/source
1a007974:	6f6f682f 632e736b ffffff00 70410a0d     /hooks.c......Ap
1a007984:	63696c70 6f697461 7453206e 206b6361     plication Stack 
1a007994:	7265764f 776f6c66 6f202121 6154206e     Overflow!! on Ta
1a0079a4:	203a6b73 0a0d7325 ffffff00 41760a0d     sk: %s........vA
1a0079b4:	72657373 6c614374 2864656c 200a0d29     ssertCalled().. 
1a0079c4:	4c4c2020 20656e69 626d754e 3d207265       LLine Number =
1a0079d4:	0d642520 2020200a 656c6946 6d614e20      %d..   File Nam
1a0079e4:	203d2065 0a0d7325 ff000a0d 454c4449     e = %s......IDLE
1a0079f4:	ffffff00 51726d54 ffffff00 20726d54     ....TmrQ....Tmr 
1a007a04:	00637653                                Svc.

1a007a08 <ExtRateIn>:
1a007a08:	00000000                                ....

1a007a0c <GpioButtons>:
1a007a0c:	08000400 09010900                       ........

1a007a14 <GpioLeds>:
1a007a14:	01050005 0e000205 0c010b01              ............

1a007a20 <GpioPorts>:
1a007a20:	03030003 0f050403 05031005 07030603     ................
1a007a30:	ffff0802                                ....

1a007a34 <OscRateIn>:
1a007a34:	00b71b00                                ....

1a007a38 <InitClkStates>:
1a007a38:	01010f01                                ....

1a007a3c <pinmuxing>:
1a007a3c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a007a4c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007a5c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007a6c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007a7c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007a8c:	00d50301 00d50401 00160107 00560207     ..............V.
1a007a9c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007aac:	00570206                                ..W.

1a007ab0 <UART_BClock>:
1a007ab0:	01a201c2 01620182                       ......b.

1a007ab8 <UART_PClock>:
1a007ab8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007ac8:	ffff00ff                                ....

1a007acc <periph_to_base>:
1a007acc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007adc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007aec:	000100e0 01000100 01200003 00060120     .......... . ...
1a007afc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007b0c:	01820013 00120182 01a201a2 01c20011     ................
1a007b1c:	001001c2 01e201e2 0202000f 000e0202     ................
1a007b2c:	02220222 0223000d 001c0223              "."...#.#...

1a007b38 <InitClkStates>:
1a007b38:	00010100 00010909 0001090a 01010701     ................
1a007b48:	00010902 00010906 0101090c 0001090d     ................
1a007b58:	0001090e 0001090f 00010910 00010911     ................
1a007b68:	00010912 00010913 00011114 00011119     ................
1a007b78:	0001111a 0001111b                       ........

1a007b80 <lpcUarts>:
1a007b80:	40081000 06020406 00180205 40081000     ...@...........@
1a007b90:	09070509 00180706 40082000 00000000     ......... .@....
1a007ba0:	00190000 400c1000 07060107 001a0602     .......@........
1a007bb0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a007bc0:	02020302 001b0204                       ........

1a007bc8 <gpioPinsInit>:
1a007bc8:	02000104 00050701 05010d03 04080100     ................
1a007bd8:	02020002 02000304 00000403 04070002     ................
1a007be8:	030c0300 09050402 05040103 04030208     ................
1a007bf8:	04020305 06040504 0802000c 03000b06     ................
1a007c08:	00090607 07060503 060f0504 03030004     ................
1a007c18:	02000404 00050404 06040502 04060200     ................
1a007c28:	0c050408 05040a04 0003010e 14010a00     ................
1a007c38:	010f0000 0d000012 00001101 0010010c     ................
1a007c48:	07070300 000f0300 01000001 00000000     ................
1a007c58:	000a0600 08060603 06100504 04030005     ................
1a007c68:	03000106 04090400 04010d05 010b0000     ................
1a007c78:	0200000f 00000001 00010104 02010800     ................
1a007c88:	01090000 09010006 05040002 04010200     ................
1a007c98:	02020105 02020504 0e00000a 01000b02     ................
1a007ca8:	000c020b ffff0c01 6c756e28 0000296c     ........(null)..

1a007cb8 <ultrasonicSensorsIrqMap>:
1a007cb8:	ff020100                                ....

1a007cbc <__sf_fake_stderr>:
	...

1a007cdc <__sf_fake_stdin>:
	...

1a007cfc <__sf_fake_stdout>:
	...

1a007d1c <_global_impure_ptr>:
1a007d1c:	10001d00 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a007d2c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a007d3c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a007d4c:	64636261 ff006665                       abcdef..
