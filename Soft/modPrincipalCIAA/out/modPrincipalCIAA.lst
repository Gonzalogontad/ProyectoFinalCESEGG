
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf:     file format elf32-littlearm
proyectos_cese/ProyectoFinalGG/ProyectoFinalCESEGG/Soft/modPrincipalCIAA/out/modPrincipalCIAA.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0005c1

Program Header:
0x70000001 off    0x000150d0 vaddr 0x1a0050d0 paddr 0x1a0050d0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c68 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000050d8 memsz 0x000050d8 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0050d8 align 2**16
         filesz 0x0000012c memsz 0x0000012c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050cc  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  10000000  1a0050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
  6 .bss          00002b3c  1000012c  1000012c  0000012c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 11 .init_array   00000004  1a0050cc  1a0050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0050d0  1a0050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0002012c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0002012c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0002012c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0002012c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0002012c  2**2
                  CONTENTS
 18 .noinit       00000000  10002c68  10002c68  0002012c  2**2
                  CONTENTS
 19 .debug_info   0002d398  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005b8b  00000000  00000000  0004d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000bb23  00000000  00000000  0005304f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001008  00000000  00000000  0005eb72  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001128  00000000  00000000  0005fb7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00010297  00000000  00000000  00060ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00015099  00000000  00000000  00070f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00030063  00000000  00000000  00085fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000b6035  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000b60b4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002f18  00000000  00000000  000b60ec  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
1000012c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0050cc l    d  .init_array	00000000 .init_array
1a0050d0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c68 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0032d4 l     F .text	000000c8 uartProcessIRQ
10002be4 l     O .bss	00000004 rxIsrCallbackUART0
10002be8 l     O .bss	00000004 rxIsrCallbackUART0Params
10002bec l     O .bss	00000004 rxIsrCallbackUART2
10002bf0 l     O .bss	00000004 rxIsrCallbackUART2Params
10002bf4 l     O .bss	00000004 rxIsrCallbackUART3
10002bf8 l     O .bss	00000004 rxIsrCallbackUART3Params
10002bfc l     O .bss	00000004 txIsrCallbackUART0
10002c00 l     O .bss	00000004 txIsrCallbackUART0Params
10002c04 l     O .bss	00000004 txIsrCallbackUART2
10002c08 l     O .bss	00000004 txIsrCallbackUART2Params
10002c0c l     O .bss	00000004 txIsrCallbackUART3
10002c10 l     O .bss	00000004 txIsrCallbackUART3Params
1a004f00 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 portsDriver.c
1000012c l     O .bss	00000001 byteIndex.14457
10000130 l     O .bss	00000012 dataToSend.14455
10000142 l     O .bss	00000001 portIndex.14456
10000143 l     O .bss	00000001 transmitEmpty.14460
00000000 l    df *ABS*	00000000 userTasks.c
00000000 l    df *ABS*	00000000 modPrincipalCIAA.c
10000144 l     O .bss	00000054 ports.14434
00000000 l    df *ABS*	00000000 system.c
10000198 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a000714 l     F .text	00000064 prvHeapInit
100001a0 l     O .bss	00002000 ucHeap
1a000778 l     F .text	00000058 prvInsertBlockIntoFreeList
1000019c l     O .bss	00000004 pxEnd
100021a0 l     O .bss	00000004 xBlockAllocatedBit
100021a4 l     O .bss	00000004 xFreeBytesRemaining
100021a8 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100021ac l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a00095c l     F .text	0000001e prvIsQueueFull
1a00097a l     F .text	0000001a prvIsQueueEmpty
1a000994 l     F .text	00000076 prvCopyDataToQueue
1a000a0a l     F .text	00000024 prvCopyDataFromQueue
1a000a2e l     F .text	0000006e prvUnlockQueue
1a000b20 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100021b4 l     O .bss	00000168 uxIdleTaskStack.10728
1000231c l     O .bss	000005a0 uxTimerTaskStack.10735
100028bc l     O .bss	00000060 xIdleTaskTCB.10727
1000291c l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a00120c l     F .text	0000002c prvResetNextTaskUnblockTime
1a001238 l     F .text	00000092 prvInitialiseNewTask
1a0012cc l     F .text	00000068 prvInitialiseTaskLists
1a001334 l     F .text	000000ac prvAddNewTaskToReadyList
1a0013e0 l     F .text	00000038 prvDeleteTCB
1a001418 l     F .text	0000004c prvCheckTasksWaitingTermination
1a001464 l     F .text	00000028 prvIdleTask
1a00148c l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002980 l     O .bss	00000004 pxDelayedTaskList
10002984 l     O .bss	00000004 pxOverflowDelayedTaskList
10002988 l     O .bss	0000008c pxReadyTasksLists
10002a14 l     O .bss	00000004 uxCurrentNumberOfTasks
10002a18 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a1c l     O .bss	00000004 uxPendedTicks
10002a20 l     O .bss	00000004 uxSchedulerSuspended
10002a24 l     O .bss	00000004 uxTaskNumber
10002a28 l     O .bss	00000004 uxTopReadyPriority
10002a2c l     O .bss	00000014 xDelayedTaskList1
10002a40 l     O .bss	00000014 xDelayedTaskList2
10002a54 l     O .bss	00000004 xNextTaskUnblockTime
10002a58 l     O .bss	00000004 xNumOfOverflows
10002a5c l     O .bss	00000014 xPendingReadyList
10002a70 l     O .bss	00000004 xSchedulerRunning
10002a74 l     O .bss	00000014 xSuspendedTaskList
10002a88 l     O .bss	00000014 xTasksWaitingTermination
10002a9c l     O .bss	00000004 xTickCount
10002aa0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001cd8 l     F .text	00000020 prvGetNextExpireTime
1a001cf8 l     F .text	00000048 prvInsertTimerInActiveList
1a001d40 l     F .text	00000070 prvCheckForValidListAndQueue
1a001db0 l     F .text	00000040 prvInitialiseNewTimer
1a00216c l     F .text	00000016 prvTimerTask
1a001ef8 l     F .text	00000078 prvSwitchTimerLists
1a001f70 l     F .text	0000002c prvSampleTimeNow
1a001f9c l     F .text	00000060 prvProcessExpiredTimer
1a001ffc l     F .text	00000074 prvProcessTimerOrBlockTask
1a002070 l     F .text	000000fc prvProcessReceivedCommands
10002aa4 l     O .bss	00000004 pxCurrentTimerList
10002aa8 l     O .bss	00000004 pxOverflowTimerList
10002aac l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002b4c l     O .bss	00000014 xActiveTimerList1
10002b60 l     O .bss	00000014 xActiveTimerList2
10002b74 l     O .bss	00000004 xLastTime.11777
10002b78 l     O .bss	00000050 xStaticTimerQueue.11827
10002bc8 l     O .bss	00000004 xTimerQueue
10002bcc l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0021a8 l     F .text	00000040 prvTaskExitError
1a0021e8 l     F .text	00000022 prvPortStartFirstTask
1a002210 l     F .text	0000000e vPortEnableVFP
1a002270 l       .text	00000000 pxCurrentTCBConst2
1a002350 l       .text	00000000 pxCurrentTCBConst
10002bd0 l     O .bss	00000001 ucMaxSysCallPriority
10002bd4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002544 l     F .text	00000044 Board_LED_Init
1a002588 l     F .text	00000040 Board_TEC_Init
1a0025c8 l     F .text	00000040 Board_GPIO_Init
1a002608 l     F .text	00000030 Board_ADC_Init
1a002638 l     F .text	00000038 Board_SPI_Init
1a002670 l     F .text	00000024 Board_I2C_Init
1a004d8c l     O .text	00000008 GpioButtons
1a004d94 l     O .text	0000000c GpioLeds
1a004da0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004db8 l     O .text	00000004 InitClkStates
1a004dbc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002860 l     F .text	0000002c Chip_UART_GetIndex
1a004e30 l     O .text	00000008 UART_BClock
1a004e38 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002a08 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002a1c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002ad0 l     F .text	000000a4 pll_calc_divs
1a002b74 l     F .text	0000010c pll_get_frac
1a002c80 l     F .text	0000004c Chip_Clock_FindBaseClock
1a002ef4 l     F .text	00000022 Chip_Clock_GetDivRate
10002bdc l     O .bss	00000008 audio_usb_pll_freq
1a004e4c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004eb8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0031cc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0031e0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0035e4 l     F .text	00000002 errorOcurred
1a0035e6 l     F .text	00000002 doNothing
10000040 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0036f0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002c14 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003a40 l     F .text	00000010 clearInterrupt
1a003a50 l     F .text	0000005c serveInterrupt
10000080 l     O .data	00000048 ultrasonicSensors
1a005030 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003f2c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00464c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100000cc l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0050d0 l       .init_array	00000000 __init_array_end
1a0050cc l       .bss_RAM5	00000000 __preinit_array_end
1a0050cc l       .init_array	00000000 __init_array_start
1a0050cc l       .bss_RAM5	00000000 __preinit_array_start
1a002d18 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000660 g     F .text	00000012 _isatty_r
1a0042b0 g     F .text	000000b8 _puts_r
1a003668 g     F .text	00000044 TIMER2_IRQHandler
1a000672 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a00046c g     F .text	00000098 portsdriverInit
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0022b8 g     F .text	0000002c vPortExitCritical
1a001e54 g     F .text	00000038 xTimerCreate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004280 g     F .text	00000030 printf
1a00272a g     F .text	00000008 __stdio_init
1a0043d2 g     F .text	00000024 __sseek
1a003fac g     F .text	00000060 __sinit
1a004400 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001094 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003f80 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002ac2 g     F .text	0000000c Chip_ADC_SetResolution
1a00464a g     F .text	00000002 __malloc_unlock
1a002354 g     F .text	0000002c SysTick_Handler
1a0028e0 g     F .text	00000040 Chip_UART_SetBaud
1a0005bc  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0026cc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0022f0 g     F .text	00000064 PendSV_Handler
1a000d9c g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a0050d8 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a000328 g     F .text	00000104 onTxCallback
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000297c g     O .bss	00000004 pxCurrentTCB
1a000656 g     F .text	0000000a _fstat_r
53ff72ce g       *ABS*	00000000 __valid_user_code_checksum
1a0050d8 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001b64 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0034e8 g     F .text	00000028 uartCallbackClr
1a0036ac g     F .text	00000044 TIMER3_IRQHandler
1a002f96 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0023b8 g     F .text	00000110 xPortStartScheduler
1a004108 g     F .text	00000016 memcpy
1a001a70 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003f74 g     F .text	0000000c _cleanup_r
1a002380  w    F .text	00000038 vPortSetupTimerInterrupt
1a003acc g     F .text	00000000 .hidden __aeabi_uldivmod
10002c68 g       .noinit	00000000 _noinit
1a004368 g     F .text	00000010 puts
1a0008ec g     F .text	00000070 vPortFree
10002c60 g     O .bss	00000004 SystemCoreClock
1a00288c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0024c8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003014 g     F .text	0000004c Chip_Clock_GetRate
1a001102 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00276c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003afc g     F .text	000002cc .hidden __udivmoddi4
1a0006f4 g     F .text	00000020 _sbrk_r
1a004d88 g     O .text	00000004 ExtRateIn
1a000300 g     F .text	00000028 onTxTimeOutCallback
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00067c g     F .text	0000004e _read_r
1a0010fc g     F .text	00000006 vListInitialiseItem
1a000504 g     F .text	00000070 myTask
1a003ab6 g     F .text	0000000a GPIO1_IRQHandler
1a000e68 g     F .text	00000158 xQueueReceive
10002c20 g     O .bss	00000040 xQueueRegistry
1a001190 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0050d0 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a005094 g     O .text	00000004 _global_impure_ptr
1a0040c0 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0007d0 g     F .text	0000011c pvPortMalloc
1a0026e8 g     F .text	00000030 Board_Init
1a00064a  w    F .text	00000002 _init
1a0010e6 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00042c g     F .text	0000003e portsDataInit
1a0016a0 g     F .text	0000000c xTaskGetTickCount
1a000c20 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c68 g       .bss	00000000 _ebss
1a0035e8 g     F .text	00000040 TIMER0_IRQHandler
1a0005c0 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002828 g     F .text	00000038 Chip_I2C_SetClockRate
1a001c28 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002ccc g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001ad8 g     F .text	0000008c xTaskRemoveFromEventList
1a0011d4  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a003628 g     F .text	00000040 TIMER1_IRQHandler
1a005034 g     O .text	00000020 __sf_fake_stderr
1a002804 g     F .text	00000024 Chip_I2C_Init
1a0035d0 g     F .text	0000000a UART2_IRQHandler
1a002e88 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004f48 g     O .text	000000e6 gpioPinsInit
1a00339c g     F .text	00000090 uartInterrupt
1a0011a8  w    F .text	0000002c vAssertCalled
1a0031f8 g     F .text	00000012 Chip_SSP_SetClockRate
1a0039a2 g     F .text	00000016 gpioToggle
1a00467a g     F .text	00000024 __sfputs_r
1a003ac0 g     F .text	0000000a GPIO2_IRQHandler
1a004be0 g     F .text	00000000 memchr
1a001b7c g     F .text	00000080 xTaskCheckForTimeOut
1a004130 g     F .text	0000009c _free_r
1a002f70 g     F .text	00000026 Chip_Clock_GetBaseClock
1000012c g       .bss	00000000 _bss
1a002a90 g     F .text	00000032 Chip_ADC_SetSampleRate
10002bd8 g     O .bss	00000004 freeRtosInterruptCallback
1a001690 g     F .text	00000010 vTaskSuspendAll
1a003510 g     F .text	00000030 uartSetPendingInterrupt
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00320a g     F .text	0000003e Chip_SSP_SetBitRate
1a00114e g     F .text	00000028 uxListRemove
1a0031c8 g     F .text	00000002 Chip_GPIO_Init
1a004db4 g     O .text	00000004 OscRateIn
1a003554 g     F .text	0000007c uartInit
1a001524 g     F .text	00000072 xTaskCreateStatic
10002c68 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0019a8 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000b42 g     F .text	00000090 xQueueGenericCreateStatic
1a001aa0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00064c g     F .text	0000000a _close_r
1a003724 g     F .text	000001ac gpioInit
1a001178 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001e8c g     F .text	0000006c xTimerGenericCommand
1a0044a4 g     F .text	000000dc __swsetup_r
1a0011f0  w    F .text	0000001c vApplicationStackOverflowHook
1a003dc8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00400c g     F .text	00000078 __sfp
1a004378 g     F .text	00000022 __sread
1a0039b8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004648 g     F .text	00000002 __malloc_lock
1a0026b8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003ed8 g     F .text	00000054 _fflush_r
1a005054 g     O .text	00000020 __sf_fake_stdin
1a002d34 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a00411e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000574 g     F .text	00000048 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00111a g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002250 g     F .text	00000024 SVC_Handler
1a0043f6 g     F .text	00000008 __sclose
1a001df0 g     F .text	00000064 xTimerCreateTimerTask
1a0041cc g     F .text	000000b4 _malloc_r
1a0018b8 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002fa4 g     F .text	0000003c Chip_Clock_EnableOpts
1a002722 g     F .text	00000008 __stdio_getchar
1a000fc0 g     F .text	000000aa xQueueReceiveFromISR
1a000bd2 g     F .text	0000004e xQueueGenericCreate
1a002d50 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002e08 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003280 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0038d0 g     F .text	0000006a gpioWrite
1a000648  w    F .text	00000002 _fini
1a004280 g     F .text	00000030 iprintf
1a0017c4 g     F .text	000000f4 xTaskResumeAll
1a0015fc g     F .text	00000094 vTaskStartScheduler
1a002a50 g     F .text	00000040 Chip_ADC_Init
10002c64 g     O .bss	00000004 g_pUsbApi
1a002734 g     F .text	00000038 Board_SetupMuxing
1a002920 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0006ca g     F .text	00000028 _write_r
1a002182 g     F .text	00000026 pvTimerGetTimerID
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0048cc g     F .text	000000ea _printf_common
100000c8 g     O .data	00000004 _impure_ptr
1a003dcc g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a003540 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001bfc g     F .text	0000000c vTaskMissedYield
10002c68 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003248 g     F .text	00000038 Chip_SSP_Init
1a00106c g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0016ac g     F .text	00000118 xTaskIncrementTick
1a004580 g     F .text	00000048 __swhatbuf_r
1a002524 g     F .text	00000020 DAC_IRQHandler
1a002694 g     F .text	00000024 Board_Debug_Init
1a002718 g     F .text	0000000a __stdio_putchar
1a000a9c g     F .text	00000084 xQueueGenericReset
1000012c g       .data	00000000 _edata
1a0027e4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001596 g     F .text	00000066 xTaskCreate
1a003074 g     F .text	00000154 Chip_SetupCoreClock
1a00439a g     F .text	00000038 __swrite
1a003aac g     F .text	0000000a GPIO0_IRQHandler
1a0046a0 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004084 g     F .text	0000003c _fwalk_reent
1a003060 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a00195c g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005074 g     O .text	00000020 __sf_fake_stdout
1a001c08 g     F .text	00000020 xTaskGetSchedulerState
1a003dc8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00342c g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a0045c8 g     F .text	00000080 __smakebuf_r
1a002224 g     F .text	0000002c pxPortInitialiseStack
1a0049b8 g     F .text	00000224 _printf_i
1a002fe0 g     F .text	00000034 Chip_Clock_Enable
1a0035da g     F .text	0000000a UART3_IRQHandler
10002c1c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00393a g     F .text	00000068 gpioRead
1a0039d4 g     F .text	0000006c boardInit
1a002274 g     F .text	00000044 vPortEnterCritical
10002c18 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0046a0 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002f18 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0032b8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0027d8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 c1 05 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a ce 72 ff 53     }............r.S
	...
1a00002c:	51 22 00 1a 85 01 00 1a 00 00 00 00 f1 22 00 1a     Q"..........."..
1a00003c:	55 23 00 1a                                         U#..

1a000040 <g_pfnVendorVectors>:
1a000040:	25 25 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     %%..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	b9 39 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .9..............
1a000070:	e9 35 00 1a 29 36 00 1a 69 36 00 1a ad 36 00 1a     .5..)6..i6...6..
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a d1 35 00 1a db 35 00 1a     .........5...5..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	ad 3a 00 1a b7 3a 00 1a c1 3a 00 1a bb 01 00 1a     .:...:...:......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0050d8 	.word	0x1a0050d8
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000012c 	.word	0x0000012c
1a000120:	1a0050d8 	.word	0x1a0050d8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0050d8 	.word	0x1a0050d8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0050d8 	.word	0x1a0050d8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0050d8 	.word	0x1a0050d8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	1000012c 	.word	0x1000012c
1a000154:	00002b3c 	.word	0x00002b3c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 f888 	bl	1a0032d4 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <onTxTimeOutCallback>:
	return(true);
}

//Callback del timer de transmision
void onTxTimeOutCallback(TimerHandle_t xTimer)
{
1a000300:	b510      	push	{r4, lr}
	// Obtenemos los datos de la UART seleccionada, aprovechando el campo reservado
	// para el Timer ID.
	portsConfig_t *ports= (portsConfig_t *) pvTimerGetTimerID(xTimer);
1a000302:	f001 ff3e 	bl	1a002182 <pvTimerGetTimerID>
1a000306:	4604      	mov	r4, r0
	gpioToggle( GPIO0 );
1a000308:	2020      	movs	r0, #32
1a00030a:	f003 fb4a 	bl	1a0039a2 <gpioToggle>

	//Configuro el callback de la transmision de UART
	uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a00030e:	4623      	mov	r3, r4
1a000310:	4a04      	ldr	r2, [pc, #16]	; (1a000324 <onTxTimeOutCallback+0x24>)
1a000312:	2101      	movs	r1, #1
1a000314:	7820      	ldrb	r0, [r4, #0]
1a000316:	f003 f889 	bl	1a00342c <uartCallbackSet>
	uartSetPendingInterrupt(ports->uartValue);
1a00031a:	7820      	ldrb	r0, [r4, #0]
1a00031c:	f003 f8f8 	bl	1a003510 <uartSetPendingInterrupt>
}
1a000320:	bd10      	pop	{r4, pc}
1a000322:	bf00      	nop
1a000324:	1a000329 	.word	0x1a000329

1a000328 <onTxCallback>:
}



void onTxCallback(void*param)
{
1a000328:	b530      	push	{r4, r5, lr}
1a00032a:	b083      	sub	sp, #12
1a00032c:	4605      	mov	r5, r0
	portsConfig_t *ports = (portsConfig_t *) param;
	BaseType_t xTaskWokenByReceive = pdFALSE; //Variable para evaluar el cambio de contexto al finaliza la interrupcion
1a00032e:	2300      	movs	r3, #0
1a000330:	9301      	str	r3, [sp, #4]
	uint8_t emptyData = 0xff; //Byte que se envia dos veces para darle tiempo al esclavo para responder
	static uint8_t transmitEmpty = 0;



	if (portIndex==0 && byteIndex==0)
1a000332:	4b38      	ldr	r3, [pc, #224]	; (1a000414 <onTxCallback+0xec>)
1a000334:	781b      	ldrb	r3, [r3, #0]
1a000336:	b91b      	cbnz	r3, 1a000340 <onTxCallback+0x18>
1a000338:	4b37      	ldr	r3, [pc, #220]	; (1a000418 <onTxCallback+0xf0>)
1a00033a:	781c      	ldrb	r4, [r3, #0]
1a00033c:	2c00      	cmp	r4, #0
1a00033e:	d035      	beq.n	1a0003ac <onTxCallback+0x84>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);

	}

	//Si llegué a la interrupcion es porque hay que enviar datos
	if(transmitEmpty==0)
1a000340:	4b36      	ldr	r3, [pc, #216]	; (1a00041c <onTxCallback+0xf4>)
1a000342:	781b      	ldrb	r3, [r3, #0]
1a000344:	2b00      	cmp	r3, #0
1a000346:	d14a      	bne.n	1a0003de <onTxCallback+0xb6>
	{
		uartTxWrite(ports->uartValue,dataToSend[portIndex].txData[byteIndex]);
1a000348:	4b32      	ldr	r3, [pc, #200]	; (1a000414 <onTxCallback+0xec>)
1a00034a:	781b      	ldrb	r3, [r3, #0]
1a00034c:	4c32      	ldr	r4, [pc, #200]	; (1a000418 <onTxCallback+0xf0>)
1a00034e:	7821      	ldrb	r1, [r4, #0]
1a000350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a000354:	4a32      	ldr	r2, [pc, #200]	; (1a000420 <onTxCallback+0xf8>)
1a000356:	4413      	add	r3, r2
1a000358:	5c59      	ldrb	r1, [r3, r1]
1a00035a:	7828      	ldrb	r0, [r5, #0]
1a00035c:	f003 f8f0 	bl	1a003540 <uartTxWrite>
		//Luego verifico si termine de enviar el frame completo y deshabilito la interrupcion
		if (byteIndex<2)
1a000360:	7823      	ldrb	r3, [r4, #0]
1a000362:	2b01      	cmp	r3, #1
1a000364:	d925      	bls.n	1a0003b2 <onTxCallback+0x8a>
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
		}
		else
		{
			transmitEmpty=1;//
1a000366:	4b2d      	ldr	r3, [pc, #180]	; (1a00041c <onTxCallback+0xf4>)
1a000368:	2201      	movs	r2, #1
1a00036a:	701a      	strb	r2, [r3, #0]
			if (portIndex<(PORTS_NUMBER-1))
1a00036c:	4b29      	ldr	r3, [pc, #164]	; (1a000414 <onTxCallback+0xec>)
1a00036e:	781b      	ldrb	r3, [r3, #0]
1a000370:	2b04      	cmp	r3, #4
1a000372:	d82a      	bhi.n	1a0003ca <onTxCallback+0xa2>
			{
				portIndex++;
1a000374:	4413      	add	r3, r2
1a000376:	4a27      	ldr	r2, [pc, #156]	; (1a000414 <onTxCallback+0xec>)
1a000378:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a00037a:	4b27      	ldr	r3, [pc, #156]	; (1a000418 <onTxCallback+0xf0>)
1a00037c:	2200      	movs	r2, #0
1a00037e:	701a      	strb	r2, [r3, #0]
				uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a000380:	462b      	mov	r3, r5
1a000382:	4a28      	ldr	r2, [pc, #160]	; (1a000424 <onTxCallback+0xfc>)
1a000384:	2101      	movs	r1, #1
1a000386:	7828      	ldrb	r0, [r5, #0]
1a000388:	f003 f850 	bl	1a00342c <uartCallbackSet>
				uartSetPendingInterrupt(ports->uartValue);//Disparo el envio del siguiente byte
1a00038c:	7828      	ldrb	r0, [r5, #0]
1a00038e:	f003 f8bf 	bl	1a003510 <uartSetPendingInterrupt>
1a000392:	e02f      	b.n	1a0003f4 <onTxCallback+0xcc>
			xQueueReceiveFromISR(ports->port[i].onTxQueue,(void*)&dataToSend[i],&xTaskWokenByReceive);
1a000394:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a000398:	eb05 0083 	add.w	r0, r5, r3, lsl #2
1a00039c:	aa01      	add	r2, sp, #4
1a00039e:	4920      	ldr	r1, [pc, #128]	; (1a000420 <onTxCallback+0xf8>)
1a0003a0:	4419      	add	r1, r3
1a0003a2:	6900      	ldr	r0, [r0, #16]
1a0003a4:	f000 fe0c 	bl	1a000fc0 <xQueueReceiveFromISR>
		for (i=0;i<PORTS_NUMBER;i++)
1a0003a8:	3401      	adds	r4, #1
1a0003aa:	b2e4      	uxtb	r4, r4
1a0003ac:	2c05      	cmp	r4, #5
1a0003ae:	d9f1      	bls.n	1a000394 <onTxCallback+0x6c>
1a0003b0:	e7c6      	b.n	1a000340 <onTxCallback+0x18>
			byteIndex++;
1a0003b2:	3301      	adds	r3, #1
1a0003b4:	7023      	strb	r3, [r4, #0]
			uartCallbackSet(ports->uartValue, UART_TRANSMITER_FREE,onTxCallback, (void*) ports);
1a0003b6:	462b      	mov	r3, r5
1a0003b8:	4a1a      	ldr	r2, [pc, #104]	; (1a000424 <onTxCallback+0xfc>)
1a0003ba:	2101      	movs	r1, #1
1a0003bc:	7828      	ldrb	r0, [r5, #0]
1a0003be:	f003 f835 	bl	1a00342c <uartCallbackSet>
			uartSetPendingInterrupt(ports->uartValue); //Disparo el envio del siguiente byte
1a0003c2:	7828      	ldrb	r0, [r5, #0]
1a0003c4:	f003 f8a4 	bl	1a003510 <uartSetPendingInterrupt>
1a0003c8:	e014      	b.n	1a0003f4 <onTxCallback+0xcc>
			}
			else
			{
				portIndex=0;
1a0003ca:	2300      	movs	r3, #0
1a0003cc:	4a11      	ldr	r2, [pc, #68]	; (1a000414 <onTxCallback+0xec>)
1a0003ce:	7013      	strb	r3, [r2, #0]
				byteIndex=0;
1a0003d0:	4a11      	ldr	r2, [pc, #68]	; (1a000418 <onTxCallback+0xf0>)
1a0003d2:	7013      	strb	r3, [r2, #0]
				uartCallbackClr(ports->uartValue, UART_TRANSMITER_FREE); //Deshabilito la interrupcion de TX
1a0003d4:	2101      	movs	r1, #1
1a0003d6:	7828      	ldrb	r0, [r5, #0]
1a0003d8:	f003 f886 	bl	1a0034e8 <uartCallbackClr>
1a0003dc:	e00a      	b.n	1a0003f4 <onTxCallback+0xcc>
			}
		}
	}
	else
	{
		uartTxWrite(ports->uartValue,emptyData);
1a0003de:	21ff      	movs	r1, #255	; 0xff
1a0003e0:	7828      	ldrb	r0, [r5, #0]
1a0003e2:	f003 f8ad 	bl	1a003540 <uartTxWrite>
		if (transmitEmpty==2)
1a0003e6:	4b0d      	ldr	r3, [pc, #52]	; (1a00041c <onTxCallback+0xf4>)
1a0003e8:	781b      	ldrb	r3, [r3, #0]
1a0003ea:	2b02      	cmp	r3, #2
1a0003ec:	d00e      	beq.n	1a00040c <onTxCallback+0xe4>
			transmitEmpty=0;
		else
			transmitEmpty++;
1a0003ee:	3301      	adds	r3, #1
1a0003f0:	4a0a      	ldr	r2, [pc, #40]	; (1a00041c <onTxCallback+0xf4>)
1a0003f2:	7013      	strb	r3, [r2, #0]

	}


	//Hago la evaluacion de cambio de cambio de contexto necesario.
	if (xTaskWokenByReceive != pdFALSE)
1a0003f4:	9b01      	ldr	r3, [sp, #4]
1a0003f6:	b13b      	cbz	r3, 1a000408 <onTxCallback+0xe0>
	{
		taskYIELD ();
1a0003f8:	4b0b      	ldr	r3, [pc, #44]	; (1a000428 <onTxCallback+0x100>)
1a0003fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0003fe:	601a      	str	r2, [r3, #0]
1a000400:	f3bf 8f4f 	dsb	sy
1a000404:	f3bf 8f6f 	isb	sy
	}
}
1a000408:	b003      	add	sp, #12
1a00040a:	bd30      	pop	{r4, r5, pc}
			transmitEmpty=0;
1a00040c:	4b03      	ldr	r3, [pc, #12]	; (1a00041c <onTxCallback+0xf4>)
1a00040e:	2200      	movs	r2, #0
1a000410:	701a      	strb	r2, [r3, #0]
1a000412:	e7ef      	b.n	1a0003f4 <onTxCallback+0xcc>
1a000414:	10000142 	.word	0x10000142
1a000418:	1000012c 	.word	0x1000012c
1a00041c:	10000143 	.word	0x10000143
1a000420:	10000130 	.word	0x10000130
1a000424:	1a000329 	.word	0x1a000329
1a000428:	e000ed04 	.word	0xe000ed04

1a00042c <portsDataInit>:
{
1a00042c:	b530      	push	{r4, r5, lr}
1a00042e:	b083      	sub	sp, #12
1a000430:	4605      	mov	r5, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a000432:	2400      	movs	r4, #0
1a000434:	e015      	b.n	1a000462 <portsDataInit+0x36>
		portData.txData[0]=(i<<4)|0x80; //Armo el primer byte con el primer bit en uno y el address
1a000436:	0123      	lsls	r3, r4, #4
1a000438:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00043c:	f88d 3004 	strb.w	r3, [sp, #4]
		portData.txData[1]=0x00;
1a000440:	2300      	movs	r3, #0
1a000442:	f88d 3005 	strb.w	r3, [sp, #5]
		portData.txData[2]=0x00;
1a000446:	f88d 3006 	strb.w	r3, [sp, #6]
		xQueueSend( port[i].onTxQueue, ( void * ) &portData, ( TickType_t ) portMAX_DELAY ); //Pongo en cola el primer dato a enviar
1a00044a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
1a00044e:	008a      	lsls	r2, r1, #2
1a000450:	18a8      	adds	r0, r5, r2
1a000452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000456:	a901      	add	r1, sp, #4
1a000458:	6840      	ldr	r0, [r0, #4]
1a00045a:	f000 fbe1 	bl	1a000c20 <xQueueGenericSend>
	for (i=0; i< PORTS_NUMBER; i++)
1a00045e:	3401      	adds	r4, #1
1a000460:	b2e4      	uxtb	r4, r4
1a000462:	2c05      	cmp	r4, #5
1a000464:	d9e7      	bls.n	1a000436 <portsDataInit+0xa>
}
1a000466:	b003      	add	sp, #12
1a000468:	bd30      	pop	{r4, r5, pc}
1a00046a:	Address 0x000000001a00046a is out of bounds.


1a00046c <portsdriverInit>:
{
1a00046c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00046e:	b083      	sub	sp, #12
1a000470:	4607      	mov	r7, r0
	for (i=0; i< PORTS_NUMBER; i++)
1a000472:	2400      	movs	r4, #0
1a000474:	2c05      	cmp	r4, #5
1a000476:	d816      	bhi.n	1a0004a6 <portsdriverInit+0x3a>
		ports->port[i].portAddr = i;
1a000478:	0066      	lsls	r6, r4, #1
1a00047a:	1933      	adds	r3, r6, r4
1a00047c:	009d      	lsls	r5, r3, #2
1a00047e:	443d      	add	r5, r7
1a000480:	732c      	strb	r4, [r5, #12]
		ports->port[i].onRxQueue  = xQueueCreate(IN_QUEUE_LEN, sizeof(rxData_t));
1a000482:	2200      	movs	r2, #0
1a000484:	2104      	movs	r1, #4
1a000486:	201e      	movs	r0, #30
1a000488:	f000 fba3 	bl	1a000bd2 <xQueueGenericCreate>
1a00048c:	6168      	str	r0, [r5, #20]
		ports->port[i].onTxQueue = xQueueCreate(OUT_QUEUE_LEN, sizeof(txData_t));
1a00048e:	2200      	movs	r2, #0
1a000490:	2103      	movs	r1, #3
1a000492:	201e      	movs	r0, #30
1a000494:	f000 fb9d 	bl	1a000bd2 <xQueueGenericCreate>
1a000498:	6128      	str	r0, [r5, #16]
		if((ports->port[i].onRxQueue == NULL)||(ports->port[i].onTxQueue == NULL))
1a00049a:	696b      	ldr	r3, [r5, #20]
1a00049c:	b33b      	cbz	r3, 1a0004ee <portsdriverInit+0x82>
1a00049e:	b340      	cbz	r0, 1a0004f2 <portsdriverInit+0x86>
	for (i=0; i< PORTS_NUMBER; i++)
1a0004a0:	3401      	adds	r4, #1
1a0004a2:	b2e4      	uxtb	r4, r4
1a0004a4:	e7e6      	b.n	1a000474 <portsdriverInit+0x8>
	ports->onTxTimeOut = xTimerCreate("Transmit", pdMS_TO_TICKS(1),pdTRUE, (void*) ports, onTxTimeOutCallback);
1a0004a6:	4b15      	ldr	r3, [pc, #84]	; (1a0004fc <portsdriverInit+0x90>)
1a0004a8:	9300      	str	r3, [sp, #0]
1a0004aa:	463b      	mov	r3, r7
1a0004ac:	2201      	movs	r2, #1
1a0004ae:	4611      	mov	r1, r2
1a0004b0:	4813      	ldr	r0, [pc, #76]	; (1a000500 <portsdriverInit+0x94>)
1a0004b2:	f001 fccf 	bl	1a001e54 <xTimerCreate>
1a0004b6:	60b8      	str	r0, [r7, #8]
	if (ports->onTxTimeOut==NULL)
1a0004b8:	b1e8      	cbz	r0, 1a0004f6 <portsdriverInit+0x8a>
	uartConfig(ports->uartValue, ports->baudRate);
1a0004ba:	463c      	mov	r4, r7
1a0004bc:	6879      	ldr	r1, [r7, #4]
1a0004be:	f814 0b0c 	ldrb.w	r0, [r4], #12
1a0004c2:	f003 f847 	bl	1a003554 <uartInit>
	portsDataInit (ports->port);
1a0004c6:	4620      	mov	r0, r4
1a0004c8:	f7ff ffb0 	bl	1a00042c <portsDataInit>
	uartInterrupt(ports->uartValue, true);
1a0004cc:	2101      	movs	r1, #1
1a0004ce:	7838      	ldrb	r0, [r7, #0]
1a0004d0:	f002 ff64 	bl	1a00339c <uartInterrupt>
	xTimerStart( ports->onTxTimeOut, 0 );
1a0004d4:	68bc      	ldr	r4, [r7, #8]
1a0004d6:	f001 f8e3 	bl	1a0016a0 <xTaskGetTickCount>
1a0004da:	2300      	movs	r3, #0
1a0004dc:	9300      	str	r3, [sp, #0]
1a0004de:	4602      	mov	r2, r0
1a0004e0:	2101      	movs	r1, #1
1a0004e2:	4620      	mov	r0, r4
1a0004e4:	f001 fcd2 	bl	1a001e8c <xTimerGenericCommand>
	return(true);
1a0004e8:	2001      	movs	r0, #1
}
1a0004ea:	b003      	add	sp, #12
1a0004ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return (false);
1a0004ee:	2000      	movs	r0, #0
1a0004f0:	e7fb      	b.n	1a0004ea <portsdriverInit+0x7e>
1a0004f2:	2000      	movs	r0, #0
1a0004f4:	e7f9      	b.n	1a0004ea <portsdriverInit+0x7e>
		return (false);
1a0004f6:	2000      	movs	r0, #0
1a0004f8:	e7f7      	b.n	1a0004ea <portsdriverInit+0x7e>
1a0004fa:	bf00      	nop
1a0004fc:	1a000301 	.word	0x1a000301
1a000500:	1a004c80 	.word	0x1a004c80

1a000504 <myTask>:

/*=====[Implementations of public functions]=================================*/

// Task implementation
void myTask( void* taskParmPtr )
{
1a000504:	b510      	push	{r4, lr}
1a000506:	b082      	sub	sp, #8
1a000508:	4604      	mov	r4, r0
	portsData_t *port = (portsData_t*) taskParmPtr;
	txData_t portData;
	// ----- Task setup -----------------------------------
   printf( "Blinky with freeRTOS y sAPI.\r\n" );
1a00050a:	4818      	ldr	r0, [pc, #96]	; (1a00056c <myTask+0x68>)
1a00050c:	f003 ff2c 	bl	1a004368 <puts>

   gpioWrite( LED, ON );
1a000510:	2101      	movs	r1, #1
1a000512:	202a      	movs	r0, #42	; 0x2a
1a000514:	f003 f9dc 	bl	1a0038d0 <gpioWrite>

   // Send the task to the locked state for 1 s (delay)
   vTaskDelay( 1000 / portTICK_RATE_MS );
1a000518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00051c:	f001 fa1e 	bl	1a00195c <vTaskDelay>

   gpioWrite( LED, OFF ); 
1a000520:	2100      	movs	r1, #0
1a000522:	202a      	movs	r0, #42	; 0x2a
1a000524:	f003 f9d4 	bl	1a0038d0 <gpioWrite>

   // Periodic task every 500 ms
   portTickType xPeriodicity =  500 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000528:	f001 f8ba 	bl	1a0016a0 <xTaskGetTickCount>
1a00052c:	9000      	str	r0, [sp, #0]

   // ----- Task repeat for ever -------------------------
   while(TRUE) {
      gpioToggle( LED );
1a00052e:	202a      	movs	r0, #42	; 0x2a
1a000530:	f003 fa37 	bl	1a0039a2 <gpioToggle>
      printf( "Blink!\r\n" );
1a000534:	480e      	ldr	r0, [pc, #56]	; (1a000570 <myTask+0x6c>)
1a000536:	f003 ff17 	bl	1a004368 <puts>
		portData.txData[0]=(port->portAddr<<4)|0x80; //Armo el primer byte con el primer bit en uno y el address
1a00053a:	7823      	ldrb	r3, [r4, #0]
1a00053c:	011b      	lsls	r3, r3, #4
1a00053e:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a000542:	f88d 3004 	strb.w	r3, [sp, #4]
		portData.txData[1]=0x0F;
1a000546:	230f      	movs	r3, #15
1a000548:	f88d 3005 	strb.w	r3, [sp, #5]
		portData.txData[2]=0x0F;
1a00054c:	f88d 3006 	strb.w	r3, [sp, #6]
		xQueueSend( port->onTxQueue, ( void * ) &portData, ( TickType_t ) portMAX_DELAY ); //Pongo en cola el primer dato a enviar
1a000550:	2300      	movs	r3, #0
1a000552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000556:	a901      	add	r1, sp, #4
1a000558:	6860      	ldr	r0, [r4, #4]
1a00055a:	f000 fb61 	bl	1a000c20 <xQueueGenericSend>

      // Send the task to the locked state during xPeriodicity
      // (periodical delay)
      vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a00055e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
1a000562:	4668      	mov	r0, sp
1a000564:	f001 f9a8 	bl	1a0018b8 <vTaskDelayUntil>
1a000568:	e7e1      	b.n	1a00052e <myTask+0x2a>
1a00056a:	bf00      	nop
1a00056c:	1a004c8c 	.word	0x1a004c8c
1a000570:	1a004cac 	.word	0x1a004cac

1a000574 <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000574:	b500      	push	{lr}
1a000576:	b083      	sub	sp, #12

	static portsConfig_t ports;

	ports.uartValue = UART_GPIO;
1a000578:	4c0d      	ldr	r4, [pc, #52]	; (1a0005b0 <main+0x3c>)
1a00057a:	2500      	movs	r5, #0
1a00057c:	7025      	strb	r5, [r4, #0]
	ports.baudRate = 460800;
1a00057e:	f44f 23e1 	mov.w	r3, #460800	; 0x70800
1a000582:	6063      	str	r3, [r4, #4]

   boardInit();
1a000584:	f003 fa26 	bl	1a0039d4 <boardInit>

   gpioInit( GPIO0, GPIO_OUTPUT );
1a000588:	2101      	movs	r1, #1
1a00058a:	2020      	movs	r0, #32
1a00058c:	f003 f8ca 	bl	1a003724 <gpioInit>

   portsdriverInit(&ports);
1a000590:	4620      	mov	r0, r4
1a000592:	f7ff ff6b 	bl	1a00046c <portsdriverInit>

   // Create a task in freeRTOS with dynamic memory
   xTaskCreate(
1a000596:	9501      	str	r5, [sp, #4]
1a000598:	2301      	movs	r3, #1
1a00059a:	9300      	str	r3, [sp, #0]
1a00059c:	f104 0318 	add.w	r3, r4, #24
1a0005a0:	22b4      	movs	r2, #180	; 0xb4
1a0005a2:	4904      	ldr	r1, [pc, #16]	; (1a0005b4 <main+0x40>)
1a0005a4:	4804      	ldr	r0, [pc, #16]	; (1a0005b8 <main+0x44>)
1a0005a6:	f000 fff6 	bl	1a001596 <xTaskCreate>
   //Creo timer de 1ms para sincronizacion de puertos
//   ports.onTxTimeOut = xTimerCreate("Transmit", pdMS_TO_TICKS(1),pdTRUE, (void*) &ports, onTxTimeOutCallback);
//   xTimerStart( ports.onTxTimeOut, 0 );


   vTaskStartScheduler(); // Initialize scheduler
1a0005aa:	f001 f827 	bl	1a0015fc <vTaskStartScheduler>
1a0005ae:	e7fe      	b.n	1a0005ae <main+0x3a>
1a0005b0:	10000144 	.word	0x10000144
1a0005b4:	1a004cb4 	.word	0x1a004cb4
1a0005b8:	1a000505 	.word	0x1a000505

1a0005bc <initialise_monitor_handles>:
}
1a0005bc:	4770      	bx	lr
1a0005be:	Address 0x000000001a0005be is out of bounds.


1a0005c0 <Reset_Handler>:
void Reset_Handler(void) {
1a0005c0:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0005c2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0005c4:	4b19      	ldr	r3, [pc, #100]	; (1a00062c <Reset_Handler+0x6c>)
1a0005c6:	4a1a      	ldr	r2, [pc, #104]	; (1a000630 <Reset_Handler+0x70>)
1a0005c8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0005ca:	3304      	adds	r3, #4
1a0005cc:	4a19      	ldr	r2, [pc, #100]	; (1a000634 <Reset_Handler+0x74>)
1a0005ce:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005d0:	2300      	movs	r3, #0
1a0005d2:	e005      	b.n	1a0005e0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0005d4:	4a18      	ldr	r2, [pc, #96]	; (1a000638 <Reset_Handler+0x78>)
1a0005d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0005da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0005de:	3301      	adds	r3, #1
1a0005e0:	2b07      	cmp	r3, #7
1a0005e2:	d9f7      	bls.n	1a0005d4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0005e4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0005e6:	4b15      	ldr	r3, [pc, #84]	; (1a00063c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0005e8:	e007      	b.n	1a0005fa <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0005ea:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0005ee:	689a      	ldr	r2, [r3, #8]
1a0005f0:	6859      	ldr	r1, [r3, #4]
1a0005f2:	6818      	ldr	r0, [r3, #0]
1a0005f4:	f7ff fdc9 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005f8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005fa:	4a11      	ldr	r2, [pc, #68]	; (1a000640 <Reset_Handler+0x80>)
1a0005fc:	4293      	cmp	r3, r2
1a0005fe:	d3f4      	bcc.n	1a0005ea <Reset_Handler+0x2a>
1a000600:	e006      	b.n	1a000610 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000602:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000604:	6859      	ldr	r1, [r3, #4]
1a000606:	f854 0b08 	ldr.w	r0, [r4], #8
1a00060a:	f7ff fdcd 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00060e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000610:	4a0c      	ldr	r2, [pc, #48]	; (1a000644 <Reset_Handler+0x84>)
1a000612:	4293      	cmp	r3, r2
1a000614:	d3f5      	bcc.n	1a000602 <Reset_Handler+0x42>
    SystemInit();
1a000616:	f002 fe33 	bl	1a003280 <SystemInit>
    __libc_init_array();
1a00061a:	f003 fd51 	bl	1a0040c0 <__libc_init_array>
    initialise_monitor_handles();
1a00061e:	f7ff ffcd 	bl	1a0005bc <initialise_monitor_handles>
    main();
1a000622:	f7ff ffa7 	bl	1a000574 <main>
        __asm__ volatile("wfi");
1a000626:	bf30      	wfi
1a000628:	e7fd      	b.n	1a000626 <Reset_Handler+0x66>
1a00062a:	bf00      	nop
1a00062c:	40053100 	.word	0x40053100
1a000630:	10df1000 	.word	0x10df1000
1a000634:	01dff7ff 	.word	0x01dff7ff
1a000638:	e000e280 	.word	0xe000e280
1a00063c:	1a000114 	.word	0x1a000114
1a000640:	1a000150 	.word	0x1a000150
1a000644:	1a000178 	.word	0x1a000178

1a000648 <_fini>:
void _fini(void) {}
1a000648:	4770      	bx	lr

1a00064a <_init>:
void _init(void) {}
1a00064a:	4770      	bx	lr

1a00064c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00064c:	2309      	movs	r3, #9
1a00064e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000654:	4770      	bx	lr

1a000656 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000656:	2358      	movs	r3, #88	; 0x58
1a000658:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00065a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00065e:	4770      	bx	lr

1a000660 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000660:	2902      	cmp	r1, #2
1a000662:	d801      	bhi.n	1a000668 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000664:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000666:	4770      	bx	lr
       SET_ERR(EBADF);
1a000668:	2309      	movs	r3, #9
1a00066a:	6003      	str	r3, [r0, #0]
       return -1;
1a00066c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000670:	4770      	bx	lr

1a000672 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000672:	2358      	movs	r3, #88	; 0x58
1a000674:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00067a:	4770      	bx	lr

1a00067c <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a00067c:	2902      	cmp	r1, #2
1a00067e:	d81f      	bhi.n	1a0006c0 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000684:	461d      	mov	r5, r3
1a000686:	4617      	mov	r7, r2
1a000688:	4606      	mov	r6, r0
  size_t i = 0;
1a00068a:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00068c:	42ac      	cmp	r4, r5
1a00068e:	d211      	bcs.n	1a0006b4 <_read_r+0x38>
         int c = __stdio_getchar();
1a000690:	f002 f847 	bl	1a002722 <__stdio_getchar>
         if( c != -1 ){
1a000694:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000698:	d0f8      	beq.n	1a00068c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a00069a:	f104 0801 	add.w	r8, r4, #1
1a00069e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0006a0:	280d      	cmp	r0, #13
1a0006a2:	d003      	beq.n	1a0006ac <_read_r+0x30>
1a0006a4:	280a      	cmp	r0, #10
1a0006a6:	d001      	beq.n	1a0006ac <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0006a8:	4644      	mov	r4, r8
1a0006aa:	e7ef      	b.n	1a00068c <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0006ac:	f002 f839 	bl	1a002722 <__stdio_getchar>
               return i;
1a0006b0:	4640      	mov	r0, r8
1a0006b2:	e003      	b.n	1a0006bc <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a0006b4:	2313      	movs	r3, #19
1a0006b6:	6033      	str	r3, [r6, #0]
      return -1;
1a0006b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0006bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a0006c0:	2313      	movs	r3, #19
1a0006c2:	6003      	str	r3, [r0, #0]
      return -1;
1a0006c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006c8:	4770      	bx	lr

1a0006ca <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0006ca:	2902      	cmp	r1, #2
1a0006cc:	d80c      	bhi.n	1a0006e8 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0006ce:	b570      	push	{r4, r5, r6, lr}
1a0006d0:	461d      	mov	r5, r3
1a0006d2:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0006d4:	2400      	movs	r4, #0
1a0006d6:	e003      	b.n	1a0006e0 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a0006d8:	5d30      	ldrb	r0, [r6, r4]
1a0006da:	f002 f81d 	bl	1a002718 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a0006de:	3401      	adds	r4, #1
1a0006e0:	42ac      	cmp	r4, r5
1a0006e2:	d3f9      	bcc.n	1a0006d8 <_write_r+0xe>
       return n;
1a0006e4:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0006e6:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0006e8:	2313      	movs	r3, #19
1a0006ea:	6003      	str	r3, [r0, #0]
       return -1;
1a0006ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006f0:	4770      	bx	lr
1a0006f2:	Address 0x000000001a0006f2 is out of bounds.


1a0006f4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0006f4:	4b05      	ldr	r3, [pc, #20]	; (1a00070c <_sbrk_r+0x18>)
1a0006f6:	681b      	ldr	r3, [r3, #0]
1a0006f8:	b123      	cbz	r3, 1a000704 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006fa:	4b04      	ldr	r3, [pc, #16]	; (1a00070c <_sbrk_r+0x18>)
1a0006fc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006fe:	4401      	add	r1, r0
1a000700:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000702:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000704:	4b01      	ldr	r3, [pc, #4]	; (1a00070c <_sbrk_r+0x18>)
1a000706:	4a02      	ldr	r2, [pc, #8]	; (1a000710 <_sbrk_r+0x1c>)
1a000708:	601a      	str	r2, [r3, #0]
1a00070a:	e7f6      	b.n	1a0006fa <_sbrk_r+0x6>
1a00070c:	10000198 	.word	0x10000198
1a000710:	10002c68 	.word	0x10002c68

1a000714 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000714:	4a12      	ldr	r2, [pc, #72]	; (1a000760 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000716:	f012 0f07 	tst.w	r2, #7
1a00071a:	d01e      	beq.n	1a00075a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a00071c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00071e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000722:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000726:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000728:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00072a:	480e      	ldr	r0, [pc, #56]	; (1a000764 <prvHeapInit+0x50>)
1a00072c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a00072e:	2100      	movs	r1, #0
1a000730:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000732:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000734:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000736:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00073a:	480b      	ldr	r0, [pc, #44]	; (1a000768 <prvHeapInit+0x54>)
1a00073c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00073e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000740:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000742:	1a99      	subs	r1, r3, r2
1a000744:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000746:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000748:	4b08      	ldr	r3, [pc, #32]	; (1a00076c <prvHeapInit+0x58>)
1a00074a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00074c:	4b08      	ldr	r3, [pc, #32]	; (1a000770 <prvHeapInit+0x5c>)
1a00074e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000750:	4b08      	ldr	r3, [pc, #32]	; (1a000774 <prvHeapInit+0x60>)
1a000752:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000756:	601a      	str	r2, [r3, #0]
}
1a000758:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a00075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a00075e:	e7e4      	b.n	1a00072a <prvHeapInit+0x16>
1a000760:	100001a0 	.word	0x100001a0
1a000764:	100021ac 	.word	0x100021ac
1a000768:	1000019c 	.word	0x1000019c
1a00076c:	100021a8 	.word	0x100021a8
1a000770:	100021a4 	.word	0x100021a4
1a000774:	100021a0 	.word	0x100021a0

1a000778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000778:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a00077a:	4b13      	ldr	r3, [pc, #76]	; (1a0007c8 <prvInsertBlockIntoFreeList+0x50>)
1a00077c:	681a      	ldr	r2, [r3, #0]
1a00077e:	4282      	cmp	r2, r0
1a000780:	d31b      	bcc.n	1a0007ba <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000782:	6859      	ldr	r1, [r3, #4]
1a000784:	185c      	adds	r4, r3, r1
1a000786:	4284      	cmp	r4, r0
1a000788:	d103      	bne.n	1a000792 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a00078a:	6840      	ldr	r0, [r0, #4]
1a00078c:	4401      	add	r1, r0
1a00078e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000790:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000792:	6841      	ldr	r1, [r0, #4]
1a000794:	1844      	adds	r4, r0, r1
1a000796:	42a2      	cmp	r2, r4
1a000798:	d113      	bne.n	1a0007c2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a00079a:	4c0c      	ldr	r4, [pc, #48]	; (1a0007cc <prvInsertBlockIntoFreeList+0x54>)
1a00079c:	6824      	ldr	r4, [r4, #0]
1a00079e:	42a2      	cmp	r2, r4
1a0007a0:	d00d      	beq.n	1a0007be <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a0007a2:	6852      	ldr	r2, [r2, #4]
1a0007a4:	4411      	add	r1, r2
1a0007a6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a0007a8:	681a      	ldr	r2, [r3, #0]
1a0007aa:	6812      	ldr	r2, [r2, #0]
1a0007ac:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0007ae:	4298      	cmp	r0, r3
1a0007b0:	d000      	beq.n	1a0007b4 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0007b2:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0007b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0007b8:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0007ba:	4613      	mov	r3, r2
1a0007bc:	e7de      	b.n	1a00077c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a0007be:	6004      	str	r4, [r0, #0]
1a0007c0:	e7f5      	b.n	1a0007ae <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0007c2:	6002      	str	r2, [r0, #0]
1a0007c4:	e7f3      	b.n	1a0007ae <prvInsertBlockIntoFreeList+0x36>
1a0007c6:	bf00      	nop
1a0007c8:	100021ac 	.word	0x100021ac
1a0007cc:	1000019c 	.word	0x1000019c

1a0007d0 <pvPortMalloc>:
{
1a0007d0:	b570      	push	{r4, r5, r6, lr}
1a0007d2:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0007d4:	f000 ff5c 	bl	1a001690 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a0007d8:	4b3f      	ldr	r3, [pc, #252]	; (1a0008d8 <pvPortMalloc+0x108>)
1a0007da:	681b      	ldr	r3, [r3, #0]
1a0007dc:	b1a3      	cbz	r3, 1a000808 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a0007de:	4b3f      	ldr	r3, [pc, #252]	; (1a0008dc <pvPortMalloc+0x10c>)
1a0007e0:	681b      	ldr	r3, [r3, #0]
1a0007e2:	421c      	tst	r4, r3
1a0007e4:	d013      	beq.n	1a00080e <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a0007e6:	f000 ffed 	bl	1a0017c4 <xTaskResumeAll>
void *pvReturn = NULL;
1a0007ea:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a0007ec:	f000 fcf2 	bl	1a0011d4 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a0007f0:	f016 0f07 	tst.w	r6, #7
1a0007f4:	d06e      	beq.n	1a0008d4 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0007f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0007fa:	f383 8811 	msr	BASEPRI, r3
1a0007fe:	f3bf 8f6f 	isb	sy
1a000802:	f3bf 8f4f 	dsb	sy
1a000806:	e7fe      	b.n	1a000806 <pvPortMalloc+0x36>
			prvHeapInit();
1a000808:	f7ff ff84 	bl	1a000714 <prvHeapInit>
1a00080c:	e7e7      	b.n	1a0007de <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a00080e:	b194      	cbz	r4, 1a000836 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000810:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000812:	f014 0f07 	tst.w	r4, #7
1a000816:	d00e      	beq.n	1a000836 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000818:	f024 0407 	bic.w	r4, r4, #7
1a00081c:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a00081e:	f004 0307 	and.w	r3, r4, #7
1a000822:	b143      	cbz	r3, 1a000836 <pvPortMalloc+0x66>
1a000824:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000828:	f383 8811 	msr	BASEPRI, r3
1a00082c:	f3bf 8f6f 	isb	sy
1a000830:	f3bf 8f4f 	dsb	sy
1a000834:	e7fe      	b.n	1a000834 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000836:	b134      	cbz	r4, 1a000846 <pvPortMalloc+0x76>
1a000838:	4b29      	ldr	r3, [pc, #164]	; (1a0008e0 <pvPortMalloc+0x110>)
1a00083a:	681b      	ldr	r3, [r3, #0]
1a00083c:	42a3      	cmp	r3, r4
1a00083e:	d306      	bcc.n	1a00084e <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000840:	4b28      	ldr	r3, [pc, #160]	; (1a0008e4 <pvPortMalloc+0x114>)
1a000842:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000844:	e009      	b.n	1a00085a <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000846:	f000 ffbd 	bl	1a0017c4 <xTaskResumeAll>
void *pvReturn = NULL;
1a00084a:	2600      	movs	r6, #0
1a00084c:	e7ce      	b.n	1a0007ec <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a00084e:	f000 ffb9 	bl	1a0017c4 <xTaskResumeAll>
void *pvReturn = NULL;
1a000852:	2600      	movs	r6, #0
1a000854:	e7ca      	b.n	1a0007ec <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000856:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000858:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a00085a:	686a      	ldr	r2, [r5, #4]
1a00085c:	42a2      	cmp	r2, r4
1a00085e:	d202      	bcs.n	1a000866 <pvPortMalloc+0x96>
1a000860:	682a      	ldr	r2, [r5, #0]
1a000862:	2a00      	cmp	r2, #0
1a000864:	d1f7      	bne.n	1a000856 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000866:	4a1c      	ldr	r2, [pc, #112]	; (1a0008d8 <pvPortMalloc+0x108>)
1a000868:	6812      	ldr	r2, [r2, #0]
1a00086a:	42aa      	cmp	r2, r5
1a00086c:	d014      	beq.n	1a000898 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a00086e:	681e      	ldr	r6, [r3, #0]
1a000870:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000872:	682a      	ldr	r2, [r5, #0]
1a000874:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000876:	686b      	ldr	r3, [r5, #4]
1a000878:	1b1b      	subs	r3, r3, r4
1a00087a:	2b10      	cmp	r3, #16
1a00087c:	d914      	bls.n	1a0008a8 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a00087e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000880:	f010 0f07 	tst.w	r0, #7
1a000884:	d00c      	beq.n	1a0008a0 <pvPortMalloc+0xd0>
1a000886:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00088a:	f383 8811 	msr	BASEPRI, r3
1a00088e:	f3bf 8f6f 	isb	sy
1a000892:	f3bf 8f4f 	dsb	sy
1a000896:	e7fe      	b.n	1a000896 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000898:	f000 ff94 	bl	1a0017c4 <xTaskResumeAll>
void *pvReturn = NULL;
1a00089c:	2600      	movs	r6, #0
1a00089e:	e7a5      	b.n	1a0007ec <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0008a0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0008a2:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0008a4:	f7ff ff68 	bl	1a000778 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0008a8:	686a      	ldr	r2, [r5, #4]
1a0008aa:	490d      	ldr	r1, [pc, #52]	; (1a0008e0 <pvPortMalloc+0x110>)
1a0008ac:	680b      	ldr	r3, [r1, #0]
1a0008ae:	1a9b      	subs	r3, r3, r2
1a0008b0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0008b2:	490d      	ldr	r1, [pc, #52]	; (1a0008e8 <pvPortMalloc+0x118>)
1a0008b4:	6809      	ldr	r1, [r1, #0]
1a0008b6:	428b      	cmp	r3, r1
1a0008b8:	d201      	bcs.n	1a0008be <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0008ba:	490b      	ldr	r1, [pc, #44]	; (1a0008e8 <pvPortMalloc+0x118>)
1a0008bc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0008be:	4b07      	ldr	r3, [pc, #28]	; (1a0008dc <pvPortMalloc+0x10c>)
1a0008c0:	681b      	ldr	r3, [r3, #0]
1a0008c2:	4313      	orrs	r3, r2
1a0008c4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0008c6:	2300      	movs	r3, #0
1a0008c8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a0008ca:	f000 ff7b 	bl	1a0017c4 <xTaskResumeAll>
		if( pvReturn == NULL )
1a0008ce:	2e00      	cmp	r6, #0
1a0008d0:	d18e      	bne.n	1a0007f0 <pvPortMalloc+0x20>
1a0008d2:	e78b      	b.n	1a0007ec <pvPortMalloc+0x1c>
}
1a0008d4:	4630      	mov	r0, r6
1a0008d6:	bd70      	pop	{r4, r5, r6, pc}
1a0008d8:	1000019c 	.word	0x1000019c
1a0008dc:	100021a0 	.word	0x100021a0
1a0008e0:	100021a4 	.word	0x100021a4
1a0008e4:	100021ac 	.word	0x100021ac
1a0008e8:	100021a8 	.word	0x100021a8

1a0008ec <vPortFree>:
	if( pv != NULL )
1a0008ec:	b380      	cbz	r0, 1a000950 <vPortFree+0x64>
{
1a0008ee:	b538      	push	{r3, r4, r5, lr}
1a0008f0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a0008f2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a0008f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a0008fa:	4916      	ldr	r1, [pc, #88]	; (1a000954 <vPortFree+0x68>)
1a0008fc:	6809      	ldr	r1, [r1, #0]
1a0008fe:	420a      	tst	r2, r1
1a000900:	d108      	bne.n	1a000914 <vPortFree+0x28>
1a000902:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000906:	f383 8811 	msr	BASEPRI, r3
1a00090a:	f3bf 8f6f 	isb	sy
1a00090e:	f3bf 8f4f 	dsb	sy
1a000912:	e7fe      	b.n	1a000912 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000914:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000918:	b140      	cbz	r0, 1a00092c <vPortFree+0x40>
1a00091a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00091e:	f383 8811 	msr	BASEPRI, r3
1a000922:	f3bf 8f6f 	isb	sy
1a000926:	f3bf 8f4f 	dsb	sy
1a00092a:	e7fe      	b.n	1a00092a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a00092c:	ea22 0201 	bic.w	r2, r2, r1
1a000930:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000934:	f000 feac 	bl	1a001690 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000938:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a00093c:	4a06      	ldr	r2, [pc, #24]	; (1a000958 <vPortFree+0x6c>)
1a00093e:	6813      	ldr	r3, [r2, #0]
1a000940:	440b      	add	r3, r1
1a000942:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000944:	4628      	mov	r0, r5
1a000946:	f7ff ff17 	bl	1a000778 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a00094a:	f000 ff3b 	bl	1a0017c4 <xTaskResumeAll>
}
1a00094e:	bd38      	pop	{r3, r4, r5, pc}
1a000950:	4770      	bx	lr
1a000952:	bf00      	nop
1a000954:	100021a0 	.word	0x100021a0
1a000958:	100021a4 	.word	0x100021a4

1a00095c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a00095c:	b510      	push	{r4, lr}
1a00095e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000960:	f001 fc88 	bl	1a002274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000964:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000966:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000968:	429a      	cmp	r2, r3
1a00096a:	d004      	beq.n	1a000976 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a00096c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a00096e:	f001 fca3 	bl	1a0022b8 <vPortExitCritical>

	return xReturn;
}
1a000972:	4620      	mov	r0, r4
1a000974:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000976:	2401      	movs	r4, #1
1a000978:	e7f9      	b.n	1a00096e <prvIsQueueFull+0x12>

1a00097a <prvIsQueueEmpty>:
{
1a00097a:	b510      	push	{r4, lr}
1a00097c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00097e:	f001 fc79 	bl	1a002274 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000984:	b123      	cbz	r3, 1a000990 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000986:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000988:	f001 fc96 	bl	1a0022b8 <vPortExitCritical>
}
1a00098c:	4620      	mov	r0, r4
1a00098e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000990:	2401      	movs	r4, #1
1a000992:	e7f9      	b.n	1a000988 <prvIsQueueEmpty+0xe>

1a000994 <prvCopyDataToQueue>:
{
1a000994:	b570      	push	{r4, r5, r6, lr}
1a000996:	4604      	mov	r4, r0
1a000998:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00099a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a00099c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00099e:	b95a      	cbnz	r2, 1a0009b8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0009a0:	6803      	ldr	r3, [r0, #0]
1a0009a2:	b11b      	cbz	r3, 1a0009ac <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0009a4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0009a6:	3501      	adds	r5, #1
1a0009a8:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0009aa:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0009ac:	6840      	ldr	r0, [r0, #4]
1a0009ae:	f001 f93b 	bl	1a001c28 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0009b2:	2300      	movs	r3, #0
1a0009b4:	6063      	str	r3, [r4, #4]
1a0009b6:	e7f6      	b.n	1a0009a6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a0009b8:	b96e      	cbnz	r6, 1a0009d6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a0009ba:	6880      	ldr	r0, [r0, #8]
1a0009bc:	f003 fba4 	bl	1a004108 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a0009c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0009c2:	68a3      	ldr	r3, [r4, #8]
1a0009c4:	4413      	add	r3, r2
1a0009c6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0009c8:	6862      	ldr	r2, [r4, #4]
1a0009ca:	4293      	cmp	r3, r2
1a0009cc:	d319      	bcc.n	1a000a02 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a0009ce:	6823      	ldr	r3, [r4, #0]
1a0009d0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a0009d2:	2000      	movs	r0, #0
1a0009d4:	e7e7      	b.n	1a0009a6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0009d6:	68c0      	ldr	r0, [r0, #12]
1a0009d8:	f003 fb96 	bl	1a004108 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a0009dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a0009de:	4252      	negs	r2, r2
1a0009e0:	68e3      	ldr	r3, [r4, #12]
1a0009e2:	4413      	add	r3, r2
1a0009e4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a0009e6:	6821      	ldr	r1, [r4, #0]
1a0009e8:	428b      	cmp	r3, r1
1a0009ea:	d202      	bcs.n	1a0009f2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a0009ec:	6863      	ldr	r3, [r4, #4]
1a0009ee:	441a      	add	r2, r3
1a0009f0:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a0009f2:	2e02      	cmp	r6, #2
1a0009f4:	d001      	beq.n	1a0009fa <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a0009f6:	2000      	movs	r0, #0
1a0009f8:	e7d5      	b.n	1a0009a6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0009fa:	b125      	cbz	r5, 1a000a06 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a0009fc:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a0009fe:	2000      	movs	r0, #0
1a000a00:	e7d1      	b.n	1a0009a6 <prvCopyDataToQueue+0x12>
1a000a02:	2000      	movs	r0, #0
1a000a04:	e7cf      	b.n	1a0009a6 <prvCopyDataToQueue+0x12>
1a000a06:	2000      	movs	r0, #0
1a000a08:	e7cd      	b.n	1a0009a6 <prvCopyDataToQueue+0x12>

1a000a0a <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000a0a:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000a0c:	b172      	cbz	r2, 1a000a2c <prvCopyDataFromQueue+0x22>
{
1a000a0e:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000a10:	68c3      	ldr	r3, [r0, #12]
1a000a12:	4413      	add	r3, r2
1a000a14:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000a16:	6844      	ldr	r4, [r0, #4]
1a000a18:	42a3      	cmp	r3, r4
1a000a1a:	d301      	bcc.n	1a000a20 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000a1c:	6803      	ldr	r3, [r0, #0]
1a000a1e:	60c3      	str	r3, [r0, #12]
1a000a20:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000a22:	68c1      	ldr	r1, [r0, #12]
1a000a24:	4620      	mov	r0, r4
1a000a26:	f003 fb6f 	bl	1a004108 <memcpy>
}
1a000a2a:	bd10      	pop	{r4, pc}
1a000a2c:	4770      	bx	lr

1a000a2e <prvUnlockQueue>:
{
1a000a2e:	b538      	push	{r3, r4, r5, lr}
1a000a30:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000a32:	f001 fc1f 	bl	1a002274 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000a36:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000a3a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000a3c:	e003      	b.n	1a000a46 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000a3e:	f001 f8dd 	bl	1a001bfc <vTaskMissedYield>
			--cTxLock;
1a000a42:	3c01      	subs	r4, #1
1a000a44:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000a46:	2c00      	cmp	r4, #0
1a000a48:	dd08      	ble.n	1a000a5c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000a4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000a4c:	b133      	cbz	r3, 1a000a5c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000a4e:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000a52:	f001 f841 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a000a56:	2800      	cmp	r0, #0
1a000a58:	d0f3      	beq.n	1a000a42 <prvUnlockQueue+0x14>
1a000a5a:	e7f0      	b.n	1a000a3e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000a5c:	23ff      	movs	r3, #255	; 0xff
1a000a5e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000a62:	f001 fc29 	bl	1a0022b8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000a66:	f001 fc05 	bl	1a002274 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000a6a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000a6e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000a70:	e003      	b.n	1a000a7a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000a72:	f001 f8c3 	bl	1a001bfc <vTaskMissedYield>
				--cRxLock;
1a000a76:	3c01      	subs	r4, #1
1a000a78:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000a7a:	2c00      	cmp	r4, #0
1a000a7c:	dd08      	ble.n	1a000a90 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000a7e:	692b      	ldr	r3, [r5, #16]
1a000a80:	b133      	cbz	r3, 1a000a90 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000a82:	f105 0010 	add.w	r0, r5, #16
1a000a86:	f001 f827 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a000a8a:	2800      	cmp	r0, #0
1a000a8c:	d0f3      	beq.n	1a000a76 <prvUnlockQueue+0x48>
1a000a8e:	e7f0      	b.n	1a000a72 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000a90:	23ff      	movs	r3, #255	; 0xff
1a000a92:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000a96:	f001 fc0f 	bl	1a0022b8 <vPortExitCritical>
}
1a000a9a:	bd38      	pop	{r3, r4, r5, pc}

1a000a9c <xQueueGenericReset>:
{
1a000a9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000a9e:	b940      	cbnz	r0, 1a000ab2 <xQueueGenericReset+0x16>
1a000aa0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000aa4:	f383 8811 	msr	BASEPRI, r3
1a000aa8:	f3bf 8f6f 	isb	sy
1a000aac:	f3bf 8f4f 	dsb	sy
1a000ab0:	e7fe      	b.n	1a000ab0 <xQueueGenericReset+0x14>
1a000ab2:	4604      	mov	r4, r0
1a000ab4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000ab6:	f001 fbdd 	bl	1a002274 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000aba:	6821      	ldr	r1, [r4, #0]
1a000abc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000ac0:	fb03 1002 	mla	r0, r3, r2, r1
1a000ac4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000ac6:	2000      	movs	r0, #0
1a000ac8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000aca:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000acc:	3a01      	subs	r2, #1
1a000ace:	fb02 1303 	mla	r3, r2, r3, r1
1a000ad2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000ad4:	23ff      	movs	r3, #255	; 0xff
1a000ad6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000ade:	b9a5      	cbnz	r5, 1a000b0a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000ae0:	6923      	ldr	r3, [r4, #16]
1a000ae2:	b91b      	cbnz	r3, 1a000aec <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000ae4:	f001 fbe8 	bl	1a0022b8 <vPortExitCritical>
}
1a000ae8:	2001      	movs	r0, #1
1a000aea:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000aec:	f104 0010 	add.w	r0, r4, #16
1a000af0:	f000 fff2 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a000af4:	2800      	cmp	r0, #0
1a000af6:	d0f5      	beq.n	1a000ae4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000af8:	4b08      	ldr	r3, [pc, #32]	; (1a000b1c <xQueueGenericReset+0x80>)
1a000afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000afe:	601a      	str	r2, [r3, #0]
1a000b00:	f3bf 8f4f 	dsb	sy
1a000b04:	f3bf 8f6f 	isb	sy
1a000b08:	e7ec      	b.n	1a000ae4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000b0a:	f104 0010 	add.w	r0, r4, #16
1a000b0e:	f000 faea 	bl	1a0010e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000b12:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b16:	f000 fae6 	bl	1a0010e6 <vListInitialise>
1a000b1a:	e7e3      	b.n	1a000ae4 <xQueueGenericReset+0x48>
1a000b1c:	e000ed04 	.word	0xe000ed04

1a000b20 <prvInitialiseNewQueue>:
{
1a000b20:	b538      	push	{r3, r4, r5, lr}
1a000b22:	461d      	mov	r5, r3
1a000b24:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000b26:	460b      	mov	r3, r1
1a000b28:	b149      	cbz	r1, 1a000b3e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000b2a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000b2c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000b2e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000b30:	2101      	movs	r1, #1
1a000b32:	4620      	mov	r0, r4
1a000b34:	f7ff ffb2 	bl	1a000a9c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000b38:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000b3c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000b3e:	6024      	str	r4, [r4, #0]
1a000b40:	e7f4      	b.n	1a000b2c <prvInitialiseNewQueue+0xc>

1a000b42 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000b42:	b940      	cbnz	r0, 1a000b56 <xQueueGenericCreateStatic+0x14>
1a000b44:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b48:	f383 8811 	msr	BASEPRI, r3
1a000b4c:	f3bf 8f6f 	isb	sy
1a000b50:	f3bf 8f4f 	dsb	sy
1a000b54:	e7fe      	b.n	1a000b54 <xQueueGenericCreateStatic+0x12>
	{
1a000b56:	b510      	push	{r4, lr}
1a000b58:	b084      	sub	sp, #16
1a000b5a:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000b5c:	b153      	cbz	r3, 1a000b74 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000b5e:	b192      	cbz	r2, 1a000b86 <xQueueGenericCreateStatic+0x44>
1a000b60:	b989      	cbnz	r1, 1a000b86 <xQueueGenericCreateStatic+0x44>
1a000b62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b66:	f383 8811 	msr	BASEPRI, r3
1a000b6a:	f3bf 8f6f 	isb	sy
1a000b6e:	f3bf 8f4f 	dsb	sy
1a000b72:	e7fe      	b.n	1a000b72 <xQueueGenericCreateStatic+0x30>
1a000b74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b78:	f383 8811 	msr	BASEPRI, r3
1a000b7c:	f3bf 8f6f 	isb	sy
1a000b80:	f3bf 8f4f 	dsb	sy
1a000b84:	e7fe      	b.n	1a000b84 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000b86:	b94a      	cbnz	r2, 1a000b9c <xQueueGenericCreateStatic+0x5a>
1a000b88:	b141      	cbz	r1, 1a000b9c <xQueueGenericCreateStatic+0x5a>
1a000b8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000b8e:	f383 8811 	msr	BASEPRI, r3
1a000b92:	f3bf 8f6f 	isb	sy
1a000b96:	f3bf 8f4f 	dsb	sy
1a000b9a:	e7fe      	b.n	1a000b9a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000b9c:	2050      	movs	r0, #80	; 0x50
1a000b9e:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000ba0:	9803      	ldr	r0, [sp, #12]
1a000ba2:	2850      	cmp	r0, #80	; 0x50
1a000ba4:	d008      	beq.n	1a000bb8 <xQueueGenericCreateStatic+0x76>
1a000ba6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000baa:	f383 8811 	msr	BASEPRI, r3
1a000bae:	f3bf 8f6f 	isb	sy
1a000bb2:	f3bf 8f4f 	dsb	sy
1a000bb6:	e7fe      	b.n	1a000bb6 <xQueueGenericCreateStatic+0x74>
1a000bb8:	4620      	mov	r0, r4
1a000bba:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000bbc:	2301      	movs	r3, #1
1a000bbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000bc2:	9400      	str	r4, [sp, #0]
1a000bc4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000bc8:	f7ff ffaa 	bl	1a000b20 <prvInitialiseNewQueue>
	}
1a000bcc:	4620      	mov	r0, r4
1a000bce:	b004      	add	sp, #16
1a000bd0:	bd10      	pop	{r4, pc}

1a000bd2 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000bd2:	b940      	cbnz	r0, 1a000be6 <xQueueGenericCreate+0x14>
1a000bd4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000bd8:	f383 8811 	msr	BASEPRI, r3
1a000bdc:	f3bf 8f6f 	isb	sy
1a000be0:	f3bf 8f4f 	dsb	sy
1a000be4:	e7fe      	b.n	1a000be4 <xQueueGenericCreate+0x12>
	{
1a000be6:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000be8:	b083      	sub	sp, #12
1a000bea:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000bec:	b111      	cbz	r1, 1a000bf4 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000bee:	fb01 f000 	mul.w	r0, r1, r0
1a000bf2:	e000      	b.n	1a000bf6 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a000bf4:	2000      	movs	r0, #0
1a000bf6:	4617      	mov	r7, r2
1a000bf8:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000bfa:	3050      	adds	r0, #80	; 0x50
1a000bfc:	f7ff fde8 	bl	1a0007d0 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000c00:	4605      	mov	r5, r0
1a000c02:	b150      	cbz	r0, 1a000c1a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000c04:	2300      	movs	r3, #0
1a000c06:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000c0a:	9000      	str	r0, [sp, #0]
1a000c0c:	463b      	mov	r3, r7
1a000c0e:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000c12:	4621      	mov	r1, r4
1a000c14:	4630      	mov	r0, r6
1a000c16:	f7ff ff83 	bl	1a000b20 <prvInitialiseNewQueue>
	}
1a000c1a:	4628      	mov	r0, r5
1a000c1c:	b003      	add	sp, #12
1a000c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000c20 <xQueueGenericSend>:
{
1a000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000c22:	b085      	sub	sp, #20
1a000c24:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000c26:	b160      	cbz	r0, 1a000c42 <xQueueGenericSend+0x22>
1a000c28:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c2a:	b999      	cbnz	r1, 1a000c54 <xQueueGenericSend+0x34>
1a000c2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000c2e:	b18a      	cbz	r2, 1a000c54 <xQueueGenericSend+0x34>
1a000c30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c34:	f383 8811 	msr	BASEPRI, r3
1a000c38:	f3bf 8f6f 	isb	sy
1a000c3c:	f3bf 8f4f 	dsb	sy
1a000c40:	e7fe      	b.n	1a000c40 <xQueueGenericSend+0x20>
1a000c42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c46:	f383 8811 	msr	BASEPRI, r3
1a000c4a:	f3bf 8f6f 	isb	sy
1a000c4e:	f3bf 8f4f 	dsb	sy
1a000c52:	e7fe      	b.n	1a000c52 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000c54:	2b02      	cmp	r3, #2
1a000c56:	d10b      	bne.n	1a000c70 <xQueueGenericSend+0x50>
1a000c58:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000c5a:	2a01      	cmp	r2, #1
1a000c5c:	d008      	beq.n	1a000c70 <xQueueGenericSend+0x50>
1a000c5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c62:	f383 8811 	msr	BASEPRI, r3
1a000c66:	f3bf 8f6f 	isb	sy
1a000c6a:	f3bf 8f4f 	dsb	sy
1a000c6e:	e7fe      	b.n	1a000c6e <xQueueGenericSend+0x4e>
1a000c70:	461e      	mov	r6, r3
1a000c72:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000c74:	f000 ffc8 	bl	1a001c08 <xTaskGetSchedulerState>
1a000c78:	b950      	cbnz	r0, 1a000c90 <xQueueGenericSend+0x70>
1a000c7a:	9b01      	ldr	r3, [sp, #4]
1a000c7c:	b153      	cbz	r3, 1a000c94 <xQueueGenericSend+0x74>
1a000c7e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c82:	f383 8811 	msr	BASEPRI, r3
1a000c86:	f3bf 8f6f 	isb	sy
1a000c8a:	f3bf 8f4f 	dsb	sy
1a000c8e:	e7fe      	b.n	1a000c8e <xQueueGenericSend+0x6e>
1a000c90:	2500      	movs	r5, #0
1a000c92:	e03a      	b.n	1a000d0a <xQueueGenericSend+0xea>
1a000c94:	2500      	movs	r5, #0
1a000c96:	e038      	b.n	1a000d0a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000c98:	4632      	mov	r2, r6
1a000c9a:	4639      	mov	r1, r7
1a000c9c:	4620      	mov	r0, r4
1a000c9e:	f7ff fe79 	bl	1a000994 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000ca4:	b94b      	cbnz	r3, 1a000cba <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a000ca6:	b1a8      	cbz	r0, 1a000cd4 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a000ca8:	4b3b      	ldr	r3, [pc, #236]	; (1a000d98 <xQueueGenericSend+0x178>)
1a000caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cae:	601a      	str	r2, [r3, #0]
1a000cb0:	f3bf 8f4f 	dsb	sy
1a000cb4:	f3bf 8f6f 	isb	sy
1a000cb8:	e00c      	b.n	1a000cd4 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000cba:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000cbe:	f000 ff0b 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a000cc2:	b138      	cbz	r0, 1a000cd4 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a000cc4:	4b34      	ldr	r3, [pc, #208]	; (1a000d98 <xQueueGenericSend+0x178>)
1a000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000cca:	601a      	str	r2, [r3, #0]
1a000ccc:	f3bf 8f4f 	dsb	sy
1a000cd0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000cd4:	f001 faf0 	bl	1a0022b8 <vPortExitCritical>
				return pdPASS;
1a000cd8:	2001      	movs	r0, #1
}
1a000cda:	b005      	add	sp, #20
1a000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a000cde:	f001 faeb 	bl	1a0022b8 <vPortExitCritical>
					return errQUEUE_FULL;
1a000ce2:	2000      	movs	r0, #0
1a000ce4:	e7f9      	b.n	1a000cda <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000ce6:	a802      	add	r0, sp, #8
1a000ce8:	f000 ff3c 	bl	1a001b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000cec:	2501      	movs	r5, #1
1a000cee:	e019      	b.n	1a000d24 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a000cf0:	2300      	movs	r3, #0
1a000cf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000cf6:	e021      	b.n	1a000d3c <xQueueGenericSend+0x11c>
1a000cf8:	2300      	movs	r3, #0
1a000cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000cfe:	e023      	b.n	1a000d48 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a000d00:	4620      	mov	r0, r4
1a000d02:	f7ff fe94 	bl	1a000a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000d06:	f000 fd5d 	bl	1a0017c4 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000d0a:	f001 fab3 	bl	1a002274 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000d0e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000d12:	429a      	cmp	r2, r3
1a000d14:	d3c0      	bcc.n	1a000c98 <xQueueGenericSend+0x78>
1a000d16:	2e02      	cmp	r6, #2
1a000d18:	d0be      	beq.n	1a000c98 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000d1a:	9b01      	ldr	r3, [sp, #4]
1a000d1c:	2b00      	cmp	r3, #0
1a000d1e:	d0de      	beq.n	1a000cde <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a000d20:	2d00      	cmp	r5, #0
1a000d22:	d0e0      	beq.n	1a000ce6 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a000d24:	f001 fac8 	bl	1a0022b8 <vPortExitCritical>
		vTaskSuspendAll();
1a000d28:	f000 fcb2 	bl	1a001690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000d2c:	f001 faa2 	bl	1a002274 <vPortEnterCritical>
1a000d30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000d34:	b25b      	sxtb	r3, r3
1a000d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d3a:	d0d9      	beq.n	1a000cf0 <xQueueGenericSend+0xd0>
1a000d3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000d40:	b25b      	sxtb	r3, r3
1a000d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000d46:	d0d7      	beq.n	1a000cf8 <xQueueGenericSend+0xd8>
1a000d48:	f001 fab6 	bl	1a0022b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000d4c:	a901      	add	r1, sp, #4
1a000d4e:	a802      	add	r0, sp, #8
1a000d50:	f000 ff14 	bl	1a001b7c <xTaskCheckForTimeOut>
1a000d54:	b9c8      	cbnz	r0, 1a000d8a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000d56:	4620      	mov	r0, r4
1a000d58:	f7ff fe00 	bl	1a00095c <prvIsQueueFull>
1a000d5c:	2800      	cmp	r0, #0
1a000d5e:	d0cf      	beq.n	1a000d00 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000d60:	9901      	ldr	r1, [sp, #4]
1a000d62:	f104 0010 	add.w	r0, r4, #16
1a000d66:	f000 fe83 	bl	1a001a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000d6a:	4620      	mov	r0, r4
1a000d6c:	f7ff fe5f 	bl	1a000a2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000d70:	f000 fd28 	bl	1a0017c4 <xTaskResumeAll>
1a000d74:	2800      	cmp	r0, #0
1a000d76:	d1c8      	bne.n	1a000d0a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a000d78:	4b07      	ldr	r3, [pc, #28]	; (1a000d98 <xQueueGenericSend+0x178>)
1a000d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d7e:	601a      	str	r2, [r3, #0]
1a000d80:	f3bf 8f4f 	dsb	sy
1a000d84:	f3bf 8f6f 	isb	sy
1a000d88:	e7bf      	b.n	1a000d0a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a000d8a:	4620      	mov	r0, r4
1a000d8c:	f7ff fe4f 	bl	1a000a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000d90:	f000 fd18 	bl	1a0017c4 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000d94:	2000      	movs	r0, #0
1a000d96:	e7a0      	b.n	1a000cda <xQueueGenericSend+0xba>
1a000d98:	e000ed04 	.word	0xe000ed04

1a000d9c <xQueueGenericSendFromISR>:
{
1a000d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000da0:	b160      	cbz	r0, 1a000dbc <xQueueGenericSendFromISR+0x20>
1a000da2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000da4:	b999      	cbnz	r1, 1a000dce <xQueueGenericSendFromISR+0x32>
1a000da6:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a000da8:	b188      	cbz	r0, 1a000dce <xQueueGenericSendFromISR+0x32>
1a000daa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dae:	f383 8811 	msr	BASEPRI, r3
1a000db2:	f3bf 8f6f 	isb	sy
1a000db6:	f3bf 8f4f 	dsb	sy
1a000dba:	e7fe      	b.n	1a000dba <xQueueGenericSendFromISR+0x1e>
1a000dbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dc0:	f383 8811 	msr	BASEPRI, r3
1a000dc4:	f3bf 8f6f 	isb	sy
1a000dc8:	f3bf 8f4f 	dsb	sy
1a000dcc:	e7fe      	b.n	1a000dcc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000dce:	2b02      	cmp	r3, #2
1a000dd0:	d10b      	bne.n	1a000dea <xQueueGenericSendFromISR+0x4e>
1a000dd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a000dd4:	2801      	cmp	r0, #1
1a000dd6:	d008      	beq.n	1a000dea <xQueueGenericSendFromISR+0x4e>
1a000dd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ddc:	f383 8811 	msr	BASEPRI, r3
1a000de0:	f3bf 8f6f 	isb	sy
1a000de4:	f3bf 8f4f 	dsb	sy
1a000de8:	e7fe      	b.n	1a000de8 <xQueueGenericSendFromISR+0x4c>
1a000dea:	461f      	mov	r7, r3
1a000dec:	4690      	mov	r8, r2
1a000dee:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000df0:	f001 fb6a 	bl	1a0024c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000df4:	f3ef 8611 	mrs	r6, BASEPRI
1a000df8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000dfc:	f383 8811 	msr	BASEPRI, r3
1a000e00:	f3bf 8f6f 	isb	sy
1a000e04:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000e08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000e0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000e0c:	429a      	cmp	r2, r3
1a000e0e:	d303      	bcc.n	1a000e18 <xQueueGenericSendFromISR+0x7c>
1a000e10:	2f02      	cmp	r7, #2
1a000e12:	d001      	beq.n	1a000e18 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a000e14:	2000      	movs	r0, #0
1a000e16:	e00f      	b.n	1a000e38 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a000e18:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000e1c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000e1e:	463a      	mov	r2, r7
1a000e20:	4649      	mov	r1, r9
1a000e22:	4620      	mov	r0, r4
1a000e24:	f7ff fdb6 	bl	1a000994 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000e28:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000e2c:	d008      	beq.n	1a000e40 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000e2e:	1c6b      	adds	r3, r5, #1
1a000e30:	b25b      	sxtb	r3, r3
1a000e32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000e36:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000e38:	f386 8811 	msr	BASEPRI, r6
}
1a000e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000e42:	b15b      	cbz	r3, 1a000e5c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e44:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000e48:	f000 fe46 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a000e4c:	b140      	cbz	r0, 1a000e60 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a000e4e:	f1b8 0f00 	cmp.w	r8, #0
1a000e52:	d007      	beq.n	1a000e64 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000e54:	2001      	movs	r0, #1
1a000e56:	f8c8 0000 	str.w	r0, [r8]
1a000e5a:	e7ed      	b.n	1a000e38 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a000e5c:	2001      	movs	r0, #1
1a000e5e:	e7eb      	b.n	1a000e38 <xQueueGenericSendFromISR+0x9c>
1a000e60:	2001      	movs	r0, #1
1a000e62:	e7e9      	b.n	1a000e38 <xQueueGenericSendFromISR+0x9c>
1a000e64:	2001      	movs	r0, #1
1a000e66:	e7e7      	b.n	1a000e38 <xQueueGenericSendFromISR+0x9c>

1a000e68 <xQueueReceive>:
{
1a000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000e6a:	b085      	sub	sp, #20
1a000e6c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000e6e:	b160      	cbz	r0, 1a000e8a <xQueueReceive+0x22>
1a000e70:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000e72:	b999      	cbnz	r1, 1a000e9c <xQueueReceive+0x34>
1a000e74:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000e76:	b18b      	cbz	r3, 1a000e9c <xQueueReceive+0x34>
	__asm volatile
1a000e78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e7c:	f383 8811 	msr	BASEPRI, r3
1a000e80:	f3bf 8f6f 	isb	sy
1a000e84:	f3bf 8f4f 	dsb	sy
1a000e88:	e7fe      	b.n	1a000e88 <xQueueReceive+0x20>
1a000e8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e8e:	f383 8811 	msr	BASEPRI, r3
1a000e92:	f3bf 8f6f 	isb	sy
1a000e96:	f3bf 8f4f 	dsb	sy
1a000e9a:	e7fe      	b.n	1a000e9a <xQueueReceive+0x32>
1a000e9c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e9e:	f000 feb3 	bl	1a001c08 <xTaskGetSchedulerState>
1a000ea2:	b950      	cbnz	r0, 1a000eba <xQueueReceive+0x52>
1a000ea4:	9b01      	ldr	r3, [sp, #4]
1a000ea6:	b153      	cbz	r3, 1a000ebe <xQueueReceive+0x56>
1a000ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eac:	f383 8811 	msr	BASEPRI, r3
1a000eb0:	f3bf 8f6f 	isb	sy
1a000eb4:	f3bf 8f4f 	dsb	sy
1a000eb8:	e7fe      	b.n	1a000eb8 <xQueueReceive+0x50>
1a000eba:	2600      	movs	r6, #0
1a000ebc:	e03e      	b.n	1a000f3c <xQueueReceive+0xd4>
1a000ebe:	2600      	movs	r6, #0
1a000ec0:	e03c      	b.n	1a000f3c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000ec2:	4639      	mov	r1, r7
1a000ec4:	4620      	mov	r0, r4
1a000ec6:	f7ff fda0 	bl	1a000a0a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000eca:	3d01      	subs	r5, #1
1a000ecc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000ece:	6923      	ldr	r3, [r4, #16]
1a000ed0:	b923      	cbnz	r3, 1a000edc <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a000ed2:	f001 f9f1 	bl	1a0022b8 <vPortExitCritical>
				return pdPASS;
1a000ed6:	2001      	movs	r0, #1
}
1a000ed8:	b005      	add	sp, #20
1a000eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000edc:	f104 0010 	add.w	r0, r4, #16
1a000ee0:	f000 fdfa 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a000ee4:	2800      	cmp	r0, #0
1a000ee6:	d0f4      	beq.n	1a000ed2 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a000ee8:	4b34      	ldr	r3, [pc, #208]	; (1a000fbc <xQueueReceive+0x154>)
1a000eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000eee:	601a      	str	r2, [r3, #0]
1a000ef0:	f3bf 8f4f 	dsb	sy
1a000ef4:	f3bf 8f6f 	isb	sy
1a000ef8:	e7eb      	b.n	1a000ed2 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a000efa:	f001 f9dd 	bl	1a0022b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000efe:	2000      	movs	r0, #0
1a000f00:	e7ea      	b.n	1a000ed8 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000f02:	a802      	add	r0, sp, #8
1a000f04:	f000 fe2e 	bl	1a001b64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000f08:	2601      	movs	r6, #1
1a000f0a:	e021      	b.n	1a000f50 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a000f0c:	2300      	movs	r3, #0
1a000f0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000f12:	e029      	b.n	1a000f68 <xQueueReceive+0x100>
1a000f14:	2300      	movs	r3, #0
1a000f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000f1a:	e02b      	b.n	1a000f74 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a000f1c:	4620      	mov	r0, r4
1a000f1e:	f7ff fd86 	bl	1a000a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000f22:	f000 fc4f 	bl	1a0017c4 <xTaskResumeAll>
1a000f26:	e009      	b.n	1a000f3c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a000f28:	4620      	mov	r0, r4
1a000f2a:	f7ff fd80 	bl	1a000a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f2e:	f000 fc49 	bl	1a0017c4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f32:	4620      	mov	r0, r4
1a000f34:	f7ff fd21 	bl	1a00097a <prvIsQueueEmpty>
1a000f38:	2800      	cmp	r0, #0
1a000f3a:	d13d      	bne.n	1a000fb8 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a000f3c:	f001 f99a 	bl	1a002274 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000f40:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000f42:	2d00      	cmp	r5, #0
1a000f44:	d1bd      	bne.n	1a000ec2 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000f46:	9b01      	ldr	r3, [sp, #4]
1a000f48:	2b00      	cmp	r3, #0
1a000f4a:	d0d6      	beq.n	1a000efa <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a000f4c:	2e00      	cmp	r6, #0
1a000f4e:	d0d8      	beq.n	1a000f02 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a000f50:	f001 f9b2 	bl	1a0022b8 <vPortExitCritical>
		vTaskSuspendAll();
1a000f54:	f000 fb9c 	bl	1a001690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000f58:	f001 f98c 	bl	1a002274 <vPortEnterCritical>
1a000f5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f60:	b25b      	sxtb	r3, r3
1a000f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f66:	d0d1      	beq.n	1a000f0c <xQueueReceive+0xa4>
1a000f68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f6c:	b25b      	sxtb	r3, r3
1a000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f72:	d0cf      	beq.n	1a000f14 <xQueueReceive+0xac>
1a000f74:	f001 f9a0 	bl	1a0022b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000f78:	a901      	add	r1, sp, #4
1a000f7a:	a802      	add	r0, sp, #8
1a000f7c:	f000 fdfe 	bl	1a001b7c <xTaskCheckForTimeOut>
1a000f80:	2800      	cmp	r0, #0
1a000f82:	d1d1      	bne.n	1a000f28 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f84:	4620      	mov	r0, r4
1a000f86:	f7ff fcf8 	bl	1a00097a <prvIsQueueEmpty>
1a000f8a:	2800      	cmp	r0, #0
1a000f8c:	d0c6      	beq.n	1a000f1c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000f8e:	9901      	ldr	r1, [sp, #4]
1a000f90:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f94:	f000 fd6c 	bl	1a001a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000f98:	4620      	mov	r0, r4
1a000f9a:	f7ff fd48 	bl	1a000a2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000f9e:	f000 fc11 	bl	1a0017c4 <xTaskResumeAll>
1a000fa2:	2800      	cmp	r0, #0
1a000fa4:	d1ca      	bne.n	1a000f3c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a000fa6:	4b05      	ldr	r3, [pc, #20]	; (1a000fbc <xQueueReceive+0x154>)
1a000fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000fac:	601a      	str	r2, [r3, #0]
1a000fae:	f3bf 8f4f 	dsb	sy
1a000fb2:	f3bf 8f6f 	isb	sy
1a000fb6:	e7c1      	b.n	1a000f3c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a000fb8:	2000      	movs	r0, #0
1a000fba:	e78d      	b.n	1a000ed8 <xQueueReceive+0x70>
1a000fbc:	e000ed04 	.word	0xe000ed04

1a000fc0 <xQueueReceiveFromISR>:
{
1a000fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000fc4:	b160      	cbz	r0, 1a000fe0 <xQueueReceiveFromISR+0x20>
1a000fc6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000fc8:	b999      	cbnz	r1, 1a000ff2 <xQueueReceiveFromISR+0x32>
1a000fca:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000fcc:	b18b      	cbz	r3, 1a000ff2 <xQueueReceiveFromISR+0x32>
1a000fce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fd2:	f383 8811 	msr	BASEPRI, r3
1a000fd6:	f3bf 8f6f 	isb	sy
1a000fda:	f3bf 8f4f 	dsb	sy
1a000fde:	e7fe      	b.n	1a000fde <xQueueReceiveFromISR+0x1e>
1a000fe0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fe4:	f383 8811 	msr	BASEPRI, r3
1a000fe8:	f3bf 8f6f 	isb	sy
1a000fec:	f3bf 8f4f 	dsb	sy
1a000ff0:	e7fe      	b.n	1a000ff0 <xQueueReceiveFromISR+0x30>
1a000ff2:	4617      	mov	r7, r2
1a000ff4:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000ff6:	f001 fa67 	bl	1a0024c8 <vPortValidateInterruptPriority>
	__asm volatile
1a000ffa:	f3ef 8611 	mrs	r6, BASEPRI
1a000ffe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001002:	f383 8811 	msr	BASEPRI, r3
1a001006:	f3bf 8f6f 	isb	sy
1a00100a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a00100e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001012:	f1b8 0f00 	cmp.w	r8, #0
1a001016:	d01d      	beq.n	1a001054 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
1a001018:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
1a00101c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00101e:	4649      	mov	r1, r9
1a001020:	4620      	mov	r0, r4
1a001022:	f7ff fcf2 	bl	1a000a0a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001026:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a00102a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
1a00102c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001030:	d005      	beq.n	1a00103e <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1a001032:	1c6b      	adds	r3, r5, #1
1a001034:	b25b      	sxtb	r3, r3
1a001036:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
1a00103a:	2001      	movs	r0, #1
1a00103c:	e00b      	b.n	1a001056 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00103e:	6923      	ldr	r3, [r4, #16]
1a001040:	b16b      	cbz	r3, 1a00105e <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001042:	f104 0010 	add.w	r0, r4, #16
1a001046:	f000 fd47 	bl	1a001ad8 <xTaskRemoveFromEventList>
1a00104a:	b150      	cbz	r0, 1a001062 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
1a00104c:	b15f      	cbz	r7, 1a001066 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
1a00104e:	2001      	movs	r0, #1
1a001050:	6038      	str	r0, [r7, #0]
1a001052:	e000      	b.n	1a001056 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
1a001054:	2000      	movs	r0, #0
	__asm volatile
1a001056:	f386 8811 	msr	BASEPRI, r6
}
1a00105a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
1a00105e:	2001      	movs	r0, #1
1a001060:	e7f9      	b.n	1a001056 <xQueueReceiveFromISR+0x96>
1a001062:	2001      	movs	r0, #1
1a001064:	e7f7      	b.n	1a001056 <xQueueReceiveFromISR+0x96>
1a001066:	2001      	movs	r0, #1
1a001068:	e7f5      	b.n	1a001056 <xQueueReceiveFromISR+0x96>
1a00106a:	Address 0x000000001a00106a is out of bounds.


1a00106c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00106c:	2300      	movs	r3, #0
1a00106e:	2b07      	cmp	r3, #7
1a001070:	d80c      	bhi.n	1a00108c <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001072:	4a07      	ldr	r2, [pc, #28]	; (1a001090 <vQueueAddToRegistry+0x24>)
1a001074:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a001078:	b10a      	cbz	r2, 1a00107e <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00107a:	3301      	adds	r3, #1
1a00107c:	e7f7      	b.n	1a00106e <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a00107e:	4a04      	ldr	r2, [pc, #16]	; (1a001090 <vQueueAddToRegistry+0x24>)
1a001080:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001084:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001088:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00108a:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a00108c:	4770      	bx	lr
1a00108e:	bf00      	nop
1a001090:	10002c20 	.word	0x10002c20

1a001094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001094:	b570      	push	{r4, r5, r6, lr}
1a001096:	4604      	mov	r4, r0
1a001098:	460d      	mov	r5, r1
1a00109a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a00109c:	f001 f8ea 	bl	1a002274 <vPortEnterCritical>
1a0010a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0010a4:	b25b      	sxtb	r3, r3
1a0010a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010aa:	d00d      	beq.n	1a0010c8 <vQueueWaitForMessageRestricted+0x34>
1a0010ac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0010b0:	b25b      	sxtb	r3, r3
1a0010b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0010b6:	d00b      	beq.n	1a0010d0 <vQueueWaitForMessageRestricted+0x3c>
1a0010b8:	f001 f8fe 	bl	1a0022b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0010bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0010be:	b15b      	cbz	r3, 1a0010d8 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0010c0:	4620      	mov	r0, r4
1a0010c2:	f7ff fcb4 	bl	1a000a2e <prvUnlockQueue>
	}
1a0010c6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0010c8:	2300      	movs	r3, #0
1a0010ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0010ce:	e7ed      	b.n	1a0010ac <vQueueWaitForMessageRestricted+0x18>
1a0010d0:	2300      	movs	r3, #0
1a0010d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0010d6:	e7ef      	b.n	1a0010b8 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0010d8:	4632      	mov	r2, r6
1a0010da:	4629      	mov	r1, r5
1a0010dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010e0:	f000 fcde 	bl	1a001aa0 <vTaskPlaceOnEventListRestricted>
1a0010e4:	e7ec      	b.n	1a0010c0 <vQueueWaitForMessageRestricted+0x2c>

1a0010e6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0010e6:	f100 0308 	add.w	r3, r0, #8
1a0010ea:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0010ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0010f0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0010f2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0010f4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0010f6:	2300      	movs	r3, #0
1a0010f8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0010fa:	4770      	bx	lr

1a0010fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0010fc:	2300      	movs	r3, #0
1a0010fe:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001100:	4770      	bx	lr

1a001102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001102:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001104:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001106:	689a      	ldr	r2, [r3, #8]
1a001108:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00110a:	689a      	ldr	r2, [r3, #8]
1a00110c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00110e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001110:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001112:	6803      	ldr	r3, [r0, #0]
1a001114:	3301      	adds	r3, #1
1a001116:	6003      	str	r3, [r0, #0]
}
1a001118:	4770      	bx	lr

1a00111a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00111a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00111c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00111e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001122:	d002      	beq.n	1a00112a <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001124:	f100 0208 	add.w	r2, r0, #8
1a001128:	e002      	b.n	1a001130 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00112a:	6902      	ldr	r2, [r0, #16]
1a00112c:	e004      	b.n	1a001138 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00112e:	461a      	mov	r2, r3
1a001130:	6853      	ldr	r3, [r2, #4]
1a001132:	681c      	ldr	r4, [r3, #0]
1a001134:	42ac      	cmp	r4, r5
1a001136:	d9fa      	bls.n	1a00112e <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001138:	6853      	ldr	r3, [r2, #4]
1a00113a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a00113c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a00113e:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001140:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001142:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001144:	6803      	ldr	r3, [r0, #0]
1a001146:	3301      	adds	r3, #1
1a001148:	6003      	str	r3, [r0, #0]
}
1a00114a:	bc30      	pop	{r4, r5}
1a00114c:	4770      	bx	lr

1a00114e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00114e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001150:	6842      	ldr	r2, [r0, #4]
1a001152:	6881      	ldr	r1, [r0, #8]
1a001154:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a001156:	6882      	ldr	r2, [r0, #8]
1a001158:	6841      	ldr	r1, [r0, #4]
1a00115a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a00115c:	685a      	ldr	r2, [r3, #4]
1a00115e:	4282      	cmp	r2, r0
1a001160:	d006      	beq.n	1a001170 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001162:	2200      	movs	r2, #0
1a001164:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a001166:	681a      	ldr	r2, [r3, #0]
1a001168:	3a01      	subs	r2, #1
1a00116a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a00116c:	6818      	ldr	r0, [r3, #0]
}
1a00116e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001170:	6882      	ldr	r2, [r0, #8]
1a001172:	605a      	str	r2, [r3, #4]
1a001174:	e7f5      	b.n	1a001162 <uxListRemove+0x14>
1a001176:	Address 0x000000001a001176 is out of bounds.


1a001178 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001178:	4b03      	ldr	r3, [pc, #12]	; (1a001188 <vApplicationGetIdleTaskMemory+0x10>)
1a00117a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a00117c:	4b03      	ldr	r3, [pc, #12]	; (1a00118c <vApplicationGetIdleTaskMemory+0x14>)
1a00117e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001180:	235a      	movs	r3, #90	; 0x5a
1a001182:	6013      	str	r3, [r2, #0]
}
1a001184:	4770      	bx	lr
1a001186:	bf00      	nop
1a001188:	100028bc 	.word	0x100028bc
1a00118c:	100021b4 	.word	0x100021b4

1a001190 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001190:	4b03      	ldr	r3, [pc, #12]	; (1a0011a0 <vApplicationGetTimerTaskMemory+0x10>)
1a001192:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001194:	4b03      	ldr	r3, [pc, #12]	; (1a0011a4 <vApplicationGetTimerTaskMemory+0x14>)
1a001196:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001198:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a00119c:	6013      	str	r3, [r2, #0]
1a00119e:	4770      	bx	lr
1a0011a0:	1000291c 	.word	0x1000291c
1a0011a4:	1000231c 	.word	0x1000231c

1a0011a8 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0011a8:	b510      	push	{r4, lr}
1a0011aa:	b082      	sub	sp, #8
1a0011ac:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0011ae:	9001      	str	r0, [sp, #4]
1a0011b0:	2300      	movs	r3, #0
1a0011b2:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0011b4:	f001 f85e 	bl	1a002274 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0011b8:	9901      	ldr	r1, [sp, #4]
1a0011ba:	4622      	mov	r2, r4
1a0011bc:	4804      	ldr	r0, [pc, #16]	; (1a0011d0 <vAssertCalled+0x28>)
1a0011be:	f003 f85f 	bl	1a004280 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a0011c2:	9b00      	ldr	r3, [sp, #0]
1a0011c4:	2b00      	cmp	r3, #0
1a0011c6:	d0fc      	beq.n	1a0011c2 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a0011c8:	f001 f876 	bl	1a0022b8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a0011cc:	b002      	add	sp, #8
1a0011ce:	bd10      	pop	{r4, pc}
1a0011d0:	1a004d30 	.word	0x1a004d30

1a0011d4 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0011d4:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0011d6:	4804      	ldr	r0, [pc, #16]	; (1a0011e8 <vApplicationMallocFailedHook+0x14>)
1a0011d8:	f003 f8c6 	bl	1a004368 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0011dc:	4903      	ldr	r1, [pc, #12]	; (1a0011ec <vApplicationMallocFailedHook+0x18>)
1a0011de:	202c      	movs	r0, #44	; 0x2c
1a0011e0:	f7ff ffe2 	bl	1a0011a8 <vAssertCalled>
}
1a0011e4:	bd08      	pop	{r3, pc}
1a0011e6:	bf00      	nop
1a0011e8:	1a004cbc 	.word	0x1a004cbc
1a0011ec:	1a004ce0 	.word	0x1a004ce0

1a0011f0 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0011f0:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0011f2:	4804      	ldr	r0, [pc, #16]	; (1a001204 <vApplicationStackOverflowHook+0x14>)
1a0011f4:	f003 f844 	bl	1a004280 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0011f8:	4903      	ldr	r1, [pc, #12]	; (1a001208 <vApplicationStackOverflowHook+0x18>)
1a0011fa:	2050      	movs	r0, #80	; 0x50
1a0011fc:	f7ff ffd4 	bl	1a0011a8 <vAssertCalled>
}
1a001200:	bd08      	pop	{r3, pc}
1a001202:	bf00      	nop
1a001204:	1a004d00 	.word	0x1a004d00
1a001208:	1a004ce0 	.word	0x1a004ce0

1a00120c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a00120c:	4b08      	ldr	r3, [pc, #32]	; (1a001230 <prvResetNextTaskUnblockTime+0x24>)
1a00120e:	681b      	ldr	r3, [r3, #0]
1a001210:	681b      	ldr	r3, [r3, #0]
1a001212:	b13b      	cbz	r3, 1a001224 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001214:	4b06      	ldr	r3, [pc, #24]	; (1a001230 <prvResetNextTaskUnblockTime+0x24>)
1a001216:	681b      	ldr	r3, [r3, #0]
1a001218:	68db      	ldr	r3, [r3, #12]
1a00121a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a00121c:	685a      	ldr	r2, [r3, #4]
1a00121e:	4b05      	ldr	r3, [pc, #20]	; (1a001234 <prvResetNextTaskUnblockTime+0x28>)
1a001220:	601a      	str	r2, [r3, #0]
	}
}
1a001222:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001224:	4b03      	ldr	r3, [pc, #12]	; (1a001234 <prvResetNextTaskUnblockTime+0x28>)
1a001226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00122a:	601a      	str	r2, [r3, #0]
1a00122c:	4770      	bx	lr
1a00122e:	bf00      	nop
1a001230:	10002980 	.word	0x10002980
1a001234:	10002a54 	.word	0x10002a54

1a001238 <prvInitialiseNewTask>:
{
1a001238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00123c:	4681      	mov	r9, r0
1a00123e:	460d      	mov	r5, r1
1a001240:	4617      	mov	r7, r2
1a001242:	469a      	mov	sl, r3
1a001244:	9e08      	ldr	r6, [sp, #32]
1a001246:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a00124a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a00124c:	0092      	lsls	r2, r2, #2
1a00124e:	21a5      	movs	r1, #165	; 0xa5
1a001250:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001252:	f002 ff64 	bl	1a00411e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001256:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001258:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a00125c:	3a01      	subs	r2, #1
1a00125e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001262:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001266:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001268:	2300      	movs	r3, #0
1a00126a:	2b0f      	cmp	r3, #15
1a00126c:	d807      	bhi.n	1a00127e <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a00126e:	5ce9      	ldrb	r1, [r5, r3]
1a001270:	18e2      	adds	r2, r4, r3
1a001272:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001276:	5cea      	ldrb	r2, [r5, r3]
1a001278:	b10a      	cbz	r2, 1a00127e <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00127a:	3301      	adds	r3, #1
1a00127c:	e7f5      	b.n	1a00126a <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a00127e:	2300      	movs	r3, #0
1a001280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001284:	2e06      	cmp	r6, #6
1a001286:	d900      	bls.n	1a00128a <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001288:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a00128a:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a00128c:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a00128e:	2500      	movs	r5, #0
1a001290:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001292:	1d20      	adds	r0, r4, #4
1a001294:	f7ff ff32 	bl	1a0010fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001298:	f104 0018 	add.w	r0, r4, #24
1a00129c:	f7ff ff2e 	bl	1a0010fc <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0012a0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0012a2:	f1c6 0607 	rsb	r6, r6, #7
1a0012a6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0012a8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0012aa:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0012ac:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0012b0:	4652      	mov	r2, sl
1a0012b2:	4649      	mov	r1, r9
1a0012b4:	4638      	mov	r0, r7
1a0012b6:	f000 ffb5 	bl	1a002224 <pxPortInitialiseStack>
1a0012ba:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a0012bc:	f1b8 0f00 	cmp.w	r8, #0
1a0012c0:	d001      	beq.n	1a0012c6 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a0012c2:	f8c8 4000 	str.w	r4, [r8]
}
1a0012c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0012ca:	Address 0x000000001a0012ca is out of bounds.


1a0012cc <prvInitialiseTaskLists>:
{
1a0012cc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0012ce:	2400      	movs	r4, #0
1a0012d0:	e007      	b.n	1a0012e2 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a0012d2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0012d6:	0093      	lsls	r3, r2, #2
1a0012d8:	480e      	ldr	r0, [pc, #56]	; (1a001314 <prvInitialiseTaskLists+0x48>)
1a0012da:	4418      	add	r0, r3
1a0012dc:	f7ff ff03 	bl	1a0010e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a0012e0:	3401      	adds	r4, #1
1a0012e2:	2c06      	cmp	r4, #6
1a0012e4:	d9f5      	bls.n	1a0012d2 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a0012e6:	4d0c      	ldr	r5, [pc, #48]	; (1a001318 <prvInitialiseTaskLists+0x4c>)
1a0012e8:	4628      	mov	r0, r5
1a0012ea:	f7ff fefc 	bl	1a0010e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0012ee:	4c0b      	ldr	r4, [pc, #44]	; (1a00131c <prvInitialiseTaskLists+0x50>)
1a0012f0:	4620      	mov	r0, r4
1a0012f2:	f7ff fef8 	bl	1a0010e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0012f6:	480a      	ldr	r0, [pc, #40]	; (1a001320 <prvInitialiseTaskLists+0x54>)
1a0012f8:	f7ff fef5 	bl	1a0010e6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0012fc:	4809      	ldr	r0, [pc, #36]	; (1a001324 <prvInitialiseTaskLists+0x58>)
1a0012fe:	f7ff fef2 	bl	1a0010e6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001302:	4809      	ldr	r0, [pc, #36]	; (1a001328 <prvInitialiseTaskLists+0x5c>)
1a001304:	f7ff feef 	bl	1a0010e6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001308:	4b08      	ldr	r3, [pc, #32]	; (1a00132c <prvInitialiseTaskLists+0x60>)
1a00130a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a00130c:	4b08      	ldr	r3, [pc, #32]	; (1a001330 <prvInitialiseTaskLists+0x64>)
1a00130e:	601c      	str	r4, [r3, #0]
}
1a001310:	bd38      	pop	{r3, r4, r5, pc}
1a001312:	bf00      	nop
1a001314:	10002988 	.word	0x10002988
1a001318:	10002a2c 	.word	0x10002a2c
1a00131c:	10002a40 	.word	0x10002a40
1a001320:	10002a5c 	.word	0x10002a5c
1a001324:	10002a88 	.word	0x10002a88
1a001328:	10002a74 	.word	0x10002a74
1a00132c:	10002980 	.word	0x10002980
1a001330:	10002984 	.word	0x10002984

1a001334 <prvAddNewTaskToReadyList>:
{
1a001334:	b510      	push	{r4, lr}
1a001336:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001338:	f000 ff9c 	bl	1a002274 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a00133c:	4a21      	ldr	r2, [pc, #132]	; (1a0013c4 <prvAddNewTaskToReadyList+0x90>)
1a00133e:	6813      	ldr	r3, [r2, #0]
1a001340:	3301      	adds	r3, #1
1a001342:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001344:	4b20      	ldr	r3, [pc, #128]	; (1a0013c8 <prvAddNewTaskToReadyList+0x94>)
1a001346:	681b      	ldr	r3, [r3, #0]
1a001348:	b15b      	cbz	r3, 1a001362 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a00134a:	4b20      	ldr	r3, [pc, #128]	; (1a0013cc <prvAddNewTaskToReadyList+0x98>)
1a00134c:	681b      	ldr	r3, [r3, #0]
1a00134e:	b96b      	cbnz	r3, 1a00136c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001350:	4b1d      	ldr	r3, [pc, #116]	; (1a0013c8 <prvAddNewTaskToReadyList+0x94>)
1a001352:	681b      	ldr	r3, [r3, #0]
1a001354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001358:	429a      	cmp	r2, r3
1a00135a:	d807      	bhi.n	1a00136c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a00135c:	4b1a      	ldr	r3, [pc, #104]	; (1a0013c8 <prvAddNewTaskToReadyList+0x94>)
1a00135e:	601c      	str	r4, [r3, #0]
1a001360:	e004      	b.n	1a00136c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001362:	4b19      	ldr	r3, [pc, #100]	; (1a0013c8 <prvAddNewTaskToReadyList+0x94>)
1a001364:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001366:	6813      	ldr	r3, [r2, #0]
1a001368:	2b01      	cmp	r3, #1
1a00136a:	d027      	beq.n	1a0013bc <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a00136c:	4a18      	ldr	r2, [pc, #96]	; (1a0013d0 <prvAddNewTaskToReadyList+0x9c>)
1a00136e:	6813      	ldr	r3, [r2, #0]
1a001370:	3301      	adds	r3, #1
1a001372:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001374:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001378:	2201      	movs	r2, #1
1a00137a:	409a      	lsls	r2, r3
1a00137c:	4915      	ldr	r1, [pc, #84]	; (1a0013d4 <prvAddNewTaskToReadyList+0xa0>)
1a00137e:	6808      	ldr	r0, [r1, #0]
1a001380:	4302      	orrs	r2, r0
1a001382:	600a      	str	r2, [r1, #0]
1a001384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001388:	009a      	lsls	r2, r3, #2
1a00138a:	1d21      	adds	r1, r4, #4
1a00138c:	4812      	ldr	r0, [pc, #72]	; (1a0013d8 <prvAddNewTaskToReadyList+0xa4>)
1a00138e:	4410      	add	r0, r2
1a001390:	f7ff feb7 	bl	1a001102 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001394:	f000 ff90 	bl	1a0022b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001398:	4b0c      	ldr	r3, [pc, #48]	; (1a0013cc <prvAddNewTaskToReadyList+0x98>)
1a00139a:	681b      	ldr	r3, [r3, #0]
1a00139c:	b16b      	cbz	r3, 1a0013ba <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a00139e:	4b0a      	ldr	r3, [pc, #40]	; (1a0013c8 <prvAddNewTaskToReadyList+0x94>)
1a0013a0:	681b      	ldr	r3, [r3, #0]
1a0013a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0013a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0013a6:	429a      	cmp	r2, r3
1a0013a8:	d207      	bcs.n	1a0013ba <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0013aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0013dc <prvAddNewTaskToReadyList+0xa8>)
1a0013ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013b0:	601a      	str	r2, [r3, #0]
1a0013b2:	f3bf 8f4f 	dsb	sy
1a0013b6:	f3bf 8f6f 	isb	sy
}
1a0013ba:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a0013bc:	f7ff ff86 	bl	1a0012cc <prvInitialiseTaskLists>
1a0013c0:	e7d4      	b.n	1a00136c <prvAddNewTaskToReadyList+0x38>
1a0013c2:	bf00      	nop
1a0013c4:	10002a14 	.word	0x10002a14
1a0013c8:	1000297c 	.word	0x1000297c
1a0013cc:	10002a70 	.word	0x10002a70
1a0013d0:	10002a24 	.word	0x10002a24
1a0013d4:	10002a28 	.word	0x10002a28
1a0013d8:	10002988 	.word	0x10002988
1a0013dc:	e000ed04 	.word	0xe000ed04

1a0013e0 <prvDeleteTCB>:
	{
1a0013e0:	b510      	push	{r4, lr}
1a0013e2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a0013e4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a0013e8:	b933      	cbnz	r3, 1a0013f8 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a0013ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0013ec:	f7ff fa7e 	bl	1a0008ec <vPortFree>
				vPortFree( pxTCB );
1a0013f0:	4620      	mov	r0, r4
1a0013f2:	f7ff fa7b 	bl	1a0008ec <vPortFree>
	}
1a0013f6:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a0013f8:	2b01      	cmp	r3, #1
1a0013fa:	d00a      	beq.n	1a001412 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a0013fc:	2b02      	cmp	r3, #2
1a0013fe:	d0fa      	beq.n	1a0013f6 <prvDeleteTCB+0x16>
	__asm volatile
1a001400:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001404:	f383 8811 	msr	BASEPRI, r3
1a001408:	f3bf 8f6f 	isb	sy
1a00140c:	f3bf 8f4f 	dsb	sy
1a001410:	e7fe      	b.n	1a001410 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001412:	f7ff fa6b 	bl	1a0008ec <vPortFree>
1a001416:	e7ee      	b.n	1a0013f6 <prvDeleteTCB+0x16>

1a001418 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001418:	4b0f      	ldr	r3, [pc, #60]	; (1a001458 <prvCheckTasksWaitingTermination+0x40>)
1a00141a:	681b      	ldr	r3, [r3, #0]
1a00141c:	b1d3      	cbz	r3, 1a001454 <prvCheckTasksWaitingTermination+0x3c>
{
1a00141e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001420:	f000 ff28 	bl	1a002274 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001424:	4b0d      	ldr	r3, [pc, #52]	; (1a00145c <prvCheckTasksWaitingTermination+0x44>)
1a001426:	68db      	ldr	r3, [r3, #12]
1a001428:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00142a:	1d20      	adds	r0, r4, #4
1a00142c:	f7ff fe8f 	bl	1a00114e <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001430:	4a0b      	ldr	r2, [pc, #44]	; (1a001460 <prvCheckTasksWaitingTermination+0x48>)
1a001432:	6813      	ldr	r3, [r2, #0]
1a001434:	3b01      	subs	r3, #1
1a001436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001438:	4a07      	ldr	r2, [pc, #28]	; (1a001458 <prvCheckTasksWaitingTermination+0x40>)
1a00143a:	6813      	ldr	r3, [r2, #0]
1a00143c:	3b01      	subs	r3, #1
1a00143e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001440:	f000 ff3a 	bl	1a0022b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001444:	4620      	mov	r0, r4
1a001446:	f7ff ffcb 	bl	1a0013e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00144a:	4b03      	ldr	r3, [pc, #12]	; (1a001458 <prvCheckTasksWaitingTermination+0x40>)
1a00144c:	681b      	ldr	r3, [r3, #0]
1a00144e:	2b00      	cmp	r3, #0
1a001450:	d1e6      	bne.n	1a001420 <prvCheckTasksWaitingTermination+0x8>
}
1a001452:	bd10      	pop	{r4, pc}
1a001454:	4770      	bx	lr
1a001456:	bf00      	nop
1a001458:	10002a18 	.word	0x10002a18
1a00145c:	10002a88 	.word	0x10002a88
1a001460:	10002a14 	.word	0x10002a14

1a001464 <prvIdleTask>:
{
1a001464:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001466:	f7ff ffd7 	bl	1a001418 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a00146a:	4b06      	ldr	r3, [pc, #24]	; (1a001484 <prvIdleTask+0x20>)
1a00146c:	681b      	ldr	r3, [r3, #0]
1a00146e:	2b01      	cmp	r3, #1
1a001470:	d9f9      	bls.n	1a001466 <prvIdleTask+0x2>
				taskYIELD();
1a001472:	4b05      	ldr	r3, [pc, #20]	; (1a001488 <prvIdleTask+0x24>)
1a001474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001478:	601a      	str	r2, [r3, #0]
1a00147a:	f3bf 8f4f 	dsb	sy
1a00147e:	f3bf 8f6f 	isb	sy
1a001482:	e7f0      	b.n	1a001466 <prvIdleTask+0x2>
1a001484:	10002988 	.word	0x10002988
1a001488:	e000ed04 	.word	0xe000ed04

1a00148c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a00148c:	b570      	push	{r4, r5, r6, lr}
1a00148e:	4604      	mov	r4, r0
1a001490:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001492:	4b1d      	ldr	r3, [pc, #116]	; (1a001508 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001494:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001496:	4b1d      	ldr	r3, [pc, #116]	; (1a00150c <prvAddCurrentTaskToDelayedList+0x80>)
1a001498:	6818      	ldr	r0, [r3, #0]
1a00149a:	3004      	adds	r0, #4
1a00149c:	f7ff fe57 	bl	1a00114e <uxListRemove>
1a0014a0:	b950      	cbnz	r0, 1a0014b8 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0014a2:	4b1a      	ldr	r3, [pc, #104]	; (1a00150c <prvAddCurrentTaskToDelayedList+0x80>)
1a0014a4:	681b      	ldr	r3, [r3, #0]
1a0014a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0014a8:	2301      	movs	r3, #1
1a0014aa:	fa03 f202 	lsl.w	r2, r3, r2
1a0014ae:	4918      	ldr	r1, [pc, #96]	; (1a001510 <prvAddCurrentTaskToDelayedList+0x84>)
1a0014b0:	680b      	ldr	r3, [r1, #0]
1a0014b2:	ea23 0302 	bic.w	r3, r3, r2
1a0014b6:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0014b8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a0014bc:	d013      	beq.n	1a0014e6 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a0014be:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a0014c0:	4b12      	ldr	r3, [pc, #72]	; (1a00150c <prvAddCurrentTaskToDelayedList+0x80>)
1a0014c2:	681b      	ldr	r3, [r3, #0]
1a0014c4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a0014c6:	42a5      	cmp	r5, r4
1a0014c8:	d816      	bhi.n	1a0014f8 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014ca:	4b12      	ldr	r3, [pc, #72]	; (1a001514 <prvAddCurrentTaskToDelayedList+0x88>)
1a0014cc:	6818      	ldr	r0, [r3, #0]
1a0014ce:	4b0f      	ldr	r3, [pc, #60]	; (1a00150c <prvAddCurrentTaskToDelayedList+0x80>)
1a0014d0:	6819      	ldr	r1, [r3, #0]
1a0014d2:	3104      	adds	r1, #4
1a0014d4:	f7ff fe21 	bl	1a00111a <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a0014d8:	4b0f      	ldr	r3, [pc, #60]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0014da:	681b      	ldr	r3, [r3, #0]
1a0014dc:	42a3      	cmp	r3, r4
1a0014de:	d912      	bls.n	1a001506 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a0014e0:	4b0d      	ldr	r3, [pc, #52]	; (1a001518 <prvAddCurrentTaskToDelayedList+0x8c>)
1a0014e2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a0014e4:	e00f      	b.n	1a001506 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0014e6:	2e00      	cmp	r6, #0
1a0014e8:	d0e9      	beq.n	1a0014be <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014ea:	4b08      	ldr	r3, [pc, #32]	; (1a00150c <prvAddCurrentTaskToDelayedList+0x80>)
1a0014ec:	6819      	ldr	r1, [r3, #0]
1a0014ee:	3104      	adds	r1, #4
1a0014f0:	480a      	ldr	r0, [pc, #40]	; (1a00151c <prvAddCurrentTaskToDelayedList+0x90>)
1a0014f2:	f7ff fe06 	bl	1a001102 <vListInsertEnd>
1a0014f6:	e006      	b.n	1a001506 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a0014f8:	4b09      	ldr	r3, [pc, #36]	; (1a001520 <prvAddCurrentTaskToDelayedList+0x94>)
1a0014fa:	6818      	ldr	r0, [r3, #0]
1a0014fc:	4b03      	ldr	r3, [pc, #12]	; (1a00150c <prvAddCurrentTaskToDelayedList+0x80>)
1a0014fe:	6819      	ldr	r1, [r3, #0]
1a001500:	3104      	adds	r1, #4
1a001502:	f7ff fe0a 	bl	1a00111a <vListInsert>
}
1a001506:	bd70      	pop	{r4, r5, r6, pc}
1a001508:	10002a9c 	.word	0x10002a9c
1a00150c:	1000297c 	.word	0x1000297c
1a001510:	10002a28 	.word	0x10002a28
1a001514:	10002980 	.word	0x10002980
1a001518:	10002a54 	.word	0x10002a54
1a00151c:	10002a74 	.word	0x10002a74
1a001520:	10002984 	.word	0x10002984

1a001524 <xTaskCreateStatic>:
	{
1a001524:	b570      	push	{r4, r5, r6, lr}
1a001526:	b086      	sub	sp, #24
1a001528:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00152a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a00152c:	b945      	cbnz	r5, 1a001540 <xTaskCreateStatic+0x1c>
1a00152e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001532:	f383 8811 	msr	BASEPRI, r3
1a001536:	f3bf 8f6f 	isb	sy
1a00153a:	f3bf 8f4f 	dsb	sy
1a00153e:	e7fe      	b.n	1a00153e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001540:	b944      	cbnz	r4, 1a001554 <xTaskCreateStatic+0x30>
1a001542:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001546:	f383 8811 	msr	BASEPRI, r3
1a00154a:	f3bf 8f6f 	isb	sy
1a00154e:	f3bf 8f4f 	dsb	sy
1a001552:	e7fe      	b.n	1a001552 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001554:	2660      	movs	r6, #96	; 0x60
1a001556:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001558:	9e04      	ldr	r6, [sp, #16]
1a00155a:	2e60      	cmp	r6, #96	; 0x60
1a00155c:	d008      	beq.n	1a001570 <xTaskCreateStatic+0x4c>
1a00155e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001562:	f383 8811 	msr	BASEPRI, r3
1a001566:	f3bf 8f6f 	isb	sy
1a00156a:	f3bf 8f4f 	dsb	sy
1a00156e:	e7fe      	b.n	1a00156e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001570:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001572:	2502      	movs	r5, #2
1a001574:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001578:	2500      	movs	r5, #0
1a00157a:	9503      	str	r5, [sp, #12]
1a00157c:	9402      	str	r4, [sp, #8]
1a00157e:	ad05      	add	r5, sp, #20
1a001580:	9501      	str	r5, [sp, #4]
1a001582:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001584:	9500      	str	r5, [sp, #0]
1a001586:	f7ff fe57 	bl	1a001238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a00158a:	4620      	mov	r0, r4
1a00158c:	f7ff fed2 	bl	1a001334 <prvAddNewTaskToReadyList>
	}
1a001590:	9805      	ldr	r0, [sp, #20]
1a001592:	b006      	add	sp, #24
1a001594:	bd70      	pop	{r4, r5, r6, pc}

1a001596 <xTaskCreate>:
	{
1a001596:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00159a:	b085      	sub	sp, #20
1a00159c:	4607      	mov	r7, r0
1a00159e:	4688      	mov	r8, r1
1a0015a0:	4615      	mov	r5, r2
1a0015a2:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015a4:	0090      	lsls	r0, r2, #2
1a0015a6:	f7ff f913 	bl	1a0007d0 <pvPortMalloc>
			if( pxStack != NULL )
1a0015aa:	b308      	cbz	r0, 1a0015f0 <xTaskCreate+0x5a>
1a0015ac:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0015ae:	2060      	movs	r0, #96	; 0x60
1a0015b0:	f7ff f90e 	bl	1a0007d0 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0015b4:	4604      	mov	r4, r0
1a0015b6:	b1b8      	cbz	r0, 1a0015e8 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a0015b8:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0015ba:	b1e4      	cbz	r4, 1a0015f6 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a0015bc:	2300      	movs	r3, #0
1a0015be:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0015c2:	9303      	str	r3, [sp, #12]
1a0015c4:	9402      	str	r4, [sp, #8]
1a0015c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0015c8:	9301      	str	r3, [sp, #4]
1a0015ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0015cc:	9300      	str	r3, [sp, #0]
1a0015ce:	464b      	mov	r3, r9
1a0015d0:	462a      	mov	r2, r5
1a0015d2:	4641      	mov	r1, r8
1a0015d4:	4638      	mov	r0, r7
1a0015d6:	f7ff fe2f 	bl	1a001238 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0015da:	4620      	mov	r0, r4
1a0015dc:	f7ff feaa 	bl	1a001334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0015e0:	2001      	movs	r0, #1
	}
1a0015e2:	b005      	add	sp, #20
1a0015e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0015e8:	4630      	mov	r0, r6
1a0015ea:	f7ff f97f 	bl	1a0008ec <vPortFree>
1a0015ee:	e7e4      	b.n	1a0015ba <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0015f4:	e7f5      	b.n	1a0015e2 <xTaskCreate+0x4c>
1a0015f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a0015fa:	e7f2      	b.n	1a0015e2 <xTaskCreate+0x4c>

1a0015fc <vTaskStartScheduler>:
{
1a0015fc:	b510      	push	{r4, lr}
1a0015fe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001600:	2400      	movs	r4, #0
1a001602:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001604:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001606:	aa07      	add	r2, sp, #28
1a001608:	a906      	add	r1, sp, #24
1a00160a:	a805      	add	r0, sp, #20
1a00160c:	f7ff fdb4 	bl	1a001178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001610:	9b05      	ldr	r3, [sp, #20]
1a001612:	9302      	str	r3, [sp, #8]
1a001614:	9b06      	ldr	r3, [sp, #24]
1a001616:	9301      	str	r3, [sp, #4]
1a001618:	9400      	str	r4, [sp, #0]
1a00161a:	4623      	mov	r3, r4
1a00161c:	9a07      	ldr	r2, [sp, #28]
1a00161e:	4917      	ldr	r1, [pc, #92]	; (1a00167c <vTaskStartScheduler+0x80>)
1a001620:	4817      	ldr	r0, [pc, #92]	; (1a001680 <vTaskStartScheduler+0x84>)
1a001622:	f7ff ff7f 	bl	1a001524 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001626:	b140      	cbz	r0, 1a00163a <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001628:	f000 fbe2 	bl	1a001df0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a00162c:	2801      	cmp	r0, #1
1a00162e:	d006      	beq.n	1a00163e <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001630:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001634:	d018      	beq.n	1a001668 <vTaskStartScheduler+0x6c>
}
1a001636:	b008      	add	sp, #32
1a001638:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a00163a:	2000      	movs	r0, #0
1a00163c:	e7f6      	b.n	1a00162c <vTaskStartScheduler+0x30>
1a00163e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001642:	f383 8811 	msr	BASEPRI, r3
1a001646:	f3bf 8f6f 	isb	sy
1a00164a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00164e:	4b0d      	ldr	r3, [pc, #52]	; (1a001684 <vTaskStartScheduler+0x88>)
1a001650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001654:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001656:	4b0c      	ldr	r3, [pc, #48]	; (1a001688 <vTaskStartScheduler+0x8c>)
1a001658:	2201      	movs	r2, #1
1a00165a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a00165c:	4b0b      	ldr	r3, [pc, #44]	; (1a00168c <vTaskStartScheduler+0x90>)
1a00165e:	2200      	movs	r2, #0
1a001660:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001662:	f000 fea9 	bl	1a0023b8 <xPortStartScheduler>
1a001666:	e7e6      	b.n	1a001636 <vTaskStartScheduler+0x3a>
1a001668:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00166c:	f383 8811 	msr	BASEPRI, r3
1a001670:	f3bf 8f6f 	isb	sy
1a001674:	f3bf 8f4f 	dsb	sy
1a001678:	e7fe      	b.n	1a001678 <vTaskStartScheduler+0x7c>
1a00167a:	bf00      	nop
1a00167c:	1a004d70 	.word	0x1a004d70
1a001680:	1a001465 	.word	0x1a001465
1a001684:	10002a54 	.word	0x10002a54
1a001688:	10002a70 	.word	0x10002a70
1a00168c:	10002a9c 	.word	0x10002a9c

1a001690 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001690:	4a02      	ldr	r2, [pc, #8]	; (1a00169c <vTaskSuspendAll+0xc>)
1a001692:	6813      	ldr	r3, [r2, #0]
1a001694:	3301      	adds	r3, #1
1a001696:	6013      	str	r3, [r2, #0]
}
1a001698:	4770      	bx	lr
1a00169a:	bf00      	nop
1a00169c:	10002a20 	.word	0x10002a20

1a0016a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0016a0:	4b01      	ldr	r3, [pc, #4]	; (1a0016a8 <xTaskGetTickCount+0x8>)
1a0016a2:	6818      	ldr	r0, [r3, #0]
}
1a0016a4:	4770      	bx	lr
1a0016a6:	bf00      	nop
1a0016a8:	10002a9c 	.word	0x10002a9c

1a0016ac <xTaskIncrementTick>:
{
1a0016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0016ae:	4b3a      	ldr	r3, [pc, #232]	; (1a001798 <xTaskIncrementTick+0xec>)
1a0016b0:	681b      	ldr	r3, [r3, #0]
1a0016b2:	2b00      	cmp	r3, #0
1a0016b4:	d164      	bne.n	1a001780 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0016b6:	4b39      	ldr	r3, [pc, #228]	; (1a00179c <xTaskIncrementTick+0xf0>)
1a0016b8:	681d      	ldr	r5, [r3, #0]
1a0016ba:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0016bc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0016be:	b9c5      	cbnz	r5, 1a0016f2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0016c0:	4b37      	ldr	r3, [pc, #220]	; (1a0017a0 <xTaskIncrementTick+0xf4>)
1a0016c2:	681b      	ldr	r3, [r3, #0]
1a0016c4:	681b      	ldr	r3, [r3, #0]
1a0016c6:	b143      	cbz	r3, 1a0016da <xTaskIncrementTick+0x2e>
1a0016c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0016cc:	f383 8811 	msr	BASEPRI, r3
1a0016d0:	f3bf 8f6f 	isb	sy
1a0016d4:	f3bf 8f4f 	dsb	sy
1a0016d8:	e7fe      	b.n	1a0016d8 <xTaskIncrementTick+0x2c>
1a0016da:	4a31      	ldr	r2, [pc, #196]	; (1a0017a0 <xTaskIncrementTick+0xf4>)
1a0016dc:	6811      	ldr	r1, [r2, #0]
1a0016de:	4b31      	ldr	r3, [pc, #196]	; (1a0017a4 <xTaskIncrementTick+0xf8>)
1a0016e0:	6818      	ldr	r0, [r3, #0]
1a0016e2:	6010      	str	r0, [r2, #0]
1a0016e4:	6019      	str	r1, [r3, #0]
1a0016e6:	4a30      	ldr	r2, [pc, #192]	; (1a0017a8 <xTaskIncrementTick+0xfc>)
1a0016e8:	6813      	ldr	r3, [r2, #0]
1a0016ea:	3301      	adds	r3, #1
1a0016ec:	6013      	str	r3, [r2, #0]
1a0016ee:	f7ff fd8d 	bl	1a00120c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0016f2:	4b2e      	ldr	r3, [pc, #184]	; (1a0017ac <xTaskIncrementTick+0x100>)
1a0016f4:	681b      	ldr	r3, [r3, #0]
1a0016f6:	42ab      	cmp	r3, r5
1a0016f8:	d938      	bls.n	1a00176c <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0016fa:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0016fc:	4b2c      	ldr	r3, [pc, #176]	; (1a0017b0 <xTaskIncrementTick+0x104>)
1a0016fe:	681b      	ldr	r3, [r3, #0]
1a001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001706:	009a      	lsls	r2, r3, #2
1a001708:	4b2a      	ldr	r3, [pc, #168]	; (1a0017b4 <xTaskIncrementTick+0x108>)
1a00170a:	589b      	ldr	r3, [r3, r2]
1a00170c:	2b01      	cmp	r3, #1
1a00170e:	d93c      	bls.n	1a00178a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001710:	2401      	movs	r4, #1
1a001712:	e03a      	b.n	1a00178a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001714:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001716:	4b22      	ldr	r3, [pc, #136]	; (1a0017a0 <xTaskIncrementTick+0xf4>)
1a001718:	681b      	ldr	r3, [r3, #0]
1a00171a:	681b      	ldr	r3, [r3, #0]
1a00171c:	b343      	cbz	r3, 1a001770 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00171e:	4b20      	ldr	r3, [pc, #128]	; (1a0017a0 <xTaskIncrementTick+0xf4>)
1a001720:	681b      	ldr	r3, [r3, #0]
1a001722:	68db      	ldr	r3, [r3, #12]
1a001724:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001726:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001728:	429d      	cmp	r5, r3
1a00172a:	d326      	bcc.n	1a00177a <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00172c:	1d37      	adds	r7, r6, #4
1a00172e:	4638      	mov	r0, r7
1a001730:	f7ff fd0d 	bl	1a00114e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001734:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001736:	b11b      	cbz	r3, 1a001740 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001738:	f106 0018 	add.w	r0, r6, #24
1a00173c:	f7ff fd07 	bl	1a00114e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001740:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001742:	2201      	movs	r2, #1
1a001744:	409a      	lsls	r2, r3
1a001746:	491c      	ldr	r1, [pc, #112]	; (1a0017b8 <xTaskIncrementTick+0x10c>)
1a001748:	6808      	ldr	r0, [r1, #0]
1a00174a:	4302      	orrs	r2, r0
1a00174c:	600a      	str	r2, [r1, #0]
1a00174e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001752:	009a      	lsls	r2, r3, #2
1a001754:	4639      	mov	r1, r7
1a001756:	4817      	ldr	r0, [pc, #92]	; (1a0017b4 <xTaskIncrementTick+0x108>)
1a001758:	4410      	add	r0, r2
1a00175a:	f7ff fcd2 	bl	1a001102 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00175e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001760:	4b13      	ldr	r3, [pc, #76]	; (1a0017b0 <xTaskIncrementTick+0x104>)
1a001762:	681b      	ldr	r3, [r3, #0]
1a001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001766:	429a      	cmp	r2, r3
1a001768:	d2d4      	bcs.n	1a001714 <xTaskIncrementTick+0x68>
1a00176a:	e7d4      	b.n	1a001716 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a00176c:	2400      	movs	r4, #0
1a00176e:	e7d2      	b.n	1a001716 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001770:	4b0e      	ldr	r3, [pc, #56]	; (1a0017ac <xTaskIncrementTick+0x100>)
1a001772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001776:	601a      	str	r2, [r3, #0]
					break;
1a001778:	e7c0      	b.n	1a0016fc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a00177a:	4a0c      	ldr	r2, [pc, #48]	; (1a0017ac <xTaskIncrementTick+0x100>)
1a00177c:	6013      	str	r3, [r2, #0]
						break;
1a00177e:	e7bd      	b.n	1a0016fc <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001780:	4a0e      	ldr	r2, [pc, #56]	; (1a0017bc <xTaskIncrementTick+0x110>)
1a001782:	6813      	ldr	r3, [r2, #0]
1a001784:	3301      	adds	r3, #1
1a001786:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001788:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a00178a:	4b0d      	ldr	r3, [pc, #52]	; (1a0017c0 <xTaskIncrementTick+0x114>)
1a00178c:	681b      	ldr	r3, [r3, #0]
1a00178e:	b103      	cbz	r3, 1a001792 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001790:	2401      	movs	r4, #1
}
1a001792:	4620      	mov	r0, r4
1a001794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001796:	bf00      	nop
1a001798:	10002a20 	.word	0x10002a20
1a00179c:	10002a9c 	.word	0x10002a9c
1a0017a0:	10002980 	.word	0x10002980
1a0017a4:	10002984 	.word	0x10002984
1a0017a8:	10002a58 	.word	0x10002a58
1a0017ac:	10002a54 	.word	0x10002a54
1a0017b0:	1000297c 	.word	0x1000297c
1a0017b4:	10002988 	.word	0x10002988
1a0017b8:	10002a28 	.word	0x10002a28
1a0017bc:	10002a1c 	.word	0x10002a1c
1a0017c0:	10002aa0 	.word	0x10002aa0

1a0017c4 <xTaskResumeAll>:
{
1a0017c4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a0017c6:	4b33      	ldr	r3, [pc, #204]	; (1a001894 <xTaskResumeAll+0xd0>)
1a0017c8:	681b      	ldr	r3, [r3, #0]
1a0017ca:	b943      	cbnz	r3, 1a0017de <xTaskResumeAll+0x1a>
1a0017cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0017d0:	f383 8811 	msr	BASEPRI, r3
1a0017d4:	f3bf 8f6f 	isb	sy
1a0017d8:	f3bf 8f4f 	dsb	sy
1a0017dc:	e7fe      	b.n	1a0017dc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a0017de:	f000 fd49 	bl	1a002274 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a0017e2:	4b2c      	ldr	r3, [pc, #176]	; (1a001894 <xTaskResumeAll+0xd0>)
1a0017e4:	681a      	ldr	r2, [r3, #0]
1a0017e6:	3a01      	subs	r2, #1
1a0017e8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0017ea:	681b      	ldr	r3, [r3, #0]
1a0017ec:	2b00      	cmp	r3, #0
1a0017ee:	d14d      	bne.n	1a00188c <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a0017f0:	4b29      	ldr	r3, [pc, #164]	; (1a001898 <xTaskResumeAll+0xd4>)
1a0017f2:	681b      	ldr	r3, [r3, #0]
1a0017f4:	b923      	cbnz	r3, 1a001800 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a0017f6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0017f8:	f000 fd5e 	bl	1a0022b8 <vPortExitCritical>
}
1a0017fc:	4620      	mov	r0, r4
1a0017fe:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001800:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001802:	4b26      	ldr	r3, [pc, #152]	; (1a00189c <xTaskResumeAll+0xd8>)
1a001804:	681b      	ldr	r3, [r3, #0]
1a001806:	b31b      	cbz	r3, 1a001850 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001808:	4b24      	ldr	r3, [pc, #144]	; (1a00189c <xTaskResumeAll+0xd8>)
1a00180a:	68db      	ldr	r3, [r3, #12]
1a00180c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a00180e:	f104 0018 	add.w	r0, r4, #24
1a001812:	f7ff fc9c 	bl	1a00114e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001816:	1d25      	adds	r5, r4, #4
1a001818:	4628      	mov	r0, r5
1a00181a:	f7ff fc98 	bl	1a00114e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00181e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001820:	2201      	movs	r2, #1
1a001822:	409a      	lsls	r2, r3
1a001824:	491e      	ldr	r1, [pc, #120]	; (1a0018a0 <xTaskResumeAll+0xdc>)
1a001826:	6808      	ldr	r0, [r1, #0]
1a001828:	4302      	orrs	r2, r0
1a00182a:	600a      	str	r2, [r1, #0]
1a00182c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001830:	009a      	lsls	r2, r3, #2
1a001832:	4629      	mov	r1, r5
1a001834:	481b      	ldr	r0, [pc, #108]	; (1a0018a4 <xTaskResumeAll+0xe0>)
1a001836:	4410      	add	r0, r2
1a001838:	f7ff fc63 	bl	1a001102 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a00183c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00183e:	4b1a      	ldr	r3, [pc, #104]	; (1a0018a8 <xTaskResumeAll+0xe4>)
1a001840:	681b      	ldr	r3, [r3, #0]
1a001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001844:	429a      	cmp	r2, r3
1a001846:	d3dc      	bcc.n	1a001802 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001848:	4b18      	ldr	r3, [pc, #96]	; (1a0018ac <xTaskResumeAll+0xe8>)
1a00184a:	2201      	movs	r2, #1
1a00184c:	601a      	str	r2, [r3, #0]
1a00184e:	e7d8      	b.n	1a001802 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001850:	b10c      	cbz	r4, 1a001856 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001852:	f7ff fcdb 	bl	1a00120c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001856:	4b16      	ldr	r3, [pc, #88]	; (1a0018b0 <xTaskResumeAll+0xec>)
1a001858:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a00185a:	b154      	cbz	r4, 1a001872 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a00185c:	f7ff ff26 	bl	1a0016ac <xTaskIncrementTick>
1a001860:	b110      	cbz	r0, 1a001868 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001862:	4b12      	ldr	r3, [pc, #72]	; (1a0018ac <xTaskResumeAll+0xe8>)
1a001864:	2201      	movs	r2, #1
1a001866:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001868:	3c01      	subs	r4, #1
1a00186a:	d1f7      	bne.n	1a00185c <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a00186c:	4b10      	ldr	r3, [pc, #64]	; (1a0018b0 <xTaskResumeAll+0xec>)
1a00186e:	2200      	movs	r2, #0
1a001870:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001872:	4b0e      	ldr	r3, [pc, #56]	; (1a0018ac <xTaskResumeAll+0xe8>)
1a001874:	681b      	ldr	r3, [r3, #0]
1a001876:	b15b      	cbz	r3, 1a001890 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001878:	4b0e      	ldr	r3, [pc, #56]	; (1a0018b4 <xTaskResumeAll+0xf0>)
1a00187a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00187e:	601a      	str	r2, [r3, #0]
1a001880:	f3bf 8f4f 	dsb	sy
1a001884:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001888:	2401      	movs	r4, #1
1a00188a:	e7b5      	b.n	1a0017f8 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a00188c:	2400      	movs	r4, #0
1a00188e:	e7b3      	b.n	1a0017f8 <xTaskResumeAll+0x34>
1a001890:	2400      	movs	r4, #0
1a001892:	e7b1      	b.n	1a0017f8 <xTaskResumeAll+0x34>
1a001894:	10002a20 	.word	0x10002a20
1a001898:	10002a14 	.word	0x10002a14
1a00189c:	10002a5c 	.word	0x10002a5c
1a0018a0:	10002a28 	.word	0x10002a28
1a0018a4:	10002988 	.word	0x10002988
1a0018a8:	1000297c 	.word	0x1000297c
1a0018ac:	10002aa0 	.word	0x10002aa0
1a0018b0:	10002a1c 	.word	0x10002a1c
1a0018b4:	e000ed04 	.word	0xe000ed04

1a0018b8 <vTaskDelayUntil>:
	{
1a0018b8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a0018ba:	b150      	cbz	r0, 1a0018d2 <vTaskDelayUntil+0x1a>
1a0018bc:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a0018be:	b989      	cbnz	r1, 1a0018e4 <vTaskDelayUntil+0x2c>
1a0018c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018c4:	f383 8811 	msr	BASEPRI, r3
1a0018c8:	f3bf 8f6f 	isb	sy
1a0018cc:	f3bf 8f4f 	dsb	sy
1a0018d0:	e7fe      	b.n	1a0018d0 <vTaskDelayUntil+0x18>
1a0018d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018d6:	f383 8811 	msr	BASEPRI, r3
1a0018da:	f3bf 8f6f 	isb	sy
1a0018de:	f3bf 8f4f 	dsb	sy
1a0018e2:	e7fe      	b.n	1a0018e2 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a0018e4:	4b1a      	ldr	r3, [pc, #104]	; (1a001950 <vTaskDelayUntil+0x98>)
1a0018e6:	681b      	ldr	r3, [r3, #0]
1a0018e8:	b143      	cbz	r3, 1a0018fc <vTaskDelayUntil+0x44>
1a0018ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018ee:	f383 8811 	msr	BASEPRI, r3
1a0018f2:	f3bf 8f6f 	isb	sy
1a0018f6:	f3bf 8f4f 	dsb	sy
1a0018fa:	e7fe      	b.n	1a0018fa <vTaskDelayUntil+0x42>
1a0018fc:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a0018fe:	f7ff fec7 	bl	1a001690 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001902:	4b14      	ldr	r3, [pc, #80]	; (1a001954 <vTaskDelayUntil+0x9c>)
1a001904:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001906:	682a      	ldr	r2, [r5, #0]
1a001908:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a00190a:	4282      	cmp	r2, r0
1a00190c:	d918      	bls.n	1a001940 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00190e:	42a2      	cmp	r2, r4
1a001910:	d80c      	bhi.n	1a00192c <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001912:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001914:	f7ff ff56 	bl	1a0017c4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001918:	b938      	cbnz	r0, 1a00192a <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a00191a:	4b0f      	ldr	r3, [pc, #60]	; (1a001958 <vTaskDelayUntil+0xa0>)
1a00191c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001920:	601a      	str	r2, [r3, #0]
1a001922:	f3bf 8f4f 	dsb	sy
1a001926:	f3bf 8f6f 	isb	sy
	}
1a00192a:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a00192c:	42a0      	cmp	r0, r4
1a00192e:	d301      	bcc.n	1a001934 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001930:	602c      	str	r4, [r5, #0]
1a001932:	e7ef      	b.n	1a001914 <vTaskDelayUntil+0x5c>
1a001934:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001936:	2100      	movs	r1, #0
1a001938:	1a20      	subs	r0, r4, r0
1a00193a:	f7ff fda7 	bl	1a00148c <prvAddCurrentTaskToDelayedList>
1a00193e:	e7e9      	b.n	1a001914 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001940:	42a2      	cmp	r2, r4
1a001942:	d801      	bhi.n	1a001948 <vTaskDelayUntil+0x90>
1a001944:	42a0      	cmp	r0, r4
1a001946:	d201      	bcs.n	1a00194c <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001948:	602c      	str	r4, [r5, #0]
1a00194a:	e7f4      	b.n	1a001936 <vTaskDelayUntil+0x7e>
1a00194c:	602c      	str	r4, [r5, #0]
1a00194e:	e7e1      	b.n	1a001914 <vTaskDelayUntil+0x5c>
1a001950:	10002a20 	.word	0x10002a20
1a001954:	10002a9c 	.word	0x10002a9c
1a001958:	e000ed04 	.word	0xe000ed04

1a00195c <vTaskDelay>:
	{
1a00195c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00195e:	b1a8      	cbz	r0, 1a00198c <vTaskDelay+0x30>
1a001960:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001962:	4b0f      	ldr	r3, [pc, #60]	; (1a0019a0 <vTaskDelay+0x44>)
1a001964:	681b      	ldr	r3, [r3, #0]
1a001966:	b143      	cbz	r3, 1a00197a <vTaskDelay+0x1e>
1a001968:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00196c:	f383 8811 	msr	BASEPRI, r3
1a001970:	f3bf 8f6f 	isb	sy
1a001974:	f3bf 8f4f 	dsb	sy
1a001978:	e7fe      	b.n	1a001978 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a00197a:	f7ff fe89 	bl	1a001690 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00197e:	2100      	movs	r1, #0
1a001980:	4620      	mov	r0, r4
1a001982:	f7ff fd83 	bl	1a00148c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001986:	f7ff ff1d 	bl	1a0017c4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00198a:	b938      	cbnz	r0, 1a00199c <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a00198c:	4b05      	ldr	r3, [pc, #20]	; (1a0019a4 <vTaskDelay+0x48>)
1a00198e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001992:	601a      	str	r2, [r3, #0]
1a001994:	f3bf 8f4f 	dsb	sy
1a001998:	f3bf 8f6f 	isb	sy
	}
1a00199c:	bd10      	pop	{r4, pc}
1a00199e:	bf00      	nop
1a0019a0:	10002a20 	.word	0x10002a20
1a0019a4:	e000ed04 	.word	0xe000ed04

1a0019a8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0019a8:	4b2c      	ldr	r3, [pc, #176]	; (1a001a5c <vTaskSwitchContext+0xb4>)
1a0019aa:	681b      	ldr	r3, [r3, #0]
1a0019ac:	b11b      	cbz	r3, 1a0019b6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0019ae:	4b2c      	ldr	r3, [pc, #176]	; (1a001a60 <vTaskSwitchContext+0xb8>)
1a0019b0:	2201      	movs	r2, #1
1a0019b2:	601a      	str	r2, [r3, #0]
1a0019b4:	4770      	bx	lr
{
1a0019b6:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0019b8:	4b29      	ldr	r3, [pc, #164]	; (1a001a60 <vTaskSwitchContext+0xb8>)
1a0019ba:	2200      	movs	r2, #0
1a0019bc:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0019be:	4b29      	ldr	r3, [pc, #164]	; (1a001a64 <vTaskSwitchContext+0xbc>)
1a0019c0:	681b      	ldr	r3, [r3, #0]
1a0019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0019c4:	681a      	ldr	r2, [r3, #0]
1a0019c6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019ca:	d103      	bne.n	1a0019d4 <vTaskSwitchContext+0x2c>
1a0019cc:	685a      	ldr	r2, [r3, #4]
1a0019ce:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0019d2:	d01b      	beq.n	1a001a0c <vTaskSwitchContext+0x64>
1a0019d4:	4b23      	ldr	r3, [pc, #140]	; (1a001a64 <vTaskSwitchContext+0xbc>)
1a0019d6:	6818      	ldr	r0, [r3, #0]
1a0019d8:	6819      	ldr	r1, [r3, #0]
1a0019da:	3134      	adds	r1, #52	; 0x34
1a0019dc:	f7ff fc08 	bl	1a0011f0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0019e0:	4b21      	ldr	r3, [pc, #132]	; (1a001a68 <vTaskSwitchContext+0xc0>)
1a0019e2:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0019e4:	fab3 f383 	clz	r3, r3
1a0019e8:	b2db      	uxtb	r3, r3
1a0019ea:	f1c3 031f 	rsb	r3, r3, #31
1a0019ee:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0019f2:	008a      	lsls	r2, r1, #2
1a0019f4:	491d      	ldr	r1, [pc, #116]	; (1a001a6c <vTaskSwitchContext+0xc4>)
1a0019f6:	588a      	ldr	r2, [r1, r2]
1a0019f8:	b98a      	cbnz	r2, 1a001a1e <vTaskSwitchContext+0x76>
	__asm volatile
1a0019fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019fe:	f383 8811 	msr	BASEPRI, r3
1a001a02:	f3bf 8f6f 	isb	sy
1a001a06:	f3bf 8f4f 	dsb	sy
1a001a0a:	e7fe      	b.n	1a001a0a <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001a0c:	689a      	ldr	r2, [r3, #8]
1a001a0e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001a12:	d1df      	bne.n	1a0019d4 <vTaskSwitchContext+0x2c>
1a001a14:	68db      	ldr	r3, [r3, #12]
1a001a16:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001a1a:	d1db      	bne.n	1a0019d4 <vTaskSwitchContext+0x2c>
1a001a1c:	e7e0      	b.n	1a0019e0 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a1e:	4813      	ldr	r0, [pc, #76]	; (1a001a6c <vTaskSwitchContext+0xc4>)
1a001a20:	009a      	lsls	r2, r3, #2
1a001a22:	18d4      	adds	r4, r2, r3
1a001a24:	00a1      	lsls	r1, r4, #2
1a001a26:	4401      	add	r1, r0
1a001a28:	684c      	ldr	r4, [r1, #4]
1a001a2a:	6864      	ldr	r4, [r4, #4]
1a001a2c:	604c      	str	r4, [r1, #4]
1a001a2e:	441a      	add	r2, r3
1a001a30:	0091      	lsls	r1, r2, #2
1a001a32:	3108      	adds	r1, #8
1a001a34:	4408      	add	r0, r1
1a001a36:	4284      	cmp	r4, r0
1a001a38:	d009      	beq.n	1a001a4e <vTaskSwitchContext+0xa6>
1a001a3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a3e:	009a      	lsls	r2, r3, #2
1a001a40:	4b0a      	ldr	r3, [pc, #40]	; (1a001a6c <vTaskSwitchContext+0xc4>)
1a001a42:	4413      	add	r3, r2
1a001a44:	685b      	ldr	r3, [r3, #4]
1a001a46:	68da      	ldr	r2, [r3, #12]
1a001a48:	4b06      	ldr	r3, [pc, #24]	; (1a001a64 <vTaskSwitchContext+0xbc>)
1a001a4a:	601a      	str	r2, [r3, #0]
}
1a001a4c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001a4e:	6861      	ldr	r1, [r4, #4]
1a001a50:	4806      	ldr	r0, [pc, #24]	; (1a001a6c <vTaskSwitchContext+0xc4>)
1a001a52:	2214      	movs	r2, #20
1a001a54:	fb02 0203 	mla	r2, r2, r3, r0
1a001a58:	6051      	str	r1, [r2, #4]
1a001a5a:	e7ee      	b.n	1a001a3a <vTaskSwitchContext+0x92>
1a001a5c:	10002a20 	.word	0x10002a20
1a001a60:	10002aa0 	.word	0x10002aa0
1a001a64:	1000297c 	.word	0x1000297c
1a001a68:	10002a28 	.word	0x10002a28
1a001a6c:	10002988 	.word	0x10002988

1a001a70 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001a70:	b940      	cbnz	r0, 1a001a84 <vTaskPlaceOnEventList+0x14>
1a001a72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a76:	f383 8811 	msr	BASEPRI, r3
1a001a7a:	f3bf 8f6f 	isb	sy
1a001a7e:	f3bf 8f4f 	dsb	sy
1a001a82:	e7fe      	b.n	1a001a82 <vTaskPlaceOnEventList+0x12>
{
1a001a84:	b510      	push	{r4, lr}
1a001a86:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001a88:	4b04      	ldr	r3, [pc, #16]	; (1a001a9c <vTaskPlaceOnEventList+0x2c>)
1a001a8a:	6819      	ldr	r1, [r3, #0]
1a001a8c:	3118      	adds	r1, #24
1a001a8e:	f7ff fb44 	bl	1a00111a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001a92:	2101      	movs	r1, #1
1a001a94:	4620      	mov	r0, r4
1a001a96:	f7ff fcf9 	bl	1a00148c <prvAddCurrentTaskToDelayedList>
}
1a001a9a:	bd10      	pop	{r4, pc}
1a001a9c:	1000297c 	.word	0x1000297c

1a001aa0 <vTaskPlaceOnEventListRestricted>:
	{
1a001aa0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001aa2:	b940      	cbnz	r0, 1a001ab6 <vTaskPlaceOnEventListRestricted+0x16>
1a001aa4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aa8:	f383 8811 	msr	BASEPRI, r3
1a001aac:	f3bf 8f6f 	isb	sy
1a001ab0:	f3bf 8f4f 	dsb	sy
1a001ab4:	e7fe      	b.n	1a001ab4 <vTaskPlaceOnEventListRestricted+0x14>
1a001ab6:	460c      	mov	r4, r1
1a001ab8:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001aba:	4a06      	ldr	r2, [pc, #24]	; (1a001ad4 <vTaskPlaceOnEventListRestricted+0x34>)
1a001abc:	6811      	ldr	r1, [r2, #0]
1a001abe:	3118      	adds	r1, #24
1a001ac0:	f7ff fb1f 	bl	1a001102 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001ac4:	b10d      	cbz	r5, 1a001aca <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001ac6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001aca:	4629      	mov	r1, r5
1a001acc:	4620      	mov	r0, r4
1a001ace:	f7ff fcdd 	bl	1a00148c <prvAddCurrentTaskToDelayedList>
	}
1a001ad2:	bd38      	pop	{r3, r4, r5, pc}
1a001ad4:	1000297c 	.word	0x1000297c

1a001ad8 <xTaskRemoveFromEventList>:
{
1a001ad8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001ada:	68c3      	ldr	r3, [r0, #12]
1a001adc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001ade:	b944      	cbnz	r4, 1a001af2 <xTaskRemoveFromEventList+0x1a>
1a001ae0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ae4:	f383 8811 	msr	BASEPRI, r3
1a001ae8:	f3bf 8f6f 	isb	sy
1a001aec:	f3bf 8f4f 	dsb	sy
1a001af0:	e7fe      	b.n	1a001af0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001af2:	f104 0518 	add.w	r5, r4, #24
1a001af6:	4628      	mov	r0, r5
1a001af8:	f7ff fb29 	bl	1a00114e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001afc:	4b13      	ldr	r3, [pc, #76]	; (1a001b4c <xTaskRemoveFromEventList+0x74>)
1a001afe:	681b      	ldr	r3, [r3, #0]
1a001b00:	b9e3      	cbnz	r3, 1a001b3c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001b02:	1d25      	adds	r5, r4, #4
1a001b04:	4628      	mov	r0, r5
1a001b06:	f7ff fb22 	bl	1a00114e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001b0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b0c:	2201      	movs	r2, #1
1a001b0e:	409a      	lsls	r2, r3
1a001b10:	490f      	ldr	r1, [pc, #60]	; (1a001b50 <xTaskRemoveFromEventList+0x78>)
1a001b12:	6808      	ldr	r0, [r1, #0]
1a001b14:	4302      	orrs	r2, r0
1a001b16:	600a      	str	r2, [r1, #0]
1a001b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b1c:	009a      	lsls	r2, r3, #2
1a001b1e:	4629      	mov	r1, r5
1a001b20:	480c      	ldr	r0, [pc, #48]	; (1a001b54 <xTaskRemoveFromEventList+0x7c>)
1a001b22:	4410      	add	r0, r2
1a001b24:	f7ff faed 	bl	1a001102 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001b28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b2a:	4b0b      	ldr	r3, [pc, #44]	; (1a001b58 <xTaskRemoveFromEventList+0x80>)
1a001b2c:	681b      	ldr	r3, [r3, #0]
1a001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b30:	429a      	cmp	r2, r3
1a001b32:	d908      	bls.n	1a001b46 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001b34:	2001      	movs	r0, #1
1a001b36:	4b09      	ldr	r3, [pc, #36]	; (1a001b5c <xTaskRemoveFromEventList+0x84>)
1a001b38:	6018      	str	r0, [r3, #0]
}
1a001b3a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001b3c:	4629      	mov	r1, r5
1a001b3e:	4808      	ldr	r0, [pc, #32]	; (1a001b60 <xTaskRemoveFromEventList+0x88>)
1a001b40:	f7ff fadf 	bl	1a001102 <vListInsertEnd>
1a001b44:	e7f0      	b.n	1a001b28 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001b46:	2000      	movs	r0, #0
	return xReturn;
1a001b48:	e7f7      	b.n	1a001b3a <xTaskRemoveFromEventList+0x62>
1a001b4a:	bf00      	nop
1a001b4c:	10002a20 	.word	0x10002a20
1a001b50:	10002a28 	.word	0x10002a28
1a001b54:	10002988 	.word	0x10002988
1a001b58:	1000297c 	.word	0x1000297c
1a001b5c:	10002aa0 	.word	0x10002aa0
1a001b60:	10002a5c 	.word	0x10002a5c

1a001b64 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001b64:	4b03      	ldr	r3, [pc, #12]	; (1a001b74 <vTaskInternalSetTimeOutState+0x10>)
1a001b66:	681b      	ldr	r3, [r3, #0]
1a001b68:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001b6a:	4b03      	ldr	r3, [pc, #12]	; (1a001b78 <vTaskInternalSetTimeOutState+0x14>)
1a001b6c:	681b      	ldr	r3, [r3, #0]
1a001b6e:	6043      	str	r3, [r0, #4]
}
1a001b70:	4770      	bx	lr
1a001b72:	bf00      	nop
1a001b74:	10002a58 	.word	0x10002a58
1a001b78:	10002a9c 	.word	0x10002a9c

1a001b7c <xTaskCheckForTimeOut>:
{
1a001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001b7e:	b150      	cbz	r0, 1a001b96 <xTaskCheckForTimeOut+0x1a>
1a001b80:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001b82:	b989      	cbnz	r1, 1a001ba8 <xTaskCheckForTimeOut+0x2c>
1a001b84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b88:	f383 8811 	msr	BASEPRI, r3
1a001b8c:	f3bf 8f6f 	isb	sy
1a001b90:	f3bf 8f4f 	dsb	sy
1a001b94:	e7fe      	b.n	1a001b94 <xTaskCheckForTimeOut+0x18>
1a001b96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b9a:	f383 8811 	msr	BASEPRI, r3
1a001b9e:	f3bf 8f6f 	isb	sy
1a001ba2:	f3bf 8f4f 	dsb	sy
1a001ba6:	e7fe      	b.n	1a001ba6 <xTaskCheckForTimeOut+0x2a>
1a001ba8:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001baa:	f000 fb63 	bl	1a002274 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001bae:	4b11      	ldr	r3, [pc, #68]	; (1a001bf4 <xTaskCheckForTimeOut+0x78>)
1a001bb0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001bb2:	6868      	ldr	r0, [r5, #4]
1a001bb4:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001bb6:	6823      	ldr	r3, [r4, #0]
1a001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001bbc:	d016      	beq.n	1a001bec <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001bbe:	682f      	ldr	r7, [r5, #0]
1a001bc0:	4e0d      	ldr	r6, [pc, #52]	; (1a001bf8 <xTaskCheckForTimeOut+0x7c>)
1a001bc2:	6836      	ldr	r6, [r6, #0]
1a001bc4:	42b7      	cmp	r7, r6
1a001bc6:	d001      	beq.n	1a001bcc <xTaskCheckForTimeOut+0x50>
1a001bc8:	4288      	cmp	r0, r1
1a001bca:	d911      	bls.n	1a001bf0 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001bcc:	4293      	cmp	r3, r2
1a001bce:	d803      	bhi.n	1a001bd8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001bd0:	2300      	movs	r3, #0
1a001bd2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001bd4:	2401      	movs	r4, #1
1a001bd6:	e005      	b.n	1a001be4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001bd8:	1a9b      	subs	r3, r3, r2
1a001bda:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001bdc:	4628      	mov	r0, r5
1a001bde:	f7ff ffc1 	bl	1a001b64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001be2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001be4:	f000 fb68 	bl	1a0022b8 <vPortExitCritical>
}
1a001be8:	4620      	mov	r0, r4
1a001bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001bec:	2400      	movs	r4, #0
1a001bee:	e7f9      	b.n	1a001be4 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001bf0:	2401      	movs	r4, #1
1a001bf2:	e7f7      	b.n	1a001be4 <xTaskCheckForTimeOut+0x68>
1a001bf4:	10002a9c 	.word	0x10002a9c
1a001bf8:	10002a58 	.word	0x10002a58

1a001bfc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001bfc:	4b01      	ldr	r3, [pc, #4]	; (1a001c04 <vTaskMissedYield+0x8>)
1a001bfe:	2201      	movs	r2, #1
1a001c00:	601a      	str	r2, [r3, #0]
}
1a001c02:	4770      	bx	lr
1a001c04:	10002aa0 	.word	0x10002aa0

1a001c08 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001c08:	4b05      	ldr	r3, [pc, #20]	; (1a001c20 <xTaskGetSchedulerState+0x18>)
1a001c0a:	681b      	ldr	r3, [r3, #0]
1a001c0c:	b133      	cbz	r3, 1a001c1c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c0e:	4b05      	ldr	r3, [pc, #20]	; (1a001c24 <xTaskGetSchedulerState+0x1c>)
1a001c10:	681b      	ldr	r3, [r3, #0]
1a001c12:	b10b      	cbz	r3, 1a001c18 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001c14:	2000      	movs	r0, #0
	}
1a001c16:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001c18:	2002      	movs	r0, #2
1a001c1a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001c1c:	2001      	movs	r0, #1
1a001c1e:	4770      	bx	lr
1a001c20:	10002a70 	.word	0x10002a70
1a001c24:	10002a20 	.word	0x10002a20

1a001c28 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001c28:	2800      	cmp	r0, #0
1a001c2a:	d049      	beq.n	1a001cc0 <xTaskPriorityDisinherit+0x98>
	{
1a001c2c:	b538      	push	{r3, r4, r5, lr}
1a001c2e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001c30:	4a26      	ldr	r2, [pc, #152]	; (1a001ccc <xTaskPriorityDisinherit+0xa4>)
1a001c32:	6812      	ldr	r2, [r2, #0]
1a001c34:	4282      	cmp	r2, r0
1a001c36:	d008      	beq.n	1a001c4a <xTaskPriorityDisinherit+0x22>
1a001c38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c3c:	f383 8811 	msr	BASEPRI, r3
1a001c40:	f3bf 8f6f 	isb	sy
1a001c44:	f3bf 8f4f 	dsb	sy
1a001c48:	e7fe      	b.n	1a001c48 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001c4a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001c4c:	b942      	cbnz	r2, 1a001c60 <xTaskPriorityDisinherit+0x38>
1a001c4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c52:	f383 8811 	msr	BASEPRI, r3
1a001c56:	f3bf 8f6f 	isb	sy
1a001c5a:	f3bf 8f4f 	dsb	sy
1a001c5e:	e7fe      	b.n	1a001c5e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001c60:	3a01      	subs	r2, #1
1a001c62:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001c64:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001c66:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001c68:	4288      	cmp	r0, r1
1a001c6a:	d02b      	beq.n	1a001cc4 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001c6c:	bb62      	cbnz	r2, 1a001cc8 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c6e:	1d25      	adds	r5, r4, #4
1a001c70:	4628      	mov	r0, r5
1a001c72:	f7ff fa6c 	bl	1a00114e <uxListRemove>
1a001c76:	b970      	cbnz	r0, 1a001c96 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001c78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c7a:	2314      	movs	r3, #20
1a001c7c:	fb03 f302 	mul.w	r3, r3, r2
1a001c80:	4913      	ldr	r1, [pc, #76]	; (1a001cd0 <xTaskPriorityDisinherit+0xa8>)
1a001c82:	58cb      	ldr	r3, [r1, r3]
1a001c84:	b93b      	cbnz	r3, 1a001c96 <xTaskPriorityDisinherit+0x6e>
1a001c86:	2301      	movs	r3, #1
1a001c88:	fa03 f202 	lsl.w	r2, r3, r2
1a001c8c:	4911      	ldr	r1, [pc, #68]	; (1a001cd4 <xTaskPriorityDisinherit+0xac>)
1a001c8e:	680b      	ldr	r3, [r1, #0]
1a001c90:	ea23 0302 	bic.w	r3, r3, r2
1a001c94:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001c96:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001c98:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c9a:	f1c3 0207 	rsb	r2, r3, #7
1a001c9e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001ca0:	2401      	movs	r4, #1
1a001ca2:	fa04 f203 	lsl.w	r2, r4, r3
1a001ca6:	490b      	ldr	r1, [pc, #44]	; (1a001cd4 <xTaskPriorityDisinherit+0xac>)
1a001ca8:	6808      	ldr	r0, [r1, #0]
1a001caa:	4302      	orrs	r2, r0
1a001cac:	600a      	str	r2, [r1, #0]
1a001cae:	4629      	mov	r1, r5
1a001cb0:	4a07      	ldr	r2, [pc, #28]	; (1a001cd0 <xTaskPriorityDisinherit+0xa8>)
1a001cb2:	2014      	movs	r0, #20
1a001cb4:	fb00 2003 	mla	r0, r0, r3, r2
1a001cb8:	f7ff fa23 	bl	1a001102 <vListInsertEnd>
					xReturn = pdTRUE;
1a001cbc:	4620      	mov	r0, r4
	}
1a001cbe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001cc0:	2000      	movs	r0, #0
	}
1a001cc2:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001cc4:	2000      	movs	r0, #0
1a001cc6:	e7fa      	b.n	1a001cbe <xTaskPriorityDisinherit+0x96>
1a001cc8:	2000      	movs	r0, #0
		return xReturn;
1a001cca:	e7f8      	b.n	1a001cbe <xTaskPriorityDisinherit+0x96>
1a001ccc:	1000297c 	.word	0x1000297c
1a001cd0:	10002988 	.word	0x10002988
1a001cd4:	10002a28 	.word	0x10002a28

1a001cd8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001cd8:	4b06      	ldr	r3, [pc, #24]	; (1a001cf4 <prvGetNextExpireTime+0x1c>)
1a001cda:	681a      	ldr	r2, [r3, #0]
1a001cdc:	6813      	ldr	r3, [r2, #0]
1a001cde:	fab3 f383 	clz	r3, r3
1a001ce2:	095b      	lsrs	r3, r3, #5
1a001ce4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001ce6:	b913      	cbnz	r3, 1a001cee <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ce8:	68d3      	ldr	r3, [r2, #12]
1a001cea:	6818      	ldr	r0, [r3, #0]
1a001cec:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001cee:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001cf0:	4770      	bx	lr
1a001cf2:	bf00      	nop
1a001cf4:	10002aa4 	.word	0x10002aa4

1a001cf8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001cf8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001cfa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001cfc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001cfe:	4291      	cmp	r1, r2
1a001d00:	d80c      	bhi.n	1a001d1c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d02:	1ad2      	subs	r2, r2, r3
1a001d04:	6983      	ldr	r3, [r0, #24]
1a001d06:	429a      	cmp	r2, r3
1a001d08:	d301      	bcc.n	1a001d0e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001d0a:	2001      	movs	r0, #1
1a001d0c:	e010      	b.n	1a001d30 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001d0e:	1d01      	adds	r1, r0, #4
1a001d10:	4b09      	ldr	r3, [pc, #36]	; (1a001d38 <prvInsertTimerInActiveList+0x40>)
1a001d12:	6818      	ldr	r0, [r3, #0]
1a001d14:	f7ff fa01 	bl	1a00111a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001d18:	2000      	movs	r0, #0
1a001d1a:	e009      	b.n	1a001d30 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001d1c:	429a      	cmp	r2, r3
1a001d1e:	d201      	bcs.n	1a001d24 <prvInsertTimerInActiveList+0x2c>
1a001d20:	4299      	cmp	r1, r3
1a001d22:	d206      	bcs.n	1a001d32 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001d24:	1d01      	adds	r1, r0, #4
1a001d26:	4b05      	ldr	r3, [pc, #20]	; (1a001d3c <prvInsertTimerInActiveList+0x44>)
1a001d28:	6818      	ldr	r0, [r3, #0]
1a001d2a:	f7ff f9f6 	bl	1a00111a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001d2e:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a001d30:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a001d32:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001d34:	e7fc      	b.n	1a001d30 <prvInsertTimerInActiveList+0x38>
1a001d36:	bf00      	nop
1a001d38:	10002aa8 	.word	0x10002aa8
1a001d3c:	10002aa4 	.word	0x10002aa4

1a001d40 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001d40:	b530      	push	{r4, r5, lr}
1a001d42:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001d44:	f000 fa96 	bl	1a002274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001d48:	4b11      	ldr	r3, [pc, #68]	; (1a001d90 <prvCheckForValidListAndQueue+0x50>)
1a001d4a:	681b      	ldr	r3, [r3, #0]
1a001d4c:	b11b      	cbz	r3, 1a001d56 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001d4e:	f000 fab3 	bl	1a0022b8 <vPortExitCritical>
}
1a001d52:	b003      	add	sp, #12
1a001d54:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001d56:	4d0f      	ldr	r5, [pc, #60]	; (1a001d94 <prvCheckForValidListAndQueue+0x54>)
1a001d58:	4628      	mov	r0, r5
1a001d5a:	f7ff f9c4 	bl	1a0010e6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001d5e:	4c0e      	ldr	r4, [pc, #56]	; (1a001d98 <prvCheckForValidListAndQueue+0x58>)
1a001d60:	4620      	mov	r0, r4
1a001d62:	f7ff f9c0 	bl	1a0010e6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001d66:	4b0d      	ldr	r3, [pc, #52]	; (1a001d9c <prvCheckForValidListAndQueue+0x5c>)
1a001d68:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001d6a:	4b0d      	ldr	r3, [pc, #52]	; (1a001da0 <prvCheckForValidListAndQueue+0x60>)
1a001d6c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001d6e:	2300      	movs	r3, #0
1a001d70:	9300      	str	r3, [sp, #0]
1a001d72:	4b0c      	ldr	r3, [pc, #48]	; (1a001da4 <prvCheckForValidListAndQueue+0x64>)
1a001d74:	4a0c      	ldr	r2, [pc, #48]	; (1a001da8 <prvCheckForValidListAndQueue+0x68>)
1a001d76:	2110      	movs	r1, #16
1a001d78:	200a      	movs	r0, #10
1a001d7a:	f7fe fee2 	bl	1a000b42 <xQueueGenericCreateStatic>
1a001d7e:	4b04      	ldr	r3, [pc, #16]	; (1a001d90 <prvCheckForValidListAndQueue+0x50>)
1a001d80:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001d82:	2800      	cmp	r0, #0
1a001d84:	d0e3      	beq.n	1a001d4e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001d86:	4909      	ldr	r1, [pc, #36]	; (1a001dac <prvCheckForValidListAndQueue+0x6c>)
1a001d88:	f7ff f970 	bl	1a00106c <vQueueAddToRegistry>
1a001d8c:	e7df      	b.n	1a001d4e <prvCheckForValidListAndQueue+0xe>
1a001d8e:	bf00      	nop
1a001d90:	10002bc8 	.word	0x10002bc8
1a001d94:	10002b4c 	.word	0x10002b4c
1a001d98:	10002b60 	.word	0x10002b60
1a001d9c:	10002aa4 	.word	0x10002aa4
1a001da0:	10002aa8 	.word	0x10002aa8
1a001da4:	10002b78 	.word	0x10002b78
1a001da8:	10002aac 	.word	0x10002aac
1a001dac:	1a004d78 	.word	0x1a004d78

1a001db0 <prvInitialiseNewTimer>:
{
1a001db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001db4:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a001db6:	b941      	cbnz	r1, 1a001dca <prvInitialiseNewTimer+0x1a>
1a001db8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dbc:	f383 8811 	msr	BASEPRI, r3
1a001dc0:	f3bf 8f6f 	isb	sy
1a001dc4:	f3bf 8f4f 	dsb	sy
1a001dc8:	e7fe      	b.n	1a001dc8 <prvInitialiseNewTimer+0x18>
1a001dca:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a001dcc:	b174      	cbz	r4, 1a001dec <prvInitialiseNewTimer+0x3c>
1a001dce:	461d      	mov	r5, r3
1a001dd0:	4616      	mov	r6, r2
1a001dd2:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a001dd4:	f7ff ffb4 	bl	1a001d40 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a001dd8:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a001ddc:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a001dde:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a001de0:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a001de2:	9b06      	ldr	r3, [sp, #24]
1a001de4:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a001de6:	1d20      	adds	r0, r4, #4
1a001de8:	f7ff f988 	bl	1a0010fc <vListInitialiseItem>
}
1a001dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001df0 <xTimerCreateTimerTask>:
{
1a001df0:	b510      	push	{r4, lr}
1a001df2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001df4:	f7ff ffa4 	bl	1a001d40 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001df8:	4b12      	ldr	r3, [pc, #72]	; (1a001e44 <xTimerCreateTimerTask+0x54>)
1a001dfa:	681b      	ldr	r3, [r3, #0]
1a001dfc:	b1cb      	cbz	r3, 1a001e32 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001dfe:	2400      	movs	r4, #0
1a001e00:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001e02:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001e04:	aa07      	add	r2, sp, #28
1a001e06:	a906      	add	r1, sp, #24
1a001e08:	a805      	add	r0, sp, #20
1a001e0a:	f7ff f9c1 	bl	1a001190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001e0e:	9b05      	ldr	r3, [sp, #20]
1a001e10:	9302      	str	r3, [sp, #8]
1a001e12:	9b06      	ldr	r3, [sp, #24]
1a001e14:	9301      	str	r3, [sp, #4]
1a001e16:	2304      	movs	r3, #4
1a001e18:	9300      	str	r3, [sp, #0]
1a001e1a:	4623      	mov	r3, r4
1a001e1c:	9a07      	ldr	r2, [sp, #28]
1a001e1e:	490a      	ldr	r1, [pc, #40]	; (1a001e48 <xTimerCreateTimerTask+0x58>)
1a001e20:	480a      	ldr	r0, [pc, #40]	; (1a001e4c <xTimerCreateTimerTask+0x5c>)
1a001e22:	f7ff fb7f 	bl	1a001524 <xTaskCreateStatic>
1a001e26:	4b0a      	ldr	r3, [pc, #40]	; (1a001e50 <xTimerCreateTimerTask+0x60>)
1a001e28:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a001e2a:	b110      	cbz	r0, 1a001e32 <xTimerCreateTimerTask+0x42>
}
1a001e2c:	2001      	movs	r0, #1
1a001e2e:	b008      	add	sp, #32
1a001e30:	bd10      	pop	{r4, pc}
1a001e32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e36:	f383 8811 	msr	BASEPRI, r3
1a001e3a:	f3bf 8f6f 	isb	sy
1a001e3e:	f3bf 8f4f 	dsb	sy
1a001e42:	e7fe      	b.n	1a001e42 <xTimerCreateTimerTask+0x52>
1a001e44:	10002bc8 	.word	0x10002bc8
1a001e48:	1a004d80 	.word	0x1a004d80
1a001e4c:	1a00216d 	.word	0x1a00216d
1a001e50:	10002bcc 	.word	0x10002bcc

1a001e54 <xTimerCreate>:
	{
1a001e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e58:	b082      	sub	sp, #8
1a001e5a:	4605      	mov	r5, r0
1a001e5c:	460e      	mov	r6, r1
1a001e5e:	4617      	mov	r7, r2
1a001e60:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
1a001e62:	2030      	movs	r0, #48	; 0x30
1a001e64:	f7fe fcb4 	bl	1a0007d0 <pvPortMalloc>
		if( pxNewTimer != NULL )
1a001e68:	4604      	mov	r4, r0
1a001e6a:	b158      	cbz	r0, 1a001e84 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a001e6c:	9001      	str	r0, [sp, #4]
1a001e6e:	9b08      	ldr	r3, [sp, #32]
1a001e70:	9300      	str	r3, [sp, #0]
1a001e72:	4643      	mov	r3, r8
1a001e74:	463a      	mov	r2, r7
1a001e76:	4631      	mov	r1, r6
1a001e78:	4628      	mov	r0, r5
1a001e7a:	f7ff ff99 	bl	1a001db0 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
1a001e7e:	2300      	movs	r3, #0
1a001e80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a001e84:	4620      	mov	r0, r4
1a001e86:	b002      	add	sp, #8
1a001e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a001e8c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001e8c:	b1c8      	cbz	r0, 1a001ec2 <xTimerGenericCommand+0x36>
{
1a001e8e:	b530      	push	{r4, r5, lr}
1a001e90:	b085      	sub	sp, #20
1a001e92:	4615      	mov	r5, r2
1a001e94:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a001e96:	4a17      	ldr	r2, [pc, #92]	; (1a001ef4 <xTimerGenericCommand+0x68>)
1a001e98:	6810      	ldr	r0, [r2, #0]
1a001e9a:	b340      	cbz	r0, 1a001eee <xTimerGenericCommand+0x62>
1a001e9c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a001e9e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001ea0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001ea2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001ea4:	2905      	cmp	r1, #5
1a001ea6:	dc1d      	bgt.n	1a001ee4 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001ea8:	f7ff feae 	bl	1a001c08 <xTaskGetSchedulerState>
1a001eac:	2802      	cmp	r0, #2
1a001eae:	d011      	beq.n	1a001ed4 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001eb0:	2300      	movs	r3, #0
1a001eb2:	461a      	mov	r2, r3
1a001eb4:	4669      	mov	r1, sp
1a001eb6:	480f      	ldr	r0, [pc, #60]	; (1a001ef4 <xTimerGenericCommand+0x68>)
1a001eb8:	6800      	ldr	r0, [r0, #0]
1a001eba:	f7fe feb1 	bl	1a000c20 <xQueueGenericSend>
}
1a001ebe:	b005      	add	sp, #20
1a001ec0:	bd30      	pop	{r4, r5, pc}
1a001ec2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ec6:	f383 8811 	msr	BASEPRI, r3
1a001eca:	f3bf 8f6f 	isb	sy
1a001ece:	f3bf 8f4f 	dsb	sy
1a001ed2:	e7fe      	b.n	1a001ed2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001ed4:	2300      	movs	r3, #0
1a001ed6:	9a08      	ldr	r2, [sp, #32]
1a001ed8:	4669      	mov	r1, sp
1a001eda:	4806      	ldr	r0, [pc, #24]	; (1a001ef4 <xTimerGenericCommand+0x68>)
1a001edc:	6800      	ldr	r0, [r0, #0]
1a001ede:	f7fe fe9f 	bl	1a000c20 <xQueueGenericSend>
1a001ee2:	e7ec      	b.n	1a001ebe <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001ee4:	2300      	movs	r3, #0
1a001ee6:	4669      	mov	r1, sp
1a001ee8:	f7fe ff58 	bl	1a000d9c <xQueueGenericSendFromISR>
1a001eec:	e7e7      	b.n	1a001ebe <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a001eee:	2000      	movs	r0, #0
	return xReturn;
1a001ef0:	e7e5      	b.n	1a001ebe <xTimerGenericCommand+0x32>
1a001ef2:	bf00      	nop
1a001ef4:	10002bc8 	.word	0x10002bc8

1a001ef8 <prvSwitchTimerLists>:
{
1a001ef8:	b570      	push	{r4, r5, r6, lr}
1a001efa:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001efc:	4b1a      	ldr	r3, [pc, #104]	; (1a001f68 <prvSwitchTimerLists+0x70>)
1a001efe:	681b      	ldr	r3, [r3, #0]
1a001f00:	681a      	ldr	r2, [r3, #0]
1a001f02:	b352      	cbz	r2, 1a001f5a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f04:	68db      	ldr	r3, [r3, #12]
1a001f06:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f08:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001f0a:	1d25      	adds	r5, r4, #4
1a001f0c:	4628      	mov	r0, r5
1a001f0e:	f7ff f91e 	bl	1a00114e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f14:	4620      	mov	r0, r4
1a001f16:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001f18:	69e3      	ldr	r3, [r4, #28]
1a001f1a:	2b01      	cmp	r3, #1
1a001f1c:	d1ee      	bne.n	1a001efc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001f1e:	69a3      	ldr	r3, [r4, #24]
1a001f20:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001f22:	429e      	cmp	r6, r3
1a001f24:	d207      	bcs.n	1a001f36 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001f26:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001f28:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001f2a:	4629      	mov	r1, r5
1a001f2c:	4b0e      	ldr	r3, [pc, #56]	; (1a001f68 <prvSwitchTimerLists+0x70>)
1a001f2e:	6818      	ldr	r0, [r3, #0]
1a001f30:	f7ff f8f3 	bl	1a00111a <vListInsert>
1a001f34:	e7e2      	b.n	1a001efc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001f36:	2100      	movs	r1, #0
1a001f38:	9100      	str	r1, [sp, #0]
1a001f3a:	460b      	mov	r3, r1
1a001f3c:	4632      	mov	r2, r6
1a001f3e:	4620      	mov	r0, r4
1a001f40:	f7ff ffa4 	bl	1a001e8c <xTimerGenericCommand>
				configASSERT( xResult );
1a001f44:	2800      	cmp	r0, #0
1a001f46:	d1d9      	bne.n	1a001efc <prvSwitchTimerLists+0x4>
1a001f48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f4c:	f383 8811 	msr	BASEPRI, r3
1a001f50:	f3bf 8f6f 	isb	sy
1a001f54:	f3bf 8f4f 	dsb	sy
1a001f58:	e7fe      	b.n	1a001f58 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001f5a:	4a04      	ldr	r2, [pc, #16]	; (1a001f6c <prvSwitchTimerLists+0x74>)
1a001f5c:	6810      	ldr	r0, [r2, #0]
1a001f5e:	4902      	ldr	r1, [pc, #8]	; (1a001f68 <prvSwitchTimerLists+0x70>)
1a001f60:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001f62:	6013      	str	r3, [r2, #0]
}
1a001f64:	b002      	add	sp, #8
1a001f66:	bd70      	pop	{r4, r5, r6, pc}
1a001f68:	10002aa4 	.word	0x10002aa4
1a001f6c:	10002aa8 	.word	0x10002aa8

1a001f70 <prvSampleTimeNow>:
{
1a001f70:	b538      	push	{r3, r4, r5, lr}
1a001f72:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001f74:	f7ff fb94 	bl	1a0016a0 <xTaskGetTickCount>
1a001f78:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001f7a:	4b07      	ldr	r3, [pc, #28]	; (1a001f98 <prvSampleTimeNow+0x28>)
1a001f7c:	681b      	ldr	r3, [r3, #0]
1a001f7e:	4283      	cmp	r3, r0
1a001f80:	d805      	bhi.n	1a001f8e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001f82:	2300      	movs	r3, #0
1a001f84:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001f86:	4b04      	ldr	r3, [pc, #16]	; (1a001f98 <prvSampleTimeNow+0x28>)
1a001f88:	601c      	str	r4, [r3, #0]
}
1a001f8a:	4620      	mov	r0, r4
1a001f8c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001f8e:	f7ff ffb3 	bl	1a001ef8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001f92:	2301      	movs	r3, #1
1a001f94:	602b      	str	r3, [r5, #0]
1a001f96:	e7f6      	b.n	1a001f86 <prvSampleTimeNow+0x16>
1a001f98:	10002b74 	.word	0x10002b74

1a001f9c <prvProcessExpiredTimer>:
{
1a001f9c:	b570      	push	{r4, r5, r6, lr}
1a001f9e:	b082      	sub	sp, #8
1a001fa0:	4605      	mov	r5, r0
1a001fa2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001fa4:	4b14      	ldr	r3, [pc, #80]	; (1a001ff8 <prvProcessExpiredTimer+0x5c>)
1a001fa6:	681b      	ldr	r3, [r3, #0]
1a001fa8:	68db      	ldr	r3, [r3, #12]
1a001faa:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001fac:	1d20      	adds	r0, r4, #4
1a001fae:	f7ff f8ce 	bl	1a00114e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001fb2:	69e3      	ldr	r3, [r4, #28]
1a001fb4:	2b01      	cmp	r3, #1
1a001fb6:	d004      	beq.n	1a001fc2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001fba:	4620      	mov	r0, r4
1a001fbc:	4798      	blx	r3
}
1a001fbe:	b002      	add	sp, #8
1a001fc0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001fc2:	69a1      	ldr	r1, [r4, #24]
1a001fc4:	462b      	mov	r3, r5
1a001fc6:	4632      	mov	r2, r6
1a001fc8:	4429      	add	r1, r5
1a001fca:	4620      	mov	r0, r4
1a001fcc:	f7ff fe94 	bl	1a001cf8 <prvInsertTimerInActiveList>
1a001fd0:	2800      	cmp	r0, #0
1a001fd2:	d0f1      	beq.n	1a001fb8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001fd4:	2100      	movs	r1, #0
1a001fd6:	9100      	str	r1, [sp, #0]
1a001fd8:	460b      	mov	r3, r1
1a001fda:	462a      	mov	r2, r5
1a001fdc:	4620      	mov	r0, r4
1a001fde:	f7ff ff55 	bl	1a001e8c <xTimerGenericCommand>
			configASSERT( xResult );
1a001fe2:	2800      	cmp	r0, #0
1a001fe4:	d1e8      	bne.n	1a001fb8 <prvProcessExpiredTimer+0x1c>
1a001fe6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fea:	f383 8811 	msr	BASEPRI, r3
1a001fee:	f3bf 8f6f 	isb	sy
1a001ff2:	f3bf 8f4f 	dsb	sy
1a001ff6:	e7fe      	b.n	1a001ff6 <prvProcessExpiredTimer+0x5a>
1a001ff8:	10002aa4 	.word	0x10002aa4

1a001ffc <prvProcessTimerOrBlockTask>:
{
1a001ffc:	b570      	push	{r4, r5, r6, lr}
1a001ffe:	b082      	sub	sp, #8
1a002000:	4606      	mov	r6, r0
1a002002:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002004:	f7ff fb44 	bl	1a001690 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002008:	a801      	add	r0, sp, #4
1a00200a:	f7ff ffb1 	bl	1a001f70 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00200e:	9b01      	ldr	r3, [sp, #4]
1a002010:	bb1b      	cbnz	r3, 1a00205a <prvProcessTimerOrBlockTask+0x5e>
1a002012:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002014:	b90c      	cbnz	r4, 1a00201a <prvProcessTimerOrBlockTask+0x1e>
1a002016:	42b0      	cmp	r0, r6
1a002018:	d218      	bcs.n	1a00204c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00201a:	b12c      	cbz	r4, 1a002028 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00201c:	4b11      	ldr	r3, [pc, #68]	; (1a002064 <prvProcessTimerOrBlockTask+0x68>)
1a00201e:	681b      	ldr	r3, [r3, #0]
1a002020:	681c      	ldr	r4, [r3, #0]
1a002022:	fab4 f484 	clz	r4, r4
1a002026:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002028:	4622      	mov	r2, r4
1a00202a:	1b71      	subs	r1, r6, r5
1a00202c:	4b0e      	ldr	r3, [pc, #56]	; (1a002068 <prvProcessTimerOrBlockTask+0x6c>)
1a00202e:	6818      	ldr	r0, [r3, #0]
1a002030:	f7ff f830 	bl	1a001094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002034:	f7ff fbc6 	bl	1a0017c4 <xTaskResumeAll>
1a002038:	b988      	cbnz	r0, 1a00205e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00203a:	4b0c      	ldr	r3, [pc, #48]	; (1a00206c <prvProcessTimerOrBlockTask+0x70>)
1a00203c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002040:	601a      	str	r2, [r3, #0]
1a002042:	f3bf 8f4f 	dsb	sy
1a002046:	f3bf 8f6f 	isb	sy
1a00204a:	e008      	b.n	1a00205e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a00204c:	f7ff fbba 	bl	1a0017c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002050:	4629      	mov	r1, r5
1a002052:	4630      	mov	r0, r6
1a002054:	f7ff ffa2 	bl	1a001f9c <prvProcessExpiredTimer>
1a002058:	e001      	b.n	1a00205e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00205a:	f7ff fbb3 	bl	1a0017c4 <xTaskResumeAll>
}
1a00205e:	b002      	add	sp, #8
1a002060:	bd70      	pop	{r4, r5, r6, pc}
1a002062:	bf00      	nop
1a002064:	10002aa8 	.word	0x10002aa8
1a002068:	10002bc8 	.word	0x10002bc8
1a00206c:	e000ed04 	.word	0xe000ed04

1a002070 <prvProcessReceivedCommands>:
{
1a002070:	b530      	push	{r4, r5, lr}
1a002072:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002074:	e002      	b.n	1a00207c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002076:	9b04      	ldr	r3, [sp, #16]
1a002078:	2b00      	cmp	r3, #0
1a00207a:	da0f      	bge.n	1a00209c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00207c:	2200      	movs	r2, #0
1a00207e:	a904      	add	r1, sp, #16
1a002080:	4b39      	ldr	r3, [pc, #228]	; (1a002168 <prvProcessReceivedCommands+0xf8>)
1a002082:	6818      	ldr	r0, [r3, #0]
1a002084:	f7fe fef0 	bl	1a000e68 <xQueueReceive>
1a002088:	2800      	cmp	r0, #0
1a00208a:	d06a      	beq.n	1a002162 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00208c:	9b04      	ldr	r3, [sp, #16]
1a00208e:	2b00      	cmp	r3, #0
1a002090:	daf1      	bge.n	1a002076 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a002092:	9907      	ldr	r1, [sp, #28]
1a002094:	9806      	ldr	r0, [sp, #24]
1a002096:	9b05      	ldr	r3, [sp, #20]
1a002098:	4798      	blx	r3
1a00209a:	e7ec      	b.n	1a002076 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a00209c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a00209e:	6963      	ldr	r3, [r4, #20]
1a0020a0:	b113      	cbz	r3, 1a0020a8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0020a2:	1d20      	adds	r0, r4, #4
1a0020a4:	f7ff f853 	bl	1a00114e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0020a8:	a803      	add	r0, sp, #12
1a0020aa:	f7ff ff61 	bl	1a001f70 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0020ae:	9b04      	ldr	r3, [sp, #16]
1a0020b0:	2b09      	cmp	r3, #9
1a0020b2:	d8e3      	bhi.n	1a00207c <prvProcessReceivedCommands+0xc>
1a0020b4:	a201      	add	r2, pc, #4	; (adr r2, 1a0020bc <prvProcessReceivedCommands+0x4c>)
1a0020b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0020ba:	bf00      	nop
1a0020bc:	1a0020e5 	.word	0x1a0020e5
1a0020c0:	1a0020e5 	.word	0x1a0020e5
1a0020c4:	1a0020e5 	.word	0x1a0020e5
1a0020c8:	1a00207d 	.word	0x1a00207d
1a0020cc:	1a00212d 	.word	0x1a00212d
1a0020d0:	1a002153 	.word	0x1a002153
1a0020d4:	1a0020e5 	.word	0x1a0020e5
1a0020d8:	1a0020e5 	.word	0x1a0020e5
1a0020dc:	1a00207d 	.word	0x1a00207d
1a0020e0:	1a00212d 	.word	0x1a00212d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0020e4:	9905      	ldr	r1, [sp, #20]
1a0020e6:	69a5      	ldr	r5, [r4, #24]
1a0020e8:	460b      	mov	r3, r1
1a0020ea:	4602      	mov	r2, r0
1a0020ec:	4429      	add	r1, r5
1a0020ee:	4620      	mov	r0, r4
1a0020f0:	f7ff fe02 	bl	1a001cf8 <prvInsertTimerInActiveList>
1a0020f4:	2800      	cmp	r0, #0
1a0020f6:	d0c1      	beq.n	1a00207c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0020f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0020fa:	4620      	mov	r0, r4
1a0020fc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020fe:	69e3      	ldr	r3, [r4, #28]
1a002100:	2b01      	cmp	r3, #1
1a002102:	d1bb      	bne.n	1a00207c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002104:	69a2      	ldr	r2, [r4, #24]
1a002106:	2100      	movs	r1, #0
1a002108:	9100      	str	r1, [sp, #0]
1a00210a:	460b      	mov	r3, r1
1a00210c:	9805      	ldr	r0, [sp, #20]
1a00210e:	4402      	add	r2, r0
1a002110:	4620      	mov	r0, r4
1a002112:	f7ff febb 	bl	1a001e8c <xTimerGenericCommand>
							configASSERT( xResult );
1a002116:	2800      	cmp	r0, #0
1a002118:	d1b0      	bne.n	1a00207c <prvProcessReceivedCommands+0xc>
1a00211a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00211e:	f383 8811 	msr	BASEPRI, r3
1a002122:	f3bf 8f6f 	isb	sy
1a002126:	f3bf 8f4f 	dsb	sy
1a00212a:	e7fe      	b.n	1a00212a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00212c:	9905      	ldr	r1, [sp, #20]
1a00212e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002130:	b131      	cbz	r1, 1a002140 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002132:	4603      	mov	r3, r0
1a002134:	4602      	mov	r2, r0
1a002136:	4401      	add	r1, r0
1a002138:	4620      	mov	r0, r4
1a00213a:	f7ff fddd 	bl	1a001cf8 <prvInsertTimerInActiveList>
					break;
1a00213e:	e79d      	b.n	1a00207c <prvProcessReceivedCommands+0xc>
1a002140:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002144:	f383 8811 	msr	BASEPRI, r3
1a002148:	f3bf 8f6f 	isb	sy
1a00214c:	f3bf 8f4f 	dsb	sy
1a002150:	e7fe      	b.n	1a002150 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002152:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002156:	2b00      	cmp	r3, #0
1a002158:	d190      	bne.n	1a00207c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a00215a:	4620      	mov	r0, r4
1a00215c:	f7fe fbc6 	bl	1a0008ec <vPortFree>
1a002160:	e78c      	b.n	1a00207c <prvProcessReceivedCommands+0xc>
}
1a002162:	b009      	add	sp, #36	; 0x24
1a002164:	bd30      	pop	{r4, r5, pc}
1a002166:	bf00      	nop
1a002168:	10002bc8 	.word	0x10002bc8

1a00216c <prvTimerTask>:
{
1a00216c:	b500      	push	{lr}
1a00216e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002170:	a801      	add	r0, sp, #4
1a002172:	f7ff fdb1 	bl	1a001cd8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002176:	9901      	ldr	r1, [sp, #4]
1a002178:	f7ff ff40 	bl	1a001ffc <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a00217c:	f7ff ff78 	bl	1a002070 <prvProcessReceivedCommands>
1a002180:	e7f6      	b.n	1a002170 <prvTimerTask+0x4>

1a002182 <pvTimerGetTimerID>:
void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
1a002182:	b940      	cbnz	r0, 1a002196 <pvTimerGetTimerID+0x14>
1a002184:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002188:	f383 8811 	msr	BASEPRI, r3
1a00218c:	f3bf 8f6f 	isb	sy
1a002190:	f3bf 8f4f 	dsb	sy
1a002194:	e7fe      	b.n	1a002194 <pvTimerGetTimerID+0x12>
{
1a002196:	b510      	push	{r4, lr}
1a002198:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
1a00219a:	f000 f86b 	bl	1a002274 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
1a00219e:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
1a0021a0:	f000 f88a 	bl	1a0022b8 <vPortExitCritical>

	return pvReturn;
}
1a0021a4:	4620      	mov	r0, r4
1a0021a6:	bd10      	pop	{r4, pc}

1a0021a8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0021a8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0021aa:	2300      	movs	r3, #0
1a0021ac:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0021ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0021e4 <prvTaskExitError+0x3c>)
1a0021b0:	681b      	ldr	r3, [r3, #0]
1a0021b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0021b6:	d008      	beq.n	1a0021ca <prvTaskExitError+0x22>
1a0021b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021bc:	f383 8811 	msr	BASEPRI, r3
1a0021c0:	f3bf 8f6f 	isb	sy
1a0021c4:	f3bf 8f4f 	dsb	sy
1a0021c8:	e7fe      	b.n	1a0021c8 <prvTaskExitError+0x20>
1a0021ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021ce:	f383 8811 	msr	BASEPRI, r3
1a0021d2:	f3bf 8f6f 	isb	sy
1a0021d6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0021da:	9b01      	ldr	r3, [sp, #4]
1a0021dc:	2b00      	cmp	r3, #0
1a0021de:	d0fc      	beq.n	1a0021da <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0021e0:	b002      	add	sp, #8
1a0021e2:	4770      	bx	lr
1a0021e4:	10000000 	.word	0x10000000

1a0021e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0021e8:	4808      	ldr	r0, [pc, #32]	; (1a00220c <prvPortStartFirstTask+0x24>)
1a0021ea:	6800      	ldr	r0, [r0, #0]
1a0021ec:	6800      	ldr	r0, [r0, #0]
1a0021ee:	f380 8808 	msr	MSP, r0
1a0021f2:	f04f 0000 	mov.w	r0, #0
1a0021f6:	f380 8814 	msr	CONTROL, r0
1a0021fa:	b662      	cpsie	i
1a0021fc:	b661      	cpsie	f
1a0021fe:	f3bf 8f4f 	dsb	sy
1a002202:	f3bf 8f6f 	isb	sy
1a002206:	df00      	svc	0
1a002208:	bf00      	nop
1a00220a:	0000      	.short	0x0000
1a00220c:	e000ed08 	.word	0xe000ed08

1a002210 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002210:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002220 <vPortEnableVFP+0x10>
1a002214:	6801      	ldr	r1, [r0, #0]
1a002216:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00221a:	6001      	str	r1, [r0, #0]
1a00221c:	4770      	bx	lr
1a00221e:	0000      	.short	0x0000
1a002220:	e000ed88 	.word	0xe000ed88

1a002224 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002228:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a00222c:	f021 0101 	bic.w	r1, r1, #1
1a002230:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002234:	4b05      	ldr	r3, [pc, #20]	; (1a00224c <pxPortInitialiseStack+0x28>)
1a002236:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00223a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00223e:	f06f 0302 	mvn.w	r3, #2
1a002242:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002246:	3844      	subs	r0, #68	; 0x44
1a002248:	4770      	bx	lr
1a00224a:	bf00      	nop
1a00224c:	1a0021a9 	.word	0x1a0021a9

1a002250 <SVC_Handler>:
	__asm volatile (
1a002250:	4b07      	ldr	r3, [pc, #28]	; (1a002270 <pxCurrentTCBConst2>)
1a002252:	6819      	ldr	r1, [r3, #0]
1a002254:	6808      	ldr	r0, [r1, #0]
1a002256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00225a:	f380 8809 	msr	PSP, r0
1a00225e:	f3bf 8f6f 	isb	sy
1a002262:	f04f 0000 	mov.w	r0, #0
1a002266:	f380 8811 	msr	BASEPRI, r0
1a00226a:	4770      	bx	lr
1a00226c:	f3af 8000 	nop.w

1a002270 <pxCurrentTCBConst2>:
1a002270:	1000297c 	.word	0x1000297c

1a002274 <vPortEnterCritical>:
1a002274:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002278:	f383 8811 	msr	BASEPRI, r3
1a00227c:	f3bf 8f6f 	isb	sy
1a002280:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002284:	4a0a      	ldr	r2, [pc, #40]	; (1a0022b0 <vPortEnterCritical+0x3c>)
1a002286:	6813      	ldr	r3, [r2, #0]
1a002288:	3301      	adds	r3, #1
1a00228a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00228c:	2b01      	cmp	r3, #1
1a00228e:	d000      	beq.n	1a002292 <vPortEnterCritical+0x1e>
}
1a002290:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002292:	4b08      	ldr	r3, [pc, #32]	; (1a0022b4 <vPortEnterCritical+0x40>)
1a002294:	681b      	ldr	r3, [r3, #0]
1a002296:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00229a:	d0f9      	beq.n	1a002290 <vPortEnterCritical+0x1c>
1a00229c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022a0:	f383 8811 	msr	BASEPRI, r3
1a0022a4:	f3bf 8f6f 	isb	sy
1a0022a8:	f3bf 8f4f 	dsb	sy
1a0022ac:	e7fe      	b.n	1a0022ac <vPortEnterCritical+0x38>
1a0022ae:	bf00      	nop
1a0022b0:	10000000 	.word	0x10000000
1a0022b4:	e000ed04 	.word	0xe000ed04

1a0022b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0022b8:	4b09      	ldr	r3, [pc, #36]	; (1a0022e0 <vPortExitCritical+0x28>)
1a0022ba:	681b      	ldr	r3, [r3, #0]
1a0022bc:	b943      	cbnz	r3, 1a0022d0 <vPortExitCritical+0x18>
1a0022be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0022c2:	f383 8811 	msr	BASEPRI, r3
1a0022c6:	f3bf 8f6f 	isb	sy
1a0022ca:	f3bf 8f4f 	dsb	sy
1a0022ce:	e7fe      	b.n	1a0022ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0022d0:	3b01      	subs	r3, #1
1a0022d2:	4a03      	ldr	r2, [pc, #12]	; (1a0022e0 <vPortExitCritical+0x28>)
1a0022d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0022d6:	b90b      	cbnz	r3, 1a0022dc <vPortExitCritical+0x24>
	__asm volatile
1a0022d8:	f383 8811 	msr	BASEPRI, r3
}
1a0022dc:	4770      	bx	lr
1a0022de:	bf00      	nop
1a0022e0:	10000000 	.word	0x10000000
1a0022e4:	ffffffff 	.word	0xffffffff
1a0022e8:	ffffffff 	.word	0xffffffff
1a0022ec:	ffffffff 	.word	0xffffffff

1a0022f0 <PendSV_Handler>:
	__asm volatile
1a0022f0:	f3ef 8009 	mrs	r0, PSP
1a0022f4:	f3bf 8f6f 	isb	sy
1a0022f8:	4b15      	ldr	r3, [pc, #84]	; (1a002350 <pxCurrentTCBConst>)
1a0022fa:	681a      	ldr	r2, [r3, #0]
1a0022fc:	f01e 0f10 	tst.w	lr, #16
1a002300:	bf08      	it	eq
1a002302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00230a:	6010      	str	r0, [r2, #0]
1a00230c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002310:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002314:	f380 8811 	msr	BASEPRI, r0
1a002318:	f3bf 8f4f 	dsb	sy
1a00231c:	f3bf 8f6f 	isb	sy
1a002320:	f7ff fb42 	bl	1a0019a8 <vTaskSwitchContext>
1a002324:	f04f 0000 	mov.w	r0, #0
1a002328:	f380 8811 	msr	BASEPRI, r0
1a00232c:	bc09      	pop	{r0, r3}
1a00232e:	6819      	ldr	r1, [r3, #0]
1a002330:	6808      	ldr	r0, [r1, #0]
1a002332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002336:	f01e 0f10 	tst.w	lr, #16
1a00233a:	bf08      	it	eq
1a00233c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002340:	f380 8809 	msr	PSP, r0
1a002344:	f3bf 8f6f 	isb	sy
1a002348:	4770      	bx	lr
1a00234a:	bf00      	nop
1a00234c:	f3af 8000 	nop.w

1a002350 <pxCurrentTCBConst>:
1a002350:	1000297c 	.word	0x1000297c

1a002354 <SysTick_Handler>:
{
1a002354:	b508      	push	{r3, lr}
	__asm volatile
1a002356:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00235a:	f383 8811 	msr	BASEPRI, r3
1a00235e:	f3bf 8f6f 	isb	sy
1a002362:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002366:	f7ff f9a1 	bl	1a0016ac <xTaskIncrementTick>
1a00236a:	b118      	cbz	r0, 1a002374 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00236c:	4b03      	ldr	r3, [pc, #12]	; (1a00237c <SysTick_Handler+0x28>)
1a00236e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002372:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002374:	2300      	movs	r3, #0
1a002376:	f383 8811 	msr	BASEPRI, r3
}
1a00237a:	bd08      	pop	{r3, pc}
1a00237c:	e000ed04 	.word	0xe000ed04

1a002380 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002380:	4a08      	ldr	r2, [pc, #32]	; (1a0023a4 <vPortSetupTimerInterrupt+0x24>)
1a002382:	2300      	movs	r3, #0
1a002384:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002386:	4908      	ldr	r1, [pc, #32]	; (1a0023a8 <vPortSetupTimerInterrupt+0x28>)
1a002388:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00238a:	4b08      	ldr	r3, [pc, #32]	; (1a0023ac <vPortSetupTimerInterrupt+0x2c>)
1a00238c:	681b      	ldr	r3, [r3, #0]
1a00238e:	4908      	ldr	r1, [pc, #32]	; (1a0023b0 <vPortSetupTimerInterrupt+0x30>)
1a002390:	fba1 1303 	umull	r1, r3, r1, r3
1a002394:	099b      	lsrs	r3, r3, #6
1a002396:	3b01      	subs	r3, #1
1a002398:	4906      	ldr	r1, [pc, #24]	; (1a0023b4 <vPortSetupTimerInterrupt+0x34>)
1a00239a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00239c:	2307      	movs	r3, #7
1a00239e:	6013      	str	r3, [r2, #0]
}
1a0023a0:	4770      	bx	lr
1a0023a2:	bf00      	nop
1a0023a4:	e000e010 	.word	0xe000e010
1a0023a8:	e000e018 	.word	0xe000e018
1a0023ac:	10002c60 	.word	0x10002c60
1a0023b0:	10624dd3 	.word	0x10624dd3
1a0023b4:	e000e014 	.word	0xe000e014

1a0023b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0023b8:	4b3a      	ldr	r3, [pc, #232]	; (1a0024a4 <xPortStartScheduler+0xec>)
1a0023ba:	681a      	ldr	r2, [r3, #0]
1a0023bc:	4b3a      	ldr	r3, [pc, #232]	; (1a0024a8 <xPortStartScheduler+0xf0>)
1a0023be:	429a      	cmp	r2, r3
1a0023c0:	d00d      	beq.n	1a0023de <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0023c2:	4b38      	ldr	r3, [pc, #224]	; (1a0024a4 <xPortStartScheduler+0xec>)
1a0023c4:	681a      	ldr	r2, [r3, #0]
1a0023c6:	4b39      	ldr	r3, [pc, #228]	; (1a0024ac <xPortStartScheduler+0xf4>)
1a0023c8:	429a      	cmp	r2, r3
1a0023ca:	d111      	bne.n	1a0023f0 <xPortStartScheduler+0x38>
	__asm volatile
1a0023cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023d0:	f383 8811 	msr	BASEPRI, r3
1a0023d4:	f3bf 8f6f 	isb	sy
1a0023d8:	f3bf 8f4f 	dsb	sy
1a0023dc:	e7fe      	b.n	1a0023dc <xPortStartScheduler+0x24>
1a0023de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023e2:	f383 8811 	msr	BASEPRI, r3
1a0023e6:	f3bf 8f6f 	isb	sy
1a0023ea:	f3bf 8f4f 	dsb	sy
1a0023ee:	e7fe      	b.n	1a0023ee <xPortStartScheduler+0x36>
{
1a0023f0:	b510      	push	{r4, lr}
1a0023f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a0023f4:	4b2e      	ldr	r3, [pc, #184]	; (1a0024b0 <xPortStartScheduler+0xf8>)
1a0023f6:	781a      	ldrb	r2, [r3, #0]
1a0023f8:	b2d2      	uxtb	r2, r2
1a0023fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a0023fc:	22ff      	movs	r2, #255	; 0xff
1a0023fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002400:	781b      	ldrb	r3, [r3, #0]
1a002402:	b2db      	uxtb	r3, r3
1a002404:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002408:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00240c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002410:	4a28      	ldr	r2, [pc, #160]	; (1a0024b4 <xPortStartScheduler+0xfc>)
1a002412:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002414:	4b28      	ldr	r3, [pc, #160]	; (1a0024b8 <xPortStartScheduler+0x100>)
1a002416:	2207      	movs	r2, #7
1a002418:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00241a:	e009      	b.n	1a002430 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00241c:	4a26      	ldr	r2, [pc, #152]	; (1a0024b8 <xPortStartScheduler+0x100>)
1a00241e:	6813      	ldr	r3, [r2, #0]
1a002420:	3b01      	subs	r3, #1
1a002422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002424:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002428:	005b      	lsls	r3, r3, #1
1a00242a:	b2db      	uxtb	r3, r3
1a00242c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002430:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002434:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002438:	d1f0      	bne.n	1a00241c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00243a:	4b1f      	ldr	r3, [pc, #124]	; (1a0024b8 <xPortStartScheduler+0x100>)
1a00243c:	681b      	ldr	r3, [r3, #0]
1a00243e:	2b04      	cmp	r3, #4
1a002440:	d008      	beq.n	1a002454 <xPortStartScheduler+0x9c>
1a002442:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002446:	f383 8811 	msr	BASEPRI, r3
1a00244a:	f3bf 8f6f 	isb	sy
1a00244e:	f3bf 8f4f 	dsb	sy
1a002452:	e7fe      	b.n	1a002452 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002454:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00245a:	4a17      	ldr	r2, [pc, #92]	; (1a0024b8 <xPortStartScheduler+0x100>)
1a00245c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00245e:	9b01      	ldr	r3, [sp, #4]
1a002460:	b2db      	uxtb	r3, r3
1a002462:	4a13      	ldr	r2, [pc, #76]	; (1a0024b0 <xPortStartScheduler+0xf8>)
1a002464:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002466:	4b15      	ldr	r3, [pc, #84]	; (1a0024bc <xPortStartScheduler+0x104>)
1a002468:	681a      	ldr	r2, [r3, #0]
1a00246a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00246e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002470:	681a      	ldr	r2, [r3, #0]
1a002472:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002476:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002478:	f7ff ff82 	bl	1a002380 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00247c:	2400      	movs	r4, #0
1a00247e:	4b10      	ldr	r3, [pc, #64]	; (1a0024c0 <xPortStartScheduler+0x108>)
1a002480:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002482:	f7ff fec5 	bl	1a002210 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002486:	4a0f      	ldr	r2, [pc, #60]	; (1a0024c4 <xPortStartScheduler+0x10c>)
1a002488:	6813      	ldr	r3, [r2, #0]
1a00248a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00248e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002490:	f7ff feaa 	bl	1a0021e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002494:	f7ff fa88 	bl	1a0019a8 <vTaskSwitchContext>
	prvTaskExitError();
1a002498:	f7ff fe86 	bl	1a0021a8 <prvTaskExitError>
}
1a00249c:	4620      	mov	r0, r4
1a00249e:	b002      	add	sp, #8
1a0024a0:	bd10      	pop	{r4, pc}
1a0024a2:	bf00      	nop
1a0024a4:	e000ed00 	.word	0xe000ed00
1a0024a8:	410fc271 	.word	0x410fc271
1a0024ac:	410fc270 	.word	0x410fc270
1a0024b0:	e000e400 	.word	0xe000e400
1a0024b4:	10002bd0 	.word	0x10002bd0
1a0024b8:	10002bd4 	.word	0x10002bd4
1a0024bc:	e000ed20 	.word	0xe000ed20
1a0024c0:	10000000 	.word	0x10000000
1a0024c4:	e000ef34 	.word	0xe000ef34

1a0024c8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0024c8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0024cc:	2b0f      	cmp	r3, #15
1a0024ce:	d90f      	bls.n	1a0024f0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0024d0:	4a10      	ldr	r2, [pc, #64]	; (1a002514 <vPortValidateInterruptPriority+0x4c>)
1a0024d2:	5c9b      	ldrb	r3, [r3, r2]
1a0024d4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0024d6:	4a10      	ldr	r2, [pc, #64]	; (1a002518 <vPortValidateInterruptPriority+0x50>)
1a0024d8:	7812      	ldrb	r2, [r2, #0]
1a0024da:	429a      	cmp	r2, r3
1a0024dc:	d908      	bls.n	1a0024f0 <vPortValidateInterruptPriority+0x28>
1a0024de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024e2:	f383 8811 	msr	BASEPRI, r3
1a0024e6:	f3bf 8f6f 	isb	sy
1a0024ea:	f3bf 8f4f 	dsb	sy
1a0024ee:	e7fe      	b.n	1a0024ee <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0024f0:	4b0a      	ldr	r3, [pc, #40]	; (1a00251c <vPortValidateInterruptPriority+0x54>)
1a0024f2:	681b      	ldr	r3, [r3, #0]
1a0024f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0024f8:	4a09      	ldr	r2, [pc, #36]	; (1a002520 <vPortValidateInterruptPriority+0x58>)
1a0024fa:	6812      	ldr	r2, [r2, #0]
1a0024fc:	4293      	cmp	r3, r2
1a0024fe:	d908      	bls.n	1a002512 <vPortValidateInterruptPriority+0x4a>
1a002500:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002504:	f383 8811 	msr	BASEPRI, r3
1a002508:	f3bf 8f6f 	isb	sy
1a00250c:	f3bf 8f4f 	dsb	sy
1a002510:	e7fe      	b.n	1a002510 <vPortValidateInterruptPriority+0x48>
	}
1a002512:	4770      	bx	lr
1a002514:	e000e3f0 	.word	0xe000e3f0
1a002518:	10002bd0 	.word	0x10002bd0
1a00251c:	e000ed0c 	.word	0xe000ed0c
1a002520:	10002bd4 	.word	0x10002bd4

1a002524 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002524:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002526:	4b05      	ldr	r3, [pc, #20]	; (1a00253c <DAC_IRQHandler+0x18>)
1a002528:	2201      	movs	r2, #1
1a00252a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00252e:	4b04      	ldr	r3, [pc, #16]	; (1a002540 <DAC_IRQHandler+0x1c>)
1a002530:	681b      	ldr	r3, [r3, #0]
1a002532:	b113      	cbz	r3, 1a00253a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002534:	4b02      	ldr	r3, [pc, #8]	; (1a002540 <DAC_IRQHandler+0x1c>)
1a002536:	681b      	ldr	r3, [r3, #0]
1a002538:	4798      	blx	r3
   }
}
1a00253a:	bd08      	pop	{r3, pc}
1a00253c:	e000e100 	.word	0xe000e100
1a002540:	10002bd8 	.word	0x10002bd8

1a002544 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002544:	2200      	movs	r2, #0
1a002546:	2a05      	cmp	r2, #5
1a002548:	d819      	bhi.n	1a00257e <Board_LED_Init+0x3a>
{
1a00254a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00254c:	490c      	ldr	r1, [pc, #48]	; (1a002580 <Board_LED_Init+0x3c>)
1a00254e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002552:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002556:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002558:	4b0a      	ldr	r3, [pc, #40]	; (1a002584 <Board_LED_Init+0x40>)
1a00255a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00255e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002562:	2001      	movs	r0, #1
1a002564:	40a0      	lsls	r0, r4
1a002566:	4301      	orrs	r1, r0
1a002568:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00256c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002570:	2100      	movs	r1, #0
1a002572:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002574:	3201      	adds	r2, #1
1a002576:	2a05      	cmp	r2, #5
1a002578:	d9e8      	bls.n	1a00254c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00257a:	bc70      	pop	{r4, r5, r6}
1a00257c:	4770      	bx	lr
1a00257e:	4770      	bx	lr
1a002580:	1a004d94 	.word	0x1a004d94
1a002584:	400f4000 	.word	0x400f4000

1a002588 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002588:	2300      	movs	r3, #0
1a00258a:	2b03      	cmp	r3, #3
1a00258c:	d816      	bhi.n	1a0025bc <Board_TEC_Init+0x34>
{
1a00258e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002590:	490b      	ldr	r1, [pc, #44]	; (1a0025c0 <Board_TEC_Init+0x38>)
1a002592:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002596:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00259a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00259c:	4c09      	ldr	r4, [pc, #36]	; (1a0025c4 <Board_TEC_Init+0x3c>)
1a00259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0025a2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0025a6:	2001      	movs	r0, #1
1a0025a8:	40a8      	lsls	r0, r5
1a0025aa:	ea21 0100 	bic.w	r1, r1, r0
1a0025ae:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0025b2:	3301      	adds	r3, #1
1a0025b4:	2b03      	cmp	r3, #3
1a0025b6:	d9eb      	bls.n	1a002590 <Board_TEC_Init+0x8>
   }
}
1a0025b8:	bc30      	pop	{r4, r5}
1a0025ba:	4770      	bx	lr
1a0025bc:	4770      	bx	lr
1a0025be:	bf00      	nop
1a0025c0:	1a004d8c 	.word	0x1a004d8c
1a0025c4:	400f4000 	.word	0x400f4000

1a0025c8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0025c8:	2300      	movs	r3, #0
1a0025ca:	2b08      	cmp	r3, #8
1a0025cc:	d816      	bhi.n	1a0025fc <Board_GPIO_Init+0x34>
{
1a0025ce:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0025d0:	490b      	ldr	r1, [pc, #44]	; (1a002600 <Board_GPIO_Init+0x38>)
1a0025d2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0025d6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0025da:	784d      	ldrb	r5, [r1, #1]
1a0025dc:	4c09      	ldr	r4, [pc, #36]	; (1a002604 <Board_GPIO_Init+0x3c>)
1a0025de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0025e2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0025e6:	2001      	movs	r0, #1
1a0025e8:	40a8      	lsls	r0, r5
1a0025ea:	ea21 0100 	bic.w	r1, r1, r0
1a0025ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0025f2:	3301      	adds	r3, #1
1a0025f4:	2b08      	cmp	r3, #8
1a0025f6:	d9eb      	bls.n	1a0025d0 <Board_GPIO_Init+0x8>
   }
}
1a0025f8:	bc30      	pop	{r4, r5}
1a0025fa:	4770      	bx	lr
1a0025fc:	4770      	bx	lr
1a0025fe:	bf00      	nop
1a002600:	1a004da0 	.word	0x1a004da0
1a002604:	400f4000 	.word	0x400f4000

1a002608 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002608:	b510      	push	{r4, lr}
1a00260a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00260c:	4c08      	ldr	r4, [pc, #32]	; (1a002630 <Board_ADC_Init+0x28>)
1a00260e:	4669      	mov	r1, sp
1a002610:	4620      	mov	r0, r4
1a002612:	f000 fa1d 	bl	1a002a50 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002616:	4a07      	ldr	r2, [pc, #28]	; (1a002634 <Board_ADC_Init+0x2c>)
1a002618:	4669      	mov	r1, sp
1a00261a:	4620      	mov	r0, r4
1a00261c:	f000 fa38 	bl	1a002a90 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002620:	2200      	movs	r2, #0
1a002622:	4669      	mov	r1, sp
1a002624:	4620      	mov	r0, r4
1a002626:	f000 fa4c 	bl	1a002ac2 <Chip_ADC_SetResolution>
}
1a00262a:	b002      	add	sp, #8
1a00262c:	bd10      	pop	{r4, pc}
1a00262e:	bf00      	nop
1a002630:	400e3000 	.word	0x400e3000
1a002634:	00061a80 	.word	0x00061a80

1a002638 <Board_SPI_Init>:
{
1a002638:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00263a:	4c0b      	ldr	r4, [pc, #44]	; (1a002668 <Board_SPI_Init+0x30>)
1a00263c:	4620      	mov	r0, r4
1a00263e:	f000 fe03 	bl	1a003248 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002642:	6863      	ldr	r3, [r4, #4]
1a002644:	f023 0304 	bic.w	r3, r3, #4
1a002648:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00264a:	6823      	ldr	r3, [r4, #0]
1a00264c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002650:	f043 0307 	orr.w	r3, r3, #7
1a002654:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002656:	4905      	ldr	r1, [pc, #20]	; (1a00266c <Board_SPI_Init+0x34>)
1a002658:	4620      	mov	r0, r4
1a00265a:	f000 fdd6 	bl	1a00320a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00265e:	6863      	ldr	r3, [r4, #4]
1a002660:	f043 0302 	orr.w	r3, r3, #2
1a002664:	6063      	str	r3, [r4, #4]
}
1a002666:	bd10      	pop	{r4, pc}
1a002668:	400c5000 	.word	0x400c5000
1a00266c:	000186a0 	.word	0x000186a0

1a002670 <Board_I2C_Init>:
{
1a002670:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002672:	2000      	movs	r0, #0
1a002674:	f000 f8c6 	bl	1a002804 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002678:	4b04      	ldr	r3, [pc, #16]	; (1a00268c <Board_I2C_Init+0x1c>)
1a00267a:	f640 0208 	movw	r2, #2056	; 0x808
1a00267e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002682:	4903      	ldr	r1, [pc, #12]	; (1a002690 <Board_I2C_Init+0x20>)
1a002684:	2000      	movs	r0, #0
1a002686:	f000 f8cf 	bl	1a002828 <Chip_I2C_SetClockRate>
}
1a00268a:	bd08      	pop	{r3, pc}
1a00268c:	40086000 	.word	0x40086000
1a002690:	000f4240 	.word	0x000f4240

1a002694 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002694:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002696:	4c07      	ldr	r4, [pc, #28]	; (1a0026b4 <Board_Debug_Init+0x20>)
1a002698:	4620      	mov	r0, r4
1a00269a:	f000 f8f7 	bl	1a00288c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00269e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0026a2:	4620      	mov	r0, r4
1a0026a4:	f000 f93c 	bl	1a002920 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0026a8:	2303      	movs	r3, #3
1a0026aa:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0026ac:	2301      	movs	r3, #1
1a0026ae:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0026b0:	bd10      	pop	{r4, pc}
1a0026b2:	bf00      	nop
1a0026b4:	400c1000 	.word	0x400c1000

1a0026b8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0026b8:	4b03      	ldr	r3, [pc, #12]	; (1a0026c8 <Board_UARTPutChar+0x10>)
1a0026ba:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0026bc:	f013 0f20 	tst.w	r3, #32
1a0026c0:	d0fa      	beq.n	1a0026b8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0026c2:	4b01      	ldr	r3, [pc, #4]	; (1a0026c8 <Board_UARTPutChar+0x10>)
1a0026c4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0026c6:	4770      	bx	lr
1a0026c8:	400c1000 	.word	0x400c1000

1a0026cc <Board_UARTGetChar>:
	return pUART->LSR;
1a0026cc:	4b05      	ldr	r3, [pc, #20]	; (1a0026e4 <Board_UARTGetChar+0x18>)
1a0026ce:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0026d0:	f013 0f01 	tst.w	r3, #1
1a0026d4:	d003      	beq.n	1a0026de <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0026d6:	4b03      	ldr	r3, [pc, #12]	; (1a0026e4 <Board_UARTGetChar+0x18>)
1a0026d8:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0026da:	b2c0      	uxtb	r0, r0
1a0026dc:	4770      	bx	lr
   }
   return EOF;
1a0026de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0026e2:	4770      	bx	lr
1a0026e4:	400c1000 	.word	0x400c1000

1a0026e8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0026e8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0026ea:	f7ff ffd3 	bl	1a002694 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0026ee:	4809      	ldr	r0, [pc, #36]	; (1a002714 <Board_Init+0x2c>)
1a0026f0:	f000 fd6a 	bl	1a0031c8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0026f4:	f7ff ff68 	bl	1a0025c8 <Board_GPIO_Init>
   Board_ADC_Init();
1a0026f8:	f7ff ff86 	bl	1a002608 <Board_ADC_Init>
   Board_SPI_Init();
1a0026fc:	f7ff ff9c 	bl	1a002638 <Board_SPI_Init>
   Board_I2C_Init();
1a002700:	f7ff ffb6 	bl	1a002670 <Board_I2C_Init>

   Board_LED_Init();
1a002704:	f7ff ff1e 	bl	1a002544 <Board_LED_Init>
   Board_TEC_Init();
1a002708:	f7ff ff3e 	bl	1a002588 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00270c:	f000 fca8 	bl	1a003060 <SystemCoreClockUpdate>
}
1a002710:	bd08      	pop	{r3, pc}
1a002712:	bf00      	nop
1a002714:	400f4000 	.word	0x400f4000

1a002718 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002718:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00271a:	b2c0      	uxtb	r0, r0
1a00271c:	f7ff ffcc 	bl	1a0026b8 <Board_UARTPutChar>
}
1a002720:	bd08      	pop	{r3, pc}

1a002722 <__stdio_getchar>:

int __stdio_getchar()
{
1a002722:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002724:	f7ff ffd2 	bl	1a0026cc <Board_UARTGetChar>
}
1a002728:	bd08      	pop	{r3, pc}

1a00272a <__stdio_init>:

void __stdio_init()
{
1a00272a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00272c:	f7ff ffb2 	bl	1a002694 <Board_Debug_Init>
1a002730:	bd08      	pop	{r3, pc}
1a002732:	Address 0x000000001a002732 is out of bounds.


1a002734 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002734:	2300      	movs	r3, #0
1a002736:	2b1c      	cmp	r3, #28
1a002738:	d812      	bhi.n	1a002760 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00273a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00273c:	4a09      	ldr	r2, [pc, #36]	; (1a002764 <Board_SetupMuxing+0x30>)
1a00273e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002742:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002746:	784a      	ldrb	r2, [r1, #1]
1a002748:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00274a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00274e:	4906      	ldr	r1, [pc, #24]	; (1a002768 <Board_SetupMuxing+0x34>)
1a002750:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002754:	3301      	adds	r3, #1
1a002756:	2b1c      	cmp	r3, #28
1a002758:	d9f0      	bls.n	1a00273c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00275a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00275e:	4770      	bx	lr
1a002760:	4770      	bx	lr
1a002762:	bf00      	nop
1a002764:	1a004dbc 	.word	0x1a004dbc
1a002768:	40086000 	.word	0x40086000

1a00276c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00276c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00276e:	4a17      	ldr	r2, [pc, #92]	; (1a0027cc <Board_SetupClocking+0x60>)
1a002770:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002778:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00277c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002780:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002788:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00278c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002790:	2201      	movs	r2, #1
1a002792:	490f      	ldr	r1, [pc, #60]	; (1a0027d0 <Board_SetupClocking+0x64>)
1a002794:	2006      	movs	r0, #6
1a002796:	f000 fc6d 	bl	1a003074 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00279a:	2400      	movs	r4, #0
1a00279c:	b14c      	cbz	r4, 1a0027b2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00279e:	4b0b      	ldr	r3, [pc, #44]	; (1a0027cc <Board_SetupClocking+0x60>)
1a0027a0:	685a      	ldr	r2, [r3, #4]
1a0027a2:	f022 020c 	bic.w	r2, r2, #12
1a0027a6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0027a8:	685a      	ldr	r2, [r3, #4]
1a0027aa:	f042 0203 	orr.w	r2, r2, #3
1a0027ae:	605a      	str	r2, [r3, #4]
}
1a0027b0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0027b2:	4808      	ldr	r0, [pc, #32]	; (1a0027d4 <Board_SetupClocking+0x68>)
1a0027b4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0027b8:	2301      	movs	r3, #1
1a0027ba:	788a      	ldrb	r2, [r1, #2]
1a0027bc:	7849      	ldrb	r1, [r1, #1]
1a0027be:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0027c2:	f000 fba9 	bl	1a002f18 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0027c6:	3401      	adds	r4, #1
1a0027c8:	e7e8      	b.n	1a00279c <Board_SetupClocking+0x30>
1a0027ca:	bf00      	nop
1a0027cc:	40043000 	.word	0x40043000
1a0027d0:	0c28cb00 	.word	0x0c28cb00
1a0027d4:	1a004db8 	.word	0x1a004db8

1a0027d8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0027d8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0027da:	f7ff ffab 	bl	1a002734 <Board_SetupMuxing>
    Board_SetupClocking();
1a0027de:	f7ff ffc5 	bl	1a00276c <Board_SetupClocking>
}
1a0027e2:	bd08      	pop	{r3, pc}

1a0027e4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0027e4:	2901      	cmp	r1, #1
1a0027e6:	d000      	beq.n	1a0027ea <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0027e8:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0027ea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0027ee:	0082      	lsls	r2, r0, #2
1a0027f0:	4b03      	ldr	r3, [pc, #12]	; (1a002800 <Chip_I2C_EventHandler+0x1c>)
1a0027f2:	4413      	add	r3, r2
1a0027f4:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0027f6:	7d13      	ldrb	r3, [r2, #20]
1a0027f8:	b2db      	uxtb	r3, r3
1a0027fa:	2b04      	cmp	r3, #4
1a0027fc:	d0fb      	beq.n	1a0027f6 <Chip_I2C_EventHandler+0x12>
1a0027fe:	e7f3      	b.n	1a0027e8 <Chip_I2C_EventHandler+0x4>
1a002800:	10000004 	.word	0x10000004

1a002804 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a002804:	b570      	push	{r4, r5, r6, lr}
1a002806:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002808:	4e06      	ldr	r6, [pc, #24]	; (1a002824 <Chip_I2C_Init+0x20>)
1a00280a:	00c4      	lsls	r4, r0, #3
1a00280c:	1a22      	subs	r2, r4, r0
1a00280e:	0093      	lsls	r3, r2, #2
1a002810:	4433      	add	r3, r6
1a002812:	8898      	ldrh	r0, [r3, #4]
1a002814:	f000 fbe4 	bl	1a002fe0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002818:	1b64      	subs	r4, r4, r5
1a00281a:	00a3      	lsls	r3, r4, #2
1a00281c:	58f3      	ldr	r3, [r6, r3]
1a00281e:	226c      	movs	r2, #108	; 0x6c
1a002820:	619a      	str	r2, [r3, #24]
}
1a002822:	bd70      	pop	{r4, r5, r6, pc}
1a002824:	10000004 	.word	0x10000004

1a002828 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00282c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00282e:	4e0b      	ldr	r6, [pc, #44]	; (1a00285c <Chip_I2C_SetClockRate+0x34>)
1a002830:	00c5      	lsls	r5, r0, #3
1a002832:	1a2b      	subs	r3, r5, r0
1a002834:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a002838:	eb06 0308 	add.w	r3, r6, r8
1a00283c:	8898      	ldrh	r0, [r3, #4]
1a00283e:	f000 fbe9 	bl	1a003014 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002842:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002846:	f856 3008 	ldr.w	r3, [r6, r8]
1a00284a:	0842      	lsrs	r2, r0, #1
1a00284c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00284e:	f856 3008 	ldr.w	r3, [r6, r8]
1a002852:	691a      	ldr	r2, [r3, #16]
1a002854:	1a80      	subs	r0, r0, r2
1a002856:	6158      	str	r0, [r3, #20]
}
1a002858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00285c:	10000004 	.word	0x10000004

1a002860 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002860:	4b09      	ldr	r3, [pc, #36]	; (1a002888 <Chip_UART_GetIndex+0x28>)
1a002862:	4298      	cmp	r0, r3
1a002864:	d009      	beq.n	1a00287a <Chip_UART_GetIndex+0x1a>
1a002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00286a:	4298      	cmp	r0, r3
1a00286c:	d007      	beq.n	1a00287e <Chip_UART_GetIndex+0x1e>
1a00286e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002872:	4298      	cmp	r0, r3
1a002874:	d005      	beq.n	1a002882 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002876:	2000      	movs	r0, #0
1a002878:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00287a:	2002      	movs	r0, #2
1a00287c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00287e:	2003      	movs	r0, #3
1a002880:	4770      	bx	lr
			return 1;
1a002882:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002884:	4770      	bx	lr
1a002886:	bf00      	nop
1a002888:	400c1000 	.word	0x400c1000

1a00288c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00288c:	b530      	push	{r4, r5, lr}
1a00288e:	b083      	sub	sp, #12
1a002890:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002892:	f7ff ffe5 	bl	1a002860 <Chip_UART_GetIndex>
1a002896:	2301      	movs	r3, #1
1a002898:	461a      	mov	r2, r3
1a00289a:	4619      	mov	r1, r3
1a00289c:	4d0e      	ldr	r5, [pc, #56]	; (1a0028d8 <Chip_UART_Init+0x4c>)
1a00289e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0028a2:	f000 fb7f 	bl	1a002fa4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0028a6:	2307      	movs	r3, #7
1a0028a8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0028aa:	2300      	movs	r3, #0
1a0028ac:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0028ae:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0028b0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0028b2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0028b4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0028b6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0028b8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0028ba:	4b08      	ldr	r3, [pc, #32]	; (1a0028dc <Chip_UART_Init+0x50>)
1a0028bc:	429c      	cmp	r4, r3
1a0028be:	d006      	beq.n	1a0028ce <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0028c0:	2303      	movs	r3, #3
1a0028c2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0028c4:	2310      	movs	r3, #16
1a0028c6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0028c8:	9b01      	ldr	r3, [sp, #4]
}
1a0028ca:	b003      	add	sp, #12
1a0028cc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0028ce:	2300      	movs	r3, #0
1a0028d0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0028d2:	69a3      	ldr	r3, [r4, #24]
1a0028d4:	9301      	str	r3, [sp, #4]
1a0028d6:	e7f3      	b.n	1a0028c0 <Chip_UART_Init+0x34>
1a0028d8:	1a004e38 	.word	0x1a004e38
1a0028dc:	40082000 	.word	0x40082000

1a0028e0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0028e0:	b538      	push	{r3, r4, r5, lr}
1a0028e2:	4605      	mov	r5, r0
1a0028e4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0028e6:	f7ff ffbb 	bl	1a002860 <Chip_UART_GetIndex>
1a0028ea:	4b0c      	ldr	r3, [pc, #48]	; (1a00291c <Chip_UART_SetBaud+0x3c>)
1a0028ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0028f0:	f000 fb90 	bl	1a003014 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0028f4:	0123      	lsls	r3, r4, #4
1a0028f6:	fbb0 f3f3 	udiv	r3, r0, r3
1a0028fa:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0028fc:	68ea      	ldr	r2, [r5, #12]
1a0028fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002902:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002904:	6029      	str	r1, [r5, #0]
1a002906:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a00290a:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00290c:	68ea      	ldr	r2, [r5, #12]
1a00290e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002912:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002914:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002918:	0900      	lsrs	r0, r0, #4
1a00291a:	bd38      	pop	{r3, r4, r5, pc}
1a00291c:	1a004e30 	.word	0x1a004e30

1a002920 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002924:	b083      	sub	sp, #12
1a002926:	4683      	mov	fp, r0
1a002928:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00292a:	f7ff ff99 	bl	1a002860 <Chip_UART_GetIndex>
1a00292e:	4b35      	ldr	r3, [pc, #212]	; (1a002a04 <Chip_UART_SetBaudFDR+0xe4>)
1a002930:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002934:	f000 fb6e 	bl	1a003014 <Chip_Clock_GetRate>
1a002938:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00293a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00293e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002940:	2300      	movs	r3, #0
1a002942:	9301      	str	r3, [sp, #4]
1a002944:	46a2      	mov	sl, r4
1a002946:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002948:	e02a      	b.n	1a0029a0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00294a:	4242      	negs	r2, r0
				div ++;
1a00294c:	1c4b      	adds	r3, r1, #1
1a00294e:	e017      	b.n	1a002980 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002950:	b30a      	cbz	r2, 1a002996 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002952:	4617      	mov	r7, r2
			sd = d;
1a002954:	9501      	str	r5, [sp, #4]
			sm = m;
1a002956:	46a2      	mov	sl, r4
			sdiv = div;
1a002958:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00295a:	3501      	adds	r5, #1
1a00295c:	42ac      	cmp	r4, r5
1a00295e:	d91e      	bls.n	1a00299e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002960:	0933      	lsrs	r3, r6, #4
1a002962:	0730      	lsls	r0, r6, #28
1a002964:	fba4 0100 	umull	r0, r1, r4, r0
1a002968:	fb04 1103 	mla	r1, r4, r3, r1
1a00296c:	1962      	adds	r2, r4, r5
1a00296e:	fb08 f202 	mul.w	r2, r8, r2
1a002972:	2300      	movs	r3, #0
1a002974:	f001 f8aa 	bl	1a003acc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002978:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00297a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00297c:	2800      	cmp	r0, #0
1a00297e:	dbe4      	blt.n	1a00294a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002980:	4297      	cmp	r7, r2
1a002982:	d3ea      	bcc.n	1a00295a <Chip_UART_SetBaudFDR+0x3a>
1a002984:	2b00      	cmp	r3, #0
1a002986:	d0e8      	beq.n	1a00295a <Chip_UART_SetBaudFDR+0x3a>
1a002988:	0c19      	lsrs	r1, r3, #16
1a00298a:	d1e6      	bne.n	1a00295a <Chip_UART_SetBaudFDR+0x3a>
1a00298c:	2b02      	cmp	r3, #2
1a00298e:	d8df      	bhi.n	1a002950 <Chip_UART_SetBaudFDR+0x30>
1a002990:	2d00      	cmp	r5, #0
1a002992:	d0dd      	beq.n	1a002950 <Chip_UART_SetBaudFDR+0x30>
1a002994:	e7e1      	b.n	1a00295a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002996:	4617      	mov	r7, r2
			sd = d;
1a002998:	9501      	str	r5, [sp, #4]
			sm = m;
1a00299a:	46a2      	mov	sl, r4
			sdiv = div;
1a00299c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00299e:	3401      	adds	r4, #1
1a0029a0:	b11f      	cbz	r7, 1a0029aa <Chip_UART_SetBaudFDR+0x8a>
1a0029a2:	2c0f      	cmp	r4, #15
1a0029a4:	d801      	bhi.n	1a0029aa <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0029a6:	2500      	movs	r5, #0
1a0029a8:	e7d8      	b.n	1a00295c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0029aa:	f1b9 0f00 	cmp.w	r9, #0
1a0029ae:	d024      	beq.n	1a0029fa <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0029b0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0029b8:	f8cb 300c 	str.w	r3, [fp, #12]
1a0029bc:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0029c0:	f8cb 3000 	str.w	r3, [fp]
1a0029c4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0029c8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0029cc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0029d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0029d4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0029d8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0029dc:	b2db      	uxtb	r3, r3
1a0029de:	9901      	ldr	r1, [sp, #4]
1a0029e0:	f001 020f 	and.w	r2, r1, #15
1a0029e4:	4313      	orrs	r3, r2
1a0029e6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0029ea:	0933      	lsrs	r3, r6, #4
1a0029ec:	fb0a f303 	mul.w	r3, sl, r3
1a0029f0:	448a      	add	sl, r1
1a0029f2:	fb09 f90a 	mul.w	r9, r9, sl
1a0029f6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0029fa:	4648      	mov	r0, r9
1a0029fc:	b003      	add	sp, #12
1a0029fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a02:	bf00      	nop
1a002a04:	1a004e30 	.word	0x1a004e30

1a002a08 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002a08:	4b03      	ldr	r3, [pc, #12]	; (1a002a18 <Chip_ADC_GetClockIndex+0x10>)
1a002a0a:	4298      	cmp	r0, r3
1a002a0c:	d001      	beq.n	1a002a12 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002a0e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002a10:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002a12:	2004      	movs	r0, #4
1a002a14:	4770      	bx	lr
1a002a16:	bf00      	nop
1a002a18:	400e4000 	.word	0x400e4000

1a002a1c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002a1c:	b570      	push	{r4, r5, r6, lr}
1a002a1e:	460d      	mov	r5, r1
1a002a20:	4614      	mov	r4, r2
1a002a22:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002a24:	f7ff fff0 	bl	1a002a08 <Chip_ADC_GetClockIndex>
1a002a28:	f000 faf4 	bl	1a003014 <Chip_Clock_GetRate>
	if (burstMode) {
1a002a2c:	b965      	cbnz	r5, 1a002a48 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002a2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002a32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002a36:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002a3a:	0064      	lsls	r4, r4, #1
1a002a3c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002a40:	b2c0      	uxtb	r0, r0
1a002a42:	3801      	subs	r0, #1
	return div;
}
1a002a44:	b2c0      	uxtb	r0, r0
1a002a46:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002a48:	fb04 f406 	mul.w	r4, r4, r6
1a002a4c:	e7f3      	b.n	1a002a36 <getClkDiv+0x1a>
1a002a4e:	Address 0x000000001a002a4e is out of bounds.


1a002a50 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002a50:	b538      	push	{r3, r4, r5, lr}
1a002a52:	4605      	mov	r5, r0
1a002a54:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002a56:	f7ff ffd7 	bl	1a002a08 <Chip_ADC_GetClockIndex>
1a002a5a:	2301      	movs	r3, #1
1a002a5c:	461a      	mov	r2, r3
1a002a5e:	4619      	mov	r1, r3
1a002a60:	f000 faa0 	bl	1a002fa4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002a64:	2100      	movs	r1, #0
1a002a66:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002a68:	4a08      	ldr	r2, [pc, #32]	; (1a002a8c <Chip_ADC_Init+0x3c>)
1a002a6a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002a6c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002a6e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002a70:	230b      	movs	r3, #11
1a002a72:	4628      	mov	r0, r5
1a002a74:	f7ff ffd2 	bl	1a002a1c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002a78:	0200      	lsls	r0, r0, #8
1a002a7a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002a7e:	7920      	ldrb	r0, [r4, #4]
1a002a80:	0440      	lsls	r0, r0, #17
1a002a82:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002a86:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002a88:	6028      	str	r0, [r5, #0]
}
1a002a8a:	bd38      	pop	{r3, r4, r5, pc}
1a002a8c:	00061a80 	.word	0x00061a80

1a002a90 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002a90:	b570      	push	{r4, r5, r6, lr}
1a002a92:	4605      	mov	r5, r0
1a002a94:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002a96:	6804      	ldr	r4, [r0, #0]
1a002a98:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002a9c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002aa0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002aa2:	790b      	ldrb	r3, [r1, #4]
1a002aa4:	f1c3 030b 	rsb	r3, r3, #11
1a002aa8:	b2db      	uxtb	r3, r3
1a002aaa:	7949      	ldrb	r1, [r1, #5]
1a002aac:	f7ff ffb6 	bl	1a002a1c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002ab0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002ab4:	7930      	ldrb	r0, [r6, #4]
1a002ab6:	0440      	lsls	r0, r0, #17
1a002ab8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002abc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002abe:	6028      	str	r0, [r5, #0]
}
1a002ac0:	bd70      	pop	{r4, r5, r6, pc}

1a002ac2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002ac2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002ac4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002ac6:	680a      	ldr	r2, [r1, #0]
1a002ac8:	f7ff ffe2 	bl	1a002a90 <Chip_ADC_SetSampleRate>
}
1a002acc:	bd08      	pop	{r3, pc}
1a002ace:	Address 0x000000001a002ace is out of bounds.


1a002ad0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ad0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002ad2:	680b      	ldr	r3, [r1, #0]
1a002ad4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ad8:	d002      	beq.n	1a002ae0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002ade:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002ae0:	4607      	mov	r7, r0
1a002ae2:	2501      	movs	r5, #1
1a002ae4:	e03b      	b.n	1a002b5e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002ae6:	694b      	ldr	r3, [r1, #20]
1a002ae8:	fb03 f302 	mul.w	r3, r3, r2
1a002aec:	fbb3 f3f5 	udiv	r3, r3, r5
1a002af0:	e014      	b.n	1a002b1c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002af2:	461c      	mov	r4, r3
1a002af4:	e020      	b.n	1a002b38 <pll_calc_divs+0x68>
		return -val;
1a002af6:	f1cc 0c00 	rsb	ip, ip, #0
1a002afa:	e020      	b.n	1a002b3e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002afc:	3201      	adds	r2, #1
1a002afe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002b02:	dc26      	bgt.n	1a002b52 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002b04:	680c      	ldr	r4, [r1, #0]
1a002b06:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002b0a:	d0ec      	beq.n	1a002ae6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002b0c:	1c73      	adds	r3, r6, #1
1a002b0e:	fa02 fc03 	lsl.w	ip, r2, r3
1a002b12:	694b      	ldr	r3, [r1, #20]
1a002b14:	fb03 f30c 	mul.w	r3, r3, ip
1a002b18:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002b1c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002b6c <pll_calc_divs+0x9c>
1a002b20:	4563      	cmp	r3, ip
1a002b22:	d9eb      	bls.n	1a002afc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002b24:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002b70 <pll_calc_divs+0xa0>
1a002b28:	4563      	cmp	r3, ip
1a002b2a:	d812      	bhi.n	1a002b52 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002b2c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002b30:	d1df      	bne.n	1a002af2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002b32:	1c74      	adds	r4, r6, #1
1a002b34:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002b38:	ebb0 0c04 	subs.w	ip, r0, r4
1a002b3c:	d4db      	bmi.n	1a002af6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002b3e:	4567      	cmp	r7, ip
1a002b40:	d9dc      	bls.n	1a002afc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002b42:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002b44:	1c77      	adds	r7, r6, #1
1a002b46:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002b48:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002b4a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002b4c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002b4e:	4667      	mov	r7, ip
1a002b50:	e7d4      	b.n	1a002afc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002b52:	3601      	adds	r6, #1
1a002b54:	2e03      	cmp	r6, #3
1a002b56:	dc01      	bgt.n	1a002b5c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002b58:	2201      	movs	r2, #1
1a002b5a:	e7d0      	b.n	1a002afe <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002b5c:	3501      	adds	r5, #1
1a002b5e:	2d04      	cmp	r5, #4
1a002b60:	dc01      	bgt.n	1a002b66 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002b62:	2600      	movs	r6, #0
1a002b64:	e7f6      	b.n	1a002b54 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002b66:	bcf0      	pop	{r4, r5, r6, r7}
1a002b68:	4770      	bx	lr
1a002b6a:	bf00      	nop
1a002b6c:	094c5eff 	.word	0x094c5eff
1a002b70:	1312d000 	.word	0x1312d000

1a002b74 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002b76:	b099      	sub	sp, #100	; 0x64
1a002b78:	4605      	mov	r5, r0
1a002b7a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002b7c:	225c      	movs	r2, #92	; 0x5c
1a002b7e:	2100      	movs	r1, #0
1a002b80:	a801      	add	r0, sp, #4
1a002b82:	f001 facc 	bl	1a00411e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002b86:	2380      	movs	r3, #128	; 0x80
1a002b88:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002b8a:	6963      	ldr	r3, [r4, #20]
1a002b8c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002b8e:	7923      	ldrb	r3, [r4, #4]
1a002b90:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002b94:	4669      	mov	r1, sp
1a002b96:	4628      	mov	r0, r5
1a002b98:	f7ff ff9a 	bl	1a002ad0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002b9c:	9b06      	ldr	r3, [sp, #24]
1a002b9e:	42ab      	cmp	r3, r5
1a002ba0:	d027      	beq.n	1a002bf2 <pll_get_frac+0x7e>
	if (val < 0)
1a002ba2:	1aeb      	subs	r3, r5, r3
1a002ba4:	d42e      	bmi.n	1a002c04 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002ba6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002ba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002bae:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002bb0:	6963      	ldr	r3, [r4, #20]
1a002bb2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002bb4:	7923      	ldrb	r3, [r4, #4]
1a002bb6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002bba:	a910      	add	r1, sp, #64	; 0x40
1a002bbc:	4628      	mov	r0, r5
1a002bbe:	f7ff ff87 	bl	1a002ad0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002bc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002bc4:	42ab      	cmp	r3, r5
1a002bc6:	d01f      	beq.n	1a002c08 <pll_get_frac+0x94>
	if (val < 0)
1a002bc8:	1aeb      	subs	r3, r5, r3
1a002bca:	d425      	bmi.n	1a002c18 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002bcc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002bce:	4b2b      	ldr	r3, [pc, #172]	; (1a002c7c <pll_get_frac+0x108>)
1a002bd0:	429d      	cmp	r5, r3
1a002bd2:	d923      	bls.n	1a002c1c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002bd6:	1aed      	subs	r5, r5, r3
1a002bd8:	d433      	bmi.n	1a002c42 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002bda:	42ae      	cmp	r6, r5
1a002bdc:	dc3b      	bgt.n	1a002c56 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002bde:	42be      	cmp	r6, r7
1a002be0:	dc31      	bgt.n	1a002c46 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002be2:	466d      	mov	r5, sp
1a002be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002be8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002bf0:	e006      	b.n	1a002c00 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002bf2:	466d      	mov	r5, sp
1a002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002c00:	b019      	add	sp, #100	; 0x64
1a002c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002c04:	425b      	negs	r3, r3
1a002c06:	e7ce      	b.n	1a002ba6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002c08:	ad10      	add	r5, sp, #64	; 0x40
1a002c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002c16:	e7f3      	b.n	1a002c00 <pll_get_frac+0x8c>
		return -val;
1a002c18:	425b      	negs	r3, r3
1a002c1a:	e7d7      	b.n	1a002bcc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002c1c:	2340      	movs	r3, #64	; 0x40
1a002c1e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002c20:	6963      	ldr	r3, [r4, #20]
1a002c22:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002c24:	a908      	add	r1, sp, #32
1a002c26:	4628      	mov	r0, r5
1a002c28:	f7ff ff52 	bl	1a002ad0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002c2e:	42ab      	cmp	r3, r5
1a002c30:	d1d0      	bne.n	1a002bd4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002c32:	ad08      	add	r5, sp, #32
1a002c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002c40:	e7de      	b.n	1a002c00 <pll_get_frac+0x8c>
		return -val;
1a002c42:	426d      	negs	r5, r5
1a002c44:	e7c9      	b.n	1a002bda <pll_get_frac+0x66>
			*ppll = pll[2];
1a002c46:	ad10      	add	r5, sp, #64	; 0x40
1a002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c54:	e7d4      	b.n	1a002c00 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002c56:	42af      	cmp	r7, r5
1a002c58:	db07      	blt.n	1a002c6a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002c5a:	ad08      	add	r5, sp, #32
1a002c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c68:	e7ca      	b.n	1a002c00 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002c6a:	ad10      	add	r5, sp, #64	; 0x40
1a002c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c78:	e7c2      	b.n	1a002c00 <pll_get_frac+0x8c>
1a002c7a:	bf00      	nop
1a002c7c:	068e7780 	.word	0x068e7780

1a002c80 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002c80:	b430      	push	{r4, r5}
1a002c82:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002c84:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002c86:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c88:	e000      	b.n	1a002c8c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002c8a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c8c:	281c      	cmp	r0, #28
1a002c8e:	d118      	bne.n	1a002cc2 <Chip_Clock_FindBaseClock+0x42>
1a002c90:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c94:	0051      	lsls	r1, r2, #1
1a002c96:	4a0c      	ldr	r2, [pc, #48]	; (1a002cc8 <Chip_Clock_FindBaseClock+0x48>)
1a002c98:	440a      	add	r2, r1
1a002c9a:	7914      	ldrb	r4, [r2, #4]
1a002c9c:	4284      	cmp	r4, r0
1a002c9e:	d010      	beq.n	1a002cc2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002ca0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002ca4:	004a      	lsls	r2, r1, #1
1a002ca6:	4908      	ldr	r1, [pc, #32]	; (1a002cc8 <Chip_Clock_FindBaseClock+0x48>)
1a002ca8:	5a8a      	ldrh	r2, [r1, r2]
1a002caa:	42aa      	cmp	r2, r5
1a002cac:	d8ed      	bhi.n	1a002c8a <Chip_Clock_FindBaseClock+0xa>
1a002cae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002cb2:	0051      	lsls	r1, r2, #1
1a002cb4:	4a04      	ldr	r2, [pc, #16]	; (1a002cc8 <Chip_Clock_FindBaseClock+0x48>)
1a002cb6:	440a      	add	r2, r1
1a002cb8:	8852      	ldrh	r2, [r2, #2]
1a002cba:	42aa      	cmp	r2, r5
1a002cbc:	d3e5      	bcc.n	1a002c8a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002cbe:	4620      	mov	r0, r4
1a002cc0:	e7e4      	b.n	1a002c8c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002cc2:	bc30      	pop	{r4, r5}
1a002cc4:	4770      	bx	lr
1a002cc6:	bf00      	nop
1a002cc8:	1a004e4c 	.word	0x1a004e4c

1a002ccc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002ccc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002cd2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002cd4:	4a0d      	ldr	r2, [pc, #52]	; (1a002d0c <Chip_Clock_EnableCrystal+0x40>)
1a002cd6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002cd8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002cdc:	6992      	ldr	r2, [r2, #24]
1a002cde:	428a      	cmp	r2, r1
1a002ce0:	d001      	beq.n	1a002ce6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002ce2:	4a0a      	ldr	r2, [pc, #40]	; (1a002d0c <Chip_Clock_EnableCrystal+0x40>)
1a002ce4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002ce6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002cea:	4a09      	ldr	r2, [pc, #36]	; (1a002d10 <Chip_Clock_EnableCrystal+0x44>)
1a002cec:	6811      	ldr	r1, [r2, #0]
1a002cee:	4a09      	ldr	r2, [pc, #36]	; (1a002d14 <Chip_Clock_EnableCrystal+0x48>)
1a002cf0:	4291      	cmp	r1, r2
1a002cf2:	d901      	bls.n	1a002cf8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002cf4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002cf8:	4a04      	ldr	r2, [pc, #16]	; (1a002d0c <Chip_Clock_EnableCrystal+0x40>)
1a002cfa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002cfc:	9b01      	ldr	r3, [sp, #4]
1a002cfe:	1e5a      	subs	r2, r3, #1
1a002d00:	9201      	str	r2, [sp, #4]
1a002d02:	2b00      	cmp	r3, #0
1a002d04:	d1fa      	bne.n	1a002cfc <Chip_Clock_EnableCrystal+0x30>
}
1a002d06:	b002      	add	sp, #8
1a002d08:	4770      	bx	lr
1a002d0a:	bf00      	nop
1a002d0c:	40050000 	.word	0x40050000
1a002d10:	1a004db4 	.word	0x1a004db4
1a002d14:	01312cff 	.word	0x01312cff

1a002d18 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002d18:	3012      	adds	r0, #18
1a002d1a:	4b05      	ldr	r3, [pc, #20]	; (1a002d30 <Chip_Clock_GetDividerSource+0x18>)
1a002d1c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002d20:	f010 0f01 	tst.w	r0, #1
1a002d24:	d102      	bne.n	1a002d2c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d26:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d2a:	4770      	bx	lr
		return CLKINPUT_PD;
1a002d2c:	2011      	movs	r0, #17
}
1a002d2e:	4770      	bx	lr
1a002d30:	40050000 	.word	0x40050000

1a002d34 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002d34:	f100 0212 	add.w	r2, r0, #18
1a002d38:	4b03      	ldr	r3, [pc, #12]	; (1a002d48 <Chip_Clock_GetDividerDivisor+0x14>)
1a002d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002d3e:	4b03      	ldr	r3, [pc, #12]	; (1a002d4c <Chip_Clock_GetDividerDivisor+0x18>)
1a002d40:	5c18      	ldrb	r0, [r3, r0]
}
1a002d42:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002d46:	4770      	bx	lr
1a002d48:	40050000 	.word	0x40050000
1a002d4c:	1a004e44 	.word	0x1a004e44

1a002d50 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002d50:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002d52:	2810      	cmp	r0, #16
1a002d54:	d80a      	bhi.n	1a002d6c <Chip_Clock_GetClockInputHz+0x1c>
1a002d56:	e8df f000 	tbb	[pc, r0]
1a002d5a:	0b42      	.short	0x0b42
1a002d5c:	091f160d 	.word	0x091f160d
1a002d60:	2b282522 	.word	0x2b282522
1a002d64:	322e0909 	.word	0x322e0909
1a002d68:	3a36      	.short	0x3a36
1a002d6a:	3e          	.byte	0x3e
1a002d6b:	00          	.byte	0x00
	uint32_t rate = 0;
1a002d6c:	2000      	movs	r0, #0
1a002d6e:	e038      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002d70:	481e      	ldr	r0, [pc, #120]	; (1a002dec <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002d72:	e036      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d74:	4b1e      	ldr	r3, [pc, #120]	; (1a002df0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002d76:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d7a:	f003 0307 	and.w	r3, r3, #7
1a002d7e:	2b04      	cmp	r3, #4
1a002d80:	d130      	bne.n	1a002de4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002d82:	2000      	movs	r0, #0
1a002d84:	e02d      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d86:	4b1a      	ldr	r3, [pc, #104]	; (1a002df0 <Chip_Clock_GetClockInputHz+0xa0>)
1a002d88:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d8c:	f003 0307 	and.w	r3, r3, #7
1a002d90:	2b04      	cmp	r3, #4
1a002d92:	d029      	beq.n	1a002de8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002d94:	4817      	ldr	r0, [pc, #92]	; (1a002df4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d96:	e024      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002d98:	4b17      	ldr	r3, [pc, #92]	; (1a002df8 <Chip_Clock_GetClockInputHz+0xa8>)
1a002d9a:	6818      	ldr	r0, [r3, #0]
		break;
1a002d9c:	e021      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002d9e:	4b17      	ldr	r3, [pc, #92]	; (1a002dfc <Chip_Clock_GetClockInputHz+0xac>)
1a002da0:	6818      	ldr	r0, [r3, #0]
		break;
1a002da2:	e01e      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002da4:	4b16      	ldr	r3, [pc, #88]	; (1a002e00 <Chip_Clock_GetClockInputHz+0xb0>)
1a002da6:	6818      	ldr	r0, [r3, #0]
		break;
1a002da8:	e01b      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002daa:	4b15      	ldr	r3, [pc, #84]	; (1a002e00 <Chip_Clock_GetClockInputHz+0xb0>)
1a002dac:	6858      	ldr	r0, [r3, #4]
		break;
1a002dae:	e018      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002db0:	f000 f86a 	bl	1a002e88 <Chip_Clock_GetMainPLLHz>
		break;
1a002db4:	e015      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002db6:	2100      	movs	r1, #0
1a002db8:	f000 f89c 	bl	1a002ef4 <Chip_Clock_GetDivRate>
		break;
1a002dbc:	e011      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002dbe:	2101      	movs	r1, #1
1a002dc0:	f000 f898 	bl	1a002ef4 <Chip_Clock_GetDivRate>
		break;
1a002dc4:	e00d      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002dc6:	2102      	movs	r1, #2
1a002dc8:	f000 f894 	bl	1a002ef4 <Chip_Clock_GetDivRate>
		break;
1a002dcc:	e009      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002dce:	2103      	movs	r1, #3
1a002dd0:	f000 f890 	bl	1a002ef4 <Chip_Clock_GetDivRate>
		break;
1a002dd4:	e005      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002dd6:	2104      	movs	r1, #4
1a002dd8:	f000 f88c 	bl	1a002ef4 <Chip_Clock_GetDivRate>
		break;
1a002ddc:	e001      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002dde:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002de2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002de4:	4803      	ldr	r0, [pc, #12]	; (1a002df4 <Chip_Clock_GetClockInputHz+0xa4>)
1a002de6:	e7fc      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002de8:	4806      	ldr	r0, [pc, #24]	; (1a002e04 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002dea:	e7fa      	b.n	1a002de2 <Chip_Clock_GetClockInputHz+0x92>
1a002dec:	00b71b00 	.word	0x00b71b00
1a002df0:	40043000 	.word	0x40043000
1a002df4:	017d7840 	.word	0x017d7840
1a002df8:	1a004d88 	.word	0x1a004d88
1a002dfc:	1a004db4 	.word	0x1a004db4
1a002e00:	10002bdc 	.word	0x10002bdc
1a002e04:	02faf080 	.word	0x02faf080

1a002e08 <Chip_Clock_CalcMainPLLValue>:
{
1a002e08:	b538      	push	{r3, r4, r5, lr}
1a002e0a:	4605      	mov	r5, r0
1a002e0c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002e0e:	7908      	ldrb	r0, [r1, #4]
1a002e10:	f7ff ff9e 	bl	1a002d50 <Chip_Clock_GetClockInputHz>
1a002e14:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002e16:	4b19      	ldr	r3, [pc, #100]	; (1a002e7c <Chip_Clock_CalcMainPLLValue+0x74>)
1a002e18:	442b      	add	r3, r5
1a002e1a:	4a19      	ldr	r2, [pc, #100]	; (1a002e80 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002e1c:	4293      	cmp	r3, r2
1a002e1e:	d821      	bhi.n	1a002e64 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002e20:	b318      	cbz	r0, 1a002e6a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002e22:	2380      	movs	r3, #128	; 0x80
1a002e24:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002e26:	2300      	movs	r3, #0
1a002e28:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002e2a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002e2c:	fbb5 f3f0 	udiv	r3, r5, r0
1a002e30:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002e32:	4a14      	ldr	r2, [pc, #80]	; (1a002e84 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002e34:	4295      	cmp	r5, r2
1a002e36:	d903      	bls.n	1a002e40 <Chip_Clock_CalcMainPLLValue+0x38>
1a002e38:	fb03 f000 	mul.w	r0, r3, r0
1a002e3c:	42a8      	cmp	r0, r5
1a002e3e:	d007      	beq.n	1a002e50 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002e40:	4621      	mov	r1, r4
1a002e42:	4628      	mov	r0, r5
1a002e44:	f7ff fe96 	bl	1a002b74 <pll_get_frac>
		if (!ppll->nsel) {
1a002e48:	68a3      	ldr	r3, [r4, #8]
1a002e4a:	b18b      	cbz	r3, 1a002e70 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002e4c:	3b01      	subs	r3, #1
1a002e4e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002e50:	6923      	ldr	r3, [r4, #16]
1a002e52:	b183      	cbz	r3, 1a002e76 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002e54:	68e2      	ldr	r2, [r4, #12]
1a002e56:	b10a      	cbz	r2, 1a002e5c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002e58:	3a01      	subs	r2, #1
1a002e5a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002e5c:	3b01      	subs	r3, #1
1a002e5e:	6123      	str	r3, [r4, #16]
	return 0;
1a002e60:	2000      	movs	r0, #0
}
1a002e62:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e68:	e7fb      	b.n	1a002e62 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e6e:	e7f8      	b.n	1a002e62 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e74:	e7f5      	b.n	1a002e62 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e7a:	e7f2      	b.n	1a002e62 <Chip_Clock_CalcMainPLLValue+0x5a>
1a002e7c:	ff6b3a10 	.word	0xff6b3a10
1a002e80:	0b940510 	.word	0x0b940510
1a002e84:	094c5eff 	.word	0x094c5eff

1a002e88 <Chip_Clock_GetMainPLLHz>:
{
1a002e88:	b530      	push	{r4, r5, lr}
1a002e8a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002e8c:	4d17      	ldr	r5, [pc, #92]	; (1a002eec <Chip_Clock_GetMainPLLHz+0x64>)
1a002e8e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002e90:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002e94:	f7ff ff5c 	bl	1a002d50 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002e98:	4b15      	ldr	r3, [pc, #84]	; (1a002ef0 <Chip_Clock_GetMainPLLHz+0x68>)
1a002e9a:	681b      	ldr	r3, [r3, #0]
1a002e9c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002e9e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a002ea0:	f013 0f01 	tst.w	r3, #1
1a002ea4:	d01f      	beq.n	1a002ee6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a002ea6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002eaa:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002eae:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002eb2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a002eb6:	3301      	adds	r3, #1
	n = nsel + 1;
1a002eb8:	3201      	adds	r2, #1
	p = ptab[psel];
1a002eba:	f10d 0c08 	add.w	ip, sp, #8
1a002ebe:	4461      	add	r1, ip
1a002ec0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a002ec4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002ec8:	d108      	bne.n	1a002edc <Chip_Clock_GetMainPLLHz+0x54>
1a002eca:	b93d      	cbnz	r5, 1a002edc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a002ecc:	0049      	lsls	r1, r1, #1
1a002ece:	fbb3 f3f1 	udiv	r3, r3, r1
1a002ed2:	fbb0 f0f2 	udiv	r0, r0, r2
1a002ed6:	fb00 f003 	mul.w	r0, r0, r3
1a002eda:	e005      	b.n	1a002ee8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a002edc:	fbb0 f0f2 	udiv	r0, r0, r2
1a002ee0:	fb03 f000 	mul.w	r0, r3, r0
1a002ee4:	e000      	b.n	1a002ee8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a002ee6:	2000      	movs	r0, #0
}
1a002ee8:	b003      	add	sp, #12
1a002eea:	bd30      	pop	{r4, r5, pc}
1a002eec:	40050000 	.word	0x40050000
1a002ef0:	1a004e40 	.word	0x1a004e40

1a002ef4 <Chip_Clock_GetDivRate>:
{
1a002ef4:	b538      	push	{r3, r4, r5, lr}
1a002ef6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002ef8:	4608      	mov	r0, r1
1a002efa:	f7ff ff0d 	bl	1a002d18 <Chip_Clock_GetDividerSource>
1a002efe:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002f00:	4620      	mov	r0, r4
1a002f02:	f7ff ff17 	bl	1a002d34 <Chip_Clock_GetDividerDivisor>
1a002f06:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002f08:	4628      	mov	r0, r5
1a002f0a:	f7ff ff21 	bl	1a002d50 <Chip_Clock_GetClockInputHz>
1a002f0e:	3401      	adds	r4, #1
}
1a002f10:	fbb0 f0f4 	udiv	r0, r0, r4
1a002f14:	bd38      	pop	{r3, r4, r5, pc}
1a002f16:	Address 0x000000001a002f16 is out of bounds.


1a002f18 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002f18:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f1a:	f100 0416 	add.w	r4, r0, #22
1a002f1e:	00a4      	lsls	r4, r4, #2
1a002f20:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002f24:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002f28:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002f2a:	281b      	cmp	r0, #27
1a002f2c:	d813      	bhi.n	1a002f56 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002f2e:	2911      	cmp	r1, #17
1a002f30:	d01a      	beq.n	1a002f68 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002f32:	4d0e      	ldr	r5, [pc, #56]	; (1a002f6c <Chip_Clock_SetBaseClock+0x54>)
1a002f34:	4025      	ands	r5, r4

			if (autoblocken) {
1a002f36:	b10a      	cbz	r2, 1a002f3c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002f38:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002f3c:	b10b      	cbz	r3, 1a002f42 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002f3e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002f42:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002f46:	3016      	adds	r0, #22
1a002f48:	0080      	lsls	r0, r0, #2
1a002f4a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f4e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f52:	6045      	str	r5, [r0, #4]
1a002f54:	e008      	b.n	1a002f68 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002f56:	f044 0401 	orr.w	r4, r4, #1
1a002f5a:	3016      	adds	r0, #22
1a002f5c:	0080      	lsls	r0, r0, #2
1a002f5e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f62:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f66:	6044      	str	r4, [r0, #4]
	}
}
1a002f68:	bc30      	pop	{r4, r5}
1a002f6a:	4770      	bx	lr
1a002f6c:	e0fff7fe 	.word	0xe0fff7fe

1a002f70 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002f70:	281b      	cmp	r0, #27
1a002f72:	d80c      	bhi.n	1a002f8e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f74:	3016      	adds	r0, #22
1a002f76:	0080      	lsls	r0, r0, #2
1a002f78:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f7c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f80:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002f82:	f010 0f01 	tst.w	r0, #1
1a002f86:	d104      	bne.n	1a002f92 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002f88:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002f8c:	4770      	bx	lr
		return CLKINPUT_PD;
1a002f8e:	2011      	movs	r0, #17
1a002f90:	4770      	bx	lr
		return CLKINPUT_PD;
1a002f92:	2011      	movs	r0, #17
}
1a002f94:	4770      	bx	lr

1a002f96 <Chip_Clock_GetBaseClocktHz>:
{
1a002f96:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002f98:	f7ff ffea 	bl	1a002f70 <Chip_Clock_GetBaseClock>
1a002f9c:	f7ff fed8 	bl	1a002d50 <Chip_Clock_GetClockInputHz>
}
1a002fa0:	bd08      	pop	{r3, pc}
1a002fa2:	Address 0x000000001a002fa2 is out of bounds.


1a002fa4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002fa4:	b969      	cbnz	r1, 1a002fc2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a002fa6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002fa8:	b10a      	cbz	r2, 1a002fae <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002faa:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002fae:	2b02      	cmp	r3, #2
1a002fb0:	d009      	beq.n	1a002fc6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002fb2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fb6:	d209      	bcs.n	1a002fcc <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002fb8:	3020      	adds	r0, #32
1a002fba:	4b07      	ldr	r3, [pc, #28]	; (1a002fd8 <Chip_Clock_EnableOpts+0x34>)
1a002fbc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002fc0:	4770      	bx	lr
		reg |= (1 << 1);
1a002fc2:	2103      	movs	r1, #3
1a002fc4:	e7f0      	b.n	1a002fa8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002fc6:	f041 0120 	orr.w	r1, r1, #32
1a002fca:	e7f2      	b.n	1a002fb2 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002fcc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002fd0:	4b02      	ldr	r3, [pc, #8]	; (1a002fdc <Chip_Clock_EnableOpts+0x38>)
1a002fd2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002fd6:	4770      	bx	lr
1a002fd8:	40051000 	.word	0x40051000
1a002fdc:	40052000 	.word	0x40052000

1a002fe0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002fe0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fe4:	d208      	bcs.n	1a002ff8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002fe6:	4a09      	ldr	r2, [pc, #36]	; (1a00300c <Chip_Clock_Enable+0x2c>)
1a002fe8:	3020      	adds	r0, #32
1a002fea:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002fee:	f043 0301 	orr.w	r3, r3, #1
1a002ff2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002ff6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002ff8:	4a05      	ldr	r2, [pc, #20]	; (1a003010 <Chip_Clock_Enable+0x30>)
1a002ffa:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002ffe:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003002:	f043 0301 	orr.w	r3, r3, #1
1a003006:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00300a:	4770      	bx	lr
1a00300c:	40051000 	.word	0x40051000
1a003010:	40052000 	.word	0x40052000

1a003014 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003014:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a003016:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00301a:	d309      	bcc.n	1a003030 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00301c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003020:	4a0d      	ldr	r2, [pc, #52]	; (1a003058 <Chip_Clock_GetRate+0x44>)
1a003022:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003026:	f014 0f01 	tst.w	r4, #1
1a00302a:	d107      	bne.n	1a00303c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00302c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00302e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003030:	f100 0320 	add.w	r3, r0, #32
1a003034:	4a09      	ldr	r2, [pc, #36]	; (1a00305c <Chip_Clock_GetRate+0x48>)
1a003036:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00303a:	e7f4      	b.n	1a003026 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00303c:	f7ff fe20 	bl	1a002c80 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003040:	f7ff ffa9 	bl	1a002f96 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003044:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003048:	d103      	bne.n	1a003052 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00304a:	2301      	movs	r3, #1
		rate = rate / div;
1a00304c:	fbb0 f0f3 	udiv	r0, r0, r3
1a003050:	e7ed      	b.n	1a00302e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003052:	2302      	movs	r3, #2
1a003054:	e7fa      	b.n	1a00304c <Chip_Clock_GetRate+0x38>
1a003056:	bf00      	nop
1a003058:	40052000 	.word	0x40052000
1a00305c:	40051000 	.word	0x40051000

1a003060 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003060:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a003062:	2069      	movs	r0, #105	; 0x69
1a003064:	f7ff ffd6 	bl	1a003014 <Chip_Clock_GetRate>
1a003068:	4b01      	ldr	r3, [pc, #4]	; (1a003070 <SystemCoreClockUpdate+0x10>)
1a00306a:	6018      	str	r0, [r3, #0]
}
1a00306c:	bd08      	pop	{r3, pc}
1a00306e:	bf00      	nop
1a003070:	10002c60 	.word	0x10002c60

1a003074 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003074:	b570      	push	{r4, r5, r6, lr}
1a003076:	b08a      	sub	sp, #40	; 0x28
1a003078:	4605      	mov	r5, r0
1a00307a:	460e      	mov	r6, r1
1a00307c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00307e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003082:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003084:	2806      	cmp	r0, #6
1a003086:	d018      	beq.n	1a0030ba <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003088:	2300      	movs	r3, #0
1a00308a:	2201      	movs	r2, #1
1a00308c:	4629      	mov	r1, r5
1a00308e:	2004      	movs	r0, #4
1a003090:	f7ff ff42 	bl	1a002f18 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003094:	4a49      	ldr	r2, [pc, #292]	; (1a0031bc <Chip_SetupCoreClock+0x148>)
1a003096:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003098:	f043 0301 	orr.w	r3, r3, #1
1a00309c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00309e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0030a2:	a901      	add	r1, sp, #4
1a0030a4:	4630      	mov	r0, r6
1a0030a6:	f7ff feaf 	bl	1a002e08 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0030aa:	4b45      	ldr	r3, [pc, #276]	; (1a0031c0 <Chip_SetupCoreClock+0x14c>)
1a0030ac:	429e      	cmp	r6, r3
1a0030ae:	d916      	bls.n	1a0030de <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0030b0:	9b01      	ldr	r3, [sp, #4]
1a0030b2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0030b6:	d003      	beq.n	1a0030c0 <Chip_SetupCoreClock+0x4c>
1a0030b8:	e7fe      	b.n	1a0030b8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0030ba:	f7ff fe07 	bl	1a002ccc <Chip_Clock_EnableCrystal>
1a0030be:	e7e3      	b.n	1a003088 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0030c0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0030c4:	d005      	beq.n	1a0030d2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0030c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0030ca:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0030cc:	2500      	movs	r5, #0
			direct = 1;
1a0030ce:	2601      	movs	r6, #1
1a0030d0:	e007      	b.n	1a0030e2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0030d2:	9b04      	ldr	r3, [sp, #16]
1a0030d4:	3301      	adds	r3, #1
1a0030d6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0030d8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0030da:	2600      	movs	r6, #0
1a0030dc:	e001      	b.n	1a0030e2 <Chip_SetupCoreClock+0x6e>
1a0030de:	2500      	movs	r5, #0
1a0030e0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0030e2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0030e6:	9b01      	ldr	r3, [sp, #4]
1a0030e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0030ec:	9a05      	ldr	r2, [sp, #20]
1a0030ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0030f2:	9a03      	ldr	r2, [sp, #12]
1a0030f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0030f8:	9a04      	ldr	r2, [sp, #16]
1a0030fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003102:	4a2e      	ldr	r2, [pc, #184]	; (1a0031bc <Chip_SetupCoreClock+0x148>)
1a003104:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003106:	4b2d      	ldr	r3, [pc, #180]	; (1a0031bc <Chip_SetupCoreClock+0x148>)
1a003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00310a:	f013 0f01 	tst.w	r3, #1
1a00310e:	d0fa      	beq.n	1a003106 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003110:	2300      	movs	r3, #0
1a003112:	2201      	movs	r2, #1
1a003114:	2109      	movs	r1, #9
1a003116:	2004      	movs	r0, #4
1a003118:	f7ff fefe 	bl	1a002f18 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00311c:	b1fe      	cbz	r6, 1a00315e <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00311e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003122:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003124:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003126:	1e5a      	subs	r2, r3, #1
1a003128:	9209      	str	r2, [sp, #36]	; 0x24
1a00312a:	2b00      	cmp	r3, #0
1a00312c:	d1fa      	bne.n	1a003124 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00312e:	9b01      	ldr	r3, [sp, #4]
1a003130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003134:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003136:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00313a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00313e:	9a05      	ldr	r2, [sp, #20]
1a003140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003144:	9a03      	ldr	r2, [sp, #12]
1a003146:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00314a:	9a04      	ldr	r2, [sp, #16]
1a00314c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003150:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003154:	4a19      	ldr	r2, [pc, #100]	; (1a0031bc <Chip_SetupCoreClock+0x148>)
1a003156:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003158:	b36c      	cbz	r4, 1a0031b6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00315a:	2400      	movs	r4, #0
1a00315c:	e029      	b.n	1a0031b2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00315e:	2d00      	cmp	r5, #0
1a003160:	d0fa      	beq.n	1a003158 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003162:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003166:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003168:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00316a:	1e5a      	subs	r2, r3, #1
1a00316c:	9209      	str	r2, [sp, #36]	; 0x24
1a00316e:	2b00      	cmp	r3, #0
1a003170:	d1fa      	bne.n	1a003168 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003172:	9b04      	ldr	r3, [sp, #16]
1a003174:	1e5a      	subs	r2, r3, #1
1a003176:	9204      	str	r2, [sp, #16]
1a003178:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00317c:	9b01      	ldr	r3, [sp, #4]
1a00317e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003182:	9905      	ldr	r1, [sp, #20]
1a003184:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003188:	9903      	ldr	r1, [sp, #12]
1a00318a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00318e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003192:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003196:	4a09      	ldr	r2, [pc, #36]	; (1a0031bc <Chip_SetupCoreClock+0x148>)
1a003198:	6453      	str	r3, [r2, #68]	; 0x44
1a00319a:	e7dd      	b.n	1a003158 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00319c:	4809      	ldr	r0, [pc, #36]	; (1a0031c4 <Chip_SetupCoreClock+0x150>)
1a00319e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0031a2:	78cb      	ldrb	r3, [r1, #3]
1a0031a4:	788a      	ldrb	r2, [r1, #2]
1a0031a6:	7849      	ldrb	r1, [r1, #1]
1a0031a8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0031ac:	f7ff feb4 	bl	1a002f18 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0031b0:	3401      	adds	r4, #1
1a0031b2:	2c11      	cmp	r4, #17
1a0031b4:	d9f2      	bls.n	1a00319c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0031b6:	b00a      	add	sp, #40	; 0x28
1a0031b8:	bd70      	pop	{r4, r5, r6, pc}
1a0031ba:	bf00      	nop
1a0031bc:	40050000 	.word	0x40050000
1a0031c0:	068e7780 	.word	0x068e7780
1a0031c4:	1a004eb8 	.word	0x1a004eb8

1a0031c8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0031c8:	4770      	bx	lr
1a0031ca:	Address 0x000000001a0031ca is out of bounds.


1a0031cc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0031cc:	4b03      	ldr	r3, [pc, #12]	; (1a0031dc <Chip_SSP_GetClockIndex+0x10>)
1a0031ce:	4298      	cmp	r0, r3
1a0031d0:	d001      	beq.n	1a0031d6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0031d2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0031d4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0031d6:	20a5      	movs	r0, #165	; 0xa5
1a0031d8:	4770      	bx	lr
1a0031da:	bf00      	nop
1a0031dc:	400c5000 	.word	0x400c5000

1a0031e0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0031e0:	4b04      	ldr	r3, [pc, #16]	; (1a0031f4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0031e2:	4298      	cmp	r0, r3
1a0031e4:	d002      	beq.n	1a0031ec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0031e6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0031ea:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0031ec:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0031f0:	4770      	bx	lr
1a0031f2:	bf00      	nop
1a0031f4:	400c5000 	.word	0x400c5000

1a0031f8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0031f8:	6803      	ldr	r3, [r0, #0]
1a0031fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0031fe:	0209      	lsls	r1, r1, #8
1a003200:	b289      	uxth	r1, r1
1a003202:	4319      	orrs	r1, r3
1a003204:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003206:	6102      	str	r2, [r0, #16]
}
1a003208:	4770      	bx	lr

1a00320a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00320a:	b570      	push	{r4, r5, r6, lr}
1a00320c:	4606      	mov	r6, r0
1a00320e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003210:	f7ff ffe6 	bl	1a0031e0 <Chip_SSP_GetPeriphClockIndex>
1a003214:	f7ff fefe 	bl	1a003014 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003218:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00321a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00321e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003220:	e000      	b.n	1a003224 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003222:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003224:	42ab      	cmp	r3, r5
1a003226:	d90b      	bls.n	1a003240 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003228:	1c4c      	adds	r4, r1, #1
1a00322a:	fb02 f304 	mul.w	r3, r2, r4
1a00322e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003232:	429d      	cmp	r5, r3
1a003234:	d2f6      	bcs.n	1a003224 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003236:	2cff      	cmp	r4, #255	; 0xff
1a003238:	d9f3      	bls.n	1a003222 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00323a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00323c:	2100      	movs	r1, #0
1a00323e:	e7f1      	b.n	1a003224 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003240:	4630      	mov	r0, r6
1a003242:	f7ff ffd9 	bl	1a0031f8 <Chip_SSP_SetClockRate>
}
1a003246:	bd70      	pop	{r4, r5, r6, pc}

1a003248 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003248:	b510      	push	{r4, lr}
1a00324a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00324c:	f7ff ffbe 	bl	1a0031cc <Chip_SSP_GetClockIndex>
1a003250:	f7ff fec6 	bl	1a002fe0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003254:	4620      	mov	r0, r4
1a003256:	f7ff ffc3 	bl	1a0031e0 <Chip_SSP_GetPeriphClockIndex>
1a00325a:	f7ff fec1 	bl	1a002fe0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00325e:	6863      	ldr	r3, [r4, #4]
1a003260:	f023 0304 	bic.w	r3, r3, #4
1a003264:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003266:	6823      	ldr	r3, [r4, #0]
1a003268:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00326c:	f043 0307 	orr.w	r3, r3, #7
1a003270:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003272:	4902      	ldr	r1, [pc, #8]	; (1a00327c <Chip_SSP_Init+0x34>)
1a003274:	4620      	mov	r0, r4
1a003276:	f7ff ffc8 	bl	1a00320a <Chip_SSP_SetBitRate>
}
1a00327a:	bd10      	pop	{r4, pc}
1a00327c:	000186a0 	.word	0x000186a0

1a003280 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003280:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003282:	4a0b      	ldr	r2, [pc, #44]	; (1a0032b0 <SystemInit+0x30>)
1a003284:	4b0b      	ldr	r3, [pc, #44]	; (1a0032b4 <SystemInit+0x34>)
1a003286:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003288:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00328c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00328e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003292:	2b20      	cmp	r3, #32
1a003294:	d004      	beq.n	1a0032a0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003296:	f7ff fa9f 	bl	1a0027d8 <Board_SystemInit>
   Board_Init();
1a00329a:	f7ff fa25 	bl	1a0026e8 <Board_Init>
}
1a00329e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0032a0:	4a04      	ldr	r2, [pc, #16]	; (1a0032b4 <SystemInit+0x34>)
1a0032a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0032a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0032aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0032ae:	e7f2      	b.n	1a003296 <SystemInit+0x16>
1a0032b0:	1a000000 	.word	0x1a000000
1a0032b4:	e000ed00 	.word	0xe000ed00

1a0032b8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0032b8:	4b04      	ldr	r3, [pc, #16]	; (1a0032cc <cyclesCounterInit+0x14>)
1a0032ba:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0032bc:	4a04      	ldr	r2, [pc, #16]	; (1a0032d0 <cyclesCounterInit+0x18>)
1a0032be:	6813      	ldr	r3, [r2, #0]
1a0032c0:	f043 0301 	orr.w	r3, r3, #1
1a0032c4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0032c6:	2001      	movs	r0, #1
1a0032c8:	4770      	bx	lr
1a0032ca:	bf00      	nop
1a0032cc:	1000003c 	.word	0x1000003c
1a0032d0:	e0001000 	.word	0xe0001000

1a0032d4 <uartProcessIRQ>:
{
1a0032d4:	b570      	push	{r4, r5, r6, lr}
1a0032d6:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0032d8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0032dc:	0093      	lsls	r3, r2, #2
1a0032de:	4a22      	ldr	r2, [pc, #136]	; (1a003368 <uartProcessIRQ+0x94>)
1a0032e0:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a0032e2:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0032e4:	b2ed      	uxtb	r5, r5
1a0032e6:	f015 0f01 	tst.w	r5, #1
1a0032ea:	d00a      	beq.n	1a003302 <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0032ec:	b928      	cbnz	r0, 1a0032fa <uartProcessIRQ+0x26>
1a0032ee:	4b1f      	ldr	r3, [pc, #124]	; (1a00336c <uartProcessIRQ+0x98>)
1a0032f0:	681b      	ldr	r3, [r3, #0]
1a0032f2:	b113      	cbz	r3, 1a0032fa <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a0032f4:	4a1e      	ldr	r2, [pc, #120]	; (1a003370 <uartProcessIRQ+0x9c>)
1a0032f6:	6810      	ldr	r0, [r2, #0]
1a0032f8:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0032fa:	2c03      	cmp	r4, #3
1a0032fc:	d014      	beq.n	1a003328 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0032fe:	2c05      	cmp	r4, #5
1a003300:	d01a      	beq.n	1a003338 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003302:	f015 0f20 	tst.w	r5, #32
1a003306:	d00e      	beq.n	1a003326 <uartProcessIRQ+0x52>
	return pUART->IER;
1a003308:	6873      	ldr	r3, [r6, #4]
1a00330a:	f013 0f02 	tst.w	r3, #2
1a00330e:	d00a      	beq.n	1a003326 <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a003310:	b92c      	cbnz	r4, 1a00331e <uartProcessIRQ+0x4a>
1a003312:	4b18      	ldr	r3, [pc, #96]	; (1a003374 <uartProcessIRQ+0xa0>)
1a003314:	681b      	ldr	r3, [r3, #0]
1a003316:	b113      	cbz	r3, 1a00331e <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a003318:	4a17      	ldr	r2, [pc, #92]	; (1a003378 <uartProcessIRQ+0xa4>)
1a00331a:	6810      	ldr	r0, [r2, #0]
1a00331c:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00331e:	2c03      	cmp	r4, #3
1a003320:	d012      	beq.n	1a003348 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003322:	2c05      	cmp	r4, #5
1a003324:	d018      	beq.n	1a003358 <uartProcessIRQ+0x84>
}
1a003326:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003328:	4b14      	ldr	r3, [pc, #80]	; (1a00337c <uartProcessIRQ+0xa8>)
1a00332a:	681b      	ldr	r3, [r3, #0]
1a00332c:	2b00      	cmp	r3, #0
1a00332e:	d0e6      	beq.n	1a0032fe <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a003330:	4a13      	ldr	r2, [pc, #76]	; (1a003380 <uartProcessIRQ+0xac>)
1a003332:	6810      	ldr	r0, [r2, #0]
1a003334:	4798      	blx	r3
1a003336:	e7e2      	b.n	1a0032fe <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003338:	4b12      	ldr	r3, [pc, #72]	; (1a003384 <uartProcessIRQ+0xb0>)
1a00333a:	681b      	ldr	r3, [r3, #0]
1a00333c:	2b00      	cmp	r3, #0
1a00333e:	d0e0      	beq.n	1a003302 <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a003340:	4a11      	ldr	r2, [pc, #68]	; (1a003388 <uartProcessIRQ+0xb4>)
1a003342:	6810      	ldr	r0, [r2, #0]
1a003344:	4798      	blx	r3
1a003346:	e7dc      	b.n	1a003302 <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003348:	4b10      	ldr	r3, [pc, #64]	; (1a00338c <uartProcessIRQ+0xb8>)
1a00334a:	681b      	ldr	r3, [r3, #0]
1a00334c:	2b00      	cmp	r3, #0
1a00334e:	d0e8      	beq.n	1a003322 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a003350:	4a0f      	ldr	r2, [pc, #60]	; (1a003390 <uartProcessIRQ+0xbc>)
1a003352:	6810      	ldr	r0, [r2, #0]
1a003354:	4798      	blx	r3
1a003356:	e7e4      	b.n	1a003322 <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003358:	4b0e      	ldr	r3, [pc, #56]	; (1a003394 <uartProcessIRQ+0xc0>)
1a00335a:	681b      	ldr	r3, [r3, #0]
1a00335c:	2b00      	cmp	r3, #0
1a00335e:	d0e2      	beq.n	1a003326 <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a003360:	4a0d      	ldr	r2, [pc, #52]	; (1a003398 <uartProcessIRQ+0xc4>)
1a003362:	6810      	ldr	r0, [r2, #0]
1a003364:	4798      	blx	r3
}
1a003366:	e7de      	b.n	1a003326 <uartProcessIRQ+0x52>
1a003368:	1a004f00 	.word	0x1a004f00
1a00336c:	10002be4 	.word	0x10002be4
1a003370:	10002be8 	.word	0x10002be8
1a003374:	10002bfc 	.word	0x10002bfc
1a003378:	10002c00 	.word	0x10002c00
1a00337c:	10002bec 	.word	0x10002bec
1a003380:	10002bf0 	.word	0x10002bf0
1a003384:	10002bf4 	.word	0x10002bf4
1a003388:	10002bf8 	.word	0x10002bf8
1a00338c:	10002c04 	.word	0x10002c04
1a003390:	10002c08 	.word	0x10002c08
1a003394:	10002c0c 	.word	0x10002c0c
1a003398:	10002c10 	.word	0x10002c10

1a00339c <uartInterrupt>:
   if( enable ) {
1a00339c:	b341      	cbz	r1, 1a0033f0 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a00339e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0033a2:	009a      	lsls	r2, r3, #2
1a0033a4:	4b1e      	ldr	r3, [pc, #120]	; (1a003420 <uartInterrupt+0x84>)
1a0033a6:	4413      	add	r3, r2
1a0033a8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0033ac:	2b00      	cmp	r3, #0
1a0033ae:	db18      	blt.n	1a0033e2 <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0033b0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a0033b4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a0033b8:	22a0      	movs	r2, #160	; 0xa0
1a0033ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a0033be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0033c2:	0082      	lsls	r2, r0, #2
1a0033c4:	4b16      	ldr	r3, [pc, #88]	; (1a003420 <uartInterrupt+0x84>)
1a0033c6:	4413      	add	r3, r2
1a0033c8:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0033cc:	2b00      	cmp	r3, #0
1a0033ce:	db25      	blt.n	1a00341c <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0033d0:	f003 011f 	and.w	r1, r3, #31
1a0033d4:	095b      	lsrs	r3, r3, #5
1a0033d6:	2201      	movs	r2, #1
1a0033d8:	408a      	lsls	r2, r1
1a0033da:	4912      	ldr	r1, [pc, #72]	; (1a003424 <uartInterrupt+0x88>)
1a0033dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0033e0:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0033e2:	f003 030f 	and.w	r3, r3, #15
1a0033e6:	4a10      	ldr	r2, [pc, #64]	; (1a003428 <uartInterrupt+0x8c>)
1a0033e8:	441a      	add	r2, r3
1a0033ea:	23a0      	movs	r3, #160	; 0xa0
1a0033ec:	7613      	strb	r3, [r2, #24]
1a0033ee:	e7e6      	b.n	1a0033be <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a0033f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0033f4:	0082      	lsls	r2, r0, #2
1a0033f6:	4b0a      	ldr	r3, [pc, #40]	; (1a003420 <uartInterrupt+0x84>)
1a0033f8:	4413      	add	r3, r2
1a0033fa:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a0033fe:	2b00      	cmp	r3, #0
1a003400:	db0c      	blt.n	1a00341c <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003402:	f003 011f 	and.w	r1, r3, #31
1a003406:	095b      	lsrs	r3, r3, #5
1a003408:	2201      	movs	r2, #1
1a00340a:	408a      	lsls	r2, r1
1a00340c:	3320      	adds	r3, #32
1a00340e:	4905      	ldr	r1, [pc, #20]	; (1a003424 <uartInterrupt+0x88>)
1a003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a003414:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a003418:	f3bf 8f6f 	isb	sy
}
1a00341c:	4770      	bx	lr
1a00341e:	bf00      	nop
1a003420:	1a004f00 	.word	0x1a004f00
1a003424:	e000e100 	.word	0xe000e100
1a003428:	e000ecfc 	.word	0xe000ecfc

1a00342c <uartCallbackSet>:
{   
1a00342c:	b410      	push	{r4}
   switch(event){
1a00342e:	b161      	cbz	r1, 1a00344a <uartCallbackSet+0x1e>
1a003430:	2901      	cmp	r1, #1
1a003432:	d11c      	bne.n	1a00346e <uartCallbackSet+0x42>
         if( callbackFunc != 0 ) {
1a003434:	b1da      	cbz	r2, 1a00346e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a003436:	2801      	cmp	r0, #1
1a003438:	d92c      	bls.n	1a003494 <uartCallbackSet+0x68>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a00343a:	1ec1      	subs	r1, r0, #3
1a00343c:	b2c9      	uxtb	r1, r1
1a00343e:	2901      	cmp	r1, #1
1a003440:	d92d      	bls.n	1a00349e <uartCallbackSet+0x72>
            if( uart == UART_232 ){
1a003442:	2805      	cmp	r0, #5
1a003444:	d030      	beq.n	1a0034a8 <uartCallbackSet+0x7c>
         intMask = UART_IER_THREINT;
1a003446:	2302      	movs	r3, #2
1a003448:	e009      	b.n	1a00345e <uartCallbackSet+0x32>
         if( callbackFunc != 0 ) {
1a00344a:	b182      	cbz	r2, 1a00346e <uartCallbackSet+0x42>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a00344c:	2801      	cmp	r0, #1
1a00344e:	d911      	bls.n	1a003474 <uartCallbackSet+0x48>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a003450:	1ec1      	subs	r1, r0, #3
1a003452:	b2c9      	uxtb	r1, r1
1a003454:	2901      	cmp	r1, #1
1a003456:	d912      	bls.n	1a00347e <uartCallbackSet+0x52>
            if( uart == UART_232 ){
1a003458:	2805      	cmp	r0, #5
1a00345a:	d015      	beq.n	1a003488 <uartCallbackSet+0x5c>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a00345c:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a00345e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003462:	0082      	lsls	r2, r0, #2
1a003464:	4913      	ldr	r1, [pc, #76]	; (1a0034b4 <uartCallbackSet+0x88>)
1a003466:	588a      	ldr	r2, [r1, r2]
	pUART->IER |= intMask;
1a003468:	6851      	ldr	r1, [r2, #4]
1a00346a:	430b      	orrs	r3, r1
1a00346c:	6053      	str	r3, [r2, #4]
}
1a00346e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003472:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a003474:	4910      	ldr	r1, [pc, #64]	; (1a0034b8 <uartCallbackSet+0x8c>)
1a003476:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a003478:	4910      	ldr	r1, [pc, #64]	; (1a0034bc <uartCallbackSet+0x90>)
1a00347a:	600b      	str	r3, [r1, #0]
1a00347c:	e7e8      	b.n	1a003450 <uartCallbackSet+0x24>
               rxIsrCallbackUART2 = callbackFunc;
1a00347e:	4910      	ldr	r1, [pc, #64]	; (1a0034c0 <uartCallbackSet+0x94>)
1a003480:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a003482:	4910      	ldr	r1, [pc, #64]	; (1a0034c4 <uartCallbackSet+0x98>)
1a003484:	600b      	str	r3, [r1, #0]
1a003486:	e7e7      	b.n	1a003458 <uartCallbackSet+0x2c>
               rxIsrCallbackUART3 = callbackFunc;
1a003488:	490f      	ldr	r1, [pc, #60]	; (1a0034c8 <uartCallbackSet+0x9c>)
1a00348a:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a00348c:	4a0f      	ldr	r2, [pc, #60]	; (1a0034cc <uartCallbackSet+0xa0>)
1a00348e:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a003490:	2305      	movs	r3, #5
1a003492:	e7e4      	b.n	1a00345e <uartCallbackSet+0x32>
               txIsrCallbackUART0 = callbackFunc;
1a003494:	490e      	ldr	r1, [pc, #56]	; (1a0034d0 <uartCallbackSet+0xa4>)
1a003496:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a003498:	490e      	ldr	r1, [pc, #56]	; (1a0034d4 <uartCallbackSet+0xa8>)
1a00349a:	600b      	str	r3, [r1, #0]
1a00349c:	e7cd      	b.n	1a00343a <uartCallbackSet+0xe>
            	txIsrCallbackUART2 = callbackFunc;
1a00349e:	490e      	ldr	r1, [pc, #56]	; (1a0034d8 <uartCallbackSet+0xac>)
1a0034a0:	600a      	str	r2, [r1, #0]
            	txIsrCallbackUART2Params = callbackParam;
1a0034a2:	490e      	ldr	r1, [pc, #56]	; (1a0034dc <uartCallbackSet+0xb0>)
1a0034a4:	600b      	str	r3, [r1, #0]
1a0034a6:	e7cc      	b.n	1a003442 <uartCallbackSet+0x16>
               txIsrCallbackUART3 = callbackFunc;
1a0034a8:	490d      	ldr	r1, [pc, #52]	; (1a0034e0 <uartCallbackSet+0xb4>)
1a0034aa:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a0034ac:	4a0d      	ldr	r2, [pc, #52]	; (1a0034e4 <uartCallbackSet+0xb8>)
1a0034ae:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a0034b0:	2302      	movs	r3, #2
1a0034b2:	e7d4      	b.n	1a00345e <uartCallbackSet+0x32>
1a0034b4:	1a004f00 	.word	0x1a004f00
1a0034b8:	10002be4 	.word	0x10002be4
1a0034bc:	10002be8 	.word	0x10002be8
1a0034c0:	10002bec 	.word	0x10002bec
1a0034c4:	10002bf0 	.word	0x10002bf0
1a0034c8:	10002bf4 	.word	0x10002bf4
1a0034cc:	10002bf8 	.word	0x10002bf8
1a0034d0:	10002bfc 	.word	0x10002bfc
1a0034d4:	10002c00 	.word	0x10002c00
1a0034d8:	10002c04 	.word	0x10002c04
1a0034dc:	10002c08 	.word	0x10002c08
1a0034e0:	10002c0c 	.word	0x10002c0c
1a0034e4:	10002c10 	.word	0x10002c10

1a0034e8 <uartCallbackClr>:
   switch(event){
1a0034e8:	b111      	cbz	r1, 1a0034f0 <uartCallbackClr+0x8>
1a0034ea:	2901      	cmp	r1, #1
1a0034ec:	d00b      	beq.n	1a003506 <uartCallbackClr+0x1e>
1a0034ee:	4770      	bx	lr
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a0034f0:	2105      	movs	r1, #5
   Chip_UART_IntDisable(lpcUarts[uart].uartAddr, intMask);
1a0034f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0034f6:	0082      	lsls	r2, r0, #2
1a0034f8:	4b04      	ldr	r3, [pc, #16]	; (1a00350c <uartCallbackClr+0x24>)
1a0034fa:	589a      	ldr	r2, [r3, r2]
	pUART->IER &= ~intMask;
1a0034fc:	6853      	ldr	r3, [r2, #4]
1a0034fe:	ea23 0301 	bic.w	r3, r3, r1
1a003502:	6053      	str	r3, [r2, #4]
}
1a003504:	4770      	bx	lr
         intMask = UART_IER_THREINT;
1a003506:	2102      	movs	r1, #2
1a003508:	e7f3      	b.n	1a0034f2 <uartCallbackClr+0xa>
1a00350a:	bf00      	nop
1a00350c:	1a004f00 	.word	0x1a004f00

1a003510 <uartSetPendingInterrupt>:
   NVIC_SetPendingIRQ(lpcUarts[uart].uartIrqAddr);
1a003510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003514:	0082      	lsls	r2, r0, #2
1a003516:	4b08      	ldr	r3, [pc, #32]	; (1a003538 <uartSetPendingInterrupt+0x28>)
1a003518:	4413      	add	r3, r2
1a00351a:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a00351e:	2b00      	cmp	r3, #0
1a003520:	db08      	blt.n	1a003534 <uartSetPendingInterrupt+0x24>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003522:	f003 011f 	and.w	r1, r3, #31
1a003526:	095b      	lsrs	r3, r3, #5
1a003528:	2201      	movs	r2, #1
1a00352a:	408a      	lsls	r2, r1
1a00352c:	3340      	adds	r3, #64	; 0x40
1a00352e:	4903      	ldr	r1, [pc, #12]	; (1a00353c <uartSetPendingInterrupt+0x2c>)
1a003530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a003534:	4770      	bx	lr
1a003536:	bf00      	nop
1a003538:	1a004f00 	.word	0x1a004f00
1a00353c:	e000e100 	.word	0xe000e100

1a003540 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003540:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003544:	0083      	lsls	r3, r0, #2
1a003546:	4a02      	ldr	r2, [pc, #8]	; (1a003550 <uartTxWrite+0x10>)
1a003548:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a00354a:	6019      	str	r1, [r3, #0]
}
1a00354c:	4770      	bx	lr
1a00354e:	bf00      	nop
1a003550:	1a004f00 	.word	0x1a004f00

1a003554 <uartInit>:
{
1a003554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003558:	4680      	mov	r8, r0
1a00355a:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a00355c:	4c19      	ldr	r4, [pc, #100]	; (1a0035c4 <uartInit+0x70>)
1a00355e:	0045      	lsls	r5, r0, #1
1a003560:	182a      	adds	r2, r5, r0
1a003562:	0093      	lsls	r3, r2, #2
1a003564:	18e6      	adds	r6, r4, r3
1a003566:	58e7      	ldr	r7, [r4, r3]
1a003568:	4638      	mov	r0, r7
1a00356a:	f7ff f98f 	bl	1a00288c <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00356e:	4649      	mov	r1, r9
1a003570:	4638      	mov	r0, r7
1a003572:	f7ff f9b5 	bl	1a0028e0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003576:	2307      	movs	r3, #7
1a003578:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00357a:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00357c:	2301      	movs	r3, #1
1a00357e:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003580:	7930      	ldrb	r0, [r6, #4]
1a003582:	7973      	ldrb	r3, [r6, #5]
1a003584:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003586:	f042 0218 	orr.w	r2, r2, #24
1a00358a:	490f      	ldr	r1, [pc, #60]	; (1a0035c8 <uartInit+0x74>)
1a00358c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003594:	79f0      	ldrb	r0, [r6, #7]
1a003596:	7a33      	ldrb	r3, [r6, #8]
1a003598:	7a72      	ldrb	r2, [r6, #9]
1a00359a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00359e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a0035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a0035a6:	f1b8 0f01 	cmp.w	r8, #1
1a0035aa:	d001      	beq.n	1a0035b0 <uartInit+0x5c>
}
1a0035ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0035b0:	4a06      	ldr	r2, [pc, #24]	; (1a0035cc <uartInit+0x78>)
1a0035b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0035b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0035b8:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0035ba:	221a      	movs	r2, #26
1a0035bc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a0035c0:	e7f4      	b.n	1a0035ac <uartInit+0x58>
1a0035c2:	bf00      	nop
1a0035c4:	1a004f00 	.word	0x1a004f00
1a0035c8:	40086000 	.word	0x40086000
1a0035cc:	40081000 	.word	0x40081000

1a0035d0 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a0035d0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a0035d2:	2003      	movs	r0, #3
1a0035d4:	f7ff fe7e 	bl	1a0032d4 <uartProcessIRQ>
}
1a0035d8:	bd08      	pop	{r3, pc}

1a0035da <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0035da:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0035dc:	2005      	movs	r0, #5
1a0035de:	f7ff fe79 	bl	1a0032d4 <uartProcessIRQ>
}
1a0035e2:	bd08      	pop	{r3, pc}

1a0035e4 <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a0035e4:	e7fe      	b.n	1a0035e4 <errorOcurred>

1a0035e6 <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a0035e6:	4770      	bx	lr

1a0035e8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0035e8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0035ea:	2400      	movs	r4, #0
1a0035ec:	e001      	b.n	1a0035f2 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0035ee:	3401      	adds	r4, #1
1a0035f0:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0035f2:	2c03      	cmp	r4, #3
1a0035f4:	d812      	bhi.n	1a00361c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0035f6:	b265      	sxtb	r5, r4
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0035f8:	4b09      	ldr	r3, [pc, #36]	; (1a003620 <TIMER0_IRQHandler+0x38>)
1a0035fa:	681a      	ldr	r2, [r3, #0]
1a0035fc:	f004 010f 	and.w	r1, r4, #15
1a003600:	2301      	movs	r3, #1
1a003602:	408b      	lsls	r3, r1
1a003604:	421a      	tst	r2, r3
1a003606:	d0f2      	beq.n	1a0035ee <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003608:	4b06      	ldr	r3, [pc, #24]	; (1a003624 <TIMER0_IRQHandler+0x3c>)
1a00360a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00360e:	2000      	movs	r0, #0
1a003610:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003612:	2301      	movs	r3, #1
1a003614:	40ab      	lsls	r3, r5
1a003616:	4a02      	ldr	r2, [pc, #8]	; (1a003620 <TIMER0_IRQHandler+0x38>)
1a003618:	6013      	str	r3, [r2, #0]
1a00361a:	e7e8      	b.n	1a0035ee <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00361c:	bd38      	pop	{r3, r4, r5, pc}
1a00361e:	bf00      	nop
1a003620:	40084000 	.word	0x40084000
1a003624:	10000040 	.word	0x10000040

1a003628 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a003628:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00362a:	2400      	movs	r4, #0
1a00362c:	e001      	b.n	1a003632 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00362e:	3401      	adds	r4, #1
1a003630:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003632:	2c03      	cmp	r4, #3
1a003634:	d813      	bhi.n	1a00365e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a003636:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003638:	4b09      	ldr	r3, [pc, #36]	; (1a003660 <TIMER1_IRQHandler+0x38>)
1a00363a:	681a      	ldr	r2, [r3, #0]
1a00363c:	f004 010f 	and.w	r1, r4, #15
1a003640:	2301      	movs	r3, #1
1a003642:	408b      	lsls	r3, r1
1a003644:	421a      	tst	r2, r3
1a003646:	d0f2      	beq.n	1a00362e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003648:	1d23      	adds	r3, r4, #4
1a00364a:	4a06      	ldr	r2, [pc, #24]	; (1a003664 <TIMER1_IRQHandler+0x3c>)
1a00364c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003650:	2000      	movs	r0, #0
1a003652:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003654:	2301      	movs	r3, #1
1a003656:	40ab      	lsls	r3, r5
1a003658:	4a01      	ldr	r2, [pc, #4]	; (1a003660 <TIMER1_IRQHandler+0x38>)
1a00365a:	6013      	str	r3, [r2, #0]
1a00365c:	e7e7      	b.n	1a00362e <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00365e:	bd38      	pop	{r3, r4, r5, pc}
1a003660:	40085000 	.word	0x40085000
1a003664:	10000040 	.word	0x10000040

1a003668 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003668:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00366a:	2400      	movs	r4, #0
1a00366c:	e001      	b.n	1a003672 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00366e:	3401      	adds	r4, #1
1a003670:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003672:	2c03      	cmp	r4, #3
1a003674:	d814      	bhi.n	1a0036a0 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a003676:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003678:	4b0a      	ldr	r3, [pc, #40]	; (1a0036a4 <TIMER2_IRQHandler+0x3c>)
1a00367a:	681a      	ldr	r2, [r3, #0]
1a00367c:	f004 010f 	and.w	r1, r4, #15
1a003680:	2301      	movs	r3, #1
1a003682:	408b      	lsls	r3, r1
1a003684:	421a      	tst	r2, r3
1a003686:	d0f2      	beq.n	1a00366e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003688:	f104 0308 	add.w	r3, r4, #8
1a00368c:	4a06      	ldr	r2, [pc, #24]	; (1a0036a8 <TIMER2_IRQHandler+0x40>)
1a00368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a003692:	2000      	movs	r0, #0
1a003694:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003696:	2301      	movs	r3, #1
1a003698:	40ab      	lsls	r3, r5
1a00369a:	4a02      	ldr	r2, [pc, #8]	; (1a0036a4 <TIMER2_IRQHandler+0x3c>)
1a00369c:	6013      	str	r3, [r2, #0]
1a00369e:	e7e6      	b.n	1a00366e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0036a0:	bd38      	pop	{r3, r4, r5, pc}
1a0036a2:	bf00      	nop
1a0036a4:	400c3000 	.word	0x400c3000
1a0036a8:	10000040 	.word	0x10000040

1a0036ac <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0036ac:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0036ae:	2400      	movs	r4, #0
1a0036b0:	e001      	b.n	1a0036b6 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0036b2:	3401      	adds	r4, #1
1a0036b4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0036b6:	2c03      	cmp	r4, #3
1a0036b8:	d814      	bhi.n	1a0036e4 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0036ba:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0036bc:	4b0a      	ldr	r3, [pc, #40]	; (1a0036e8 <TIMER3_IRQHandler+0x3c>)
1a0036be:	681a      	ldr	r2, [r3, #0]
1a0036c0:	f004 010f 	and.w	r1, r4, #15
1a0036c4:	2301      	movs	r3, #1
1a0036c6:	408b      	lsls	r3, r1
1a0036c8:	421a      	tst	r2, r3
1a0036ca:	d0f2      	beq.n	1a0036b2 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0036cc:	f104 030c 	add.w	r3, r4, #12
1a0036d0:	4a06      	ldr	r2, [pc, #24]	; (1a0036ec <TIMER3_IRQHandler+0x40>)
1a0036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0036d6:	2000      	movs	r0, #0
1a0036d8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0036da:	2301      	movs	r3, #1
1a0036dc:	40ab      	lsls	r3, r5
1a0036de:	4a02      	ldr	r2, [pc, #8]	; (1a0036e8 <TIMER3_IRQHandler+0x3c>)
1a0036e0:	6013      	str	r3, [r2, #0]
1a0036e2:	e7e6      	b.n	1a0036b2 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0036e4:	bd38      	pop	{r3, r4, r5, pc}
1a0036e6:	bf00      	nop
1a0036e8:	400c4000 	.word	0x400c4000
1a0036ec:	10000040 	.word	0x10000040

1a0036f0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0036f0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0036f2:	4d0b      	ldr	r5, [pc, #44]	; (1a003720 <gpioObtainPinInit+0x30>)
1a0036f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0036f8:	182c      	adds	r4, r5, r0
1a0036fa:	5628      	ldrsb	r0, [r5, r0]
1a0036fc:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0036fe:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a003702:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003704:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a003708:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00370a:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00370e:	9b02      	ldr	r3, [sp, #8]
1a003710:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003712:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003716:	9b03      	ldr	r3, [sp, #12]
1a003718:	701a      	strb	r2, [r3, #0]
}
1a00371a:	bc30      	pop	{r4, r5}
1a00371c:	4770      	bx	lr
1a00371e:	bf00      	nop
1a003720:	1a004f48 	.word	0x1a004f48

1a003724 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a003724:	f110 0f02 	cmn.w	r0, #2
1a003728:	f000 80c7 	beq.w	1a0038ba <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a00372c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003730:	f000 80c5 	beq.w	1a0038be <gpioInit+0x19a>
{
1a003734:	b570      	push	{r4, r5, r6, lr}
1a003736:	b084      	sub	sp, #16
1a003738:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00373a:	2300      	movs	r3, #0
1a00373c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003740:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003744:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003748:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00374c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003750:	f10d 030b 	add.w	r3, sp, #11
1a003754:	9301      	str	r3, [sp, #4]
1a003756:	ab03      	add	r3, sp, #12
1a003758:	9300      	str	r3, [sp, #0]
1a00375a:	f10d 030d 	add.w	r3, sp, #13
1a00375e:	f10d 020e 	add.w	r2, sp, #14
1a003762:	f10d 010f 	add.w	r1, sp, #15
1a003766:	f7ff ffc3 	bl	1a0036f0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00376a:	2c05      	cmp	r4, #5
1a00376c:	f200 80a9 	bhi.w	1a0038c2 <gpioInit+0x19e>
1a003770:	e8df f004 	tbb	[pc, r4]
1a003774:	45278109 	.word	0x45278109
1a003778:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00377a:	4853      	ldr	r0, [pc, #332]	; (1a0038c8 <gpioInit+0x1a4>)
1a00377c:	f7ff fd24 	bl	1a0031c8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003780:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003782:	b004      	add	sp, #16
1a003784:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003786:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00378a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00378e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003792:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003796:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00379a:	494c      	ldr	r1, [pc, #304]	; (1a0038cc <gpioInit+0x1a8>)
1a00379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0037a4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0037a8:	2001      	movs	r0, #1
1a0037aa:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0037ae:	4c46      	ldr	r4, [pc, #280]	; (1a0038c8 <gpioInit+0x1a4>)
1a0037b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0037b4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0037b8:	ea22 0201 	bic.w	r2, r2, r1
1a0037bc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0037c0:	e7df      	b.n	1a003782 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0037c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0037c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0037ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0037ce:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0037d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0037d6:	493d      	ldr	r1, [pc, #244]	; (1a0038cc <gpioInit+0x1a8>)
1a0037d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0037e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0037e4:	2001      	movs	r0, #1
1a0037e6:	fa00 f102 	lsl.w	r1, r0, r2
1a0037ea:	4c37      	ldr	r4, [pc, #220]	; (1a0038c8 <gpioInit+0x1a4>)
1a0037ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0037f0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0037f4:	ea22 0201 	bic.w	r2, r2, r1
1a0037f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0037fc:	e7c1      	b.n	1a003782 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0037fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003802:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003806:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00380a:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00380e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003812:	492e      	ldr	r1, [pc, #184]	; (1a0038cc <gpioInit+0x1a8>)
1a003814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003818:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00381c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003820:	2001      	movs	r0, #1
1a003822:	fa00 f102 	lsl.w	r1, r0, r2
1a003826:	4c28      	ldr	r4, [pc, #160]	; (1a0038c8 <gpioInit+0x1a4>)
1a003828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00382c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003830:	ea22 0201 	bic.w	r2, r2, r1
1a003834:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003838:	e7a3      	b.n	1a003782 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00383a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00383e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003842:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003846:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00384a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00384e:	491f      	ldr	r1, [pc, #124]	; (1a0038cc <gpioInit+0x1a8>)
1a003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003854:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003858:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00385c:	2001      	movs	r0, #1
1a00385e:	fa00 f102 	lsl.w	r1, r0, r2
1a003862:	4c19      	ldr	r4, [pc, #100]	; (1a0038c8 <gpioInit+0x1a4>)
1a003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003868:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00386c:	ea22 0201 	bic.w	r2, r2, r1
1a003870:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003874:	e785      	b.n	1a003782 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a003876:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00387a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00387e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003882:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003886:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00388a:	4910      	ldr	r1, [pc, #64]	; (1a0038cc <gpioInit+0x1a8>)
1a00388c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003890:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003894:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003898:	2001      	movs	r0, #1
1a00389a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00389e:	4b0a      	ldr	r3, [pc, #40]	; (1a0038c8 <gpioInit+0x1a4>)
1a0038a0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0038a4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0038a8:	4331      	orrs	r1, r6
1a0038aa:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0038ae:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0038b0:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0038b4:	2100      	movs	r1, #0
1a0038b6:	5499      	strb	r1, [r3, r2]
1a0038b8:	e763      	b.n	1a003782 <gpioInit+0x5e>
	  return FALSE;
1a0038ba:	2000      	movs	r0, #0
1a0038bc:	4770      	bx	lr
	  return FALSE;
1a0038be:	2000      	movs	r0, #0
}
1a0038c0:	4770      	bx	lr
      ret_val = 0;
1a0038c2:	2000      	movs	r0, #0
1a0038c4:	e75d      	b.n	1a003782 <gpioInit+0x5e>
1a0038c6:	bf00      	nop
1a0038c8:	400f4000 	.word	0x400f4000
1a0038cc:	40086000 	.word	0x40086000

1a0038d0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0038d0:	f110 0f02 	cmn.w	r0, #2
1a0038d4:	d02d      	beq.n	1a003932 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0038d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0038da:	d02c      	beq.n	1a003936 <gpioWrite+0x66>
{
1a0038dc:	b510      	push	{r4, lr}
1a0038de:	b084      	sub	sp, #16
1a0038e0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0038e2:	2300      	movs	r3, #0
1a0038e4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0038e8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0038ec:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0038f0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0038f4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0038f8:	f10d 030b 	add.w	r3, sp, #11
1a0038fc:	9301      	str	r3, [sp, #4]
1a0038fe:	ab03      	add	r3, sp, #12
1a003900:	9300      	str	r3, [sp, #0]
1a003902:	f10d 030d 	add.w	r3, sp, #13
1a003906:	f10d 020e 	add.w	r2, sp, #14
1a00390a:	f10d 010f 	add.w	r1, sp, #15
1a00390e:	f7ff feef 	bl	1a0036f0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003912:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003916:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00391a:	1c21      	adds	r1, r4, #0
1a00391c:	bf18      	it	ne
1a00391e:	2101      	movne	r1, #1
1a003920:	015b      	lsls	r3, r3, #5
1a003922:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003926:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00392a:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a00392c:	2001      	movs	r0, #1
}
1a00392e:	b004      	add	sp, #16
1a003930:	bd10      	pop	{r4, pc}
	  return FALSE;
1a003932:	2000      	movs	r0, #0
1a003934:	4770      	bx	lr
	  return FALSE;
1a003936:	2000      	movs	r0, #0
}
1a003938:	4770      	bx	lr

1a00393a <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a00393a:	f110 0f02 	cmn.w	r0, #2
1a00393e:	d02c      	beq.n	1a00399a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a003940:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003944:	d02b      	beq.n	1a00399e <gpioRead+0x64>
{
1a003946:	b500      	push	{lr}
1a003948:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00394a:	2300      	movs	r3, #0
1a00394c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003950:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003954:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003958:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00395c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003960:	f10d 030b 	add.w	r3, sp, #11
1a003964:	9301      	str	r3, [sp, #4]
1a003966:	ab03      	add	r3, sp, #12
1a003968:	9300      	str	r3, [sp, #0]
1a00396a:	f10d 030d 	add.w	r3, sp, #13
1a00396e:	f10d 020e 	add.w	r2, sp, #14
1a003972:	f10d 010f 	add.w	r1, sp, #15
1a003976:	f7ff febb 	bl	1a0036f0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00397a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00397e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003982:	015b      	lsls	r3, r3, #5
1a003984:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003988:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00398c:	5c98      	ldrb	r0, [r3, r2]
1a00398e:	3000      	adds	r0, #0
1a003990:	bf18      	it	ne
1a003992:	2001      	movne	r0, #1

   return ret_val;
}
1a003994:	b005      	add	sp, #20
1a003996:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00399a:	2001      	movs	r0, #1
1a00399c:	4770      	bx	lr
      return FALSE;
1a00399e:	2000      	movs	r0, #0
}
1a0039a0:	4770      	bx	lr

1a0039a2 <gpioToggle>:
{
1a0039a2:	b510      	push	{r4, lr}
1a0039a4:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a0039a6:	f7ff ffc8 	bl	1a00393a <gpioRead>
1a0039aa:	fab0 f180 	clz	r1, r0
1a0039ae:	0949      	lsrs	r1, r1, #5
1a0039b0:	4620      	mov	r0, r4
1a0039b2:	f7ff ff8d 	bl	1a0038d0 <gpioWrite>
}
1a0039b6:	bd10      	pop	{r4, pc}

1a0039b8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0039b8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0039ba:	4b04      	ldr	r3, [pc, #16]	; (1a0039cc <USB0_IRQHandler+0x14>)
1a0039bc:	681b      	ldr	r3, [r3, #0]
1a0039be:	681b      	ldr	r3, [r3, #0]
1a0039c0:	68db      	ldr	r3, [r3, #12]
1a0039c2:	4a03      	ldr	r2, [pc, #12]	; (1a0039d0 <USB0_IRQHandler+0x18>)
1a0039c4:	6810      	ldr	r0, [r2, #0]
1a0039c6:	4798      	blx	r3
}
1a0039c8:	bd08      	pop	{r3, pc}
1a0039ca:	bf00      	nop
1a0039cc:	10002c64 	.word	0x10002c64
1a0039d0:	10002c14 	.word	0x10002c14

1a0039d4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0039d4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0039d6:	f7ff fb43 	bl	1a003060 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0039da:	4b18      	ldr	r3, [pc, #96]	; (1a003a3c <boardInit+0x68>)
1a0039dc:	6818      	ldr	r0, [r3, #0]
1a0039de:	f7ff fc6b 	bl	1a0032b8 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0039e2:	2105      	movs	r1, #5
1a0039e4:	2000      	movs	r0, #0
1a0039e6:	f7ff fe9d 	bl	1a003724 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0039ea:	2100      	movs	r1, #0
1a0039ec:	2024      	movs	r0, #36	; 0x24
1a0039ee:	f7ff fe99 	bl	1a003724 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0039f2:	2100      	movs	r1, #0
1a0039f4:	2025      	movs	r0, #37	; 0x25
1a0039f6:	f7ff fe95 	bl	1a003724 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0039fa:	2100      	movs	r1, #0
1a0039fc:	2026      	movs	r0, #38	; 0x26
1a0039fe:	f7ff fe91 	bl	1a003724 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003a02:	2100      	movs	r1, #0
1a003a04:	2027      	movs	r0, #39	; 0x27
1a003a06:	f7ff fe8d 	bl	1a003724 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a003a0a:	2101      	movs	r1, #1
1a003a0c:	2028      	movs	r0, #40	; 0x28
1a003a0e:	f7ff fe89 	bl	1a003724 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a003a12:	2101      	movs	r1, #1
1a003a14:	2029      	movs	r0, #41	; 0x29
1a003a16:	f7ff fe85 	bl	1a003724 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a003a1a:	2101      	movs	r1, #1
1a003a1c:	202a      	movs	r0, #42	; 0x2a
1a003a1e:	f7ff fe81 	bl	1a003724 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a003a22:	2101      	movs	r1, #1
1a003a24:	202b      	movs	r0, #43	; 0x2b
1a003a26:	f7ff fe7d 	bl	1a003724 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a003a2a:	2101      	movs	r1, #1
1a003a2c:	202c      	movs	r0, #44	; 0x2c
1a003a2e:	f7ff fe79 	bl	1a003724 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a003a32:	2101      	movs	r1, #1
1a003a34:	202d      	movs	r0, #45	; 0x2d
1a003a36:	f7ff fe75 	bl	1a003724 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a003a3a:	bd08      	pop	{r3, pc}
1a003a3c:	10002c60 	.word	0x10002c60

1a003a40 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003a40:	2301      	movs	r3, #1
1a003a42:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a003a46:	4b01      	ldr	r3, [pc, #4]	; (1a003a4c <clearInterrupt+0xc>)
1a003a48:	6258      	str	r0, [r3, #36]	; 0x24
}
1a003a4a:	4770      	bx	lr
1a003a4c:	40087000 	.word	0x40087000

1a003a50 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a003a52:	4b12      	ldr	r3, [pc, #72]	; (1a003a9c <serveInterrupt+0x4c>)
1a003a54:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a003a56:	4b12      	ldr	r3, [pc, #72]	; (1a003aa0 <serveInterrupt+0x50>)
1a003a58:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a003a5a:	2301      	movs	r3, #1
1a003a5c:	4083      	lsls	r3, r0
1a003a5e:	420b      	tst	r3, r1
1a003a60:	d111      	bne.n	1a003a86 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a003a62:	4910      	ldr	r1, [pc, #64]	; (1a003aa4 <serveInterrupt+0x54>)
1a003a64:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003a66:	4d10      	ldr	r5, [pc, #64]	; (1a003aa8 <serveInterrupt+0x58>)
1a003a68:	0051      	lsls	r1, r2, #1
1a003a6a:	188f      	adds	r7, r1, r2
1a003a6c:	00fc      	lsls	r4, r7, #3
1a003a6e:	4627      	mov	r7, r4
1a003a70:	442c      	add	r4, r5
1a003a72:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a003a74:	6864      	ldr	r4, [r4, #4]
1a003a76:	1b36      	subs	r6, r6, r4
1a003a78:	443d      	add	r5, r7
1a003a7a:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a003a7c:	4a08      	ldr	r2, [pc, #32]	; (1a003aa0 <serveInterrupt+0x50>)
1a003a7e:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003a80:	f7ff ffde 	bl	1a003a40 <clearInterrupt>
}
1a003a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003a86:	4907      	ldr	r1, [pc, #28]	; (1a003aa4 <serveInterrupt+0x54>)
1a003a88:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003a8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a003a8e:	00d1      	lsls	r1, r2, #3
1a003a90:	4a05      	ldr	r2, [pc, #20]	; (1a003aa8 <serveInterrupt+0x58>)
1a003a92:	440a      	add	r2, r1
1a003a94:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a003a96:	4a02      	ldr	r2, [pc, #8]	; (1a003aa0 <serveInterrupt+0x50>)
1a003a98:	61d3      	str	r3, [r2, #28]
1a003a9a:	e7f1      	b.n	1a003a80 <serveInterrupt+0x30>
1a003a9c:	1a005030 	.word	0x1a005030
1a003aa0:	40087000 	.word	0x40087000
1a003aa4:	40084000 	.word	0x40084000
1a003aa8:	10000080 	.word	0x10000080

1a003aac <GPIO0_IRQHandler>:
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifdef SAPI_USE_INTERRUPTS
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a003aac:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a003aae:	2000      	movs	r0, #0
1a003ab0:	f7ff ffce 	bl	1a003a50 <serveInterrupt>
}
1a003ab4:	bd08      	pop	{r3, pc}

1a003ab6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a003ab6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a003ab8:	2001      	movs	r0, #1
1a003aba:	f7ff ffc9 	bl	1a003a50 <serveInterrupt>
}
1a003abe:	bd08      	pop	{r3, pc}

1a003ac0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a003ac0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a003ac2:	2002      	movs	r0, #2
1a003ac4:	f7ff ffc4 	bl	1a003a50 <serveInterrupt>
}
1a003ac8:	bd08      	pop	{r3, pc}
1a003aca:	Address 0x000000001a003aca is out of bounds.


1a003acc <__aeabi_uldivmod>:
1a003acc:	b953      	cbnz	r3, 1a003ae4 <__aeabi_uldivmod+0x18>
1a003ace:	b94a      	cbnz	r2, 1a003ae4 <__aeabi_uldivmod+0x18>
1a003ad0:	2900      	cmp	r1, #0
1a003ad2:	bf08      	it	eq
1a003ad4:	2800      	cmpeq	r0, #0
1a003ad6:	bf1c      	itt	ne
1a003ad8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003adc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003ae0:	f000 b972 	b.w	1a003dc8 <__aeabi_idiv0>
1a003ae4:	f1ad 0c08 	sub.w	ip, sp, #8
1a003ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003aec:	f000 f806 	bl	1a003afc <__udivmoddi4>
1a003af0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003af8:	b004      	add	sp, #16
1a003afa:	4770      	bx	lr

1a003afc <__udivmoddi4>:
1a003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003b00:	9e08      	ldr	r6, [sp, #32]
1a003b02:	4604      	mov	r4, r0
1a003b04:	4688      	mov	r8, r1
1a003b06:	2b00      	cmp	r3, #0
1a003b08:	d14b      	bne.n	1a003ba2 <__udivmoddi4+0xa6>
1a003b0a:	428a      	cmp	r2, r1
1a003b0c:	4615      	mov	r5, r2
1a003b0e:	d967      	bls.n	1a003be0 <__udivmoddi4+0xe4>
1a003b10:	fab2 f282 	clz	r2, r2
1a003b14:	b14a      	cbz	r2, 1a003b2a <__udivmoddi4+0x2e>
1a003b16:	f1c2 0720 	rsb	r7, r2, #32
1a003b1a:	fa01 f302 	lsl.w	r3, r1, r2
1a003b1e:	fa20 f707 	lsr.w	r7, r0, r7
1a003b22:	4095      	lsls	r5, r2
1a003b24:	ea47 0803 	orr.w	r8, r7, r3
1a003b28:	4094      	lsls	r4, r2
1a003b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003b2e:	0c23      	lsrs	r3, r4, #16
1a003b30:	fbb8 f7fe 	udiv	r7, r8, lr
1a003b34:	fa1f fc85 	uxth.w	ip, r5
1a003b38:	fb0e 8817 	mls	r8, lr, r7, r8
1a003b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003b40:	fb07 f10c 	mul.w	r1, r7, ip
1a003b44:	4299      	cmp	r1, r3
1a003b46:	d909      	bls.n	1a003b5c <__udivmoddi4+0x60>
1a003b48:	18eb      	adds	r3, r5, r3
1a003b4a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003b4e:	f080 811b 	bcs.w	1a003d88 <__udivmoddi4+0x28c>
1a003b52:	4299      	cmp	r1, r3
1a003b54:	f240 8118 	bls.w	1a003d88 <__udivmoddi4+0x28c>
1a003b58:	3f02      	subs	r7, #2
1a003b5a:	442b      	add	r3, r5
1a003b5c:	1a5b      	subs	r3, r3, r1
1a003b5e:	b2a4      	uxth	r4, r4
1a003b60:	fbb3 f0fe 	udiv	r0, r3, lr
1a003b64:	fb0e 3310 	mls	r3, lr, r0, r3
1a003b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003b6c:	fb00 fc0c 	mul.w	ip, r0, ip
1a003b70:	45a4      	cmp	ip, r4
1a003b72:	d909      	bls.n	1a003b88 <__udivmoddi4+0x8c>
1a003b74:	192c      	adds	r4, r5, r4
1a003b76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003b7a:	f080 8107 	bcs.w	1a003d8c <__udivmoddi4+0x290>
1a003b7e:	45a4      	cmp	ip, r4
1a003b80:	f240 8104 	bls.w	1a003d8c <__udivmoddi4+0x290>
1a003b84:	3802      	subs	r0, #2
1a003b86:	442c      	add	r4, r5
1a003b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003b8c:	eba4 040c 	sub.w	r4, r4, ip
1a003b90:	2700      	movs	r7, #0
1a003b92:	b11e      	cbz	r6, 1a003b9c <__udivmoddi4+0xa0>
1a003b94:	40d4      	lsrs	r4, r2
1a003b96:	2300      	movs	r3, #0
1a003b98:	e9c6 4300 	strd	r4, r3, [r6]
1a003b9c:	4639      	mov	r1, r7
1a003b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003ba2:	428b      	cmp	r3, r1
1a003ba4:	d909      	bls.n	1a003bba <__udivmoddi4+0xbe>
1a003ba6:	2e00      	cmp	r6, #0
1a003ba8:	f000 80eb 	beq.w	1a003d82 <__udivmoddi4+0x286>
1a003bac:	2700      	movs	r7, #0
1a003bae:	e9c6 0100 	strd	r0, r1, [r6]
1a003bb2:	4638      	mov	r0, r7
1a003bb4:	4639      	mov	r1, r7
1a003bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003bba:	fab3 f783 	clz	r7, r3
1a003bbe:	2f00      	cmp	r7, #0
1a003bc0:	d147      	bne.n	1a003c52 <__udivmoddi4+0x156>
1a003bc2:	428b      	cmp	r3, r1
1a003bc4:	d302      	bcc.n	1a003bcc <__udivmoddi4+0xd0>
1a003bc6:	4282      	cmp	r2, r0
1a003bc8:	f200 80fa 	bhi.w	1a003dc0 <__udivmoddi4+0x2c4>
1a003bcc:	1a84      	subs	r4, r0, r2
1a003bce:	eb61 0303 	sbc.w	r3, r1, r3
1a003bd2:	2001      	movs	r0, #1
1a003bd4:	4698      	mov	r8, r3
1a003bd6:	2e00      	cmp	r6, #0
1a003bd8:	d0e0      	beq.n	1a003b9c <__udivmoddi4+0xa0>
1a003bda:	e9c6 4800 	strd	r4, r8, [r6]
1a003bde:	e7dd      	b.n	1a003b9c <__udivmoddi4+0xa0>
1a003be0:	b902      	cbnz	r2, 1a003be4 <__udivmoddi4+0xe8>
1a003be2:	deff      	udf	#255	; 0xff
1a003be4:	fab2 f282 	clz	r2, r2
1a003be8:	2a00      	cmp	r2, #0
1a003bea:	f040 808f 	bne.w	1a003d0c <__udivmoddi4+0x210>
1a003bee:	1b49      	subs	r1, r1, r5
1a003bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003bf4:	fa1f f885 	uxth.w	r8, r5
1a003bf8:	2701      	movs	r7, #1
1a003bfa:	fbb1 fcfe 	udiv	ip, r1, lr
1a003bfe:	0c23      	lsrs	r3, r4, #16
1a003c00:	fb0e 111c 	mls	r1, lr, ip, r1
1a003c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003c08:	fb08 f10c 	mul.w	r1, r8, ip
1a003c0c:	4299      	cmp	r1, r3
1a003c0e:	d907      	bls.n	1a003c20 <__udivmoddi4+0x124>
1a003c10:	18eb      	adds	r3, r5, r3
1a003c12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003c16:	d202      	bcs.n	1a003c1e <__udivmoddi4+0x122>
1a003c18:	4299      	cmp	r1, r3
1a003c1a:	f200 80cd 	bhi.w	1a003db8 <__udivmoddi4+0x2bc>
1a003c1e:	4684      	mov	ip, r0
1a003c20:	1a59      	subs	r1, r3, r1
1a003c22:	b2a3      	uxth	r3, r4
1a003c24:	fbb1 f0fe 	udiv	r0, r1, lr
1a003c28:	fb0e 1410 	mls	r4, lr, r0, r1
1a003c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003c30:	fb08 f800 	mul.w	r8, r8, r0
1a003c34:	45a0      	cmp	r8, r4
1a003c36:	d907      	bls.n	1a003c48 <__udivmoddi4+0x14c>
1a003c38:	192c      	adds	r4, r5, r4
1a003c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003c3e:	d202      	bcs.n	1a003c46 <__udivmoddi4+0x14a>
1a003c40:	45a0      	cmp	r8, r4
1a003c42:	f200 80b6 	bhi.w	1a003db2 <__udivmoddi4+0x2b6>
1a003c46:	4618      	mov	r0, r3
1a003c48:	eba4 0408 	sub.w	r4, r4, r8
1a003c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003c50:	e79f      	b.n	1a003b92 <__udivmoddi4+0x96>
1a003c52:	f1c7 0c20 	rsb	ip, r7, #32
1a003c56:	40bb      	lsls	r3, r7
1a003c58:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003c5c:	ea4e 0e03 	orr.w	lr, lr, r3
1a003c60:	fa01 f407 	lsl.w	r4, r1, r7
1a003c64:	fa20 f50c 	lsr.w	r5, r0, ip
1a003c68:	fa21 f30c 	lsr.w	r3, r1, ip
1a003c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003c70:	4325      	orrs	r5, r4
1a003c72:	fbb3 f9f8 	udiv	r9, r3, r8
1a003c76:	0c2c      	lsrs	r4, r5, #16
1a003c78:	fb08 3319 	mls	r3, r8, r9, r3
1a003c7c:	fa1f fa8e 	uxth.w	sl, lr
1a003c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003c84:	fb09 f40a 	mul.w	r4, r9, sl
1a003c88:	429c      	cmp	r4, r3
1a003c8a:	fa02 f207 	lsl.w	r2, r2, r7
1a003c8e:	fa00 f107 	lsl.w	r1, r0, r7
1a003c92:	d90b      	bls.n	1a003cac <__udivmoddi4+0x1b0>
1a003c94:	eb1e 0303 	adds.w	r3, lr, r3
1a003c98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003c9c:	f080 8087 	bcs.w	1a003dae <__udivmoddi4+0x2b2>
1a003ca0:	429c      	cmp	r4, r3
1a003ca2:	f240 8084 	bls.w	1a003dae <__udivmoddi4+0x2b2>
1a003ca6:	f1a9 0902 	sub.w	r9, r9, #2
1a003caa:	4473      	add	r3, lr
1a003cac:	1b1b      	subs	r3, r3, r4
1a003cae:	b2ad      	uxth	r5, r5
1a003cb0:	fbb3 f0f8 	udiv	r0, r3, r8
1a003cb4:	fb08 3310 	mls	r3, r8, r0, r3
1a003cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003cbc:	fb00 fa0a 	mul.w	sl, r0, sl
1a003cc0:	45a2      	cmp	sl, r4
1a003cc2:	d908      	bls.n	1a003cd6 <__udivmoddi4+0x1da>
1a003cc4:	eb1e 0404 	adds.w	r4, lr, r4
1a003cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003ccc:	d26b      	bcs.n	1a003da6 <__udivmoddi4+0x2aa>
1a003cce:	45a2      	cmp	sl, r4
1a003cd0:	d969      	bls.n	1a003da6 <__udivmoddi4+0x2aa>
1a003cd2:	3802      	subs	r0, #2
1a003cd4:	4474      	add	r4, lr
1a003cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003cda:	fba0 8902 	umull	r8, r9, r0, r2
1a003cde:	eba4 040a 	sub.w	r4, r4, sl
1a003ce2:	454c      	cmp	r4, r9
1a003ce4:	46c2      	mov	sl, r8
1a003ce6:	464b      	mov	r3, r9
1a003ce8:	d354      	bcc.n	1a003d94 <__udivmoddi4+0x298>
1a003cea:	d051      	beq.n	1a003d90 <__udivmoddi4+0x294>
1a003cec:	2e00      	cmp	r6, #0
1a003cee:	d069      	beq.n	1a003dc4 <__udivmoddi4+0x2c8>
1a003cf0:	ebb1 050a 	subs.w	r5, r1, sl
1a003cf4:	eb64 0403 	sbc.w	r4, r4, r3
1a003cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003cfc:	40fd      	lsrs	r5, r7
1a003cfe:	40fc      	lsrs	r4, r7
1a003d00:	ea4c 0505 	orr.w	r5, ip, r5
1a003d04:	e9c6 5400 	strd	r5, r4, [r6]
1a003d08:	2700      	movs	r7, #0
1a003d0a:	e747      	b.n	1a003b9c <__udivmoddi4+0xa0>
1a003d0c:	f1c2 0320 	rsb	r3, r2, #32
1a003d10:	fa20 f703 	lsr.w	r7, r0, r3
1a003d14:	4095      	lsls	r5, r2
1a003d16:	fa01 f002 	lsl.w	r0, r1, r2
1a003d1a:	fa21 f303 	lsr.w	r3, r1, r3
1a003d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003d22:	4338      	orrs	r0, r7
1a003d24:	0c01      	lsrs	r1, r0, #16
1a003d26:	fbb3 f7fe 	udiv	r7, r3, lr
1a003d2a:	fa1f f885 	uxth.w	r8, r5
1a003d2e:	fb0e 3317 	mls	r3, lr, r7, r3
1a003d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003d36:	fb07 f308 	mul.w	r3, r7, r8
1a003d3a:	428b      	cmp	r3, r1
1a003d3c:	fa04 f402 	lsl.w	r4, r4, r2
1a003d40:	d907      	bls.n	1a003d52 <__udivmoddi4+0x256>
1a003d42:	1869      	adds	r1, r5, r1
1a003d44:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003d48:	d22f      	bcs.n	1a003daa <__udivmoddi4+0x2ae>
1a003d4a:	428b      	cmp	r3, r1
1a003d4c:	d92d      	bls.n	1a003daa <__udivmoddi4+0x2ae>
1a003d4e:	3f02      	subs	r7, #2
1a003d50:	4429      	add	r1, r5
1a003d52:	1acb      	subs	r3, r1, r3
1a003d54:	b281      	uxth	r1, r0
1a003d56:	fbb3 f0fe 	udiv	r0, r3, lr
1a003d5a:	fb0e 3310 	mls	r3, lr, r0, r3
1a003d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003d62:	fb00 f308 	mul.w	r3, r0, r8
1a003d66:	428b      	cmp	r3, r1
1a003d68:	d907      	bls.n	1a003d7a <__udivmoddi4+0x27e>
1a003d6a:	1869      	adds	r1, r5, r1
1a003d6c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003d70:	d217      	bcs.n	1a003da2 <__udivmoddi4+0x2a6>
1a003d72:	428b      	cmp	r3, r1
1a003d74:	d915      	bls.n	1a003da2 <__udivmoddi4+0x2a6>
1a003d76:	3802      	subs	r0, #2
1a003d78:	4429      	add	r1, r5
1a003d7a:	1ac9      	subs	r1, r1, r3
1a003d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003d80:	e73b      	b.n	1a003bfa <__udivmoddi4+0xfe>
1a003d82:	4637      	mov	r7, r6
1a003d84:	4630      	mov	r0, r6
1a003d86:	e709      	b.n	1a003b9c <__udivmoddi4+0xa0>
1a003d88:	4607      	mov	r7, r0
1a003d8a:	e6e7      	b.n	1a003b5c <__udivmoddi4+0x60>
1a003d8c:	4618      	mov	r0, r3
1a003d8e:	e6fb      	b.n	1a003b88 <__udivmoddi4+0x8c>
1a003d90:	4541      	cmp	r1, r8
1a003d92:	d2ab      	bcs.n	1a003cec <__udivmoddi4+0x1f0>
1a003d94:	ebb8 0a02 	subs.w	sl, r8, r2
1a003d98:	eb69 020e 	sbc.w	r2, r9, lr
1a003d9c:	3801      	subs	r0, #1
1a003d9e:	4613      	mov	r3, r2
1a003da0:	e7a4      	b.n	1a003cec <__udivmoddi4+0x1f0>
1a003da2:	4660      	mov	r0, ip
1a003da4:	e7e9      	b.n	1a003d7a <__udivmoddi4+0x27e>
1a003da6:	4618      	mov	r0, r3
1a003da8:	e795      	b.n	1a003cd6 <__udivmoddi4+0x1da>
1a003daa:	4667      	mov	r7, ip
1a003dac:	e7d1      	b.n	1a003d52 <__udivmoddi4+0x256>
1a003dae:	4681      	mov	r9, r0
1a003db0:	e77c      	b.n	1a003cac <__udivmoddi4+0x1b0>
1a003db2:	3802      	subs	r0, #2
1a003db4:	442c      	add	r4, r5
1a003db6:	e747      	b.n	1a003c48 <__udivmoddi4+0x14c>
1a003db8:	f1ac 0c02 	sub.w	ip, ip, #2
1a003dbc:	442b      	add	r3, r5
1a003dbe:	e72f      	b.n	1a003c20 <__udivmoddi4+0x124>
1a003dc0:	4638      	mov	r0, r7
1a003dc2:	e708      	b.n	1a003bd6 <__udivmoddi4+0xda>
1a003dc4:	4637      	mov	r7, r6
1a003dc6:	e6e9      	b.n	1a003b9c <__udivmoddi4+0xa0>

1a003dc8 <__aeabi_idiv0>:
1a003dc8:	4770      	bx	lr
1a003dca:	bf00      	nop

1a003dcc <__sflush_r>:
1a003dcc:	898a      	ldrh	r2, [r1, #12]
1a003dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003dd2:	4605      	mov	r5, r0
1a003dd4:	0710      	lsls	r0, r2, #28
1a003dd6:	460c      	mov	r4, r1
1a003dd8:	d458      	bmi.n	1a003e8c <__sflush_r+0xc0>
1a003dda:	684b      	ldr	r3, [r1, #4]
1a003ddc:	2b00      	cmp	r3, #0
1a003dde:	dc05      	bgt.n	1a003dec <__sflush_r+0x20>
1a003de0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003de2:	2b00      	cmp	r3, #0
1a003de4:	dc02      	bgt.n	1a003dec <__sflush_r+0x20>
1a003de6:	2000      	movs	r0, #0
1a003de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003dec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003dee:	2e00      	cmp	r6, #0
1a003df0:	d0f9      	beq.n	1a003de6 <__sflush_r+0x1a>
1a003df2:	2300      	movs	r3, #0
1a003df4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003df8:	682f      	ldr	r7, [r5, #0]
1a003dfa:	6a21      	ldr	r1, [r4, #32]
1a003dfc:	602b      	str	r3, [r5, #0]
1a003dfe:	d032      	beq.n	1a003e66 <__sflush_r+0x9a>
1a003e00:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003e02:	89a3      	ldrh	r3, [r4, #12]
1a003e04:	075a      	lsls	r2, r3, #29
1a003e06:	d505      	bpl.n	1a003e14 <__sflush_r+0x48>
1a003e08:	6863      	ldr	r3, [r4, #4]
1a003e0a:	1ac0      	subs	r0, r0, r3
1a003e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003e0e:	b10b      	cbz	r3, 1a003e14 <__sflush_r+0x48>
1a003e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003e12:	1ac0      	subs	r0, r0, r3
1a003e14:	2300      	movs	r3, #0
1a003e16:	4602      	mov	r2, r0
1a003e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003e1a:	6a21      	ldr	r1, [r4, #32]
1a003e1c:	4628      	mov	r0, r5
1a003e1e:	47b0      	blx	r6
1a003e20:	1c43      	adds	r3, r0, #1
1a003e22:	89a3      	ldrh	r3, [r4, #12]
1a003e24:	d106      	bne.n	1a003e34 <__sflush_r+0x68>
1a003e26:	6829      	ldr	r1, [r5, #0]
1a003e28:	291d      	cmp	r1, #29
1a003e2a:	d848      	bhi.n	1a003ebe <__sflush_r+0xf2>
1a003e2c:	4a29      	ldr	r2, [pc, #164]	; (1a003ed4 <__sflush_r+0x108>)
1a003e2e:	40ca      	lsrs	r2, r1
1a003e30:	07d6      	lsls	r6, r2, #31
1a003e32:	d544      	bpl.n	1a003ebe <__sflush_r+0xf2>
1a003e34:	2200      	movs	r2, #0
1a003e36:	6062      	str	r2, [r4, #4]
1a003e38:	04d9      	lsls	r1, r3, #19
1a003e3a:	6922      	ldr	r2, [r4, #16]
1a003e3c:	6022      	str	r2, [r4, #0]
1a003e3e:	d504      	bpl.n	1a003e4a <__sflush_r+0x7e>
1a003e40:	1c42      	adds	r2, r0, #1
1a003e42:	d101      	bne.n	1a003e48 <__sflush_r+0x7c>
1a003e44:	682b      	ldr	r3, [r5, #0]
1a003e46:	b903      	cbnz	r3, 1a003e4a <__sflush_r+0x7e>
1a003e48:	6560      	str	r0, [r4, #84]	; 0x54
1a003e4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003e4c:	602f      	str	r7, [r5, #0]
1a003e4e:	2900      	cmp	r1, #0
1a003e50:	d0c9      	beq.n	1a003de6 <__sflush_r+0x1a>
1a003e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003e56:	4299      	cmp	r1, r3
1a003e58:	d002      	beq.n	1a003e60 <__sflush_r+0x94>
1a003e5a:	4628      	mov	r0, r5
1a003e5c:	f000 f968 	bl	1a004130 <_free_r>
1a003e60:	2000      	movs	r0, #0
1a003e62:	6360      	str	r0, [r4, #52]	; 0x34
1a003e64:	e7c0      	b.n	1a003de8 <__sflush_r+0x1c>
1a003e66:	2301      	movs	r3, #1
1a003e68:	4628      	mov	r0, r5
1a003e6a:	47b0      	blx	r6
1a003e6c:	1c41      	adds	r1, r0, #1
1a003e6e:	d1c8      	bne.n	1a003e02 <__sflush_r+0x36>
1a003e70:	682b      	ldr	r3, [r5, #0]
1a003e72:	2b00      	cmp	r3, #0
1a003e74:	d0c5      	beq.n	1a003e02 <__sflush_r+0x36>
1a003e76:	2b1d      	cmp	r3, #29
1a003e78:	d001      	beq.n	1a003e7e <__sflush_r+0xb2>
1a003e7a:	2b16      	cmp	r3, #22
1a003e7c:	d101      	bne.n	1a003e82 <__sflush_r+0xb6>
1a003e7e:	602f      	str	r7, [r5, #0]
1a003e80:	e7b1      	b.n	1a003de6 <__sflush_r+0x1a>
1a003e82:	89a3      	ldrh	r3, [r4, #12]
1a003e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003e88:	81a3      	strh	r3, [r4, #12]
1a003e8a:	e7ad      	b.n	1a003de8 <__sflush_r+0x1c>
1a003e8c:	690f      	ldr	r7, [r1, #16]
1a003e8e:	2f00      	cmp	r7, #0
1a003e90:	d0a9      	beq.n	1a003de6 <__sflush_r+0x1a>
1a003e92:	0793      	lsls	r3, r2, #30
1a003e94:	680e      	ldr	r6, [r1, #0]
1a003e96:	bf08      	it	eq
1a003e98:	694b      	ldreq	r3, [r1, #20]
1a003e9a:	600f      	str	r7, [r1, #0]
1a003e9c:	bf18      	it	ne
1a003e9e:	2300      	movne	r3, #0
1a003ea0:	eba6 0807 	sub.w	r8, r6, r7
1a003ea4:	608b      	str	r3, [r1, #8]
1a003ea6:	f1b8 0f00 	cmp.w	r8, #0
1a003eaa:	dd9c      	ble.n	1a003de6 <__sflush_r+0x1a>
1a003eac:	4643      	mov	r3, r8
1a003eae:	463a      	mov	r2, r7
1a003eb0:	6a21      	ldr	r1, [r4, #32]
1a003eb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003eb4:	4628      	mov	r0, r5
1a003eb6:	47b0      	blx	r6
1a003eb8:	2800      	cmp	r0, #0
1a003eba:	dc06      	bgt.n	1a003eca <__sflush_r+0xfe>
1a003ebc:	89a3      	ldrh	r3, [r4, #12]
1a003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003ec2:	81a3      	strh	r3, [r4, #12]
1a003ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003ec8:	e78e      	b.n	1a003de8 <__sflush_r+0x1c>
1a003eca:	4407      	add	r7, r0
1a003ecc:	eba8 0800 	sub.w	r8, r8, r0
1a003ed0:	e7e9      	b.n	1a003ea6 <__sflush_r+0xda>
1a003ed2:	bf00      	nop
1a003ed4:	20400001 	.word	0x20400001

1a003ed8 <_fflush_r>:
1a003ed8:	b538      	push	{r3, r4, r5, lr}
1a003eda:	690b      	ldr	r3, [r1, #16]
1a003edc:	4605      	mov	r5, r0
1a003ede:	460c      	mov	r4, r1
1a003ee0:	b1db      	cbz	r3, 1a003f1a <_fflush_r+0x42>
1a003ee2:	b118      	cbz	r0, 1a003eec <_fflush_r+0x14>
1a003ee4:	6983      	ldr	r3, [r0, #24]
1a003ee6:	b90b      	cbnz	r3, 1a003eec <_fflush_r+0x14>
1a003ee8:	f000 f860 	bl	1a003fac <__sinit>
1a003eec:	4b0c      	ldr	r3, [pc, #48]	; (1a003f20 <_fflush_r+0x48>)
1a003eee:	429c      	cmp	r4, r3
1a003ef0:	d109      	bne.n	1a003f06 <_fflush_r+0x2e>
1a003ef2:	686c      	ldr	r4, [r5, #4]
1a003ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003ef8:	b17b      	cbz	r3, 1a003f1a <_fflush_r+0x42>
1a003efa:	4621      	mov	r1, r4
1a003efc:	4628      	mov	r0, r5
1a003efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003f02:	f7ff bf63 	b.w	1a003dcc <__sflush_r>
1a003f06:	4b07      	ldr	r3, [pc, #28]	; (1a003f24 <_fflush_r+0x4c>)
1a003f08:	429c      	cmp	r4, r3
1a003f0a:	d101      	bne.n	1a003f10 <_fflush_r+0x38>
1a003f0c:	68ac      	ldr	r4, [r5, #8]
1a003f0e:	e7f1      	b.n	1a003ef4 <_fflush_r+0x1c>
1a003f10:	4b05      	ldr	r3, [pc, #20]	; (1a003f28 <_fflush_r+0x50>)
1a003f12:	429c      	cmp	r4, r3
1a003f14:	bf08      	it	eq
1a003f16:	68ec      	ldreq	r4, [r5, #12]
1a003f18:	e7ec      	b.n	1a003ef4 <_fflush_r+0x1c>
1a003f1a:	2000      	movs	r0, #0
1a003f1c:	bd38      	pop	{r3, r4, r5, pc}
1a003f1e:	bf00      	nop
1a003f20:	1a005054 	.word	0x1a005054
1a003f24:	1a005074 	.word	0x1a005074
1a003f28:	1a005034 	.word	0x1a005034

1a003f2c <std>:
1a003f2c:	2300      	movs	r3, #0
1a003f2e:	b510      	push	{r4, lr}
1a003f30:	4604      	mov	r4, r0
1a003f32:	e9c0 3300 	strd	r3, r3, [r0]
1a003f36:	6083      	str	r3, [r0, #8]
1a003f38:	8181      	strh	r1, [r0, #12]
1a003f3a:	6643      	str	r3, [r0, #100]	; 0x64
1a003f3c:	81c2      	strh	r2, [r0, #14]
1a003f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003f42:	6183      	str	r3, [r0, #24]
1a003f44:	4619      	mov	r1, r3
1a003f46:	2208      	movs	r2, #8
1a003f48:	305c      	adds	r0, #92	; 0x5c
1a003f4a:	f000 f8e8 	bl	1a00411e <memset>
1a003f4e:	4b05      	ldr	r3, [pc, #20]	; (1a003f64 <std+0x38>)
1a003f50:	6263      	str	r3, [r4, #36]	; 0x24
1a003f52:	4b05      	ldr	r3, [pc, #20]	; (1a003f68 <std+0x3c>)
1a003f54:	62a3      	str	r3, [r4, #40]	; 0x28
1a003f56:	4b05      	ldr	r3, [pc, #20]	; (1a003f6c <std+0x40>)
1a003f58:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003f5a:	4b05      	ldr	r3, [pc, #20]	; (1a003f70 <std+0x44>)
1a003f5c:	6224      	str	r4, [r4, #32]
1a003f5e:	6323      	str	r3, [r4, #48]	; 0x30
1a003f60:	bd10      	pop	{r4, pc}
1a003f62:	bf00      	nop
1a003f64:	1a004379 	.word	0x1a004379
1a003f68:	1a00439b 	.word	0x1a00439b
1a003f6c:	1a0043d3 	.word	0x1a0043d3
1a003f70:	1a0043f7 	.word	0x1a0043f7

1a003f74 <_cleanup_r>:
1a003f74:	4901      	ldr	r1, [pc, #4]	; (1a003f7c <_cleanup_r+0x8>)
1a003f76:	f000 b885 	b.w	1a004084 <_fwalk_reent>
1a003f7a:	bf00      	nop
1a003f7c:	1a003ed9 	.word	0x1a003ed9

1a003f80 <__sfmoreglue>:
1a003f80:	b570      	push	{r4, r5, r6, lr}
1a003f82:	1e4a      	subs	r2, r1, #1
1a003f84:	2568      	movs	r5, #104	; 0x68
1a003f86:	4355      	muls	r5, r2
1a003f88:	460e      	mov	r6, r1
1a003f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003f8e:	f000 f91d 	bl	1a0041cc <_malloc_r>
1a003f92:	4604      	mov	r4, r0
1a003f94:	b140      	cbz	r0, 1a003fa8 <__sfmoreglue+0x28>
1a003f96:	2100      	movs	r1, #0
1a003f98:	e9c0 1600 	strd	r1, r6, [r0]
1a003f9c:	300c      	adds	r0, #12
1a003f9e:	60a0      	str	r0, [r4, #8]
1a003fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003fa4:	f000 f8bb 	bl	1a00411e <memset>
1a003fa8:	4620      	mov	r0, r4
1a003faa:	bd70      	pop	{r4, r5, r6, pc}

1a003fac <__sinit>:
1a003fac:	6983      	ldr	r3, [r0, #24]
1a003fae:	b510      	push	{r4, lr}
1a003fb0:	4604      	mov	r4, r0
1a003fb2:	bb33      	cbnz	r3, 1a004002 <__sinit+0x56>
1a003fb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a003fb8:	6503      	str	r3, [r0, #80]	; 0x50
1a003fba:	4b12      	ldr	r3, [pc, #72]	; (1a004004 <__sinit+0x58>)
1a003fbc:	4a12      	ldr	r2, [pc, #72]	; (1a004008 <__sinit+0x5c>)
1a003fbe:	681b      	ldr	r3, [r3, #0]
1a003fc0:	6282      	str	r2, [r0, #40]	; 0x28
1a003fc2:	4298      	cmp	r0, r3
1a003fc4:	bf04      	itt	eq
1a003fc6:	2301      	moveq	r3, #1
1a003fc8:	6183      	streq	r3, [r0, #24]
1a003fca:	f000 f81f 	bl	1a00400c <__sfp>
1a003fce:	6060      	str	r0, [r4, #4]
1a003fd0:	4620      	mov	r0, r4
1a003fd2:	f000 f81b 	bl	1a00400c <__sfp>
1a003fd6:	60a0      	str	r0, [r4, #8]
1a003fd8:	4620      	mov	r0, r4
1a003fda:	f000 f817 	bl	1a00400c <__sfp>
1a003fde:	2200      	movs	r2, #0
1a003fe0:	60e0      	str	r0, [r4, #12]
1a003fe2:	2104      	movs	r1, #4
1a003fe4:	6860      	ldr	r0, [r4, #4]
1a003fe6:	f7ff ffa1 	bl	1a003f2c <std>
1a003fea:	2201      	movs	r2, #1
1a003fec:	2109      	movs	r1, #9
1a003fee:	68a0      	ldr	r0, [r4, #8]
1a003ff0:	f7ff ff9c 	bl	1a003f2c <std>
1a003ff4:	2202      	movs	r2, #2
1a003ff6:	2112      	movs	r1, #18
1a003ff8:	68e0      	ldr	r0, [r4, #12]
1a003ffa:	f7ff ff97 	bl	1a003f2c <std>
1a003ffe:	2301      	movs	r3, #1
1a004000:	61a3      	str	r3, [r4, #24]
1a004002:	bd10      	pop	{r4, pc}
1a004004:	1a005094 	.word	0x1a005094
1a004008:	1a003f75 	.word	0x1a003f75

1a00400c <__sfp>:
1a00400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00400e:	4b1b      	ldr	r3, [pc, #108]	; (1a00407c <__sfp+0x70>)
1a004010:	681e      	ldr	r6, [r3, #0]
1a004012:	69b3      	ldr	r3, [r6, #24]
1a004014:	4607      	mov	r7, r0
1a004016:	b913      	cbnz	r3, 1a00401e <__sfp+0x12>
1a004018:	4630      	mov	r0, r6
1a00401a:	f7ff ffc7 	bl	1a003fac <__sinit>
1a00401e:	3648      	adds	r6, #72	; 0x48
1a004020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004024:	3b01      	subs	r3, #1
1a004026:	d503      	bpl.n	1a004030 <__sfp+0x24>
1a004028:	6833      	ldr	r3, [r6, #0]
1a00402a:	b133      	cbz	r3, 1a00403a <__sfp+0x2e>
1a00402c:	6836      	ldr	r6, [r6, #0]
1a00402e:	e7f7      	b.n	1a004020 <__sfp+0x14>
1a004030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004034:	b16d      	cbz	r5, 1a004052 <__sfp+0x46>
1a004036:	3468      	adds	r4, #104	; 0x68
1a004038:	e7f4      	b.n	1a004024 <__sfp+0x18>
1a00403a:	2104      	movs	r1, #4
1a00403c:	4638      	mov	r0, r7
1a00403e:	f7ff ff9f 	bl	1a003f80 <__sfmoreglue>
1a004042:	6030      	str	r0, [r6, #0]
1a004044:	2800      	cmp	r0, #0
1a004046:	d1f1      	bne.n	1a00402c <__sfp+0x20>
1a004048:	230c      	movs	r3, #12
1a00404a:	603b      	str	r3, [r7, #0]
1a00404c:	4604      	mov	r4, r0
1a00404e:	4620      	mov	r0, r4
1a004050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004052:	4b0b      	ldr	r3, [pc, #44]	; (1a004080 <__sfp+0x74>)
1a004054:	6665      	str	r5, [r4, #100]	; 0x64
1a004056:	e9c4 5500 	strd	r5, r5, [r4]
1a00405a:	60a5      	str	r5, [r4, #8]
1a00405c:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004060:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004064:	2208      	movs	r2, #8
1a004066:	4629      	mov	r1, r5
1a004068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a00406c:	f000 f857 	bl	1a00411e <memset>
1a004070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004078:	e7e9      	b.n	1a00404e <__sfp+0x42>
1a00407a:	bf00      	nop
1a00407c:	1a005094 	.word	0x1a005094
1a004080:	ffff0001 	.word	0xffff0001

1a004084 <_fwalk_reent>:
1a004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004088:	4680      	mov	r8, r0
1a00408a:	4689      	mov	r9, r1
1a00408c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004090:	2600      	movs	r6, #0
1a004092:	b914      	cbnz	r4, 1a00409a <_fwalk_reent+0x16>
1a004094:	4630      	mov	r0, r6
1a004096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00409a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a00409e:	3f01      	subs	r7, #1
1a0040a0:	d501      	bpl.n	1a0040a6 <_fwalk_reent+0x22>
1a0040a2:	6824      	ldr	r4, [r4, #0]
1a0040a4:	e7f5      	b.n	1a004092 <_fwalk_reent+0xe>
1a0040a6:	89ab      	ldrh	r3, [r5, #12]
1a0040a8:	2b01      	cmp	r3, #1
1a0040aa:	d907      	bls.n	1a0040bc <_fwalk_reent+0x38>
1a0040ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a0040b0:	3301      	adds	r3, #1
1a0040b2:	d003      	beq.n	1a0040bc <_fwalk_reent+0x38>
1a0040b4:	4629      	mov	r1, r5
1a0040b6:	4640      	mov	r0, r8
1a0040b8:	47c8      	blx	r9
1a0040ba:	4306      	orrs	r6, r0
1a0040bc:	3568      	adds	r5, #104	; 0x68
1a0040be:	e7ee      	b.n	1a00409e <_fwalk_reent+0x1a>

1a0040c0 <__libc_init_array>:
1a0040c0:	b570      	push	{r4, r5, r6, lr}
1a0040c2:	4e0d      	ldr	r6, [pc, #52]	; (1a0040f8 <__libc_init_array+0x38>)
1a0040c4:	4c0d      	ldr	r4, [pc, #52]	; (1a0040fc <__libc_init_array+0x3c>)
1a0040c6:	1ba4      	subs	r4, r4, r6
1a0040c8:	10a4      	asrs	r4, r4, #2
1a0040ca:	2500      	movs	r5, #0
1a0040cc:	42a5      	cmp	r5, r4
1a0040ce:	d109      	bne.n	1a0040e4 <__libc_init_array+0x24>
1a0040d0:	4e0b      	ldr	r6, [pc, #44]	; (1a004100 <__libc_init_array+0x40>)
1a0040d2:	4c0c      	ldr	r4, [pc, #48]	; (1a004104 <__libc_init_array+0x44>)
1a0040d4:	f7fc fab9 	bl	1a00064a <_init>
1a0040d8:	1ba4      	subs	r4, r4, r6
1a0040da:	10a4      	asrs	r4, r4, #2
1a0040dc:	2500      	movs	r5, #0
1a0040de:	42a5      	cmp	r5, r4
1a0040e0:	d105      	bne.n	1a0040ee <__libc_init_array+0x2e>
1a0040e2:	bd70      	pop	{r4, r5, r6, pc}
1a0040e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0040e8:	4798      	blx	r3
1a0040ea:	3501      	adds	r5, #1
1a0040ec:	e7ee      	b.n	1a0040cc <__libc_init_array+0xc>
1a0040ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0040f2:	4798      	blx	r3
1a0040f4:	3501      	adds	r5, #1
1a0040f6:	e7f2      	b.n	1a0040de <__libc_init_array+0x1e>
1a0040f8:	1a0050cc 	.word	0x1a0050cc
1a0040fc:	1a0050cc 	.word	0x1a0050cc
1a004100:	1a0050cc 	.word	0x1a0050cc
1a004104:	1a0050d0 	.word	0x1a0050d0

1a004108 <memcpy>:
1a004108:	b510      	push	{r4, lr}
1a00410a:	1e43      	subs	r3, r0, #1
1a00410c:	440a      	add	r2, r1
1a00410e:	4291      	cmp	r1, r2
1a004110:	d100      	bne.n	1a004114 <memcpy+0xc>
1a004112:	bd10      	pop	{r4, pc}
1a004114:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004118:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00411c:	e7f7      	b.n	1a00410e <memcpy+0x6>

1a00411e <memset>:
1a00411e:	4402      	add	r2, r0
1a004120:	4603      	mov	r3, r0
1a004122:	4293      	cmp	r3, r2
1a004124:	d100      	bne.n	1a004128 <memset+0xa>
1a004126:	4770      	bx	lr
1a004128:	f803 1b01 	strb.w	r1, [r3], #1
1a00412c:	e7f9      	b.n	1a004122 <memset+0x4>
1a00412e:	Address 0x000000001a00412e is out of bounds.


1a004130 <_free_r>:
1a004130:	b538      	push	{r3, r4, r5, lr}
1a004132:	4605      	mov	r5, r0
1a004134:	2900      	cmp	r1, #0
1a004136:	d045      	beq.n	1a0041c4 <_free_r+0x94>
1a004138:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00413c:	1f0c      	subs	r4, r1, #4
1a00413e:	2b00      	cmp	r3, #0
1a004140:	bfb8      	it	lt
1a004142:	18e4      	addlt	r4, r4, r3
1a004144:	f000 fa80 	bl	1a004648 <__malloc_lock>
1a004148:	4a1f      	ldr	r2, [pc, #124]	; (1a0041c8 <_free_r+0x98>)
1a00414a:	6813      	ldr	r3, [r2, #0]
1a00414c:	4610      	mov	r0, r2
1a00414e:	b933      	cbnz	r3, 1a00415e <_free_r+0x2e>
1a004150:	6063      	str	r3, [r4, #4]
1a004152:	6014      	str	r4, [r2, #0]
1a004154:	4628      	mov	r0, r5
1a004156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00415a:	f000 ba76 	b.w	1a00464a <__malloc_unlock>
1a00415e:	42a3      	cmp	r3, r4
1a004160:	d90c      	bls.n	1a00417c <_free_r+0x4c>
1a004162:	6821      	ldr	r1, [r4, #0]
1a004164:	1862      	adds	r2, r4, r1
1a004166:	4293      	cmp	r3, r2
1a004168:	bf04      	itt	eq
1a00416a:	681a      	ldreq	r2, [r3, #0]
1a00416c:	685b      	ldreq	r3, [r3, #4]
1a00416e:	6063      	str	r3, [r4, #4]
1a004170:	bf04      	itt	eq
1a004172:	1852      	addeq	r2, r2, r1
1a004174:	6022      	streq	r2, [r4, #0]
1a004176:	6004      	str	r4, [r0, #0]
1a004178:	e7ec      	b.n	1a004154 <_free_r+0x24>
1a00417a:	4613      	mov	r3, r2
1a00417c:	685a      	ldr	r2, [r3, #4]
1a00417e:	b10a      	cbz	r2, 1a004184 <_free_r+0x54>
1a004180:	42a2      	cmp	r2, r4
1a004182:	d9fa      	bls.n	1a00417a <_free_r+0x4a>
1a004184:	6819      	ldr	r1, [r3, #0]
1a004186:	1858      	adds	r0, r3, r1
1a004188:	42a0      	cmp	r0, r4
1a00418a:	d10b      	bne.n	1a0041a4 <_free_r+0x74>
1a00418c:	6820      	ldr	r0, [r4, #0]
1a00418e:	4401      	add	r1, r0
1a004190:	1858      	adds	r0, r3, r1
1a004192:	4282      	cmp	r2, r0
1a004194:	6019      	str	r1, [r3, #0]
1a004196:	d1dd      	bne.n	1a004154 <_free_r+0x24>
1a004198:	6810      	ldr	r0, [r2, #0]
1a00419a:	6852      	ldr	r2, [r2, #4]
1a00419c:	605a      	str	r2, [r3, #4]
1a00419e:	4401      	add	r1, r0
1a0041a0:	6019      	str	r1, [r3, #0]
1a0041a2:	e7d7      	b.n	1a004154 <_free_r+0x24>
1a0041a4:	d902      	bls.n	1a0041ac <_free_r+0x7c>
1a0041a6:	230c      	movs	r3, #12
1a0041a8:	602b      	str	r3, [r5, #0]
1a0041aa:	e7d3      	b.n	1a004154 <_free_r+0x24>
1a0041ac:	6820      	ldr	r0, [r4, #0]
1a0041ae:	1821      	adds	r1, r4, r0
1a0041b0:	428a      	cmp	r2, r1
1a0041b2:	bf04      	itt	eq
1a0041b4:	6811      	ldreq	r1, [r2, #0]
1a0041b6:	6852      	ldreq	r2, [r2, #4]
1a0041b8:	6062      	str	r2, [r4, #4]
1a0041ba:	bf04      	itt	eq
1a0041bc:	1809      	addeq	r1, r1, r0
1a0041be:	6021      	streq	r1, [r4, #0]
1a0041c0:	605c      	str	r4, [r3, #4]
1a0041c2:	e7c7      	b.n	1a004154 <_free_r+0x24>
1a0041c4:	bd38      	pop	{r3, r4, r5, pc}
1a0041c6:	bf00      	nop
1a0041c8:	10002c18 	.word	0x10002c18

1a0041cc <_malloc_r>:
1a0041cc:	b570      	push	{r4, r5, r6, lr}
1a0041ce:	1ccd      	adds	r5, r1, #3
1a0041d0:	f025 0503 	bic.w	r5, r5, #3
1a0041d4:	3508      	adds	r5, #8
1a0041d6:	2d0c      	cmp	r5, #12
1a0041d8:	bf38      	it	cc
1a0041da:	250c      	movcc	r5, #12
1a0041dc:	2d00      	cmp	r5, #0
1a0041de:	4606      	mov	r6, r0
1a0041e0:	db01      	blt.n	1a0041e6 <_malloc_r+0x1a>
1a0041e2:	42a9      	cmp	r1, r5
1a0041e4:	d903      	bls.n	1a0041ee <_malloc_r+0x22>
1a0041e6:	230c      	movs	r3, #12
1a0041e8:	6033      	str	r3, [r6, #0]
1a0041ea:	2000      	movs	r0, #0
1a0041ec:	bd70      	pop	{r4, r5, r6, pc}
1a0041ee:	f000 fa2b 	bl	1a004648 <__malloc_lock>
1a0041f2:	4a21      	ldr	r2, [pc, #132]	; (1a004278 <_malloc_r+0xac>)
1a0041f4:	6814      	ldr	r4, [r2, #0]
1a0041f6:	4621      	mov	r1, r4
1a0041f8:	b991      	cbnz	r1, 1a004220 <_malloc_r+0x54>
1a0041fa:	4c20      	ldr	r4, [pc, #128]	; (1a00427c <_malloc_r+0xb0>)
1a0041fc:	6823      	ldr	r3, [r4, #0]
1a0041fe:	b91b      	cbnz	r3, 1a004208 <_malloc_r+0x3c>
1a004200:	4630      	mov	r0, r6
1a004202:	f7fc fa77 	bl	1a0006f4 <_sbrk_r>
1a004206:	6020      	str	r0, [r4, #0]
1a004208:	4629      	mov	r1, r5
1a00420a:	4630      	mov	r0, r6
1a00420c:	f7fc fa72 	bl	1a0006f4 <_sbrk_r>
1a004210:	1c43      	adds	r3, r0, #1
1a004212:	d124      	bne.n	1a00425e <_malloc_r+0x92>
1a004214:	230c      	movs	r3, #12
1a004216:	6033      	str	r3, [r6, #0]
1a004218:	4630      	mov	r0, r6
1a00421a:	f000 fa16 	bl	1a00464a <__malloc_unlock>
1a00421e:	e7e4      	b.n	1a0041ea <_malloc_r+0x1e>
1a004220:	680b      	ldr	r3, [r1, #0]
1a004222:	1b5b      	subs	r3, r3, r5
1a004224:	d418      	bmi.n	1a004258 <_malloc_r+0x8c>
1a004226:	2b0b      	cmp	r3, #11
1a004228:	d90f      	bls.n	1a00424a <_malloc_r+0x7e>
1a00422a:	600b      	str	r3, [r1, #0]
1a00422c:	50cd      	str	r5, [r1, r3]
1a00422e:	18cc      	adds	r4, r1, r3
1a004230:	4630      	mov	r0, r6
1a004232:	f000 fa0a 	bl	1a00464a <__malloc_unlock>
1a004236:	f104 000b 	add.w	r0, r4, #11
1a00423a:	1d23      	adds	r3, r4, #4
1a00423c:	f020 0007 	bic.w	r0, r0, #7
1a004240:	1ac3      	subs	r3, r0, r3
1a004242:	d0d3      	beq.n	1a0041ec <_malloc_r+0x20>
1a004244:	425a      	negs	r2, r3
1a004246:	50e2      	str	r2, [r4, r3]
1a004248:	e7d0      	b.n	1a0041ec <_malloc_r+0x20>
1a00424a:	428c      	cmp	r4, r1
1a00424c:	684b      	ldr	r3, [r1, #4]
1a00424e:	bf16      	itet	ne
1a004250:	6063      	strne	r3, [r4, #4]
1a004252:	6013      	streq	r3, [r2, #0]
1a004254:	460c      	movne	r4, r1
1a004256:	e7eb      	b.n	1a004230 <_malloc_r+0x64>
1a004258:	460c      	mov	r4, r1
1a00425a:	6849      	ldr	r1, [r1, #4]
1a00425c:	e7cc      	b.n	1a0041f8 <_malloc_r+0x2c>
1a00425e:	1cc4      	adds	r4, r0, #3
1a004260:	f024 0403 	bic.w	r4, r4, #3
1a004264:	42a0      	cmp	r0, r4
1a004266:	d005      	beq.n	1a004274 <_malloc_r+0xa8>
1a004268:	1a21      	subs	r1, r4, r0
1a00426a:	4630      	mov	r0, r6
1a00426c:	f7fc fa42 	bl	1a0006f4 <_sbrk_r>
1a004270:	3001      	adds	r0, #1
1a004272:	d0cf      	beq.n	1a004214 <_malloc_r+0x48>
1a004274:	6025      	str	r5, [r4, #0]
1a004276:	e7db      	b.n	1a004230 <_malloc_r+0x64>
1a004278:	10002c18 	.word	0x10002c18
1a00427c:	10002c1c 	.word	0x10002c1c

1a004280 <iprintf>:
1a004280:	b40f      	push	{r0, r1, r2, r3}
1a004282:	4b0a      	ldr	r3, [pc, #40]	; (1a0042ac <iprintf+0x2c>)
1a004284:	b513      	push	{r0, r1, r4, lr}
1a004286:	681c      	ldr	r4, [r3, #0]
1a004288:	b124      	cbz	r4, 1a004294 <iprintf+0x14>
1a00428a:	69a3      	ldr	r3, [r4, #24]
1a00428c:	b913      	cbnz	r3, 1a004294 <iprintf+0x14>
1a00428e:	4620      	mov	r0, r4
1a004290:	f7ff fe8c 	bl	1a003fac <__sinit>
1a004294:	ab05      	add	r3, sp, #20
1a004296:	9a04      	ldr	r2, [sp, #16]
1a004298:	68a1      	ldr	r1, [r4, #8]
1a00429a:	9301      	str	r3, [sp, #4]
1a00429c:	4620      	mov	r0, r4
1a00429e:	f000 f9ff 	bl	1a0046a0 <_vfiprintf_r>
1a0042a2:	b002      	add	sp, #8
1a0042a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0042a8:	b004      	add	sp, #16
1a0042aa:	4770      	bx	lr
1a0042ac:	100000c8 	.word	0x100000c8

1a0042b0 <_puts_r>:
1a0042b0:	b570      	push	{r4, r5, r6, lr}
1a0042b2:	460e      	mov	r6, r1
1a0042b4:	4605      	mov	r5, r0
1a0042b6:	b118      	cbz	r0, 1a0042c0 <_puts_r+0x10>
1a0042b8:	6983      	ldr	r3, [r0, #24]
1a0042ba:	b90b      	cbnz	r3, 1a0042c0 <_puts_r+0x10>
1a0042bc:	f7ff fe76 	bl	1a003fac <__sinit>
1a0042c0:	69ab      	ldr	r3, [r5, #24]
1a0042c2:	68ac      	ldr	r4, [r5, #8]
1a0042c4:	b913      	cbnz	r3, 1a0042cc <_puts_r+0x1c>
1a0042c6:	4628      	mov	r0, r5
1a0042c8:	f7ff fe70 	bl	1a003fac <__sinit>
1a0042cc:	4b23      	ldr	r3, [pc, #140]	; (1a00435c <_puts_r+0xac>)
1a0042ce:	429c      	cmp	r4, r3
1a0042d0:	d117      	bne.n	1a004302 <_puts_r+0x52>
1a0042d2:	686c      	ldr	r4, [r5, #4]
1a0042d4:	89a3      	ldrh	r3, [r4, #12]
1a0042d6:	071b      	lsls	r3, r3, #28
1a0042d8:	d51d      	bpl.n	1a004316 <_puts_r+0x66>
1a0042da:	6923      	ldr	r3, [r4, #16]
1a0042dc:	b1db      	cbz	r3, 1a004316 <_puts_r+0x66>
1a0042de:	3e01      	subs	r6, #1
1a0042e0:	68a3      	ldr	r3, [r4, #8]
1a0042e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0042e6:	3b01      	subs	r3, #1
1a0042e8:	60a3      	str	r3, [r4, #8]
1a0042ea:	b9e9      	cbnz	r1, 1a004328 <_puts_r+0x78>
1a0042ec:	2b00      	cmp	r3, #0
1a0042ee:	da2e      	bge.n	1a00434e <_puts_r+0x9e>
1a0042f0:	4622      	mov	r2, r4
1a0042f2:	210a      	movs	r1, #10
1a0042f4:	4628      	mov	r0, r5
1a0042f6:	f000 f883 	bl	1a004400 <__swbuf_r>
1a0042fa:	3001      	adds	r0, #1
1a0042fc:	d011      	beq.n	1a004322 <_puts_r+0x72>
1a0042fe:	200a      	movs	r0, #10
1a004300:	e011      	b.n	1a004326 <_puts_r+0x76>
1a004302:	4b17      	ldr	r3, [pc, #92]	; (1a004360 <_puts_r+0xb0>)
1a004304:	429c      	cmp	r4, r3
1a004306:	d101      	bne.n	1a00430c <_puts_r+0x5c>
1a004308:	68ac      	ldr	r4, [r5, #8]
1a00430a:	e7e3      	b.n	1a0042d4 <_puts_r+0x24>
1a00430c:	4b15      	ldr	r3, [pc, #84]	; (1a004364 <_puts_r+0xb4>)
1a00430e:	429c      	cmp	r4, r3
1a004310:	bf08      	it	eq
1a004312:	68ec      	ldreq	r4, [r5, #12]
1a004314:	e7de      	b.n	1a0042d4 <_puts_r+0x24>
1a004316:	4621      	mov	r1, r4
1a004318:	4628      	mov	r0, r5
1a00431a:	f000 f8c3 	bl	1a0044a4 <__swsetup_r>
1a00431e:	2800      	cmp	r0, #0
1a004320:	d0dd      	beq.n	1a0042de <_puts_r+0x2e>
1a004322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004326:	bd70      	pop	{r4, r5, r6, pc}
1a004328:	2b00      	cmp	r3, #0
1a00432a:	da04      	bge.n	1a004336 <_puts_r+0x86>
1a00432c:	69a2      	ldr	r2, [r4, #24]
1a00432e:	429a      	cmp	r2, r3
1a004330:	dc06      	bgt.n	1a004340 <_puts_r+0x90>
1a004332:	290a      	cmp	r1, #10
1a004334:	d004      	beq.n	1a004340 <_puts_r+0x90>
1a004336:	6823      	ldr	r3, [r4, #0]
1a004338:	1c5a      	adds	r2, r3, #1
1a00433a:	6022      	str	r2, [r4, #0]
1a00433c:	7019      	strb	r1, [r3, #0]
1a00433e:	e7cf      	b.n	1a0042e0 <_puts_r+0x30>
1a004340:	4622      	mov	r2, r4
1a004342:	4628      	mov	r0, r5
1a004344:	f000 f85c 	bl	1a004400 <__swbuf_r>
1a004348:	3001      	adds	r0, #1
1a00434a:	d1c9      	bne.n	1a0042e0 <_puts_r+0x30>
1a00434c:	e7e9      	b.n	1a004322 <_puts_r+0x72>
1a00434e:	6823      	ldr	r3, [r4, #0]
1a004350:	200a      	movs	r0, #10
1a004352:	1c5a      	adds	r2, r3, #1
1a004354:	6022      	str	r2, [r4, #0]
1a004356:	7018      	strb	r0, [r3, #0]
1a004358:	e7e5      	b.n	1a004326 <_puts_r+0x76>
1a00435a:	bf00      	nop
1a00435c:	1a005054 	.word	0x1a005054
1a004360:	1a005074 	.word	0x1a005074
1a004364:	1a005034 	.word	0x1a005034

1a004368 <puts>:
1a004368:	4b02      	ldr	r3, [pc, #8]	; (1a004374 <puts+0xc>)
1a00436a:	4601      	mov	r1, r0
1a00436c:	6818      	ldr	r0, [r3, #0]
1a00436e:	f7ff bf9f 	b.w	1a0042b0 <_puts_r>
1a004372:	bf00      	nop
1a004374:	100000c8 	.word	0x100000c8

1a004378 <__sread>:
1a004378:	b510      	push	{r4, lr}
1a00437a:	460c      	mov	r4, r1
1a00437c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004380:	f7fc f97c 	bl	1a00067c <_read_r>
1a004384:	2800      	cmp	r0, #0
1a004386:	bfab      	itete	ge
1a004388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00438a:	89a3      	ldrhlt	r3, [r4, #12]
1a00438c:	181b      	addge	r3, r3, r0
1a00438e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004392:	bfac      	ite	ge
1a004394:	6563      	strge	r3, [r4, #84]	; 0x54
1a004396:	81a3      	strhlt	r3, [r4, #12]
1a004398:	bd10      	pop	{r4, pc}

1a00439a <__swrite>:
1a00439a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00439e:	461f      	mov	r7, r3
1a0043a0:	898b      	ldrh	r3, [r1, #12]
1a0043a2:	05db      	lsls	r3, r3, #23
1a0043a4:	4605      	mov	r5, r0
1a0043a6:	460c      	mov	r4, r1
1a0043a8:	4616      	mov	r6, r2
1a0043aa:	d505      	bpl.n	1a0043b8 <__swrite+0x1e>
1a0043ac:	2302      	movs	r3, #2
1a0043ae:	2200      	movs	r2, #0
1a0043b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043b4:	f7fc f95d 	bl	1a000672 <_lseek_r>
1a0043b8:	89a3      	ldrh	r3, [r4, #12]
1a0043ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0043be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0043c2:	81a3      	strh	r3, [r4, #12]
1a0043c4:	4632      	mov	r2, r6
1a0043c6:	463b      	mov	r3, r7
1a0043c8:	4628      	mov	r0, r5
1a0043ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0043ce:	f7fc b97c 	b.w	1a0006ca <_write_r>

1a0043d2 <__sseek>:
1a0043d2:	b510      	push	{r4, lr}
1a0043d4:	460c      	mov	r4, r1
1a0043d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043da:	f7fc f94a 	bl	1a000672 <_lseek_r>
1a0043de:	1c43      	adds	r3, r0, #1
1a0043e0:	89a3      	ldrh	r3, [r4, #12]
1a0043e2:	bf15      	itete	ne
1a0043e4:	6560      	strne	r0, [r4, #84]	; 0x54
1a0043e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0043ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0043ee:	81a3      	strheq	r3, [r4, #12]
1a0043f0:	bf18      	it	ne
1a0043f2:	81a3      	strhne	r3, [r4, #12]
1a0043f4:	bd10      	pop	{r4, pc}

1a0043f6 <__sclose>:
1a0043f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0043fa:	f7fc b927 	b.w	1a00064c <_close_r>
1a0043fe:	Address 0x000000001a0043fe is out of bounds.


1a004400 <__swbuf_r>:
1a004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004402:	460e      	mov	r6, r1
1a004404:	4614      	mov	r4, r2
1a004406:	4605      	mov	r5, r0
1a004408:	b118      	cbz	r0, 1a004412 <__swbuf_r+0x12>
1a00440a:	6983      	ldr	r3, [r0, #24]
1a00440c:	b90b      	cbnz	r3, 1a004412 <__swbuf_r+0x12>
1a00440e:	f7ff fdcd 	bl	1a003fac <__sinit>
1a004412:	4b21      	ldr	r3, [pc, #132]	; (1a004498 <__swbuf_r+0x98>)
1a004414:	429c      	cmp	r4, r3
1a004416:	d12a      	bne.n	1a00446e <__swbuf_r+0x6e>
1a004418:	686c      	ldr	r4, [r5, #4]
1a00441a:	69a3      	ldr	r3, [r4, #24]
1a00441c:	60a3      	str	r3, [r4, #8]
1a00441e:	89a3      	ldrh	r3, [r4, #12]
1a004420:	071a      	lsls	r2, r3, #28
1a004422:	d52e      	bpl.n	1a004482 <__swbuf_r+0x82>
1a004424:	6923      	ldr	r3, [r4, #16]
1a004426:	b363      	cbz	r3, 1a004482 <__swbuf_r+0x82>
1a004428:	6923      	ldr	r3, [r4, #16]
1a00442a:	6820      	ldr	r0, [r4, #0]
1a00442c:	1ac0      	subs	r0, r0, r3
1a00442e:	6963      	ldr	r3, [r4, #20]
1a004430:	b2f6      	uxtb	r6, r6
1a004432:	4283      	cmp	r3, r0
1a004434:	4637      	mov	r7, r6
1a004436:	dc04      	bgt.n	1a004442 <__swbuf_r+0x42>
1a004438:	4621      	mov	r1, r4
1a00443a:	4628      	mov	r0, r5
1a00443c:	f7ff fd4c 	bl	1a003ed8 <_fflush_r>
1a004440:	bb28      	cbnz	r0, 1a00448e <__swbuf_r+0x8e>
1a004442:	68a3      	ldr	r3, [r4, #8]
1a004444:	3b01      	subs	r3, #1
1a004446:	60a3      	str	r3, [r4, #8]
1a004448:	6823      	ldr	r3, [r4, #0]
1a00444a:	1c5a      	adds	r2, r3, #1
1a00444c:	6022      	str	r2, [r4, #0]
1a00444e:	701e      	strb	r6, [r3, #0]
1a004450:	6963      	ldr	r3, [r4, #20]
1a004452:	3001      	adds	r0, #1
1a004454:	4283      	cmp	r3, r0
1a004456:	d004      	beq.n	1a004462 <__swbuf_r+0x62>
1a004458:	89a3      	ldrh	r3, [r4, #12]
1a00445a:	07db      	lsls	r3, r3, #31
1a00445c:	d519      	bpl.n	1a004492 <__swbuf_r+0x92>
1a00445e:	2e0a      	cmp	r6, #10
1a004460:	d117      	bne.n	1a004492 <__swbuf_r+0x92>
1a004462:	4621      	mov	r1, r4
1a004464:	4628      	mov	r0, r5
1a004466:	f7ff fd37 	bl	1a003ed8 <_fflush_r>
1a00446a:	b190      	cbz	r0, 1a004492 <__swbuf_r+0x92>
1a00446c:	e00f      	b.n	1a00448e <__swbuf_r+0x8e>
1a00446e:	4b0b      	ldr	r3, [pc, #44]	; (1a00449c <__swbuf_r+0x9c>)
1a004470:	429c      	cmp	r4, r3
1a004472:	d101      	bne.n	1a004478 <__swbuf_r+0x78>
1a004474:	68ac      	ldr	r4, [r5, #8]
1a004476:	e7d0      	b.n	1a00441a <__swbuf_r+0x1a>
1a004478:	4b09      	ldr	r3, [pc, #36]	; (1a0044a0 <__swbuf_r+0xa0>)
1a00447a:	429c      	cmp	r4, r3
1a00447c:	bf08      	it	eq
1a00447e:	68ec      	ldreq	r4, [r5, #12]
1a004480:	e7cb      	b.n	1a00441a <__swbuf_r+0x1a>
1a004482:	4621      	mov	r1, r4
1a004484:	4628      	mov	r0, r5
1a004486:	f000 f80d 	bl	1a0044a4 <__swsetup_r>
1a00448a:	2800      	cmp	r0, #0
1a00448c:	d0cc      	beq.n	1a004428 <__swbuf_r+0x28>
1a00448e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004492:	4638      	mov	r0, r7
1a004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004496:	bf00      	nop
1a004498:	1a005054 	.word	0x1a005054
1a00449c:	1a005074 	.word	0x1a005074
1a0044a0:	1a005034 	.word	0x1a005034

1a0044a4 <__swsetup_r>:
1a0044a4:	4b32      	ldr	r3, [pc, #200]	; (1a004570 <__swsetup_r+0xcc>)
1a0044a6:	b570      	push	{r4, r5, r6, lr}
1a0044a8:	681d      	ldr	r5, [r3, #0]
1a0044aa:	4606      	mov	r6, r0
1a0044ac:	460c      	mov	r4, r1
1a0044ae:	b125      	cbz	r5, 1a0044ba <__swsetup_r+0x16>
1a0044b0:	69ab      	ldr	r3, [r5, #24]
1a0044b2:	b913      	cbnz	r3, 1a0044ba <__swsetup_r+0x16>
1a0044b4:	4628      	mov	r0, r5
1a0044b6:	f7ff fd79 	bl	1a003fac <__sinit>
1a0044ba:	4b2e      	ldr	r3, [pc, #184]	; (1a004574 <__swsetup_r+0xd0>)
1a0044bc:	429c      	cmp	r4, r3
1a0044be:	d10f      	bne.n	1a0044e0 <__swsetup_r+0x3c>
1a0044c0:	686c      	ldr	r4, [r5, #4]
1a0044c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0044c6:	b29a      	uxth	r2, r3
1a0044c8:	0715      	lsls	r5, r2, #28
1a0044ca:	d42c      	bmi.n	1a004526 <__swsetup_r+0x82>
1a0044cc:	06d0      	lsls	r0, r2, #27
1a0044ce:	d411      	bmi.n	1a0044f4 <__swsetup_r+0x50>
1a0044d0:	2209      	movs	r2, #9
1a0044d2:	6032      	str	r2, [r6, #0]
1a0044d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0044d8:	81a3      	strh	r3, [r4, #12]
1a0044da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0044de:	e03e      	b.n	1a00455e <__swsetup_r+0xba>
1a0044e0:	4b25      	ldr	r3, [pc, #148]	; (1a004578 <__swsetup_r+0xd4>)
1a0044e2:	429c      	cmp	r4, r3
1a0044e4:	d101      	bne.n	1a0044ea <__swsetup_r+0x46>
1a0044e6:	68ac      	ldr	r4, [r5, #8]
1a0044e8:	e7eb      	b.n	1a0044c2 <__swsetup_r+0x1e>
1a0044ea:	4b24      	ldr	r3, [pc, #144]	; (1a00457c <__swsetup_r+0xd8>)
1a0044ec:	429c      	cmp	r4, r3
1a0044ee:	bf08      	it	eq
1a0044f0:	68ec      	ldreq	r4, [r5, #12]
1a0044f2:	e7e6      	b.n	1a0044c2 <__swsetup_r+0x1e>
1a0044f4:	0751      	lsls	r1, r2, #29
1a0044f6:	d512      	bpl.n	1a00451e <__swsetup_r+0x7a>
1a0044f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0044fa:	b141      	cbz	r1, 1a00450e <__swsetup_r+0x6a>
1a0044fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004500:	4299      	cmp	r1, r3
1a004502:	d002      	beq.n	1a00450a <__swsetup_r+0x66>
1a004504:	4630      	mov	r0, r6
1a004506:	f7ff fe13 	bl	1a004130 <_free_r>
1a00450a:	2300      	movs	r3, #0
1a00450c:	6363      	str	r3, [r4, #52]	; 0x34
1a00450e:	89a3      	ldrh	r3, [r4, #12]
1a004510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004514:	81a3      	strh	r3, [r4, #12]
1a004516:	2300      	movs	r3, #0
1a004518:	6063      	str	r3, [r4, #4]
1a00451a:	6923      	ldr	r3, [r4, #16]
1a00451c:	6023      	str	r3, [r4, #0]
1a00451e:	89a3      	ldrh	r3, [r4, #12]
1a004520:	f043 0308 	orr.w	r3, r3, #8
1a004524:	81a3      	strh	r3, [r4, #12]
1a004526:	6923      	ldr	r3, [r4, #16]
1a004528:	b94b      	cbnz	r3, 1a00453e <__swsetup_r+0x9a>
1a00452a:	89a3      	ldrh	r3, [r4, #12]
1a00452c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004534:	d003      	beq.n	1a00453e <__swsetup_r+0x9a>
1a004536:	4621      	mov	r1, r4
1a004538:	4630      	mov	r0, r6
1a00453a:	f000 f845 	bl	1a0045c8 <__smakebuf_r>
1a00453e:	89a2      	ldrh	r2, [r4, #12]
1a004540:	f012 0301 	ands.w	r3, r2, #1
1a004544:	d00c      	beq.n	1a004560 <__swsetup_r+0xbc>
1a004546:	2300      	movs	r3, #0
1a004548:	60a3      	str	r3, [r4, #8]
1a00454a:	6963      	ldr	r3, [r4, #20]
1a00454c:	425b      	negs	r3, r3
1a00454e:	61a3      	str	r3, [r4, #24]
1a004550:	6923      	ldr	r3, [r4, #16]
1a004552:	b953      	cbnz	r3, 1a00456a <__swsetup_r+0xc6>
1a004554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004558:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a00455c:	d1ba      	bne.n	1a0044d4 <__swsetup_r+0x30>
1a00455e:	bd70      	pop	{r4, r5, r6, pc}
1a004560:	0792      	lsls	r2, r2, #30
1a004562:	bf58      	it	pl
1a004564:	6963      	ldrpl	r3, [r4, #20]
1a004566:	60a3      	str	r3, [r4, #8]
1a004568:	e7f2      	b.n	1a004550 <__swsetup_r+0xac>
1a00456a:	2000      	movs	r0, #0
1a00456c:	e7f7      	b.n	1a00455e <__swsetup_r+0xba>
1a00456e:	bf00      	nop
1a004570:	100000c8 	.word	0x100000c8
1a004574:	1a005054 	.word	0x1a005054
1a004578:	1a005074 	.word	0x1a005074
1a00457c:	1a005034 	.word	0x1a005034

1a004580 <__swhatbuf_r>:
1a004580:	b570      	push	{r4, r5, r6, lr}
1a004582:	460e      	mov	r6, r1
1a004584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004588:	2900      	cmp	r1, #0
1a00458a:	b096      	sub	sp, #88	; 0x58
1a00458c:	4614      	mov	r4, r2
1a00458e:	461d      	mov	r5, r3
1a004590:	da07      	bge.n	1a0045a2 <__swhatbuf_r+0x22>
1a004592:	2300      	movs	r3, #0
1a004594:	602b      	str	r3, [r5, #0]
1a004596:	89b3      	ldrh	r3, [r6, #12]
1a004598:	061a      	lsls	r2, r3, #24
1a00459a:	d410      	bmi.n	1a0045be <__swhatbuf_r+0x3e>
1a00459c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0045a0:	e00e      	b.n	1a0045c0 <__swhatbuf_r+0x40>
1a0045a2:	466a      	mov	r2, sp
1a0045a4:	f7fc f857 	bl	1a000656 <_fstat_r>
1a0045a8:	2800      	cmp	r0, #0
1a0045aa:	dbf2      	blt.n	1a004592 <__swhatbuf_r+0x12>
1a0045ac:	9a01      	ldr	r2, [sp, #4]
1a0045ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0045b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0045b6:	425a      	negs	r2, r3
1a0045b8:	415a      	adcs	r2, r3
1a0045ba:	602a      	str	r2, [r5, #0]
1a0045bc:	e7ee      	b.n	1a00459c <__swhatbuf_r+0x1c>
1a0045be:	2340      	movs	r3, #64	; 0x40
1a0045c0:	2000      	movs	r0, #0
1a0045c2:	6023      	str	r3, [r4, #0]
1a0045c4:	b016      	add	sp, #88	; 0x58
1a0045c6:	bd70      	pop	{r4, r5, r6, pc}

1a0045c8 <__smakebuf_r>:
1a0045c8:	898b      	ldrh	r3, [r1, #12]
1a0045ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0045cc:	079d      	lsls	r5, r3, #30
1a0045ce:	4606      	mov	r6, r0
1a0045d0:	460c      	mov	r4, r1
1a0045d2:	d507      	bpl.n	1a0045e4 <__smakebuf_r+0x1c>
1a0045d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a0045d8:	6023      	str	r3, [r4, #0]
1a0045da:	6123      	str	r3, [r4, #16]
1a0045dc:	2301      	movs	r3, #1
1a0045de:	6163      	str	r3, [r4, #20]
1a0045e0:	b002      	add	sp, #8
1a0045e2:	bd70      	pop	{r4, r5, r6, pc}
1a0045e4:	ab01      	add	r3, sp, #4
1a0045e6:	466a      	mov	r2, sp
1a0045e8:	f7ff ffca 	bl	1a004580 <__swhatbuf_r>
1a0045ec:	9900      	ldr	r1, [sp, #0]
1a0045ee:	4605      	mov	r5, r0
1a0045f0:	4630      	mov	r0, r6
1a0045f2:	f7ff fdeb 	bl	1a0041cc <_malloc_r>
1a0045f6:	b948      	cbnz	r0, 1a00460c <__smakebuf_r+0x44>
1a0045f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0045fc:	059a      	lsls	r2, r3, #22
1a0045fe:	d4ef      	bmi.n	1a0045e0 <__smakebuf_r+0x18>
1a004600:	f023 0303 	bic.w	r3, r3, #3
1a004604:	f043 0302 	orr.w	r3, r3, #2
1a004608:	81a3      	strh	r3, [r4, #12]
1a00460a:	e7e3      	b.n	1a0045d4 <__smakebuf_r+0xc>
1a00460c:	4b0d      	ldr	r3, [pc, #52]	; (1a004644 <__smakebuf_r+0x7c>)
1a00460e:	62b3      	str	r3, [r6, #40]	; 0x28
1a004610:	89a3      	ldrh	r3, [r4, #12]
1a004612:	6020      	str	r0, [r4, #0]
1a004614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004618:	81a3      	strh	r3, [r4, #12]
1a00461a:	9b00      	ldr	r3, [sp, #0]
1a00461c:	6163      	str	r3, [r4, #20]
1a00461e:	9b01      	ldr	r3, [sp, #4]
1a004620:	6120      	str	r0, [r4, #16]
1a004622:	b15b      	cbz	r3, 1a00463c <__smakebuf_r+0x74>
1a004624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004628:	4630      	mov	r0, r6
1a00462a:	f7fc f819 	bl	1a000660 <_isatty_r>
1a00462e:	b128      	cbz	r0, 1a00463c <__smakebuf_r+0x74>
1a004630:	89a3      	ldrh	r3, [r4, #12]
1a004632:	f023 0303 	bic.w	r3, r3, #3
1a004636:	f043 0301 	orr.w	r3, r3, #1
1a00463a:	81a3      	strh	r3, [r4, #12]
1a00463c:	89a3      	ldrh	r3, [r4, #12]
1a00463e:	431d      	orrs	r5, r3
1a004640:	81a5      	strh	r5, [r4, #12]
1a004642:	e7cd      	b.n	1a0045e0 <__smakebuf_r+0x18>
1a004644:	1a003f75 	.word	0x1a003f75

1a004648 <__malloc_lock>:
1a004648:	4770      	bx	lr

1a00464a <__malloc_unlock>:
1a00464a:	4770      	bx	lr

1a00464c <__sfputc_r>:
1a00464c:	6893      	ldr	r3, [r2, #8]
1a00464e:	3b01      	subs	r3, #1
1a004650:	2b00      	cmp	r3, #0
1a004652:	b410      	push	{r4}
1a004654:	6093      	str	r3, [r2, #8]
1a004656:	da08      	bge.n	1a00466a <__sfputc_r+0x1e>
1a004658:	6994      	ldr	r4, [r2, #24]
1a00465a:	42a3      	cmp	r3, r4
1a00465c:	db01      	blt.n	1a004662 <__sfputc_r+0x16>
1a00465e:	290a      	cmp	r1, #10
1a004660:	d103      	bne.n	1a00466a <__sfputc_r+0x1e>
1a004662:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004666:	f7ff becb 	b.w	1a004400 <__swbuf_r>
1a00466a:	6813      	ldr	r3, [r2, #0]
1a00466c:	1c58      	adds	r0, r3, #1
1a00466e:	6010      	str	r0, [r2, #0]
1a004670:	7019      	strb	r1, [r3, #0]
1a004672:	4608      	mov	r0, r1
1a004674:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004678:	4770      	bx	lr

1a00467a <__sfputs_r>:
1a00467a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00467c:	4606      	mov	r6, r0
1a00467e:	460f      	mov	r7, r1
1a004680:	4614      	mov	r4, r2
1a004682:	18d5      	adds	r5, r2, r3
1a004684:	42ac      	cmp	r4, r5
1a004686:	d101      	bne.n	1a00468c <__sfputs_r+0x12>
1a004688:	2000      	movs	r0, #0
1a00468a:	e007      	b.n	1a00469c <__sfputs_r+0x22>
1a00468c:	463a      	mov	r2, r7
1a00468e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a004692:	4630      	mov	r0, r6
1a004694:	f7ff ffda 	bl	1a00464c <__sfputc_r>
1a004698:	1c43      	adds	r3, r0, #1
1a00469a:	d1f3      	bne.n	1a004684 <__sfputs_r+0xa>
1a00469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00469e:	Address 0x000000001a00469e is out of bounds.


1a0046a0 <_vfiprintf_r>:
1a0046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0046a4:	460c      	mov	r4, r1
1a0046a6:	b09d      	sub	sp, #116	; 0x74
1a0046a8:	4617      	mov	r7, r2
1a0046aa:	461d      	mov	r5, r3
1a0046ac:	4606      	mov	r6, r0
1a0046ae:	b118      	cbz	r0, 1a0046b8 <_vfiprintf_r+0x18>
1a0046b0:	6983      	ldr	r3, [r0, #24]
1a0046b2:	b90b      	cbnz	r3, 1a0046b8 <_vfiprintf_r+0x18>
1a0046b4:	f7ff fc7a 	bl	1a003fac <__sinit>
1a0046b8:	4b7c      	ldr	r3, [pc, #496]	; (1a0048ac <_vfiprintf_r+0x20c>)
1a0046ba:	429c      	cmp	r4, r3
1a0046bc:	d158      	bne.n	1a004770 <_vfiprintf_r+0xd0>
1a0046be:	6874      	ldr	r4, [r6, #4]
1a0046c0:	89a3      	ldrh	r3, [r4, #12]
1a0046c2:	0718      	lsls	r0, r3, #28
1a0046c4:	d55e      	bpl.n	1a004784 <_vfiprintf_r+0xe4>
1a0046c6:	6923      	ldr	r3, [r4, #16]
1a0046c8:	2b00      	cmp	r3, #0
1a0046ca:	d05b      	beq.n	1a004784 <_vfiprintf_r+0xe4>
1a0046cc:	2300      	movs	r3, #0
1a0046ce:	9309      	str	r3, [sp, #36]	; 0x24
1a0046d0:	2320      	movs	r3, #32
1a0046d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a0046d6:	2330      	movs	r3, #48	; 0x30
1a0046d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0046dc:	9503      	str	r5, [sp, #12]
1a0046de:	f04f 0b01 	mov.w	fp, #1
1a0046e2:	46b8      	mov	r8, r7
1a0046e4:	4645      	mov	r5, r8
1a0046e6:	f815 3b01 	ldrb.w	r3, [r5], #1
1a0046ea:	b10b      	cbz	r3, 1a0046f0 <_vfiprintf_r+0x50>
1a0046ec:	2b25      	cmp	r3, #37	; 0x25
1a0046ee:	d154      	bne.n	1a00479a <_vfiprintf_r+0xfa>
1a0046f0:	ebb8 0a07 	subs.w	sl, r8, r7
1a0046f4:	d00b      	beq.n	1a00470e <_vfiprintf_r+0x6e>
1a0046f6:	4653      	mov	r3, sl
1a0046f8:	463a      	mov	r2, r7
1a0046fa:	4621      	mov	r1, r4
1a0046fc:	4630      	mov	r0, r6
1a0046fe:	f7ff ffbc 	bl	1a00467a <__sfputs_r>
1a004702:	3001      	adds	r0, #1
1a004704:	f000 80c2 	beq.w	1a00488c <_vfiprintf_r+0x1ec>
1a004708:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00470a:	4453      	add	r3, sl
1a00470c:	9309      	str	r3, [sp, #36]	; 0x24
1a00470e:	f898 3000 	ldrb.w	r3, [r8]
1a004712:	2b00      	cmp	r3, #0
1a004714:	f000 80ba 	beq.w	1a00488c <_vfiprintf_r+0x1ec>
1a004718:	2300      	movs	r3, #0
1a00471a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00471e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004722:	9304      	str	r3, [sp, #16]
1a004724:	9307      	str	r3, [sp, #28]
1a004726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00472a:	931a      	str	r3, [sp, #104]	; 0x68
1a00472c:	46a8      	mov	r8, r5
1a00472e:	2205      	movs	r2, #5
1a004730:	f818 1b01 	ldrb.w	r1, [r8], #1
1a004734:	485e      	ldr	r0, [pc, #376]	; (1a0048b0 <_vfiprintf_r+0x210>)
1a004736:	f000 fa53 	bl	1a004be0 <memchr>
1a00473a:	9b04      	ldr	r3, [sp, #16]
1a00473c:	bb78      	cbnz	r0, 1a00479e <_vfiprintf_r+0xfe>
1a00473e:	06d9      	lsls	r1, r3, #27
1a004740:	bf44      	itt	mi
1a004742:	2220      	movmi	r2, #32
1a004744:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004748:	071a      	lsls	r2, r3, #28
1a00474a:	bf44      	itt	mi
1a00474c:	222b      	movmi	r2, #43	; 0x2b
1a00474e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004752:	782a      	ldrb	r2, [r5, #0]
1a004754:	2a2a      	cmp	r2, #42	; 0x2a
1a004756:	d02a      	beq.n	1a0047ae <_vfiprintf_r+0x10e>
1a004758:	9a07      	ldr	r2, [sp, #28]
1a00475a:	46a8      	mov	r8, r5
1a00475c:	2000      	movs	r0, #0
1a00475e:	250a      	movs	r5, #10
1a004760:	4641      	mov	r1, r8
1a004762:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004766:	3b30      	subs	r3, #48	; 0x30
1a004768:	2b09      	cmp	r3, #9
1a00476a:	d969      	bls.n	1a004840 <_vfiprintf_r+0x1a0>
1a00476c:	b360      	cbz	r0, 1a0047c8 <_vfiprintf_r+0x128>
1a00476e:	e024      	b.n	1a0047ba <_vfiprintf_r+0x11a>
1a004770:	4b50      	ldr	r3, [pc, #320]	; (1a0048b4 <_vfiprintf_r+0x214>)
1a004772:	429c      	cmp	r4, r3
1a004774:	d101      	bne.n	1a00477a <_vfiprintf_r+0xda>
1a004776:	68b4      	ldr	r4, [r6, #8]
1a004778:	e7a2      	b.n	1a0046c0 <_vfiprintf_r+0x20>
1a00477a:	4b4f      	ldr	r3, [pc, #316]	; (1a0048b8 <_vfiprintf_r+0x218>)
1a00477c:	429c      	cmp	r4, r3
1a00477e:	bf08      	it	eq
1a004780:	68f4      	ldreq	r4, [r6, #12]
1a004782:	e79d      	b.n	1a0046c0 <_vfiprintf_r+0x20>
1a004784:	4621      	mov	r1, r4
1a004786:	4630      	mov	r0, r6
1a004788:	f7ff fe8c 	bl	1a0044a4 <__swsetup_r>
1a00478c:	2800      	cmp	r0, #0
1a00478e:	d09d      	beq.n	1a0046cc <_vfiprintf_r+0x2c>
1a004790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004794:	b01d      	add	sp, #116	; 0x74
1a004796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00479a:	46a8      	mov	r8, r5
1a00479c:	e7a2      	b.n	1a0046e4 <_vfiprintf_r+0x44>
1a00479e:	4a44      	ldr	r2, [pc, #272]	; (1a0048b0 <_vfiprintf_r+0x210>)
1a0047a0:	1a80      	subs	r0, r0, r2
1a0047a2:	fa0b f000 	lsl.w	r0, fp, r0
1a0047a6:	4318      	orrs	r0, r3
1a0047a8:	9004      	str	r0, [sp, #16]
1a0047aa:	4645      	mov	r5, r8
1a0047ac:	e7be      	b.n	1a00472c <_vfiprintf_r+0x8c>
1a0047ae:	9a03      	ldr	r2, [sp, #12]
1a0047b0:	1d11      	adds	r1, r2, #4
1a0047b2:	6812      	ldr	r2, [r2, #0]
1a0047b4:	9103      	str	r1, [sp, #12]
1a0047b6:	2a00      	cmp	r2, #0
1a0047b8:	db01      	blt.n	1a0047be <_vfiprintf_r+0x11e>
1a0047ba:	9207      	str	r2, [sp, #28]
1a0047bc:	e004      	b.n	1a0047c8 <_vfiprintf_r+0x128>
1a0047be:	4252      	negs	r2, r2
1a0047c0:	f043 0302 	orr.w	r3, r3, #2
1a0047c4:	9207      	str	r2, [sp, #28]
1a0047c6:	9304      	str	r3, [sp, #16]
1a0047c8:	f898 3000 	ldrb.w	r3, [r8]
1a0047cc:	2b2e      	cmp	r3, #46	; 0x2e
1a0047ce:	d10e      	bne.n	1a0047ee <_vfiprintf_r+0x14e>
1a0047d0:	f898 3001 	ldrb.w	r3, [r8, #1]
1a0047d4:	2b2a      	cmp	r3, #42	; 0x2a
1a0047d6:	d138      	bne.n	1a00484a <_vfiprintf_r+0x1aa>
1a0047d8:	9b03      	ldr	r3, [sp, #12]
1a0047da:	1d1a      	adds	r2, r3, #4
1a0047dc:	681b      	ldr	r3, [r3, #0]
1a0047de:	9203      	str	r2, [sp, #12]
1a0047e0:	2b00      	cmp	r3, #0
1a0047e2:	bfb8      	it	lt
1a0047e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0047e8:	f108 0802 	add.w	r8, r8, #2
1a0047ec:	9305      	str	r3, [sp, #20]
1a0047ee:	4d33      	ldr	r5, [pc, #204]	; (1a0048bc <_vfiprintf_r+0x21c>)
1a0047f0:	f898 1000 	ldrb.w	r1, [r8]
1a0047f4:	2203      	movs	r2, #3
1a0047f6:	4628      	mov	r0, r5
1a0047f8:	f000 f9f2 	bl	1a004be0 <memchr>
1a0047fc:	b140      	cbz	r0, 1a004810 <_vfiprintf_r+0x170>
1a0047fe:	2340      	movs	r3, #64	; 0x40
1a004800:	1b40      	subs	r0, r0, r5
1a004802:	fa03 f000 	lsl.w	r0, r3, r0
1a004806:	9b04      	ldr	r3, [sp, #16]
1a004808:	4303      	orrs	r3, r0
1a00480a:	f108 0801 	add.w	r8, r8, #1
1a00480e:	9304      	str	r3, [sp, #16]
1a004810:	f898 1000 	ldrb.w	r1, [r8]
1a004814:	482a      	ldr	r0, [pc, #168]	; (1a0048c0 <_vfiprintf_r+0x220>)
1a004816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00481a:	2206      	movs	r2, #6
1a00481c:	f108 0701 	add.w	r7, r8, #1
1a004820:	f000 f9de 	bl	1a004be0 <memchr>
1a004824:	2800      	cmp	r0, #0
1a004826:	d037      	beq.n	1a004898 <_vfiprintf_r+0x1f8>
1a004828:	4b26      	ldr	r3, [pc, #152]	; (1a0048c4 <_vfiprintf_r+0x224>)
1a00482a:	bb1b      	cbnz	r3, 1a004874 <_vfiprintf_r+0x1d4>
1a00482c:	9b03      	ldr	r3, [sp, #12]
1a00482e:	3307      	adds	r3, #7
1a004830:	f023 0307 	bic.w	r3, r3, #7
1a004834:	3308      	adds	r3, #8
1a004836:	9303      	str	r3, [sp, #12]
1a004838:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00483a:	444b      	add	r3, r9
1a00483c:	9309      	str	r3, [sp, #36]	; 0x24
1a00483e:	e750      	b.n	1a0046e2 <_vfiprintf_r+0x42>
1a004840:	fb05 3202 	mla	r2, r5, r2, r3
1a004844:	2001      	movs	r0, #1
1a004846:	4688      	mov	r8, r1
1a004848:	e78a      	b.n	1a004760 <_vfiprintf_r+0xc0>
1a00484a:	2300      	movs	r3, #0
1a00484c:	f108 0801 	add.w	r8, r8, #1
1a004850:	9305      	str	r3, [sp, #20]
1a004852:	4619      	mov	r1, r3
1a004854:	250a      	movs	r5, #10
1a004856:	4640      	mov	r0, r8
1a004858:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00485c:	3a30      	subs	r2, #48	; 0x30
1a00485e:	2a09      	cmp	r2, #9
1a004860:	d903      	bls.n	1a00486a <_vfiprintf_r+0x1ca>
1a004862:	2b00      	cmp	r3, #0
1a004864:	d0c3      	beq.n	1a0047ee <_vfiprintf_r+0x14e>
1a004866:	9105      	str	r1, [sp, #20]
1a004868:	e7c1      	b.n	1a0047ee <_vfiprintf_r+0x14e>
1a00486a:	fb05 2101 	mla	r1, r5, r1, r2
1a00486e:	2301      	movs	r3, #1
1a004870:	4680      	mov	r8, r0
1a004872:	e7f0      	b.n	1a004856 <_vfiprintf_r+0x1b6>
1a004874:	ab03      	add	r3, sp, #12
1a004876:	9300      	str	r3, [sp, #0]
1a004878:	4622      	mov	r2, r4
1a00487a:	4b13      	ldr	r3, [pc, #76]	; (1a0048c8 <_vfiprintf_r+0x228>)
1a00487c:	a904      	add	r1, sp, #16
1a00487e:	4630      	mov	r0, r6
1a004880:	f3af 8000 	nop.w
1a004884:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004888:	4681      	mov	r9, r0
1a00488a:	d1d5      	bne.n	1a004838 <_vfiprintf_r+0x198>
1a00488c:	89a3      	ldrh	r3, [r4, #12]
1a00488e:	065b      	lsls	r3, r3, #25
1a004890:	f53f af7e 	bmi.w	1a004790 <_vfiprintf_r+0xf0>
1a004894:	9809      	ldr	r0, [sp, #36]	; 0x24
1a004896:	e77d      	b.n	1a004794 <_vfiprintf_r+0xf4>
1a004898:	ab03      	add	r3, sp, #12
1a00489a:	9300      	str	r3, [sp, #0]
1a00489c:	4622      	mov	r2, r4
1a00489e:	4b0a      	ldr	r3, [pc, #40]	; (1a0048c8 <_vfiprintf_r+0x228>)
1a0048a0:	a904      	add	r1, sp, #16
1a0048a2:	4630      	mov	r0, r6
1a0048a4:	f000 f888 	bl	1a0049b8 <_printf_i>
1a0048a8:	e7ec      	b.n	1a004884 <_vfiprintf_r+0x1e4>
1a0048aa:	bf00      	nop
1a0048ac:	1a005054 	.word	0x1a005054
1a0048b0:	1a005098 	.word	0x1a005098
1a0048b4:	1a005074 	.word	0x1a005074
1a0048b8:	1a005034 	.word	0x1a005034
1a0048bc:	1a00509e 	.word	0x1a00509e
1a0048c0:	1a0050a2 	.word	0x1a0050a2
1a0048c4:	00000000 	.word	0x00000000
1a0048c8:	1a00467b 	.word	0x1a00467b

1a0048cc <_printf_common>:
1a0048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0048d0:	4691      	mov	r9, r2
1a0048d2:	461f      	mov	r7, r3
1a0048d4:	688a      	ldr	r2, [r1, #8]
1a0048d6:	690b      	ldr	r3, [r1, #16]
1a0048d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0048dc:	4293      	cmp	r3, r2
1a0048de:	bfb8      	it	lt
1a0048e0:	4613      	movlt	r3, r2
1a0048e2:	f8c9 3000 	str.w	r3, [r9]
1a0048e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0048ea:	4606      	mov	r6, r0
1a0048ec:	460c      	mov	r4, r1
1a0048ee:	b112      	cbz	r2, 1a0048f6 <_printf_common+0x2a>
1a0048f0:	3301      	adds	r3, #1
1a0048f2:	f8c9 3000 	str.w	r3, [r9]
1a0048f6:	6823      	ldr	r3, [r4, #0]
1a0048f8:	0699      	lsls	r1, r3, #26
1a0048fa:	bf42      	ittt	mi
1a0048fc:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004900:	3302      	addmi	r3, #2
1a004902:	f8c9 3000 	strmi.w	r3, [r9]
1a004906:	6825      	ldr	r5, [r4, #0]
1a004908:	f015 0506 	ands.w	r5, r5, #6
1a00490c:	d107      	bne.n	1a00491e <_printf_common+0x52>
1a00490e:	f104 0a19 	add.w	sl, r4, #25
1a004912:	68e3      	ldr	r3, [r4, #12]
1a004914:	f8d9 2000 	ldr.w	r2, [r9]
1a004918:	1a9b      	subs	r3, r3, r2
1a00491a:	42ab      	cmp	r3, r5
1a00491c:	dc28      	bgt.n	1a004970 <_printf_common+0xa4>
1a00491e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004922:	6822      	ldr	r2, [r4, #0]
1a004924:	3300      	adds	r3, #0
1a004926:	bf18      	it	ne
1a004928:	2301      	movne	r3, #1
1a00492a:	0692      	lsls	r2, r2, #26
1a00492c:	d42d      	bmi.n	1a00498a <_printf_common+0xbe>
1a00492e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004932:	4639      	mov	r1, r7
1a004934:	4630      	mov	r0, r6
1a004936:	47c0      	blx	r8
1a004938:	3001      	adds	r0, #1
1a00493a:	d020      	beq.n	1a00497e <_printf_common+0xb2>
1a00493c:	6823      	ldr	r3, [r4, #0]
1a00493e:	68e5      	ldr	r5, [r4, #12]
1a004940:	f8d9 2000 	ldr.w	r2, [r9]
1a004944:	f003 0306 	and.w	r3, r3, #6
1a004948:	2b04      	cmp	r3, #4
1a00494a:	bf08      	it	eq
1a00494c:	1aad      	subeq	r5, r5, r2
1a00494e:	68a3      	ldr	r3, [r4, #8]
1a004950:	6922      	ldr	r2, [r4, #16]
1a004952:	bf0c      	ite	eq
1a004954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004958:	2500      	movne	r5, #0
1a00495a:	4293      	cmp	r3, r2
1a00495c:	bfc4      	itt	gt
1a00495e:	1a9b      	subgt	r3, r3, r2
1a004960:	18ed      	addgt	r5, r5, r3
1a004962:	f04f 0900 	mov.w	r9, #0
1a004966:	341a      	adds	r4, #26
1a004968:	454d      	cmp	r5, r9
1a00496a:	d11a      	bne.n	1a0049a2 <_printf_common+0xd6>
1a00496c:	2000      	movs	r0, #0
1a00496e:	e008      	b.n	1a004982 <_printf_common+0xb6>
1a004970:	2301      	movs	r3, #1
1a004972:	4652      	mov	r2, sl
1a004974:	4639      	mov	r1, r7
1a004976:	4630      	mov	r0, r6
1a004978:	47c0      	blx	r8
1a00497a:	3001      	adds	r0, #1
1a00497c:	d103      	bne.n	1a004986 <_printf_common+0xba>
1a00497e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004986:	3501      	adds	r5, #1
1a004988:	e7c3      	b.n	1a004912 <_printf_common+0x46>
1a00498a:	18e1      	adds	r1, r4, r3
1a00498c:	1c5a      	adds	r2, r3, #1
1a00498e:	2030      	movs	r0, #48	; 0x30
1a004990:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004994:	4422      	add	r2, r4
1a004996:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00499a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00499e:	3302      	adds	r3, #2
1a0049a0:	e7c5      	b.n	1a00492e <_printf_common+0x62>
1a0049a2:	2301      	movs	r3, #1
1a0049a4:	4622      	mov	r2, r4
1a0049a6:	4639      	mov	r1, r7
1a0049a8:	4630      	mov	r0, r6
1a0049aa:	47c0      	blx	r8
1a0049ac:	3001      	adds	r0, #1
1a0049ae:	d0e6      	beq.n	1a00497e <_printf_common+0xb2>
1a0049b0:	f109 0901 	add.w	r9, r9, #1
1a0049b4:	e7d8      	b.n	1a004968 <_printf_common+0x9c>
1a0049b6:	Address 0x000000001a0049b6 is out of bounds.


1a0049b8 <_printf_i>:
1a0049b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0049bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a0049c0:	460c      	mov	r4, r1
1a0049c2:	7e09      	ldrb	r1, [r1, #24]
1a0049c4:	b085      	sub	sp, #20
1a0049c6:	296e      	cmp	r1, #110	; 0x6e
1a0049c8:	4617      	mov	r7, r2
1a0049ca:	4606      	mov	r6, r0
1a0049cc:	4698      	mov	r8, r3
1a0049ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0049d0:	f000 80b3 	beq.w	1a004b3a <_printf_i+0x182>
1a0049d4:	d822      	bhi.n	1a004a1c <_printf_i+0x64>
1a0049d6:	2963      	cmp	r1, #99	; 0x63
1a0049d8:	d036      	beq.n	1a004a48 <_printf_i+0x90>
1a0049da:	d80a      	bhi.n	1a0049f2 <_printf_i+0x3a>
1a0049dc:	2900      	cmp	r1, #0
1a0049de:	f000 80b9 	beq.w	1a004b54 <_printf_i+0x19c>
1a0049e2:	2958      	cmp	r1, #88	; 0x58
1a0049e4:	f000 8083 	beq.w	1a004aee <_printf_i+0x136>
1a0049e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0049ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0049f0:	e032      	b.n	1a004a58 <_printf_i+0xa0>
1a0049f2:	2964      	cmp	r1, #100	; 0x64
1a0049f4:	d001      	beq.n	1a0049fa <_printf_i+0x42>
1a0049f6:	2969      	cmp	r1, #105	; 0x69
1a0049f8:	d1f6      	bne.n	1a0049e8 <_printf_i+0x30>
1a0049fa:	6820      	ldr	r0, [r4, #0]
1a0049fc:	6813      	ldr	r3, [r2, #0]
1a0049fe:	0605      	lsls	r5, r0, #24
1a004a00:	f103 0104 	add.w	r1, r3, #4
1a004a04:	d52a      	bpl.n	1a004a5c <_printf_i+0xa4>
1a004a06:	681b      	ldr	r3, [r3, #0]
1a004a08:	6011      	str	r1, [r2, #0]
1a004a0a:	2b00      	cmp	r3, #0
1a004a0c:	da03      	bge.n	1a004a16 <_printf_i+0x5e>
1a004a0e:	222d      	movs	r2, #45	; 0x2d
1a004a10:	425b      	negs	r3, r3
1a004a12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004a16:	486f      	ldr	r0, [pc, #444]	; (1a004bd4 <_printf_i+0x21c>)
1a004a18:	220a      	movs	r2, #10
1a004a1a:	e039      	b.n	1a004a90 <_printf_i+0xd8>
1a004a1c:	2973      	cmp	r1, #115	; 0x73
1a004a1e:	f000 809d 	beq.w	1a004b5c <_printf_i+0x1a4>
1a004a22:	d808      	bhi.n	1a004a36 <_printf_i+0x7e>
1a004a24:	296f      	cmp	r1, #111	; 0x6f
1a004a26:	d020      	beq.n	1a004a6a <_printf_i+0xb2>
1a004a28:	2970      	cmp	r1, #112	; 0x70
1a004a2a:	d1dd      	bne.n	1a0049e8 <_printf_i+0x30>
1a004a2c:	6823      	ldr	r3, [r4, #0]
1a004a2e:	f043 0320 	orr.w	r3, r3, #32
1a004a32:	6023      	str	r3, [r4, #0]
1a004a34:	e003      	b.n	1a004a3e <_printf_i+0x86>
1a004a36:	2975      	cmp	r1, #117	; 0x75
1a004a38:	d017      	beq.n	1a004a6a <_printf_i+0xb2>
1a004a3a:	2978      	cmp	r1, #120	; 0x78
1a004a3c:	d1d4      	bne.n	1a0049e8 <_printf_i+0x30>
1a004a3e:	2378      	movs	r3, #120	; 0x78
1a004a40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004a44:	4864      	ldr	r0, [pc, #400]	; (1a004bd8 <_printf_i+0x220>)
1a004a46:	e055      	b.n	1a004af4 <_printf_i+0x13c>
1a004a48:	6813      	ldr	r3, [r2, #0]
1a004a4a:	1d19      	adds	r1, r3, #4
1a004a4c:	681b      	ldr	r3, [r3, #0]
1a004a4e:	6011      	str	r1, [r2, #0]
1a004a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004a58:	2301      	movs	r3, #1
1a004a5a:	e08c      	b.n	1a004b76 <_printf_i+0x1be>
1a004a5c:	681b      	ldr	r3, [r3, #0]
1a004a5e:	6011      	str	r1, [r2, #0]
1a004a60:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004a64:	bf18      	it	ne
1a004a66:	b21b      	sxthne	r3, r3
1a004a68:	e7cf      	b.n	1a004a0a <_printf_i+0x52>
1a004a6a:	6813      	ldr	r3, [r2, #0]
1a004a6c:	6825      	ldr	r5, [r4, #0]
1a004a6e:	1d18      	adds	r0, r3, #4
1a004a70:	6010      	str	r0, [r2, #0]
1a004a72:	0628      	lsls	r0, r5, #24
1a004a74:	d501      	bpl.n	1a004a7a <_printf_i+0xc2>
1a004a76:	681b      	ldr	r3, [r3, #0]
1a004a78:	e002      	b.n	1a004a80 <_printf_i+0xc8>
1a004a7a:	0668      	lsls	r0, r5, #25
1a004a7c:	d5fb      	bpl.n	1a004a76 <_printf_i+0xbe>
1a004a7e:	881b      	ldrh	r3, [r3, #0]
1a004a80:	4854      	ldr	r0, [pc, #336]	; (1a004bd4 <_printf_i+0x21c>)
1a004a82:	296f      	cmp	r1, #111	; 0x6f
1a004a84:	bf14      	ite	ne
1a004a86:	220a      	movne	r2, #10
1a004a88:	2208      	moveq	r2, #8
1a004a8a:	2100      	movs	r1, #0
1a004a8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a004a90:	6865      	ldr	r5, [r4, #4]
1a004a92:	60a5      	str	r5, [r4, #8]
1a004a94:	2d00      	cmp	r5, #0
1a004a96:	f2c0 8095 	blt.w	1a004bc4 <_printf_i+0x20c>
1a004a9a:	6821      	ldr	r1, [r4, #0]
1a004a9c:	f021 0104 	bic.w	r1, r1, #4
1a004aa0:	6021      	str	r1, [r4, #0]
1a004aa2:	2b00      	cmp	r3, #0
1a004aa4:	d13d      	bne.n	1a004b22 <_printf_i+0x16a>
1a004aa6:	2d00      	cmp	r5, #0
1a004aa8:	f040 808e 	bne.w	1a004bc8 <_printf_i+0x210>
1a004aac:	4665      	mov	r5, ip
1a004aae:	2a08      	cmp	r2, #8
1a004ab0:	d10b      	bne.n	1a004aca <_printf_i+0x112>
1a004ab2:	6823      	ldr	r3, [r4, #0]
1a004ab4:	07db      	lsls	r3, r3, #31
1a004ab6:	d508      	bpl.n	1a004aca <_printf_i+0x112>
1a004ab8:	6923      	ldr	r3, [r4, #16]
1a004aba:	6862      	ldr	r2, [r4, #4]
1a004abc:	429a      	cmp	r2, r3
1a004abe:	bfde      	ittt	le
1a004ac0:	2330      	movle	r3, #48	; 0x30
1a004ac2:	f805 3c01 	strble.w	r3, [r5, #-1]
1a004ac6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a004aca:	ebac 0305 	sub.w	r3, ip, r5
1a004ace:	6123      	str	r3, [r4, #16]
1a004ad0:	f8cd 8000 	str.w	r8, [sp]
1a004ad4:	463b      	mov	r3, r7
1a004ad6:	aa03      	add	r2, sp, #12
1a004ad8:	4621      	mov	r1, r4
1a004ada:	4630      	mov	r0, r6
1a004adc:	f7ff fef6 	bl	1a0048cc <_printf_common>
1a004ae0:	3001      	adds	r0, #1
1a004ae2:	d14d      	bne.n	1a004b80 <_printf_i+0x1c8>
1a004ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ae8:	b005      	add	sp, #20
1a004aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004aee:	4839      	ldr	r0, [pc, #228]	; (1a004bd4 <_printf_i+0x21c>)
1a004af0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004af4:	6813      	ldr	r3, [r2, #0]
1a004af6:	6821      	ldr	r1, [r4, #0]
1a004af8:	1d1d      	adds	r5, r3, #4
1a004afa:	681b      	ldr	r3, [r3, #0]
1a004afc:	6015      	str	r5, [r2, #0]
1a004afe:	060a      	lsls	r2, r1, #24
1a004b00:	d50b      	bpl.n	1a004b1a <_printf_i+0x162>
1a004b02:	07ca      	lsls	r2, r1, #31
1a004b04:	bf44      	itt	mi
1a004b06:	f041 0120 	orrmi.w	r1, r1, #32
1a004b0a:	6021      	strmi	r1, [r4, #0]
1a004b0c:	b91b      	cbnz	r3, 1a004b16 <_printf_i+0x15e>
1a004b0e:	6822      	ldr	r2, [r4, #0]
1a004b10:	f022 0220 	bic.w	r2, r2, #32
1a004b14:	6022      	str	r2, [r4, #0]
1a004b16:	2210      	movs	r2, #16
1a004b18:	e7b7      	b.n	1a004a8a <_printf_i+0xd2>
1a004b1a:	064d      	lsls	r5, r1, #25
1a004b1c:	bf48      	it	mi
1a004b1e:	b29b      	uxthmi	r3, r3
1a004b20:	e7ef      	b.n	1a004b02 <_printf_i+0x14a>
1a004b22:	4665      	mov	r5, ip
1a004b24:	fbb3 f1f2 	udiv	r1, r3, r2
1a004b28:	fb02 3311 	mls	r3, r2, r1, r3
1a004b2c:	5cc3      	ldrb	r3, [r0, r3]
1a004b2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004b32:	460b      	mov	r3, r1
1a004b34:	2900      	cmp	r1, #0
1a004b36:	d1f5      	bne.n	1a004b24 <_printf_i+0x16c>
1a004b38:	e7b9      	b.n	1a004aae <_printf_i+0xf6>
1a004b3a:	6813      	ldr	r3, [r2, #0]
1a004b3c:	6825      	ldr	r5, [r4, #0]
1a004b3e:	6961      	ldr	r1, [r4, #20]
1a004b40:	1d18      	adds	r0, r3, #4
1a004b42:	6010      	str	r0, [r2, #0]
1a004b44:	0628      	lsls	r0, r5, #24
1a004b46:	681b      	ldr	r3, [r3, #0]
1a004b48:	d501      	bpl.n	1a004b4e <_printf_i+0x196>
1a004b4a:	6019      	str	r1, [r3, #0]
1a004b4c:	e002      	b.n	1a004b54 <_printf_i+0x19c>
1a004b4e:	066a      	lsls	r2, r5, #25
1a004b50:	d5fb      	bpl.n	1a004b4a <_printf_i+0x192>
1a004b52:	8019      	strh	r1, [r3, #0]
1a004b54:	2300      	movs	r3, #0
1a004b56:	6123      	str	r3, [r4, #16]
1a004b58:	4665      	mov	r5, ip
1a004b5a:	e7b9      	b.n	1a004ad0 <_printf_i+0x118>
1a004b5c:	6813      	ldr	r3, [r2, #0]
1a004b5e:	1d19      	adds	r1, r3, #4
1a004b60:	6011      	str	r1, [r2, #0]
1a004b62:	681d      	ldr	r5, [r3, #0]
1a004b64:	6862      	ldr	r2, [r4, #4]
1a004b66:	2100      	movs	r1, #0
1a004b68:	4628      	mov	r0, r5
1a004b6a:	f000 f839 	bl	1a004be0 <memchr>
1a004b6e:	b108      	cbz	r0, 1a004b74 <_printf_i+0x1bc>
1a004b70:	1b40      	subs	r0, r0, r5
1a004b72:	6060      	str	r0, [r4, #4]
1a004b74:	6863      	ldr	r3, [r4, #4]
1a004b76:	6123      	str	r3, [r4, #16]
1a004b78:	2300      	movs	r3, #0
1a004b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004b7e:	e7a7      	b.n	1a004ad0 <_printf_i+0x118>
1a004b80:	6923      	ldr	r3, [r4, #16]
1a004b82:	462a      	mov	r2, r5
1a004b84:	4639      	mov	r1, r7
1a004b86:	4630      	mov	r0, r6
1a004b88:	47c0      	blx	r8
1a004b8a:	3001      	adds	r0, #1
1a004b8c:	d0aa      	beq.n	1a004ae4 <_printf_i+0x12c>
1a004b8e:	6823      	ldr	r3, [r4, #0]
1a004b90:	079b      	lsls	r3, r3, #30
1a004b92:	d413      	bmi.n	1a004bbc <_printf_i+0x204>
1a004b94:	68e0      	ldr	r0, [r4, #12]
1a004b96:	9b03      	ldr	r3, [sp, #12]
1a004b98:	4298      	cmp	r0, r3
1a004b9a:	bfb8      	it	lt
1a004b9c:	4618      	movlt	r0, r3
1a004b9e:	e7a3      	b.n	1a004ae8 <_printf_i+0x130>
1a004ba0:	2301      	movs	r3, #1
1a004ba2:	464a      	mov	r2, r9
1a004ba4:	4639      	mov	r1, r7
1a004ba6:	4630      	mov	r0, r6
1a004ba8:	47c0      	blx	r8
1a004baa:	3001      	adds	r0, #1
1a004bac:	d09a      	beq.n	1a004ae4 <_printf_i+0x12c>
1a004bae:	3501      	adds	r5, #1
1a004bb0:	68e3      	ldr	r3, [r4, #12]
1a004bb2:	9a03      	ldr	r2, [sp, #12]
1a004bb4:	1a9b      	subs	r3, r3, r2
1a004bb6:	42ab      	cmp	r3, r5
1a004bb8:	dcf2      	bgt.n	1a004ba0 <_printf_i+0x1e8>
1a004bba:	e7eb      	b.n	1a004b94 <_printf_i+0x1dc>
1a004bbc:	2500      	movs	r5, #0
1a004bbe:	f104 0919 	add.w	r9, r4, #25
1a004bc2:	e7f5      	b.n	1a004bb0 <_printf_i+0x1f8>
1a004bc4:	2b00      	cmp	r3, #0
1a004bc6:	d1ac      	bne.n	1a004b22 <_printf_i+0x16a>
1a004bc8:	7803      	ldrb	r3, [r0, #0]
1a004bca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004bce:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004bd2:	e76c      	b.n	1a004aae <_printf_i+0xf6>
1a004bd4:	1a0050a9 	.word	0x1a0050a9
1a004bd8:	1a0050ba 	.word	0x1a0050ba
1a004bdc:	ffffffff 	.word	0xffffffff

1a004be0 <memchr>:
1a004be0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004be4:	2a10      	cmp	r2, #16
1a004be6:	db2b      	blt.n	1a004c40 <memchr+0x60>
1a004be8:	f010 0f07 	tst.w	r0, #7
1a004bec:	d008      	beq.n	1a004c00 <memchr+0x20>
1a004bee:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004bf2:	3a01      	subs	r2, #1
1a004bf4:	428b      	cmp	r3, r1
1a004bf6:	d02d      	beq.n	1a004c54 <memchr+0x74>
1a004bf8:	f010 0f07 	tst.w	r0, #7
1a004bfc:	b342      	cbz	r2, 1a004c50 <memchr+0x70>
1a004bfe:	d1f6      	bne.n	1a004bee <memchr+0xe>
1a004c00:	b4f0      	push	{r4, r5, r6, r7}
1a004c02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004c06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004c0a:	f022 0407 	bic.w	r4, r2, #7
1a004c0e:	f07f 0700 	mvns.w	r7, #0
1a004c12:	2300      	movs	r3, #0
1a004c14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004c18:	3c08      	subs	r4, #8
1a004c1a:	ea85 0501 	eor.w	r5, r5, r1
1a004c1e:	ea86 0601 	eor.w	r6, r6, r1
1a004c22:	fa85 f547 	uadd8	r5, r5, r7
1a004c26:	faa3 f587 	sel	r5, r3, r7
1a004c2a:	fa86 f647 	uadd8	r6, r6, r7
1a004c2e:	faa5 f687 	sel	r6, r5, r7
1a004c32:	b98e      	cbnz	r6, 1a004c58 <memchr+0x78>
1a004c34:	d1ee      	bne.n	1a004c14 <memchr+0x34>
1a004c36:	bcf0      	pop	{r4, r5, r6, r7}
1a004c38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004c3c:	f002 0207 	and.w	r2, r2, #7
1a004c40:	b132      	cbz	r2, 1a004c50 <memchr+0x70>
1a004c42:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004c46:	3a01      	subs	r2, #1
1a004c48:	ea83 0301 	eor.w	r3, r3, r1
1a004c4c:	b113      	cbz	r3, 1a004c54 <memchr+0x74>
1a004c4e:	d1f8      	bne.n	1a004c42 <memchr+0x62>
1a004c50:	2000      	movs	r0, #0
1a004c52:	4770      	bx	lr
1a004c54:	3801      	subs	r0, #1
1a004c56:	4770      	bx	lr
1a004c58:	2d00      	cmp	r5, #0
1a004c5a:	bf06      	itte	eq
1a004c5c:	4635      	moveq	r5, r6
1a004c5e:	3803      	subeq	r0, #3
1a004c60:	3807      	subne	r0, #7
1a004c62:	f015 0f01 	tst.w	r5, #1
1a004c66:	d107      	bne.n	1a004c78 <memchr+0x98>
1a004c68:	3001      	adds	r0, #1
1a004c6a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004c6e:	bf02      	ittt	eq
1a004c70:	3001      	addeq	r0, #1
1a004c72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004c76:	3001      	addeq	r0, #1
1a004c78:	bcf0      	pop	{r4, r5, r6, r7}
1a004c7a:	3801      	subs	r0, #1
1a004c7c:	4770      	bx	lr
1a004c7e:	bf00      	nop
1a004c80:	6e617254 	.word	0x6e617254
1a004c84:	74696d73 	.word	0x74696d73
1a004c88:	ffffff00 	.word	0xffffff00
1a004c8c:	6e696c42 	.word	0x6e696c42
1a004c90:	7720796b 	.word	0x7720796b
1a004c94:	20687469 	.word	0x20687469
1a004c98:	65657266 	.word	0x65657266
1a004c9c:	534f5452 	.word	0x534f5452
1a004ca0:	73207920 	.word	0x73207920
1a004ca4:	2e495041 	.word	0x2e495041
1a004ca8:	0000000d 	.word	0x0000000d
1a004cac:	6e696c42 	.word	0x6e696c42
1a004cb0:	000d216b 	.word	0x000d216b
1a004cb4:	6154796d 	.word	0x6154796d
1a004cb8:	ff006b73 	.word	0xff006b73
1a004cbc:	6c707041 	.word	0x6c707041
1a004cc0:	74616369 	.word	0x74616369
1a004cc4:	206e6f69 	.word	0x206e6f69
1a004cc8:	6c6c614d 	.word	0x6c6c614d
1a004ccc:	4620636f 	.word	0x4620636f
1a004cd0:	656c6961 	.word	0x656c6961
1a004cd4:	6f482064 	.word	0x6f482064
1a004cd8:	0d216b6f 	.word	0x0d216b6f
1a004cdc:	00000000 	.word	0x00000000
1a004ce0:	7362696c 	.word	0x7362696c
1a004ce4:	6572662f 	.word	0x6572662f
1a004ce8:	6f747265 	.word	0x6f747265
1a004cec:	6f732f73 	.word	0x6f732f73
1a004cf0:	65637275 	.word	0x65637275
1a004cf4:	6f6f682f 	.word	0x6f6f682f
1a004cf8:	632e736b 	.word	0x632e736b
1a004cfc:	ffffff00 	.word	0xffffff00
1a004d00:	70410a0d 	.word	0x70410a0d
1a004d04:	63696c70 	.word	0x63696c70
1a004d08:	6f697461 	.word	0x6f697461
1a004d0c:	7453206e 	.word	0x7453206e
1a004d10:	206b6361 	.word	0x206b6361
1a004d14:	7265764f 	.word	0x7265764f
1a004d18:	776f6c66 	.word	0x776f6c66
1a004d1c:	6f202121 	.word	0x6f202121
1a004d20:	6154206e 	.word	0x6154206e
1a004d24:	203a6b73 	.word	0x203a6b73
1a004d28:	0a0d7325 	.word	0x0a0d7325
1a004d2c:	ffffff00 	.word	0xffffff00
1a004d30:	41760a0d 	.word	0x41760a0d
1a004d34:	72657373 	.word	0x72657373
1a004d38:	6c614374 	.word	0x6c614374
1a004d3c:	2864656c 	.word	0x2864656c
1a004d40:	200a0d29 	.word	0x200a0d29
1a004d44:	4c4c2020 	.word	0x4c4c2020
1a004d48:	20656e69 	.word	0x20656e69
1a004d4c:	626d754e 	.word	0x626d754e
1a004d50:	3d207265 	.word	0x3d207265
1a004d54:	0d642520 	.word	0x0d642520
1a004d58:	2020200a 	.word	0x2020200a
1a004d5c:	656c6946 	.word	0x656c6946
1a004d60:	6d614e20 	.word	0x6d614e20
1a004d64:	203d2065 	.word	0x203d2065
1a004d68:	0a0d7325 	.word	0x0a0d7325
1a004d6c:	ff000a0d 	.word	0xff000a0d
1a004d70:	454c4449 	.word	0x454c4449
1a004d74:	ffffff00 	.word	0xffffff00
1a004d78:	51726d54 	.word	0x51726d54
1a004d7c:	ffffff00 	.word	0xffffff00
1a004d80:	20726d54 	.word	0x20726d54
1a004d84:	00637653 	.word	0x00637653

1a004d88 <ExtRateIn>:
1a004d88:	00000000                                ....

1a004d8c <GpioButtons>:
1a004d8c:	08000400 09010900                       ........

1a004d94 <GpioLeds>:
1a004d94:	01050005 0e000205 0c010b01              ............

1a004da0 <GpioPorts>:
1a004da0:	03030003 0f050403 05031005 07030603     ................
1a004db0:	ffff0802                                ....

1a004db4 <OscRateIn>:
1a004db4:	00b71b00                                ....

1a004db8 <InitClkStates>:
1a004db8:	01010f01                                ....

1a004dbc <pinmuxing>:
1a004dbc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004dcc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004ddc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004dec:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004dfc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004e0c:	00d50301 00d50401 00160107 00560207     ..............V.
1a004e1c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004e2c:	00570206                                ..W.

1a004e30 <UART_BClock>:
1a004e30:	01a201c2 01620182                       ......b.

1a004e38 <UART_PClock>:
1a004e38:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004e48:	000000ff                                ....

1a004e4c <periph_to_base>:
1a004e4c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004e5c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004e6c:	000100e0 01000100 01200003 00060120     .......... . ...
1a004e7c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004e8c:	01820013 00120182 01a201a2 01c20011     ................
1a004e9c:	001001c2 01e201e2 0202000f 000e0202     ................
1a004eac:	02220222 0223000d 001c0223              "."...#.#...

1a004eb8 <InitClkStates>:
1a004eb8:	00010100 00010909 0001090a 01010701     ................
1a004ec8:	00010902 00010906 0101090c 0001090d     ................
1a004ed8:	0001090e 0001090f 00010910 00010911     ................
1a004ee8:	00010912 00010913 00011114 00011119     ................
1a004ef8:	0001111a 0001111b                       ........

1a004f00 <lpcUarts>:
1a004f00:	40081000 06020406 00180205 40081000     ...@...........@
1a004f10:	09070509 00180706 40082000 00000000     ......... .@....
1a004f20:	00190000 400c1000 07060107 001a0602     .......@........
1a004f30:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004f40:	02020302 001b0204                       ........

1a004f48 <gpioPinsInit>:
1a004f48:	02000104 00050701 05010d03 04080100     ................
1a004f58:	02020002 02000304 00000403 04070002     ................
1a004f68:	030c0300 09050402 05040103 04030208     ................
1a004f78:	04020305 06040504 0802000c 03000b06     ................
1a004f88:	00090607 07060503 060f0504 03030004     ................
1a004f98:	02000404 00050404 06040502 04060200     ................
1a004fa8:	0c050408 05040a04 0003010e 14010a00     ................
1a004fb8:	010f0000 0d000012 00001101 0010010c     ................
1a004fc8:	07070300 000f0300 01000001 00000000     ................
1a004fd8:	000a0600 08060603 06100504 04030005     ................
1a004fe8:	03000106 04090400 04010d05 010b0000     ................
1a004ff8:	0200000f 00000001 00010104 02010800     ................
1a005008:	01090000 09010006 05040002 04010200     ................
1a005018:	02020105 02020504 0e00000a 01000b02     ................
1a005028:	000c020b ffff0c01                       ........

1a005030 <ultrasonicSensorsIrqMap>:
1a005030:	ff020100                                ....

1a005034 <__sf_fake_stderr>:
	...

1a005054 <__sf_fake_stdin>:
	...

1a005074 <__sf_fake_stdout>:
	...

1a005094 <_global_impure_ptr>:
1a005094:	100000cc 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a0050a4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a0050b4:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a0050c4:	64636261 ff006665                       abcdef..
